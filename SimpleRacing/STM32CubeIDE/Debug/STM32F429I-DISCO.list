
STM32F429I-DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001423c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019d0  080143ec  080143ec  000153ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000053d2  08015dbc  08015dbc  00016dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000001c0  0801b190  0801b190  0001c190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000042  0801b350  0801b350  0001c350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 ExtFlashSection 000dd3f0  0801b394  0801b394  0001c394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  080f8784  080f8784  000fa0f0  2**0
                  CONTENTS
  8 .ARM          00000008  080f8784  080f8784  000f9784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  080f878c  080f878c  000fa0f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  080f878c  080f878c  000f978c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  080f87a0  080f87a0  000f97a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         000000f0  20000000  080f87a8  000fa000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          000128dc  200000f0  080f8898  000fa0f0  2**2
                  ALLOC
 14 ._user_heap_stack 00001404  200129cc  080f8898  000fa9cc  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  000fa0f0  2**0
                  CONTENTS, READONLY
 16 TouchGFX_Framebuffer 00070800  d0000000  d0000000  000fb000  2**2
                  ALLOC
 17 .debug_line   0004f44f  00000000  00000000  000fa120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000072  00000000  00000000  0014956f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_info   000ada78  00000000  00000000  001495e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 0001480d  00000000  00000000  001f7059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00003018  00000000  00000000  0020b868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0011ad69  00000000  00000000  0020e880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_rnglists 00003476  00000000  00000000  003295e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loclists 000186db  00000000  00000000  0032ca5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_macro  00031272  00000000  00000000  0034513a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000c2  00000000  00000000  003763ac  2**0
                  CONTENTS, READONLY
 27 .debug_frame  000084e0  00000000  00000000  00376470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000f0 	.word	0x200000f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080143d4 	.word	0x080143d4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000f4 	.word	0x200000f4
 80001ec:	080143d4 	.word	0x080143d4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000580:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005b8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000584:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000586:	e003      	b.n	8000590 <LoopCopyDataInit>

08000588 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000588:	4b0c      	ldr	r3, [pc, #48]	@ (80005bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800058a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800058c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800058e:	3104      	adds	r1, #4

08000590 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000590:	480b      	ldr	r0, [pc, #44]	@ (80005c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000592:	4b0c      	ldr	r3, [pc, #48]	@ (80005c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000594:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000596:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000598:	d3f6      	bcc.n	8000588 <CopyDataInit>
  ldr  r2, =_sbss
 800059a:	4a0b      	ldr	r2, [pc, #44]	@ (80005c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800059c:	e002      	b.n	80005a4 <LoopFillZerobss>

0800059e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800059e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005a0:	f842 3b04 	str.w	r3, [r2], #4

080005a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005a4:	4b09      	ldr	r3, [pc, #36]	@ (80005cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005a8:	d3f9      	bcc.n	800059e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005aa:	f003 fdef 	bl	800418c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ae:	f013 f9a1 	bl	80138f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005b2:	f000 feeb 	bl	800138c <main>
  bx  lr    
 80005b6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80005b8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80005bc:	080f87a8 	.word	0x080f87a8
  ldr  r0, =_sdata
 80005c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80005c4:	200000f0 	.word	0x200000f0
  ldr  r2, =_sbss
 80005c8:	200000f0 	.word	0x200000f0
  ldr  r3, = _ebss
 80005cc:	200129cc 	.word	0x200129cc

080005d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005d0:	e7fe      	b.n	80005d0 <ADC_IRQHandler>

080005d2 <MX_TouchGFX_Init>:
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 80005d2:	f000 bcb9 	b.w	8000f48 <touchgfx_init>

080005d6 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 80005d6:	f000 bd27 	b.w	8001028 <touchgfx_taskEntry>

080005da <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80005da:	4770      	bx	lr

080005dc <_ZN20STM32TouchControllerD0Ev>:
 80005dc:	b510      	push	{r4, lr}
 80005de:	2104      	movs	r1, #4
 80005e0:	4604      	mov	r4, r0
 80005e2:	f012 fea9 	bl	8013338 <_ZdlPvj>
 80005e6:	4620      	mov	r0, r4
 80005e8:	bd10      	pop	{r4, pc}
	...

080005ec <_Z11BSP_TS_Inittt>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 80005ec:	b538      	push	{r3, r4, r5, lr}
    uint8_t ret = TS_ERROR;

    /* Initialize x and y positions boundaries */
    TsXBoundary = XSize;
 80005ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <_Z11BSP_TS_Inittt+0x34>)
    TsYBoundary = YSize;

    /* Read ID and verify if the IO expander is ready */
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80005f0:	4c0c      	ldr	r4, [pc, #48]	@ (8000624 <_Z11BSP_TS_Inittt+0x38>)
    TsXBoundary = XSize;
 80005f2:	8018      	strh	r0, [r3, #0]
    TsYBoundary = YSize;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000628 <_Z11BSP_TS_Inittt+0x3c>)
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80005f6:	2082      	movs	r0, #130	@ 0x82
    TsYBoundary = YSize;
 80005f8:	8019      	strh	r1, [r3, #0]
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80005fa:	6863      	ldr	r3, [r4, #4]
 80005fc:	4798      	blx	r3
 80005fe:	f640 0311 	movw	r3, #2065	@ 0x811
 8000602:	4298      	cmp	r0, r3
 8000604:	d10a      	bne.n	800061c <_Z11BSP_TS_Inittt+0x30>
    {
        /* Initialize the TS driver structure */
        TsDrv = &stmpe811_ts_drv;
 8000606:	4d09      	ldr	r5, [pc, #36]	@ (800062c <_Z11BSP_TS_Inittt+0x40>)
    }

    if (ret == TS_OK)
    {
        /* Initialize the LL TS Driver */
        TsDrv->Init(TS_I2C_ADDRESS);
 8000608:	6823      	ldr	r3, [r4, #0]
        TsDrv = &stmpe811_ts_drv;
 800060a:	602c      	str	r4, [r5, #0]
        TsDrv->Init(TS_I2C_ADDRESS);
 800060c:	2082      	movs	r0, #130	@ 0x82
 800060e:	4798      	blx	r3
        TsDrv->Start(TS_I2C_ADDRESS);
 8000610:	682b      	ldr	r3, [r5, #0]
 8000612:	2082      	movs	r0, #130	@ 0x82
 8000614:	68db      	ldr	r3, [r3, #12]
 8000616:	4798      	blx	r3
 8000618:	2000      	movs	r0, #0
    }

    return ret;
}
 800061a:	bd38      	pop	{r3, r4, r5, pc}
    uint8_t ret = TS_ERROR;
 800061c:	2001      	movs	r0, #1
 800061e:	e7fc      	b.n	800061a <_Z11BSP_TS_Inittt+0x2e>
 8000620:	20000116 	.word	0x20000116
 8000624:	2000004c 	.word	0x2000004c
 8000628:	20000114 	.word	0x20000114
 800062c:	20000118 	.word	0x20000118

08000630 <_ZN20STM32TouchController4initEv>:
    BSP_TS_Init(240, 320);
 8000630:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8000634:	20f0      	movs	r0, #240	@ 0xf0
 8000636:	f7ff bfd9 	b.w	80005ec <_Z11BSP_TS_Inittt>
	...

0800063c <_Z15BSP_TS_GetStateP15TS_StateTypeDef>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 800063c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    static uint32_t _x = 0, _y = 0;
    uint16_t xDiff, yDiff, x, y, xr, yr;

    TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 800063e:	4d33      	ldr	r5, [pc, #204]	@ (800070c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xd0>)
 8000640:	682b      	ldr	r3, [r5, #0]
{
 8000642:	4604      	mov	r4, r0
    TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8000644:	691b      	ldr	r3, [r3, #16]
 8000646:	2082      	movs	r0, #130	@ 0x82
 8000648:	4798      	blx	r3
 800064a:	8020      	strh	r0, [r4, #0]

    if (TsState->TouchDetected)
 800064c:	2800      	cmp	r0, #0
 800064e:	d04a      	beq.n	80006e6 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xaa>
    {
        TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8000650:	682b      	ldr	r3, [r5, #0]
 8000652:	f10d 0206 	add.w	r2, sp, #6
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	a901      	add	r1, sp, #4
 800065a:	2082      	movs	r0, #130	@ 0x82
 800065c:	4798      	blx	r3

        //Ensures the coordinates is within the screen
        if (y > 3700)
 800065e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000662:	f640 6274 	movw	r2, #3700	@ 0xe74
 8000666:	4293      	cmp	r3, r2
 8000668:	d93f      	bls.n	80006ea <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xae>
        {
            y = 3700;
 800066a:	f8ad 2006 	strh.w	r2, [sp, #6]

        /* Y value first correction */
        y -= 180;

        /* Y value second correction */
        y = 3520 - y;
 800066e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000672:	1ad2      	subs	r2, r2, r3
 8000674:	b292      	uxth	r2, r2

        /* Y value third correction */
        yr = y / 11;

        /* Return y position value */
        if (yr <= 0)
 8000676:	2a0a      	cmp	r2, #10
 8000678:	d93d      	bls.n	80006f6 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xba>
        yr = y / 11;
 800067a:	230b      	movs	r3, #11
 800067c:	fbb2 f2f3 	udiv	r2, r2, r3
        {
            yr = 0;
        }
        else if (yr > TsYBoundary)
 8000680:	4b23      	ldr	r3, [pc, #140]	@ (8000710 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xd4>)
 8000682:	881b      	ldrh	r3, [r3, #0]
 8000684:	429a      	cmp	r2, r3
 8000686:	d901      	bls.n	800068c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x50>
        {
            yr = TsYBoundary - 1;
 8000688:	3b01      	subs	r3, #1
 800068a:	b29a      	uxth	r2, r3
        {
        }
        y = yr;

        /* X value first correction */
        if (x <= 3000)
 800068c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8000690:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8000694:	428b      	cmp	r3, r1
 8000696:	d830      	bhi.n	80006fa <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xbe>
        {
            x = 3870 - x;
 8000698:	f5c3 6371 	rsb	r3, r3, #3856	@ 0xf10
 800069c:	330e      	adds	r3, #14
 800069e:	b29b      	uxth	r3, r3
        {
            x = 3800 - x;
        }

        /* X value second correction */
        xr = x / 15;
 80006a0:	210f      	movs	r1, #15
 80006a2:	fbb3 f3f1 	udiv	r3, r3, r1
        /* Return X position value */
        if (xr <= 0)
        {
            xr = 0;
        }
        else if (xr > TsXBoundary)
 80006a6:	491b      	ldr	r1, [pc, #108]	@ (8000714 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xd8>)
 80006a8:	8809      	ldrh	r1, [r1, #0]
 80006aa:	428b      	cmp	r3, r1
 80006ac:	d901      	bls.n	80006b2 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x76>
        {
            xr = TsXBoundary - 1;
 80006ae:	3901      	subs	r1, #1
 80006b0:	b28b      	uxth	r3, r1
        else
        {
        }

        x = xr;
        xDiff = x > _x ? (x - _x) : (_x - x);
 80006b2:	4e19      	ldr	r6, [pc, #100]	@ (8000718 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xdc>)
        yDiff = y > _y ? (y - _y) : (_y - y);
 80006b4:	4d19      	ldr	r5, [pc, #100]	@ (800071c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xe0>)
        xDiff = x > _x ? (x - _x) : (_x - x);
 80006b6:	6830      	ldr	r0, [r6, #0]
        yDiff = y > _y ? (y - _y) : (_y - y);
 80006b8:	682f      	ldr	r7, [r5, #0]
        xDiff = x > _x ? (x - _x) : (_x - x);
 80006ba:	4283      	cmp	r3, r0
 80006bc:	b281      	uxth	r1, r0
 80006be:	bf8c      	ite	hi
 80006c0:	1a59      	subhi	r1, r3, r1
 80006c2:	1ac9      	subls	r1, r1, r3
        yDiff = y > _y ? (y - _y) : (_y - y);
 80006c4:	b2b8      	uxth	r0, r7
 80006c6:	42ba      	cmp	r2, r7
 80006c8:	bf8c      	ite	hi
 80006ca:	1a10      	subhi	r0, r2, r0
 80006cc:	1a80      	subls	r0, r0, r2
        xDiff = x > _x ? (x - _x) : (_x - x);
 80006ce:	b289      	uxth	r1, r1
        yDiff = y > _y ? (y - _y) : (_y - y);
 80006d0:	b280      	uxth	r0, r0

        if (xDiff + yDiff > 5)
 80006d2:	4401      	add	r1, r0
 80006d4:	2905      	cmp	r1, #5
        {
            _x = x;
 80006d6:	bfc8      	it	gt
 80006d8:	6033      	strgt	r3, [r6, #0]
            _y = y;
        }

        /* Update the X position */
        TsState->X = _x;
 80006da:	6833      	ldr	r3, [r6, #0]
            _y = y;
 80006dc:	bfc8      	it	gt
 80006de:	602a      	strgt	r2, [r5, #0]
        TsState->X = _x;
 80006e0:	8063      	strh	r3, [r4, #2]

        /* Update the Y position */
        TsState->Y = _y;
 80006e2:	682b      	ldr	r3, [r5, #0]
 80006e4:	80a3      	strh	r3, [r4, #4]
    }
}
 80006e6:	b003      	add	sp, #12
 80006e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if (y < 180)
 80006ea:	2bb3      	cmp	r3, #179	@ 0xb3
            y = 180;
 80006ec:	bf9c      	itt	ls
 80006ee:	23b4      	movls	r3, #180	@ 0xb4
 80006f0:	f8ad 3006 	strhls.w	r3, [sp, #6]
 80006f4:	e7bb      	b.n	800066e <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x32>
            yr = 0;
 80006f6:	2200      	movs	r2, #0
 80006f8:	e7c8      	b.n	800068c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x50>
            x = 3800 - x;
 80006fa:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 80006fe:	3308      	adds	r3, #8
 8000700:	b29b      	uxth	r3, r3
        if (xr <= 0)
 8000702:	2b0e      	cmp	r3, #14
 8000704:	d8cc      	bhi.n	80006a0 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x64>
            xr = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	e7d3      	b.n	80006b2 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x76>
 800070a:	bf00      	nop
 800070c:	20000118 	.word	0x20000118
 8000710:	20000114 	.word	0x20000114
 8000714:	20000116 	.word	0x20000116
 8000718:	20000110 	.word	0x20000110
 800071c:	2000010c 	.word	0x2000010c

08000720 <_ZN20STM32TouchController11sampleTouchERlS0_>:
{
 8000720:	b537      	push	{r0, r1, r2, r4, r5, lr}
    BSP_TS_GetState(&state);
 8000722:	4668      	mov	r0, sp
{
 8000724:	460d      	mov	r5, r1
 8000726:	4614      	mov	r4, r2
    BSP_TS_GetState(&state);
 8000728:	f7ff ff88 	bl	800063c <_Z15BSP_TS_GetStateP15TS_StateTypeDef>
    if (state.TouchDetected)
 800072c:	f8bd 0000 	ldrh.w	r0, [sp]
 8000730:	b130      	cbz	r0, 8000740 <_ZN20STM32TouchController11sampleTouchERlS0_+0x20>
        x = state.X;
 8000732:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8000736:	602b      	str	r3, [r5, #0]
        y = state.Y;
 8000738:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800073c:	6023      	str	r3, [r4, #0]
        return true;
 800073e:	2001      	movs	r0, #1
}
 8000740:	b003      	add	sp, #12
 8000742:	bd30      	pop	{r4, r5, pc}

08000744 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8000744:	2803      	cmp	r0, #3
 8000746:	d821      	bhi.n	800078c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x48>
 8000748:	e8df f000 	tbb	[pc, r0]
 800074c:	19120b02 	.word	0x19120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8000750:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	fab2 f282 	clz	r2, r2
 8000758:	0952      	lsrs	r2, r2, #5
 800075a:	2104      	movs	r1, #4
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800075c:	480d      	ldr	r0, [pc, #52]	@ (8000794 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 800075e:	f004 b9c1 	b.w	8004ae4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8000762:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8000764:	685a      	ldr	r2, [r3, #4]
 8000766:	fab2 f282 	clz	r2, r2
 800076a:	0952      	lsrs	r2, r2, #5
 800076c:	2108      	movs	r1, #8
 800076e:	e7f5      	b.n	800075c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8000770:	4b07      	ldr	r3, [pc, #28]	@ (8000790 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8000772:	689a      	ldr	r2, [r3, #8]
 8000774:	fab2 f282 	clz	r2, r2
 8000778:	0952      	lsrs	r2, r2, #5
 800077a:	2110      	movs	r1, #16
 800077c:	e7ee      	b.n	800075c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800077e:	4b04      	ldr	r3, [pc, #16]	@ (8000790 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8000780:	68da      	ldr	r2, [r3, #12]
 8000782:	fab2 f282 	clz	r2, r2
 8000786:	0952      	lsrs	r2, r2, #5
 8000788:	2120      	movs	r1, #32
 800078a:	e7e7      	b.n	800075c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
#endif
        break;
    }
}
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	2000011c 	.word	0x2000011c
 8000794:	40021000 	.word	0x40021000

08000798 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8000798:	2803      	cmp	r0, #3
 800079a:	d821      	bhi.n	80007e0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x48>
 800079c:	e8df f000 	tbb	[pc, r0]
 80007a0:	19120b02 	.word	0x19120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 80007a4:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	3a00      	subs	r2, #0
 80007aa:	bf18      	it	ne
 80007ac:	2201      	movne	r2, #1
 80007ae:	2104      	movs	r1, #4
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80007b0:	480d      	ldr	r0, [pc, #52]	@ (80007e8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 80007b2:	f004 b997 	b.w	8004ae4 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 80007b6:	4b0b      	ldr	r3, [pc, #44]	@ (80007e4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 80007b8:	685a      	ldr	r2, [r3, #4]
 80007ba:	3a00      	subs	r2, #0
 80007bc:	bf18      	it	ne
 80007be:	2201      	movne	r2, #1
 80007c0:	2108      	movs	r1, #8
 80007c2:	e7f5      	b.n	80007b0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 80007c4:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 80007c6:	689a      	ldr	r2, [r3, #8]
 80007c8:	3a00      	subs	r2, #0
 80007ca:	bf18      	it	ne
 80007cc:	2201      	movne	r2, #1
 80007ce:	2110      	movs	r1, #16
 80007d0:	e7ee      	b.n	80007b0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80007d2:	4b04      	ldr	r3, [pc, #16]	@ (80007e4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 80007d4:	68da      	ldr	r2, [r3, #12]
 80007d6:	3a00      	subs	r2, #0
 80007d8:	bf18      	it	ne
 80007da:	2201      	movne	r2, #1
 80007dc:	2120      	movs	r1, #32
 80007de:	e7e7      	b.n	80007b0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
#endif
        break;
    }
}
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	2000011c 	.word	0x2000011c
 80007e8:	40021000 	.word	0x40021000

080007ec <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 80007ec:	2803      	cmp	r0, #3
 80007ee:	d80d      	bhi.n	800080c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x20>
 80007f0:	e8df f000 	tbb	[pc, r0]
 80007f4:	0a080602 	.word	0x0a080602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80007f8:	2104      	movs	r1, #4
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80007fa:	4805      	ldr	r0, [pc, #20]	@ (8000810 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>)
 80007fc:	f004 b977 	b.w	8004aee <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000800:	2108      	movs	r1, #8
 8000802:	e7fa      	b.n	80007fa <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8000804:	2110      	movs	r1, #16
 8000806:	e7f8      	b.n	80007fa <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000808:	2120      	movs	r1, #32
 800080a:	e7f6      	b.n	80007fa <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
#endif
        break;
    }
}
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40021000 	.word	0x40021000

08000814 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8000814:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8000816:	2803      	cmp	r0, #3
 8000818:	d811      	bhi.n	800083e <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x2a>
 800081a:	e8df f000 	tbb	[pc, r0]
 800081e:	0a02      	.short	0x0a02
 8000820:	0e0c      	.short	0x0e0c
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000822:	2104      	movs	r1, #4
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000824:	4807      	ldr	r0, [pc, #28]	@ (8000844 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x30>)
 8000826:	f004 f957 	bl	8004ad8 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 800082a:	1e43      	subs	r3, r0, #1
 800082c:	4258      	negs	r0, r3
 800082e:	4158      	adcs	r0, r3
 8000830:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000832:	2108      	movs	r1, #8
 8000834:	e7f6      	b.n	8000824 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8000836:	2110      	movs	r1, #16
 8000838:	e7f4      	b.n	8000824 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800083a:	2120      	movs	r1, #32
 800083c:	e7f2      	b.n	8000824 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
    switch (id)
 800083e:	2000      	movs	r0, #0
 8000840:	e7f3      	b.n	800082a <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8000842:	bf00      	nop
 8000844:	40021000 	.word	0x40021000

08000848 <_ZN8touchgfx4GPIO4initEv>:
{
 8000848:	b570      	push	{r4, r5, r6, lr}
 800084a:	4d08      	ldr	r5, [pc, #32]	@ (800086c <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 800084c:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 800084e:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8000850:	b2e0      	uxtb	r0, r4
 8000852:	f7ff ffdf 	bl	8000814 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8000856:	b118      	cbz	r0, 8000860 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8000858:	682b      	ldr	r3, [r5, #0]
 800085a:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 800085c:	bf18      	it	ne
 800085e:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8000860:	3401      	adds	r4, #1
 8000862:	2c05      	cmp	r4, #5
 8000864:	f105 0504 	add.w	r5, r5, #4
 8000868:	d1f2      	bne.n	8000850 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	2000011c 	.word	0x2000011c

08000870 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8000870:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8000872:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8000876:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 800087a:	4770      	bx	lr

0800087c <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 800087c:	2000      	movs	r0, #0
 800087e:	4770      	bx	lr

08000880 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8000880:	4b03      	ldr	r3, [pc, #12]	@ (8000890 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8000882:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8000884:	3900      	subs	r1, #0
 8000886:	bf18      	it	ne
 8000888:	2101      	movne	r1, #1
 800088a:	7019      	strb	r1, [r3, #0]
    }
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	20012657 	.word	0x20012657

08000894 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8000894:	2000      	movs	r0, #0
 8000896:	4770      	bx	lr

08000898 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8000898:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800089a:	b10b      	cbz	r3, 80008a0 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 800089c:	4608      	mov	r0, r1
 800089e:	4718      	bx	r3
        }
    }
 80008a0:	4770      	bx	lr

080008a2 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 80008a2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80008a6:	4770      	bx	lr

080008a8 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 80008a8:	6840      	ldr	r0, [r0, #4]
 80008aa:	6803      	ldr	r3, [r0, #0]
 80008ac:	699b      	ldr	r3, [r3, #24]
 80008ae:	4718      	bx	r3

080008b0 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
    {
    }
 80008b0:	4770      	bx	lr

080008b2 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
    {
    }
 80008b2:	4770      	bx	lr

080008b4 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80008b4:	4770      	bx	lr
	...

080008b8 <_ZN11TouchGFXHAL10initializeEv>:

LOCATION_PRAGMA("TouchGFX_Framebuffer")
uint32_t animationStorage[(240 * 320 * 2 + 3) / 4] LOCATION_ATTRIBUTE("TouchGFX_Framebuffer");

void TouchGFXHAL::initialize()
{
 80008b8:	b570      	push	{r4, r5, r6, lr}
 80008ba:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80008bc:	f000 fc54 	bl	8001168 <_ZN20TouchGFXGeneratedHAL10initializeEv>

    // existing frame buffers are re-used. just add animation storage
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationStorage);
 80008c0:	6823      	ldr	r3, [r4, #0]
 80008c2:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 80008c6:	4b04      	ldr	r3, [pc, #16]	@ (80008d8 <_ZN11TouchGFXHAL10initializeEv+0x20>)
 80008c8:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 80008cc:	4620      	mov	r0, r4
 80008ce:	46ac      	mov	ip, r5
}
 80008d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationStorage);
 80008d4:	4760      	bx	ip
 80008d6:	bf00      	nop
 80008d8:	d0000000 	.word	0xd0000000

080008dc <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 80008dc:	b508      	push	{r3, lr}
    enableLCDControllerInterrupt();
 80008de:	6803      	ldr	r3, [r0, #0]
{
 80008e0:	4604      	mov	r4, r0
    enableLCDControllerInterrupt();
 80008e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80008e6:	4798      	blx	r3
    enableInterrupts();
 80008e8:	6823      	ldr	r3, [r4, #0]
 80008ea:	4620      	mov	r0, r4
 80008ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80008ee:	4798      	blx	r3

    OSWrappers::waitForVSync();
 80008f0:	f000 f8ec 	bl	8000acc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 80008f4:	6823      	ldr	r3, [r4, #0]
 80008f6:	4620      	mov	r0, r4
 80008f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80008fa:	4798      	blx	r3

    LCD_IO_WriteReg(0x29);
 80008fc:	2029      	movs	r0, #41	@ 0x29
 80008fe:	f001 f807 	bl	8001910 <LCD_IO_WriteReg>

    for (;;)
    {
        OSWrappers::waitForVSync();
 8000902:	f000 f8e3 	bl	8000acc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8000906:	6823      	ldr	r3, [r4, #0]
 8000908:	4620      	mov	r0, r4
 800090a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800090c:	4798      	blx	r3
    for (;;)
 800090e:	e7f8      	b.n	8000902 <_ZN11TouchGFXHAL9taskEntryEv+0x26>

08000910 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8000910:	b510      	push	{r4, lr}
 8000912:	4604      	mov	r4, r0
        swapFrameBuffers();
 8000914:	f009 f9e2 	bl	8009cdc <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8000918:	6823      	ldr	r3, [r4, #0]
 800091a:	4620      	mov	r0, r4
 800091c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
    }
 8000920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8000924:	4718      	bx	r3

08000926 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8000926:	f000 bc11 	b.w	800114c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

0800092a <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800092a:	f000 bc15 	b.w	8001158 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

0800092e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800092e:	f000 bc41 	b.w	80011b4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08000932 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8000932:	f000 bbe7 	b.w	8001104 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08000936 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8000936:	f000 bc41 	b.w	80011bc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

0800093a <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800093a:	f000 bc49 	b.w	80011d0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

0800093e <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800093e:	f000 bbeb 	b.w	8001118 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

08000942 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8000942:	f008 bc2b 	b.w	800919c <_ZN8touchgfx3HAL16flushFrameBufferEv>

08000946 <_ZN11TouchGFXHALD0Ev>:
 8000946:	b510      	push	{r4, lr}
 8000948:	217c      	movs	r1, #124	@ 0x7c
 800094a:	4604      	mov	r4, r0
 800094c:	f012 fcf4 	bl	8013338 <_ZdlPvj>
 8000950:	4620      	mov	r0, r4
 8000952:	bd10      	pop	{r4, pc}

08000954 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void performDisplayOrientationChange()
 8000954:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8000956:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
 800095a:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 800095e:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
        if (requestedOrientation != nativeDisplayOrientation)
 8000960:	428c      	cmp	r4, r1
            if (DISPLAY_ROTATION == rotate0)
 8000962:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8000964:	d009      	beq.n	800097a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8000966:	b93a      	cbnz	r2, 8000978 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000968:	4a0a      	ldr	r2, [pc, #40]	@ (8000994 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 800096a:	490b      	ldr	r1, [pc, #44]	@ (8000998 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800096c:	8814      	ldrh	r4, [r2, #0]
                const uint16_t tmp = DISPLAY_HEIGHT;
 800096e:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_WIDTH = tmp;
 8000970:	8010      	strh	r0, [r2, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000972:	800c      	strh	r4, [r1, #0]
                DISPLAY_ROTATION = rotate90;
 8000974:	2201      	movs	r2, #1
            DISPLAY_ROTATION = rotate0;
 8000976:	701a      	strb	r2, [r3, #0]
    }
 8000978:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 800097a:	2a00      	cmp	r2, #0
 800097c:	d0fc      	beq.n	8000978 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800097e:	4a05      	ldr	r2, [pc, #20]	@ (8000994 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000980:	4905      	ldr	r1, [pc, #20]	@ (8000998 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000982:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000984:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8000986:	8010      	strh	r0, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000988:	800c      	strh	r4, [r1, #0]
            DISPLAY_ROTATION = rotate0;
 800098a:	2200      	movs	r2, #0
 800098c:	e7f3      	b.n	8000976 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 800098e:	bf00      	nop
 8000990:	20012650 	.word	0x20012650
 8000994:	2001264c 	.word	0x2001264c
 8000998:	2001264e 	.word	0x2001264e

0800099c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 800099c:	b570      	push	{r4, r5, r6, lr}
 800099e:	460d      	mov	r5, r1
 80009a0:	4619      	mov	r1, r3
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80009a2:	b935      	cbnz	r5, 80009b2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x16>
 80009a4:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 80009a6:	4a0a      	ldr	r2, [pc, #40]	@ (80009d0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 80009a8:	480a      	ldr	r0, [pc, #40]	@ (80009d4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 80009aa:	f240 21d2 	movw	r1, #722	@ 0x2d2
 80009ae:	f012 fcf1 	bl	8013394 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80009b2:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80009b6:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 80009b8:	3a00      	subs	r2, #0
 80009ba:	bf18      	it	ne
 80009bc:	2201      	movne	r2, #1
 80009be:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 80009c0:	6803      	ldr	r3, [r0, #0]
    }
 80009c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setAnimationStorage(animationStorage);
 80009c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009ca:	4718      	bx	r3
 80009cc:	08014444 	.word	0x08014444
 80009d0:	0801447c 	.word	0x0801447c
 80009d4:	080144ca 	.word	0x080144ca
 80009d8:	20012656 	.word	0x20012656

080009dc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80009dc:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80009de:	4b09      	ldr	r3, [pc, #36]	@ (8000a04 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	428b      	cmp	r3, r1
 80009e4:	d803      	bhi.n	80009ee <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 80009e6:	4b08      	ldr	r3, [pc, #32]	@ (8000a08 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 80009e8:	881b      	ldrh	r3, [r3, #0]
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d905      	bls.n	80009fa <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 80009ee:	4b07      	ldr	r3, [pc, #28]	@ (8000a0c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 80009f0:	4a07      	ldr	r2, [pc, #28]	@ (8000a10 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 80009f2:	4808      	ldr	r0, [pc, #32]	@ (8000a14 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 80009f4:	219e      	movs	r1, #158	@ 0x9e
 80009f6:	f012 fccd 	bl	8013394 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 80009fa:	4b07      	ldr	r3, [pc, #28]	@ (8000a18 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 80009fc:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 80009fe:	4b07      	ldr	r3, [pc, #28]	@ (8000a1c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8000a00:	801a      	strh	r2, [r3, #0]
    }
 8000a02:	bd08      	pop	{r3, pc}
 8000a04:	2001264c 	.word	0x2001264c
 8000a08:	2001264e 	.word	0x2001264e
 8000a0c:	0801450f 	.word	0x0801450f
 8000a10:	08014572 	.word	0x08014572
 8000a14:	080144ca 	.word	0x080144ca
 8000a18:	20012652 	.word	0x20012652
 8000a1c:	20012654 	.word	0x20012654

08000a20 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8000a20:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 8000a22:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 8000a26:	b118      	cbz	r0, 8000a30 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8000a28:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 8000a2a:	6803      	ldr	r3, [r0, #0]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4718      	bx	r3
    }
 8000a30:	4770      	bx	lr
	...

08000a34 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8000a34:	2101      	movs	r1, #1
{
 8000a36:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8000a38:	2200      	movs	r2, #0
 8000a3a:	4608      	mov	r0, r1
 8000a3c:	f006 f873 	bl	8006b26 <osSemaphoreNew>
 8000a40:	4b0a      	ldr	r3, [pc, #40]	@ (8000a6c <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8000a42:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8000a44:	b928      	cbnz	r0, 8000a52 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8000a46:	4b0a      	ldr	r3, [pc, #40]	@ (8000a70 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8000a48:	4a0a      	ldr	r2, [pc, #40]	@ (8000a74 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8000a4a:	2128      	movs	r1, #40	@ 0x28

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8000a4c:	480a      	ldr	r0, [pc, #40]	@ (8000a78 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8000a4e:	f012 fca1 	bl	8013394 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2104      	movs	r1, #4
 8000a56:	2001      	movs	r0, #1
 8000a58:	f006 f90d 	bl	8006c76 <osMessageQueueNew>
 8000a5c:	4b07      	ldr	r3, [pc, #28]	@ (8000a7c <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8000a5e:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8000a60:	b918      	cbnz	r0, 8000a6a <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8000a62:	4b07      	ldr	r3, [pc, #28]	@ (8000a80 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8000a64:	4a03      	ldr	r2, [pc, #12]	@ (8000a74 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8000a66:	212c      	movs	r1, #44	@ 0x2c
 8000a68:	e7f0      	b.n	8000a4c <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8000a6a:	bd08      	pop	{r3, pc}
 8000a6c:	20000130 	.word	0x20000130
 8000a70:	08014690 	.word	0x08014690
 8000a74:	080146d9 	.word	0x080146d9
 8000a78:	08014708 	.word	0x08014708
 8000a7c:	2000012c 	.word	0x2000012c
 8000a80:	08014761 	.word	0x08014761

08000a84 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8000a84:	4b02      	ldr	r3, [pc, #8]	@ (8000a90 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8000a86:	f04f 31ff 	mov.w	r1, #4294967295
 8000a8a:	6818      	ldr	r0, [r3, #0]
 8000a8c:	f006 b895 	b.w	8006bba <osSemaphoreAcquire>
 8000a90:	20000130 	.word	0x20000130

08000a94 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8000a94:	4b01      	ldr	r3, [pc, #4]	@ (8000a9c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8000a96:	6818      	ldr	r0, [r3, #0]
 8000a98:	f006 b8bb 	b.w	8006c12 <osSemaphoreRelease>
 8000a9c:	20000130 	.word	0x20000130

08000aa0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8000aa0:	4b02      	ldr	r3, [pc, #8]	@ (8000aac <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	6818      	ldr	r0, [r3, #0]
 8000aa6:	f006 b888 	b.w	8006bba <osSemaphoreAcquire>
 8000aaa:	bf00      	nop
 8000aac:	20000130 	.word	0x20000130

08000ab0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 8000ab0:	f7ff bff0 	b.w	8000a94 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08000ab4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8000ab4:	4803      	ldr	r0, [pc, #12]	@ (8000ac4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8000ab6:	4904      	ldr	r1, [pc, #16]	@ (8000ac8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8000ab8:	6800      	ldr	r0, [r0, #0]
 8000aba:	2300      	movs	r3, #0
 8000abc:	461a      	mov	r2, r3
 8000abe:	f006 b915 	b.w	8006cec <osMessageQueuePut>
 8000ac2:	bf00      	nop
 8000ac4:	2000012c 	.word	0x2000012c
 8000ac8:	20000004 	.word	0x20000004

08000acc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8000acc:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8000ace:	4c08      	ldr	r4, [pc, #32]	@ (8000af0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	a901      	add	r1, sp, #4
 8000ad6:	6820      	ldr	r0, [r4, #0]
 8000ad8:	f006 f939 	bl	8006d4e <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8000adc:	6820      	ldr	r0, [r4, #0]
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	a901      	add	r1, sp, #4
 8000ae6:	f006 f932 	bl	8006d4e <osMessageQueueGet>
}
 8000aea:	b002      	add	sp, #8
 8000aec:	bd10      	pop	{r4, pc}
 8000aee:	bf00      	nop
 8000af0:	2000012c 	.word	0x2000012c

08000af4 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8000af4:	6803      	ldr	r3, [r0, #0]
 8000af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af8:	4718      	bx	r3

08000afa <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8000afa:	2001      	movs	r0, #1
 8000afc:	4770      	bx	lr

08000afe <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8000afe:	6803      	ldr	r3, [r0, #0]
 8000b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b02:	4718      	bx	r3

08000b04 <_ZN8STM32DMA10initializeEv>:
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}

void STM32DMA::initialize()
{
 8000b04:	b082      	sub	sp, #8
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	9301      	str	r3, [sp, #4]
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b40 <_ZN8STM32DMA10initializeEv+0x3c>)
 8000b0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b0e:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000b12:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b16:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 8000b1a:	9201      	str	r2, [sp, #4]
 8000b1c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8000b1e:	691a      	ldr	r2, [r3, #16]
 8000b20:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000b24:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8000b26:	691a      	ldr	r2, [r3, #16]
 8000b28:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8000b2c:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8000b2e:	4b05      	ldr	r3, [pc, #20]	@ (8000b44 <_ZN8STM32DMA10initializeEv+0x40>)
 8000b30:	4a05      	ldr	r2, [pc, #20]	@ (8000b48 <_ZN8STM32DMA10initializeEv+0x44>)
 8000b32:	611a      	str	r2, [r3, #16]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b34:	4b05      	ldr	r3, [pc, #20]	@ (8000b4c <_ZN8STM32DMA10initializeEv+0x48>)
 8000b36:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000b3a:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8000b3c:	b002      	add	sp, #8
 8000b3e:	4770      	bx	lr
 8000b40:	40023800 	.word	0x40023800
 8000b44:	20001778 	.word	0x20001778
 8000b48:	08000ddd 	.word	0x08000ddd
 8000b4c:	e000e100 	.word	0xe000e100

08000b50 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8000b50:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8000b54:	4770      	bx	lr
	...

08000b58 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8000b58:	4b05      	ldr	r3, [pc, #20]	@ (8000b70 <_ZN8STM32DMAD1Ev+0x18>)
 8000b5a:	6003      	str	r3, [r0, #0]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b5c:	4b05      	ldr	r3, [pc, #20]	@ (8000b74 <_ZN8STM32DMAD1Ev+0x1c>)
 8000b5e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000b62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b66:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b6a:	f3bf 8f6f 	isb	sy
}
 8000b6e:	4770      	bx	lr
 8000b70:	0801490c 	.word	0x0801490c
 8000b74:	e000e100 	.word	0xe000e100

08000b78 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8000b78:	b510      	push	{r4, lr}
 8000b7a:	4604      	mov	r4, r0
}
 8000b7c:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 8000b80:	f7ff ffea 	bl	8000b58 <_ZN8STM32DMAD1Ev>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f012 fbd7 	bl	8013338 <_ZdlPvj>
 8000b8a:	4620      	mov	r0, r4
 8000b8c:	bd10      	pop	{r4, pc}
	...

08000b90 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8000b90:	b508      	push	{r3, lr}
    switch (format)
 8000b92:	280a      	cmp	r0, #10
 8000b94:	d809      	bhi.n	8000baa <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8000b96:	e8df f000 	tbb	[pc, r0]
 8000b9a:	1006      	.short	0x1006
 8000b9c:	0808080e 	.word	0x0808080e
 8000ba0:	10101008 	.word	0x10101008
 8000ba4:	10          	.byte	0x10
 8000ba5:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8000ba6:	2002      	movs	r0, #2
}
 8000ba8:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8000baa:	4b05      	ldr	r3, [pc, #20]	@ (8000bc0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8000bac:	4a05      	ldr	r2, [pc, #20]	@ (8000bc4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8000bae:	4806      	ldr	r0, [pc, #24]	@ (8000bc8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8000bb0:	2187      	movs	r1, #135	@ 0x87
 8000bb2:	f012 fbef 	bl	8013394 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	e7f6      	b.n	8000ba8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8000bba:	2001      	movs	r0, #1
    return dma2dColorMode;
 8000bbc:	e7f4      	b.n	8000ba8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8000bbe:	bf00      	nop
 8000bc0:	080147a3 	.word	0x080147a3
 8000bc4:	080147be 	.word	0x080147be
 8000bc8:	08014809 	.word	0x08014809

08000bcc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8000bcc:	b538      	push	{r3, r4, r5, lr}
 8000bce:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000bd0:	7f88      	ldrb	r0, [r1, #30]
 8000bd2:	f7ff ffdd 	bl	8000b90 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000bd6:	8aa5      	ldrh	r5, [r4, #20]
 8000bd8:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000bda:	4b16      	ldr	r3, [pc, #88]	@ (8000c34 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>)

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000bdc:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000bde:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000be0:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8000be4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000be6:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000be8:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000bea:	1b52      	subs	r2, r2, r5
 8000bec:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8000bee:	6825      	ldr	r5, [r4, #0]
 8000bf0:	2d08      	cmp	r5, #8
 8000bf2:	d10e      	bne.n	8000c12 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000bf4:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000bf6:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000bf8:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8000bfa:	7f20      	ldrb	r0, [r4, #28]
 8000bfc:	4a0e      	ldr	r2, [pc, #56]	@ (8000c38 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6c>)
 8000bfe:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8000c02:	61da      	str	r2, [r3, #28]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8000c04:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000c06:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8000c08:	4a0c      	ldr	r2, [pc, #48]	@ (8000c3c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x70>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000c0a:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000c0c:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8000c0e:	601a      	str	r2, [r3, #0]
    }
}
 8000c10:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8000c12:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8000c14:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8000c16:	611a      	str	r2, [r3, #16]
 8000c18:	68e1      	ldr	r1, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8000c1a:	0a0a      	lsrs	r2, r1, #8
 8000c1c:	0948      	lsrs	r0, r1, #5
 8000c1e:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8000c22:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8000c26:	4302      	orrs	r2, r0
 8000c28:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8000c30:	4a03      	ldr	r2, [pc, #12]	@ (8000c40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>)
 8000c32:	e7ec      	b.n	8000c0e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8000c34:	4002b000 	.word	0x4002b000
 8000c38:	00010009 	.word	0x00010009
 8000c3c:	00020201 	.word	0x00020201
 8000c40:	00030201 	.word	0x00030201

08000c44 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8000c44:	b508      	push	{r3, lr}
    switch (format)
 8000c46:	280b      	cmp	r0, #11
 8000c48:	d80b      	bhi.n	8000c62 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8000c4a:	e8df f000 	tbb	[pc, r0]
 8000c4e:	1206      	.short	0x1206
 8000c50:	0a0a0a10 	.word	0x0a0a0a10
 8000c54:	0808080a 	.word	0x0808080a
 8000c58:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8000c5a:	2002      	movs	r0, #2
}
 8000c5c:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8000c5e:	2005      	movs	r0, #5
        break;
 8000c60:	e7fc      	b.n	8000c5c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8000c62:	4b05      	ldr	r3, [pc, #20]	@ (8000c78 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8000c64:	4a05      	ldr	r2, [pc, #20]	@ (8000c7c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8000c66:	4806      	ldr	r0, [pc, #24]	@ (8000c80 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8000c68:	2166      	movs	r1, #102	@ 0x66
 8000c6a:	f012 fb93 	bl	8013394 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8000c6e:	2000      	movs	r0, #0
 8000c70:	e7f4      	b.n	8000c5c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8000c72:	2001      	movs	r0, #1
    return dma2dColorMode;
 8000c74:	e7f2      	b.n	8000c5c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8000c76:	bf00      	nop
 8000c78:	080147a3 	.word	0x080147a3
 8000c7c:	08014860 	.word	0x08014860
 8000c80:	08014809 	.word	0x08014809

08000c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8000c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8000c88:	f891 801d 	ldrb.w	r8, [r1, #29]
{
 8000c8c:	460c      	mov	r4, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8000c8e:	4640      	mov	r0, r8
 8000c90:	f7ff ffd8 	bl	8000c44 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000c94:	7fa7      	ldrb	r7, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8000c96:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000c98:	4638      	mov	r0, r7
 8000c9a:	f7ff ffd3 	bl	8000c44 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8000c9e:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000ca0:	4638      	mov	r0, r7
 8000ca2:	f7ff ff75 	bl	8000b90 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000ca6:	8aa1      	ldrh	r1, [r4, #20]
 8000ca8:	8b62      	ldrh	r2, [r4, #26]
 8000caa:	4b44      	ldr	r3, [pc, #272]	@ (8000dbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8000cac:	1a52      	subs	r2, r2, r1
 8000cae:	641a      	str	r2, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000cb0:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8000cb2:	8b22      	ldrh	r2, [r4, #24]
 8000cb4:	1a52      	subs	r2, r2, r1
 8000cb6:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000cb8:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000cba:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000cbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cc0:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000cc2:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8000cc4:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000cc6:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8000cc8:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8000cca:	6820      	ldr	r0, [r4, #0]
 8000ccc:	2880      	cmp	r0, #128	@ 0x80
 8000cce:	d028      	beq.n	8000d22 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 8000cd0:	7f22      	ldrb	r2, [r4, #28]
 8000cd2:	d80f      	bhi.n	8000cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x70>
 8000cd4:	2820      	cmp	r0, #32
 8000cd6:	d067      	beq.n	8000da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x124>
 8000cd8:	2840      	cmp	r0, #64	@ 0x40
 8000cda:	d065      	beq.n	8000da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x124>
 8000cdc:	2804      	cmp	r0, #4
 8000cde:	d01a      	beq.n	8000d16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000ce0:	4b36      	ldr	r3, [pc, #216]	@ (8000dbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8000ce2:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 8000ce6:	f445 3500 	orr.w	r5, r5, #131072	@ 0x20000
        if (blitOp.srcFormat != blitOp.dstFormat)
 8000cea:	45b8      	cmp	r8, r7
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000cec:	61dd      	str	r5, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8000cee:	d061      	beq.n	8000db4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x130>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8000cf0:	4a33      	ldr	r2, [pc, #204]	@ (8000dc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 8000cf2:	e044      	b.n	8000d7e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
    switch (blitOp.operation)
 8000cf4:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8000cf8:	d004      	beq.n	8000d04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 8000cfa:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8000cfe:	d1ef      	bne.n	8000ce0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d00:	4830      	ldr	r0, [pc, #192]	@ (8000dc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 8000d02:	e000      	b.n	8000d06 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x82>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d04:	4830      	ldr	r0, [pc, #192]	@ (8000dc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d06:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 8000d0a:	61da      	str	r2, [r3, #28]
 8000d0c:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000d0e:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000d10:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000d12:	6159      	str	r1, [r3, #20]
 8000d14:	e032      	b.n	8000d7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf8>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d16:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 8000d1a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d1e:	61da      	str	r2, [r3, #28]
 8000d20:	e7f6      	b.n	8000d10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8000d22:	68a0      	ldr	r0, [r4, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8000d24:	1d02      	adds	r2, r0, #4
 8000d26:	62da      	str	r2, [r3, #44]	@ 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d28:	7f22      	ldrb	r2, [r4, #28]
 8000d2a:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 8000d2e:	f445 3500 	orr.w	r5, r5, #131072	@ 0x20000
 8000d32:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000d34:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000d36:	6159      	str	r1, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 8000d38:	7801      	ldrb	r1, [r0, #0]
 8000d3a:	b141      	cbz	r1, 8000d4e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xca>
 8000d3c:	2901      	cmp	r1, #1
 8000d3e:	d021      	beq.n	8000d84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
                assert(0 && "Unsupported format");
 8000d40:	4b22      	ldr	r3, [pc, #136]	@ (8000dcc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8000d42:	4a23      	ldr	r2, [pc, #140]	@ (8000dd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 8000d44:	4823      	ldr	r0, [pc, #140]	@ (8000dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
 8000d46:	f240 1111 	movw	r1, #273	@ 0x111
 8000d4a:	f012 fb23 	bl	8013394 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000d4e:	69da      	ldr	r2, [r3, #28]
 8000d50:	8841      	ldrh	r1, [r0, #2]
 8000d52:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8000d56:	3901      	subs	r1, #1
 8000d58:	f022 0210 	bic.w	r2, r2, #16
 8000d5c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000d60:	61da      	str	r2, [r3, #28]
            bool blend = true;
 8000d62:	2101      	movs	r1, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8000d64:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8000d66:	69da      	ldr	r2, [r3, #28]
 8000d68:	f042 0220 	orr.w	r2, r2, #32
 8000d6c:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8000d6e:	69da      	ldr	r2, [r3, #28]
 8000d70:	0692      	lsls	r2, r2, #26
 8000d72:	d4fc      	bmi.n	8000d6e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xea>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8000d74:	2210      	movs	r2, #16
 8000d76:	609a      	str	r2, [r3, #8]
            if (blend)
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d0b9      	beq.n	8000cf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000d7c:	4a16      	ldr	r2, [pc, #88]	@ (8000dd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8000d7e:	601a      	str	r2, [r3, #0]
}
 8000d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if (blitOp.alpha == 255)
 8000d84:	f1b2 01ff 	subs.w	r1, r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000d88:	69da      	ldr	r2, [r3, #28]
 8000d8a:	8840      	ldrh	r0, [r0, #2]
 8000d8c:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8000d90:	f100 30ff 	add.w	r0, r0, #4294967295
 8000d94:	f022 0210 	bic.w	r2, r2, #16
 8000d98:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8000d9c:	f042 0210 	orr.w	r2, r2, #16
                if (blitOp.alpha == 255)
 8000da0:	bf18      	it	ne
 8000da2:	2101      	movne	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000da4:	61da      	str	r2, [r3, #28]
                break;
 8000da6:	e7dd      	b.n	8000d64 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000da8:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 8000dac:	4b03      	ldr	r3, [pc, #12]	@ (8000dbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8000dae:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000db2:	e7b4      	b.n	8000d1e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9a>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8000db4:	f240 2201 	movw	r2, #513	@ 0x201
 8000db8:	e7e1      	b.n	8000d7e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
 8000dba:	bf00      	nop
 8000dbc:	4002b000 	.word	0x4002b000
 8000dc0:	00010201 	.word	0x00010201
 8000dc4:	00020009 	.word	0x00020009
 8000dc8:	0002000a 	.word	0x0002000a
 8000dcc:	080148aa 	.word	0x080148aa
 8000dd0:	080148c4 	.word	0x080148c4
 8000dd4:	08014809 	.word	0x08014809
 8000dd8:	00020201 	.word	0x00020201

08000ddc <DMA2D_XferCpltCallback>:
        return instance;
 8000ddc:	4b02      	ldr	r3, [pc, #8]	@ (8000de8 <DMA2D_XferCpltCallback+0xc>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8000de2:	6803      	ldr	r3, [r0, #0]
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	4718      	bx	r3
 8000de8:	20012658 	.word	0x20012658

08000dec <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8000dec:	b570      	push	{r4, r5, r6, lr}
 8000dee:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8000df0:	4625      	mov	r5, r4
 8000df2:	4b0a      	ldr	r3, [pc, #40]	@ (8000e1c <_ZN8STM32DMAC1Ev+0x30>)
 8000df4:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8000df6:	2600      	movs	r6, #0
 8000df8:	6060      	str	r0, [r4, #4]
 8000dfa:	7226      	strb	r6, [r4, #8]
 8000dfc:	7266      	strb	r6, [r4, #9]
 8000dfe:	f845 3b20 	str.w	r3, [r5], #32
 8000e02:	2260      	movs	r2, #96	@ 0x60
 8000e04:	4629      	mov	r1, r5
 8000e06:	f009 f8a7 	bl	8009f58 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8000e0a:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 8000e0e:	60ee      	str	r6, [r5, #12]
 8000e10:	3524      	adds	r5, #36	@ 0x24
 8000e12:	429d      	cmp	r5, r3
 8000e14:	d1fb      	bne.n	8000e0e <_ZN8STM32DMAC1Ev+0x22>
}
 8000e16:	4620      	mov	r0, r4
 8000e18:	bd70      	pop	{r4, r5, r6, pc}
 8000e1a:	bf00      	nop
 8000e1c:	0801490c 	.word	0x0801490c

08000e20 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8000e20:	2001      	movs	r0, #1
 8000e22:	4770      	bx	lr

08000e24 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8000e24:	2038      	movs	r0, #56	@ 0x38
 8000e26:	4770      	bx	lr

08000e28 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8000e28:	2338      	movs	r3, #56	@ 0x38
 8000e2a:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8000e2e:	3008      	adds	r0, #8
 8000e30:	4770      	bx	lr

08000e32 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8000e32:	2338      	movs	r3, #56	@ 0x38
 8000e34:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8000e38:	3008      	adds	r0, #8
 8000e3a:	4770      	bx	lr

08000e3c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	4770      	bx	lr

08000e40 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8000e40:	f44f 705d 	mov.w	r0, #884	@ 0x374
 8000e44:	4770      	bx	lr

08000e46 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000e46:	f44f 735d 	mov.w	r3, #884	@ 0x374
 8000e4a:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8000e4e:	3008      	adds	r0, #8
 8000e50:	4770      	bx	lr

08000e52 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000e52:	f44f 735d 	mov.w	r3, #884	@ 0x374
 8000e56:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8000e5a:	3008      	adds	r0, #8
 8000e5c:	4770      	bx	lr

08000e5e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8000e5e:	2001      	movs	r0, #1
 8000e60:	4770      	bx	lr

08000e62 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8000e62:	2010      	movs	r0, #16
 8000e64:	4770      	bx	lr

08000e66 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000e66:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8000e6a:	3008      	adds	r0, #8
 8000e6c:	4770      	bx	lr

08000e6e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000e6e:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8000e72:	3008      	adds	r0, #8
 8000e74:	4770      	bx	lr

08000e76 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8000e76:	4608      	mov	r0, r1
 8000e78:	f001 bcac 	b.w	80027d4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

08000e7c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8000e7c:	b510      	push	{r4, lr}
 8000e7e:	4b03      	ldr	r3, [pc, #12]	@ (8000e8c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x10>)
 8000e80:	6003      	str	r3, [r0, #0]
 8000e82:	4604      	mov	r4, r0
 8000e84:	f007 fee1 	bl	8008c4a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8000e88:	4620      	mov	r0, r4
 8000e8a:	bd10      	pop	{r4, pc}
 8000e8c:	080149c4 	.word	0x080149c4

08000e90 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 8000e90:	b510      	push	{r4, lr}
 8000e92:	4604      	mov	r4, r0
 8000e94:	f7ff fff2 	bl	8000e7c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8000e98:	4620      	mov	r0, r4
 8000e9a:	2140      	movs	r1, #64	@ 0x40
 8000e9c:	f012 fa4c 	bl	8013338 <_ZdlPvj>
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	bd10      	pop	{r4, pc}

08000ea4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8000ea4:	b510      	push	{r4, lr}
 8000ea6:	4b03      	ldr	r3, [pc, #12]	@ (8000eb4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8000ea8:	6003      	str	r3, [r0, #0]
 8000eaa:	4604      	mov	r4, r0
 8000eac:	f007 fecd 	bl	8008c4a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8000eb0:	4620      	mov	r0, r4
 8000eb2:	bd10      	pop	{r4, pc}
 8000eb4:	08014990 	.word	0x08014990

08000eb8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8000eb8:	b510      	push	{r4, lr}
 8000eba:	4604      	mov	r4, r0
 8000ebc:	f7ff fff2 	bl	8000ea4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8000ec0:	4620      	mov	r0, r4
 8000ec2:	f44f 715f 	mov.w	r1, #892	@ 0x37c
 8000ec6:	f012 fa37 	bl	8013338 <_ZdlPvj>
 8000eca:	4620      	mov	r0, r4
 8000ecc:	bd10      	pop	{r4, pc}
	...

08000ed0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8000ed0:	b510      	push	{r4, lr}
 8000ed2:	4b03      	ldr	r3, [pc, #12]	@ (8000ee0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8000ed4:	6003      	str	r3, [r0, #0]
 8000ed6:	4604      	mov	r4, r0
 8000ed8:	f007 feb7 	bl	8008c4a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8000edc:	4620      	mov	r0, r4
 8000ede:	bd10      	pop	{r4, pc}
 8000ee0:	0801495c 	.word	0x0801495c

08000ee4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8000ee4:	b510      	push	{r4, lr}
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	f7ff fff2 	bl	8000ed0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8000eec:	4620      	mov	r0, r4
 8000eee:	2118      	movs	r1, #24
 8000ef0:	f012 fa22 	bl	8013338 <_ZdlPvj>
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	bd10      	pop	{r4, pc}

08000ef8 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8000ef8:	b510      	push	{r4, lr}
 8000efa:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <_ZN12FrontendHeapD1Ev+0x24>)
 8000efc:	6003      	str	r3, [r0, #0]
 8000efe:	4604      	mov	r4, r0
 8000f00:	f500 706a 	add.w	r0, r0, #936	@ 0x3a8
 8000f04:	f7ff ffba 	bl	8000e7c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8000f08:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8000f0c:	f7ff ffca 	bl	8000ea4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8000f10:	f104 0014 	add.w	r0, r4, #20
 8000f14:	f7ff ffdc 	bl	8000ed0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8000f18:	4620      	mov	r0, r4
 8000f1a:	bd10      	pop	{r4, pc}
 8000f1c:	080149f8 	.word	0x080149f8

08000f20 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8000f20:	b508      	push	{r3, lr}
 8000f22:	4802      	ldr	r0, [pc, #8]	@ (8000f2c <__tcf_0+0xc>)
 8000f24:	f7ff ffe8 	bl	8000ef8 <_ZN12FrontendHeapD1Ev>
 8000f28:	bd08      	pop	{r3, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000fe8 	.word	0x20000fe8

08000f30 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8000f30:	b510      	push	{r4, lr}
 8000f32:	4604      	mov	r4, r0
 8000f34:	f7ff ffe0 	bl	8000ef8 <_ZN12FrontendHeapD1Ev>
 8000f38:	4620      	mov	r0, r4
 8000f3a:	f44f 61aa 	mov.w	r1, #1360	@ 0x550
 8000f3e:	f012 f9fb 	bl	8013338 <_ZdlPvj>
 8000f42:	4620      	mov	r0, r4
 8000f44:	bd10      	pop	{r4, pc}
	...

08000f48 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 320);

void touchgfx_init()
{
 8000f48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8000f4c:	f001 f8ac 	bl	80020a8 <_ZN14BitmapDatabase11getInstanceEv>
 8000f50:	4605      	mov	r5, r0
 8000f52:	f001 f8ad 	bl	80020b0 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8000f56:	2400      	movs	r4, #0
 8000f58:	4601      	mov	r1, r0
 8000f5a:	4623      	mov	r3, r4
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	4622      	mov	r2, r4
 8000f60:	9400      	str	r4, [sp, #0]
 8000f62:	f00f fb57 	bl	8010614 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8000f66:	4b25      	ldr	r3, [pc, #148]	@ (8000ffc <touchgfx_init+0xb4>)
 8000f68:	4a25      	ldr	r2, [pc, #148]	@ (8001000 <touchgfx_init+0xb8>)
        static FrontendHeap instance;
 8000f6a:	4d26      	ldr	r5, [pc, #152]	@ (8001004 <touchgfx_init+0xbc>)
 8000f6c:	601a      	str	r2, [r3, #0]
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8000f6e:	4620      	mov	r0, r4
 8000f70:	f002 fb98 	bl	80036a4 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8000f74:	4824      	ldr	r0, [pc, #144]	@ (8001008 <touchgfx_init+0xc0>)
 8000f76:	f00f fab5 	bl	80104e4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8000f7a:	682b      	ldr	r3, [r5, #0]
 8000f7c:	f3bf 8f5b 	dmb	ish
 8000f80:	07db      	lsls	r3, r3, #31
 8000f82:	d435      	bmi.n	8000ff0 <touchgfx_init+0xa8>
 8000f84:	4628      	mov	r0, r5
 8000f86:	f012 f9d9 	bl	801333c <__cxa_guard_acquire>
 8000f8a:	b388      	cbz	r0, 8000ff0 <touchgfx_init+0xa8>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 8000f8c:	4c1f      	ldr	r4, [pc, #124]	@ (800100c <touchgfx_init+0xc4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8000f8e:	4b20      	ldr	r3, [pc, #128]	@ (8001010 <touchgfx_init+0xc8>)
 8000f90:	6023      	str	r3, [r4, #0]
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8000f92:	f504 767d 	add.w	r6, r4, #1012	@ 0x3f4
        : presenterStorage(pres),
 8000f96:	f104 0014 	add.w	r0, r4, #20
          screenStorage(scr),
 8000f9a:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
          transitionStorage(tra),
 8000f9e:	f504 776a 	add.w	r7, r4, #936	@ 0x3a8
        : presenterStorage(pres),
 8000fa2:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 8000fa4:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 8000fa8:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 8000faa:	6126      	str	r6, [r4, #16]
 8000fac:	f007 fe4e 	bl	8008c4c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8000fb0:	4b18      	ldr	r3, [pc, #96]	@ (8001014 <touchgfx_init+0xcc>)
 8000fb2:	6163      	str	r3, [r4, #20]
 8000fb4:	4640      	mov	r0, r8
 8000fb6:	f007 fe49 	bl	8008c4c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8000fba:	4b17      	ldr	r3, [pc, #92]	@ (8001018 <touchgfx_init+0xd0>)
 8000fbc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000fbe:	4638      	mov	r0, r7
 8000fc0:	f007 fe44 	bl	8008c4c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8000fc4:	4b15      	ldr	r3, [pc, #84]	@ (800101c <touchgfx_init+0xd4>)
 8000fc6:	f8c4 33a8 	str.w	r3, [r4, #936]	@ 0x3a8
 8000fca:	f504 707a 	add.w	r0, r4, #1000	@ 0x3e8
 8000fce:	f002 fbe9 	bl	80037a4 <_ZN5ModelC1Ev>
 8000fd2:	4622      	mov	r2, r4
 8000fd4:	f504 717a 	add.w	r1, r4, #1000	@ 0x3e8
 8000fd8:	4630      	mov	r0, r6
 8000fda:	f002 fbd9 	bl	8003790 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8000fde:	4630      	mov	r0, r6
 8000fe0:	f001 fbf8 	bl	80027d4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 8000fe4:	480e      	ldr	r0, [pc, #56]	@ (8001020 <touchgfx_init+0xd8>)
 8000fe6:	f012 f9f3 	bl	80133d0 <atexit>
 8000fea:	4628      	mov	r0, r5
 8000fec:	f012 f9b2 	bl	8013354 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8000ff0:	480c      	ldr	r0, [pc, #48]	@ (8001024 <touchgfx_init+0xdc>)
}
 8000ff2:	b002      	add	sp, #8
 8000ff4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8000ff8:	f7ff bc5e 	b.w	80008b8 <_ZN11TouchGFXHAL10initializeEv>
 8000ffc:	200126b4 	.word	0x200126b4
 8001000:	200001b0 	.word	0x200001b0
 8001004:	20000fe4 	.word	0x20000fe4
 8001008:	20000008 	.word	0x20000008
 800100c:	20000fe8 	.word	0x20000fe8
 8001010:	080149f8 	.word	0x080149f8
 8001014:	0801495c 	.word	0x0801495c
 8001018:	08014990 	.word	0x08014990
 800101c:	080149c4 	.word	0x080149c4
 8001020:	08000f21 	.word	0x08000f21
 8001024:	20000134 	.word	0x20000134

08001028 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8001028:	4801      	ldr	r0, [pc, #4]	@ (8001030 <touchgfx_taskEntry+0x8>)
 800102a:	f7ff bc57 	b.w	80008dc <_ZN11TouchGFXHAL9taskEntryEv>
 800102e:	bf00      	nop
 8001030:	20000134 	.word	0x20000134

08001034 <_GLOBAL__sub_I_touchgfx_init>:
}
 8001034:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 8001036:	4e22      	ldr	r6, [pc, #136]	@ (80010c0 <_GLOBAL__sub_I_touchgfx_init+0x8c>)
{
public:

    STM32TouchController() {}
 8001038:	4c22      	ldr	r4, [pc, #136]	@ (80010c4 <_GLOBAL__sub_I_touchgfx_init+0x90>)
static LCD16bpp display;
 800103a:	4d23      	ldr	r5, [pc, #140]	@ (80010c8 <_GLOBAL__sub_I_touchgfx_init+0x94>)
 800103c:	4b23      	ldr	r3, [pc, #140]	@ (80010cc <_GLOBAL__sub_I_touchgfx_init+0x98>)
 800103e:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 8001040:	4630      	mov	r0, r6
 8001042:	f7ff fed3 	bl	8000dec <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8001046:	4628      	mov	r0, r5
 8001048:	f010 f944 	bl	80112d4 <_ZN8touchgfx8LCD16bppC1Ev>
        : dma(dmaInterface),
 800104c:	4b20      	ldr	r3, [pc, #128]	@ (80010d0 <_GLOBAL__sub_I_touchgfx_init+0x9c>)
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800104e:	4821      	ldr	r0, [pc, #132]	@ (80010d4 <_GLOBAL__sub_I_touchgfx_init+0xa0>)
          touchController(touchCtrl),
 8001050:	60dc      	str	r4, [r3, #12]
          mcuInstrumentation(0),
 8001052:	2200      	movs	r2, #0
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8001054:	f44f 7180 	mov.w	r1, #256	@ 0x100
          auxiliaryLCD(0),
 8001058:	e9c3 1212 	strd	r1, r2, [r3, #72]	@ 0x48
          touchSampleRate(1),
 800105c:	491e      	ldr	r1, [pc, #120]	@ (80010d8 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 800105e:	861a      	strh	r2, [r3, #48]	@ 0x30
          vSyncCompensationEnabled(false),
 8001060:	e9c3 121a 	strd	r1, r2, [r3, #104]	@ 0x68
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8001064:	491d      	ldr	r1, [pc, #116]	@ (80010dc <_GLOBAL__sub_I_touchgfx_init+0xa8>)
 8001066:	6799      	str	r1, [r3, #120]	@ 0x78
        instance = this;
 8001068:	491d      	ldr	r1, [pc, #116]	@ (80010e0 <_GLOBAL__sub_I_touchgfx_init+0xac>)
          useAuxiliaryLCD(false),
 800106a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        instance = this;
 800106e:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001070:	21f0      	movs	r1, #240	@ 0xf0
 8001072:	8001      	strh	r1, [r0, #0]
 8001074:	481b      	ldr	r0, [pc, #108]	@ (80010e4 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
          lastY(0),
 8001076:	665a      	str	r2, [r3, #100]	@ 0x64
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001078:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800107a:	481b      	ldr	r0, [pc, #108]	@ (80010e8 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
          updateMCULoad(0),
 800107c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001080:	f44f 71a0 	mov.w	r1, #320	@ 0x140
          buttonController(0),
 8001084:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8001088:	e9c3 2206 	strd	r2, r2, [r3, #24]
 800108c:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8001090:	e9c3 220a 	strd	r2, r2, [r3, #40]	@ 0x28
          frameBuffer0(0),
 8001094:	e9c3 220e 	strd	r2, r2, [r3, #56]	@ 0x38
          frameBuffer2(0),
 8001098:	e9c3 2210 	strd	r2, r2, [r3, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 800109c:	e9c3 2214 	strd	r2, r2, [r3, #80]	@ 0x50
          lastX(0),
 80010a0:	e9c3 2217 	strd	r2, r2, [r3, #92]	@ 0x5c
          cc_begin(0),
 80010a4:	675a      	str	r2, [r3, #116]	@ 0x74
          lcdRef(display),
 80010a6:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80010aa:	8001      	strh	r1, [r0, #0]
 80010ac:	480f      	ldr	r0, [pc, #60]	@ (80010ec <_GLOBAL__sub_I_touchgfx_init+0xb8>)
 80010ae:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 80010b0:	490f      	ldr	r1, [pc, #60]	@ (80010f0 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
 80010b2:	700a      	strb	r2, [r1, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80010b4:	2201      	movs	r2, #1
 80010b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80010ba:	4a0e      	ldr	r2, [pc, #56]	@ (80010f4 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
 80010bc:	601a      	str	r2, [r3, #0]
}
 80010be:	bd70      	pop	{r4, r5, r6, pc}
 80010c0:	20000240 	.word	0x20000240
 80010c4:	20000fe0 	.word	0x20000fe0
 80010c8:	200001b4 	.word	0x200001b4
 80010cc:	08014434 	.word	0x08014434
 80010d0:	20000134 	.word	0x20000134
 80010d4:	2001264c 	.word	0x2001264c
 80010d8:	01000001 	.word	0x01000001
 80010dc:	01010000 	.word	0x01010000
 80010e0:	20012658 	.word	0x20012658
 80010e4:	20012652 	.word	0x20012652
 80010e8:	2001264e 	.word	0x2001264e
 80010ec:	20012654 	.word	0x20012654
 80010f0:	20012650 	.word	0x20012650
 80010f4:	080145c0 	.word	0x080145c0

080010f8 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 80010f8:	4801      	ldr	r0, [pc, #4]	@ (8001100 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 80010fa:	f7ff bd2d 	b.w	8000b58 <_ZN8STM32DMAD1Ev>
 80010fe:	bf00      	nop
 8001100:	20000240 	.word	0x20000240

08001104 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001104:	4b03      	ldr	r3, [pc, #12]	@ (8001114 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 8001106:	2290      	movs	r2, #144	@ 0x90
 8001108:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
 800110c:	f883 2358 	strb.w	r2, [r3, #856]	@ 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000e100 	.word	0xe000e100

08001118 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8001118:	4a09      	ldr	r2, [pc, #36]	@ (8001140 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 800111a:	490a      	ldr	r1, [pc, #40]	@ (8001144 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 800111c:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800111e:	480a      	ldr	r0, [pc, #40]	@ (8001148 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8001120:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001124:	3b01      	subs	r3, #1
 8001126:	b29b      	uxth	r3, r3
 8001128:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800112a:	6911      	ldr	r1, [r2, #16]
 800112c:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8001130:	3901      	subs	r1, #1
 8001132:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8001134:	6413      	str	r3, [r2, #64]	@ 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8001136:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6353      	str	r3, [r2, #52]	@ 0x34
}
 800113e:	4770      	bx	lr
 8001140:	40016800 	.word	0x40016800
 8001144:	2000153a 	.word	0x2000153a
 8001148:	20001538 	.word	0x20001538

0800114c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    HAL::endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 800114c:	4b01      	ldr	r3, [pc, #4]	@ (8001154 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 800114e:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
}
 8001152:	4770      	bx	lr
 8001154:	40016800 	.word	0x40016800

08001158 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8001158:	4b02      	ldr	r3, [pc, #8]	@ (8001164 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800115a:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800115c:	f8c3 10ac 	str.w	r1, [r3, #172]	@ 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8001160:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001162:	4770      	bx	lr
 8001164:	40016800 	.word	0x40016800

08001168 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8001168:	b570      	push	{r4, r5, r6, lr}
 800116a:	4604      	mov	r4, r0
    HAL::initialize();
 800116c:	f008 f86b 	bl	8009246 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8001170:	6823      	ldr	r3, [r4, #0]
 8001172:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8001174:	f00b fd76 	bl	800cc64 <_ZN8touchgfx11Application11getInstanceEv>
 8001178:	4601      	mov	r1, r0
 800117a:	4620      	mov	r0, r4
 800117c:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 800117e:	6823      	ldr	r3, [r4, #0]
 8001180:	4a05      	ldr	r2, [pc, #20]	@ (8001198 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x30>)
 8001182:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8001186:	4620      	mov	r0, r4
 8001188:	46ac      	mov	ip, r5
 800118a:	2300      	movs	r3, #0
}
 800118c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8001190:	f5a2 3116 	sub.w	r1, r2, #153600	@ 0x25800
 8001194:	4760      	bx	ip
 8001196:	bf00      	nop
 8001198:	d004b000 	.word	0xd004b000

0800119c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 800119c:	f008 b83a 	b.w	8009214 <_ZN8touchgfx3HAL10beginFrameEv>

080011a0 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
 80011a0:	f890 304b 	ldrb.w	r3, [r0, #75]	@ 0x4b
 80011a4:	b113      	cbz	r3, 80011ac <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xc>
        refreshRequested = true;
 80011a6:	4b02      	ldr	r3, [pc, #8]	@ (80011b0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x10>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	701a      	strb	r2, [r3, #0]
    HAL::endFrame();
 80011ac:	f008 b83e 	b.w	800922c <_ZN8touchgfx3HAL8endFrameEv>
 80011b0:	2000153c 	.word	0x2000153c

080011b4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 80011b4:	f007 bff8 	b.w	80091a8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080011b8 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 80011b8:	f008 b959 	b.w	800946e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

080011bc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011bc:	4b03      	ldr	r3, [pc, #12]	@ (80011cc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 80011be:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80011c8:	609a      	str	r2, [r3, #8]
}
 80011ca:	4770      	bx	lr
 80011cc:	e000e100 	.word	0xe000e100

080011d0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011d0:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 80011d2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80011d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80011da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80011de:	f3bf 8f6f 	isb	sy
 80011e2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80011e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80011ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80011ee:	f3bf 8f6f 	isb	sy
}
 80011f2:	4770      	bx	lr
 80011f4:	e000e100 	.word	0xe000e100

080011f8 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 80011f8:	b510      	push	{r4, lr}
        return instance;
 80011fa:	4c14      	ldr	r4, [pc, #80]	@ (800124c <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
 80011fc:	6823      	ldr	r3, [r4, #0]
 80011fe:	b323      	cbz	r3, 800124a <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8001200:	4b13      	ldr	r3, [pc, #76]	@ (8001250 <HAL_LTDC_LineEventCallback+0x58>)
 8001202:	4a14      	ldr	r2, [pc, #80]	@ (8001254 <HAL_LTDC_LineEventCallback+0x5c>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001206:	8811      	ldrh	r1, [r2, #0]
 8001208:	428b      	cmp	r3, r1
 800120a:	d113      	bne.n	8001234 <HAL_LTDC_LineEventCallback+0x3c>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 800120c:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <HAL_LTDC_LineEventCallback+0x60>)
 800120e:	8819      	ldrh	r1, [r3, #0]
 8001210:	f004 fa60 	bl	80056d4 <HAL_LTDC_ProgramLineEvent>
 8001214:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 8001216:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800121a:	3301      	adds	r3, #1
 800121c:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 8001220:	f7ff fc48 	bl	8000ab4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8001224:	6820      	ldr	r0, [r4, #0]
 8001226:	f008 fd59 	bl	8009cdc <_ZN8touchgfx3HAL16swapFrameBuffersEv>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 800122a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 800122e:	2000      	movs	r0, #0
 8001230:	f7ff ba88 	b.w	8000744 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8001234:	f004 fa4e 	bl	80056d4 <HAL_LTDC_ProgramLineEvent>
        return instance;
 8001238:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 800123a:	6803      	ldr	r3, [r0, #0]
 800123c:	6a1b      	ldr	r3, [r3, #32]
 800123e:	4798      	blx	r3
    }
 8001240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001244:	2000      	movs	r0, #0
 8001246:	f7ff baa7 	b.w	8000798 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 800124a:	bd10      	pop	{r4, pc}
 800124c:	20012658 	.word	0x20012658
 8001250:	40016800 	.word	0x40016800
 8001254:	2000153a 	.word	0x2000153a
 8001258:	20001538 	.word	0x20001538

0800125c <SPI5_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI5_Write(uint16_t Value)
{
 800125c:	b507      	push	{r0, r1, r2, lr}
  HAL_StatusTypeDef status = HAL_OK;

  status = HAL_SPI_Transmit(&hspi5, (uint8_t*) &Value, 1, Spi5Timeout);
 800125e:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <SPI5_Write+0x1c>)
{
 8001260:	f8ad 0006 	strh.w	r0, [sp, #6]
  status = HAL_SPI_Transmit(&hspi5, (uint8_t*) &Value, 1, Spi5Timeout);
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4805      	ldr	r0, [pc, #20]	@ (800127c <SPI5_Write+0x20>)
 8001268:	2201      	movs	r2, #1
 800126a:	f10d 0106 	add.w	r1, sp, #6
 800126e:	f004 ff7f 	bl	8006170 <HAL_SPI_Transmit>
  if(status != HAL_OK)
  {
    /* Re-Initialize the BUS */
    SPI5_Error();
  }
}
 8001272:	b003      	add	sp, #12
 8001274:	f85d fb04 	ldr.w	pc, [sp], #4
 8001278:	2000000c 	.word	0x2000000c
 800127c:	20001624 	.word	0x20001624

08001280 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001280:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	osDelay(1);
 8001282:	2001      	movs	r0, #1
 8001284:	f005 fc43 	bl	8006b0e <osDelay>
  for(;;)
 8001288:	e7fb      	b.n	8001282 <StartDefaultTask+0x2>
	...

0800128c <StartHardwarePollingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHardwarePollingTask */
void StartHardwarePollingTask(void *argument)
{
 800128c:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN StartHardwarePollingTask */
  /* Infinite loop */
	uint32_t Joystick;
  for(;;)
  {
     HAL_ADC_Start(&hadc1);
 800128e:	4d14      	ldr	r5, [pc, #80]	@ (80012e0 <StartHardwarePollingTask+0x54>)
     HAL_ADC_Start(&hadc2);
 8001290:	4c14      	ldr	r4, [pc, #80]	@ (80012e4 <StartHardwarePollingTask+0x58>)
     HAL_ADC_PollForConversion (&hadc1, 1);
     HAL_ADC_PollForConversion (&hadc2, 1);
     JoystickX = HAL_ADC_GetValue(&hadc1);
 8001292:	4e15      	ldr	r6, [pc, #84]	@ (80012e8 <StartHardwarePollingTask+0x5c>)
     HAL_ADC_Start(&hadc1);
 8001294:	4628      	mov	r0, r5
 8001296:	f003 f86d 	bl	8004374 <HAL_ADC_Start>
     HAL_ADC_Start(&hadc2);
 800129a:	4620      	mov	r0, r4
 800129c:	f003 f86a 	bl	8004374 <HAL_ADC_Start>
     HAL_ADC_PollForConversion (&hadc1, 1);
 80012a0:	2101      	movs	r1, #1
 80012a2:	4628      	mov	r0, r5
 80012a4:	f003 f8e4 	bl	8004470 <HAL_ADC_PollForConversion>
     HAL_ADC_PollForConversion (&hadc2, 1);
 80012a8:	2101      	movs	r1, #1
 80012aa:	4620      	mov	r0, r4
 80012ac:	f003 f8e0 	bl	8004470 <HAL_ADC_PollForConversion>
     JoystickX = HAL_ADC_GetValue(&hadc1);
 80012b0:	4628      	mov	r0, r5
 80012b2:	f003 f930 	bl	8004516 <HAL_ADC_GetValue>
 80012b6:	8030      	strh	r0, [r6, #0]
     JoystickY = HAL_ADC_GetValue(&hadc2);
 80012b8:	4620      	mov	r0, r4
 80012ba:	f003 f92c 	bl	8004516 <HAL_ADC_GetValue>
 80012be:	4b0b      	ldr	r3, [pc, #44]	@ (80012ec <StartHardwarePollingTask+0x60>)
 80012c0:	8018      	strh	r0, [r3, #0]
     Joystick = (JoystickY << 16) | JoystickX;
 80012c2:	8833      	ldrh	r3, [r6, #0]
 80012c4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     osMessageQueuePut(myQueue01Handle, & Joystick, 0, 10);
 80012c8:	4809      	ldr	r0, [pc, #36]	@ (80012f0 <StartHardwarePollingTask+0x64>)
     Joystick = (JoystickY << 16) | JoystickX;
 80012ca:	9301      	str	r3, [sp, #4]
     osMessageQueuePut(myQueue01Handle, & Joystick, 0, 10);
 80012cc:	2200      	movs	r2, #0
 80012ce:	230a      	movs	r3, #10
 80012d0:	a901      	add	r1, sp, #4
 80012d2:	6800      	ldr	r0, [r0, #0]
 80012d4:	f005 fd0a 	bl	8006cec <osMessageQueuePut>
     osDelay(100);
 80012d8:	2064      	movs	r0, #100	@ 0x64
 80012da:	f005 fc18 	bl	8006b0e <osDelay>
  for(;;)
 80012de:	e7d8      	b.n	8001292 <StartHardwarePollingTask+0x6>
 80012e0:	200015a8 	.word	0x200015a8
 80012e4:	20001560 	.word	0x20001560
 80012e8:	2000155c 	.word	0x2000155c
 80012ec:	2000155a 	.word	0x2000155a
 80012f0:	20001544 	.word	0x20001544

080012f4 <SystemClock_Config>:
{
 80012f4:	b530      	push	{r4, r5, lr}
 80012f6:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012f8:	2210      	movs	r2, #16
 80012fa:	2100      	movs	r1, #0
 80012fc:	a80a      	add	r0, sp, #40	@ 0x28
 80012fe:	f012 fa50 	bl	80137a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001302:	2214      	movs	r2, #20
 8001304:	2100      	movs	r1, #0
 8001306:	a803      	add	r0, sp, #12
 8001308:	f012 fa4b 	bl	80137a2 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 800130c:	2400      	movs	r4, #0
 800130e:	4b1d      	ldr	r3, [pc, #116]	@ (8001384 <SystemClock_Config+0x90>)
 8001310:	9401      	str	r4, [sp, #4]
 8001312:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001314:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001318:	641a      	str	r2, [r3, #64]	@ 0x40
 800131a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001320:	9301      	str	r3, [sp, #4]
 8001322:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001324:	4b18      	ldr	r3, [pc, #96]	@ (8001388 <SystemClock_Config+0x94>)
 8001326:	9402      	str	r4, [sp, #8]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001336:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001338:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800133a:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800133c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001340:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001344:	2502      	movs	r5, #2
 8001346:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800134a:	e9cd 530e 	strd	r5, r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 336;
 800134e:	2108      	movs	r1, #8
 8001350:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001354:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001358:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800135a:	2304      	movs	r3, #4
 800135c:	9313      	str	r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800135e:	9512      	str	r5, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001360:	f004 f9d6 	bl	8005710 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001364:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001366:	e9cd 3503 	strd	r3, r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800136a:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 800136e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001372:	e9cd 0306 	strd	r0, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001376:	2105      	movs	r1, #5
 8001378:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800137a:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800137c:	f004 fba4 	bl	8005ac8 <HAL_RCC_ClockConfig>
}
 8001380:	b015      	add	sp, #84	@ 0x54
 8001382:	bd30      	pop	{r4, r5, pc}
 8001384:	40023800 	.word	0x40023800
 8001388:	40007000 	.word	0x40007000

0800138c <main>:
{
 800138c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001390:	b09b      	sub	sp, #108	@ 0x6c
  HAL_Init();
 8001392:	f002 ff09 	bl	80041a8 <HAL_Init>
  SystemClock_Config();
 8001396:	f7ff ffad 	bl	80012f4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139a:	2214      	movs	r2, #20
 800139c:	2100      	movs	r1, #0
 800139e:	a80d      	add	r0, sp, #52	@ 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013a0:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a2:	f012 f9fe 	bl	80137a2 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013a6:	4bc6      	ldr	r3, [pc, #792]	@ (80016c0 <main+0x334>)
 80013a8:	9400      	str	r4, [sp, #0]
 80013aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOE, VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 80013ac:	48c5      	ldr	r0, [pc, #788]	@ (80016c4 <main+0x338>)
  hi2c3.Instance = I2C3;
 80013ae:	4ec6      	ldr	r6, [pc, #792]	@ (80016c8 <main+0x33c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013b0:	f042 0210 	orr.w	r2, r2, #16
 80013b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80013b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013b8:	f002 0210 	and.w	r2, r2, #16
 80013bc:	9200      	str	r2, [sp, #0]
 80013be:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013c0:	9401      	str	r4, [sp, #4]
 80013c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013c4:	f042 0220 	orr.w	r2, r2, #32
 80013c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80013ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013cc:	f002 0220 	and.w	r2, r2, #32
 80013d0:	9201      	str	r2, [sp, #4]
 80013d2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013d4:	9402      	str	r4, [sp, #8]
 80013d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013d8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80013dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80013de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013e0:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80013e4:	9202      	str	r2, [sp, #8]
 80013e6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e8:	9403      	str	r4, [sp, #12]
 80013ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013ec:	f042 0204 	orr.w	r2, r2, #4
 80013f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80013f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013f4:	f002 0204 	and.w	r2, r2, #4
 80013f8:	9203      	str	r2, [sp, #12]
 80013fa:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fc:	9404      	str	r4, [sp, #16]
 80013fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001400:	f042 0201 	orr.w	r2, r2, #1
 8001404:	631a      	str	r2, [r3, #48]	@ 0x30
 8001406:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001408:	f002 0201 	and.w	r2, r2, #1
 800140c:	9204      	str	r2, [sp, #16]
 800140e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001410:	9405      	str	r4, [sp, #20]
 8001412:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001414:	f042 0202 	orr.w	r2, r2, #2
 8001418:	631a      	str	r2, [r3, #48]	@ 0x30
 800141a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800141c:	f002 0202 	and.w	r2, r2, #2
 8001420:	9205      	str	r2, [sp, #20]
 8001422:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001424:	9406      	str	r4, [sp, #24]
 8001426:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001428:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800142c:	631a      	str	r2, [r3, #48]	@ 0x30
 800142e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001430:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001434:	9206      	str	r2, [sp, #24]
 8001436:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001438:	9407      	str	r4, [sp, #28]
 800143a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800143c:	f042 0208 	orr.w	r2, r2, #8
 8001440:	631a      	str	r2, [r3, #48]	@ 0x30
 8001442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001444:	f003 0308 	and.w	r3, r3, #8
 8001448:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOE, VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 800144a:	4622      	mov	r2, r4
 800144c:	213c      	movs	r1, #60	@ 0x3c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800144e:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOE, VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8001450:	f003 fb48 	bl	8004ae4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001454:	489d      	ldr	r0, [pc, #628]	@ (80016cc <main+0x340>)
 8001456:	4622      	mov	r2, r4
 8001458:	2104      	movs	r1, #4
 800145a:	f003 fb43 	bl	8004ae4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800145e:	4622      	mov	r2, r4
 8001460:	489b      	ldr	r0, [pc, #620]	@ (80016d0 <main+0x344>)
 8001462:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001466:	2501      	movs	r5, #1
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8001468:	f003 fb3c 	bl	8004ae4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146c:	f04f 0a03 	mov.w	sl, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001470:	233c      	movs	r3, #60	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001472:	4894      	ldr	r0, [pc, #592]	@ (80016c4 <main+0x338>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001474:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001478:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800147a:	f04f 0b02 	mov.w	fp, #2
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800147e:	2704      	movs	r7, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001480:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001486:	f003 fa43 	bl	8004910 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800148a:	4890      	ldr	r0, [pc, #576]	@ (80016cc <main+0x340>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800148c:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001490:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001492:	e9cd 750d 	strd	r7, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001498:	f003 fa3a 	bl	8004910 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800149c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014a0:	488b      	ldr	r0, [pc, #556]	@ (80016d0 <main+0x344>)
 80014a2:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a4:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014a8:	e9cd 4b0f 	strd	r4, fp, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ac:	f003 fa30 	bl	8004910 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b0:	4888      	ldr	r0, [pc, #544]	@ (80016d4 <main+0x348>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b4:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b6:	e9cd 540d 	strd	r5, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ba:	f003 fa29 	bl	8004910 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014be:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 80014c0:	230c      	movs	r3, #12
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014c2:	4885      	ldr	r0, [pc, #532]	@ (80016d8 <main+0x34c>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014c4:	950f      	str	r5, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c6:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014ca:	f003 fa21 	bl	8004910 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 80014ce:	4883      	ldr	r0, [pc, #524]	@ (80016dc <main+0x350>)
 80014d0:	4b83      	ldr	r3, [pc, #524]	@ (80016e0 <main+0x354>)
 80014d2:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80014d4:	f003 f910 	bl	80046f8 <HAL_CRC_Init>
  hi2c3.Init.ClockSpeed = 100000;
 80014d8:	4a82      	ldr	r2, [pc, #520]	@ (80016e4 <main+0x358>)
 80014da:	4b83      	ldr	r3, [pc, #524]	@ (80016e8 <main+0x35c>)
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014dc:	6234      	str	r4, [r6, #32]
  hi2c3.Init.ClockSpeed = 100000;
 80014de:	e9c6 2300 	strd	r2, r3, [r6]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014e2:	4630      	mov	r0, r6
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014e4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014e8:	e9c6 3404 	strd	r3, r4, [r6, #16]
  hi2c3.Init.OwnAddress1 = 0;
 80014ec:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014f0:	e9c6 4406 	strd	r4, r4, [r6, #24]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014f4:	f003 fcf2 	bl	8004edc <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80014f8:	2110      	movs	r1, #16
 80014fa:	4630      	mov	r0, r6
 80014fc:	f003 ff2e 	bl	800535c <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001500:	4621      	mov	r1, r4
 8001502:	4630      	mov	r0, r6
 8001504:	f003 ff49 	bl	800539a <HAL_I2CEx_ConfigDigitalFilter>
  hspi5.Instance = SPI5;
 8001508:	4878      	ldr	r0, [pc, #480]	@ (80016ec <main+0x360>)
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800150a:	4979      	ldr	r1, [pc, #484]	@ (80016f0 <main+0x364>)
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800150c:	6284      	str	r4, [r0, #40]	@ 0x28
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800150e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001512:	e9c0 1300 	strd	r1, r3, [r0]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001516:	f44f 7600 	mov.w	r6, #512	@ 0x200
 800151a:	2318      	movs	r3, #24
 800151c:	e9c0 6306 	strd	r6, r3, [r0, #24]
  hspi5.Init.CRCPolynomial = 10;
 8001520:	230a      	movs	r3, #10
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001522:	4e74      	ldr	r6, [pc, #464]	@ (80016f4 <main+0x368>)
  hspi5.Init.CRCPolynomial = 10;
 8001524:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001526:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800152a:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800152e:	e9c0 4408 	strd	r4, r4, [r0, #32]
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001532:	f004 fdc1 	bl	80060b8 <HAL_SPI_Init>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001536:	4b70      	ldr	r3, [pc, #448]	@ (80016f8 <main+0x36c>)
  SdramTiming.LoadToActiveDelay = 2;
 8001538:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800153c:	f04f 0910 	mov.w	r9, #16
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001540:	e9c6 3500 	strd	r3, r5, [r6]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001544:	2340      	movs	r3, #64	@ 0x40
 8001546:	e9c6 9304 	strd	r9, r3, [r6, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800154a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800154e:	e9c6 3406 	strd	r3, r4, [r6, #24]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001552:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001556:	e9c6 3408 	strd	r3, r4, [r6, #32]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800155a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800155e:	62b3      	str	r3, [r6, #40]	@ 0x28
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001560:	a90d      	add	r1, sp, #52	@ 0x34
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001562:	2307      	movs	r3, #7
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001564:	4630      	mov	r0, r6
  SdramTiming.WriteRecoveryTime = 3;
 8001566:	e9cd 3a10 	strd	r3, sl, [sp, #64]	@ 0x40
  SdramTiming.SelfRefreshTime = 4;
 800156a:	e9cd 370e 	strd	r3, r7, [sp, #56]	@ 0x38
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800156e:	f04f 0808 	mov.w	r8, #8
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001572:	e9c6 4702 	strd	r4, r7, [r6, #8]
  SdramTiming.RCDDelay = 2;
 8001576:	e9cd bb12 	strd	fp, fp, [sp, #72]	@ 0x48
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800157a:	f004 fc99 	bl	8005eb0 <HAL_SDRAM_Init>
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800157e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001582:	a909      	add	r1, sp, #36	@ 0x24
 8001584:	4630      	mov	r0, r6
  Command->AutoRefreshNumber       = 1;
 8001586:	e9cd 850a 	strd	r8, r5, [sp, #40]	@ 0x28
 __IO uint32_t tmpmrd =0;
 800158a:	9408      	str	r4, [sp, #32]
  Command->CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 800158c:	9509      	str	r5, [sp, #36]	@ 0x24
  Command->ModeRegisterDefinition  = 0;
 800158e:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001590:	f004 fcae 	bl	8005ef0 <HAL_SDRAM_SendCommand>
  HAL_Delay(1);
 8001594:	4628      	mov	r0, r5
 8001596:	f002 fe33 	bl	8004200 <HAL_Delay>
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 800159a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800159e:	a909      	add	r1, sp, #36	@ 0x24
 80015a0:	4630      	mov	r0, r6
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80015a2:	e9cd b809 	strd	fp, r8, [sp, #36]	@ 0x24
  Command->ModeRegisterDefinition  = 0;
 80015a6:	e9cd 540b 	strd	r5, r4, [sp, #44]	@ 0x2c
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80015aa:	f004 fca1 	bl	8005ef0 <HAL_SDRAM_SendCommand>
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80015ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015b2:	a909      	add	r1, sp, #36	@ 0x24
 80015b4:	4630      	mov	r0, r6
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80015b6:	e9cd a809 	strd	sl, r8, [sp, #36]	@ 0x24
  Command->ModeRegisterDefinition  = 0;
 80015ba:	e9cd 740b 	strd	r7, r4, [sp, #44]	@ 0x2c
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80015be:	f004 fc97 	bl	8005ef0 <HAL_SDRAM_SendCommand>
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80015c2:	f44f 730c 	mov.w	r3, #560	@ 0x230
 80015c6:	9308      	str	r3, [sp, #32]
  Command->ModeRegisterDefinition  = tmpmrd;
 80015c8:	9b08      	ldr	r3, [sp, #32]
 80015ca:	930c      	str	r3, [sp, #48]	@ 0x30
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80015cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015d0:	a909      	add	r1, sp, #36	@ 0x24
 80015d2:	4630      	mov	r0, r6
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80015d4:	e9cd 7809 	strd	r7, r8, [sp, #36]	@ 0x24
  Command->AutoRefreshNumber       = 1;
 80015d8:	950b      	str	r5, [sp, #44]	@ 0x2c
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80015da:	f004 fc89 	bl	8005ef0 <HAL_SDRAM_SendCommand>
  HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 80015de:	f240 516a 	movw	r1, #1386	@ 0x56a
 80015e2:	4630      	mov	r0, r6
 80015e4:	f004 fca2 	bl	8005f2c <HAL_SDRAM_ProgramRefreshRate>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80015e8:	2234      	movs	r2, #52	@ 0x34
 80015ea:	4621      	mov	r1, r4
 80015ec:	eb0d 0002 	add.w	r0, sp, r2
 80015f0:	f012 f8d7 	bl	80137a2 <memset>
  hltdc.Instance = LTDC;
 80015f4:	4e41      	ldr	r6, [pc, #260]	@ (80016fc <main+0x370>)
 80015f6:	4b42      	ldr	r3, [pc, #264]	@ (8001700 <main+0x374>)
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80015f8:	6134      	str	r4, [r6, #16]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80015fa:	e9c6 3400 	strd	r3, r4, [r6]
  hltdc.Init.HorizontalSync = 9;
 80015fe:	2309      	movs	r3, #9
  hltdc.Init.VerticalSync = 1;
 8001600:	e9c6 3505 	strd	r3, r5, [r6, #20]
  hltdc.Init.AccumulatedHBP = 29;
 8001604:	231d      	movs	r3, #29
  hltdc.Init.AccumulatedActiveH = 323;
 8001606:	f240 1c0d 	movw	ip, #269	@ 0x10d
  hltdc.Init.AccumulatedVBP = 3;
 800160a:	e9c6 3a07 	strd	r3, sl, [r6, #28]
  hltdc.Init.AccumulatedActiveH = 323;
 800160e:	f240 1343 	movw	r3, #323	@ 0x143
 8001612:	e9c6 c309 	strd	ip, r3, [r6, #36]	@ 0x24
  hltdc.Init.TotalHeigh = 327;
 8001616:	f240 1e17 	movw	lr, #279	@ 0x117
 800161a:	f240 1347 	movw	r3, #327	@ 0x147
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800161e:	4630      	mov	r0, r6
  hltdc.Init.TotalHeigh = 327;
 8001620:	e9c6 e30b 	strd	lr, r3, [r6, #44]	@ 0x2c
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001624:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hltdc.Init.Backcolor.Blue = 0;
 8001628:	86b4      	strh	r4, [r6, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 800162a:	f886 4036 	strb.w	r4, [r6, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800162e:	f003 ff59 	bl	80054e4 <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 8001632:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.WindowX1 = 240;
 8001634:	22f0      	movs	r2, #240	@ 0xf0
  pLayerCfg.Alpha0 = 0;
 8001636:	e9cd 1412 	strd	r1, r4, [sp, #72]	@ 0x48
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800163a:	f04f 0a05 	mov.w	sl, #5
 800163e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
  pLayerCfg.WindowY1 = 320;
 8001642:	f44f 73a0 	mov.w	r3, #320	@ 0x140
  pLayerCfg.WindowY0 = 0;
 8001646:	e9cd 240e 	strd	r2, r4, [sp, #56]	@ 0x38
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800164a:	e9cd 1a14 	strd	r1, sl, [sp, #80]	@ 0x50
  pLayerCfg.ImageWidth = 240;
 800164e:	e9cd 4216 	strd	r4, r2, [sp, #88]	@ 0x58
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001652:	a90d      	add	r1, sp, #52	@ 0x34
 8001654:	4622      	mov	r2, r4
 8001656:	4630      	mov	r0, r6
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001658:	e9cd 3b10 	strd	r3, fp, [sp, #64]	@ 0x40
  LcdDrv = &ili9341_drv;
 800165c:	4e29      	ldr	r6, [pc, #164]	@ (8001704 <main+0x378>)
  pLayerCfg.ImageHeight = 320;
 800165e:	9318      	str	r3, [sp, #96]	@ 0x60
  pLayerCfg.WindowX0 = 0;
 8001660:	940d      	str	r4, [sp, #52]	@ 0x34
  pLayerCfg.Backcolor.Blue = 0;
 8001662:	f8ad 4064 	strh.w	r4, [sp, #100]	@ 0x64
  pLayerCfg.Backcolor.Red = 0;
 8001666:	f88d 4066 	strb.w	r4, [sp, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800166a:	f004 f806 	bl	800567a <HAL_LTDC_ConfigLayer>
  LcdDrv = &ili9341_drv;
 800166e:	4b26      	ldr	r3, [pc, #152]	@ (8001708 <main+0x37c>)
 8001670:	6033      	str	r3, [r6, #0]
  LcdDrv->Init();
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4798      	blx	r3
  LcdDrv->DisplayOff();
 8001676:	6833      	ldr	r3, [r6, #0]
  hdma2d.Instance = DMA2D;
 8001678:	4e24      	ldr	r6, [pc, #144]	@ (800170c <main+0x380>)
  LcdDrv->DisplayOff();
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	4798      	blx	r3
  hdma2d.Instance = DMA2D;
 800167e:	4b24      	ldr	r3, [pc, #144]	@ (8001710 <main+0x384>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001680:	4630      	mov	r0, r6
  hdma2d.Init.Mode = DMA2D_M2M;
 8001682:	e9c6 3400 	strd	r3, r4, [r6]
  hdma2d.Init.OutputOffset = 0;
 8001686:	e9c6 b402 	strd	fp, r4, [r6, #8]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 800168a:	e9c6 4b0a 	strd	r4, fp, [r6, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800168e:	e9c6 440c 	strd	r4, r4, [r6, #48]	@ 0x30
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001692:	f003 f841 	bl	8004718 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001696:	4629      	mov	r1, r5
 8001698:	4630      	mov	r0, r6
 800169a:	f003 f8f5 	bl	8004888 <HAL_DMA2D_ConfigLayer>
  MX_TouchGFX_Init();
 800169e:	f7fe ff98 	bl	80005d2 <MX_TouchGFX_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 80016a2:	464a      	mov	r2, r9
 80016a4:	4621      	mov	r1, r4
 80016a6:	a80d      	add	r0, sp, #52	@ 0x34
 80016a8:	f012 f87b 	bl	80137a2 <memset>
  hadc1.Instance = ADC1;
 80016ac:	4e19      	ldr	r6, [pc, #100]	@ (8001714 <main+0x388>)
 80016ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001718 <main+0x38c>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016b0:	f8df b068 	ldr.w	fp, [pc, #104]	@ 800171c <main+0x390>
  hadc1.Init.ScanConvMode = DISABLE;
 80016b4:	6134      	str	r4, [r6, #16]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80016b6:	e9c6 3400 	strd	r3, r4, [r6]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016ba:	4630      	mov	r0, r6
 80016bc:	e030      	b.n	8001720 <main+0x394>
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40021000 	.word	0x40021000
 80016c8:	20001724 	.word	0x20001724
 80016cc:	40020800 	.word	0x40020800
 80016d0:	40020c00 	.word	0x40020c00
 80016d4:	40020000 	.word	0x40020000
 80016d8:	40021800 	.word	0x40021800
 80016dc:	200017b8 	.word	0x200017b8
 80016e0:	40023000 	.word	0x40023000
 80016e4:	40005c00 	.word	0x40005c00
 80016e8:	000186a0 	.word	0x000186a0
 80016ec:	20001624 	.word	0x20001624
 80016f0:	40015000 	.word	0x40015000
 80016f4:	200015f0 	.word	0x200015f0
 80016f8:	a0000140 	.word	0xa0000140
 80016fc:	2000167c 	.word	0x2000167c
 8001700:	40016800 	.word	0x40016800
 8001704:	20001540 	.word	0x20001540
 8001708:	20000014 	.word	0x20000014
 800170c:	20001778 	.word	0x20001778
 8001710:	4002b000 	.word	0x4002b000
 8001714:	200015a8 	.word	0x200015a8
 8001718:	40012000 	.word	0x40012000
 800171c:	0f000001 	.word	0x0f000001
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001720:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001724:	60b3      	str	r3, [r6, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001726:	7634      	strb	r4, [r6, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001728:	f886 4020 	strb.w	r4, [r6, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800172c:	62f4      	str	r4, [r6, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800172e:	f8c6 b028 	str.w	fp, [r6, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001732:	60f4      	str	r4, [r6, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001734:	61f5      	str	r5, [r6, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001736:	f886 4030 	strb.w	r4, [r6, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800173a:	6175      	str	r5, [r6, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800173c:	f002 fd74 	bl	8004228 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_13;
 8001740:	220d      	movs	r2, #13
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001742:	a90d      	add	r1, sp, #52	@ 0x34
 8001744:	4630      	mov	r0, r6
  sConfig.Rank = 1;
 8001746:	e9cd 250d 	strd	r2, r5, [sp, #52]	@ 0x34
  hadc2.Instance = ADC2;
 800174a:	4e26      	ldr	r6, [pc, #152]	@ (80017e4 <main+0x458>)
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800174c:	940f      	str	r4, [sp, #60]	@ 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800174e:	f002 fee5 	bl	800451c <HAL_ADC_ConfigChannel>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001752:	4621      	mov	r1, r4
 8001754:	464a      	mov	r2, r9
 8001756:	a80d      	add	r0, sp, #52	@ 0x34
 8001758:	f012 f823 	bl	80137a2 <memset>
  hadc2.Instance = ADC2;
 800175c:	4a22      	ldr	r2, [pc, #136]	@ (80017e8 <main+0x45c>)
  hadc2.Init.ScanConvMode = DISABLE;
 800175e:	6134      	str	r4, [r6, #16]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8001760:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001764:	4630      	mov	r0, r6
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8001766:	60b3      	str	r3, [r6, #8]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001768:	e9c6 2400 	strd	r2, r4, [r6]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800176c:	e9c6 b40a 	strd	fp, r4, [r6, #40]	@ 0x28
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001770:	7634      	strb	r4, [r6, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001772:	f886 4020 	strb.w	r4, [r6, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001776:	60f4      	str	r4, [r6, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001778:	61f5      	str	r5, [r6, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800177a:	f886 4030 	strb.w	r4, [r6, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800177e:	6175      	str	r5, [r6, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001780:	f002 fd52 	bl	8004228 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001784:	a90d      	add	r1, sp, #52	@ 0x34
 8001786:	4630      	mov	r0, r6
  sConfig.Rank = 1;
 8001788:	e9cd a50d 	strd	sl, r5, [sp, #52]	@ 0x34
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800178c:	940f      	str	r4, [sp, #60]	@ 0x3c
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800178e:	f002 fec5 	bl	800451c <HAL_ADC_ConfigChannel>
  osKernelInitialize();
 8001792:	f005 f949 	bl	8006a28 <osKernelInitialize>
  Queue1Handle = osMessageQueueNew (8, sizeof(uint8_t), &Queue1_attributes);
 8001796:	4a15      	ldr	r2, [pc, #84]	@ (80017ec <main+0x460>)
 8001798:	4629      	mov	r1, r5
 800179a:	4640      	mov	r0, r8
 800179c:	f005 fa6b 	bl	8006c76 <osMessageQueueNew>
 80017a0:	4b13      	ldr	r3, [pc, #76]	@ (80017f0 <main+0x464>)
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint32_t), &myQueue01_attributes);
 80017a2:	4a14      	ldr	r2, [pc, #80]	@ (80017f4 <main+0x468>)
  Queue1Handle = osMessageQueueNew (8, sizeof(uint8_t), &Queue1_attributes);
 80017a4:	6018      	str	r0, [r3, #0]
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint32_t), &myQueue01_attributes);
 80017a6:	4639      	mov	r1, r7
 80017a8:	4648      	mov	r0, r9
 80017aa:	f005 fa64 	bl	8006c76 <osMessageQueueNew>
 80017ae:	4b12      	ldr	r3, [pc, #72]	@ (80017f8 <main+0x46c>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80017b0:	4a12      	ldr	r2, [pc, #72]	@ (80017fc <main+0x470>)
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint32_t), &myQueue01_attributes);
 80017b2:	6018      	str	r0, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80017b4:	4621      	mov	r1, r4
 80017b6:	4812      	ldr	r0, [pc, #72]	@ (8001800 <main+0x474>)
 80017b8:	f005 f962 	bl	8006a80 <osThreadNew>
 80017bc:	4b11      	ldr	r3, [pc, #68]	@ (8001804 <main+0x478>)
  polling_taskHandle = osThreadNew(StartHardwarePollingTask, NULL, &polling_task_attributes);
 80017be:	4a12      	ldr	r2, [pc, #72]	@ (8001808 <main+0x47c>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80017c0:	6018      	str	r0, [r3, #0]
  polling_taskHandle = osThreadNew(StartHardwarePollingTask, NULL, &polling_task_attributes);
 80017c2:	4621      	mov	r1, r4
 80017c4:	4811      	ldr	r0, [pc, #68]	@ (800180c <main+0x480>)
 80017c6:	f005 f95b 	bl	8006a80 <osThreadNew>
 80017ca:	4b11      	ldr	r3, [pc, #68]	@ (8001810 <main+0x484>)
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 80017cc:	4a11      	ldr	r2, [pc, #68]	@ (8001814 <main+0x488>)
  polling_taskHandle = osThreadNew(StartHardwarePollingTask, NULL, &polling_task_attributes);
 80017ce:	6018      	str	r0, [r3, #0]
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 80017d0:	4621      	mov	r1, r4
 80017d2:	4811      	ldr	r0, [pc, #68]	@ (8001818 <main+0x48c>)
 80017d4:	f005 f954 	bl	8006a80 <osThreadNew>
 80017d8:	4b10      	ldr	r3, [pc, #64]	@ (800181c <main+0x490>)
 80017da:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80017dc:	f005 f936 	bl	8006a4c <osKernelStart>
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <main+0x454>
 80017e2:	bf00      	nop
 80017e4:	20001560 	.word	0x20001560
 80017e8:	40012100 	.word	0x40012100
 80017ec:	08014a50 	.word	0x08014a50
 80017f0:	20001548 	.word	0x20001548
 80017f4:	08014a38 	.word	0x08014a38
 80017f8:	20001544 	.word	0x20001544
 80017fc:	08014ab0 	.word	0x08014ab0
 8001800:	08001281 	.word	0x08001281
 8001804:	20001554 	.word	0x20001554
 8001808:	08014a68 	.word	0x08014a68
 800180c:	0800128d 	.word	0x0800128d
 8001810:	2000154c 	.word	0x2000154c
 8001814:	08014a8c 	.word	0x08014a8c
 8001818:	080005d7 	.word	0x080005d7
 800181c:	20001550 	.word	0x20001550

08001820 <IOE_Init>:
void IOE_Init(void)
 8001820:	4770      	bx	lr

08001822 <IOE_ITConfig>:
void IOE_ITConfig(void)
 8001822:	4770      	bx	lr

08001824 <IOE_Write>:
{
 8001824:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  status = HAL_I2C_Mem_Write(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2c3Timeout);
 8001826:	4b09      	ldr	r3, [pc, #36]	@ (800184c <IOE_Write+0x28>)
 8001828:	f88d 2017 	strb.w	r2, [sp, #23]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	9302      	str	r3, [sp, #8]
 8001830:	f10d 0217 	add.w	r2, sp, #23
 8001834:	2301      	movs	r3, #1
 8001836:	9200      	str	r2, [sp, #0]
 8001838:	9301      	str	r3, [sp, #4]
 800183a:	460a      	mov	r2, r1
 800183c:	4601      	mov	r1, r0
 800183e:	4804      	ldr	r0, [pc, #16]	@ (8001850 <IOE_Write+0x2c>)
 8001840:	f003 fbf4 	bl	800502c <HAL_I2C_Mem_Write>
}
 8001844:	b007      	add	sp, #28
 8001846:	f85d fb04 	ldr.w	pc, [sp], #4
 800184a:	bf00      	nop
 800184c:	20000010 	.word	0x20000010
 8001850:	20001724 	.word	0x20001724

08001854 <IOE_Read>:
{
 8001854:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t value = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2c3Timeout);
 800185c:	4b08      	ldr	r3, [pc, #32]	@ (8001880 <IOE_Read+0x2c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	9302      	str	r3, [sp, #8]
{
 8001862:	460a      	mov	r2, r1
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2c3Timeout);
 8001864:	2301      	movs	r3, #1
 8001866:	f10d 0117 	add.w	r1, sp, #23
 800186a:	9100      	str	r1, [sp, #0]
 800186c:	9301      	str	r3, [sp, #4]
 800186e:	4601      	mov	r1, r0
 8001870:	4804      	ldr	r0, [pc, #16]	@ (8001884 <IOE_Read+0x30>)
 8001872:	f003 fc6b 	bl	800514c <HAL_I2C_Mem_Read>
}
 8001876:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800187a:	b007      	add	sp, #28
 800187c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001880:	20000010 	.word	0x20000010
 8001884:	20001724 	.word	0x20001724

08001888 <IOE_ReadMultiple>:
{
 8001888:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2c3Timeout);
 800188a:	4c08      	ldr	r4, [pc, #32]	@ (80018ac <IOE_ReadMultiple+0x24>)
 800188c:	6824      	ldr	r4, [r4, #0]
 800188e:	9200      	str	r2, [sp, #0]
 8001890:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001894:	460a      	mov	r2, r1
 8001896:	2301      	movs	r3, #1
 8001898:	4601      	mov	r1, r0
 800189a:	4805      	ldr	r0, [pc, #20]	@ (80018b0 <IOE_ReadMultiple+0x28>)
 800189c:	f003 fc56 	bl	800514c <HAL_I2C_Mem_Read>
}
 80018a0:	3800      	subs	r0, #0
 80018a2:	bf18      	it	ne
 80018a4:	2001      	movne	r0, #1
 80018a6:	b004      	add	sp, #16
 80018a8:	bd10      	pop	{r4, pc}
 80018aa:	bf00      	nop
 80018ac:	20000010 	.word	0x20000010
 80018b0:	20001724 	.word	0x20001724

080018b4 <IOE_Delay>:
void IOE_Delay(uint32_t Delay)
 80018b4:	f002 bca4 	b.w	8004200 <HAL_Delay>

080018b8 <LCD_IO_Init>:
{
 80018b8:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80018ba:	4c06      	ldr	r4, [pc, #24]	@ (80018d4 <LCD_IO_Init+0x1c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	4620      	mov	r0, r4
 80018c0:	2104      	movs	r1, #4
 80018c2:	f003 f90f 	bl	8004ae4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80018c6:	4620      	mov	r0, r4
 80018c8:	2201      	movs	r2, #1
}
 80018ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80018ce:	2104      	movs	r1, #4
 80018d0:	f003 b908 	b.w	8004ae4 <HAL_GPIO_WritePin>
 80018d4:	40020800 	.word	0x40020800

080018d8 <LCD_IO_WriteData>:
{
 80018d8:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80018da:	4d0b      	ldr	r5, [pc, #44]	@ (8001908 <LCD_IO_WriteData+0x30>)
{
 80018dc:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80018de:	2201      	movs	r2, #1
 80018e0:	480a      	ldr	r0, [pc, #40]	@ (800190c <LCD_IO_WriteData+0x34>)
 80018e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018e6:	f003 f8fd 	bl	8004ae4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2104      	movs	r1, #4
 80018ee:	4628      	mov	r0, r5
 80018f0:	f003 f8f8 	bl	8004ae4 <HAL_GPIO_WritePin>
  SPI5_Write(RegValue);
 80018f4:	4620      	mov	r0, r4
 80018f6:	f7ff fcb1 	bl	800125c <SPI5_Write>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80018fa:	4628      	mov	r0, r5
 80018fc:	2201      	movs	r2, #1
}
 80018fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001902:	2104      	movs	r1, #4
 8001904:	f003 b8ee 	b.w	8004ae4 <HAL_GPIO_WritePin>
 8001908:	40020800 	.word	0x40020800
 800190c:	40020c00 	.word	0x40020c00

08001910 <LCD_IO_WriteReg>:
{
 8001910:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001912:	4d0b      	ldr	r5, [pc, #44]	@ (8001940 <LCD_IO_WriteReg+0x30>)
{
 8001914:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001916:	2200      	movs	r2, #0
 8001918:	480a      	ldr	r0, [pc, #40]	@ (8001944 <LCD_IO_WriteReg+0x34>)
 800191a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800191e:	f003 f8e1 	bl	8004ae4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001922:	2200      	movs	r2, #0
 8001924:	2104      	movs	r1, #4
 8001926:	4628      	mov	r0, r5
 8001928:	f003 f8dc 	bl	8004ae4 <HAL_GPIO_WritePin>
  SPI5_Write(Reg);
 800192c:	4620      	mov	r0, r4
 800192e:	f7ff fc95 	bl	800125c <SPI5_Write>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001932:	4628      	mov	r0, r5
 8001934:	2201      	movs	r2, #1
}
 8001936:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800193a:	2104      	movs	r1, #4
 800193c:	f003 b8d2 	b.w	8004ae4 <HAL_GPIO_WritePin>
 8001940:	40020800 	.word	0x40020800
 8001944:	40020c00 	.word	0x40020c00

08001948 <LCD_IO_ReadData>:
{
 8001948:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800194a:	4e14      	ldr	r6, [pc, #80]	@ (800199c <LCD_IO_ReadData+0x54>)
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800194c:	4f14      	ldr	r7, [pc, #80]	@ (80019a0 <LCD_IO_ReadData+0x58>)
{
 800194e:	4605      	mov	r5, r0
 8001950:	460c      	mov	r4, r1
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001952:	4630      	mov	r0, r6
 8001954:	2200      	movs	r2, #0
 8001956:	2104      	movs	r1, #4
 8001958:	f003 f8c4 	bl	8004ae4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 800195c:	2200      	movs	r2, #0
 800195e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001962:	4638      	mov	r0, r7
 8001964:	f003 f8be 	bl	8004ae4 <HAL_GPIO_WritePin>
  SPI5_Write(RegValue);
 8001968:	4628      	mov	r0, r5
 800196a:	f7ff fc77 	bl	800125c <SPI5_Write>
  status = HAL_SPI_Receive(&hspi5, (uint8_t*) &readvalue, ReadSize, Spi5Timeout);
 800196e:	4b0d      	ldr	r3, [pc, #52]	@ (80019a4 <LCD_IO_ReadData+0x5c>)
 8001970:	480d      	ldr	r0, [pc, #52]	@ (80019a8 <LCD_IO_ReadData+0x60>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4622      	mov	r2, r4
 8001976:	a901      	add	r1, sp, #4
 8001978:	f004 fd99 	bl	80064ae <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800197c:	4638      	mov	r0, r7
 800197e:	2201      	movs	r2, #1
 8001980:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  return readvalue;
 8001984:	9c01      	ldr	r4, [sp, #4]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001986:	f003 f8ad 	bl	8004ae4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800198a:	4630      	mov	r0, r6
 800198c:	2201      	movs	r2, #1
 800198e:	2104      	movs	r1, #4
 8001990:	f003 f8a8 	bl	8004ae4 <HAL_GPIO_WritePin>
}
 8001994:	4620      	mov	r0, r4
 8001996:	b003      	add	sp, #12
 8001998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800199a:	bf00      	nop
 800199c:	40020800 	.word	0x40020800
 80019a0:	40020c00 	.word	0x40020c00
 80019a4:	2000000c 	.word	0x2000000c
 80019a8:	20001624 	.word	0x20001624

080019ac <LCD_Delay>:
  HAL_Delay(Delay);
 80019ac:	f002 bc28 	b.w	8004200 <HAL_Delay>

080019b0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80019b0:	6802      	ldr	r2, [r0, #0]
 80019b2:	4b03      	ldr	r3, [pc, #12]	@ (80019c0 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d101      	bne.n	80019bc <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80019b8:	f002 bc10 	b.w	80041dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40001000 	.word	0x40001000

080019c4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80019c4:	4770      	bx	lr
	...

080019c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001a04 <HAL_MspInit+0x3c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	9200      	str	r2, [sp, #0]
 80019d0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80019d2:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 80019d6:	6459      	str	r1, [r3, #68]	@ 0x44
 80019d8:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80019da:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 80019de:	9100      	str	r1, [sp, #0]
 80019e0:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019e2:	9201      	str	r2, [sp, #4]
 80019e4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80019e6:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80019ea:	6419      	str	r1, [r3, #64]	@ 0x40
 80019ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019f2:	9301      	str	r3, [sp, #4]
 80019f4:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019f6:	210f      	movs	r1, #15
 80019f8:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019fc:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019fe:	f002 be3b 	b.w	8004678 <HAL_NVIC_SetPriority>
 8001a02:	bf00      	nop
 8001a04:	40023800 	.word	0x40023800

08001a08 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001a08:	6802      	ldr	r2, [r0, #0]
 8001a0a:	4b09      	ldr	r3, [pc, #36]	@ (8001a30 <HAL_CRC_MspInit+0x28>)
 8001a0c:	429a      	cmp	r2, r3
{
 8001a0e:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001a10:	d10b      	bne.n	8001a2a <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	9301      	str	r3, [sp, #4]
 8001a16:	4b07      	ldr	r3, [pc, #28]	@ (8001a34 <HAL_CRC_MspInit+0x2c>)
 8001a18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a1a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001a1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a26:	9301      	str	r3, [sp, #4]
 8001a28:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001a2a:	b002      	add	sp, #8
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	40023000 	.word	0x40023000
 8001a34:	40023800 	.word	0x40023800

08001a38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a38:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3a:	2214      	movs	r2, #20
{
 8001a3c:	b08a      	sub	sp, #40	@ 0x28
 8001a3e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	2100      	movs	r1, #0
 8001a42:	eb0d 0002 	add.w	r0, sp, r2
 8001a46:	f011 feac 	bl	80137a2 <memset>
  if(hadc->Instance==ADC1)
 8001a4a:	6823      	ldr	r3, [r4, #0]
 8001a4c:	4a21      	ldr	r2, [pc, #132]	@ (8001ad4 <HAL_ADC_MspInit+0x9c>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d11f      	bne.n	8001a92 <HAL_ADC_MspInit+0x5a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a52:	4b21      	ldr	r3, [pc, #132]	@ (8001ad8 <HAL_ADC_MspInit+0xa0>)
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a54:	4821      	ldr	r0, [pc, #132]	@ (8001adc <HAL_ADC_MspInit+0xa4>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a56:	2100      	movs	r1, #0
 8001a58:	9101      	str	r1, [sp, #4]
 8001a5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001a5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a60:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001a64:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8001a68:	9201      	str	r2, [sp, #4]
 8001a6a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a6c:	9102      	str	r1, [sp, #8]
 8001a6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a70:	f042 0204 	orr.w	r2, r2, #4
 8001a74:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a7e:	2108      	movs	r1, #8
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a80:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e9cd 1305 	strd	r1, r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a88:	a905      	add	r1, sp, #20
    PA5     ------> ADC2_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8a:	f002 ff41 	bl	8004910 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001a8e:	b00a      	add	sp, #40	@ 0x28
 8001a90:	bd10      	pop	{r4, pc}
  else if(hadc->Instance==ADC2)
 8001a92:	4a13      	ldr	r2, [pc, #76]	@ (8001ae0 <HAL_ADC_MspInit+0xa8>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d1fa      	bne.n	8001a8e <HAL_ADC_MspInit+0x56>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001a98:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad8 <HAL_ADC_MspInit+0xa0>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9a:	4812      	ldr	r0, [pc, #72]	@ (8001ae4 <HAL_ADC_MspInit+0xac>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	9103      	str	r1, [sp, #12]
 8001aa0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001aa2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001aa6:	645a      	str	r2, [r3, #68]	@ 0x44
 8001aa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001aaa:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8001aae:	9203      	str	r2, [sp, #12]
 8001ab0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab2:	9104      	str	r1, [sp, #16]
 8001ab4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ab6:	f042 0201 	orr.w	r2, r2, #1
 8001aba:	631a      	str	r2, [r3, #48]	@ 0x30
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	9304      	str	r3, [sp, #16]
 8001ac4:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ac6:	2220      	movs	r2, #32
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ace:	a905      	add	r1, sp, #20
 8001ad0:	e7db      	b.n	8001a8a <HAL_ADC_MspInit+0x52>
 8001ad2:	bf00      	nop
 8001ad4:	40012000 	.word	0x40012000
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40020800 	.word	0x40020800
 8001ae0:	40012100 	.word	0x40012100
 8001ae4:	40020000 	.word	0x40020000

08001ae8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001ae8:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8001aea:	4b0f      	ldr	r3, [pc, #60]	@ (8001b28 <HAL_DMA2D_MspInit+0x40>)
 8001aec:	6802      	ldr	r2, [r0, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d116      	bne.n	8001b20 <HAL_DMA2D_MspInit+0x38>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001af2:	2200      	movs	r2, #0
 8001af4:	f5a3 43f0 	sub.w	r3, r3, #30720	@ 0x7800
 8001af8:	9201      	str	r2, [sp, #4]
 8001afa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001afc:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8001b00:	6319      	str	r1, [r3, #48]	@ 0x30
 8001b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b08:	9301      	str	r3, [sp, #4]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001b0a:	2105      	movs	r1, #5
 8001b0c:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001b0e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001b10:	f002 fdb2 	bl	8004678 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001b14:	205a      	movs	r0, #90	@ 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001b16:	b003      	add	sp, #12
 8001b18:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001b1c:	f002 bdde 	b.w	80046dc <HAL_NVIC_EnableIRQ>
}
 8001b20:	b003      	add	sp, #12
 8001b22:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b26:	bf00      	nop
 8001b28:	4002b000 	.word	0x4002b000

08001b2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b30:	4604      	mov	r4, r0
 8001b32:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	2214      	movs	r2, #20
 8001b36:	2100      	movs	r1, #0
 8001b38:	a803      	add	r0, sp, #12
 8001b3a:	f011 fe32 	bl	80137a2 <memset>
  if(hi2c->Instance==I2C3)
 8001b3e:	6822      	ldr	r2, [r4, #0]
 8001b40:	4b24      	ldr	r3, [pc, #144]	@ (8001bd4 <HAL_I2C_MspInit+0xa8>)
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d143      	bne.n	8001bce <HAL_I2C_MspInit+0xa2>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b46:	4c24      	ldr	r4, [pc, #144]	@ (8001bd8 <HAL_I2C_MspInit+0xac>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b48:	4824      	ldr	r0, [pc, #144]	@ (8001bdc <HAL_I2C_MspInit+0xb0>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b4a:	2500      	movs	r5, #0
 8001b4c:	9500      	str	r5, [sp, #0]
 8001b4e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001b50:	f043 0304 	orr.w	r3, r3, #4
 8001b54:	6323      	str	r3, [r4, #48]	@ 0x30
 8001b56:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b60:	9501      	str	r5, [sp, #4]
 8001b62:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	6323      	str	r3, [r4, #48]	@ 0x30
 8001b6a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	9301      	str	r3, [sp, #4]
 8001b72:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b74:	f04f 0912 	mov.w	r9, #18
 8001b78:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7c:	f04f 0801 	mov.w	r8, #1
 8001b80:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b82:	2604      	movs	r6, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b84:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b86:	e9cd 3903 	strd	r3, r9, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8a:	e9cd 8705 	strd	r8, r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b8e:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b90:	f002 febe 	bl	8004910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b94:	f44f 7380 	mov.w	r3, #256	@ 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b98:	4811      	ldr	r0, [pc, #68]	@ (8001be0 <HAL_I2C_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b9a:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b9e:	e9cd 3903 	strd	r3, r9, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba2:	e9cd 8705 	strd	r8, r7, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba6:	f002 feb3 	bl	8004910 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001baa:	9502      	str	r5, [sp, #8]
 8001bac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001bae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001bb2:	6423      	str	r3, [r4, #64]	@ 0x40
 8001bb4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001bb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001bba:	9302      	str	r3, [sp, #8]
 8001bbc:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */
  /* Force the I2C Peripheral Clock Reset */  
    __HAL_RCC_I2C3_FORCE_RESET();
 8001bbe:	6a23      	ldr	r3, [r4, #32]
 8001bc0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001bc4:	6223      	str	r3, [r4, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    __HAL_RCC_I2C3_RELEASE_RESET(); 
 8001bc6:	6a23      	ldr	r3, [r4, #32]
 8001bc8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001bcc:	6223      	str	r3, [r4, #32]
  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001bce:	b009      	add	sp, #36	@ 0x24
 8001bd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001bd4:	40005c00 	.word	0x40005c00
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40020800 	.word	0x40020800
 8001be0:	40020000 	.word	0x40020000

08001be4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001be6:	b099      	sub	sp, #100	@ 0x64
 8001be8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bea:	2214      	movs	r2, #20
 8001bec:	2100      	movs	r1, #0
 8001bee:	a807      	add	r0, sp, #28
 8001bf0:	f011 fdd7 	bl	80137a2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bf4:	2230      	movs	r2, #48	@ 0x30
 8001bf6:	eb0d 0002 	add.w	r0, sp, r2
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	f011 fdd1 	bl	80137a2 <memset>
  if(hltdc->Instance==LTDC)
 8001c00:	6822      	ldr	r2, [r4, #0]
 8001c02:	4b5e      	ldr	r3, [pc, #376]	@ (8001d7c <HAL_LTDC_MspInit+0x198>)
 8001c04:	429a      	cmp	r2, r3
 8001c06:	f040 80b7 	bne.w	8001d78 <HAL_LTDC_MspInit+0x194>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001c0a:	2308      	movs	r3, #8
 8001c0c:	930c      	str	r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001c0e:	23c0      	movs	r3, #192	@ 0xc0
 8001c10:	9310      	str	r3, [sp, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001c12:	2304      	movs	r3, #4
 8001c14:	9312      	str	r3, [sp, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c16:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001c18:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c1c:	9315      	str	r3, [sp, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c1e:	f004 f81b 	bl	8005c58 <HAL_RCCEx_PeriphCLKConfig>
 8001c22:	b108      	cbz	r0, 8001c28 <HAL_LTDC_MspInit+0x44>
    {
      Error_Handler();
 8001c24:	f7ff fece 	bl	80019c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001c28:	4b55      	ldr	r3, [pc, #340]	@ (8001d80 <HAL_LTDC_MspInit+0x19c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c2a:	4856      	ldr	r0, [pc, #344]	@ (8001d84 <HAL_LTDC_MspInit+0x1a0>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001c2c:	2400      	movs	r4, #0
 8001c2e:	9400      	str	r4, [sp, #0]
 8001c30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c32:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001c36:	645a      	str	r2, [r3, #68]	@ 0x44
 8001c38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c3a:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 8001c3e:	9200      	str	r2, [sp, #0]
 8001c40:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c42:	9401      	str	r4, [sp, #4]
 8001c44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c46:	f042 0220 	orr.w	r2, r2, #32
 8001c4a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c4e:	f002 0220 	and.w	r2, r2, #32
 8001c52:	9201      	str	r2, [sp, #4]
 8001c54:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	9402      	str	r4, [sp, #8]
 8001c58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c5a:	f042 0201 	orr.w	r2, r2, #1
 8001c5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c62:	f002 0201 	and.w	r2, r2, #1
 8001c66:	9202      	str	r2, [sp, #8]
 8001c68:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6a:	9403      	str	r4, [sp, #12]
 8001c6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c6e:	f042 0202 	orr.w	r2, r2, #2
 8001c72:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c76:	f002 0202 	and.w	r2, r2, #2
 8001c7a:	9203      	str	r2, [sp, #12]
 8001c7c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c7e:	9404      	str	r4, [sp, #16]
 8001c80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c86:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c8a:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001c8e:	9204      	str	r2, [sp, #16]
 8001c90:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c92:	9405      	str	r4, [sp, #20]
 8001c94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c96:	f042 0204 	orr.w	r2, r2, #4
 8001c9a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c9e:	f002 0204 	and.w	r2, r2, #4
 8001ca2:	9205      	str	r2, [sp, #20]
 8001ca4:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ca6:	9406      	str	r4, [sp, #24]
 8001ca8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001caa:	f042 0208 	orr.w	r2, r2, #8
 8001cae:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb2:	f003 0308 	and.w	r3, r3, #8
 8001cb6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb8:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cba:	260e      	movs	r6, #14
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cbc:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cbe:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cc4:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc6:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cca:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cce:	f002 fe1f 	bl	8004910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 8001cd2:	f641 0358 	movw	r3, #6232	@ 0x1858
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd6:	482c      	ldr	r0, [pc, #176]	@ (8001d88 <HAL_LTDC_MspInit+0x1a4>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cd8:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cda:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cdc:	e9cd 3507 	strd	r3, r5, [sp, #28]

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001ce0:	2709      	movs	r7, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ce2:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce6:	f002 fe13 	bl	8004910 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cea:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cec:	4827      	ldr	r0, [pc, #156]	@ (8001d8c <HAL_LTDC_MspInit+0x1a8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001cee:	970b      	str	r7, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf0:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf2:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cf6:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cfa:	f002 fe09 	bl	8004910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8001cfe:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d02:	4822      	ldr	r0, [pc, #136]	@ (8001d8c <HAL_LTDC_MspInit+0x1a8>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d04:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d06:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d08:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d0c:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d10:	f002 fdfe 	bl	8004910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8001d14:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d18:	481d      	ldr	r0, [pc, #116]	@ (8001d90 <HAL_LTDC_MspInit+0x1ac>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d1a:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d1c:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d22:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d26:	f002 fdf3 	bl	8004910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d2a:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d2c:	4819      	ldr	r0, [pc, #100]	@ (8001d94 <HAL_LTDC_MspInit+0x1b0>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d2e:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d30:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d36:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d3a:	f002 fde9 	bl	8004910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d3e:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d40:	4815      	ldr	r0, [pc, #84]	@ (8001d98 <HAL_LTDC_MspInit+0x1b4>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d42:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d44:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d46:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d4a:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d4e:	f002 fddf 	bl	8004910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001d52:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d56:	480e      	ldr	r0, [pc, #56]	@ (8001d90 <HAL_LTDC_MspInit+0x1ac>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001d58:	970b      	str	r7, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d5a:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5c:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d60:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d64:	f002 fdd4 	bl	8004910 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001d68:	2058      	movs	r0, #88	@ 0x58
 8001d6a:	4622      	mov	r2, r4
 8001d6c:	2105      	movs	r1, #5
 8001d6e:	f002 fc83 	bl	8004678 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001d72:	2058      	movs	r0, #88	@ 0x58
 8001d74:	f002 fcb2 	bl	80046dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001d78:	b019      	add	sp, #100	@ 0x64
 8001d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d7c:	40016800 	.word	0x40016800
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40021400 	.word	0x40021400
 8001d88:	40020000 	.word	0x40020000
 8001d8c:	40020400 	.word	0x40020400
 8001d90:	40021800 	.word	0x40021800
 8001d94:	40020800 	.word	0x40020800
 8001d98:	40020c00 	.word	0x40020c00

08001d9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d9c:	b510      	push	{r4, lr}
 8001d9e:	4604      	mov	r4, r0
 8001da0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da2:	2214      	movs	r2, #20
 8001da4:	2100      	movs	r1, #0
 8001da6:	a803      	add	r0, sp, #12
 8001da8:	f011 fcfb 	bl	80137a2 <memset>
  if(hspi->Instance==SPI5)
 8001dac:	6822      	ldr	r2, [r4, #0]
 8001dae:	4b14      	ldr	r3, [pc, #80]	@ (8001e00 <HAL_SPI_MspInit+0x64>)
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d123      	bne.n	8001dfc <HAL_SPI_MspInit+0x60>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001db4:	f503 4368 	add.w	r3, r3, #59392	@ 0xe800
 8001db8:	2100      	movs	r1, #0
 8001dba:	9101      	str	r1, [sp, #4]
 8001dbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dbe:	4811      	ldr	r0, [pc, #68]	@ (8001e04 <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001dc0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001dc4:	645a      	str	r2, [r3, #68]	@ 0x44
 8001dc6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001dc8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001dcc:	9201      	str	r2, [sp, #4]
 8001dce:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dd0:	9102      	str	r1, [sp, #8]
 8001dd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001dd4:	f042 0220 	orr.w	r2, r2, #32
 8001dd8:	631a      	str	r2, [r3, #48]	@ 0x30
 8001dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ddc:	f003 0320 	and.w	r3, r3, #32
 8001de0:	9302      	str	r3, [sp, #8]
 8001de2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de4:	f44f 7260 	mov.w	r2, #896	@ 0x380
 8001de8:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001dea:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dec:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001df0:	2305      	movs	r3, #5
 8001df2:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001df6:	a903      	add	r1, sp, #12
 8001df8:	f002 fd8a 	bl	8004910 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001dfc:	b008      	add	sp, #32
 8001dfe:	bd10      	pop	{r4, pc}
 8001e00:	40015000 	.word	0x40015000
 8001e04:	40021400 	.word	0x40021400

08001e08 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e0c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001e0e:	2300      	movs	r3, #0
 8001e10:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 8001e12:	4b2b      	ldr	r3, [pc, #172]	@ (8001ec0 <HAL_SDRAM_MspInit+0xb8>)
 8001e14:	681c      	ldr	r4, [r3, #0]
 8001e16:	2c00      	cmp	r4, #0
 8001e18:	d14f      	bne.n	8001eba <HAL_SDRAM_MspInit+0xb2>
  FMC_Initialized = 1;
 8001e1a:	f04f 0801 	mov.w	r8, #1
 8001e1e:	f8c3 8000 	str.w	r8, [r3]
  __HAL_RCC_FMC_CLK_ENABLE();
 8001e22:	4b28      	ldr	r3, [pc, #160]	@ (8001ec4 <HAL_SDRAM_MspInit+0xbc>)
 8001e24:	9400      	str	r4, [sp, #0]
 8001e26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e28:	4827      	ldr	r0, [pc, #156]	@ (8001ec8 <HAL_SDRAM_MspInit+0xc0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001e2a:	ea42 0208 	orr.w	r2, r2, r8
 8001e2e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e32:	ea03 0308 	and.w	r3, r3, r8
 8001e36:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e38:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e3a:	2603      	movs	r6, #3
 8001e3c:	250c      	movs	r5, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8001e3e:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e40:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e42:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001e46:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e4a:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e4e:	f002 fd5f 	bl	8004910 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e52:	481e      	ldr	r0, [pc, #120]	@ (8001ecc <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e54:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e56:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e58:	e9cd 8701 	strd	r8, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5c:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e60:	f002 fd56 	bl	8004910 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001e64:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e68:	4819      	ldr	r0, [pc, #100]	@ (8001ed0 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e6a:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e6c:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e72:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e76:	f002 fd4b 	bl	8004910 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001e7a:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e7e:	4815      	ldr	r0, [pc, #84]	@ (8001ed4 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e80:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e82:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e84:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e88:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e8c:	f002 fd40 	bl	8004910 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001e90:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e94:	4810      	ldr	r0, [pc, #64]	@ (8001ed8 <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e96:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e98:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9e:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ea2:	f002 fd35 	bl	8004910 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001ea6:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea8:	480c      	ldr	r0, [pc, #48]	@ (8001edc <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001eaa:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eac:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eae:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb2:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb6:	f002 fd2b 	bl	8004910 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001eba:	b006      	add	sp, #24
 8001ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ec0:	200017c0 	.word	0x200017c0
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40021400 	.word	0x40021400
 8001ecc:	40020800 	.word	0x40020800
 8001ed0:	40021800 	.word	0x40021800
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	40020c00 	.word	0x40020c00
 8001edc:	40020400 	.word	0x40020400

08001ee0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee0:	b530      	push	{r4, r5, lr}
 8001ee2:	4601      	mov	r1, r0
 8001ee4:	b089      	sub	sp, #36	@ 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2036      	movs	r0, #54	@ 0x36
 8001eea:	f002 fbc5 	bl	8004678 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001eee:	2036      	movs	r0, #54	@ 0x36
 8001ef0:	f002 fbf4 	bl	80046dc <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001ef4:	2500      	movs	r5, #0
 8001ef6:	4b15      	ldr	r3, [pc, #84]	@ (8001f4c <HAL_InitTick+0x6c>)
 8001ef8:	9502      	str	r5, [sp, #8]
 8001efa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001efc:	4c14      	ldr	r4, [pc, #80]	@ (8001f50 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001efe:	f042 0210 	orr.w	r2, r2, #16
 8001f02:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f06:	f003 0310 	and.w	r3, r3, #16
 8001f0a:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f0c:	a901      	add	r1, sp, #4
 8001f0e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001f10:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f12:	f003 fe83 	bl	8005c1c <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001f16:	f003 fe71 	bl	8005bfc <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8001f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f54 <HAL_InitTick+0x74>)
 8001f1c:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001f1e:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001f22:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001f24:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f26:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <HAL_InitTick+0x78>)
 8001f28:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f2c:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 8001f2e:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001f30:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001f32:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f34:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001f36:	f004 fc9f 	bl	8006878 <HAL_TIM_Base_Init>
 8001f3a:	b920      	cbnz	r0, 8001f46 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	f004 fb55 	bl	80065ec <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001f42:	b009      	add	sp, #36	@ 0x24
 8001f44:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8001f46:	2001      	movs	r0, #1
 8001f48:	e7fb      	b.n	8001f42 <HAL_InitTick+0x62>
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	200017c4 	.word	0x200017c4
 8001f54:	40001000 	.word	0x40001000
 8001f58:	000f4240 	.word	0x000f4240

08001f5c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f5c:	4770      	bx	lr

08001f5e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f5e:	e7fe      	b.n	8001f5e <HardFault_Handler>

08001f60 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f60:	e7fe      	b.n	8001f60 <MemManage_Handler>

08001f62 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f62:	e7fe      	b.n	8001f62 <BusFault_Handler>

08001f64 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f64:	e7fe      	b.n	8001f64 <UsageFault_Handler>

08001f66 <DebugMon_Handler>:
}

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001f66:	4770      	bx	lr

08001f68 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f68:	4801      	ldr	r0, [pc, #4]	@ (8001f70 <TIM6_DAC_IRQHandler+0x8>)
 8001f6a:	f004 bb7d 	b.w	8006668 <HAL_TIM_IRQHandler>
 8001f6e:	bf00      	nop
 8001f70:	200017c4 	.word	0x200017c4

08001f74 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001f74:	4801      	ldr	r0, [pc, #4]	@ (8001f7c <LTDC_IRQHandler+0x8>)
 8001f76:	f003 bb23 	b.w	80055c0 <HAL_LTDC_IRQHandler>
 8001f7a:	bf00      	nop
 8001f7c:	2000167c 	.word	0x2000167c

08001f80 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001f80:	4801      	ldr	r0, [pc, #4]	@ (8001f88 <DMA2D_IRQHandler+0x8>)
 8001f82:	f002 bbf7 	b.w	8004774 <HAL_DMA2D_IRQHandler>
 8001f86:	bf00      	nop
 8001f88:	20001778 	.word	0x20001778

08001f8c <EXTI0_IRQHandler>:
  /* USER CODE END DMA2D_IRQn 1 */
}

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
 8001f8c:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	uint32_t count = osMessageQueueGetCount(Queue1Handle);
 8001f8e:	4c0b      	ldr	r4, [pc, #44]	@ (8001fbc <EXTI0_IRQHandler+0x30>)
 8001f90:	6820      	ldr	r0, [r4, #0]
 8001f92:	f004 ff0c 	bl	8006dae <osMessageQueueGetCount>
	if (count < 2)
 8001f96:	2801      	cmp	r0, #1
 8001f98:	d809      	bhi.n	8001fae <EXTI0_IRQHandler+0x22>
	{
		uint8_t x = 'A';
 8001f9a:	2341      	movs	r3, #65	@ 0x41
 8001f9c:	f88d 3007 	strb.w	r3, [sp, #7]
		osMessageQueuePut(Queue1Handle, &x, 0, 200);
 8001fa0:	6820      	ldr	r0, [r4, #0]
 8001fa2:	23c8      	movs	r3, #200	@ 0xc8
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f10d 0107 	add.w	r1, sp, #7
 8001faa:	f004 fe9f 	bl	8006cec <osMessageQueuePut>
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001fae:	2001      	movs	r0, #1
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  /* USER CODE END EXTI0_IRQn 1 */
}
 8001fb0:	b002      	add	sp, #8
 8001fb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001fb6:	f002 bda5 	b.w	8004b04 <HAL_GPIO_EXTI_IRQHandler>
 8001fba:	bf00      	nop
 8001fbc:	20001548 	.word	0x20001548

08001fc0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	4770      	bx	lr

08001fc4 <_kill>:

int _kill(int pid, int sig)
{
 8001fc4:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001fc6:	f011 fc8f 	bl	80138e8 <__errno>
 8001fca:	2316      	movs	r3, #22
 8001fcc:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001fce:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd2:	bd08      	pop	{r3, pc}

08001fd4 <_exit>:

void _exit (int status)
{
 8001fd4:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001fd6:	f011 fc87 	bl	80138e8 <__errno>
 8001fda:	2316      	movs	r3, #22
 8001fdc:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001fde:	e7fe      	b.n	8001fde <_exit+0xa>

08001fe0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fe0:	b570      	push	{r4, r5, r6, lr}
 8001fe2:	460d      	mov	r5, r1
 8001fe4:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe6:	460e      	mov	r6, r1
 8001fe8:	1b73      	subs	r3, r6, r5
 8001fea:	429c      	cmp	r4, r3
 8001fec:	dc01      	bgt.n	8001ff2 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001fee:	4620      	mov	r0, r4
 8001ff0:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001ff2:	f3af 8000 	nop.w
 8001ff6:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ffa:	e7f5      	b.n	8001fe8 <_read+0x8>

08001ffc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ffc:	b570      	push	{r4, r5, r6, lr}
 8001ffe:	460d      	mov	r5, r1
 8002000:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002002:	460e      	mov	r6, r1
 8002004:	1b73      	subs	r3, r6, r5
 8002006:	429c      	cmp	r4, r3
 8002008:	dc01      	bgt.n	800200e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800200a:	4620      	mov	r0, r4
 800200c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800200e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8002012:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002016:	e7f5      	b.n	8002004 <_write+0x8>

08002018 <_close>:

int _close(int file)
{
	return -1;
}
 8002018:	f04f 30ff 	mov.w	r0, #4294967295
 800201c:	4770      	bx	lr

0800201e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800201e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002022:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002024:	2000      	movs	r0, #0
 8002026:	4770      	bx	lr

08002028 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002028:	2001      	movs	r0, #1
 800202a:	4770      	bx	lr

0800202c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800202c:	2000      	movs	r0, #0
 800202e:	4770      	bx	lr

08002030 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002030:	4a0a      	ldr	r2, [pc, #40]	@ (800205c <_sbrk+0x2c>)
 8002032:	6811      	ldr	r1, [r2, #0]
{
 8002034:	b508      	push	{r3, lr}
 8002036:	4603      	mov	r3, r0
	if (heap_end == 0)
 8002038:	b909      	cbnz	r1, 800203e <_sbrk+0xe>
		heap_end = &end;
 800203a:	4909      	ldr	r1, [pc, #36]	@ (8002060 <_sbrk+0x30>)
 800203c:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 800203e:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8002040:	4669      	mov	r1, sp
 8002042:	4403      	add	r3, r0
 8002044:	428b      	cmp	r3, r1
 8002046:	d906      	bls.n	8002056 <_sbrk+0x26>
	{
		errno = ENOMEM;
 8002048:	f011 fc4e 	bl	80138e8 <__errno>
 800204c:	230c      	movs	r3, #12
 800204e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002050:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8002054:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8002056:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8002058:	e7fc      	b.n	8002054 <_sbrk+0x24>
 800205a:	bf00      	nop
 800205c:	2000180c 	.word	0x2000180c
 8002060:	200129d0 	.word	0x200129d0

08002064 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const touchgfx::FontId MEDIUM = 3;  // verdanaz_22_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8002064:	4770      	bx	lr

08002066 <_ZN23ApplicationFontProviderD0Ev>:
 8002066:	b510      	push	{r4, lr}
 8002068:	2104      	movs	r1, #4
 800206a:	4604      	mov	r4, r0
 800206c:	f011 f964 	bl	8013338 <_ZdlPvj>
 8002070:	4620      	mov	r0, r4
 8002072:	bd10      	pop	{r4, pc}

08002074 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8002074:	b508      	push	{r3, lr}
    switch (typography)
 8002076:	2903      	cmp	r1, #3
 8002078:	d813      	bhi.n	80020a2 <_ZN23ApplicationFontProvider7getFontEt+0x2e>
 800207a:	e8df f001 	tbb	[pc, r1]
 800207e:	0602      	.short	0x0602
 8002080:	0e0a      	.short	0x0e0a
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8002082:	f001 fb5b 	bl	800373c <_ZN17TypedTextDatabase8getFontsEv>
 8002086:	6800      	ldr	r0, [r0, #0]
        // verdanaz_22_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
    default:
        return 0;
    }
}
 8002088:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800208a:	f001 fb57 	bl	800373c <_ZN17TypedTextDatabase8getFontsEv>
 800208e:	6840      	ldr	r0, [r0, #4]
 8002090:	e7fa      	b.n	8002088 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8002092:	f001 fb53 	bl	800373c <_ZN17TypedTextDatabase8getFontsEv>
 8002096:	6880      	ldr	r0, [r0, #8]
 8002098:	e7f6      	b.n	8002088 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800209a:	f001 fb4f 	bl	800373c <_ZN17TypedTextDatabase8getFontsEv>
 800209e:	68c0      	ldr	r0, [r0, #12]
 80020a0:	e7f2      	b.n	8002088 <_ZN23ApplicationFontProvider7getFontEt+0x14>
    switch (typography)
 80020a2:	2000      	movs	r0, #0
 80020a4:	e7f0      	b.n	8002088 <_ZN23ApplicationFontProvider7getFontEt+0x14>
	...

080020a8 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 80020a8:	4800      	ldr	r0, [pc, #0]	@ (80020ac <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 80020aa:	4770      	bx	lr
 80020ac:	08014ae8 	.word	0x08014ae8

080020b0 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 80020b0:	200d      	movs	r0, #13
 80020b2:	4770      	bx	lr

080020b4 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80020b4:	b513      	push	{r0, r1, r4, lr}
 80020b6:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 80020b8:	b151      	cbz	r1, 80020d0 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80020ba:	6803      	ldr	r3, [r0, #0]
        const uint8_t* dummyPixelDataPointer = 0;
 80020bc:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 80020be:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80020c2:	aa01      	add	r2, sp, #4
 80020c4:	689c      	ldr	r4, [r3, #8]
 80020c6:	f10d 0303 	add.w	r3, sp, #3
 80020ca:	47a0      	blx	r4
        return glyph;
    }
 80020cc:	b002      	add	sp, #8
 80020ce:	bd10      	pop	{r4, pc}
            return 0;
 80020d0:	4608      	mov	r0, r1
 80020d2:	e7fb      	b.n	80020cc <_ZNK8touchgfx4Font8getGlyphEt+0x18>

080020d4 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 80020d4:	89c0      	ldrh	r0, [r0, #14]
 80020d6:	4770      	bx	lr

080020d8 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 80020d8:	8a00      	ldrh	r0, [r0, #16]
 80020da:	4770      	bx	lr

080020dc <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 80020dc:	88c0      	ldrh	r0, [r0, #6]
 80020de:	4770      	bx	lr

080020e0 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 80020e0:	8880      	ldrh	r0, [r0, #4]
 80020e2:	4770      	bx	lr

080020e4 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 80020e4:	7a80      	ldrb	r0, [r0, #10]
    }
 80020e6:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 80020ea:	4770      	bx	lr

080020ec <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 80020ec:	7a80      	ldrb	r0, [r0, #10]
    }
 80020ee:	09c0      	lsrs	r0, r0, #7
 80020f0:	4770      	bx	lr

080020f2 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 80020f2:	2000      	movs	r0, #0
 80020f4:	4770      	bx	lr
	...

080020f8 <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 80020f8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8002100 <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	00000000 	.word	0x00000000

08002104 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8002104:	4770      	bx	lr

08002106 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8002106:	b510      	push	{r4, lr}
    }
 8002108:	2108      	movs	r1, #8
    virtual ~TypedText()
 800210a:	4604      	mov	r4, r0
    }
 800210c:	f011 f914 	bl	8013338 <_ZdlPvj>
 8002110:	4620      	mov	r0, r4
 8002112:	bd10      	pop	{r4, pc}

08002114 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8002114:	2000      	movs	r0, #0
 8002116:	4770      	bx	lr

08002118 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8002118:	8081      	strh	r1, [r0, #4]
    }
 800211a:	4770      	bx	lr

0800211c <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 800211c:	80c1      	strh	r1, [r0, #6]
    }
 800211e:	4770      	bx	lr

08002120 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8002120:	8101      	strh	r1, [r0, #8]
    }
 8002122:	4770      	bx	lr

08002124 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8002124:	8141      	strh	r1, [r0, #10]
    }
 8002126:	4770      	bx	lr

08002128 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8002128:	4770      	bx	lr

0800212a <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 800212a:	4770      	bx	lr

0800212c <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 800212c:	4770      	bx	lr

0800212e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 800212e:	4770      	bx	lr

08002130 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002130:	4770      	bx	lr

08002132 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8002132:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8002134:	88c4      	ldrh	r4, [r0, #6]
 8002136:	6803      	ldr	r3, [r0, #0]
 8002138:	1b12      	subs	r2, r2, r4
 800213a:	8884      	ldrh	r4, [r0, #4]
 800213c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800213e:	1b09      	subs	r1, r1, r4
 8002140:	b212      	sxth	r2, r2
    }
 8002142:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8002146:	b209      	sxth	r1, r1
 8002148:	4718      	bx	r3

0800214a <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800214a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800214e:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8002150:	f04f 33ff 	mov.w	r3, #4294967295
 8002154:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8002156:	6813      	ldr	r3, [r2, #0]
 8002158:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 800215a:	6010      	str	r0, [r2, #0]
    }
 800215c:	4770      	bx	lr

0800215e <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 800215e:	4770      	bx	lr

08002160 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8002160:	4770      	bx	lr

08002162 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8002162:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 8002166:	6808      	ldr	r0, [r1, #0]
 8002168:	6849      	ldr	r1, [r1, #4]
 800216a:	c303      	stmia	r3!, {r0, r1}
    }
 800216c:	4770      	bx	lr

0800216e <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 800216e:	4770      	bx	lr

08002170 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8002170:	4770      	bx	lr

08002172 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8002172:	6041      	str	r1, [r0, #4]
    }
 8002174:	4770      	bx	lr

08002176 <_ZNK8touchgfx10Transition13FullSolidRect12getSolidRectEv>:
     * A Widget that reports solid and but does not draw anything.
     */
    class FullSolidRect : public Widget
    {
    public:
        virtual Rect getSolidRect() const
 8002176:	b510      	push	{r4, lr}
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8002178:	2200      	movs	r2, #0
        {
            return Rect(0, 0, rect.width, rect.height);
 800217a:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 800217e:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8002182:	8002      	strh	r2, [r0, #0]
 8002184:	8042      	strh	r2, [r0, #2]
 8002186:	8084      	strh	r4, [r0, #4]
 8002188:	80c1      	strh	r1, [r0, #6]
        }
 800218a:	bd10      	pop	{r4, pc}

0800218c <_ZNK8touchgfx10Transition13FullSolidRect4drawERKNS_4RectE>:

        virtual void draw(const Rect& area) const
        {
        }
 800218c:	4770      	bx	lr

0800218e <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800218e:	4770      	bx	lr

08002190 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002190:	4b06      	ldr	r3, [pc, #24]	@ (80021ac <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8002192:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8002196:	2300      	movs	r3, #0
 8002198:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 800219c:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 80021a0:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 80021a4:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	08002629 	.word	0x08002629

080021b0 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 80021b0:	2301      	movs	r3, #1
 80021b2:	7203      	strb	r3, [r0, #8]
    }
 80021b4:	4770      	bx	lr

080021b6 <_ZN8touchgfx10Transition13FullSolidRectD1Ev>:
    class FullSolidRect : public Widget
 80021b6:	4770      	bx	lr

080021b8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED1Ev>:
 * the given direction.  This transition only draws the pixels in the
 * framebuffer once, and never moves any pixels. It is therefore very
 * useful on MCUs with limited performance.
 */
template <Direction templateDirection>
class WipeTransition : public Transition
 80021b8:	4770      	bx	lr

080021ba <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 80021ba:	4770      	bx	lr

080021bc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 80021bc:	4770      	bx	lr

080021be <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE8tearDownEv>:
            // Synchronize framebuffers
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
        }
    }

    virtual void tearDown()
 80021be:	4601      	mov	r1, r0
    {
        screenContainer->remove(solid);
 80021c0:	6840      	ldr	r0, [r0, #4]
 80021c2:	6803      	ldr	r3, [r0, #0]
 80021c4:	3110      	adds	r1, #16
 80021c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80021c8:	4718      	bx	r3

080021ca <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE4initEv>:
    }

    virtual void init()
 80021ca:	4601      	mov	r1, r0
    {
        Transition::init();
        // Add the solid (and not-drawing-anything) widget on top to cover the other widgets
        screenContainer->add(solid);
 80021cc:	6840      	ldr	r0, [r0, #4]
 80021ce:	6803      	ldr	r3, [r0, #0]
 80021d0:	3110      	adds	r1, #16
 80021d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021d4:	4718      	bx	r3

080021d6 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE10invalidateEv>:
     * Wipe transition does not require an invalidation. Invalidation
     * is handled by the class. Do no invalidation initially.
     */
    virtual void invalidate()
    {
    }
 80021d6:	4770      	bx	lr

080021d8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80021d8:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 80021da:	68c2      	ldr	r2, [r0, #12]
 80021dc:	6841      	ldr	r1, [r0, #4]
 80021de:	1054      	asrs	r4, r2, #1
    virtual void execute()
 80021e0:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 80021e2:	eb01 0062 	add.w	r0, r1, r2, asr #1
 80021e6:	07d2      	lsls	r2, r2, #31
 80021e8:	bf48      	it	mi
 80021ea:	590a      	ldrmi	r2, [r1, r4]
 80021ec:	689b      	ldr	r3, [r3, #8]
    }
 80021ee:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 80021f2:	bf48      	it	mi
 80021f4:	58d3      	ldrmi	r3, [r2, r3]
 80021f6:	4718      	bx	r3

080021f8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 80021f8:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 80021fa:	6840      	ldr	r0, [r0, #4]
 80021fc:	b130      	cbz	r0, 800220c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	b91a      	cbnz	r2, 800220a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 8002202:	68d8      	ldr	r0, [r3, #12]
 8002204:	f000 0001 	and.w	r0, r0, #1
 8002208:	4770      	bx	lr
 800220a:	2001      	movs	r0, #1
    }
 800220c:	4770      	bx	lr

0800220e <_ZN8touchgfx12NoTransitionD0Ev>:
 800220e:	b510      	push	{r4, lr}
 8002210:	210c      	movs	r1, #12
 8002212:	4604      	mov	r4, r0
 8002214:	f011 f890 	bl	8013338 <_ZdlPvj>
 8002218:	4620      	mov	r0, r4
 800221a:	bd10      	pop	{r4, pc}

0800221c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800221c:	b510      	push	{r4, lr}
 800221e:	2110      	movs	r1, #16
 8002220:	4604      	mov	r4, r0
 8002222:	f011 f889 	bl	8013338 <_ZdlPvj>
 8002226:	4620      	mov	r0, r4
 8002228:	bd10      	pop	{r4, pc}

0800222a <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 800222a:	b510      	push	{r4, lr}
 800222c:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8002230:	4604      	mov	r4, r0
 8002232:	f011 f881 	bl	8013338 <_ZdlPvj>
 8002236:	4620      	mov	r0, r4
 8002238:	bd10      	pop	{r4, pc}

0800223a <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED0Ev>:
class WipeTransition : public Transition
 800223a:	b510      	push	{r4, lr}
 800223c:	2138      	movs	r1, #56	@ 0x38
 800223e:	4604      	mov	r4, r0
 8002240:	f011 f87a 	bl	8013338 <_ZdlPvj>
 8002244:	4620      	mov	r0, r4
 8002246:	bd10      	pop	{r4, pc}

08002248 <_ZN8touchgfx10Transition13FullSolidRectD0Ev>:
 8002248:	b510      	push	{r4, lr}
 800224a:	2128      	movs	r1, #40	@ 0x28
 800224c:	4604      	mov	r4, r0
 800224e:	f011 f873 	bl	8013338 <_ZdlPvj>
 8002252:	4620      	mov	r0, r4
 8002254:	bd10      	pop	{r4, pc}

08002256 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8002256:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 8002258:	f00a fd04 	bl	800cc64 <_ZN8touchgfx11Application11getInstanceEv>
 800225c:	6803      	ldr	r3, [r0, #0]
    }
 800225e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 8002262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002264:	4718      	bx	r3

08002266 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 8002266:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800226a:	b112      	cbz	r2, 8002272 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 800226c:	6803      	ldr	r3, [r0, #0]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	4718      	bx	r3
    }
 8002272:	4770      	bx	lr

08002274 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 8002274:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002276:	4604      	mov	r4, r0
        animationCounter++;
 8002278:	7a80      	ldrb	r0, [r0, #10]
        if (animationCounter > animationSteps)
 800227a:	7a63      	ldrb	r3, [r4, #9]
        animationCounter++;
 800227c:	3001      	adds	r0, #1
 800227e:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
 8002280:	4298      	cmp	r0, r3
        animationCounter++;
 8002282:	72a0      	strb	r0, [r4, #10]
        if (animationCounter > animationSteps)
 8002284:	d905      	bls.n	8002292 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 8002286:	2301      	movs	r3, #1
 8002288:	7223      	strb	r3, [r4, #8]
            animationCounter = 0;
 800228a:	2300      	movs	r3, #0
 800228c:	72a3      	strb	r3, [r4, #10]
    }
 800228e:	b003      	add	sp, #12
 8002290:	bd30      	pop	{r4, r5, pc}
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 8002292:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002296:	2100      	movs	r1, #0
 8002298:	f00c f9b8 	bl	800e60c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
 800229c:	07c3      	lsls	r3, r0, #31
 800229e:	d506      	bpl.n	80022ae <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x3a>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 80022a0:	2800      	cmp	r0, #0
 80022a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80022a6:	bfc8      	it	gt
 80022a8:	2301      	movgt	r3, #1
 80022aa:	4418      	add	r0, r3
 80022ac:	b200      	sxth	r0, r0
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 80022ae:	4b14      	ldr	r3, [pc, #80]	@ (8002300 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8c>)
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 80022b0:	81e0      	strh	r0, [r4, #14]
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 80022b2:	8819      	ldrh	r1, [r3, #0]
                const uint16_t prevSolidWidth = solid.getWidth();
 80022b4:	8b25      	ldrh	r5, [r4, #24]
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 80022b6:	b283      	uxth	r3, r0
                Rect r(solid.getWidth(), 0, delta, HAL::DISPLAY_HEIGHT);
 80022b8:	4812      	ldr	r0, [pc, #72]	@ (8002304 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x90>)
 80022ba:	f9b0 0000 	ldrsh.w	r0, [r0]
 80022be:	f8ad 0006 	strh.w	r0, [sp, #6]
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 80022c2:	1aca      	subs	r2, r1, r3
                screenContainer->invalidateRect(r);
 80022c4:	6860      	ldr	r0, [r4, #4]
                const uint16_t delta = prevSolidWidth - solid.getWidth();
 80022c6:	442b      	add	r3, r5
 80022c8:	1a5b      	subs	r3, r3, r1
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 80022ca:	b212      	sxth	r2, r2
 80022cc:	f8ad 3004 	strh.w	r3, [sp, #4]
                screenContainer->invalidateRect(r);
 80022d0:	6803      	ldr	r3, [r0, #0]
        rect.width = width;
 80022d2:	8322      	strh	r2, [r4, #24]
 80022d4:	f8ad 2000 	strh.w	r2, [sp]
 80022d8:	2200      	movs	r2, #0
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	f8ad 2002 	strh.w	r2, [sp, #2]
 80022e0:	4669      	mov	r1, sp
 80022e2:	4798      	blx	r3
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80022e4:	7aa3      	ldrb	r3, [r4, #10]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d1d1      	bne.n	800228e <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a>
 80022ea:	4b07      	ldr	r3, [pc, #28]	@ (8002308 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0cd      	beq.n	800228e <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a>
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 80022f2:	f00a fcb7 	bl	800cc64 <_ZN8touchgfx11Application11getInstanceEv>
    }
 80022f6:	b003      	add	sp, #12
 80022f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 80022fc:	f00a bcb8 	b.w	800cc70 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
 8002300:	2001264c 	.word	0x2001264c
 8002304:	2001264e 	.word	0x2001264e
 8002308:	20012656 	.word	0x20012656

0800230c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 800230c:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8002310:	b11a      	cbz	r2, 800231a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8002312:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8002316:	b102      	cbz	r2, 800231a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8002318:	6018      	str	r0, [r3, #0]
        }
    }
 800231a:	4770      	bx	lr

0800231c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800231c:	b510      	push	{r4, lr}
 800231e:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002320:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8002324:	b158      	cbz	r0, 800233e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8002326:	6803      	ldr	r3, [r0, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	4798      	blx	r3
 800232c:	b138      	cbz	r0, 800233e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 800232e:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8002332:	6803      	ldr	r3, [r0, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002338:	2300      	movs	r3, #0
 800233a:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 800233e:	bd10      	pop	{r4, pc}

08002340 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen2ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreen2ScreenNoTransitionImpl()
{
 8002340:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002344:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8002348:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800234a:	68b0      	ldr	r0, [r6, #8]
 800234c:	6803      	ldr	r3, [r0, #0]
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	4798      	blx	r3
 8002352:	f5b0 7f5d 	cmp.w	r0, #884	@ 0x374
 8002356:	d205      	bcs.n	8002364 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x24>
 8002358:	4b44      	ldr	r3, [pc, #272]	@ (800246c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x12c>)
 800235a:	4a45      	ldr	r2, [pc, #276]	@ (8002470 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x130>)
 800235c:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800235e:	4845      	ldr	r0, [pc, #276]	@ (8002474 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x134>)
 8002360:	f011 f818 	bl	8013394 <__assert_func>
 8002364:	6870      	ldr	r0, [r6, #4]
 8002366:	6803      	ldr	r3, [r0, #0]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	4798      	blx	r3
 800236c:	280f      	cmp	r0, #15
 800236e:	d803      	bhi.n	8002378 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x38>
 8002370:	4b41      	ldr	r3, [pc, #260]	@ (8002478 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x138>)
 8002372:	4a3f      	ldr	r2, [pc, #252]	@ (8002470 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x130>)
 8002374:	21a4      	movs	r1, #164	@ 0xa4
 8002376:	e7f2      	b.n	800235e <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002378:	68f0      	ldr	r0, [r6, #12]
 800237a:	6803      	ldr	r3, [r0, #0]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	4798      	blx	r3
 8002380:	280b      	cmp	r0, #11
 8002382:	d803      	bhi.n	800238c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x4c>
 8002384:	4b3d      	ldr	r3, [pc, #244]	@ (800247c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x13c>)
 8002386:	4a3a      	ldr	r2, [pc, #232]	@ (8002470 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x130>)
 8002388:	21a5      	movs	r1, #165	@ 0xa5
 800238a:	e7e8      	b.n	800235e <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x1e>
    Application::getInstance()->clearAllTimerWidgets();
 800238c:	f00a fc6a 	bl	800cc64 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 8002390:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 8002484 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x144>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8002394:	3004      	adds	r0, #4
 8002396:	f00a fcb2 	bl	800ccfe <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800239a:	f8d9 0000 	ldr.w	r0, [r9]
 800239e:	b110      	cbz	r0, 80023a6 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 80023a0:	6803      	ldr	r3, [r0, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	4798      	blx	r3
    if (*currentTrans)
 80023a6:	f8d9 0000 	ldr.w	r0, [r9]
 80023aa:	b110      	cbz	r0, 80023b2 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 80023ac:	6803      	ldr	r3, [r0, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4798      	blx	r3
    if (*currentScreen)
 80023b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002488 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x148>
 80023b6:	f8d8 0000 	ldr.w	r0, [r8]
 80023ba:	b110      	cbz	r0, 80023c2 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 80023bc:	6803      	ldr	r3, [r0, #0]
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	4798      	blx	r3
    if (*currentPresenter)
 80023c2:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80023c6:	b110      	cbz	r0, 80023ce <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 80023c8:	6803      	ldr	r3, [r0, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	4798      	blx	r3
    if (*currentScreen)
 80023ce:	f8d8 0000 	ldr.w	r0, [r8]
 80023d2:	b110      	cbz	r0, 80023da <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 80023d4:	6803      	ldr	r3, [r0, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4798      	blx	r3
    if (*currentPresenter)
 80023da:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80023de:	b110      	cbz	r0, 80023e6 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 80023e0:	6803      	ldr	r3, [r0, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80023e6:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 80023e8:	6803      	ldr	r3, [r0, #0]
 80023ea:	2100      	movs	r1, #0
 80023ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ee:	4798      	blx	r3
        : screenContainer(0), done(false)
 80023f0:	f04f 0b00 	mov.w	fp, #0
 80023f4:	4b22      	ldr	r3, [pc, #136]	@ (8002480 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x140>)
 80023f6:	f8c0 b004 	str.w	fp, [r0, #4]
 80023fa:	4604      	mov	r4, r0
 80023fc:	f880 b008 	strb.w	fp, [r0, #8]
 8002400:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002402:	68b0      	ldr	r0, [r6, #8]
 8002404:	6803      	ldr	r3, [r0, #0]
 8002406:	4659      	mov	r1, fp
 8002408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240a:	4798      	blx	r3
 800240c:	4605      	mov	r5, r0
 800240e:	f001 fabf 	bl	8003990 <_ZN11Screen2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8002412:	6870      	ldr	r0, [r6, #4]
 8002414:	6803      	ldr	r3, [r0, #0]
 8002416:	4659      	mov	r1, fp
 8002418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241a:	4798      	blx	r3
 800241c:	4629      	mov	r1, r5
 800241e:	4606      	mov	r6, r0
 8002420:	f001 fa42 	bl	80038a8 <_ZN16Screen2PresenterC1ER11Screen2View>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 8002424:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8002426:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
public:
    Model();
    long modelTickCount = 0;
    void bind(ModelListener* listener)
    {
        modelListener = listener;
 800242a:	f8ca 3008 	str.w	r3, [sl, #8]
    newScreen->setupScreen();
 800242e:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8002430:	f8c6 a008 	str.w	sl, [r6, #8]
 8002434:	4628      	mov	r0, r5
 8002436:	68db      	ldr	r3, [r3, #12]
    *currentTrans = newTransition;
 8002438:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 800243c:	f8c8 5000 	str.w	r5, [r8]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8002440:	63ee      	str	r6, [r5, #60]	@ 0x3c
    newScreen->setupScreen();
 8002442:	4798      	blx	r3
    newPresenter->activate();
 8002444:	6833      	ldr	r3, [r6, #0]
 8002446:	4630      	mov	r0, r6
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800244c:	4621      	mov	r1, r4
 800244e:	4628      	mov	r0, r5
 8002450:	f00c f8d6 	bl	800e600 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8002454:	6823      	ldr	r3, [r4, #0]
 8002456:	4620      	mov	r0, r4
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	4798      	blx	r3
    newTransition->invalidate();
 800245c:	6823      	ldr	r3, [r4, #0]
 800245e:	695b      	ldr	r3, [r3, #20]
 8002460:	4620      	mov	r0, r4
}
 8002462:	b001      	add	sp, #4
 8002464:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002468:	4718      	bx	r3
 800246a:	bf00      	nop
 800246c:	08014bfc 	.word	0x08014bfc
 8002470:	08014c8a 	.word	0x08014c8a
 8002474:	08014d5c 	.word	0x08014d5c
 8002478:	08014da3 	.word	0x08014da3
 800247c:	08014e46 	.word	0x08014e46
 8002480:	0801517c 	.word	0x0801517c
 8002484:	20012698 	.word	0x20012698
 8002488:	20012694 	.word	0x20012694

0800248c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv>:
{
 800248c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::WipeTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002490:	e9d0 ba55 	ldrd	fp, sl, [r0, #340]	@ 0x154
{
 8002494:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002496:	f8db 0008 	ldr.w	r0, [fp, #8]
 800249a:	6803      	ldr	r3, [r0, #0]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	4798      	blx	r3
 80024a0:	f5b0 7fc4 	cmp.w	r0, #392	@ 0x188
 80024a4:	d205      	bcs.n	80024b2 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x26>
 80024a6:	4b55      	ldr	r3, [pc, #340]	@ (80025fc <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x170>)
 80024a8:	4a55      	ldr	r2, [pc, #340]	@ (8002600 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x174>)
 80024aa:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80024ac:	4855      	ldr	r0, [pc, #340]	@ (8002604 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x178>)
 80024ae:	f010 ff71 	bl	8013394 <__assert_func>
 80024b2:	f8db 0004 	ldr.w	r0, [fp, #4]
 80024b6:	6803      	ldr	r3, [r0, #0]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	4798      	blx	r3
 80024bc:	280f      	cmp	r0, #15
 80024be:	d803      	bhi.n	80024c8 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x3c>
 80024c0:	4b51      	ldr	r3, [pc, #324]	@ (8002608 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x17c>)
 80024c2:	4a4f      	ldr	r2, [pc, #316]	@ (8002600 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x174>)
 80024c4:	21a4      	movs	r1, #164	@ 0xa4
 80024c6:	e7f1      	b.n	80024ac <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80024c8:	f8db 000c 	ldr.w	r0, [fp, #12]
 80024cc:	6803      	ldr	r3, [r0, #0]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	4798      	blx	r3
 80024d2:	2837      	cmp	r0, #55	@ 0x37
 80024d4:	d803      	bhi.n	80024de <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x52>
 80024d6:	4b4d      	ldr	r3, [pc, #308]	@ (800260c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x180>)
 80024d8:	4a49      	ldr	r2, [pc, #292]	@ (8002600 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x174>)
 80024da:	21a5      	movs	r1, #165	@ 0xa5
 80024dc:	e7e6      	b.n	80024ac <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x20>
    Application::getInstance()->clearAllTimerWidgets();
 80024de:	f00a fbc1 	bl	800cc64 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 80024e2:	f8df 913c 	ldr.w	r9, [pc, #316]	@ 8002620 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x194>
 80024e6:	3004      	adds	r0, #4
 80024e8:	f00a fc09 	bl	800ccfe <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80024ec:	f8d9 0000 	ldr.w	r0, [r9]
 80024f0:	b110      	cbz	r0, 80024f8 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x6c>
        (*currentTrans)->tearDown();
 80024f2:	6803      	ldr	r3, [r0, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	4798      	blx	r3
    if (*currentTrans)
 80024f8:	f8d9 0000 	ldr.w	r0, [r9]
 80024fc:	b110      	cbz	r0, 8002504 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x78>
        (*currentTrans)->~Transition();
 80024fe:	6803      	ldr	r3, [r0, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4798      	blx	r3
    if (*currentScreen)
 8002504:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 8002624 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x198>
 8002508:	f8d8 0000 	ldr.w	r0, [r8]
 800250c:	b110      	cbz	r0, 8002514 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x88>
        (*currentScreen)->tearDownScreen();
 800250e:	6803      	ldr	r3, [r0, #0]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	4798      	blx	r3
    if (*currentPresenter)
 8002514:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002518:	b110      	cbz	r0, 8002520 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x94>
        (*currentPresenter)->deactivate();
 800251a:	6803      	ldr	r3, [r0, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	4798      	blx	r3
    if (*currentScreen)
 8002520:	f8d8 0000 	ldr.w	r0, [r8]
 8002524:	b110      	cbz	r0, 800252c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0xa0>
        (*currentScreen)->~Screen();
 8002526:	6803      	ldr	r3, [r0, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4798      	blx	r3
    if (*currentPresenter)
 800252c:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002530:	b110      	cbz	r0, 8002538 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0xac>
        (*currentPresenter)->~Presenter();
 8002532:	6803      	ldr	r3, [r0, #0]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002538:	f8db 000c 	ldr.w	r0, [fp, #12]
 800253c:	6803      	ldr	r3, [r0, #0]
 800253e:	2100      	movs	r1, #0
 8002540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002542:	4798      	blx	r3
          solid()
 8002544:	4b32      	ldr	r3, [pc, #200]	@ (8002610 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x184>)
 8002546:	6003      	str	r3, [r0, #0]
 8002548:	4604      	mov	r4, r0
 800254a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800254e:	8103      	strh	r3, [r0, #8]
 8002550:	2500      	movs	r5, #0
 8002552:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002556:	6045      	str	r5, [r0, #4]
          animationCounter(0),
 8002558:	7285      	strb	r5, [r0, #10]
          solid()
 800255a:	6363      	str	r3, [r4, #52]	@ 0x34
    class FullSolidRect : public Widget
 800255c:	4b2d      	ldr	r3, [pc, #180]	@ (8002614 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x188>)
 800255e:	6123      	str	r3, [r4, #16]
            targetValue = HAL::DISPLAY_WIDTH;
 8002560:	4b2d      	ldr	r3, [pc, #180]	@ (8002618 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x18c>)
          calculatedValue(0),
 8002562:	81e5      	strh	r5, [r4, #14]
            targetValue = HAL::DISPLAY_WIDTH;
 8002564:	f9b3 1000 	ldrsh.w	r1, [r3]
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8002568:	4b2c      	ldr	r3, [pc, #176]	@ (800261c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x190>)
            targetValue = HAL::DISPLAY_WIDTH;
 800256a:	81a1      	strh	r1, [r4, #12]
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 800256c:	f9b3 6000 	ldrsh.w	r6, [r3]
          solid()
 8002570:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002574:	e9c4 5507 	strd	r5, r5, [r4, #28]
 8002578:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
 800257c:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
 8002580:	3010      	adds	r0, #16
        setWidth(width);
 8002582:	9001      	str	r0, [sp, #4]
 8002584:	f7ff fdcc 	bl	8002120 <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 8002588:	9801      	ldr	r0, [sp, #4]
 800258a:	4631      	mov	r1, r6
 800258c:	f7ff fdca 	bl	8002124 <_ZN8touchgfx8Drawable9setHeightEs>
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002590:	f8db 0008 	ldr.w	r0, [fp, #8]
 8002594:	6803      	ldr	r3, [r0, #0]
 8002596:	4629      	mov	r1, r5
 8002598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259a:	4798      	blx	r3
 800259c:	4606      	mov	r6, r0
 800259e:	f001 f951 	bl	8003844 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80025a2:	f8db 0004 	ldr.w	r0, [fp, #4]
 80025a6:	6803      	ldr	r3, [r0, #0]
 80025a8:	4629      	mov	r1, r5
 80025aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ac:	4798      	blx	r3
 80025ae:	4631      	mov	r1, r6
 80025b0:	4605      	mov	r5, r0
 80025b2:	f001 f919 	bl	80037e8 <_ZN16Screen1PresenterC1ER11Screen1View>
    model->bind(newPresenter);
 80025b6:	1d2b      	adds	r3, r5, #4
    *currentPresenter = newPresenter;
 80025b8:	f8c7 513c 	str.w	r5, [r7, #316]	@ 0x13c
 80025bc:	f8ca 3008 	str.w	r3, [sl, #8]
    newScreen->setupScreen();
 80025c0:	6833      	ldr	r3, [r6, #0]
 80025c2:	f8c5 a008 	str.w	sl, [r5, #8]
 80025c6:	4630      	mov	r0, r6
 80025c8:	68db      	ldr	r3, [r3, #12]
    *currentTrans = newTransition;
 80025ca:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 80025ce:	f8c8 6000 	str.w	r6, [r8]
 80025d2:	63f5      	str	r5, [r6, #60]	@ 0x3c
    newScreen->setupScreen();
 80025d4:	4798      	blx	r3
    newPresenter->activate();
 80025d6:	682b      	ldr	r3, [r5, #0]
 80025d8:	4628      	mov	r0, r5
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80025de:	4621      	mov	r1, r4
 80025e0:	4630      	mov	r0, r6
 80025e2:	f00c f80d 	bl	800e600 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80025e6:	6823      	ldr	r3, [r4, #0]
 80025e8:	4620      	mov	r0, r4
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	4798      	blx	r3
    newTransition->invalidate();
 80025ee:	6823      	ldr	r3, [r4, #0]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	4620      	mov	r0, r4
}
 80025f4:	b003      	add	sp, #12
 80025f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025fa:	4718      	bx	r3
 80025fc:	08014bfc 	.word	0x08014bfc
 8002600:	08014ee9 	.word	0x08014ee9
 8002604:	08014d5c 	.word	0x08014d5c
 8002608:	08014da3 	.word	0x08014da3
 800260c:	08014e46 	.word	0x08014e46
 8002610:	080151a0 	.word	0x080151a0
 8002614:	080150a8 	.word	0x080150a8
 8002618:	2001264c 	.word	0x2001264c
 800261c:	2001264e 	.word	0x2001264e
 8002620:	20012698 	.word	0x20012698
 8002624:	20012694 	.word	0x20012694

08002628 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
{
 8002628:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800262c:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8002630:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002632:	68b0      	ldr	r0, [r6, #8]
 8002634:	6803      	ldr	r3, [r0, #0]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	4798      	blx	r3
 800263a:	f5b0 7fc4 	cmp.w	r0, #392	@ 0x188
 800263e:	d205      	bcs.n	800264c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x24>
 8002640:	4b44      	ldr	r3, [pc, #272]	@ (8002754 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 8002642:	4a45      	ldr	r2, [pc, #276]	@ (8002758 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8002644:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002646:	4845      	ldr	r0, [pc, #276]	@ (800275c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8002648:	f010 fea4 	bl	8013394 <__assert_func>
 800264c:	6870      	ldr	r0, [r6, #4]
 800264e:	6803      	ldr	r3, [r0, #0]
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	4798      	blx	r3
 8002654:	280f      	cmp	r0, #15
 8002656:	d803      	bhi.n	8002660 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x38>
 8002658:	4b41      	ldr	r3, [pc, #260]	@ (8002760 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 800265a:	4a3f      	ldr	r2, [pc, #252]	@ (8002758 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 800265c:	21a4      	movs	r1, #164	@ 0xa4
 800265e:	e7f2      	b.n	8002646 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002660:	68f0      	ldr	r0, [r6, #12]
 8002662:	6803      	ldr	r3, [r0, #0]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	4798      	blx	r3
 8002668:	280b      	cmp	r0, #11
 800266a:	d803      	bhi.n	8002674 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4c>
 800266c:	4b3d      	ldr	r3, [pc, #244]	@ (8002764 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 800266e:	4a3a      	ldr	r2, [pc, #232]	@ (8002758 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8002670:	21a5      	movs	r1, #165	@ 0xa5
 8002672:	e7e8      	b.n	8002646 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    Application::getInstance()->clearAllTimerWidgets();
 8002674:	f00a faf6 	bl	800cc64 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 8002678:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 800276c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>
 800267c:	3004      	adds	r0, #4
 800267e:	f00a fb3e 	bl	800ccfe <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8002682:	f8d9 0000 	ldr.w	r0, [r9]
 8002686:	b110      	cbz	r0, 800268e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 8002688:	6803      	ldr	r3, [r0, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	4798      	blx	r3
    if (*currentTrans)
 800268e:	f8d9 0000 	ldr.w	r0, [r9]
 8002692:	b110      	cbz	r0, 800269a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 8002694:	6803      	ldr	r3, [r0, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4798      	blx	r3
    if (*currentScreen)
 800269a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002770 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
 800269e:	f8d8 0000 	ldr.w	r0, [r8]
 80026a2:	b110      	cbz	r0, 80026aa <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 80026a4:	6803      	ldr	r3, [r0, #0]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	4798      	blx	r3
    if (*currentPresenter)
 80026aa:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80026ae:	b110      	cbz	r0, 80026b6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 80026b0:	6803      	ldr	r3, [r0, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	4798      	blx	r3
    if (*currentScreen)
 80026b6:	f8d8 0000 	ldr.w	r0, [r8]
 80026ba:	b110      	cbz	r0, 80026c2 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 80026bc:	6803      	ldr	r3, [r0, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4798      	blx	r3
    if (*currentPresenter)
 80026c2:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80026c6:	b110      	cbz	r0, 80026ce <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 80026c8:	6803      	ldr	r3, [r0, #0]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80026ce:	68f0      	ldr	r0, [r6, #12]
 80026d0:	6803      	ldr	r3, [r0, #0]
 80026d2:	2100      	movs	r1, #0
 80026d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d6:	4798      	blx	r3
        : screenContainer(0), done(false)
 80026d8:	f04f 0b00 	mov.w	fp, #0
 80026dc:	4b22      	ldr	r3, [pc, #136]	@ (8002768 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 80026de:	f8c0 b004 	str.w	fp, [r0, #4]
 80026e2:	4604      	mov	r4, r0
 80026e4:	f880 b008 	strb.w	fp, [r0, #8]
 80026e8:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80026ea:	68b0      	ldr	r0, [r6, #8]
 80026ec:	6803      	ldr	r3, [r0, #0]
 80026ee:	4659      	mov	r1, fp
 80026f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f2:	4798      	blx	r3
 80026f4:	4605      	mov	r5, r0
 80026f6:	f001 f8a5 	bl	8003844 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80026fa:	6870      	ldr	r0, [r6, #4]
 80026fc:	6803      	ldr	r3, [r0, #0]
 80026fe:	4659      	mov	r1, fp
 8002700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002702:	4798      	blx	r3
 8002704:	4629      	mov	r1, r5
 8002706:	4606      	mov	r6, r0
 8002708:	f001 f86e 	bl	80037e8 <_ZN16Screen1PresenterC1ER11Screen1View>
    model->bind(newPresenter);
 800270c:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 800270e:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
 8002712:	f8ca 3008 	str.w	r3, [sl, #8]
    newScreen->setupScreen();
 8002716:	682b      	ldr	r3, [r5, #0]
 8002718:	f8c6 a008 	str.w	sl, [r6, #8]
 800271c:	4628      	mov	r0, r5
 800271e:	68db      	ldr	r3, [r3, #12]
    *currentTrans = newTransition;
 8002720:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8002724:	f8c8 5000 	str.w	r5, [r8]
 8002728:	63ee      	str	r6, [r5, #60]	@ 0x3c
    newScreen->setupScreen();
 800272a:	4798      	blx	r3
    newPresenter->activate();
 800272c:	6833      	ldr	r3, [r6, #0]
 800272e:	4630      	mov	r0, r6
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002734:	4621      	mov	r1, r4
 8002736:	4628      	mov	r0, r5
 8002738:	f00b ff62 	bl	800e600 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800273c:	6823      	ldr	r3, [r4, #0]
 800273e:	4620      	mov	r0, r4
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	4798      	blx	r3
    newTransition->invalidate();
 8002744:	6823      	ldr	r3, [r4, #0]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	4620      	mov	r0, r4
}
 800274a:	b001      	add	sp, #4
 800274c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002750:	4718      	bx	r3
 8002752:	bf00      	nop
 8002754:	08014bfc 	.word	0x08014bfc
 8002758:	08014fcd 	.word	0x08014fcd
 800275c:	08014d5c 	.word	0x08014d5c
 8002760:	08014da3 	.word	0x08014da3
 8002764:	08014e46 	.word	0x08014e46
 8002768:	0801517c 	.word	0x0801517c
 800276c:	20012698 	.word	0x20012698
 8002770:	20012694 	.word	0x20012694

08002774 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8002774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002776:	4604      	mov	r4, r0
 8002778:	4617      	mov	r7, r2
 800277a:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 800277c:	f00a fb5c 	bl	800ce38 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8002780:	4b10      	ldr	r3, [pc, #64]	@ (80027c4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
        : currentPresenter(0),
 8002782:	2500      	movs	r5, #0
      model(m)
 8002784:	e9c4 7655 	strd	r7, r6, [r4, #340]	@ 0x154
        return instance;
 8002788:	4e0f      	ldr	r6, [pc, #60]	@ (80027c8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
        instance = this;
 800278a:	601c      	str	r4, [r3, #0]
        : pobject(0), pmemfun(0)
 800278c:	e9c4 5553 	strd	r5, r5, [r4, #332]	@ 0x14c
 8002790:	4b0e      	ldr	r3, [pc, #56]	@ (80027cc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 8002792:	6830      	ldr	r0, [r6, #0]
 8002794:	6023      	str	r3, [r4, #0]
 8002796:	4b0e      	ldr	r3, [pc, #56]	@ (80027d0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8002798:	e9c4 3551 	strd	r3, r5, [r4, #324]	@ 0x144
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 800279c:	6803      	ldr	r3, [r0, #0]
 800279e:	2101      	movs	r1, #1
 80027a0:	689b      	ldr	r3, [r3, #8]
          pendingScreenTransitionCallback(0)
 80027a2:	e9c4 554f 	strd	r5, r5, [r4, #316]	@ 0x13c
 80027a6:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 80027a8:	4628      	mov	r0, r5
 80027aa:	f000 ff7b 	bl	80036a4 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80027ae:	6833      	ldr	r3, [r6, #0]
 80027b0:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80027b4:	b10a      	cbz	r2, 80027ba <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 80027b6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80027b8:	b900      	cbnz	r0, 80027bc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 80027ba:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_L4();
 80027bc:	f010 f870 	bl	80128a0 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
}
 80027c0:	4620      	mov	r0, r4
 80027c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027c4:	200126a4 	.word	0x200126a4
 80027c8:	20012658 	.word	0x20012658
 80027cc:	08015128 	.word	0x08015128
 80027d0:	08015110 	.word	0x08015110

080027d4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80027d4:	4b06      	ldr	r3, [pc, #24]	@ (80027f0 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 80027d6:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 80027da:	2300      	movs	r3, #0
 80027dc:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 80027e0:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 80027e4:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 80027e8:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	08002629 	.word	0x08002629

080027f4 <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionEastEv>:
 80027f4:	4b06      	ldr	r3, [pc, #24]	@ (8002810 <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionEastEv+0x1c>)
 80027f6:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 80027fa:	2300      	movs	r3, #0
 80027fc:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8002800:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8002804:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8002808:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	0800248d 	.word	0x0800248d

08002814 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>:
 8002814:	4b06      	ldr	r3, [pc, #24]	@ (8002830 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv+0x1c>)
 8002816:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 800281a:	2300      	movs	r3, #0
 800281c:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8002820:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8002824:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8002828:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	08002341 	.word	0x08002341

08002834 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8002834:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8002836:	4770      	bx	lr

08002838 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8002838:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800283a:	4770      	bx	lr

0800283c <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 800283c:	4770      	bx	lr

0800283e <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800283e:	888b      	ldrh	r3, [r1, #4]
 8002840:	69c0      	ldr	r0, [r0, #28]
 8002842:	680a      	ldr	r2, [r1, #0]
 8002844:	0adb      	lsrs	r3, r3, #11
 8002846:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 800284a:	4410      	add	r0, r2
 800284c:	4770      	bx	lr

0800284e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800284e:	b510      	push	{r4, lr}
 8002850:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 8002852:	b1ba      	cbz	r2, 8002884 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8002854:	7b10      	ldrb	r0, [r2, #12]
 8002856:	b168      	cbz	r0, 8002874 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8002858:	7b53      	ldrb	r3, [r2, #13]
 800285a:	7ad2      	ldrb	r2, [r2, #11]
 800285c:	021b      	lsls	r3, r3, #8
 800285e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8002862:	431a      	orrs	r2, r3
 8002864:	6a23      	ldr	r3, [r4, #32]
 8002866:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 800286a:	881a      	ldrh	r2, [r3, #0]
 800286c:	428a      	cmp	r2, r1
 800286e:	d102      	bne.n	8002876 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8002870:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 8002874:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8002876:	d805      	bhi.n	8002884 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8002878:	3801      	subs	r0, #1
 800287a:	b280      	uxth	r0, r0
 800287c:	3304      	adds	r3, #4
 800287e:	2800      	cmp	r0, #0
 8002880:	d1f3      	bne.n	800286a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8002882:	e7f7      	b.n	8002874 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8002884:	2000      	movs	r0, #0
 8002886:	e7f5      	b.n	8002874 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08002888 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8002888:	b510      	push	{r4, lr}
 800288a:	212c      	movs	r1, #44	@ 0x2c
 800288c:	4604      	mov	r4, r0
 800288e:	f010 fd53 	bl	8013338 <_ZdlPvj>
 8002892:	4620      	mov	r0, r4
 8002894:	bd10      	pop	{r4, pc}
	...

08002898 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8002898:	b530      	push	{r4, r5, lr}
 800289a:	b08b      	sub	sp, #44	@ 0x2c
 800289c:	4604      	mov	r4, r0
      arabicTable(formsTable)
 800289e:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 80028a2:	9508      	str	r5, [sp, #32]
 80028a4:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 80028a8:	9507      	str	r5, [sp, #28]
 80028aa:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 80028ae:	9506      	str	r5, [sp, #24]
 80028b0:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 80028b4:	9505      	str	r5, [sp, #20]
 80028b6:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 80028ba:	9504      	str	r5, [sp, #16]
 80028bc:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 80028c0:	9503      	str	r5, [sp, #12]
 80028c2:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 80028c6:	9502      	str	r5, [sp, #8]
 80028c8:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 80028cc:	9501      	str	r5, [sp, #4]
 80028ce:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 80028d2:	9500      	str	r5, [sp, #0]
 80028d4:	f00b faee 	bl	800deb4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 80028d8:	4b06      	ldr	r3, [pc, #24]	@ (80028f4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
 80028da:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 80028dc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80028de:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 80028e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80028e2:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 80028e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80028e6:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 80028e8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80028ea:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 80028ec:	4620      	mov	r0, r4
 80028ee:	b00b      	add	sp, #44	@ 0x2c
 80028f0:	bd30      	pop	{r4, r5, pc}
 80028f2:	bf00      	nop
 80028f4:	080151c4 	.word	0x080151c4

080028f8 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 80028f8:	4770      	bx	lr

080028fa <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 80028fa:	4770      	bx	lr

080028fc <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 80028fc:	4770      	bx	lr

080028fe <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 80028fe:	4770      	bx	lr

08002900 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8002900:	4770      	bx	lr

08002902 <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 8002902:	b530      	push	{r4, r5, lr}
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 8002904:	6803      	ldr	r3, [r0, #0]
        rect.width = width;
 8002906:	8101      	strh	r1, [r0, #8]
    virtual void setWidth(int16_t width)
 8002908:	b085      	sub	sp, #20
        boundingArea = calculateBoundingArea();
 800290a:	466d      	mov	r5, sp
 800290c:	4601      	mov	r1, r0
 800290e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
    virtual void setWidth(int16_t width)
 8002912:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
 8002914:	4628      	mov	r0, r5
 8002916:	4798      	blx	r3
 8002918:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800291c:	343c      	adds	r4, #60	@ 0x3c
 800291e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8002922:	b005      	add	sp, #20
 8002924:	bd30      	pop	{r4, r5, pc}

08002926 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 8002926:	b530      	push	{r4, r5, lr}
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 8002928:	6803      	ldr	r3, [r0, #0]
        rect.height = height;
 800292a:	8141      	strh	r1, [r0, #10]
    virtual void setHeight(int16_t height)
 800292c:	b085      	sub	sp, #20
        boundingArea = calculateBoundingArea();
 800292e:	466d      	mov	r5, sp
 8002930:	4601      	mov	r1, r0
 8002932:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
    virtual void setHeight(int16_t height)
 8002936:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
 8002938:	4628      	mov	r0, r5
 800293a:	4798      	blx	r3
 800293c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002940:	343c      	adds	r4, #60	@ 0x3c
 8002942:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8002946:	b005      	add	sp, #20
 8002948:	bd30      	pop	{r4, r5, pc}

0800294a <_ZNK8touchgfx8TextArea12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 800294a:	2200      	movs	r2, #0
 800294c:	8002      	strh	r2, [r0, #0]
 800294e:	8042      	strh	r2, [r0, #2]
 8002950:	8082      	strh	r2, [r0, #4]
 8002952:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8002954:	4770      	bx	lr

08002956 <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8002956:	f880 1036 	strb.w	r1, [r0, #54]	@ 0x36
    }
 800295a:	4770      	bx	lr

0800295c <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800295c:	b570      	push	{r4, r5, r6, lr}
    {
        setX(x);
 800295e:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8002960:	4604      	mov	r4, r0
        setX(x);
 8002962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8002964:	4615      	mov	r5, r2
        setX(x);
 8002966:	4798      	blx	r3
        setBaselineY(baselineY);
 8002968:	6823      	ldr	r3, [r4, #0]
 800296a:	4629      	mov	r1, r5
 800296c:	4620      	mov	r0, r4
 800296e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    }
 8002970:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 8002974:	4718      	bx	r3

08002976 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 8002976:	2000      	movs	r0, #0
 8002978:	4770      	bx	lr

0800297a <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 800297a:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 800297c:	4770      	bx	lr

0800297e <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 800297e:	4770      	bx	lr

08002980 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 8002980:	4770      	bx	lr

08002982 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8002982:	4770      	bx	lr

08002984 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8002984:	4770      	bx	lr

08002986 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8002986:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8002988:	68c2      	ldr	r2, [r0, #12]
 800298a:	6844      	ldr	r4, [r0, #4]
 800298c:	1055      	asrs	r5, r2, #1
    virtual void execute(T1 t1)
 800298e:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8002990:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8002994:	07d2      	lsls	r2, r2, #31
 8002996:	bf48      	it	mi
 8002998:	5962      	ldrmi	r2, [r4, r5]
 800299a:	689b      	ldr	r3, [r3, #8]
    }
 800299c:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 800299e:	bf48      	it	mi
 80029a0:	58d3      	ldrmi	r3, [r2, r3]
 80029a2:	4718      	bx	r3

080029a4 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 80029a4:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 80029a6:	6840      	ldr	r0, [r0, #4]
 80029a8:	b130      	cbz	r0, 80029b8 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	b91a      	cbnz	r2, 80029b6 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 80029ae:	68d8      	ldr	r0, [r3, #12]
 80029b0:	f000 0001 	and.w	r0, r0, #1
 80029b4:	4770      	bx	lr
 80029b6:	2001      	movs	r0, #1
    }
 80029b8:	4770      	bx	lr

080029ba <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 80029ba:	b510      	push	{r4, lr}
 80029bc:	214c      	movs	r1, #76	@ 0x4c
 80029be:	4604      	mov	r4, r0
 80029c0:	f010 fcba 	bl	8013338 <_ZdlPvj>
 80029c4:	4620      	mov	r0, r4
 80029c6:	bd10      	pop	{r4, pc}

080029c8 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80029c8:	b510      	push	{r4, lr}
 80029ca:	2110      	movs	r1, #16
 80029cc:	4604      	mov	r4, r0
 80029ce:	f010 fcb3 	bl	8013338 <_ZdlPvj>
 80029d2:	4620      	mov	r0, r4
 80029d4:	bd10      	pop	{r4, pc}

080029d6 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 80029d6:	b510      	push	{r4, lr}
}
 80029d8:	f44f 71c2 	mov.w	r1, #388	@ 0x184
Screen1ViewBase::~Screen1ViewBase()
 80029dc:	4604      	mov	r4, r0
}
 80029de:	f010 fcab 	bl	8013338 <_ZdlPvj>
 80029e2:	4620      	mov	r0, r4
 80029e4:	bd10      	pop	{r4, pc}

080029e6 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    virtual void invalidateContent() const
 80029e6:	b508      	push	{r3, lr}
        Widget::invalidateContent();
 80029e8:	f7ff fc3d 	bl	8002266 <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 80029ec:	bd08      	pop	{r3, pc}
	...

080029f0 <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80029f0:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 80029f2:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80029f4:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80029f6:	4b12      	ldr	r3, [pc, #72]	@ (8002a40 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 80029f8:	681b      	ldr	r3, [r3, #0]
    virtual void setBaselineY(int16_t baselineY)
 80029fa:	4604      	mov	r4, r0
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80029fc:	b28d      	uxth	r5, r1
 80029fe:	b92b      	cbnz	r3, 8002a0c <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 8002a00:	4b10      	ldr	r3, [pc, #64]	@ (8002a44 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8002a02:	4a11      	ldr	r2, [pc, #68]	@ (8002a48 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8002a04:	216c      	movs	r1, #108	@ 0x6c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8002a06:	4811      	ldr	r0, [pc, #68]	@ (8002a4c <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8002a08:	f010 fcc4 	bl	8013394 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8002a0c:	4910      	ldr	r1, [pc, #64]	@ (8002a50 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 8002a0e:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8002a10:	8809      	ldrh	r1, [r1, #0]
 8002a12:	4291      	cmp	r1, r2
 8002a14:	d803      	bhi.n	8002a1e <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8002a16:	4b0f      	ldr	r3, [pc, #60]	@ (8002a54 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8002a18:	4a0b      	ldr	r2, [pc, #44]	@ (8002a48 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8002a1a:	216d      	movs	r1, #109	@ 0x6d
 8002a1c:	e7f3      	b.n	8002a06 <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 8002a1e:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8002a22:	4b0d      	ldr	r3, [pc, #52]	@ (8002a58 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002a2a:	6803      	ldr	r3, [r0, #0]
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2e:	4798      	blx	r3
 8002a30:	1a29      	subs	r1, r5, r0
 8002a32:	4633      	mov	r3, r6
 8002a34:	4620      	mov	r0, r4
 8002a36:	b209      	sxth	r1, r1
    }
 8002a38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8002a3c:	4718      	bx	r3
 8002a3e:	bf00      	nop
 8002a40:	200126a8 	.word	0x200126a8
 8002a44:	08015224 	.word	0x08015224
 8002a48:	08015266 	.word	0x08015266
 8002a4c:	080152a1 	.word	0x080152a1
 8002a50:	200126ac 	.word	0x200126ac
 8002a54:	080152e8 	.word	0x080152e8
 8002a58:	200126b0 	.word	0x200126b0

08002a5c <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &button1)
 8002a5c:	306c      	adds	r0, #108	@ 0x6c
 8002a5e:	4288      	cmp	r0, r1
{
 8002a60:	b508      	push	{r3, lr}
    if (&src == &button1)
 8002a62:	d105      	bne.n	8002a70 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x14>
    virtual ~Screen1ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8002a64:	f00a f8fe 	bl	800cc64 <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction1
        //When button1 clicked change screen to Screen2
        //Go to Screen2 with no screen transition
        application().gotoScreen2ScreenNoTransition();
    }
}
 8002a68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen2ScreenNoTransition();
 8002a6c:	f7ff bed2 	b.w	8002814 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>
}
 8002a70:	bd08      	pop	{r3, pc}

08002a72 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8002a72:	2200      	movs	r2, #0
 8002a74:	f04f 31ff 	mov.w	r1, #4294967295
 8002a78:	e9c0 2100 	strd	r2, r1, [r0]
              text(0)
 8002a7c:	6082      	str	r2, [r0, #8]
    }
 8002a7e:	4770      	bx	lr

08002a80 <_ZN8touchgfx8Drawable5setXYEss>:
    void setXY(int16_t x, int16_t y)
 8002a80:	b570      	push	{r4, r5, r6, lr}
        setX(x);
 8002a82:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8002a84:	4604      	mov	r4, r0
        setX(x);
 8002a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setXY(int16_t x, int16_t y)
 8002a88:	4615      	mov	r5, r2
        setX(x);
 8002a8a:	4798      	blx	r3
        setY(y);
 8002a8c:	6823      	ldr	r3, [r4, #0]
 8002a8e:	4629      	mov	r1, r5
 8002a90:	4620      	mov	r0, r4
 8002a92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 8002a94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8002a98:	4718      	bx	r3
	...

08002a9c <_ZN8touchgfx6WidgetC1Ev>:
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8002aa2:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 8002aa6:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 8002aaa:	e9c0 2207 	strd	r2, r2, [r0, #28]
          touchable(false),
 8002aae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ab2:	8482      	strh	r2, [r0, #36]	@ 0x24
class Widget : public Drawable
 8002ab4:	4a01      	ldr	r2, [pc, #4]	@ (8002abc <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8002ab6:	6002      	str	r2, [r0, #0]
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	0801537c 	.word	0x0801537c

08002ac0 <_ZN8touchgfx8TextAreaC1Ev>:
    TextArea()
 8002ac0:	b510      	push	{r4, lr}
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8002ac2:	2226      	movs	r2, #38	@ 0x26
    TextArea()
 8002ac4:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	f010 fe6b 	bl	80137a2 <memset>
 8002acc:	4620      	mov	r0, r4
 8002ace:	f7ff ffe5 	bl	8002a9c <_ZN8touchgfx6WidgetC1Ev>
 8002ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8002afc <_ZN8touchgfx8TextAreaC1Ev+0x3c>)
 8002ad4:	6023      	str	r3, [r4, #0]
        : typedTextId(id)
 8002ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8002b00 <_ZN8touchgfx8TextAreaC1Ev+0x40>)
 8002ad8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002ada:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ade:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8002ae0:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	e9c4 320c 	strd	r3, r2, [r4, #48]	@ 0x30
 8002aea:	8723      	strh	r3, [r4, #56]	@ 0x38
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8002aec:	f04f 32ff 	mov.w	r2, #4294967295
              text(0)
 8002af0:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
 8002af4:	63e3      	str	r3, [r4, #60]	@ 0x3c
    }
 8002af6:	4620      	mov	r0, r4
 8002af8:	bd10      	pop	{r4, pc}
 8002afa:	bf00      	nop
 8002afc:	080159d8 	.word	0x080159d8
 8002b00:	08014bf4 	.word	0x08014bf4

08002b04 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
 8002b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b08:	4604      	mov	r4, r0
 8002b0a:	b089      	sub	sp, #36	@ 0x24
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8002b0c:	4626      	mov	r6, r4
        : presenter(0)
 8002b0e:	2500      	movs	r5, #0
 8002b10:	f00b fbca 	bl	800e2a8 <_ZN8touchgfx6ScreenC1Ev>
 8002b14:	4b83      	ldr	r3, [pc, #524]	@ (8002d24 <_ZN15Screen1ViewBaseC1Ev+0x220>)
 8002b16:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8002b18:	f846 3b40 	str.w	r3, [r6], #64
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8002b1c:	4629      	mov	r1, r5
 8002b1e:	2226      	movs	r2, #38	@ 0x26
 8002b20:	4630      	mov	r0, r6
 8002b22:	f010 fe3e 	bl	80137a2 <memset>
 8002b26:	4630      	mov	r0, r6
 8002b28:	f7ff ffb8 	bl	8002a9c <_ZN8touchgfx6WidgetC1Ev>
 8002b2c:	f104 0b6c 	add.w	fp, r4, #108	@ 0x6c
 8002b30:	4b7d      	ldr	r3, [pc, #500]	@ (8002d28 <_ZN15Screen1ViewBaseC1Ev+0x224>)
 8002b32:	6423      	str	r3, [r4, #64]	@ 0x40
 8002b34:	27ff      	movs	r7, #255	@ 0xff
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
        : Widget(), action(), pressed(false)
 8002b36:	4629      	mov	r1, r5
 8002b38:	2226      	movs	r2, #38	@ 0x26
 8002b3a:	f884 7066 	strb.w	r7, [r4, #102]	@ 0x66
        : color(col)
 8002b3e:	66a5      	str	r5, [r4, #104]	@ 0x68
 8002b40:	4658      	mov	r0, fp
 8002b42:	f010 fe2e 	bl	80137a2 <memset>
 8002b46:	4658      	mov	r0, fp
 8002b48:	f7ff ffa8 	bl	8002a9c <_ZN8touchgfx6WidgetC1Ev>
 */
class Button : public AbstractButton
{
public:
    Button()
        : AbstractButton(), up(), down(), alpha(255)
 8002b4c:	4a77      	ldr	r2, [pc, #476]	@ (8002d2c <_ZN15Screen1ViewBaseC1Ev+0x228>)
 8002b4e:	66e2      	str	r2, [r4, #108]	@ 0x6c
        touchable = touch;
 8002b50:	2301      	movs	r3, #1
 8002b52:	f104 08a0 	add.w	r8, r4, #160	@ 0xa0
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8002b56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b5a:	f884 3090 	strb.w	r3, [r4, #144]	@ 0x90
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
 8002b5e:	4629      	mov	r1, r5
 8002b60:	f8c4 5094 	str.w	r5, [r4, #148]	@ 0x94
 8002b64:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
 8002b68:	f8a4 209a 	strh.w	r2, [r4, #154]	@ 0x9a
 8002b6c:	f8a4 209c 	strh.w	r2, [r4, #156]	@ 0x9c
 8002b70:	f884 209e 	strb.w	r2, [r4, #158]	@ 0x9e
 8002b74:	f8ad 2018 	strh.w	r2, [sp, #24]
 8002b78:	4640      	mov	r0, r8
 8002b7a:	2226      	movs	r2, #38	@ 0x26
 8002b7c:	f010 fe11 	bl	80137a2 <memset>
 8002b80:	4640      	mov	r0, r8
 8002b82:	f7ff ff8b 	bl	8002a9c <_ZN8touchgfx6WidgetC1Ev>
 8002b86:	4a6a      	ldr	r2, [pc, #424]	@ (8002d30 <_ZN15Screen1ViewBaseC1Ev+0x22c>)
 8002b88:	f8c4 20a0 	str.w	r2, [r4, #160]	@ 0xa0
 8002b8c:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8002b90:	f8a4 20c6 	strh.w	r2, [r4, #198]	@ 0xc6
 8002b94:	f104 0acc 	add.w	sl, r4, #204	@ 0xcc
    {
        Image::setBitmap(bmp);
 8002b98:	a906      	add	r1, sp, #24
 8002b9a:	4640      	mov	r0, r8
        : Widget(), bitmap(bmp), alpha(255)
 8002b9c:	f884 70c8 	strb.w	r7, [r4, #200]	@ 0xc8
        Image::setBitmap(bmp);
 8002ba0:	f007 ff0b 	bl	800a9ba <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002ba4:	f504 778a 	add.w	r7, r4, #276	@ 0x114
 8002ba8:	4650      	mov	r0, sl
 8002baa:	f7ff ff89 	bl	8002ac0 <_ZN8touchgfx8TextAreaC1Ev>
        : TextArea()
 8002bae:	4638      	mov	r0, r7
 8002bb0:	f7ff ff86 	bl	8002ac0 <_ZN8touchgfx8TextAreaC1Ev>
        : TextAreaWithWildcardBase(), wc1(0)
 8002bb4:	4a5f      	ldr	r2, [pc, #380]	@ (8002d34 <_ZN15Screen1ViewBaseC1Ev+0x230>)
 8002bb6:	f8c4 2114 	str.w	r2, [r4, #276]	@ 0x114
        : pobject(pObject), pmemfun(pmemfun_1)
 8002bba:	4a5f      	ldr	r2, [pc, #380]	@ (8002d38 <_ZN15Screen1ViewBaseC1Ev+0x234>)
 8002bbc:	f8c4 515c 	str.w	r5, [r4, #348]	@ 0x15c
 8002bc0:	e9c4 245d 	strd	r2, r4, [r4, #372]	@ 0x174
 8002bc4:	4a5d      	ldr	r2, [pc, #372]	@ (8002d3c <_ZN15Screen1ViewBaseC1Ev+0x238>)
        setXY(x, y);
 8002bc6:	4629      	mov	r1, r5
 8002bc8:	e9c4 255f 	strd	r2, r5, [r4, #380]	@ 0x17c
 8002bcc:	4630      	mov	r0, r6
 8002bce:	462a      	mov	r2, r5
 8002bd0:	f7ff ff56 	bl	8002a80 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8002bd4:	4630      	mov	r0, r6
 8002bd6:	21f0      	movs	r1, #240	@ 0xf0
 8002bd8:	f7ff faa2 	bl	8002120 <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 8002bdc:	4630      	mov	r0, r6
 8002bde:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8002be2:	f7ff fa9f 	bl	8002124 <_ZN8touchgfx8Drawable9setHeightEs>
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8002be6:	f104 0904 	add.w	r9, r4, #4
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8002bea:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8002bee:	4631      	mov	r1, r6
 8002bf0:	66a2      	str	r2, [r4, #104]	@ 0x68
 8002bf2:	4648      	mov	r0, r9
 8002bf4:	f006 f83c 	bl	8008c70 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button1.setXY(20, 171);
 8002bf8:	22ab      	movs	r2, #171	@ 0xab
 8002bfa:	2114      	movs	r1, #20
 8002bfc:	4658      	mov	r0, fp
 8002bfe:	f7ff ff3f 	bl	8002a80 <_ZN8touchgfx8Drawable5setXYEss>
 8002c02:	2207      	movs	r2, #7
 8002c04:	f8ad 2014 	strh.w	r2, [sp, #20]
 8002c08:	f8ad 2018 	strh.w	r2, [sp, #24]
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_START_BUTTON_VECTOR_ID), touchgfx::Bitmap(BITMAP_START_BUTTON_VECTOR_ID));
 8002c0c:	a905      	add	r1, sp, #20
 8002c0e:	aa06      	add	r2, sp, #24
 8002c10:	4658      	mov	r0, fp
 8002c12:	f007 fd99 	bl	800a748 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 8002c16:	f504 72ba 	add.w	r2, r4, #372	@ 0x174
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 8002c1a:	f8c4 2094 	str.w	r2, [r4, #148]	@ 0x94
 8002c1e:	4659      	mov	r1, fp
 8002c20:	4648      	mov	r0, r9
 8002c22:	f006 f825 	bl	8008c70 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    background.setXY(28, 113);
 8002c26:	2271      	movs	r2, #113	@ 0x71
 8002c28:	4640      	mov	r0, r8
 8002c2a:	211c      	movs	r1, #28
 8002c2c:	f7ff ff28 	bl	8002a80 <_ZN8touchgfx8Drawable5setXYEss>
    background.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_ID));
 8002c30:	4640      	mov	r0, r8
 8002c32:	a906      	add	r1, sp, #24
 8002c34:	f8ad 5018 	strh.w	r5, [sp, #24]
 8002c38:	f007 febf 	bl	800a9ba <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002c3c:	4641      	mov	r1, r8
 8002c3e:	4648      	mov	r0, r9
 8002c40:	f006 f816 	bl	8008c70 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea1.setXY(34, 125);
 8002c44:	227d      	movs	r2, #125	@ 0x7d
 8002c46:	2122      	movs	r1, #34	@ 0x22
 8002c48:	4650      	mov	r0, sl
 8002c4a:	f7ff ff19 	bl	8002a80 <_ZN8touchgfx8Drawable5setXYEss>
        boundingArea = calculateBoundingArea();
 8002c4e:	466e      	mov	r6, sp
        color = newColor;
 8002c50:	4a3b      	ldr	r2, [pc, #236]	@ (8002d40 <_ZN15Screen1ViewBaseC1Ev+0x23c>)
 8002c52:	f8c4 20fc 	str.w	r2, [r4, #252]	@ 0xfc
        linespace = space;
 8002c56:	f8a4 5100 	strh.w	r5, [r4, #256]	@ 0x100
        boundingArea = calculateBoundingArea();
 8002c5a:	4651      	mov	r1, sl
 8002c5c:	4630      	mov	r0, r6
 8002c5e:	f007 fa6d 	bl	800a13c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8002c62:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8002c66:	f504 7c84 	add.w	ip, r4, #264	@ 0x108
 8002c6a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8002c6e:	f8df 80f8 	ldr.w	r8, [pc, #248]	@ 8002d68 <_ZN15Screen1ViewBaseC1Ev+0x264>
 8002c72:	f8ad 501c 	strh.w	r5, [sp, #28]
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_BJAD));
 8002c76:	a906      	add	r1, sp, #24
 8002c78:	4650      	mov	r0, sl
 8002c7a:	f8cd 8018 	str.w	r8, [sp, #24]
 8002c7e:	f007 fd05 	bl	800a68c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8002c82:	4651      	mov	r1, sl
 8002c84:	4648      	mov	r0, r9
 8002c86:	f005 fff3 	bl	8008c70 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    screen1point.setXY(133, 125);
 8002c8a:	227d      	movs	r2, #125	@ 0x7d
 8002c8c:	2185      	movs	r1, #133	@ 0x85
 8002c8e:	4638      	mov	r0, r7
 8002c90:	f7ff fef6 	bl	8002a80 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8002c94:	4a2b      	ldr	r2, [pc, #172]	@ (8002d44 <_ZN15Screen1ViewBaseC1Ev+0x240>)
 8002c96:	f8c4 2144 	str.w	r2, [r4, #324]	@ 0x144
        boundingArea = calculateBoundingArea();
 8002c9a:	f8d4 2114 	ldr.w	r2, [r4, #276]	@ 0x114
        linespace = space;
 8002c9e:	f8a4 5148 	strh.w	r5, [r4, #328]	@ 0x148
        boundingArea = calculateBoundingArea();
 8002ca2:	f8d2 2084 	ldr.w	r2, [r2, #132]	@ 0x84
 8002ca6:	4639      	mov	r1, r7
 8002ca8:	4630      	mov	r0, r6
 8002caa:	4790      	blx	r2
 8002cac:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8002cb0:	f504 75a8 	add.w	r5, r4, #336	@ 0x150
 8002cb4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8002cb8:	4a23      	ldr	r2, [pc, #140]	@ (8002d48 <_ZN15Screen1ViewBaseC1Ev+0x244>)
 8002cba:	6812      	ldr	r2, [r2, #0]
    Unicode::snprintf(screen1pointBuffer, SCREEN1POINT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_PAAG).getText());
 8002cbc:	f504 75b0 	add.w	r5, r4, #352	@ 0x160
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	b92a      	cbnz	r2, 8002cd0 <_ZN15Screen1ViewBaseC1Ev+0x1cc>
 8002cc4:	4b21      	ldr	r3, [pc, #132]	@ (8002d4c <_ZN15Screen1ViewBaseC1Ev+0x248>)
 8002cc6:	4a22      	ldr	r2, [pc, #136]	@ (8002d50 <_ZN15Screen1ViewBaseC1Ev+0x24c>)
 8002cc8:	2160      	movs	r1, #96	@ 0x60
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8002cca:	4822      	ldr	r0, [pc, #136]	@ (8002d54 <_ZN15Screen1ViewBaseC1Ev+0x250>)
 8002ccc:	f010 fb62 	bl	8013394 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8002cd0:	4a21      	ldr	r2, [pc, #132]	@ (8002d58 <_ZN15Screen1ViewBaseC1Ev+0x254>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8002cd2:	8812      	ldrh	r2, [r2, #0]
 8002cd4:	2a01      	cmp	r2, #1
 8002cd6:	d803      	bhi.n	8002ce0 <_ZN15Screen1ViewBaseC1Ev+0x1dc>
 8002cd8:	4b20      	ldr	r3, [pc, #128]	@ (8002d5c <_ZN15Screen1ViewBaseC1Ev+0x258>)
 8002cda:	4a1d      	ldr	r2, [pc, #116]	@ (8002d50 <_ZN15Screen1ViewBaseC1Ev+0x24c>)
 8002cdc:	2161      	movs	r1, #97	@ 0x61
 8002cde:	e7f4      	b.n	8002cca <_ZN15Screen1ViewBaseC1Ev+0x1c6>
        return texts->getText(typedTextId);
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	4b1f      	ldr	r3, [pc, #124]	@ (8002d60 <_ZN15Screen1ViewBaseC1Ev+0x25c>)
 8002ce4:	6818      	ldr	r0, [r3, #0]
 8002ce6:	f000 fd19 	bl	800371c <_ZNK8touchgfx5Texts7getTextEt>
 8002cea:	4a1e      	ldr	r2, [pc, #120]	@ (8002d64 <_ZN15Screen1ViewBaseC1Ev+0x260>)
 8002cec:	4603      	mov	r3, r0
 8002cee:	210a      	movs	r1, #10
 8002cf0:	4628      	mov	r0, r5
 8002cf2:	f00d fbe9 	bl	80104c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    screen1point.resizeToCurrentText();
 8002cf6:	4638      	mov	r0, r7
        wc1 = value;
 8002cf8:	f8c4 515c 	str.w	r5, [r4, #348]	@ 0x15c
 8002cfc:	f007 fca6 	bl	800a64c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8002d00:	2302      	movs	r3, #2
    screen1point.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9WWM));
 8002d02:	a906      	add	r1, sp, #24
 8002d04:	4638      	mov	r0, r7
 8002d06:	f8ad 301c 	strh.w	r3, [sp, #28]
 8002d0a:	f8cd 8018 	str.w	r8, [sp, #24]
 8002d0e:	f007 fcbd 	bl	800a68c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8002d12:	4648      	mov	r0, r9
 8002d14:	4639      	mov	r1, r7
 8002d16:	f005 ffab 	bl	8008c70 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8002d1a:	4620      	mov	r0, r4
 8002d1c:	b009      	add	sp, #36	@ 0x24
 8002d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d22:	bf00      	nop
 8002d24:	0801548c 	.word	0x0801548c
 8002d28:	08015a68 	.word	0x08015a68
 8002d2c:	08015ad0 	.word	0x08015ad0
 8002d30:	08015b44 	.word	0x08015b44
 8002d34:	080153e4 	.word	0x080153e4
 8002d38:	08015474 	.word	0x08015474
 8002d3c:	08002a5d 	.word	0x08002a5d
 8002d40:	ffeb1313 	.word	0xffeb1313
 8002d44:	ffe62525 	.word	0xffe62525
 8002d48:	200126a8 	.word	0x200126a8
 8002d4c:	08015224 	.word	0x08015224
 8002d50:	08015326 	.word	0x08015326
 8002d54:	080152a1 	.word	0x080152a1
 8002d58:	200126ac 	.word	0x200126ac
 8002d5c:	080152e8 	.word	0x080152e8
 8002d60:	200126b4 	.word	0x200126b4
 8002d64:	08015371 	.word	0x08015371
 8002d68:	08014bf4 	.word	0x08014bf4

08002d6c <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 8002d6c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8002d6e:	4770      	bx	lr

08002d70 <_ZN15Screen2ViewBase15ExitFromScreen2Ev>:
     * Virtual Action Handlers
     */
    virtual void ExitFromScreen2()
    {
        // Override and implement this function in Screen2
    }
 8002d70:	4770      	bx	lr

08002d72 <_ZN15Screen2ViewBaseD1Ev>:
}

Screen2ViewBase::~Screen2ViewBase()
{

}
 8002d72:	4770      	bx	lr

08002d74 <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{

}
 8002d74:	4770      	bx	lr

08002d76 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8002d76:	4770      	bx	lr

08002d78 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEED1Ev>:
 * The position of the icon can be adjusted with setIconXY.
 *
 * @see AbstractButtonContainer
 */
template <class T>
class IconButtonStyle : public T
 8002d78:	4770      	bx	lr

08002d7a <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8002d7a:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8002d7c:	68c2      	ldr	r2, [r0, #12]
 8002d7e:	6844      	ldr	r4, [r0, #4]
 8002d80:	1055      	asrs	r5, r2, #1
    virtual void execute(T1 t1)
 8002d82:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8002d84:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8002d88:	07d2      	lsls	r2, r2, #31
 8002d8a:	bf48      	it	mi
 8002d8c:	5962      	ldrmi	r2, [r4, r5]
 8002d8e:	689b      	ldr	r3, [r3, #8]
    }
 8002d90:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8002d92:	bf48      	it	mi
 8002d94:	58d3      	ldrmi	r3, [r2, r3]
 8002d96:	4718      	bx	r3

08002d98 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 8002d98:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8002d9a:	6840      	ldr	r0, [r0, #4]
 8002d9c:	b130      	cbz	r0, 8002dac <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x14>
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	b91a      	cbnz	r2, 8002daa <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x12>
 8002da2:	68d8      	ldr	r0, [r3, #12]
 8002da4:	f000 0001 	and.w	r0, r0, #1
 8002da8:	4770      	bx	lr
 8002daa:	2001      	movs	r0, #1
    }
 8002dac:	4770      	bx	lr

08002dae <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:
     *
     * @note The user code must call invalidate() in order to update the display.
     */
    void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8002dae:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8002db2:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
    {
        iconImage.setAlpha(T::getAlpha());
        T::handleAlphaUpdated();
    }
 8002db6:	4770      	bx	lr

08002db8 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    virtual void handlePressedUpdated()
 8002db8:	4601      	mov	r1, r0
        iconImage.setBitmap(T::getPressed() ? iconPressed : iconReleased);
 8002dba:	3038      	adds	r0, #56	@ 0x38
 8002dbc:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 8002dc0:	b113      	cbz	r3, 8002dc8 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x10>
 8002dc2:	3136      	adds	r1, #54	@ 0x36
 8002dc4:	f007 bdf9 	b.w	800a9ba <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002dc8:	3134      	adds	r1, #52	@ 0x34
 8002dca:	e7fb      	b.n	8002dc4 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0xc>

08002dcc <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEED0Ev>:
class IconButtonStyle : public T
 8002dcc:	b510      	push	{r4, lr}
 8002dce:	2164      	movs	r1, #100	@ 0x64
 8002dd0:	4604      	mov	r4, r0
 8002dd2:	f010 fab1 	bl	8013338 <_ZdlPvj>
 8002dd6:	4620      	mov	r0, r4
 8002dd8:	bd10      	pop	{r4, pc}

08002dda <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8002dda:	b510      	push	{r4, lr}
 8002ddc:	2110      	movs	r1, #16
 8002dde:	4604      	mov	r4, r0
 8002de0:	f010 faaa 	bl	8013338 <_ZdlPvj>
 8002de4:	4620      	mov	r0, r4
 8002de6:	bd10      	pop	{r4, pc}

08002de8 <_ZN15Screen2ViewBaseD0Ev>:
Screen2ViewBase::~Screen2ViewBase()
 8002de8:	b510      	push	{r4, lr}
}
 8002dea:	f44f 7154 	mov.w	r1, #848	@ 0x350
Screen2ViewBase::~Screen2ViewBase()
 8002dee:	4604      	mov	r4, r0
}
 8002df0:	f010 faa2 	bl	8013338 <_ZdlPvj>
 8002df4:	4620      	mov	r0, r4
 8002df6:	bd10      	pop	{r4, pc}

08002df8 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
    /**
     * Executes the previously set action.
     *
     * @see setAction
     */
    virtual void executeAction()
 8002df8:	b510      	push	{r4, lr}
 8002dfa:	4604      	mov	r4, r0
    {
        if (action && action->isValid())
 8002dfc:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8002dfe:	b150      	cbz	r0, 8002e16 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1e>
 8002e00:	6803      	ldr	r3, [r0, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	4798      	blx	r3
 8002e06:	b130      	cbz	r0, 8002e16 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1e>
        {
            action->execute(*this);
 8002e08:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8002e0a:	6803      	ldr	r3, [r0, #0]
 8002e0c:	4621      	mov	r1, r4
 8002e0e:	689b      	ldr	r3, [r3, #8]
        }
    }
 8002e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            action->execute(*this);
 8002e14:	4718      	bx	r3
    }
 8002e16:	bd10      	pop	{r4, pc}

08002e18 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
    {
        return clickEventType;
 8002e18:	790b      	ldrb	r3, [r1, #4]
     *
     * @param  event The click event.
     *
     * @see setAction, setPressed, getPressed
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8002e1a:	b570      	push	{r4, r5, r6, lr}
        return pressed;
 8002e1c:	f890 602c 	ldrb.w	r6, [r0, #44]	@ 0x2c
 8002e20:	4604      	mov	r4, r0
 8002e22:	460d      	mov	r5, r1
    {
        bool wasPressed = getPressed();
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8002e24:	b90b      	cbnz	r3, 8002e2a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x12>
 8002e26:	b116      	cbz	r6, 8002e2e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x16>
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
        {
            executeAction();
        }
    }
 8002e28:	bd70      	pop	{r4, r5, r6, pc}
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8002e2a:	2e00      	cmp	r6, #0
 8002e2c:	d0fc      	beq.n	8002e28 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 8002e2e:	fab3 f383 	clz	r3, r3
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
        handlePressedUpdated();
 8002e38:	6823      	ldr	r3, [r4, #0]
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e40:	4798      	blx	r3
            invalidate();
 8002e42:	6823      	ldr	r3, [r4, #0]
 8002e44:	4620      	mov	r0, r4
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	4798      	blx	r3
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
 8002e4a:	2e00      	cmp	r6, #0
 8002e4c:	d0ec      	beq.n	8002e28 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
 8002e4e:	792b      	ldrb	r3, [r5, #4]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d1e9      	bne.n	8002e28 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
            executeAction();
 8002e54:	6823      	ldr	r3, [r4, #0]
 8002e56:	4620      	mov	r0, r4
 8002e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
    }
 8002e5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            executeAction();
 8002e60:	4718      	bx	r3

08002e62 <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void Screen2ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &flexButton1)
 8002e62:	f500 73ba 	add.w	r3, r0, #372	@ 0x174
 8002e66:	428b      	cmp	r3, r1
{
 8002e68:	b510      	push	{r4, lr}
 8002e6a:	4604      	mov	r4, r0
    if (&src == &flexButton1)
 8002e6c:	d109      	bne.n	8002e82 <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x20>

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8002e6e:	f009 fef9 	bl	800cc64 <_ZN8touchgfx11Application11getInstanceEv>
    {
        //Interaction1
        //When flexButton1 clicked change screen to Screen1
        //Go to Screen1 with screen transition towards East
        application().gotoScreen1ScreenWipeTransitionEast();
 8002e72:	f7ff fcbf 	bl	80027f4 <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionEastEv>
    
        //Interaction2
        //When Interaction1 completed call virtual function
        //Call ExitFromScreen2
        ExitFromScreen2();
 8002e76:	6823      	ldr	r3, [r4, #0]
 8002e78:	4620      	mov	r0, r4
 8002e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    }
}
 8002e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ExitFromScreen2();
 8002e80:	4718      	bx	r3
}
 8002e82:	bd10      	pop	{r4, pc}

08002e84 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE14setIconBitmapsERKNS_6BitmapES5_>:
        iconReleased = newIconReleased;
 8002e84:	880b      	ldrh	r3, [r1, #0]
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 8002e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        iconReleased = newIconReleased;
 8002e8a:	8683      	strh	r3, [r0, #52]	@ 0x34
        iconPressed = newIconPressed;
 8002e8c:	8813      	ldrh	r3, [r2, #0]
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 8002e8e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
        iconPressed = newIconPressed;
 8002e92:	86c3      	strh	r3, [r0, #54]	@ 0x36
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 8002e94:	4604      	mov	r4, r0
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 8002e96:	4610      	mov	r0, r2
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 8002e98:	4690      	mov	r8, r2
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 8002e9a:	f00d fbcf 	bl	801063c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8002e9e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8002ea2:	4607      	mov	r7, r0
 8002ea4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8002ea8:	4640      	mov	r0, r8
 8002eaa:	f3c3 064f 	ubfx	r6, r3, #1, #16
 8002eae:	f00d fbf9 	bl	80106a4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8002eb2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002eb6:	f3c5 054f 	ubfx	r5, r5, #1, #16
 8002eba:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002ebe:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8002ec2:	eba6 0260 	sub.w	r2, r6, r0, asr #1
 8002ec6:	eba5 0167 	sub.w	r1, r5, r7, asr #1
 8002eca:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8002ece:	b212      	sxth	r2, r2
 8002ed0:	b209      	sxth	r1, r1
 8002ed2:	f7ff fdd5 	bl	8002a80 <_ZN8touchgfx8Drawable5setXYEss>
        handlePressedUpdated();
 8002ed6:	6823      	ldr	r3, [r4, #0]
 8002ed8:	4620      	mov	r0, r4
 8002eda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
    }
 8002ede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        handlePressedUpdated();
 8002ee2:	4718      	bx	r3

08002ee4 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8002ee4:	b570      	push	{r4, r5, r6, lr}
 8002ee6:	4604      	mov	r4, r0
 8002ee8:	461d      	mov	r5, r3
 8002eea:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 8002eee:	f7ff fdc7 	bl	8002a80 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8002ef2:	6823      	ldr	r3, [r4, #0]
 8002ef4:	4629      	mov	r1, r5
 8002ef6:	4620      	mov	r0, r4
 8002ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002efa:	4798      	blx	r3
        setHeight(height);
 8002efc:	6823      	ldr	r3, [r4, #0]
 8002efe:	4631      	mov	r1, r6
 8002f00:	4620      	mov	r0, r4
 8002f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 8002f04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 8002f08:	4718      	bx	r3
	...

08002f0c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
    Image(const Bitmap& bmp = Bitmap())
 8002f0c:	b538      	push	{r3, r4, r5, lr}
        : Widget(), bitmap(bmp), alpha(255)
 8002f0e:	2226      	movs	r2, #38	@ 0x26
    Image(const Bitmap& bmp = Bitmap())
 8002f10:	4604      	mov	r4, r0
 8002f12:	460d      	mov	r5, r1
        : Widget(), bitmap(bmp), alpha(255)
 8002f14:	2100      	movs	r1, #0
 8002f16:	f010 fc44 	bl	80137a2 <memset>
 8002f1a:	4620      	mov	r0, r4
 8002f1c:	f7ff fdbe 	bl	8002a9c <_ZN8touchgfx6WidgetC1Ev>
 8002f20:	4b06      	ldr	r3, [pc, #24]	@ (8002f3c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
 8002f22:	6023      	str	r3, [r4, #0]
 8002f24:	882b      	ldrh	r3, [r5, #0]
 8002f26:	84e3      	strh	r3, [r4, #38]	@ 0x26
 8002f28:	23ff      	movs	r3, #255	@ 0xff
        Image::setBitmap(bmp);
 8002f2a:	4620      	mov	r0, r4
        : Widget(), bitmap(bmp), alpha(255)
 8002f2c:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
        Image::setBitmap(bmp);
 8002f30:	4629      	mov	r1, r5
 8002f32:	f007 fd42 	bl	800a9ba <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8002f36:	4620      	mov	r0, r4
 8002f38:	bd38      	pop	{r3, r4, r5, pc}
 8002f3a:	bf00      	nop
 8002f3c:	08015b44 	.word	0x08015b44

08002f40 <_ZN15Screen2ViewBaseC1Ev>:
Screen2ViewBase::Screen2ViewBase() :
 8002f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f44:	4604      	mov	r4, r0
 8002f46:	b095      	sub	sp, #84	@ 0x54
    flexButtonCallback(this, &Screen2ViewBase::flexButtonCallbackHandler)
 8002f48:	46a0      	mov	r8, r4
 8002f4a:	2500      	movs	r5, #0
 8002f4c:	f00b f9ac 	bl	800e2a8 <_ZN8touchgfx6ScreenC1Ev>
 8002f50:	4bd3      	ldr	r3, [pc, #844]	@ (80032a0 <_ZN15Screen2ViewBaseC1Ev+0x360>)
 8002f52:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8002f54:	f848 3b40 	str.w	r3, [r8], #64
        : Widget(), alpha(255), color(0)
 8002f58:	2226      	movs	r2, #38	@ 0x26
 8002f5a:	4629      	mov	r1, r5
 8002f5c:	4640      	mov	r0, r8
 8002f5e:	f010 fc20 	bl	80137a2 <memset>
 8002f62:	4640      	mov	r0, r8
 8002f64:	f7ff fd9a 	bl	8002a9c <_ZN8touchgfx6WidgetC1Ev>
 8002f68:	4bce      	ldr	r3, [pc, #824]	@ (80032a4 <_ZN15Screen2ViewBaseC1Ev+0x364>)
 8002f6a:	6423      	str	r3, [r4, #64]	@ 0x40
 8002f6c:	f104 0b6c 	add.w	fp, r4, #108	@ 0x6c
 8002f70:	23ff      	movs	r3, #255	@ 0xff
 8002f72:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8002f76:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 8002f7a:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 8002f7e:	a912      	add	r1, sp, #72	@ 0x48
 8002f80:	66a5      	str	r5, [r4, #104]	@ 0x68
 8002f82:	4658      	mov	r0, fp
 8002f84:	f104 09c4 	add.w	r9, r4, #196	@ 0xc4
 8002f88:	f8ad 6048 	strh.w	r6, [sp, #72]	@ 0x48
 8002f8c:	f7ff ffbe 	bl	8002f0c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8002f90:	a912      	add	r1, sp, #72	@ 0x48
 8002f92:	4650      	mov	r0, sl
 8002f94:	f8ad 6048 	strh.w	r6, [sp, #72]	@ 0x48
 8002f98:	f7ff ffb8 	bl	8002f0c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8002f9c:	a912      	add	r1, sp, #72	@ 0x48
 8002f9e:	4648      	mov	r0, r9
 8002fa0:	f8ad 6048 	strh.w	r6, [sp, #72]	@ 0x48
 8002fa4:	f7ff ffb2 	bl	8002f0c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8002fa8:	f104 03f0 	add.w	r3, r4, #240	@ 0xf0
 8002fac:	a912      	add	r1, sp, #72	@ 0x48
 8002fae:	4618      	mov	r0, r3
 8002fb0:	9302      	str	r3, [sp, #8]
 8002fb2:	f8ad 6048 	strh.w	r6, [sp, #72]	@ 0x48
 8002fb6:	f7ff ffa9 	bl	8002f0c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8002fba:	f504 738e 	add.w	r3, r4, #284	@ 0x11c
 8002fbe:	a912      	add	r1, sp, #72	@ 0x48
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	9303      	str	r3, [sp, #12]
 8002fc4:	f8ad 6048 	strh.w	r6, [sp, #72]	@ 0x48
 8002fc8:	f7ff ffa0 	bl	8002f0c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8002fcc:	f504 73a4 	add.w	r3, r4, #328	@ 0x148
 8002fd0:	a912      	add	r1, sp, #72	@ 0x48
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	9304      	str	r3, [sp, #16]
 8002fd6:	f8ad 6048 	strh.w	r6, [sp, #72]	@ 0x48
 8002fda:	f7ff ff97 	bl	8002f0c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8002fde:	f504 73ba 	add.w	r3, r4, #372	@ 0x174
 8002fe2:	9305      	str	r3, [sp, #20]
        : pressed(false), alpha(255), action(0)
 8002fe4:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8002fe8:	f8a4 31a0 	strh.w	r3, [r4, #416]	@ 0x1a0
        touchable = touch;
 8002fec:	f240 1301 	movw	r3, #257	@ 0x101
 8002ff0:	f8a4 3198 	strh.w	r3, [r4, #408]	@ 0x198
        : T()
 8002ff4:	4bac      	ldr	r3, [pc, #688]	@ (80032a8 <_ZN15Screen2ViewBaseC1Ev+0x368>)
 8002ff6:	f8c4 3174 	str.w	r3, [r4, #372]	@ 0x174
 8002ffa:	f504 77d6 	add.w	r7, r4, #428	@ 0x1ac
 8002ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8003002:	f8c4 31a8 	str.w	r3, [r4, #424]	@ 0x1a8
 8003006:	a912      	add	r1, sp, #72	@ 0x48
 8003008:	4638      	mov	r0, r7
        : x(0), y(0), width(0), height(0)
 800300a:	e9c4 555e 	strd	r5, r5, [r4, #376]	@ 0x178
 800300e:	e9c4 5560 	strd	r5, r5, [r4, #384]	@ 0x180
          nextSibling(0),
 8003012:	e9c4 5562 	strd	r5, r5, [r4, #392]	@ 0x188
          cachedAbsX(0),
 8003016:	e9c4 5564 	strd	r5, r5, [r4, #400]	@ 0x190
          firstChild(0)
 800301a:	f8c4 519c 	str.w	r5, [r4, #412]	@ 0x19c
 800301e:	f8c4 51a4 	str.w	r5, [r4, #420]	@ 0x1a4
 8003022:	f8ad 3048 	strh.w	r3, [sp, #72]	@ 0x48
 8003026:	f7ff ff71 	bl	8002f0c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        T::add(iconImage);
 800302a:	4639      	mov	r1, r7
 800302c:	9805      	ldr	r0, [sp, #20]
 800302e:	f005 fe1f 	bl	8008c70 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003032:	f504 73ec 	add.w	r3, r4, #472	@ 0x1d8
 8003036:	4618      	mov	r0, r3
 8003038:	f504 7701 	add.w	r7, r4, #516	@ 0x204
 800303c:	a912      	add	r1, sp, #72	@ 0x48
 800303e:	9306      	str	r3, [sp, #24]
 8003040:	f8ad 6048 	strh.w	r6, [sp, #72]	@ 0x48
 8003044:	f7ff ff62 	bl	8002f0c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8003048:	2226      	movs	r2, #38	@ 0x26
 800304a:	4629      	mov	r1, r5
 800304c:	4638      	mov	r0, r7
 800304e:	f010 fba8 	bl	80137a2 <memset>
 8003052:	4638      	mov	r0, r7
 8003054:	f7ff fd22 	bl	8002a9c <_ZN8touchgfx6WidgetC1Ev>
 8003058:	4b94      	ldr	r3, [pc, #592]	@ (80032ac <_ZN15Screen2ViewBaseC1Ev+0x36c>)
 800305a:	f8c4 322c 	str.w	r3, [r4, #556]	@ 0x22c
 800305e:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003062:	f04f 33ff 	mov.w	r3, #4294967295
              text(0)
 8003066:	e9c4 3591 	strd	r3, r5, [r4, #580]	@ 0x244
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800306a:	f8c4 2238 	str.w	r2, [r4, #568]	@ 0x238
 800306e:	f504 7314 	add.w	r3, r4, #592	@ 0x250
        : TextAreaWithWildcardBase(), wc1(0)
 8003072:	4a8f      	ldr	r2, [pc, #572]	@ (80032b0 <_ZN15Screen2ViewBaseC1Ev+0x370>)
 8003074:	f8c4 2204 	str.w	r2, [r4, #516]	@ 0x204
 8003078:	f8a4 6230 	strh.w	r6, [r4, #560]	@ 0x230
 800307c:	a912      	add	r1, sp, #72	@ 0x48
 800307e:	4618      	mov	r0, r3
        : color(col)
 8003080:	f8c4 5234 	str.w	r5, [r4, #564]	@ 0x234
 8003084:	f8a4 523c 	strh.w	r5, [r4, #572]	@ 0x23c
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003088:	f8c4 5240 	str.w	r5, [r4, #576]	@ 0x240
 800308c:	f8c4 524c 	str.w	r5, [r4, #588]	@ 0x24c
 8003090:	9307      	str	r3, [sp, #28]
 8003092:	f8ad 6048 	strh.w	r6, [sp, #72]	@ 0x48
 8003096:	f7ff ff39 	bl	8002f0c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800309a:	f504 731f 	add.w	r3, r4, #636	@ 0x27c
 800309e:	a912      	add	r1, sp, #72	@ 0x48
 80030a0:	4618      	mov	r0, r3
 80030a2:	9308      	str	r3, [sp, #32]
 80030a4:	f8ad 6048 	strh.w	r6, [sp, #72]	@ 0x48
 80030a8:	f7ff ff30 	bl	8002f0c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80030ac:	f504 732a 	add.w	r3, r4, #680	@ 0x2a8
 80030b0:	a912      	add	r1, sp, #72	@ 0x48
 80030b2:	4618      	mov	r0, r3
 80030b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80030b6:	f8ad 6048 	strh.w	r6, [sp, #72]	@ 0x48
 80030ba:	f7ff ff27 	bl	8002f0c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80030be:	f504 7335 	add.w	r3, r4, #724	@ 0x2d4
 80030c2:	a912      	add	r1, sp, #72	@ 0x48
 80030c4:	4618      	mov	r0, r3
 80030c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80030c8:	f8ad 6048 	strh.w	r6, [sp, #72]	@ 0x48
 80030cc:	f7ff ff1e 	bl	8002f0c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80030d0:	f504 7340 	add.w	r3, r4, #768	@ 0x300
 80030d4:	a912      	add	r1, sp, #72	@ 0x48
 80030d6:	4618      	mov	r0, r3
 80030d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80030da:	f8ad 6048 	strh.w	r6, [sp, #72]	@ 0x48
 80030de:	f7ff ff15 	bl	8002f0c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        : pobject(pObject), pmemfun(pmemfun_1)
 80030e2:	4b74      	ldr	r3, [pc, #464]	@ (80032b4 <_ZN15Screen2ViewBaseC1Ev+0x374>)
 80030e4:	e9c4 34d0 	strd	r3, r4, [r4, #832]	@ 0x340
 80030e8:	4b73      	ldr	r3, [pc, #460]	@ (80032b8 <_ZN15Screen2ViewBaseC1Ev+0x378>)
 80030ea:	e9c4 35d2 	strd	r3, r5, [r4, #840]	@ 0x348
    __background.setPosition(0, 0, 240, 320);
 80030ee:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80030f2:	462a      	mov	r2, r5
 80030f4:	4640      	mov	r0, r8
 80030f6:	9300      	str	r3, [sp, #0]
 80030f8:	4629      	mov	r1, r5
 80030fa:	23f0      	movs	r3, #240	@ 0xf0
 80030fc:	1d26      	adds	r6, r4, #4
 80030fe:	f7ff fef1 	bl	8002ee4 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8003102:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8003106:	66a3      	str	r3, [r4, #104]	@ 0x68
 8003108:	4641      	mov	r1, r8
 800310a:	4630      	mov	r0, r6
 800310c:	f005 fdb0 	bl	8008c70 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track4.setXY(0, 0);
 8003110:	462a      	mov	r2, r5
 8003112:	4629      	mov	r1, r5
 8003114:	4658      	mov	r0, fp
 8003116:	f7ff fcb3 	bl	8002a80 <_ZN8touchgfx8Drawable5setXYEss>
 800311a:	230c      	movs	r3, #12
    track4.setBitmap(touchgfx::Bitmap(BITMAP_TRACK4_ID));
 800311c:	a912      	add	r1, sp, #72	@ 0x48
 800311e:	4658      	mov	r0, fp
 8003120:	f8ad 3048 	strh.w	r3, [sp, #72]	@ 0x48
 8003124:	f007 fc49 	bl	800a9ba <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003128:	4659      	mov	r1, fp
 800312a:	4630      	mov	r0, r6
        visible = vis;
 800312c:	f884 5091 	strb.w	r5, [r4, #145]	@ 0x91
 8003130:	f005 fd9e 	bl	8008c70 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track3.setXY(0, 0);
 8003134:	462a      	mov	r2, r5
 8003136:	4650      	mov	r0, sl
 8003138:	4629      	mov	r1, r5
 800313a:	f7ff fca1 	bl	8002a80 <_ZN8touchgfx8Drawable5setXYEss>
 800313e:	230b      	movs	r3, #11
    track3.setBitmap(touchgfx::Bitmap(BITMAP_TRACK3_ID));
 8003140:	4650      	mov	r0, sl
 8003142:	a912      	add	r1, sp, #72	@ 0x48
 8003144:	f8ad 3048 	strh.w	r3, [sp, #72]	@ 0x48
 8003148:	f007 fc37 	bl	800a9ba <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800314c:	4651      	mov	r1, sl
 800314e:	4630      	mov	r0, r6
 8003150:	f884 50bd 	strb.w	r5, [r4, #189]	@ 0xbd
 8003154:	f005 fd8c 	bl	8008c70 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track2.setXY(0, 0);
 8003158:	462a      	mov	r2, r5
 800315a:	4648      	mov	r0, r9
 800315c:	4629      	mov	r1, r5
 800315e:	f7ff fc8f 	bl	8002a80 <_ZN8touchgfx8Drawable5setXYEss>
 8003162:	f04f 080a 	mov.w	r8, #10
    track2.setBitmap(touchgfx::Bitmap(BITMAP_TRACK2_ID));
 8003166:	4648      	mov	r0, r9
 8003168:	a912      	add	r1, sp, #72	@ 0x48
 800316a:	f8ad 8048 	strh.w	r8, [sp, #72]	@ 0x48
 800316e:	f007 fc24 	bl	800a9ba <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003172:	4649      	mov	r1, r9
 8003174:	4630      	mov	r0, r6
 8003176:	f884 50e9 	strb.w	r5, [r4, #233]	@ 0xe9
 800317a:	f005 fd79 	bl	8008c70 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track1.setXY(0, 0);
 800317e:	462a      	mov	r2, r5
 8003180:	9802      	ldr	r0, [sp, #8]
 8003182:	4629      	mov	r1, r5
 8003184:	f7ff fc7c 	bl	8002a80 <_ZN8touchgfx8Drawable5setXYEss>
 8003188:	2309      	movs	r3, #9
    track1.setBitmap(touchgfx::Bitmap(BITMAP_TRACK1_ID));
 800318a:	9802      	ldr	r0, [sp, #8]
 800318c:	f8ad 3048 	strh.w	r3, [sp, #72]	@ 0x48
 8003190:	a912      	add	r1, sp, #72	@ 0x48
 8003192:	f007 fc12 	bl	800a9ba <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003196:	9902      	ldr	r1, [sp, #8]
 8003198:	f884 5115 	strb.w	r5, [r4, #277]	@ 0x115
 800319c:	4630      	mov	r0, r6
 800319e:	f005 fd67 	bl	8008c70 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track0.setXY(0, 0);
 80031a2:	462a      	mov	r2, r5
 80031a4:	9803      	ldr	r0, [sp, #12]
 80031a6:	4629      	mov	r1, r5
 80031a8:	f7ff fc6a 	bl	8002a80 <_ZN8touchgfx8Drawable5setXYEss>
 80031ac:	2308      	movs	r3, #8
    track0.setBitmap(touchgfx::Bitmap(BITMAP_TRACK0_ID));
 80031ae:	9803      	ldr	r0, [sp, #12]
 80031b0:	f8ad 3048 	strh.w	r3, [sp, #72]	@ 0x48
 80031b4:	a912      	add	r1, sp, #72	@ 0x48
 80031b6:	f007 fc00 	bl	800a9ba <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80031ba:	9903      	ldr	r1, [sp, #12]
 80031bc:	f884 5141 	strb.w	r5, [r4, #321]	@ 0x141
 80031c0:	4630      	mov	r0, r6
 80031c2:	f005 fd55 	bl	8008c70 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    car.setXY(126, 126);
 80031c6:	227e      	movs	r2, #126	@ 0x7e
 80031c8:	4611      	mov	r1, r2
 80031ca:	9804      	ldr	r0, [sp, #16]
 80031cc:	f7ff fc58 	bl	8002a80 <_ZN8touchgfx8Drawable5setXYEss>
 80031d0:	2305      	movs	r3, #5
    car.setBitmap(touchgfx::Bitmap(BITMAP_REDCAR_ID));
 80031d2:	9804      	ldr	r0, [sp, #16]
 80031d4:	f8ad 3048 	strh.w	r3, [sp, #72]	@ 0x48
 80031d8:	a912      	add	r1, sp, #72	@ 0x48
 80031da:	f007 fbee 	bl	800a9ba <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80031de:	9904      	ldr	r1, [sp, #16]
 80031e0:	4630      	mov	r0, r6
 80031e2:	f005 fd45 	bl	8008c70 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80031e6:	2301      	movs	r3, #1
    flexButton1.setIconBitmaps(Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID), Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID));
 80031e8:	9805      	ldr	r0, [sp, #20]
 80031ea:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 80031ee:	aa12      	add	r2, sp, #72	@ 0x48
 80031f0:	a911      	add	r1, sp, #68	@ 0x44
 80031f2:	f8ad 3048 	strh.w	r3, [sp, #72]	@ 0x48
 80031f6:	f7ff fe45 	bl	8002e84 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE14setIconBitmapsERKNS_6BitmapES5_>
    flexButton1.setAction(flexButtonCallback);
 80031fa:	f504 7350 	add.w	r3, r4, #832	@ 0x340
        action = &callback;
 80031fe:	f8c4 31a4 	str.w	r3, [r4, #420]	@ 0x1a4
    flexButton1.setPosition(204, 282, 32, 32);
 8003202:	2320      	movs	r3, #32
 8003204:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003208:	9805      	ldr	r0, [sp, #20]
        rect.x = x;
 800320a:	f8c4 51b0 	str.w	r5, [r4, #432]	@ 0x1b0
 800320e:	21cc      	movs	r1, #204	@ 0xcc
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	f7ff fe67 	bl	8002ee4 <_ZN8touchgfx8Drawable11setPositionEssss>
 8003216:	9905      	ldr	r1, [sp, #20]
 8003218:	4630      	mov	r0, r6
 800321a:	f005 fd29 	bl	8008c70 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    lamb.setXY(63, 56);
 800321e:	2238      	movs	r2, #56	@ 0x38
 8003220:	9806      	ldr	r0, [sp, #24]
 8003222:	213f      	movs	r1, #63	@ 0x3f
 8003224:	f7ff fc2c 	bl	8002a80 <_ZN8touchgfx8Drawable5setXYEss>
 8003228:	f04f 0a03 	mov.w	sl, #3
    lamb.setBitmap(touchgfx::Bitmap(BITMAP_LAMB_ID));
 800322c:	9806      	ldr	r0, [sp, #24]
 800322e:	f8ad a048 	strh.w	sl, [sp, #72]	@ 0x48
 8003232:	a912      	add	r1, sp, #72	@ 0x48
 8003234:	f007 fbc1 	bl	800a9ba <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003238:	9906      	ldr	r1, [sp, #24]
 800323a:	4630      	mov	r0, r6
 800323c:	f005 fd18 	bl	8008c70 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    point.setPosition(173, 0, 67, 20);
 8003240:	2314      	movs	r3, #20
 8003242:	462a      	mov	r2, r5
 8003244:	9300      	str	r3, [sp, #0]
 8003246:	21ad      	movs	r1, #173	@ 0xad
 8003248:	2343      	movs	r3, #67	@ 0x43
 800324a:	4638      	mov	r0, r7
 800324c:	f7ff fe4a 	bl	8002ee4 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8003250:	4b1a      	ldr	r3, [pc, #104]	@ (80032bc <_ZN15Screen2ViewBaseC1Ev+0x37c>)
 8003252:	f8c4 3234 	str.w	r3, [r4, #564]	@ 0x234
        boundingArea = calculateBoundingArea();
 8003256:	f8d4 3204 	ldr.w	r3, [r4, #516]	@ 0x204
        linespace = space;
 800325a:	f8a4 5238 	strh.w	r5, [r4, #568]	@ 0x238
        boundingArea = calculateBoundingArea();
 800325e:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8003262:	4648      	mov	r0, r9
 8003264:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003268:	4639      	mov	r1, r7
 800326a:	4798      	blx	r3
 800326c:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003270:	f504 7310 	add.w	r3, r4, #576	@ 0x240
 8003274:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8003278:	4b11      	ldr	r3, [pc, #68]	@ (80032c0 <_ZN15Screen2ViewBaseC1Ev+0x380>)
 800327a:	681b      	ldr	r3, [r3, #0]
    Unicode::snprintf(pointBuffer, POINT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_NDHN).getText());
 800327c:	f504 794b 	add.w	r9, r4, #812	@ 0x32c
 8003280:	b92b      	cbnz	r3, 800328e <_ZN15Screen2ViewBaseC1Ev+0x34e>
 8003282:	4b10      	ldr	r3, [pc, #64]	@ (80032c4 <_ZN15Screen2ViewBaseC1Ev+0x384>)
 8003284:	4a10      	ldr	r2, [pc, #64]	@ (80032c8 <_ZN15Screen2ViewBaseC1Ev+0x388>)
 8003286:	2160      	movs	r1, #96	@ 0x60
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003288:	4810      	ldr	r0, [pc, #64]	@ (80032cc <_ZN15Screen2ViewBaseC1Ev+0x38c>)
 800328a:	f010 f883 	bl	8013394 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 800328e:	4b10      	ldr	r3, [pc, #64]	@ (80032d0 <_ZN15Screen2ViewBaseC1Ev+0x390>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003290:	881b      	ldrh	r3, [r3, #0]
 8003292:	2b03      	cmp	r3, #3
 8003294:	d820      	bhi.n	80032d8 <_ZN15Screen2ViewBaseC1Ev+0x398>
 8003296:	4b0f      	ldr	r3, [pc, #60]	@ (80032d4 <_ZN15Screen2ViewBaseC1Ev+0x394>)
 8003298:	4a0b      	ldr	r2, [pc, #44]	@ (80032c8 <_ZN15Screen2ViewBaseC1Ev+0x388>)
 800329a:	2161      	movs	r1, #97	@ 0x61
 800329c:	e7f4      	b.n	8003288 <_ZN15Screen2ViewBaseC1Ev+0x348>
 800329e:	bf00      	nop
 80032a0:	08015578 	.word	0x08015578
 80032a4:	08015a68 	.word	0x08015a68
 80032a8:	080154c0 	.word	0x080154c0
 80032ac:	08014bf4 	.word	0x08014bf4
 80032b0:	080153e4 	.word	0x080153e4
 80032b4:	08015560 	.word	0x08015560
 80032b8:	08002e63 	.word	0x08002e63
 80032bc:	fff50a0a 	.word	0xfff50a0a
 80032c0:	200126a8 	.word	0x200126a8
 80032c4:	08015224 	.word	0x08015224
 80032c8:	08015326 	.word	0x08015326
 80032cc:	080152a1 	.word	0x080152a1
 80032d0:	200126ac 	.word	0x200126ac
 80032d4:	080152e8 	.word	0x080152e8
        return texts->getText(typedTextId);
 80032d8:	4b35      	ldr	r3, [pc, #212]	@ (80033b0 <_ZN15Screen2ViewBaseC1Ev+0x470>)
 80032da:	4651      	mov	r1, sl
 80032dc:	6818      	ldr	r0, [r3, #0]
 80032de:	f000 fa1d 	bl	800371c <_ZNK8touchgfx5Texts7getTextEt>
 80032e2:	4a34      	ldr	r2, [pc, #208]	@ (80033b4 <_ZN15Screen2ViewBaseC1Ev+0x474>)
 80032e4:	4603      	mov	r3, r0
 80032e6:	4641      	mov	r1, r8
 80032e8:	4648      	mov	r0, r9
 80032ea:	f00d f8ed 	bl	80104c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 80032ee:	f04f 0804 	mov.w	r8, #4
 80032f2:	4b31      	ldr	r3, [pc, #196]	@ (80033b8 <_ZN15Screen2ViewBaseC1Ev+0x478>)
        wc1 = value;
 80032f4:	f8c4 924c 	str.w	r9, [r4, #588]	@ 0x24c
    point.setTypedText(touchgfx::TypedText(T___SINGLEUSE_PQ4Q));
 80032f8:	a912      	add	r1, sp, #72	@ 0x48
 80032fa:	4638      	mov	r0, r7
 80032fc:	9312      	str	r3, [sp, #72]	@ 0x48
 80032fe:	f8ad 804c 	strh.w	r8, [sp, #76]	@ 0x4c
 8003302:	f007 f9c3 	bl	800a68c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8003306:	4639      	mov	r1, r7
 8003308:	4630      	mov	r0, r6
 800330a:	f005 fcb1 	bl	8008c70 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    heart1.setXY(0, 0);
 800330e:	462a      	mov	r2, r5
 8003310:	9807      	ldr	r0, [sp, #28]
 8003312:	4629      	mov	r1, r5
 8003314:	f7ff fbb4 	bl	8002a80 <_ZN8touchgfx8Drawable5setXYEss>
 8003318:	2702      	movs	r7, #2
    heart1.setBitmap(touchgfx::Bitmap(BITMAP_HEART_ID));
 800331a:	9807      	ldr	r0, [sp, #28]
 800331c:	f8ad 7048 	strh.w	r7, [sp, #72]	@ 0x48
 8003320:	a912      	add	r1, sp, #72	@ 0x48
 8003322:	f007 fb4a 	bl	800a9ba <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003326:	9907      	ldr	r1, [sp, #28]
 8003328:	4630      	mov	r0, r6
 800332a:	f005 fca1 	bl	8008c70 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    heart2.setXY(18, 0);
 800332e:	462a      	mov	r2, r5
 8003330:	9808      	ldr	r0, [sp, #32]
 8003332:	2112      	movs	r1, #18
 8003334:	f7ff fba4 	bl	8002a80 <_ZN8touchgfx8Drawable5setXYEss>
    heart2.setBitmap(touchgfx::Bitmap(BITMAP_HEART_ID));
 8003338:	9808      	ldr	r0, [sp, #32]
 800333a:	f8ad 7048 	strh.w	r7, [sp, #72]	@ 0x48
 800333e:	a912      	add	r1, sp, #72	@ 0x48
 8003340:	f007 fb3b 	bl	800a9ba <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003344:	9908      	ldr	r1, [sp, #32]
 8003346:	4630      	mov	r0, r6
 8003348:	f005 fc92 	bl	8008c70 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    heart3.setXY(36, 0);
 800334c:	462a      	mov	r2, r5
 800334e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003350:	2124      	movs	r1, #36	@ 0x24
 8003352:	f7ff fb95 	bl	8002a80 <_ZN8touchgfx8Drawable5setXYEss>
    heart3.setBitmap(touchgfx::Bitmap(BITMAP_HEART_ID));
 8003356:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003358:	f8ad 7048 	strh.w	r7, [sp, #72]	@ 0x48
 800335c:	a912      	add	r1, sp, #72	@ 0x48
 800335e:	f007 fb2c 	bl	800a9ba <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003362:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003364:	4630      	mov	r0, r6
 8003366:	f005 fc83 	bl	8008c70 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    rock.setXY(0, 120);
 800336a:	2278      	movs	r2, #120	@ 0x78
 800336c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800336e:	4629      	mov	r1, r5
 8003370:	f7ff fb86 	bl	8002a80 <_ZN8touchgfx8Drawable5setXYEss>
 8003374:	2306      	movs	r3, #6
    rock.setBitmap(touchgfx::Bitmap(BITMAP_ROCK_ID));
 8003376:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8003378:	f8ad 3048 	strh.w	r3, [sp, #72]	@ 0x48
 800337c:	a912      	add	r1, sp, #72	@ 0x48
 800337e:	f007 fb1c 	bl	800a9ba <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003382:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003384:	4630      	mov	r0, r6
 8003386:	f005 fc73 	bl	8008c70 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    monster.setXY(164, 250);
 800338a:	22fa      	movs	r2, #250	@ 0xfa
 800338c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800338e:	21a4      	movs	r1, #164	@ 0xa4
 8003390:	f7ff fb76 	bl	8002a80 <_ZN8touchgfx8Drawable5setXYEss>
    monster.setBitmap(touchgfx::Bitmap(BITMAP_MONSTER_ID));
 8003394:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8003396:	f8ad 8048 	strh.w	r8, [sp, #72]	@ 0x48
 800339a:	a912      	add	r1, sp, #72	@ 0x48
 800339c:	f007 fb0d 	bl	800a9ba <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80033a0:	4630      	mov	r0, r6
 80033a2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80033a4:	f005 fc64 	bl	8008c70 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80033a8:	4620      	mov	r0, r4
 80033aa:	b015      	add	sp, #84	@ 0x54
 80033ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033b0:	200126b4 	.word	0x200126b4
 80033b4:	08015371 	.word	0x08015371
 80033b8:	08014bf4 	.word	0x08014bf4

080033bc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80033bc:	4770      	bx	lr
	...

080033c0 <_Z23getFont_verdana_10_4bppv>:
{
 80033c0:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80033c2:	4d16      	ldr	r5, [pc, #88]	@ (800341c <_Z23getFont_verdana_10_4bppv+0x5c>)
 80033c4:	682c      	ldr	r4, [r5, #0]
 80033c6:	f3bf 8f5b 	dmb	ish
 80033ca:	f014 0401 	ands.w	r4, r4, #1
{
 80033ce:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80033d0:	d120      	bne.n	8003414 <_Z23getFont_verdana_10_4bppv+0x54>
 80033d2:	4628      	mov	r0, r5
 80033d4:	f00f ffb2 	bl	801333c <__cxa_guard_acquire>
 80033d8:	b1e0      	cbz	r0, 8003414 <_Z23getFont_verdana_10_4bppv+0x54>
 80033da:	233f      	movs	r3, #63	@ 0x3f
 80033dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80033de:	4b10      	ldr	r3, [pc, #64]	@ (8003420 <_Z23getFont_verdana_10_4bppv+0x60>)
 80033e0:	9308      	str	r3, [sp, #32]
 80033e2:	4b10      	ldr	r3, [pc, #64]	@ (8003424 <_Z23getFont_verdana_10_4bppv+0x64>)
 80033e4:	4910      	ldr	r1, [pc, #64]	@ (8003428 <_Z23getFont_verdana_10_4bppv+0x68>)
 80033e6:	4811      	ldr	r0, [pc, #68]	@ (800342c <_Z23getFont_verdana_10_4bppv+0x6c>)
 80033e8:	940a      	str	r4, [sp, #40]	@ 0x28
 80033ea:	2201      	movs	r2, #1
 80033ec:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80033f0:	2304      	movs	r3, #4
 80033f2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80033f6:	230a      	movs	r3, #10
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80033fe:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003402:	9405      	str	r4, [sp, #20]
 8003404:	f7ff fa48 	bl	8002898 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003408:	4809      	ldr	r0, [pc, #36]	@ (8003430 <_Z23getFont_verdana_10_4bppv+0x70>)
 800340a:	f00f ffe1 	bl	80133d0 <atexit>
 800340e:	4628      	mov	r0, r5
 8003410:	f00f ffa0 	bl	8013354 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8003414:	4805      	ldr	r0, [pc, #20]	@ (800342c <_Z23getFont_verdana_10_4bppv+0x6c>)
 8003416:	b00f      	add	sp, #60	@ 0x3c
 8003418:	bd30      	pop	{r4, r5, pc}
 800341a:	bf00      	nop
 800341c:	20001810 	.word	0x20001810
 8003420:	0801b190 	.word	0x0801b190
 8003424:	0801b340 	.word	0x0801b340
 8003428:	0801a708 	.word	0x0801a708
 800342c:	20001814 	.word	0x20001814
 8003430:	080033bd 	.word	0x080033bd

08003434 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003434:	4770      	bx	lr
	...

08003438 <_Z23getFont_verdana_20_4bppv>:
{
 8003438:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800343a:	4d17      	ldr	r5, [pc, #92]	@ (8003498 <_Z23getFont_verdana_20_4bppv+0x60>)
 800343c:	682c      	ldr	r4, [r5, #0]
 800343e:	f3bf 8f5b 	dmb	ish
 8003442:	f014 0401 	ands.w	r4, r4, #1
{
 8003446:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003448:	d122      	bne.n	8003490 <_Z23getFont_verdana_20_4bppv+0x58>
 800344a:	4628      	mov	r0, r5
 800344c:	f00f ff76 	bl	801333c <__cxa_guard_acquire>
 8003450:	b1f0      	cbz	r0, 8003490 <_Z23getFont_verdana_20_4bppv+0x58>
 8003452:	233f      	movs	r3, #63	@ 0x3f
 8003454:	9309      	str	r3, [sp, #36]	@ 0x24
 8003456:	4b11      	ldr	r3, [pc, #68]	@ (800349c <_Z23getFont_verdana_20_4bppv+0x64>)
 8003458:	9308      	str	r3, [sp, #32]
 800345a:	4b11      	ldr	r3, [pc, #68]	@ (80034a0 <_Z23getFont_verdana_20_4bppv+0x68>)
 800345c:	9307      	str	r3, [sp, #28]
 800345e:	2301      	movs	r3, #1
 8003460:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003464:	9304      	str	r3, [sp, #16]
 8003466:	2304      	movs	r3, #4
 8003468:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800346c:	2314      	movs	r3, #20
 800346e:	490d      	ldr	r1, [pc, #52]	@ (80034a4 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	225f      	movs	r2, #95	@ 0x5f
 8003474:	2318      	movs	r3, #24
 8003476:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 800347a:	480b      	ldr	r0, [pc, #44]	@ (80034a8 <_Z23getFont_verdana_20_4bppv+0x70>)
 800347c:	940a      	str	r4, [sp, #40]	@ 0x28
 800347e:	9401      	str	r4, [sp, #4]
 8003480:	f7ff fa0a 	bl	8002898 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003484:	4809      	ldr	r0, [pc, #36]	@ (80034ac <_Z23getFont_verdana_20_4bppv+0x74>)
 8003486:	f00f ffa3 	bl	80133d0 <atexit>
 800348a:	4628      	mov	r0, r5
 800348c:	f00f ff62 	bl	8013354 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8003490:	4805      	ldr	r0, [pc, #20]	@ (80034a8 <_Z23getFont_verdana_20_4bppv+0x70>)
 8003492:	b00f      	add	sp, #60	@ 0x3c
 8003494:	bd30      	pop	{r4, r5, pc}
 8003496:	bf00      	nop
 8003498:	20001840 	.word	0x20001840
 800349c:	0801b194 	.word	0x0801b194
 80034a0:	0801b344 	.word	0x0801b344
 80034a4:	0801a718 	.word	0x0801a718
 80034a8:	20001844 	.word	0x20001844
 80034ac:	08003435 	.word	0x08003435

080034b0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80034b0:	4770      	bx	lr
	...

080034b4 <_Z23getFont_verdana_40_4bppv>:
{
 80034b4:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80034b6:	4d16      	ldr	r5, [pc, #88]	@ (8003510 <_Z23getFont_verdana_40_4bppv+0x5c>)
 80034b8:	682c      	ldr	r4, [r5, #0]
 80034ba:	f3bf 8f5b 	dmb	ish
 80034be:	f014 0401 	ands.w	r4, r4, #1
{
 80034c2:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80034c4:	d120      	bne.n	8003508 <_Z23getFont_verdana_40_4bppv+0x54>
 80034c6:	4628      	mov	r0, r5
 80034c8:	f00f ff38 	bl	801333c <__cxa_guard_acquire>
 80034cc:	b1e0      	cbz	r0, 8003508 <_Z23getFont_verdana_40_4bppv+0x54>
 80034ce:	233f      	movs	r3, #63	@ 0x3f
 80034d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80034d2:	4b10      	ldr	r3, [pc, #64]	@ (8003514 <_Z23getFont_verdana_40_4bppv+0x60>)
 80034d4:	9308      	str	r3, [sp, #32]
 80034d6:	4b10      	ldr	r3, [pc, #64]	@ (8003518 <_Z23getFont_verdana_40_4bppv+0x64>)
 80034d8:	4910      	ldr	r1, [pc, #64]	@ (800351c <_Z23getFont_verdana_40_4bppv+0x68>)
 80034da:	4811      	ldr	r0, [pc, #68]	@ (8003520 <_Z23getFont_verdana_40_4bppv+0x6c>)
 80034dc:	940a      	str	r4, [sp, #40]	@ 0x28
 80034de:	2201      	movs	r2, #1
 80034e0:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80034e4:	2304      	movs	r3, #4
 80034e6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80034ea:	2328      	movs	r3, #40	@ 0x28
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80034f2:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80034f6:	9405      	str	r4, [sp, #20]
 80034f8:	f7ff f9ce 	bl	8002898 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80034fc:	4809      	ldr	r0, [pc, #36]	@ (8003524 <_Z23getFont_verdana_40_4bppv+0x70>)
 80034fe:	f00f ff67 	bl	80133d0 <atexit>
 8003502:	4628      	mov	r0, r5
 8003504:	f00f ff26 	bl	8013354 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 8003508:	4805      	ldr	r0, [pc, #20]	@ (8003520 <_Z23getFont_verdana_40_4bppv+0x6c>)
 800350a:	b00f      	add	sp, #60	@ 0x3c
 800350c:	bd30      	pop	{r4, r5, pc}
 800350e:	bf00      	nop
 8003510:	20001870 	.word	0x20001870
 8003514:	0801b338 	.word	0x0801b338
 8003518:	0801b348 	.word	0x0801b348
 800351c:	0801ac4c 	.word	0x0801ac4c
 8003520:	20001874 	.word	0x20001874
 8003524:	080034b1 	.word	0x080034b1

08003528 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdanaz_22_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdanaz_22_4bpp();

touchgfx::GeneratedFont& getFont_verdanaz_22_4bpp()
{
    static touchgfx::GeneratedFont verdanaz_22_4bpp(glyphs_verdanaz_22_4bpp, 95, 27, 22, 0, 0, 4, 1, 3, 3, unicodes_verdanaz_22_4bpp, kerning_verdanaz_22_4bpp, 63, 0, 0, 0);
 8003528:	4770      	bx	lr
	...

0800352c <_Z24getFont_verdanaz_22_4bppv>:
{
 800352c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdanaz_22_4bpp(glyphs_verdanaz_22_4bpp, 95, 27, 22, 0, 0, 4, 1, 3, 3, unicodes_verdanaz_22_4bpp, kerning_verdanaz_22_4bpp, 63, 0, 0, 0);
 800352e:	4d17      	ldr	r5, [pc, #92]	@ (800358c <_Z24getFont_verdanaz_22_4bppv+0x60>)
 8003530:	682c      	ldr	r4, [r5, #0]
 8003532:	f3bf 8f5b 	dmb	ish
 8003536:	f014 0401 	ands.w	r4, r4, #1
{
 800353a:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdanaz_22_4bpp(glyphs_verdanaz_22_4bpp, 95, 27, 22, 0, 0, 4, 1, 3, 3, unicodes_verdanaz_22_4bpp, kerning_verdanaz_22_4bpp, 63, 0, 0, 0);
 800353c:	d123      	bne.n	8003586 <_Z24getFont_verdanaz_22_4bppv+0x5a>
 800353e:	4628      	mov	r0, r5
 8003540:	f00f fefc 	bl	801333c <__cxa_guard_acquire>
 8003544:	b1f8      	cbz	r0, 8003586 <_Z24getFont_verdanaz_22_4bppv+0x5a>
 8003546:	233f      	movs	r3, #63	@ 0x3f
 8003548:	9309      	str	r3, [sp, #36]	@ 0x24
 800354a:	4b11      	ldr	r3, [pc, #68]	@ (8003590 <_Z24getFont_verdanaz_22_4bppv+0x64>)
 800354c:	9308      	str	r3, [sp, #32]
 800354e:	4b11      	ldr	r3, [pc, #68]	@ (8003594 <_Z24getFont_verdanaz_22_4bppv+0x68>)
 8003550:	9307      	str	r3, [sp, #28]
 8003552:	2303      	movs	r3, #3
 8003554:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003558:	2201      	movs	r2, #1
 800355a:	2304      	movs	r3, #4
 800355c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003560:	2316      	movs	r3, #22
 8003562:	490d      	ldr	r1, [pc, #52]	@ (8003598 <_Z24getFont_verdanaz_22_4bppv+0x6c>)
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	225f      	movs	r2, #95	@ 0x5f
 8003568:	231b      	movs	r3, #27
 800356a:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 800356e:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003572:	480a      	ldr	r0, [pc, #40]	@ (800359c <_Z24getFont_verdanaz_22_4bppv+0x70>)
 8003574:	940a      	str	r4, [sp, #40]	@ 0x28
 8003576:	f7ff f98f 	bl	8002898 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800357a:	4809      	ldr	r0, [pc, #36]	@ (80035a0 <_Z24getFont_verdanaz_22_4bppv+0x74>)
 800357c:	f00f ff28 	bl	80133d0 <atexit>
 8003580:	4628      	mov	r0, r5
 8003582:	f00f fee7 	bl	8013354 <__cxa_guard_release>
    return verdanaz_22_4bpp;
}
 8003586:	4805      	ldr	r0, [pc, #20]	@ (800359c <_Z24getFont_verdanaz_22_4bppv+0x70>)
 8003588:	b00f      	add	sp, #60	@ 0x3c
 800358a:	bd30      	pop	{r4, r5, pc}
 800358c:	200018a0 	.word	0x200018a0
 8003590:	0801b33c 	.word	0x0801b33c
 8003594:	0801b34c 	.word	0x0801b34c
 8003598:	0801ac5c 	.word	0x0801ac5c
 800359c:	200018a4 	.word	0x200018a4
 80035a0:	08003529 	.word	0x08003529

080035a4 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 80035a4:	2000      	movs	r0, #0
 80035a6:	4770      	bx	lr

080035a8 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 80035a8:	2000      	movs	r0, #0
 80035aa:	4770      	bx	lr

080035ac <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80035ac:	b40e      	push	{r1, r2, r3}
 80035ae:	b503      	push	{r0, r1, lr}
 80035b0:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthRTL(TEXT_DIRECTION_LTR, text, pArg);
 80035b2:	2100      	movs	r1, #0
{
 80035b4:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 80035b8:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthRTL(TEXT_DIRECTION_LTR, text, pArg);
 80035ba:	f00a fac7 	bl	800db4c <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80035be:	b002      	add	sp, #8
 80035c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80035c4:	b003      	add	sp, #12
 80035c6:	4770      	bx	lr

080035c8 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80035c8:	b40c      	push	{r2, r3}
 80035ca:	b507      	push	{r0, r1, r2, lr}
 80035cc:	ab04      	add	r3, sp, #16
 80035ce:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 80035d2:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthRTL(textDirection, text, pArg);
 80035d4:	f00a faba 	bl	800db4c <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80035d8:	b003      	add	sp, #12
 80035da:	f85d eb04 	ldr.w	lr, [sp], #4
 80035de:	b002      	add	sp, #8
 80035e0:	4770      	bx	lr
	...

080035e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 80035e4:	b510      	push	{r4, lr}
 80035e6:	4604      	mov	r4, r0
    nextCharacters.replaceAt0(unicodeConverter(direction));
 80035e8:	f00b f8c8 	bl	800e77c <_ZN8touchgfx12TextProvider16unicodeConverterEh>
            replaceAt(++used - 1, newChar);
        }

        FORCE_INLINE_FUNCTION void replaceAt0(Unicode::UnicodeChar newChar)
        {
            buffer[pos] = newChar;
 80035ec:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80035ee:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80035f2:	8458      	strh	r0, [r3, #34]	@ 0x22
    if (fontGsubTable && nextCharacters.peekChar())
 80035f4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80035f6:	b35b      	cbz	r3, 8003650 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6c>
            assert(used > 0);
 80035f8:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80035fa:	b92b      	cbnz	r3, 8003608 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x24>
 80035fc:	4b17      	ldr	r3, [pc, #92]	@ (800365c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 80035fe:	4a18      	ldr	r2, [pc, #96]	@ (8003660 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8003600:	21c5      	movs	r1, #197	@ 0xc5
            assert(offset < used);
 8003602:	4818      	ldr	r0, [pc, #96]	@ (8003664 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8003604:	f00f fec6 	bl	8013394 <__assert_func>
 8003608:	b310      	cbz	r0, 8003650 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6c>
    {
        substituteGlyphs();
 800360a:	4620      	mov	r0, r4
 800360c:	f00c f9b3 	bl	800f976 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 8003610:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8003612:	2b01      	cmp	r3, #1
 8003614:	d803      	bhi.n	800361e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x3a>
 8003616:	4b14      	ldr	r3, [pc, #80]	@ (8003668 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x84>)
 8003618:	4a14      	ldr	r2, [pc, #80]	@ (800366c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x88>)
 800361a:	21cb      	movs	r1, #203	@ 0xcb
 800361c:	e7f1      	b.n	8003602 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x1e>
            const uint16_t index = pos + offset;
 800361e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8003620:	1c53      	adds	r3, r2, #1
 8003622:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8003624:	2b09      	cmp	r3, #9
 8003626:	4619      	mov	r1, r3
 8003628:	bf88      	it	hi
 800362a:	f1a3 010a 	subhi.w	r1, r3, #10
 800362e:	eb04 0141 	add.w	r1, r4, r1, lsl #1
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8003632:	f640 103f 	movw	r0, #2367	@ 0x93f
 8003636:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 8003638:	4281      	cmp	r1, r0
 800363a:	d109      	bne.n	8003650 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6c>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 800363c:	2b0a      	cmp	r3, #10
 800363e:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8003642:	bf28      	it	cs
 8003644:	2300      	movcs	r3, #0

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8003646:	eb04 0343 	add.w	r3, r4, r3, lsl #1
            return buffer[pos];
 800364a:	8c50      	ldrh	r0, [r2, #34]	@ 0x22
            buffer[index < size ? index : 0] = newChar;
 800364c:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 800364e:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8003650:	4620      	mov	r0, r4
}
 8003652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8003656:	f00c b891 	b.w	800f77c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800365a:	bf00      	nop
 800365c:	080155a8 	.word	0x080155a8
 8003660:	080155b1 	.word	0x080155b1
 8003664:	0801565c 	.word	0x0801565c
 8003668:	080156a6 	.word	0x080156a6
 800366c:	080156b4 	.word	0x080156b4

08003670 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8003670:	b510      	push	{r4, lr}
 8003672:	4604      	mov	r4, r0
    fillInputBuffer();
 8003674:	f00c f849 	bl	800f70a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
    unicodeConverterInit();
 8003678:	4620      	mov	r0, r4
}
 800367a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    unicodeConverterInit();
 800367e:	f00b b879 	b.w	800e774 <_ZN8touchgfx12TextProvider20unicodeConverterInitEv>

08003682 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8003682:	b510      	push	{r4, lr}
 8003684:	b086      	sub	sp, #24
 8003686:	ac02      	add	r4, sp, #8
 8003688:	e884 0006 	stmia.w	r4, {r1, r2}
 800368c:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 800368e:	ab0a      	add	r3, sp, #40	@ 0x28
 8003690:	9305      	str	r3, [sp, #20]
    drawStringRTL(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8003692:	9301      	str	r3, [sp, #4]
 8003694:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	4621      	mov	r1, r4
 800369a:	9b08      	ldr	r3, [sp, #32]
 800369c:	f008 fe68 	bl	800c370 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 80036a0:	b006      	add	sp, #24
 80036a2:	bd10      	pop	{r4, pc}

080036a4 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80036a4:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 80036a6:	bb18      	cbnz	r0, 80036f0 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 80036a8:	4b12      	ldr	r3, [pc, #72]	@ (80036f4 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 80036aa:	4813      	ldr	r0, [pc, #76]	@ (80036f8 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 80036ac:	681c      	ldr	r4, [r3, #0]
 80036ae:	4913      	ldr	r1, [pc, #76]	@ (80036fc <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 80036b0:	b1b4      	cbz	r4, 80036e0 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80036b2:	6822      	ldr	r2, [r4, #0]
 80036b4:	4422      	add	r2, r4
 80036b6:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80036b8:	6862      	ldr	r2, [r4, #4]
 80036ba:	4422      	add	r2, r4
 80036bc:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80036be:	68a2      	ldr	r2, [r4, #8]
 80036c0:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 80036c2:	4b0f      	ldr	r3, [pc, #60]	@ (8003700 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80036c8:	f000 f838 	bl	800373c <_ZN17TypedTextDatabase8getFontsEv>
 80036cc:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80036ce:	f000 f833 	bl	8003738 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 80036d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003704 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 80036d4:	601c      	str	r4, [r3, #0]
        fonts = f;
 80036d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003708 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 80036d8:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 80036da:	4b0c      	ldr	r3, [pc, #48]	@ (800370c <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 80036dc:	8018      	strh	r0, [r3, #0]
    }
}
 80036de:	e007      	b.n	80036f0 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 80036e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003710 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 80036e2:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80036e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003714 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 80036e6:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80036e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003718 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 80036ea:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 80036ec:	2c00      	cmp	r4, #0
 80036ee:	d1e8      	bne.n	80036c2 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 80036f0:	bd38      	pop	{r3, r4, r5, pc}
 80036f2:	bf00      	nop
 80036f4:	200018dc 	.word	0x200018dc
 80036f8:	200018d4 	.word	0x200018d4
 80036fc:	200018d0 	.word	0x200018d0
 8003700:	200018d8 	.word	0x200018d8
 8003704:	200126a8 	.word	0x200126a8
 8003708:	200126b0 	.word	0x200126b0
 800370c:	200126ac 	.word	0x200126ac
 8003710:	0801b364 	.word	0x0801b364
 8003714:	0801b350 	.word	0x0801b350
 8003718:	0801b384 	.word	0x0801b384

0800371c <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800371c:	4b04      	ldr	r3, [pc, #16]	@ (8003730 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8003724:	4b03      	ldr	r3, [pc, #12]	@ (8003734 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8003726:	681b      	ldr	r3, [r3, #0]
}
 8003728:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	200018d0 	.word	0x200018d0
 8003734:	200018d4 	.word	0x200018d4

08003738 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8003738:	2005      	movs	r0, #5
 800373a:	4770      	bx	lr

0800373c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 800373c:	4800      	ldr	r0, [pc, #0]	@ (8003740 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 800373e:	4770      	bx	lr
 8003740:	200018e0 	.word	0x200018e0

08003744 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 3:
        touchgfx_fonts[3] = &(getFont_verdanaz_22_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8003744:	b510      	push	{r4, lr}
    &(getFont_verdana_20_4bpp()),
 8003746:	f7ff fe77 	bl	8003438 <_Z23getFont_verdana_20_4bppv>
};
 800374a:	4c06      	ldr	r4, [pc, #24]	@ (8003764 <_GLOBAL__sub_I_touchgfx_fonts+0x20>)
 800374c:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 800374e:	f7ff feb1 	bl	80034b4 <_Z23getFont_verdana_40_4bppv>
};
 8003752:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp()),
 8003754:	f7ff fe34 	bl	80033c0 <_Z23getFont_verdana_10_4bppv>
};
 8003758:	60a0      	str	r0, [r4, #8]
    &(getFont_verdanaz_22_4bpp())
 800375a:	f7ff fee7 	bl	800352c <_Z24getFont_verdanaz_22_4bppv>
};
 800375e:	60e0      	str	r0, [r4, #12]
} // namespace TypedTextDatabase
 8003760:	bd10      	pop	{r4, pc}
 8003762:	bf00      	nop
 8003764:	200018e0 	.word	0x200018e0

08003768 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8003768:	4770      	bx	lr

0800376a <_ZN19FrontendApplicationD0Ev>:
 800376a:	b510      	push	{r4, lr}
 800376c:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8003770:	4604      	mov	r4, r0
 8003772:	f00f fde1 	bl	8013338 <_ZdlPvj>
 8003776:	4620      	mov	r0, r4
 8003778:	bd10      	pop	{r4, pc}

0800377a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800377a:	b510      	push	{r4, lr}
 800377c:	4604      	mov	r4, r0
    {
        model.tick();
 800377e:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 8003782:	f000 f817 	bl	80037b4 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8003786:	4620      	mov	r0, r4
    }
 8003788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 800378c:	f009 bb14 	b.w	800cdb8 <_ZN8touchgfx11Application15handleTickEventEv>

08003790 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8003790:	b510      	push	{r4, lr}
 8003792:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8003794:	f7fe ffee 	bl	8002774 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8003798:	4b01      	ldr	r3, [pc, #4]	@ (80037a0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
 800379a:	6023      	str	r3, [r4, #0]
{

}
 800379c:	4620      	mov	r0, r4
 800379e:	bd10      	pop	{r4, pc}
 80037a0:	08015790 	.word	0x08015790

080037a4 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : ImageX(95),ImageY(160), modelListener(0)
 80037a4:	4902      	ldr	r1, [pc, #8]	@ (80037b0 <_ZN5ModelC1Ev+0xc>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	e9c0 2100 	strd	r2, r1, [r0]
 80037ac:	6082      	str	r2, [r0, #8]
{
	modelTickCount = 0;
}
 80037ae:	4770      	bx	lr
 80037b0:	00a0005f 	.word	0x00a0005f

080037b4 <_ZN5Model4tickEv>:

void Model::tick()
{
	modelTickCount++;
 80037b4:	6803      	ldr	r3, [r0, #0]
 80037b6:	3301      	adds	r3, #1
 80037b8:	6003      	str	r3, [r0, #0]
}
 80037ba:	4770      	bx	lr

080037bc <_ZN5Model7updateXEs>:

void Model::updateX(int16_t x)
{
	ImageX = x;
 80037bc:	8081      	strh	r1, [r0, #4]
}
 80037be:	4770      	bx	lr

080037c0 <_ZN5Model9GetImageXEv>:
}

int16_t Model::GetImageX()
{
	return ImageX;
}
 80037c0:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80037c4:	4770      	bx	lr

080037c6 <_ZN5Model9GetImageYEv>:

int16_t Model::GetImageY()
{
	return ImageY;
}
 80037c6:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80037ca:	4770      	bx	lr

080037cc <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 80037cc:	4770      	bx	lr

080037ce <_ZThn4_N16Screen1PresenterD1Ev>:
 80037ce:	3804      	subs	r0, #4
 80037d0:	4770      	bx	lr

080037d2 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 80037d2:	4770      	bx	lr

080037d4 <_ZN16Screen1PresenterD0Ev>:
 80037d4:	b510      	push	{r4, lr}
 80037d6:	2110      	movs	r1, #16
 80037d8:	4604      	mov	r4, r0
 80037da:	f00f fdad 	bl	8013338 <_ZdlPvj>
 80037de:	4620      	mov	r0, r4
 80037e0:	bd10      	pop	{r4, pc}

080037e2 <_ZThn4_N16Screen1PresenterD0Ev>:
 80037e2:	f1a0 0004 	sub.w	r0, r0, #4
 80037e6:	e7f5      	b.n	80037d4 <_ZN16Screen1PresenterD0Ev>

080037e8 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 80037e8:	2200      	movs	r2, #0
 80037ea:	6082      	str	r2, [r0, #8]
    : view(v)
 80037ec:	4a02      	ldr	r2, [pc, #8]	@ (80037f8 <_ZN16Screen1PresenterC1ER11Screen1View+0x10>)
 80037ee:	6002      	str	r2, [r0, #0]
 80037f0:	3218      	adds	r2, #24
 80037f2:	6042      	str	r2, [r0, #4]
 80037f4:	60c1      	str	r1, [r0, #12]
}
 80037f6:	4770      	bx	lr
 80037f8:	080157e4 	.word	0x080157e4

080037fc <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 80037fc:	4770      	bx	lr
	...

08003800 <_ZN11Screen1View15handleTickEventEv>:

void Screen1View::handleTickEvent()
{
	tickCounter += 1;
 8003800:	f8d0 2184 	ldr.w	r2, [r0, #388]	@ 0x184
	updatePoint(scores);
 8003804:	6803      	ldr	r3, [r0, #0]
	tickCounter += 1;
 8003806:	3201      	adds	r2, #1
 8003808:	f8c0 2184 	str.w	r2, [r0, #388]	@ 0x184
	updatePoint(scores);
 800380c:	4a01      	ldr	r2, [pc, #4]	@ (8003814 <_ZN11Screen1View15handleTickEventEv+0x14>)
 800380e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003810:	8811      	ldrh	r1, [r2, #0]
 8003812:	4718      	bx	r3
 8003814:	20001558 	.word	0x20001558

08003818 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8003818:	b510      	push	{r4, lr}
 800381a:	4b03      	ldr	r3, [pc, #12]	@ (8003828 <_ZN11Screen1ViewD1Ev+0x10>)
 800381c:	6003      	str	r3, [r0, #0]
 800381e:	4604      	mov	r4, r0
 8003820:	f7ff f8ad 	bl	800297e <_ZN15Screen1ViewBaseD1Ev>
 8003824:	4620      	mov	r0, r4
 8003826:	bd10      	pop	{r4, pc}
 8003828:	08015810 	.word	0x08015810

0800382c <_ZN11Screen1ViewD0Ev>:
 800382c:	b510      	push	{r4, lr}
 800382e:	4604      	mov	r4, r0
 8003830:	f7ff fff2 	bl	8003818 <_ZN11Screen1ViewD1Ev>
 8003834:	4620      	mov	r0, r4
 8003836:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 800383a:	f00f fd7d 	bl	8013338 <_ZdlPvj>
 800383e:	4620      	mov	r0, r4
 8003840:	bd10      	pop	{r4, pc}
	...

08003844 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8003844:	b510      	push	{r4, lr}
 8003846:	4604      	mov	r4, r0
 8003848:	f7ff f95c 	bl	8002b04 <_ZN15Screen1ViewBaseC1Ev>
 800384c:	4b03      	ldr	r3, [pc, #12]	@ (800385c <_ZN11Screen1ViewC1Ev+0x18>)
 800384e:	6023      	str	r3, [r4, #0]
 8003850:	2300      	movs	r3, #0
 8003852:	f8c4 3184 	str.w	r3, [r4, #388]	@ 0x184
}
 8003856:	4620      	mov	r0, r4
 8003858:	bd10      	pop	{r4, pc}
 800385a:	bf00      	nop
 800385c:	08015810 	.word	0x08015810

08003860 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8003860:	f7ff b88e 	b.w	8002980 <_ZN15Screen1ViewBase11setupScreenEv>

08003864 <_ZN11Screen1View11updatePointEi>:

}
void Screen1View::updatePoint(int newValue)
{
 8003864:	b538      	push	{r3, r4, r5, lr}
 8003866:	4604      	mov	r4, r0
    Unicode::snprintf(screen1pointBuffer, SCREEN1POINT_SIZE, "%d", newValue);
 8003868:	f500 75b0 	add.w	r5, r0, #352	@ 0x160
{
 800386c:	460b      	mov	r3, r1
    Unicode::snprintf(screen1pointBuffer, SCREEN1POINT_SIZE, "%d", newValue);
 800386e:	4628      	mov	r0, r5
 8003870:	4a05      	ldr	r2, [pc, #20]	@ (8003888 <_ZN11Screen1View11updatePointEi+0x24>)
 8003872:	210a      	movs	r1, #10
 8003874:	f00c fe28 	bl	80104c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8003878:	f8c4 515c 	str.w	r5, [r4, #348]	@ 0x15c
    screen1point.setWildcard(screen1pointBuffer);
    screen1point.invalidate();
 800387c:	f504 708a 	add.w	r0, r4, #276	@ 0x114
}
 8003880:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    screen1point.invalidate();
 8003884:	f00a ba69 	b.w	800dd5a <_ZNK8touchgfx8Drawable10invalidateEv>
 8003888:	08015804 	.word	0x08015804

0800388c <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 800388c:	4770      	bx	lr

0800388e <_ZThn4_N16Screen2PresenterD1Ev>:
 800388e:	3804      	subs	r0, #4
 8003890:	4770      	bx	lr

08003892 <_ZN16Screen2Presenter10deactivateEv>:
}

void Screen2Presenter::activate()
{

}
 8003892:	4770      	bx	lr

08003894 <_ZN16Screen2PresenterD0Ev>:
 8003894:	b510      	push	{r4, lr}
 8003896:	2110      	movs	r1, #16
 8003898:	4604      	mov	r4, r0
 800389a:	f00f fd4d 	bl	8013338 <_ZdlPvj>
 800389e:	4620      	mov	r0, r4
 80038a0:	bd10      	pop	{r4, pc}

080038a2 <_ZThn4_N16Screen2PresenterD0Ev>:
 80038a2:	f1a0 0004 	sub.w	r0, r0, #4
 80038a6:	e7f5      	b.n	8003894 <_ZN16Screen2PresenterD0Ev>

080038a8 <_ZN16Screen2PresenterC1ER11Screen2View>:
 80038a8:	2200      	movs	r2, #0
 80038aa:	6082      	str	r2, [r0, #8]
    : view(v)
 80038ac:	4a02      	ldr	r2, [pc, #8]	@ (80038b8 <_ZN16Screen2PresenterC1ER11Screen2View+0x10>)
 80038ae:	6002      	str	r2, [r0, #0]
 80038b0:	3218      	adds	r2, #24
 80038b2:	6042      	str	r2, [r0, #4]
 80038b4:	60c1      	str	r1, [r0, #12]
}
 80038b6:	4770      	bx	lr
 80038b8:	08015848 	.word	0x08015848

080038bc <_ZN16Screen2Presenter12UpdateImageXEs>:

}

void Screen2Presenter::UpdateImageX(int16_t x)
{
	model->updateX(x);
 80038bc:	6880      	ldr	r0, [r0, #8]
 80038be:	f7ff bf7d 	b.w	80037bc <_ZN5Model7updateXEs>

080038c2 <_ZN16Screen2Presenter9GetImageXEv>:
}

int16_t Screen2Presenter::GetImageX()
{
	return model->GetImageX();
 80038c2:	6880      	ldr	r0, [r0, #8]
 80038c4:	f7ff bf7c 	b.w	80037c0 <_ZN5Model9GetImageXEv>

080038c8 <_ZN16Screen2Presenter9GetImageYEv>:
	model->updateY(y);
}

int16_t Screen2Presenter::GetImageY()
{
	return model->GetImageY();
 80038c8:	6880      	ldr	r0, [r0, #8]
 80038ca:	f7ff bf7c 	b.w	80037c6 <_ZN5Model9GetImageYEv>
	...

080038d0 <_ZN11Screen2View9resetGameEv>:
    heart2.invalidate();
    heart3.invalidate();
}

void Screen2View::resetGame()
{   scores = tickCount/20;
 80038d0:	f8d0 3368 	ldr.w	r3, [r0, #872]	@ 0x368
 80038d4:	2214      	movs	r2, #20
 80038d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80038da:	4a0d      	ldr	r2, [pc, #52]	@ (8003910 <_ZN11Screen2View9resetGameEv+0x40>)
 80038dc:	b510      	push	{r4, lr}
 80038de:	8013      	strh	r3, [r2, #0]
    tickCount = 0;
    flickerCount = 0;
    flickering = false;
 80038e0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80038e4:	f8a0 3370 	strh.w	r3, [r0, #880]	@ 0x370
 80038e8:	230e      	movs	r3, #14
 80038ea:	f8c0 31dc 	str.w	r3, [r0, #476]	@ 0x1dc
    localImageY = 0;
    car.setX(localImageX);
    car.setY(localImageY);
    lamb.setX(14);
    lamb.setY(0);
    updatePoint(0);
 80038ee:	6803      	ldr	r3, [r0, #0]
{   scores = tickCount/20;
 80038f0:	4604      	mov	r4, r0
    localImageX = 0;
 80038f2:	2100      	movs	r1, #0
    tickCount = 0;
 80038f4:	e9c0 11d9 	strd	r1, r1, [r0, #868]	@ 0x364
    updatePoint(0);
 80038f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    flickerCount = 0;
 80038fa:	f8c0 136c 	str.w	r1, [r0, #876]	@ 0x36c
 80038fe:	f8c0 114c 	str.w	r1, [r0, #332]	@ 0x14c
    updatePoint(0);
 8003902:	4798      	blx	r3
    updateHearts();
 8003904:	6823      	ldr	r3, [r4, #0]
 8003906:	4620      	mov	r0, r4
 8003908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
}
 800390a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    updateHearts();
 800390e:	4718      	bx	r3
 8003910:	20001558 	.word	0x20001558

08003914 <_ZN11Screen2View14checkCollisionERKN8touchgfx5ImageES3_>:

bool Screen2View::checkCollision(const Image& img1, const Image& img2)
{
    return (img1.getX() < img2.getX() + img2.getWidth() &&
 8003914:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
 8003918:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
{
 800391c:	b510      	push	{r4, lr}
    return (img1.getX() < img2.getX() + img2.getWidth() &&
 800391e:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8003922:	4403      	add	r3, r0
            img1.getX() + img1.getWidth() > img2.getX() &&
            img1.getY() < img2.getY() + img2.getHeight() &&
 8003924:	429c      	cmp	r4, r3
 8003926:	da15      	bge.n	8003954 <_ZN11Screen2View14checkCollisionERKN8touchgfx5ImageES3_+0x40>
            img1.getX() + img1.getWidth() > img2.getX() &&
 8003928:	f9b1 3008 	ldrsh.w	r3, [r1, #8]
 800392c:	4423      	add	r3, r4
    return (img1.getX() < img2.getX() + img2.getWidth() &&
 800392e:	4298      	cmp	r0, r3
 8003930:	da10      	bge.n	8003954 <_ZN11Screen2View14checkCollisionERKN8touchgfx5ImageES3_+0x40>
            img1.getY() < img2.getY() + img2.getHeight() &&
 8003932:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 8003936:	f9b2 300a 	ldrsh.w	r3, [r2, #10]
 800393a:	f9b1 4006 	ldrsh.w	r4, [r1, #6]
 800393e:	4403      	add	r3, r0
            img1.getX() + img1.getWidth() > img2.getX() &&
 8003940:	429c      	cmp	r4, r3
 8003942:	da07      	bge.n	8003954 <_ZN11Screen2View14checkCollisionERKN8touchgfx5ImageES3_+0x40>
            img1.getY() + img1.getHeight() > img2.getY());
 8003944:	f9b1 300a 	ldrsh.w	r3, [r1, #10]
 8003948:	4423      	add	r3, r4
            img1.getY() < img2.getY() + img2.getHeight() &&
 800394a:	4298      	cmp	r0, r3
 800394c:	bfac      	ite	ge
 800394e:	2000      	movge	r0, #0
 8003950:	2001      	movlt	r0, #1
}
 8003952:	bd10      	pop	{r4, pc}
            img1.getY() < img2.getY() + img2.getHeight() &&
 8003954:	2000      	movs	r0, #0
 8003956:	e7fc      	b.n	8003952 <_ZN11Screen2View14checkCollisionERKN8touchgfx5ImageES3_+0x3e>

08003958 <_ZN11Screen2View14tearDownScreenEv>:
    presenter->UpdateImageX(localImageX);
 8003958:	f9b0 1364 	ldrsh.w	r1, [r0, #868]	@ 0x364
 800395c:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 800395e:	f7ff bfad 	b.w	80038bc <_ZN16Screen2Presenter12UpdateImageXEs>
	...

08003964 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 8003964:	b510      	push	{r4, lr}
 8003966:	4b03      	ldr	r3, [pc, #12]	@ (8003974 <_ZN11Screen2ViewD1Ev+0x10>)
 8003968:	6003      	str	r3, [r0, #0]
 800396a:	4604      	mov	r4, r0
 800396c:	f7ff fa01 	bl	8002d72 <_ZN15Screen2ViewBaseD1Ev>
 8003970:	4620      	mov	r0, r4
 8003972:	bd10      	pop	{r4, pc}
 8003974:	08015870 	.word	0x08015870

08003978 <_ZN11Screen2ViewD0Ev>:
 8003978:	b510      	push	{r4, lr}
 800397a:	4604      	mov	r4, r0
 800397c:	f7ff fff2 	bl	8003964 <_ZN11Screen2ViewD1Ev>
 8003980:	4620      	mov	r0, r4
 8003982:	f44f 715d 	mov.w	r1, #884	@ 0x374
 8003986:	f00f fcd7 	bl	8013338 <_ZdlPvj>
 800398a:	4620      	mov	r0, r4
 800398c:	bd10      	pop	{r4, pc}
	...

08003990 <_ZN11Screen2ViewC1Ev>:
Screen2View::Screen2View() : tickCount(0), flickerCount(0), flickering(false), lives(3)
 8003990:	b510      	push	{r4, lr}
 8003992:	4604      	mov	r4, r0
 8003994:	f7ff fad4 	bl	8002f40 <_ZN15Screen2ViewBaseC1Ev>
 8003998:	4b05      	ldr	r3, [pc, #20]	@ (80039b0 <_ZN11Screen2ViewC1Ev+0x20>)
 800399a:	6023      	str	r3, [r4, #0]
 800399c:	2300      	movs	r3, #0
 800399e:	e9c4 33da 	strd	r3, r3, [r4, #872]	@ 0x368
 80039a2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80039a6:	f8a4 3370 	strh.w	r3, [r4, #880]	@ 0x370
}
 80039aa:	4620      	mov	r0, r4
 80039ac:	bd10      	pop	{r4, pc}
 80039ae:	bf00      	nop
 80039b0:	08015870 	.word	0x08015870

080039b4 <_ZN11Screen2View11setupScreenEv>:
{
 80039b4:	b510      	push	{r4, lr}
 80039b6:	4604      	mov	r4, r0
    localImageX = presenter->GetImageX();
 80039b8:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 80039ba:	f7ff ff82 	bl	80038c2 <_ZN16Screen2Presenter9GetImageXEv>
 80039be:	f8a4 0364 	strh.w	r0, [r4, #868]	@ 0x364
    localImageY = presenter->GetImageY();
 80039c2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80039c4:	f7ff ff80 	bl	80038c8 <_ZN16Screen2Presenter9GetImageYEv>
 80039c8:	f8a4 0366 	strh.w	r0, [r4, #870]	@ 0x366
    Screen2ViewBase::setupScreen();
 80039cc:	4620      	mov	r0, r4
 80039ce:	f7ff f9d1 	bl	8002d74 <_ZN15Screen2ViewBase11setupScreenEv>
 80039d2:	f8d4 3364 	ldr.w	r3, [r4, #868]	@ 0x364
 80039d6:	f8c4 314c 	str.w	r3, [r4, #332]	@ 0x14c
 80039da:	230e      	movs	r3, #14
 80039dc:	f8c4 31dc 	str.w	r3, [r4, #476]	@ 0x1dc
 80039e0:	f44f 03f0 	mov.w	r3, #7864320	@ 0x780000
 80039e4:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8
 80039e8:	4b07      	ldr	r3, [pc, #28]	@ (8003a08 <_ZN11Screen2View11setupScreenEv+0x54>)
 80039ea:	f8c4 3304 	str.w	r3, [r4, #772]	@ 0x304
    updatePoint(scores);
 80039ee:	4a07      	ldr	r2, [pc, #28]	@ (8003a0c <_ZN11Screen2View11setupScreenEv+0x58>)
 80039f0:	6823      	ldr	r3, [r4, #0]
 80039f2:	8811      	ldrh	r1, [r2, #0]
 80039f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f6:	4620      	mov	r0, r4
 80039f8:	4798      	blx	r3
    updateHearts();
 80039fa:	6823      	ldr	r3, [r4, #0]
 80039fc:	4620      	mov	r0, r4
 80039fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
}
 8003a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    updateHearts();
 8003a04:	4718      	bx	r3
 8003a06:	bf00      	nop
 8003a08:	00fa00a0 	.word	0x00fa00a0
 8003a0c:	20001558 	.word	0x20001558

08003a10 <_ZN11Screen2View15handleTickEventEv>:
{
 8003a10:	b538      	push	{r3, r4, r5, lr}
    tickCount++;
 8003a12:	f8d0 3368 	ldr.w	r3, [r0, #872]	@ 0x368
    switch (tickCount % 5)
 8003a16:	2205      	movs	r2, #5
    tickCount++;
 8003a18:	3301      	adds	r3, #1
    switch (tickCount % 5)
 8003a1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8003a1e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003a22:	1a9a      	subs	r2, r3, r2
 8003a24:	3a01      	subs	r2, #1
{
 8003a26:	4604      	mov	r4, r0
    tickCount++;
 8003a28:	f8c0 3368 	str.w	r3, [r0, #872]	@ 0x368
    switch (tickCount % 5)
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	2001      	movs	r0, #1
 8003a30:	2a03      	cmp	r2, #3
 8003a32:	d803      	bhi.n	8003a3c <_ZN11Screen2View15handleTickEventEv+0x2c>
 8003a34:	e8df f002 	tbb	[pc, r2]
 8003a38:	87827d78 	.word	0x87827d78
        visible = vis;
 8003a3c:	f884 0141 	strb.w	r0, [r4, #321]	@ 0x141
 8003a40:	f884 1091 	strb.w	r1, [r4, #145]	@ 0x91
    lamb.setY(tickCount * 2 % 320);
 8003a44:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	fbb3 f2f1 	udiv	r2, r3, r1
 8003a4e:	fb01 3312 	mls	r3, r1, r2, r3
    lamb.setX((tickCount * 2 / 320 % 4) * 60 + 15);
 8003a52:	f002 0203 	and.w	r2, r2, #3
 8003a56:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8003a5a:	0091      	lsls	r1, r2, #2
 8003a5c:	b289      	uxth	r1, r1
 8003a5e:	f101 000f 	add.w	r0, r1, #15
    lamb.setY(tickCount * 2 % 320);
 8003a62:	f8a4 31de 	strh.w	r3, [r4, #478]	@ 0x1de
    rock.setX(tickCount * 2 % 320-20);
 8003a66:	b29b      	uxth	r3, r3
        rect.x = x;
 8003a68:	f8a4 01dc 	strh.w	r0, [r4, #476]	@ 0x1dc
 8003a6c:	f1a3 0014 	sub.w	r0, r3, #20
    monster.setY(310-(tickCount * 2 % 320));
 8003a70:	f5c3 739b 	rsb	r3, r3, #310	@ 0x136
        rect.y = y;
 8003a74:	f8a4 3306 	strh.w	r3, [r4, #774]	@ 0x306
    if (JoystickX > 150 && localImageX > -6)
 8003a78:	4b4f      	ldr	r3, [pc, #316]	@ (8003bb8 <_ZN11Screen2View15handleTickEventEv+0x1a8>)
        rect.x = x;
 8003a7a:	f8a4 02d8 	strh.w	r0, [r4, #728]	@ 0x2d8
 8003a7e:	881b      	ldrh	r3, [r3, #0]
    rock.setY((tickCount * 2 / 320 % 4) * 30 + 15);
 8003a80:	0052      	lsls	r2, r2, #1
 8003a82:	320f      	adds	r2, #15
    monster.setX((tickCount * 2 / 320 % 4) * 60 + 80);
 8003a84:	3150      	adds	r1, #80	@ 0x50
    if (JoystickX > 150 && localImageX > -6)
 8003a86:	2b96      	cmp	r3, #150	@ 0x96
        rect.y = y;
 8003a88:	f8a4 22da 	strh.w	r2, [r4, #730]	@ 0x2da
        rect.x = x;
 8003a8c:	f8a4 1304 	strh.w	r1, [r4, #772]	@ 0x304
 8003a90:	d95e      	bls.n	8003b50 <_ZN11Screen2View15handleTickEventEv+0x140>
 8003a92:	f9b4 3364 	ldrsh.w	r3, [r4, #868]	@ 0x364
 8003a96:	1d59      	adds	r1, r3, #5
 8003a98:	db05      	blt.n	8003aa6 <_ZN11Screen2View15handleTickEventEv+0x96>
        localImageX -= 3;
 8003a9a:	3b03      	subs	r3, #3
        localImageX += 3;
 8003a9c:	b21b      	sxth	r3, r3
 8003a9e:	f8a4 3364 	strh.w	r3, [r4, #868]	@ 0x364
 8003aa2:	f8a4 314c 	strh.w	r3, [r4, #332]	@ 0x14c
    if (JoystickY > 150 && localImageY < 234)
 8003aa6:	4b45      	ldr	r3, [pc, #276]	@ (8003bbc <_ZN11Screen2View15handleTickEventEv+0x1ac>)
 8003aa8:	881b      	ldrh	r3, [r3, #0]
 8003aaa:	2b96      	cmp	r3, #150	@ 0x96
 8003aac:	d958      	bls.n	8003b60 <_ZN11Screen2View15handleTickEventEv+0x150>
 8003aae:	f9b4 3366 	ldrsh.w	r3, [r4, #870]	@ 0x366
 8003ab2:	2be9      	cmp	r3, #233	@ 0xe9
 8003ab4:	dc05      	bgt.n	8003ac2 <_ZN11Screen2View15handleTickEventEv+0xb2>
        localImageY += 3;
 8003ab6:	3303      	adds	r3, #3
        localImageY -= 3;
 8003ab8:	b21b      	sxth	r3, r3
 8003aba:	f8a4 3366 	strh.w	r3, [r4, #870]	@ 0x366
        rect.y = y;
 8003abe:	f8a4 314e 	strh.w	r3, [r4, #334]	@ 0x14e
    if (!flickering && (checkCollision(car, lamb) || checkCollision(car, monster) || checkCollision(car, rock)))
 8003ac2:	f894 2370 	ldrb.w	r2, [r4, #880]	@ 0x370
 8003ac6:	6823      	ldr	r3, [r4, #0]
 8003ac8:	b9c2      	cbnz	r2, 8003afc <_ZN11Screen2View15handleTickEventEv+0xec>
 8003aca:	f504 75a4 	add.w	r5, r4, #328	@ 0x148
 8003ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad0:	f504 72ec 	add.w	r2, r4, #472	@ 0x1d8
 8003ad4:	4629      	mov	r1, r5
 8003ad6:	4620      	mov	r0, r4
 8003ad8:	4798      	blx	r3
 8003ada:	2800      	cmp	r0, #0
 8003adc:	d048      	beq.n	8003b70 <_ZN11Screen2View15handleTickEventEv+0x160>
        lives--;
 8003ade:	f894 3371 	ldrb.w	r3, [r4, #881]	@ 0x371
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	f884 3371 	strb.w	r3, [r4, #881]	@ 0x371
        updateHearts();
 8003ae8:	6823      	ldr	r3, [r4, #0]
 8003aea:	4620      	mov	r0, r4
 8003aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aee:	4798      	blx	r3
        flickering = true;
 8003af0:	2301      	movs	r3, #1
 8003af2:	f884 3370 	strb.w	r3, [r4, #880]	@ 0x370
        flickerCount = 0;
 8003af6:	2300      	movs	r3, #0
 8003af8:	f8c4 336c 	str.w	r3, [r4, #876]	@ 0x36c
        flickerCount++;
 8003afc:	f8d4 336c 	ldr.w	r3, [r4, #876]	@ 0x36c
 8003b00:	3301      	adds	r3, #1
        if (flickerCount % 2 == 0)
 8003b02:	07da      	lsls	r2, r3, #31
        flickerCount++;
 8003b04:	f8c4 336c 	str.w	r3, [r4, #876]	@ 0x36c
        if (flickerCount % 2 == 0)
 8003b08:	d405      	bmi.n	8003b16 <_ZN11Screen2View15handleTickEventEv+0x106>
            car.setVisible(!car.isVisible());
 8003b0a:	f894 216d 	ldrb.w	r2, [r4, #365]	@ 0x16d
 8003b0e:	f082 0201 	eor.w	r2, r2, #1
        visible = vis;
 8003b12:	f884 216d 	strb.w	r2, [r4, #365]	@ 0x16d
        if (flickerCount >= 60)
 8003b16:	2b3b      	cmp	r3, #59	@ 0x3b
            flickering = false;
 8003b18:	bf81      	itttt	hi
 8003b1a:	2300      	movhi	r3, #0
 8003b1c:	f884 3370 	strbhi.w	r3, [r4, #880]	@ 0x370
 8003b20:	2301      	movhi	r3, #1
 8003b22:	f884 316d 	strbhi.w	r3, [r4, #365]	@ 0x16d
    }
 8003b26:	e039      	b.n	8003b9c <_ZN11Screen2View15handleTickEventEv+0x18c>
        visible = vis;
 8003b28:	f884 0115 	strb.w	r0, [r4, #277]	@ 0x115
 8003b2c:	f884 1141 	strb.w	r1, [r4, #321]	@ 0x141
    }
 8003b30:	e788      	b.n	8003a44 <_ZN11Screen2View15handleTickEventEv+0x34>
        visible = vis;
 8003b32:	f884 00e9 	strb.w	r0, [r4, #233]	@ 0xe9
 8003b36:	f884 1115 	strb.w	r1, [r4, #277]	@ 0x115
    }
 8003b3a:	e783      	b.n	8003a44 <_ZN11Screen2View15handleTickEventEv+0x34>
        visible = vis;
 8003b3c:	f884 00bd 	strb.w	r0, [r4, #189]	@ 0xbd
 8003b40:	f884 10e9 	strb.w	r1, [r4, #233]	@ 0xe9
    }
 8003b44:	e77e      	b.n	8003a44 <_ZN11Screen2View15handleTickEventEv+0x34>
        visible = vis;
 8003b46:	f884 0091 	strb.w	r0, [r4, #145]	@ 0x91
 8003b4a:	f884 10bd 	strb.w	r1, [r4, #189]	@ 0xbd
    }
 8003b4e:	e779      	b.n	8003a44 <_ZN11Screen2View15handleTickEventEv+0x34>
    if (JoystickX < 90 && localImageX < 197)
 8003b50:	2b59      	cmp	r3, #89	@ 0x59
 8003b52:	d8a8      	bhi.n	8003aa6 <_ZN11Screen2View15handleTickEventEv+0x96>
 8003b54:	f9b4 3364 	ldrsh.w	r3, [r4, #868]	@ 0x364
 8003b58:	2bc4      	cmp	r3, #196	@ 0xc4
 8003b5a:	dca4      	bgt.n	8003aa6 <_ZN11Screen2View15handleTickEventEv+0x96>
        localImageX += 3;
 8003b5c:	3303      	adds	r3, #3
 8003b5e:	e79d      	b.n	8003a9c <_ZN11Screen2View15handleTickEventEv+0x8c>
    if (JoystickY < 90 && localImageY > 0)
 8003b60:	2b59      	cmp	r3, #89	@ 0x59
 8003b62:	d8ae      	bhi.n	8003ac2 <_ZN11Screen2View15handleTickEventEv+0xb2>
 8003b64:	f9b4 3366 	ldrsh.w	r3, [r4, #870]	@ 0x366
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	ddaa      	ble.n	8003ac2 <_ZN11Screen2View15handleTickEventEv+0xb2>
        localImageY -= 3;
 8003b6c:	3b03      	subs	r3, #3
 8003b6e:	e7a3      	b.n	8003ab8 <_ZN11Screen2View15handleTickEventEv+0xa8>
    if (!flickering && (checkCollision(car, lamb) || checkCollision(car, monster) || checkCollision(car, rock)))
 8003b70:	6823      	ldr	r3, [r4, #0]
 8003b72:	f504 7240 	add.w	r2, r4, #768	@ 0x300
 8003b76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b78:	4629      	mov	r1, r5
 8003b7a:	4620      	mov	r0, r4
 8003b7c:	4798      	blx	r3
 8003b7e:	2800      	cmp	r0, #0
 8003b80:	d1ad      	bne.n	8003ade <_ZN11Screen2View15handleTickEventEv+0xce>
 8003b82:	6823      	ldr	r3, [r4, #0]
 8003b84:	f504 7235 	add.w	r2, r4, #724	@ 0x2d4
 8003b88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b8a:	4629      	mov	r1, r5
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	4798      	blx	r3
 8003b90:	2800      	cmp	r0, #0
 8003b92:	d1a4      	bne.n	8003ade <_ZN11Screen2View15handleTickEventEv+0xce>
    if (flickering)
 8003b94:	f894 3370 	ldrb.w	r3, [r4, #880]	@ 0x370
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1af      	bne.n	8003afc <_ZN11Screen2View15handleTickEventEv+0xec>
    updatePoint(tickCount/20);
 8003b9c:	6823      	ldr	r3, [r4, #0]
 8003b9e:	f8d4 1368 	ldr.w	r1, [r4, #872]	@ 0x368
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	2214      	movs	r2, #20
 8003ba8:	fbb1 f1f2 	udiv	r1, r1, r2
 8003bac:	4798      	blx	r3
     *
     * @see Container::invalidate
     */
    void invalidate() const
    {
        container.invalidate();
 8003bae:	1d20      	adds	r0, r4, #4
}
 8003bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bb4:	f00a b8d1 	b.w	800dd5a <_ZNK8touchgfx8Drawable10invalidateEv>
 8003bb8:	2000155c 	.word	0x2000155c
 8003bbc:	2000155a 	.word	0x2000155a

08003bc0 <_ZN11Screen2View11updatePointEi>:
{
 8003bc0:	b538      	push	{r3, r4, r5, lr}
 8003bc2:	4604      	mov	r4, r0
    Unicode::snprintf(txtBuffer, POINT_SIZE, "%d", newValue);
 8003bc4:	f500 7554 	add.w	r5, r0, #848	@ 0x350
{
 8003bc8:	460b      	mov	r3, r1
    Unicode::snprintf(txtBuffer, POINT_SIZE, "%d", newValue);
 8003bca:	4628      	mov	r0, r5
 8003bcc:	4a05      	ldr	r2, [pc, #20]	@ (8003be4 <_ZN11Screen2View11updatePointEi+0x24>)
 8003bce:	210a      	movs	r1, #10
 8003bd0:	f00c fc7a 	bl	80104c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8003bd4:	f8c4 524c 	str.w	r5, [r4, #588]	@ 0x24c
    point.invalidate();
 8003bd8:	f504 7001 	add.w	r0, r4, #516	@ 0x204
}
 8003bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    point.invalidate();
 8003be0:	f00a b8bb 	b.w	800dd5a <_ZNK8touchgfx8Drawable10invalidateEv>
 8003be4:	08015804 	.word	0x08015804

08003be8 <_ZN11Screen2View12updateHeartsEv>:
{
 8003be8:	b510      	push	{r4, lr}
    switch (lives)
 8003bea:	f890 3371 	ldrb.w	r3, [r0, #881]	@ 0x371
{
 8003bee:	4604      	mov	r4, r0
    switch (lives)
 8003bf0:	2b03      	cmp	r3, #3
 8003bf2:	d80a      	bhi.n	8003c0a <_ZN11Screen2View12updateHeartsEv+0x22>
 8003bf4:	e8df f003 	tbb	[pc, r3]
 8003bf8:	271e1702 	.word	0x271e1702
        	resetGame();
 8003bfc:	6803      	ldr	r3, [r0, #0]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c00:	4798      	blx	r3
 8003c02:	f009 f82f 	bl	800cc64 <_ZN8touchgfx11Application11getInstanceEv>
            application().gotoScreen1ScreenNoTransition();
 8003c06:	f7fe fde5 	bl	80027d4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    heart1.invalidate();
 8003c0a:	f504 7014 	add.w	r0, r4, #592	@ 0x250
 8003c0e:	f00a f8a4 	bl	800dd5a <_ZNK8touchgfx8Drawable10invalidateEv>
    heart2.invalidate();
 8003c12:	f504 701f 	add.w	r0, r4, #636	@ 0x27c
 8003c16:	f00a f8a0 	bl	800dd5a <_ZNK8touchgfx8Drawable10invalidateEv>
    heart3.invalidate();
 8003c1a:	f504 702a 	add.w	r0, r4, #680	@ 0x2a8
}
 8003c1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    heart3.invalidate();
 8003c22:	f00a b89a 	b.w	800dd5a <_ZNK8touchgfx8Drawable10invalidateEv>
        visible = vis;
 8003c26:	2301      	movs	r3, #1
 8003c28:	f880 3275 	strb.w	r3, [r0, #629]	@ 0x275
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	f884 32a1 	strb.w	r3, [r4, #673]	@ 0x2a1
 8003c32:	e005      	b.n	8003c40 <_ZN11Screen2View12updateHeartsEv+0x58>
 8003c34:	2301      	movs	r3, #1
 8003c36:	f880 3275 	strb.w	r3, [r0, #629]	@ 0x275
 8003c3a:	f880 32a1 	strb.w	r3, [r0, #673]	@ 0x2a1
 8003c3e:	2300      	movs	r3, #0
 8003c40:	f884 32cd 	strb.w	r3, [r4, #717]	@ 0x2cd
    }
 8003c44:	e7e1      	b.n	8003c0a <_ZN11Screen2View12updateHeartsEv+0x22>
        visible = vis;
 8003c46:	2301      	movs	r3, #1
 8003c48:	f880 3275 	strb.w	r3, [r0, #629]	@ 0x275
 8003c4c:	e7ef      	b.n	8003c2e <_ZN11Screen2View12updateHeartsEv+0x46>

08003c4e <ili9341_GetLcdPixelWidth>:
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
}
 8003c4e:	20f0      	movs	r0, #240	@ 0xf0
 8003c50:	4770      	bx	lr

08003c52 <ili9341_GetLcdPixelHeight>:
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
}
 8003c52:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8003c56:	4770      	bx	lr

08003c58 <ili9341_DisplayOn>:
  LCD_IO_WriteReg(LCD_Reg);
 8003c58:	2029      	movs	r0, #41	@ 0x29
 8003c5a:	f7fd be59 	b.w	8001910 <LCD_IO_WriteReg>

08003c5e <ili9341_DisplayOff>:
 8003c5e:	2028      	movs	r0, #40	@ 0x28
 8003c60:	f7fd be56 	b.w	8001910 <LCD_IO_WriteReg>

08003c64 <ili9341_Init>:
{
 8003c64:	b508      	push	{r3, lr}
  LCD_IO_Init();
 8003c66:	f7fd fe27 	bl	80018b8 <LCD_IO_Init>
  LCD_IO_WriteReg(LCD_Reg);
 8003c6a:	20ca      	movs	r0, #202	@ 0xca
 8003c6c:	f7fd fe50 	bl	8001910 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003c70:	20c3      	movs	r0, #195	@ 0xc3
 8003c72:	f7fd fe31 	bl	80018d8 <LCD_IO_WriteData>
 8003c76:	2008      	movs	r0, #8
 8003c78:	f7fd fe2e 	bl	80018d8 <LCD_IO_WriteData>
 8003c7c:	2050      	movs	r0, #80	@ 0x50
 8003c7e:	f7fd fe2b 	bl	80018d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003c82:	20cf      	movs	r0, #207	@ 0xcf
 8003c84:	f7fd fe44 	bl	8001910 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003c88:	2000      	movs	r0, #0
 8003c8a:	f7fd fe25 	bl	80018d8 <LCD_IO_WriteData>
 8003c8e:	20c1      	movs	r0, #193	@ 0xc1
 8003c90:	f7fd fe22 	bl	80018d8 <LCD_IO_WriteData>
 8003c94:	2030      	movs	r0, #48	@ 0x30
 8003c96:	f7fd fe1f 	bl	80018d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003c9a:	20ed      	movs	r0, #237	@ 0xed
 8003c9c:	f7fd fe38 	bl	8001910 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003ca0:	2064      	movs	r0, #100	@ 0x64
 8003ca2:	f7fd fe19 	bl	80018d8 <LCD_IO_WriteData>
 8003ca6:	2003      	movs	r0, #3
 8003ca8:	f7fd fe16 	bl	80018d8 <LCD_IO_WriteData>
 8003cac:	2012      	movs	r0, #18
 8003cae:	f7fd fe13 	bl	80018d8 <LCD_IO_WriteData>
 8003cb2:	2081      	movs	r0, #129	@ 0x81
 8003cb4:	f7fd fe10 	bl	80018d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003cb8:	20e8      	movs	r0, #232	@ 0xe8
 8003cba:	f7fd fe29 	bl	8001910 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003cbe:	2085      	movs	r0, #133	@ 0x85
 8003cc0:	f7fd fe0a 	bl	80018d8 <LCD_IO_WriteData>
 8003cc4:	2000      	movs	r0, #0
 8003cc6:	f7fd fe07 	bl	80018d8 <LCD_IO_WriteData>
 8003cca:	2078      	movs	r0, #120	@ 0x78
 8003ccc:	f7fd fe04 	bl	80018d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003cd0:	20cb      	movs	r0, #203	@ 0xcb
 8003cd2:	f7fd fe1d 	bl	8001910 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003cd6:	2039      	movs	r0, #57	@ 0x39
 8003cd8:	f7fd fdfe 	bl	80018d8 <LCD_IO_WriteData>
 8003cdc:	202c      	movs	r0, #44	@ 0x2c
 8003cde:	f7fd fdfb 	bl	80018d8 <LCD_IO_WriteData>
 8003ce2:	2000      	movs	r0, #0
 8003ce4:	f7fd fdf8 	bl	80018d8 <LCD_IO_WriteData>
 8003ce8:	2034      	movs	r0, #52	@ 0x34
 8003cea:	f7fd fdf5 	bl	80018d8 <LCD_IO_WriteData>
 8003cee:	2002      	movs	r0, #2
 8003cf0:	f7fd fdf2 	bl	80018d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003cf4:	20f7      	movs	r0, #247	@ 0xf7
 8003cf6:	f7fd fe0b 	bl	8001910 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003cfa:	2020      	movs	r0, #32
 8003cfc:	f7fd fdec 	bl	80018d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003d00:	20ea      	movs	r0, #234	@ 0xea
 8003d02:	f7fd fe05 	bl	8001910 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003d06:	2000      	movs	r0, #0
 8003d08:	f7fd fde6 	bl	80018d8 <LCD_IO_WriteData>
 8003d0c:	2000      	movs	r0, #0
 8003d0e:	f7fd fde3 	bl	80018d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003d12:	20b1      	movs	r0, #177	@ 0xb1
 8003d14:	f7fd fdfc 	bl	8001910 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003d18:	2000      	movs	r0, #0
 8003d1a:	f7fd fddd 	bl	80018d8 <LCD_IO_WriteData>
 8003d1e:	201b      	movs	r0, #27
 8003d20:	f7fd fdda 	bl	80018d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003d24:	20b6      	movs	r0, #182	@ 0xb6
 8003d26:	f7fd fdf3 	bl	8001910 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003d2a:	200a      	movs	r0, #10
 8003d2c:	f7fd fdd4 	bl	80018d8 <LCD_IO_WriteData>
 8003d30:	20a2      	movs	r0, #162	@ 0xa2
 8003d32:	f7fd fdd1 	bl	80018d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003d36:	20c0      	movs	r0, #192	@ 0xc0
 8003d38:	f7fd fdea 	bl	8001910 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003d3c:	2010      	movs	r0, #16
 8003d3e:	f7fd fdcb 	bl	80018d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003d42:	20c1      	movs	r0, #193	@ 0xc1
 8003d44:	f7fd fde4 	bl	8001910 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003d48:	2010      	movs	r0, #16
 8003d4a:	f7fd fdc5 	bl	80018d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003d4e:	20c5      	movs	r0, #197	@ 0xc5
 8003d50:	f7fd fdde 	bl	8001910 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003d54:	2045      	movs	r0, #69	@ 0x45
 8003d56:	f7fd fdbf 	bl	80018d8 <LCD_IO_WriteData>
 8003d5a:	2015      	movs	r0, #21
 8003d5c:	f7fd fdbc 	bl	80018d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003d60:	20c7      	movs	r0, #199	@ 0xc7
 8003d62:	f7fd fdd5 	bl	8001910 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003d66:	2090      	movs	r0, #144	@ 0x90
 8003d68:	f7fd fdb6 	bl	80018d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003d6c:	2036      	movs	r0, #54	@ 0x36
 8003d6e:	f7fd fdcf 	bl	8001910 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003d72:	20c8      	movs	r0, #200	@ 0xc8
 8003d74:	f7fd fdb0 	bl	80018d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003d78:	20f2      	movs	r0, #242	@ 0xf2
 8003d7a:	f7fd fdc9 	bl	8001910 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003d7e:	2000      	movs	r0, #0
 8003d80:	f7fd fdaa 	bl	80018d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003d84:	20b0      	movs	r0, #176	@ 0xb0
 8003d86:	f7fd fdc3 	bl	8001910 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003d8a:	20c2      	movs	r0, #194	@ 0xc2
 8003d8c:	f7fd fda4 	bl	80018d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003d90:	20b6      	movs	r0, #182	@ 0xb6
 8003d92:	f7fd fdbd 	bl	8001910 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003d96:	200a      	movs	r0, #10
 8003d98:	f7fd fd9e 	bl	80018d8 <LCD_IO_WriteData>
 8003d9c:	20a7      	movs	r0, #167	@ 0xa7
 8003d9e:	f7fd fd9b 	bl	80018d8 <LCD_IO_WriteData>
 8003da2:	2027      	movs	r0, #39	@ 0x27
 8003da4:	f7fd fd98 	bl	80018d8 <LCD_IO_WriteData>
 8003da8:	2004      	movs	r0, #4
 8003daa:	f7fd fd95 	bl	80018d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003dae:	202a      	movs	r0, #42	@ 0x2a
 8003db0:	f7fd fdae 	bl	8001910 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003db4:	2000      	movs	r0, #0
 8003db6:	f7fd fd8f 	bl	80018d8 <LCD_IO_WriteData>
 8003dba:	2000      	movs	r0, #0
 8003dbc:	f7fd fd8c 	bl	80018d8 <LCD_IO_WriteData>
 8003dc0:	2000      	movs	r0, #0
 8003dc2:	f7fd fd89 	bl	80018d8 <LCD_IO_WriteData>
 8003dc6:	20ef      	movs	r0, #239	@ 0xef
 8003dc8:	f7fd fd86 	bl	80018d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003dcc:	202b      	movs	r0, #43	@ 0x2b
 8003dce:	f7fd fd9f 	bl	8001910 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003dd2:	2000      	movs	r0, #0
 8003dd4:	f7fd fd80 	bl	80018d8 <LCD_IO_WriteData>
 8003dd8:	2000      	movs	r0, #0
 8003dda:	f7fd fd7d 	bl	80018d8 <LCD_IO_WriteData>
 8003dde:	2001      	movs	r0, #1
 8003de0:	f7fd fd7a 	bl	80018d8 <LCD_IO_WriteData>
 8003de4:	203f      	movs	r0, #63	@ 0x3f
 8003de6:	f7fd fd77 	bl	80018d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003dea:	20f6      	movs	r0, #246	@ 0xf6
 8003dec:	f7fd fd90 	bl	8001910 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003df0:	2001      	movs	r0, #1
 8003df2:	f7fd fd71 	bl	80018d8 <LCD_IO_WriteData>
 8003df6:	2000      	movs	r0, #0
 8003df8:	f7fd fd6e 	bl	80018d8 <LCD_IO_WriteData>
 8003dfc:	2006      	movs	r0, #6
 8003dfe:	f7fd fd6b 	bl	80018d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003e02:	202c      	movs	r0, #44	@ 0x2c
 8003e04:	f7fd fd84 	bl	8001910 <LCD_IO_WriteReg>
  LCD_Delay(200);
 8003e08:	20c8      	movs	r0, #200	@ 0xc8
 8003e0a:	f7fd fdcf 	bl	80019ac <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 8003e0e:	2026      	movs	r0, #38	@ 0x26
 8003e10:	f7fd fd7e 	bl	8001910 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003e14:	2001      	movs	r0, #1
 8003e16:	f7fd fd5f 	bl	80018d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003e1a:	20e0      	movs	r0, #224	@ 0xe0
 8003e1c:	f7fd fd78 	bl	8001910 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003e20:	200f      	movs	r0, #15
 8003e22:	f7fd fd59 	bl	80018d8 <LCD_IO_WriteData>
 8003e26:	2029      	movs	r0, #41	@ 0x29
 8003e28:	f7fd fd56 	bl	80018d8 <LCD_IO_WriteData>
 8003e2c:	2024      	movs	r0, #36	@ 0x24
 8003e2e:	f7fd fd53 	bl	80018d8 <LCD_IO_WriteData>
 8003e32:	200c      	movs	r0, #12
 8003e34:	f7fd fd50 	bl	80018d8 <LCD_IO_WriteData>
 8003e38:	200e      	movs	r0, #14
 8003e3a:	f7fd fd4d 	bl	80018d8 <LCD_IO_WriteData>
 8003e3e:	2009      	movs	r0, #9
 8003e40:	f7fd fd4a 	bl	80018d8 <LCD_IO_WriteData>
 8003e44:	204e      	movs	r0, #78	@ 0x4e
 8003e46:	f7fd fd47 	bl	80018d8 <LCD_IO_WriteData>
 8003e4a:	2078      	movs	r0, #120	@ 0x78
 8003e4c:	f7fd fd44 	bl	80018d8 <LCD_IO_WriteData>
 8003e50:	203c      	movs	r0, #60	@ 0x3c
 8003e52:	f7fd fd41 	bl	80018d8 <LCD_IO_WriteData>
 8003e56:	2009      	movs	r0, #9
 8003e58:	f7fd fd3e 	bl	80018d8 <LCD_IO_WriteData>
 8003e5c:	2013      	movs	r0, #19
 8003e5e:	f7fd fd3b 	bl	80018d8 <LCD_IO_WriteData>
 8003e62:	2005      	movs	r0, #5
 8003e64:	f7fd fd38 	bl	80018d8 <LCD_IO_WriteData>
 8003e68:	2017      	movs	r0, #23
 8003e6a:	f7fd fd35 	bl	80018d8 <LCD_IO_WriteData>
 8003e6e:	2011      	movs	r0, #17
 8003e70:	f7fd fd32 	bl	80018d8 <LCD_IO_WriteData>
 8003e74:	2000      	movs	r0, #0
 8003e76:	f7fd fd2f 	bl	80018d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003e7a:	20e1      	movs	r0, #225	@ 0xe1
 8003e7c:	f7fd fd48 	bl	8001910 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003e80:	2000      	movs	r0, #0
 8003e82:	f7fd fd29 	bl	80018d8 <LCD_IO_WriteData>
 8003e86:	2016      	movs	r0, #22
 8003e88:	f7fd fd26 	bl	80018d8 <LCD_IO_WriteData>
 8003e8c:	201b      	movs	r0, #27
 8003e8e:	f7fd fd23 	bl	80018d8 <LCD_IO_WriteData>
 8003e92:	2004      	movs	r0, #4
 8003e94:	f7fd fd20 	bl	80018d8 <LCD_IO_WriteData>
 8003e98:	2011      	movs	r0, #17
 8003e9a:	f7fd fd1d 	bl	80018d8 <LCD_IO_WriteData>
 8003e9e:	2007      	movs	r0, #7
 8003ea0:	f7fd fd1a 	bl	80018d8 <LCD_IO_WriteData>
 8003ea4:	2031      	movs	r0, #49	@ 0x31
 8003ea6:	f7fd fd17 	bl	80018d8 <LCD_IO_WriteData>
 8003eaa:	2033      	movs	r0, #51	@ 0x33
 8003eac:	f7fd fd14 	bl	80018d8 <LCD_IO_WriteData>
 8003eb0:	2042      	movs	r0, #66	@ 0x42
 8003eb2:	f7fd fd11 	bl	80018d8 <LCD_IO_WriteData>
 8003eb6:	2005      	movs	r0, #5
 8003eb8:	f7fd fd0e 	bl	80018d8 <LCD_IO_WriteData>
 8003ebc:	200c      	movs	r0, #12
 8003ebe:	f7fd fd0b 	bl	80018d8 <LCD_IO_WriteData>
 8003ec2:	200a      	movs	r0, #10
 8003ec4:	f7fd fd08 	bl	80018d8 <LCD_IO_WriteData>
 8003ec8:	2028      	movs	r0, #40	@ 0x28
 8003eca:	f7fd fd05 	bl	80018d8 <LCD_IO_WriteData>
 8003ece:	202f      	movs	r0, #47	@ 0x2f
 8003ed0:	f7fd fd02 	bl	80018d8 <LCD_IO_WriteData>
 8003ed4:	200f      	movs	r0, #15
 8003ed6:	f7fd fcff 	bl	80018d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003eda:	2011      	movs	r0, #17
 8003edc:	f7fd fd18 	bl	8001910 <LCD_IO_WriteReg>
  LCD_Delay(200);
 8003ee0:	20c8      	movs	r0, #200	@ 0xc8
 8003ee2:	f7fd fd63 	bl	80019ac <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 8003ee6:	2029      	movs	r0, #41	@ 0x29
 8003ee8:	f7fd fd12 	bl	8001910 <LCD_IO_WriteReg>
}
 8003eec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LCD_IO_WriteReg(LCD_Reg);
 8003ef0:	202c      	movs	r0, #44	@ 0x2c
 8003ef2:	f7fd bd0d 	b.w	8001910 <LCD_IO_WriteReg>

08003ef6 <ili9341_ReadID>:
{
 8003ef6:	b508      	push	{r3, lr}
  LCD_IO_Init();
 8003ef8:	f7fd fcde 	bl	80018b8 <LCD_IO_Init>
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8003efc:	2103      	movs	r1, #3
 8003efe:	20d3      	movs	r0, #211	@ 0xd3
 8003f00:	f7fd fd22 	bl	8001948 <LCD_IO_ReadData>
}
 8003f04:	b280      	uxth	r0, r0
 8003f06:	bd08      	pop	{r3, pc}

08003f08 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8003f08:	b510      	push	{r4, lr}
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8003f0a:	b2c4      	uxtb	r4, r0
 8003f0c:	2202      	movs	r2, #2
 8003f0e:	2103      	movs	r1, #3
 8003f10:	4620      	mov	r0, r4
 8003f12:	f7fd fc87 	bl	8001824 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8003f16:	200a      	movs	r0, #10
 8003f18:	f7fd fccc 	bl	80018b4 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	2200      	movs	r2, #0
 8003f20:	2103      	movs	r1, #3
 8003f22:	f7fd fc7f 	bl	8001824 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
}
 8003f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Delay(2); 
 8003f2a:	2002      	movs	r0, #2
 8003f2c:	f7fd bcc2 	b.w	80018b4 <IOE_Delay>

08003f30 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8003f30:	b538      	push	{r3, r4, r5, lr}
 8003f32:	4604      	mov	r4, r0
  /* Initialize IO BUS layer */
  IOE_Init(); 
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8003f34:	b2e4      	uxtb	r4, r4
  IOE_Init(); 
 8003f36:	f7fd fc73 	bl	8001820 <IOE_Init>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	4620      	mov	r0, r4
 8003f3e:	f7fd fc89 	bl	8001854 <IOE_Read>
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8003f42:	2101      	movs	r1, #1
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8003f44:	4605      	mov	r5, r0
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8003f46:	4620      	mov	r0, r4
 8003f48:	f7fd fc84 	bl	8001854 <IOE_Read>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8003f4c:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
}
 8003f50:	b280      	uxth	r0, r0
 8003f52:	bd38      	pop	{r3, r4, r5, pc}

08003f54 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8003f54:	b510      	push	{r4, lr}
  uint8_t state;
  uint8_t ret = 0;
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8003f56:	b2c4      	uxtb	r4, r0
 8003f58:	2140      	movs	r1, #64	@ 0x40
 8003f5a:	4620      	mov	r0, r4
 8003f5c:	f7fd fc7a 	bl	8001854 <IOE_Read>
  
  if(state > 0)
 8003f60:	0603      	lsls	r3, r0, #24
 8003f62:	d507      	bpl.n	8003f74 <stmpe811_TS_DetectTouch+0x20>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8003f64:	214c      	movs	r1, #76	@ 0x4c
 8003f66:	4620      	mov	r0, r4
 8003f68:	f7fd fc74 	bl	8001854 <IOE_Read>
 8003f6c:	3800      	subs	r0, #0
 8003f6e:	bf18      	it	ne
 8003f70:	2001      	movne	r0, #1
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
  }
  
  return ret;
}
 8003f72:	bd10      	pop	{r4, pc}
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003f74:	2201      	movs	r2, #1
 8003f76:	214b      	movs	r1, #75	@ 0x4b
 8003f78:	4620      	mov	r0, r4
 8003f7a:	f7fd fc53 	bl	8001824 <IOE_Write>
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003f7e:	4620      	mov	r0, r4
 8003f80:	2200      	movs	r2, #0
 8003f82:	214b      	movs	r1, #75	@ 0x4b
 8003f84:	f7fd fc4e 	bl	8001824 <IOE_Write>
  uint8_t ret = 0;
 8003f88:	2000      	movs	r0, #0
 8003f8a:	e7f2      	b.n	8003f72 <stmpe811_TS_DetectTouch+0x1e>

08003f8c <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8003f8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8003f8e:	2304      	movs	r3, #4
 8003f90:	b2c4      	uxtb	r4, r0
{
 8003f92:	460e      	mov	r6, r1
 8003f94:	4615      	mov	r5, r2
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8003f96:	21d7      	movs	r1, #215	@ 0xd7
 8003f98:	eb0d 0203 	add.w	r2, sp, r3
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	f7fd fc73 	bl	8001888 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8003fa2:	9b01      	ldr	r3, [sp, #4]
 8003fa4:	ba1b      	rev	r3, r3
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8003fa6:	0d1a      	lsrs	r2, r3, #20
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8003fa8:	f3c3 230b 	ubfx	r3, r3, #8, #12
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8003fac:	8032      	strh	r2, [r6, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003fae:	4620      	mov	r0, r4
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8003fb0:	802b      	strh	r3, [r5, #0]
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	214b      	movs	r1, #75	@ 0x4b
 8003fb6:	f7fd fc35 	bl	8001824 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003fba:	2200      	movs	r2, #0
 8003fbc:	214b      	movs	r1, #75	@ 0x4b
 8003fbe:	4620      	mov	r0, r4
 8003fc0:	f7fd fc30 	bl	8001824 <IOE_Write>
}
 8003fc4:	b002      	add	sp, #8
 8003fc6:	bd70      	pop	{r4, r5, r6, pc}

08003fc8 <stmpe811_Init>:
{
 8003fc8:	b510      	push	{r4, lr}
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
  {
    if(stmpe811[idx] == DeviceAddr)
 8003fca:	4a0a      	ldr	r2, [pc, #40]	@ (8003ff4 <stmpe811_Init+0x2c>)
 8003fcc:	7813      	ldrb	r3, [r2, #0]
 8003fce:	4298      	cmp	r0, r3
{
 8003fd0:	4604      	mov	r4, r0
    if(stmpe811[idx] == DeviceAddr)
 8003fd2:	d00d      	beq.n	8003ff0 <stmpe811_Init+0x28>
 8003fd4:	7851      	ldrb	r1, [r2, #1]
 8003fd6:	4288      	cmp	r0, r1
 8003fd8:	d00a      	beq.n	8003ff0 <stmpe811_Init+0x28>
 8003fda:	b10b      	cbz	r3, 8003fe0 <stmpe811_Init+0x18>
 8003fdc:	b941      	cbnz	r1, 8003ff0 <stmpe811_Init+0x28>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8003fde:	2301      	movs	r3, #1
      stmpe811[empty] = DeviceAddr;
 8003fe0:	54d4      	strb	r4, [r2, r3]
      IOE_Init(); 
 8003fe2:	f7fd fc1d 	bl	8001820 <IOE_Init>
      stmpe811_Reset(DeviceAddr);
 8003fe6:	4620      	mov	r0, r4
}
 8003fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      stmpe811_Reset(DeviceAddr);
 8003fec:	f7ff bf8c 	b.w	8003f08 <stmpe811_Reset>
}
 8003ff0:	bd10      	pop	{r4, pc}
 8003ff2:	bf00      	nop
 8003ff4:	200018f0 	.word	0x200018f0

08003ff8 <stmpe811_EnableGlobalIT>:
{
 8003ff8:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8003ffa:	b2c4      	uxtb	r4, r0
 8003ffc:	2109      	movs	r1, #9
 8003ffe:	4620      	mov	r0, r4
 8004000:	f7fd fc28 	bl	8001854 <IOE_Read>
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8004004:	f040 0201 	orr.w	r2, r0, #1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8004008:	b2d2      	uxtb	r2, r2
 800400a:	4620      	mov	r0, r4
 800400c:	2109      	movs	r1, #9
}
 800400e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8004012:	f7fd bc07 	b.w	8001824 <IOE_Write>

08004016 <stmpe811_DisableGlobalIT>:
{
 8004016:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8004018:	b2c4      	uxtb	r4, r0
 800401a:	2109      	movs	r1, #9
 800401c:	4620      	mov	r0, r4
 800401e:	f7fd fc19 	bl	8001854 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8004022:	2109      	movs	r1, #9
 8004024:	f000 02fe 	and.w	r2, r0, #254	@ 0xfe
 8004028:	4620      	mov	r0, r4
}
 800402a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 800402e:	f7fd bbf9 	b.w	8001824 <IOE_Write>

08004032 <stmpe811_EnableITSource>:
{
 8004032:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8004034:	b2c4      	uxtb	r4, r0
{
 8004036:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8004038:	4620      	mov	r0, r4
 800403a:	210a      	movs	r1, #10
 800403c:	f7fd fc0a 	bl	8001854 <IOE_Read>
  tmp |= Source; 
 8004040:	ea40 0205 	orr.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8004044:	b2d2      	uxtb	r2, r2
 8004046:	4620      	mov	r0, r4
 8004048:	210a      	movs	r1, #10
}
 800404a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 800404e:	f7fd bbe9 	b.w	8001824 <IOE_Write>

08004052 <stmpe811_TS_EnableIT>:
{
 8004052:	b510      	push	{r4, lr}
 8004054:	4604      	mov	r4, r0
  IOE_ITConfig();
 8004056:	f7fd fbe4 	bl	8001822 <IOE_ITConfig>
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 800405a:	4620      	mov	r0, r4
 800405c:	211f      	movs	r1, #31
 800405e:	f7ff ffe8 	bl	8004032 <stmpe811_EnableITSource>
  stmpe811_EnableGlobalIT(DeviceAddr);
 8004062:	4620      	mov	r0, r4
}
 8004064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_EnableGlobalIT(DeviceAddr);
 8004068:	f7ff bfc6 	b.w	8003ff8 <stmpe811_EnableGlobalIT>

0800406c <stmpe811_DisableITSource>:
{
 800406c:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800406e:	b2c4      	uxtb	r4, r0
{
 8004070:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8004072:	4620      	mov	r0, r4
 8004074:	210a      	movs	r1, #10
 8004076:	f7fd fbed 	bl	8001854 <IOE_Read>
  tmp &= ~Source; 
 800407a:	ea20 0205 	bic.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 800407e:	b2d2      	uxtb	r2, r2
 8004080:	4620      	mov	r0, r4
 8004082:	210a      	movs	r1, #10
}
 8004084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8004088:	f7fd bbcc 	b.w	8001824 <IOE_Write>

0800408c <stmpe811_TS_DisableIT>:
{
 800408c:	b510      	push	{r4, lr}
 800408e:	4604      	mov	r4, r0
  stmpe811_DisableGlobalIT(DeviceAddr);
 8004090:	f7ff ffc1 	bl	8004016 <stmpe811_DisableGlobalIT>
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8004094:	4620      	mov	r0, r4
 8004096:	211f      	movs	r1, #31
}
 8004098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 800409c:	f7ff bfe6 	b.w	800406c <stmpe811_DisableITSource>

080040a0 <stmpe811_ReadGITStatus>:
{
 80040a0:	b510      	push	{r4, lr}
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 80040a2:	b2c0      	uxtb	r0, r0
{
 80040a4:	460c      	mov	r4, r1
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 80040a6:	210b      	movs	r1, #11
 80040a8:	f7fd fbd4 	bl	8001854 <IOE_Read>
}
 80040ac:	4020      	ands	r0, r4
 80040ae:	bd10      	pop	{r4, pc}

080040b0 <stmpe811_TS_ITStatus>:
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 80040b0:	211f      	movs	r1, #31
 80040b2:	f7ff bff5 	b.w	80040a0 <stmpe811_ReadGITStatus>

080040b6 <stmpe811_ClearGlobalIT>:
{
 80040b6:	460a      	mov	r2, r1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 80040b8:	b2c0      	uxtb	r0, r0
 80040ba:	210b      	movs	r1, #11
 80040bc:	f7fd bbb2 	b.w	8001824 <IOE_Write>

080040c0 <stmpe811_TS_ClearIT>:
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 80040c0:	211f      	movs	r1, #31
 80040c2:	f7ff bff8 	b.w	80040b6 <stmpe811_ClearGlobalIT>

080040c6 <stmpe811_IO_EnableAF>:
{
 80040c6:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 80040c8:	b2c4      	uxtb	r4, r0
{
 80040ca:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 80040cc:	4620      	mov	r0, r4
 80040ce:	2117      	movs	r1, #23
 80040d0:	f7fd fbc0 	bl	8001854 <IOE_Read>
  tmp &= ~(uint8_t)IO_Pin;   
 80040d4:	ea20 0205 	bic.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 80040d8:	b2d2      	uxtb	r2, r2
 80040da:	4620      	mov	r0, r4
 80040dc:	2117      	movs	r1, #23
}
 80040de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 80040e2:	f7fd bb9f 	b.w	8001824 <IOE_Write>

080040e6 <stmpe811_TS_Start>:
{
 80040e6:	b570      	push	{r4, r5, r6, lr}
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80040e8:	b2c4      	uxtb	r4, r0
{
 80040ea:	4606      	mov	r6, r0
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80040ec:	2104      	movs	r1, #4
 80040ee:	4620      	mov	r0, r4
 80040f0:	f7fd fbb0 	bl	8001854 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80040f4:	2104      	movs	r1, #4
 80040f6:	f000 02fb 	and.w	r2, r0, #251	@ 0xfb
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80040fa:	4605      	mov	r5, r0
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80040fc:	4620      	mov	r0, r4
 80040fe:	f7fd fb91 	bl	8001824 <IOE_Write>
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8004102:	4630      	mov	r0, r6
 8004104:	21f0      	movs	r1, #240	@ 0xf0
 8004106:	f7ff ffde 	bl	80040c6 <stmpe811_IO_EnableAF>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 800410a:	f005 02f8 	and.w	r2, r5, #248	@ 0xf8
 800410e:	4620      	mov	r0, r4
 8004110:	2104      	movs	r1, #4
 8004112:	f7fd fb87 	bl	8001824 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8004116:	2249      	movs	r2, #73	@ 0x49
 8004118:	2120      	movs	r1, #32
 800411a:	4620      	mov	r0, r4
 800411c:	f7fd fb82 	bl	8001824 <IOE_Write>
  IOE_Delay(2); 
 8004120:	2002      	movs	r0, #2
 8004122:	f7fd fbc7 	bl	80018b4 <IOE_Delay>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8004126:	4620      	mov	r0, r4
 8004128:	2201      	movs	r2, #1
 800412a:	2121      	movs	r1, #33	@ 0x21
 800412c:	f7fd fb7a 	bl	8001824 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8004130:	4620      	mov	r0, r4
 8004132:	229a      	movs	r2, #154	@ 0x9a
 8004134:	2141      	movs	r1, #65	@ 0x41
 8004136:	f7fd fb75 	bl	8001824 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 800413a:	4620      	mov	r0, r4
 800413c:	2201      	movs	r2, #1
 800413e:	214a      	movs	r1, #74	@ 0x4a
 8004140:	f7fd fb70 	bl	8001824 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8004144:	4620      	mov	r0, r4
 8004146:	2201      	movs	r2, #1
 8004148:	214b      	movs	r1, #75	@ 0x4b
 800414a:	f7fd fb6b 	bl	8001824 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800414e:	4620      	mov	r0, r4
 8004150:	2200      	movs	r2, #0
 8004152:	214b      	movs	r1, #75	@ 0x4b
 8004154:	f7fd fb66 	bl	8001824 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8004158:	4620      	mov	r0, r4
 800415a:	2201      	movs	r2, #1
 800415c:	2156      	movs	r1, #86	@ 0x56
 800415e:	f7fd fb61 	bl	8001824 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8004162:	4620      	mov	r0, r4
 8004164:	2201      	movs	r2, #1
 8004166:	2158      	movs	r1, #88	@ 0x58
 8004168:	f7fd fb5c 	bl	8001824 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 800416c:	4620      	mov	r0, r4
 800416e:	2201      	movs	r2, #1
 8004170:	2140      	movs	r1, #64	@ 0x40
 8004172:	f7fd fb57 	bl	8001824 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8004176:	4620      	mov	r0, r4
 8004178:	22ff      	movs	r2, #255	@ 0xff
 800417a:	210b      	movs	r1, #11
 800417c:	f7fd fb52 	bl	8001824 <IOE_Write>
}
 8004180:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  IOE_Delay(2); 
 8004184:	2002      	movs	r0, #2
 8004186:	f7fd bb95 	b.w	80018b4 <IOE_Delay>
	...

0800418c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800418c:	4b05      	ldr	r3, [pc, #20]	@ (80041a4 <SystemInit+0x18>)
 800418e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004192:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 8004196:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800419a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800419e:	609a      	str	r2, [r3, #8]
#endif
}
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	e000ed00 	.word	0xe000ed00

080041a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041a8:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80041aa:	4b0b      	ldr	r3, [pc, #44]	@ (80041d8 <HAL_Init+0x30>)
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041b2:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80041ba:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041c2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041c4:	2003      	movs	r0, #3
 80041c6:	f000 fa45 	bl	8004654 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041ca:	2000      	movs	r0, #0
 80041cc:	f7fd fe88 	bl	8001ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041d0:	f7fd fbfa 	bl	80019c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80041d4:	2000      	movs	r0, #0
 80041d6:	bd08      	pop	{r3, pc}
 80041d8:	40023c00 	.word	0x40023c00

080041dc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80041dc:	4a03      	ldr	r2, [pc, #12]	@ (80041ec <HAL_IncTick+0x10>)
 80041de:	4b04      	ldr	r3, [pc, #16]	@ (80041f0 <HAL_IncTick+0x14>)
 80041e0:	6811      	ldr	r1, [r2, #0]
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	440b      	add	r3, r1
 80041e6:	6013      	str	r3, [r2, #0]
}
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	200018f4 	.word	0x200018f4
 80041f0:	20000078 	.word	0x20000078

080041f4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80041f4:	4b01      	ldr	r3, [pc, #4]	@ (80041fc <HAL_GetTick+0x8>)
 80041f6:	6818      	ldr	r0, [r3, #0]
}
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	200018f4 	.word	0x200018f4

08004200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004200:	b538      	push	{r3, r4, r5, lr}
 8004202:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004204:	f7ff fff6 	bl	80041f4 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004208:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800420a:	bf1c      	itt	ne
 800420c:	4b05      	ldrne	r3, [pc, #20]	@ (8004224 <HAL_Delay+0x24>)
 800420e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8004210:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8004212:	bf18      	it	ne
 8004214:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004216:	f7ff ffed 	bl	80041f4 <HAL_GetTick>
 800421a:	1b43      	subs	r3, r0, r5
 800421c:	42a3      	cmp	r3, r4
 800421e:	d3fa      	bcc.n	8004216 <HAL_Delay+0x16>
  {
  }
}
 8004220:	bd38      	pop	{r3, r4, r5, pc}
 8004222:	bf00      	nop
 8004224:	20000078 	.word	0x20000078

08004228 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004228:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;

  /* Check ADC handle */
  if (hadc == NULL)
 800422a:	4604      	mov	r4, r0
 800422c:	2800      	cmp	r0, #0
 800422e:	f000 809b 	beq.w	8004368 <HAL_ADC_Init+0x140>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004232:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8004234:	b925      	cbnz	r5, 8004240 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004236:	f7fd fbff 	bl	8001a38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800423a:	6465      	str	r5, [r4, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800423c:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004240:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004242:	06db      	lsls	r3, r3, #27
 8004244:	f100 808e 	bmi.w	8004364 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004248:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800424a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800424e:	f023 0302 	bic.w	r3, r3, #2
 8004252:	f043 0302 	orr.w	r3, r3, #2
 8004256:	6423      	str	r3, [r4, #64]	@ 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004258:	4b44      	ldr	r3, [pc, #272]	@ (800436c <HAL_ADC_Init+0x144>)
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8004260:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	6861      	ldr	r1, [r4, #4]
 8004266:	430a      	orrs	r2, r1
 8004268:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800426a:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800426c:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004274:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800427c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800427e:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004280:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004282:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004286:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	430a      	orrs	r2, r1
 800428c:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800428e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004290:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004292:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004296:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004298:	689a      	ldr	r2, [r3, #8]
 800429a:	430a      	orrs	r2, r1
 800429c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800429e:	4934      	ldr	r1, [pc, #208]	@ (8004370 <HAL_ADC_Init+0x148>)
 80042a0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80042a2:	428a      	cmp	r2, r1
 80042a4:	d052      	beq.n	800434c <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80042a6:	6899      	ldr	r1, [r3, #8]
 80042a8:	f021 6170 	bic.w	r1, r1, #251658240	@ 0xf000000
 80042ac:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80042ae:	6899      	ldr	r1, [r3, #8]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80042b4:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80042b6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80042b8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80042bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80042c2:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80042c4:	689a      	ldr	r2, [r3, #8]
 80042c6:	f022 0202 	bic.w	r2, r2, #2
 80042ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80042cc:	689a      	ldr	r2, [r3, #8]
 80042ce:	7e21      	ldrb	r1, [r4, #24]
 80042d0:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80042d4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80042d6:	f894 2020 	ldrb.w	r2, [r4, #32]
 80042da:	2a00      	cmp	r2, #0
 80042dc:	d03e      	beq.n	800435c <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80042de:	685a      	ldr	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80042e0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80042e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80042ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	3901      	subs	r1, #1
 80042f4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80042f8:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80042fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80042fc:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80042fe:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004302:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004306:	3901      	subs	r1, #1
 8004308:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800430c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004314:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 800431c:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8004320:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004322:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004324:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004326:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800432a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800432c:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800432e:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004330:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8004334:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8004336:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8004338:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800433a:	f023 0303 	bic.w	r3, r3, #3
 800433e:	f043 0301 	orr.w	r3, r3, #1
 8004342:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_UNLOCK(hadc);
 8004344:	2300      	movs	r3, #0
 8004346:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800434a:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004352:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004354:	689a      	ldr	r2, [r3, #8]
 8004356:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800435a:	e7b2      	b.n	80042c2 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004362:	e7c9      	b.n	80042f8 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8004364:	2001      	movs	r0, #1
 8004366:	e7ed      	b.n	8004344 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8004368:	2001      	movs	r0, #1
 800436a:	e7ee      	b.n	800434a <HAL_ADC_Init+0x122>
 800436c:	40012300 	.word	0x40012300
 8004370:	0f000001 	.word	0x0f000001

08004374 <HAL_ADC_Start>:
{
 8004374:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8004376:	2300      	movs	r3, #0
 8004378:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800437a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800437e:	2b01      	cmp	r3, #1
 8004380:	d069      	beq.n	8004456 <HAL_ADC_Start+0xe2>
 8004382:	2301      	movs	r3, #1
 8004384:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004388:	6803      	ldr	r3, [r0, #0]
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	07d2      	lsls	r2, r2, #31
 800438e:	d50b      	bpl.n	80043a8 <HAL_ADC_Start+0x34>
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004390:	689a      	ldr	r2, [r3, #8]
 8004392:	07d1      	lsls	r1, r2, #31
 8004394:	d41a      	bmi.n	80043cc <HAL_ADC_Start+0x58>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004396:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004398:	f043 0310 	orr.w	r3, r3, #16
 800439c:	6403      	str	r3, [r0, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800439e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80043a0:	f043 0301 	orr.w	r3, r3, #1
 80043a4:	6443      	str	r3, [r0, #68]	@ 0x44
 80043a6:	e04c      	b.n	8004442 <HAL_ADC_Start+0xce>
    __HAL_ADC_ENABLE(hadc);
 80043a8:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80043aa:	492c      	ldr	r1, [pc, #176]	@ (800445c <HAL_ADC_Start+0xe8>)
    __HAL_ADC_ENABLE(hadc);
 80043ac:	f042 0201 	orr.w	r2, r2, #1
 80043b0:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80043b2:	4a2b      	ldr	r2, [pc, #172]	@ (8004460 <HAL_ADC_Start+0xec>)
 80043b4:	6812      	ldr	r2, [r2, #0]
 80043b6:	fbb2 f2f1 	udiv	r2, r2, r1
 80043ba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 80043be:	9201      	str	r2, [sp, #4]
    while (counter != 0U)
 80043c0:	9a01      	ldr	r2, [sp, #4]
 80043c2:	2a00      	cmp	r2, #0
 80043c4:	d0e4      	beq.n	8004390 <HAL_ADC_Start+0x1c>
      counter--;
 80043c6:	9a01      	ldr	r2, [sp, #4]
 80043c8:	3a01      	subs	r2, #1
 80043ca:	e7f8      	b.n	80043be <HAL_ADC_Start+0x4a>
    ADC_STATE_CLR_SET(hadc->State,
 80043cc:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80043ce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80043d2:	f022 0201 	bic.w	r2, r2, #1
 80043d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043da:	6402      	str	r2, [r0, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	0552      	lsls	r2, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80043e0:	bf41      	itttt	mi
 80043e2:	6c02      	ldrmi	r2, [r0, #64]	@ 0x40
 80043e4:	f422 5240 	bicmi.w	r2, r2, #12288	@ 0x3000
 80043e8:	f442 5280 	orrmi.w	r2, r2, #4096	@ 0x1000
 80043ec:	6402      	strmi	r2, [r0, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043ee:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80043f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80043f4:	bf1c      	itt	ne
 80043f6:	6c42      	ldrne	r2, [r0, #68]	@ 0x44
 80043f8:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80043fc:	6442      	str	r2, [r0, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 80043fe:	2200      	movs	r2, #0
 8004400:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004404:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004408:	601a      	str	r2, [r3, #0]
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800440a:	4a16      	ldr	r2, [pc, #88]	@ (8004464 <HAL_ADC_Start+0xf0>)
 800440c:	6851      	ldr	r1, [r2, #4]
 800440e:	f011 0f1f 	tst.w	r1, #31
 8004412:	4915      	ldr	r1, [pc, #84]	@ (8004468 <HAL_ADC_Start+0xf4>)
 8004414:	d11c      	bne.n	8004450 <HAL_ADC_Start+0xdc>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004416:	428b      	cmp	r3, r1
 8004418:	d007      	beq.n	800442a <HAL_ADC_Start+0xb6>
 800441a:	f501 7180 	add.w	r1, r1, #256	@ 0x100
 800441e:	428b      	cmp	r3, r1
 8004420:	d10c      	bne.n	800443c <HAL_ADC_Start+0xc8>
 8004422:	6852      	ldr	r2, [r2, #4]
 8004424:	f012 0f1f 	tst.w	r2, #31
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004428:	d10b      	bne.n	8004442 <HAL_ADC_Start+0xce>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8004430:	d107      	bne.n	8004442 <HAL_ADC_Start+0xce>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004438:	609a      	str	r2, [r3, #8]
 800443a:	e002      	b.n	8004442 <HAL_ADC_Start+0xce>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800443c:	490b      	ldr	r1, [pc, #44]	@ (800446c <HAL_ADC_Start+0xf8>)
 800443e:	428b      	cmp	r3, r1
 8004440:	d002      	beq.n	8004448 <HAL_ADC_Start+0xd4>
  return HAL_OK;
 8004442:	2000      	movs	r0, #0
}
 8004444:	b002      	add	sp, #8
 8004446:	4770      	bx	lr
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004448:	6852      	ldr	r2, [r2, #4]
 800444a:	f012 0f10 	tst.w	r2, #16
 800444e:	e7eb      	b.n	8004428 <HAL_ADC_Start+0xb4>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004450:	428b      	cmp	r3, r1
 8004452:	d1f6      	bne.n	8004442 <HAL_ADC_Start+0xce>
 8004454:	e7e9      	b.n	800442a <HAL_ADC_Start+0xb6>
  __HAL_LOCK(hadc);
 8004456:	2002      	movs	r0, #2
 8004458:	e7f4      	b.n	8004444 <HAL_ADC_Start+0xd0>
 800445a:	bf00      	nop
 800445c:	000f4240 	.word	0x000f4240
 8004460:	20000074 	.word	0x20000074
 8004464:	40012300 	.word	0x40012300
 8004468:	40012000 	.word	0x40012000
 800446c:	40012200 	.word	0x40012200

08004470 <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004470:	6803      	ldr	r3, [r0, #0]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	0552      	lsls	r2, r2, #21
{
 8004476:	b570      	push	{r4, r5, r6, lr}
 8004478:	4604      	mov	r4, r0
 800447a:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800447c:	d50b      	bpl.n	8004496 <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800447e:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004480:	05de      	lsls	r6, r3, #23
 8004482:	d508      	bpl.n	8004496 <HAL_ADC_PollForConversion+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004484:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004486:	f043 0320 	orr.w	r3, r3, #32
 800448a:	6403      	str	r3, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hadc);
 800448c:	2300      	movs	r3, #0
 800448e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8004492:	2001      	movs	r0, #1
}
 8004494:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 8004496:	f7ff fead 	bl	80041f4 <HAL_GetTick>
 800449a:	4606      	mov	r6, r0
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800449c:	6823      	ldr	r3, [r4, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	0791      	lsls	r1, r2, #30
 80044a2:	d50c      	bpl.n	80044be <HAL_ADC_PollForConversion+0x4e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80044a4:	f06f 0212 	mvn.w	r2, #18
 80044a8:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80044aa:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80044ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044b0:	6422      	str	r2, [r4, #64]	@ 0x40
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80044b2:	689a      	ldr	r2, [r3, #8]
 80044b4:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 80044b8:	d017      	beq.n	80044ea <HAL_ADC_PollForConversion+0x7a>
  return HAL_OK;
 80044ba:	2000      	movs	r0, #0
 80044bc:	e7ea      	b.n	8004494 <HAL_ADC_PollForConversion+0x24>
    if (Timeout != HAL_MAX_DELAY)
 80044be:	1c68      	adds	r0, r5, #1
 80044c0:	d0ed      	beq.n	800449e <HAL_ADC_PollForConversion+0x2e>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80044c2:	b965      	cbnz	r5, 80044de <HAL_ADC_PollForConversion+0x6e>
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80044c4:	6823      	ldr	r3, [r4, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f013 0302 	ands.w	r3, r3, #2
 80044cc:	d1e6      	bne.n	800449c <HAL_ADC_PollForConversion+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80044ce:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hadc);
 80044d0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80044d4:	f042 0204 	orr.w	r2, r2, #4
 80044d8:	6422      	str	r2, [r4, #64]	@ 0x40
          return HAL_TIMEOUT;
 80044da:	2003      	movs	r0, #3
 80044dc:	e7da      	b.n	8004494 <HAL_ADC_PollForConversion+0x24>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80044de:	f7ff fe89 	bl	80041f4 <HAL_GetTick>
 80044e2:	1b80      	subs	r0, r0, r6
 80044e4:	42a8      	cmp	r0, r5
 80044e6:	d8ed      	bhi.n	80044c4 <HAL_ADC_PollForConversion+0x54>
 80044e8:	e7d8      	b.n	800449c <HAL_ADC_PollForConversion+0x2c>
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80044ea:	7e22      	ldrb	r2, [r4, #24]
 80044ec:	2a00      	cmp	r2, #0
 80044ee:	d1e4      	bne.n	80044ba <HAL_ADC_PollForConversion+0x4a>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80044f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80044f2:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 80044f6:	d002      	beq.n	80044fe <HAL_ADC_PollForConversion+0x8e>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80044f8:	689b      	ldr	r3, [r3, #8]
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80044fa:	055a      	lsls	r2, r3, #21
 80044fc:	d4dd      	bmi.n	80044ba <HAL_ADC_PollForConversion+0x4a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80044fe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004500:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004504:	6423      	str	r3, [r4, #64]	@ 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004506:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004508:	04db      	lsls	r3, r3, #19
 800450a:	d4d6      	bmi.n	80044ba <HAL_ADC_PollForConversion+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800450c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800450e:	f043 0301 	orr.w	r3, r3, #1
 8004512:	6423      	str	r3, [r4, #64]	@ 0x40
 8004514:	e7d1      	b.n	80044ba <HAL_ADC_PollForConversion+0x4a>

08004516 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8004516:	6803      	ldr	r3, [r0, #0]
 8004518:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
}
 800451a:	4770      	bx	lr

0800451c <HAL_ADC_ConfigChannel>:
{
 800451c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 800451e:	2300      	movs	r3, #0
 8004520:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8004522:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004526:	2b01      	cmp	r3, #1
{
 8004528:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 800452a:	f000 8086 	beq.w	800463a <HAL_ADC_ConfigChannel+0x11e>
 800452e:	2301      	movs	r3, #1
 8004530:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004534:	6808      	ldr	r0, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004536:	682b      	ldr	r3, [r5, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004538:	688e      	ldr	r6, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 800453a:	2809      	cmp	r0, #9
 800453c:	b284      	uxth	r4, r0
 800453e:	d933      	bls.n	80045a8 <HAL_ADC_ConfigChannel+0x8c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004540:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8004544:	68df      	ldr	r7, [r3, #12]
 8004546:	3a1e      	subs	r2, #30
 8004548:	f04f 0c07 	mov.w	ip, #7
 800454c:	fa0c fc02 	lsl.w	ip, ip, r2
 8004550:	ea27 070c 	bic.w	r7, r7, ip
 8004554:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004556:	68df      	ldr	r7, [r3, #12]
 8004558:	fa06 f202 	lsl.w	r2, r6, r2
 800455c:	433a      	orrs	r2, r7
 800455e:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8004560:	6849      	ldr	r1, [r1, #4]
 8004562:	2906      	cmp	r1, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004564:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  if (sConfig->Rank < 7U)
 8004568:	d82d      	bhi.n	80045c6 <HAL_ADC_ConfigChannel+0xaa>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800456a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800456c:	3a05      	subs	r2, #5
 800456e:	261f      	movs	r6, #31
 8004570:	4096      	lsls	r6, r2
 8004572:	ea21 0106 	bic.w	r1, r1, r6
 8004576:	6359      	str	r1, [r3, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004578:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800457a:	fa04 f202 	lsl.w	r2, r4, r2
 800457e:	430a      	orrs	r2, r1
 8004580:	635a      	str	r2, [r3, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004582:	4a2f      	ldr	r2, [pc, #188]	@ (8004640 <HAL_ADC_ConfigChannel+0x124>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d10a      	bne.n	800459e <HAL_ADC_ConfigChannel+0x82>
 8004588:	2812      	cmp	r0, #18
 800458a:	d137      	bne.n	80045fc <HAL_ADC_ConfigChannel+0xe0>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800458c:	4b2d      	ldr	r3, [pc, #180]	@ (8004644 <HAL_ADC_ConfigChannel+0x128>)
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8004594:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800459c:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hadc);
 800459e:	2000      	movs	r0, #0
 80045a0:	f885 003c 	strb.w	r0, [r5, #60]	@ 0x3c
}
 80045a4:	b003      	add	sp, #12
 80045a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80045a8:	691a      	ldr	r2, [r3, #16]
 80045aa:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 80045ae:	2707      	movs	r7, #7
 80045b0:	fa07 f70c 	lsl.w	r7, r7, ip
 80045b4:	ea22 0207 	bic.w	r2, r2, r7
 80045b8:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80045ba:	691a      	ldr	r2, [r3, #16]
 80045bc:	fa06 f60c 	lsl.w	r6, r6, ip
 80045c0:	4316      	orrs	r6, r2
 80045c2:	611e      	str	r6, [r3, #16]
 80045c4:	e7cc      	b.n	8004560 <HAL_ADC_ConfigChannel+0x44>
  else if (sConfig->Rank < 13U)
 80045c6:	290c      	cmp	r1, #12
 80045c8:	f04f 011f 	mov.w	r1, #31
 80045cc:	d80b      	bhi.n	80045e6 <HAL_ADC_ConfigChannel+0xca>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80045ce:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 80045d0:	3a23      	subs	r2, #35	@ 0x23
 80045d2:	4091      	lsls	r1, r2
 80045d4:	ea26 0101 	bic.w	r1, r6, r1
 80045d8:	6319      	str	r1, [r3, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80045da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80045dc:	fa04 f202 	lsl.w	r2, r4, r2
 80045e0:	430a      	orrs	r2, r1
 80045e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80045e4:	e7cd      	b.n	8004582 <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80045e6:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
 80045e8:	3a41      	subs	r2, #65	@ 0x41
 80045ea:	4091      	lsls	r1, r2
 80045ec:	ea26 0101 	bic.w	r1, r6, r1
 80045f0:	62d9      	str	r1, [r3, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80045f2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80045f4:	4094      	lsls	r4, r2
 80045f6:	430c      	orrs	r4, r1
 80045f8:	62dc      	str	r4, [r3, #44]	@ 0x2c
 80045fa:	e7c2      	b.n	8004582 <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80045fc:	4b12      	ldr	r3, [pc, #72]	@ (8004648 <HAL_ADC_ConfigChannel+0x12c>)
 80045fe:	4298      	cmp	r0, r3
 8004600:	d001      	beq.n	8004606 <HAL_ADC_ConfigChannel+0xea>
 8004602:	2811      	cmp	r0, #17
 8004604:	d1cb      	bne.n	800459e <HAL_ADC_ConfigChannel+0x82>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004606:	4b0f      	ldr	r3, [pc, #60]	@ (8004644 <HAL_ADC_ConfigChannel+0x128>)
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 800460e:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8004616:	605a      	str	r2, [r3, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004618:	4b0b      	ldr	r3, [pc, #44]	@ (8004648 <HAL_ADC_ConfigChannel+0x12c>)
 800461a:	4298      	cmp	r0, r3
 800461c:	d1bf      	bne.n	800459e <HAL_ADC_ConfigChannel+0x82>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800461e:	4b0b      	ldr	r3, [pc, #44]	@ (800464c <HAL_ADC_ConfigChannel+0x130>)
 8004620:	4a0b      	ldr	r2, [pc, #44]	@ (8004650 <HAL_ADC_ConfigChannel+0x134>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	fbb3 f3f2 	udiv	r3, r3, r2
 8004628:	220a      	movs	r2, #10
 800462a:	4353      	muls	r3, r2
        counter--;
 800462c:	9301      	str	r3, [sp, #4]
      while (counter != 0U)
 800462e:	9b01      	ldr	r3, [sp, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0b4      	beq.n	800459e <HAL_ADC_ConfigChannel+0x82>
        counter--;
 8004634:	9b01      	ldr	r3, [sp, #4]
 8004636:	3b01      	subs	r3, #1
 8004638:	e7f8      	b.n	800462c <HAL_ADC_ConfigChannel+0x110>
  __HAL_LOCK(hadc);
 800463a:	2002      	movs	r0, #2
 800463c:	e7b2      	b.n	80045a4 <HAL_ADC_ConfigChannel+0x88>
 800463e:	bf00      	nop
 8004640:	40012000 	.word	0x40012000
 8004644:	40012300 	.word	0x40012300
 8004648:	10000012 	.word	0x10000012
 800464c:	20000074 	.word	0x20000074
 8004650:	000f4240 	.word	0x000f4240

08004654 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004654:	4907      	ldr	r1, [pc, #28]	@ (8004674 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004656:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004658:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800465c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800465e:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004660:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004664:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004668:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800466c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8004670:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004672:	4770      	bx	lr
 8004674:	e000ed00 	.word	0xe000ed00

08004678 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004678:	4b16      	ldr	r3, [pc, #88]	@ (80046d4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800467a:	b530      	push	{r4, r5, lr}
 800467c:	68dc      	ldr	r4, [r3, #12]
 800467e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004682:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004686:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004688:	2b04      	cmp	r3, #4
 800468a:	bf28      	it	cs
 800468c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800468e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004690:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004694:	bf8c      	ite	hi
 8004696:	3c03      	subhi	r4, #3
 8004698:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800469a:	fa05 f303 	lsl.w	r3, r5, r3
 800469e:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046a2:	40a5      	lsls	r5, r4
 80046a4:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046a8:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80046aa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046ac:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046b0:	bfac      	ite	ge
 80046b2:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046b6:	4a08      	ldrlt	r2, [pc, #32]	@ (80046d8 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046b8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046bc:	bfb8      	it	lt
 80046be:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	bfaa      	itet	ge
 80046c6:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046ca:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046cc:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80046d0:	bd30      	pop	{r4, r5, pc}
 80046d2:	bf00      	nop
 80046d4:	e000ed00 	.word	0xe000ed00
 80046d8:	e000ed14 	.word	0xe000ed14

080046dc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80046dc:	2800      	cmp	r0, #0
 80046de:	db07      	blt.n	80046f0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046e0:	0941      	lsrs	r1, r0, #5
 80046e2:	4a04      	ldr	r2, [pc, #16]	@ (80046f4 <HAL_NVIC_EnableIRQ+0x18>)
 80046e4:	f000 001f 	and.w	r0, r0, #31
 80046e8:	2301      	movs	r3, #1
 80046ea:	4083      	lsls	r3, r0
 80046ec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	e000e100 	.word	0xe000e100

080046f8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80046f8:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80046fa:	4604      	mov	r4, r0
 80046fc:	b150      	cbz	r0, 8004714 <HAL_CRC_Init+0x1c>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80046fe:	7943      	ldrb	r3, [r0, #5]
 8004700:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004704:	b913      	cbnz	r3, 800470c <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004706:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004708:	f7fd f97e 	bl	8001a08 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800470c:	2301      	movs	r3, #1
 800470e:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8004710:	2000      	movs	r0, #0
}
 8004712:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004714:	2001      	movs	r0, #1
 8004716:	e7fc      	b.n	8004712 <HAL_CRC_Init+0x1a>

08004718 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004718:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800471a:	4604      	mov	r4, r0
 800471c:	b330      	cbz	r0, 800476c <HAL_DMA2D_Init+0x54>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800471e:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 8004722:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004726:	b91b      	cbnz	r3, 8004730 <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004728:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800472c:	f7fd f9dc 	bl	8001ae8 <HAL_DMA2D_MspInit>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004730:	6822      	ldr	r2, [r4, #0]
 8004732:	6861      	ldr	r1, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004734:	2302      	movs	r3, #2
 8004736:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800473a:	6813      	ldr	r3, [r2, #0]
 800473c:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8004740:	430b      	orrs	r3, r1
 8004742:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004744:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8004746:	68a1      	ldr	r1, [r4, #8]
 8004748:	f023 0307 	bic.w	r3, r3, #7
 800474c:	430b      	orrs	r3, r1
 800474e:	6353      	str	r3, [r2, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004750:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004752:	68e1      	ldr	r1, [r4, #12]
 8004754:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004758:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800475c:	430b      	orrs	r3, r1
 800475e:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004760:	2000      	movs	r0, #0

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004762:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004764:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004766:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39

  return HAL_OK;
}
 800476a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800476c:	2001      	movs	r0, #1
 800476e:	e7fc      	b.n	800476a <HAL_DMA2D_Init+0x52>

08004770 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 8004770:	4770      	bx	lr

08004772 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 8004772:	4770      	bx	lr

08004774 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004774:	6803      	ldr	r3, [r0, #0]
{
 8004776:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004778:	685e      	ldr	r6, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800477a:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800477c:	07f2      	lsls	r2, r6, #31
{
 800477e:	4604      	mov	r4, r0
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004780:	d514      	bpl.n	80047ac <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004782:	05e9      	lsls	r1, r5, #23
 8004784:	d512      	bpl.n	80047ac <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800478c:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800478e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004790:	f042 0201 	orr.w	r2, r2, #1
 8004794:	63c2      	str	r2, [r0, #60]	@ 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004796:	2201      	movs	r2, #1
 8004798:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800479a:	2304      	movs	r3, #4
 800479c:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 80047a0:	2300      	movs	r3, #0
 80047a2:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 80047a6:	6943      	ldr	r3, [r0, #20]
 80047a8:	b103      	cbz	r3, 80047ac <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 80047aa:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80047ac:	06b2      	lsls	r2, r6, #26
 80047ae:	d516      	bpl.n	80047de <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 80047b0:	04ab      	lsls	r3, r5, #18
 80047b2:	d514      	bpl.n	80047de <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80047b4:	6823      	ldr	r3, [r4, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80047bc:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80047be:	2220      	movs	r2, #32
 80047c0:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80047c2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80047c4:	f043 0302 	orr.w	r3, r3, #2
 80047c8:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80047ca:	2304      	movs	r3, #4
 80047cc:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 80047d0:	2300      	movs	r3, #0
 80047d2:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 80047d6:	6963      	ldr	r3, [r4, #20]
 80047d8:	b10b      	cbz	r3, 80047de <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 80047da:	4620      	mov	r0, r4
 80047dc:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80047de:	0730      	lsls	r0, r6, #28
 80047e0:	d516      	bpl.n	8004810 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80047e2:	0529      	lsls	r1, r5, #20
 80047e4:	d514      	bpl.n	8004810 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80047e6:	6823      	ldr	r3, [r4, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80047f0:	2208      	movs	r2, #8
 80047f2:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80047f4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80047f6:	f043 0304 	orr.w	r3, r3, #4
 80047fa:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80047fc:	2304      	movs	r3, #4
 80047fe:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8004802:	2300      	movs	r3, #0
 8004804:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 8004808:	6963      	ldr	r3, [r4, #20]
 800480a:	b10b      	cbz	r3, 8004810 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 800480c:	4620      	mov	r0, r4
 800480e:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004810:	0772      	lsls	r2, r6, #29
 8004812:	d50b      	bpl.n	800482c <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004814:	056b      	lsls	r3, r5, #21
 8004816:	d509      	bpl.n	800482c <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004820:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004822:	2204      	movs	r2, #4
 8004824:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004826:	4620      	mov	r0, r4
 8004828:	f7ff ffa2 	bl	8004770 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800482c:	07b0      	lsls	r0, r6, #30
 800482e:	d514      	bpl.n	800485a <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004830:	05a9      	lsls	r1, r5, #22
 8004832:	d512      	bpl.n	800485a <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004834:	6823      	ldr	r3, [r4, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800483c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800483e:	2202      	movs	r2, #2
 8004840:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004842:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004844:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004846:	2301      	movs	r3, #1
 8004848:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 800484c:	2300      	movs	r3, #0
 800484e:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferCpltCallback != NULL)
 8004852:	6923      	ldr	r3, [r4, #16]
 8004854:	b10b      	cbz	r3, 800485a <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 8004856:	4620      	mov	r0, r4
 8004858:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800485a:	06f2      	lsls	r2, r6, #27
 800485c:	d513      	bpl.n	8004886 <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800485e:	04eb      	lsls	r3, r5, #19
 8004860:	d511      	bpl.n	8004886 <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004862:	6823      	ldr	r3, [r4, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800486a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800486c:	2210      	movs	r2, #16
 800486e:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004870:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004872:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004874:	2301      	movs	r3, #1
 8004876:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 800487a:	2300      	movs	r3, #0
 800487c:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004880:	4620      	mov	r0, r4
 8004882:	f7ff ff76 	bl	8004772 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8004886:	bd70      	pop	{r4, r5, r6, pc}

08004888 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004888:	b5f0      	push	{r4, r5, r6, r7, lr}
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800488a:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800488e:	2a01      	cmp	r2, #1
{
 8004890:	4603      	mov	r3, r0
 8004892:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hdma2d);
 8004896:	d02b      	beq.n	80048f0 <HAL_DMA2D_ConfigLayer+0x68>
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800489e:	f883 0039 	strb.w	r0, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80048a2:	eb03 1201 	add.w	r2, r3, r1, lsl #4
 80048a6:	e9d2 4007 	ldrd	r4, r0, [r2, #28]
 80048aa:	6a55      	ldr	r5, [r2, #36]	@ 0x24
 80048ac:	4f17      	ldr	r7, [pc, #92]	@ (800490c <HAL_DMA2D_ConfigLayer+0x84>)
 80048ae:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80048b2:	3c09      	subs	r4, #9
 80048b4:	2c01      	cmp	r4, #1
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80048b6:	bf9c      	itt	ls
 80048b8:	f005 427f 	andls.w	r2, r5, #4278190080	@ 0xff000000
 80048bc:	4310      	orrls	r0, r2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80048be:	ea4f 1601 	mov.w	r6, r1, lsl #4

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80048c2:	681a      	ldr	r2, [r3, #0]
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80048c4:	bf88      	it	hi
 80048c6:	ea40 6005 	orrhi.w	r0, r0, r5, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80048ca:	b991      	cbnz	r1, 80048f2 <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80048cc:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 80048ce:	4039      	ands	r1, r7
 80048d0:	4301      	orrs	r1, r0
 80048d2:	6251      	str	r1, [r2, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80048d4:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80048d6:	6999      	ldr	r1, [r3, #24]
 80048d8:	6191      	str	r1, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80048da:	d803      	bhi.n	80048e4 <HAL_DMA2D_ConfigLayer+0x5c>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80048dc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80048de:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80048e2:	6291      	str	r1, [r2, #40]	@ 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80048e4:	2201      	movs	r2, #1

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80048e6:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80048e8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  __HAL_UNLOCK(hdma2d);
 80048ec:	f883 0038 	strb.w	r0, [r3, #56]	@ 0x38

  return HAL_OK;
}
 80048f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80048f2:	69d1      	ldr	r1, [r2, #28]
 80048f4:	4039      	ands	r1, r7
 80048f6:	4301      	orrs	r1, r0
 80048f8:	61d1      	str	r1, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80048fa:	1999      	adds	r1, r3, r6
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80048fc:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80048fe:	6989      	ldr	r1, [r1, #24]
 8004900:	6111      	str	r1, [r2, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004902:	bf9c      	itt	ls
 8004904:	f025 457f 	bicls.w	r5, r5, #4278190080	@ 0xff000000
 8004908:	6215      	strls	r5, [r2, #32]
 800490a:	e7eb      	b.n	80048e4 <HAL_DMA2D_ConfigLayer+0x5c>
 800490c:	00fcfff0 	.word	0x00fcfff0

08004910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004910:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004914:	f8df 91bc 	ldr.w	r9, [pc, #444]	@ 8004ad4 <HAL_GPIO_Init+0x1c4>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004918:	4a6c      	ldr	r2, [pc, #432]	@ (8004acc <HAL_GPIO_Init+0x1bc>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 800491a:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800491c:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 800491e:	2401      	movs	r4, #1
 8004920:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004922:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 8004926:	43ac      	bics	r4, r5
 8004928:	f040 80b7 	bne.w	8004a9a <HAL_GPIO_Init+0x18a>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800492c:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800492e:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004930:	f005 0403 	and.w	r4, r5, #3
 8004934:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004938:	fa07 fc08 	lsl.w	ip, r7, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800493c:	1e67      	subs	r7, r4, #1
 800493e:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004940:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004944:	d834      	bhi.n	80049b0 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8004946:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004948:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 800494c:	68cf      	ldr	r7, [r1, #12]
 800494e:	fa07 f708 	lsl.w	r7, r7, r8
 8004952:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8004956:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004958:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800495a:	ea27 0e06 	bic.w	lr, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800495e:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8004962:	409f      	lsls	r7, r3
 8004964:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8004968:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800496a:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800496c:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004970:	688f      	ldr	r7, [r1, #8]
 8004972:	fa07 f708 	lsl.w	r7, r7, r8
 8004976:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800497a:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 800497c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800497e:	d119      	bne.n	80049b4 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8004980:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8004984:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004988:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800498c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004990:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8004994:	f04f 0e0f 	mov.w	lr, #15
 8004998:	fa0e fe0b 	lsl.w	lr, lr, fp
 800499c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80049a0:	690f      	ldr	r7, [r1, #16]
 80049a2:	fa07 f70b 	lsl.w	r7, r7, fp
 80049a6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80049aa:	f8ca 7020 	str.w	r7, [sl, #32]
 80049ae:	e001      	b.n	80049b4 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049b0:	2c03      	cmp	r4, #3
 80049b2:	d1da      	bne.n	800496a <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 80049b4:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049b6:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049ba:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049be:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049c0:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80049c4:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049c6:	d068      	beq.n	8004a9a <HAL_GPIO_Init+0x18a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049c8:	2400      	movs	r4, #0
 80049ca:	9401      	str	r4, [sp, #4]
 80049cc:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 80049d0:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 80049d4:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 80049d8:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 80049dc:	f023 0703 	bic.w	r7, r3, #3
 80049e0:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 80049e4:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 80049e8:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 80049ec:	9401      	str	r4, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049ee:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049f2:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80049f4:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049f8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80049fc:	240f      	movs	r4, #15
 80049fe:	fa04 f40c 	lsl.w	r4, r4, ip
 8004a02:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a06:	4c32      	ldr	r4, [pc, #200]	@ (8004ad0 <HAL_GPIO_Init+0x1c0>)
 8004a08:	42a0      	cmp	r0, r4
 8004a0a:	d04d      	beq.n	8004aa8 <HAL_GPIO_Init+0x198>
 8004a0c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004a10:	42a0      	cmp	r0, r4
 8004a12:	d04b      	beq.n	8004aac <HAL_GPIO_Init+0x19c>
 8004a14:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004a18:	42a0      	cmp	r0, r4
 8004a1a:	d049      	beq.n	8004ab0 <HAL_GPIO_Init+0x1a0>
 8004a1c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004a20:	42a0      	cmp	r0, r4
 8004a22:	d047      	beq.n	8004ab4 <HAL_GPIO_Init+0x1a4>
 8004a24:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004a28:	42a0      	cmp	r0, r4
 8004a2a:	d045      	beq.n	8004ab8 <HAL_GPIO_Init+0x1a8>
 8004a2c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004a30:	42a0      	cmp	r0, r4
 8004a32:	d043      	beq.n	8004abc <HAL_GPIO_Init+0x1ac>
 8004a34:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004a38:	42a0      	cmp	r0, r4
 8004a3a:	d041      	beq.n	8004ac0 <HAL_GPIO_Init+0x1b0>
 8004a3c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004a40:	42a0      	cmp	r0, r4
 8004a42:	d03f      	beq.n	8004ac4 <HAL_GPIO_Init+0x1b4>
 8004a44:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004a48:	42a0      	cmp	r0, r4
 8004a4a:	d03d      	beq.n	8004ac8 <HAL_GPIO_Init+0x1b8>
 8004a4c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004a50:	42a0      	cmp	r0, r4
 8004a52:	bf14      	ite	ne
 8004a54:	240a      	movne	r4, #10
 8004a56:	2409      	moveq	r4, #9
 8004a58:	fa04 f40c 	lsl.w	r4, r4, ip
 8004a5c:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a60:	60bc      	str	r4, [r7, #8]
        temp = EXTI->RTSR;
 8004a62:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8004a64:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a66:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 8004a6a:	bf0c      	ite	eq
 8004a6c:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8004a6e:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;
 8004a70:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8004a72:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a74:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        temp &= ~((uint32_t)iocurrent);
 8004a78:	bf0c      	ite	eq
 8004a7a:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8004a7c:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;
 8004a7e:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8004a80:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a82:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 8004a86:	bf0c      	ite	eq
 8004a88:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8004a8a:	4334      	orrne	r4, r6
        }
        EXTI->EMR = temp;
 8004a8c:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a8e:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a90:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8004a92:	bf54      	ite	pl
 8004a94:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8004a96:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 8004a98:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	2b10      	cmp	r3, #16
 8004a9e:	f47f af3d 	bne.w	800491c <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8004aa2:	b003      	add	sp, #12
 8004aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004aa8:	2400      	movs	r4, #0
 8004aaa:	e7d5      	b.n	8004a58 <HAL_GPIO_Init+0x148>
 8004aac:	2401      	movs	r4, #1
 8004aae:	e7d3      	b.n	8004a58 <HAL_GPIO_Init+0x148>
 8004ab0:	2402      	movs	r4, #2
 8004ab2:	e7d1      	b.n	8004a58 <HAL_GPIO_Init+0x148>
 8004ab4:	2403      	movs	r4, #3
 8004ab6:	e7cf      	b.n	8004a58 <HAL_GPIO_Init+0x148>
 8004ab8:	2404      	movs	r4, #4
 8004aba:	e7cd      	b.n	8004a58 <HAL_GPIO_Init+0x148>
 8004abc:	2405      	movs	r4, #5
 8004abe:	e7cb      	b.n	8004a58 <HAL_GPIO_Init+0x148>
 8004ac0:	2406      	movs	r4, #6
 8004ac2:	e7c9      	b.n	8004a58 <HAL_GPIO_Init+0x148>
 8004ac4:	2407      	movs	r4, #7
 8004ac6:	e7c7      	b.n	8004a58 <HAL_GPIO_Init+0x148>
 8004ac8:	2408      	movs	r4, #8
 8004aca:	e7c5      	b.n	8004a58 <HAL_GPIO_Init+0x148>
 8004acc:	40013c00 	.word	0x40013c00
 8004ad0:	40020000 	.word	0x40020000
 8004ad4:	40023800 	.word	0x40023800

08004ad8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ad8:	6903      	ldr	r3, [r0, #16]
 8004ada:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004adc:	bf14      	ite	ne
 8004ade:	2001      	movne	r0, #1
 8004ae0:	2000      	moveq	r0, #0
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ae4:	b10a      	cbz	r2, 8004aea <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ae6:	6181      	str	r1, [r0, #24]
  }
}
 8004ae8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004aea:	0409      	lsls	r1, r1, #16
 8004aec:	e7fb      	b.n	8004ae6 <HAL_GPIO_WritePin+0x2>

08004aee <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004aee:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004af0:	ea01 0203 	and.w	r2, r1, r3
 8004af4:	ea21 0103 	bic.w	r1, r1, r3
 8004af8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004afc:	6181      	str	r1, [r0, #24]
}
 8004afe:	4770      	bx	lr

08004b00 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004b00:	4770      	bx	lr
	...

08004b04 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004b04:	4a04      	ldr	r2, [pc, #16]	@ (8004b18 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8004b06:	6951      	ldr	r1, [r2, #20]
 8004b08:	4201      	tst	r1, r0
{
 8004b0a:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004b0c:	d002      	beq.n	8004b14 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b0e:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b10:	f7ff fff6 	bl	8004b00 <HAL_GPIO_EXTI_Callback>
}
 8004b14:	bd08      	pop	{r3, pc}
 8004b16:	bf00      	nop
 8004b18:	40013c00 	.word	0x40013c00

08004b1c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b1c:	6801      	ldr	r1, [r0, #0]
 8004b1e:	694b      	ldr	r3, [r1, #20]
 8004b20:	f413 6380 	ands.w	r3, r3, #1024	@ 0x400
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	d010      	beq.n	8004b4c <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b2a:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8004b2e:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b30:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b32:	6302      	str	r2, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b34:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b38:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b3c:	6c03      	ldr	r3, [r0, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b3e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b42:	f043 0304 	orr.w	r3, r3, #4
 8004b46:	6403      	str	r3, [r0, #64]	@ 0x40

    return HAL_ERROR;
 8004b48:	2001      	movs	r0, #1
 8004b4a:	4770      	bx	lr
  }
  return HAL_OK;
 8004b4c:	4618      	mov	r0, r3
}
 8004b4e:	4770      	bx	lr

08004b50 <I2C_WaitOnFlagUntilTimeout>:
{
 8004b50:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8004b54:	4606      	mov	r6, r0
 8004b56:	460f      	mov	r7, r1
 8004b58:	4691      	mov	r9, r2
 8004b5a:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b5c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004b60:	6833      	ldr	r3, [r6, #0]
 8004b62:	f1ba 0f01 	cmp.w	sl, #1
 8004b66:	bf0c      	ite	eq
 8004b68:	695c      	ldreq	r4, [r3, #20]
 8004b6a:	699c      	ldrne	r4, [r3, #24]
 8004b6c:	ea27 0404 	bic.w	r4, r7, r4
 8004b70:	b2a4      	uxth	r4, r4
 8004b72:	fab4 f484 	clz	r4, r4
 8004b76:	0964      	lsrs	r4, r4, #5
 8004b78:	45a1      	cmp	r9, r4
 8004b7a:	d001      	beq.n	8004b80 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8004b7c:	2000      	movs	r0, #0
 8004b7e:	e017      	b.n	8004bb0 <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8004b80:	1c6a      	adds	r2, r5, #1
 8004b82:	d0ee      	beq.n	8004b62 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b84:	f7ff fb36 	bl	80041f4 <HAL_GetTick>
 8004b88:	9b08      	ldr	r3, [sp, #32]
 8004b8a:	1ac0      	subs	r0, r0, r3
 8004b8c:	42a8      	cmp	r0, r5
 8004b8e:	d801      	bhi.n	8004b94 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004b90:	2d00      	cmp	r5, #0
 8004b92:	d1e5      	bne.n	8004b60 <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b94:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b96:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b98:	6333      	str	r3, [r6, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b9a:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b9e:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ba2:	6c32      	ldr	r2, [r6, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004ba4:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ba8:	f042 0220 	orr.w	r2, r2, #32
 8004bac:	6432      	str	r2, [r6, #64]	@ 0x40
        return HAL_ERROR;
 8004bae:	2001      	movs	r0, #1
}
 8004bb0:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08004bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8004bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bb8:	4604      	mov	r4, r0
 8004bba:	460f      	mov	r7, r1
 8004bbc:	4616      	mov	r6, r2
 8004bbe:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bc0:	6825      	ldr	r5, [r4, #0]
 8004bc2:	6968      	ldr	r0, [r5, #20]
 8004bc4:	ea27 0000 	bic.w	r0, r7, r0
 8004bc8:	b280      	uxth	r0, r0
 8004bca:	b1c0      	cbz	r0, 8004bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bcc:	696b      	ldr	r3, [r5, #20]
 8004bce:	055a      	lsls	r2, r3, #21
 8004bd0:	d517      	bpl.n	8004c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bd2:	682b      	ldr	r3, [r5, #0]
 8004bd4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004bd8:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bda:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8004bde:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8004be0:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004be2:	2300      	movs	r3, #0
 8004be4:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004be6:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bea:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004bf0:	f043 0304 	orr.w	r3, r3, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bf4:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8004bfc:	2001      	movs	r0, #1
}
 8004bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8004c02:	1c73      	adds	r3, r6, #1
 8004c04:	d0dd      	beq.n	8004bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c06:	f7ff faf5 	bl	80041f4 <HAL_GetTick>
 8004c0a:	eba0 0008 	sub.w	r0, r0, r8
 8004c0e:	42b0      	cmp	r0, r6
 8004c10:	d801      	bhi.n	8004c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
 8004c12:	2e00      	cmp	r6, #0
 8004c14:	d1d4      	bne.n	8004bc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c16:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c18:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c1a:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c1c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c20:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c24:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c26:	4313      	orrs	r3, r2
 8004c28:	e7e4      	b.n	8004bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08004c2a <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8004c2a:	b570      	push	{r4, r5, r6, lr}
 8004c2c:	4604      	mov	r4, r0
 8004c2e:	460d      	mov	r5, r1
 8004c30:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c32:	6823      	ldr	r3, [r4, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	061b      	lsls	r3, r3, #24
 8004c38:	d501      	bpl.n	8004c3e <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	e01a      	b.n	8004c74 <I2C_WaitOnTXEFlagUntilTimeout+0x4a>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c3e:	4620      	mov	r0, r4
 8004c40:	f7ff ff6c 	bl	8004b1c <I2C_IsAcknowledgeFailed>
 8004c44:	b9a8      	cbnz	r0, 8004c72 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8004c46:	1c6a      	adds	r2, r5, #1
 8004c48:	d0f3      	beq.n	8004c32 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c4a:	f7ff fad3 	bl	80041f4 <HAL_GetTick>
 8004c4e:	1b80      	subs	r0, r0, r6
 8004c50:	42a8      	cmp	r0, r5
 8004c52:	d801      	bhi.n	8004c58 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8004c54:	2d00      	cmp	r5, #0
 8004c56:	d1ec      	bne.n	8004c32 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c58:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c5a:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c5c:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c5e:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c62:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c66:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004c68:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c6c:	f042 0220 	orr.w	r2, r2, #32
 8004c70:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8004c72:	2001      	movs	r0, #1
}
 8004c74:	bd70      	pop	{r4, r5, r6, pc}
	...

08004c78 <I2C_RequestMemoryWrite>:
{
 8004c78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c7c:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c7e:	6802      	ldr	r2, [r0, #0]
{
 8004c80:	b085      	sub	sp, #20
 8004c82:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
 8004c86:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c88:	6813      	ldr	r3, [r2, #0]
 8004c8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c8e:	6013      	str	r3, [r2, #0]
{
 8004c90:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c92:	463b      	mov	r3, r7
 8004c94:	f8cd 8000 	str.w	r8, [sp]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
{
 8004c9e:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ca0:	f7ff ff56 	bl	8004b50 <I2C_WaitOnFlagUntilTimeout>
 8004ca4:	6823      	ldr	r3, [r4, #0]
 8004ca6:	b138      	cbz	r0, 8004cb8 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	05db      	lsls	r3, r3, #23
 8004cac:	d502      	bpl.n	8004cb4 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004cb2:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8004cb4:	2603      	movs	r6, #3
 8004cb6:	e020      	b.n	8004cfa <I2C_RequestMemoryWrite+0x82>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004cb8:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 8004cbc:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cbe:	491a      	ldr	r1, [pc, #104]	@ (8004d28 <I2C_RequestMemoryWrite+0xb0>)
 8004cc0:	4643      	mov	r3, r8
 8004cc2:	463a      	mov	r2, r7
 8004cc4:	4620      	mov	r0, r4
 8004cc6:	f7ff ff75 	bl	8004bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cca:	b9a8      	cbnz	r0, 8004cf8 <I2C_RequestMemoryWrite+0x80>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ccc:	6823      	ldr	r3, [r4, #0]
 8004cce:	9003      	str	r0, [sp, #12]
 8004cd0:	695a      	ldr	r2, [r3, #20]
 8004cd2:	9203      	str	r2, [sp, #12]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cd8:	4642      	mov	r2, r8
 8004cda:	4639      	mov	r1, r7
 8004cdc:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cde:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ce0:	f7ff ffa3 	bl	8004c2a <I2C_WaitOnTXEFlagUntilTimeout>
 8004ce4:	4606      	mov	r6, r0
 8004ce6:	b160      	cbz	r0, 8004d02 <I2C_RequestMemoryWrite+0x8a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ce8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004cea:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cec:	bf01      	itttt	eq
 8004cee:	6822      	ldreq	r2, [r4, #0]
 8004cf0:	6813      	ldreq	r3, [r2, #0]
 8004cf2:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8004cf6:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 8004cf8:	2601      	movs	r6, #1
}
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	b005      	add	sp, #20
 8004cfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d02:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d06:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d08:	d102      	bne.n	8004d10 <I2C_RequestMemoryWrite+0x98>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d0a:	b2ed      	uxtb	r5, r5
 8004d0c:	611d      	str	r5, [r3, #16]
 8004d0e:	e7f4      	b.n	8004cfa <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d10:	0a2a      	lsrs	r2, r5, #8
 8004d12:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d14:	4639      	mov	r1, r7
 8004d16:	4642      	mov	r2, r8
 8004d18:	4620      	mov	r0, r4
 8004d1a:	f7ff ff86 	bl	8004c2a <I2C_WaitOnTXEFlagUntilTimeout>
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	d1e2      	bne.n	8004ce8 <I2C_RequestMemoryWrite+0x70>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d22:	6823      	ldr	r3, [r4, #0]
 8004d24:	e7f1      	b.n	8004d0a <I2C_RequestMemoryWrite+0x92>
 8004d26:	bf00      	nop
 8004d28:	00010002 	.word	0x00010002

08004d2c <I2C_RequestMemoryRead>:
{
 8004d2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d30:	469a      	mov	sl, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d32:	6803      	ldr	r3, [r0, #0]
{
 8004d34:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004d3c:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d3e:	681a      	ldr	r2, [r3, #0]
{
 8004d40:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d48:	601a      	str	r2, [r3, #0]
{
 8004d4a:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d4c:	463b      	mov	r3, r7
 8004d4e:	f8cd 8000 	str.w	r8, [sp]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
{
 8004d58:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d5a:	f7ff fef9 	bl	8004b50 <I2C_WaitOnFlagUntilTimeout>
 8004d5e:	6823      	ldr	r3, [r4, #0]
 8004d60:	b138      	cbz	r0, 8004d72 <I2C_RequestMemoryRead+0x46>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d62:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d64:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d66:	bf44      	itt	mi
 8004d68:	f44f 7300 	movmi.w	r3, #512	@ 0x200
 8004d6c:	6423      	strmi	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8004d6e:	2003      	movs	r0, #3
 8004d70:	e021      	b.n	8004db6 <I2C_RequestMemoryRead+0x8a>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d72:	fa5f f986 	uxtb.w	r9, r6
 8004d76:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 8004d7a:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d7c:	492b      	ldr	r1, [pc, #172]	@ (8004e2c <I2C_RequestMemoryRead+0x100>)
 8004d7e:	4643      	mov	r3, r8
 8004d80:	463a      	mov	r2, r7
 8004d82:	4620      	mov	r0, r4
 8004d84:	f7ff ff16 	bl	8004bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d88:	b9a0      	cbnz	r0, 8004db4 <I2C_RequestMemoryRead+0x88>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	9003      	str	r0, [sp, #12]
 8004d8e:	695a      	ldr	r2, [r3, #20]
 8004d90:	9203      	str	r2, [sp, #12]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d96:	4642      	mov	r2, r8
 8004d98:	4639      	mov	r1, r7
 8004d9a:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d9c:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d9e:	f7ff ff44 	bl	8004c2a <I2C_WaitOnTXEFlagUntilTimeout>
 8004da2:	b158      	cbz	r0, 8004dbc <I2C_RequestMemoryRead+0x90>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004da4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004da6:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da8:	bf01      	itttt	eq
 8004daa:	6822      	ldreq	r2, [r4, #0]
 8004dac:	6813      	ldreq	r3, [r2, #0]
 8004dae:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8004db2:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 8004db4:	2001      	movs	r0, #1
}
 8004db6:	b004      	add	sp, #16
 8004db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004dbc:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dc0:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004dc2:	d11a      	bne.n	8004dfa <I2C_RequestMemoryRead+0xce>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dc4:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dc6:	4642      	mov	r2, r8
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dc8:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dca:	4639      	mov	r1, r7
 8004dcc:	4620      	mov	r0, r4
 8004dce:	f7ff ff2c 	bl	8004c2a <I2C_WaitOnTXEFlagUntilTimeout>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	2800      	cmp	r0, #0
 8004dd6:	d1e5      	bne.n	8004da4 <I2C_RequestMemoryRead+0x78>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dd8:	6821      	ldr	r1, [r4, #0]
 8004dda:	680b      	ldr	r3, [r1, #0]
 8004ddc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004de0:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004de2:	4620      	mov	r0, r4
 8004de4:	f8cd 8000 	str.w	r8, [sp]
 8004de8:	463b      	mov	r3, r7
 8004dea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004dee:	f7ff feaf 	bl	8004b50 <I2C_WaitOnFlagUntilTimeout>
 8004df2:	6822      	ldr	r2, [r4, #0]
 8004df4:	b160      	cbz	r0, 8004e10 <I2C_RequestMemoryRead+0xe4>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004df6:	6813      	ldr	r3, [r2, #0]
 8004df8:	e7b4      	b.n	8004d64 <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004dfa:	0a2a      	lsrs	r2, r5, #8
 8004dfc:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dfe:	4639      	mov	r1, r7
 8004e00:	4642      	mov	r2, r8
 8004e02:	4620      	mov	r0, r4
 8004e04:	f7ff ff11 	bl	8004c2a <I2C_WaitOnTXEFlagUntilTimeout>
 8004e08:	2800      	cmp	r0, #0
 8004e0a:	d1cb      	bne.n	8004da4 <I2C_RequestMemoryRead+0x78>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e0c:	6823      	ldr	r3, [r4, #0]
 8004e0e:	e7d9      	b.n	8004dc4 <I2C_RequestMemoryRead+0x98>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e10:	f049 0301 	orr.w	r3, r9, #1
 8004e14:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e16:	4905      	ldr	r1, [pc, #20]	@ (8004e2c <I2C_RequestMemoryRead+0x100>)
 8004e18:	4643      	mov	r3, r8
 8004e1a:	463a      	mov	r2, r7
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	f7ff fec9 	bl	8004bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e22:	3800      	subs	r0, #0
 8004e24:	bf18      	it	ne
 8004e26:	2001      	movne	r0, #1
 8004e28:	e7c5      	b.n	8004db6 <I2C_RequestMemoryRead+0x8a>
 8004e2a:	bf00      	nop
 8004e2c:	00010002 	.word	0x00010002

08004e30 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8004e30:	b570      	push	{r4, r5, r6, lr}
 8004e32:	4604      	mov	r4, r0
 8004e34:	460d      	mov	r5, r1
 8004e36:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e38:	6823      	ldr	r3, [r4, #0]
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	075b      	lsls	r3, r3, #29
 8004e3e:	d501      	bpl.n	8004e44 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8004e40:	2000      	movs	r0, #0
 8004e42:	e01a      	b.n	8004e7a <I2C_WaitOnBTFFlagUntilTimeout+0x4a>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e44:	4620      	mov	r0, r4
 8004e46:	f7ff fe69 	bl	8004b1c <I2C_IsAcknowledgeFailed>
 8004e4a:	b9a8      	cbnz	r0, 8004e78 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8004e4c:	1c6a      	adds	r2, r5, #1
 8004e4e:	d0f3      	beq.n	8004e38 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e50:	f7ff f9d0 	bl	80041f4 <HAL_GetTick>
 8004e54:	1b80      	subs	r0, r0, r6
 8004e56:	42a8      	cmp	r0, r5
 8004e58:	d801      	bhi.n	8004e5e <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8004e5a:	2d00      	cmp	r5, #0
 8004e5c:	d1ec      	bne.n	8004e38 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e5e:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e60:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e62:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e64:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e68:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e6c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004e6e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e72:	f042 0220 	orr.w	r2, r2, #32
 8004e76:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8004e78:	2001      	movs	r0, #1
}
 8004e7a:	bd70      	pop	{r4, r5, r6, pc}

08004e7c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8004e7c:	b570      	push	{r4, r5, r6, lr}
 8004e7e:	4604      	mov	r4, r0
 8004e80:	460d      	mov	r5, r1
 8004e82:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e84:	6821      	ldr	r1, [r4, #0]
 8004e86:	694b      	ldr	r3, [r1, #20]
 8004e88:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 8004e8c:	d001      	beq.n	8004e92 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8004e8e:	2000      	movs	r0, #0
 8004e90:	e011      	b.n	8004eb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e92:	694a      	ldr	r2, [r1, #20]
 8004e94:	06d2      	lsls	r2, r2, #27
 8004e96:	d50f      	bpl.n	8004eb8 <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e98:	f06f 0210 	mvn.w	r2, #16
 8004e9c:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e9e:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ea0:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ea2:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ea6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004eaa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004eac:	6423      	str	r3, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8004eae:	2300      	movs	r3, #0
 8004eb0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8004eb4:	2001      	movs	r0, #1
}
 8004eb6:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eb8:	f7ff f99c 	bl	80041f4 <HAL_GetTick>
 8004ebc:	1b80      	subs	r0, r0, r6
 8004ebe:	42a8      	cmp	r0, r5
 8004ec0:	d801      	bhi.n	8004ec6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004ec2:	2d00      	cmp	r5, #0
 8004ec4:	d1de      	bne.n	8004e84 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ec6:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ec8:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004eca:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ecc:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ed0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ed4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	e7e8      	b.n	8004eac <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
	...

08004edc <HAL_I2C_Init>:
{
 8004edc:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8004ede:	4604      	mov	r4, r0
 8004ee0:	b908      	cbnz	r0, 8004ee6 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8004ee2:	2001      	movs	r0, #1
}
 8004ee4:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ee6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004eea:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004eee:	b91b      	cbnz	r3, 8004ef8 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8004ef0:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8004ef4:	f7fc fe1a 	bl	8001b2c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ef8:	2324      	movs	r3, #36	@ 0x24
 8004efa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	f022 0201 	bic.w	r2, r2, #1
 8004f06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f16:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f18:	f000 fe70 	bl	8005bfc <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f1c:	4b3f      	ldr	r3, [pc, #252]	@ (800501c <HAL_I2C_Init+0x140>)
 8004f1e:	6865      	ldr	r5, [r4, #4]
 8004f20:	429d      	cmp	r5, r3
 8004f22:	bf94      	ite	ls
 8004f24:	4b3e      	ldrls	r3, [pc, #248]	@ (8005020 <HAL_I2C_Init+0x144>)
 8004f26:	4b3f      	ldrhi	r3, [pc, #252]	@ (8005024 <HAL_I2C_Init+0x148>)
 8004f28:	4298      	cmp	r0, r3
 8004f2a:	bf8c      	ite	hi
 8004f2c:	2300      	movhi	r3, #0
 8004f2e:	2301      	movls	r3, #1
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1d6      	bne.n	8004ee2 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f34:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f36:	4e39      	ldr	r6, [pc, #228]	@ (800501c <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f38:	6851      	ldr	r1, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8004f3a:	4b3b      	ldr	r3, [pc, #236]	@ (8005028 <HAL_I2C_Init+0x14c>)
 8004f3c:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f40:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8004f44:	4319      	orrs	r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f46:	42b5      	cmp	r5, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f48:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f4a:	bf88      	it	hi
 8004f4c:	f44f 7696 	movhi.w	r6, #300	@ 0x12c
 8004f50:	6a11      	ldr	r1, [r2, #32]
 8004f52:	bf88      	it	hi
 8004f54:	4373      	mulhi	r3, r6
 8004f56:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8004f5a:	bf84      	itt	hi
 8004f5c:	f44f 767a 	movhi.w	r6, #1000	@ 0x3e8
 8004f60:	fbb3 f3f6 	udivhi	r3, r3, r6
 8004f64:	3301      	adds	r3, #1
 8004f66:	430b      	orrs	r3, r1
 8004f68:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f6a:	69d1      	ldr	r1, [r2, #28]
 8004f6c:	1e43      	subs	r3, r0, #1
 8004f6e:	482b      	ldr	r0, [pc, #172]	@ (800501c <HAL_I2C_Init+0x140>)
 8004f70:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8004f74:	4285      	cmp	r5, r0
 8004f76:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8004f7a:	d832      	bhi.n	8004fe2 <HAL_I2C_Init+0x106>
 8004f7c:	006d      	lsls	r5, r5, #1
 8004f7e:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8004f82:	fbb3 f3f5 	udiv	r3, r3, r5
 8004f86:	3301      	adds	r3, #1
 8004f88:	4203      	tst	r3, r0
 8004f8a:	d042      	beq.n	8005012 <HAL_I2C_Init+0x136>
 8004f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f90:	4319      	orrs	r1, r3
 8004f92:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004f94:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8004f98:	6811      	ldr	r1, [r2, #0]
 8004f9a:	4303      	orrs	r3, r0
 8004f9c:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 8004fa0:	430b      	orrs	r3, r1
 8004fa2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004fa4:	6891      	ldr	r1, [r2, #8]
 8004fa6:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8004faa:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 8004fae:	4303      	orrs	r3, r0
 8004fb0:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8004fb4:	430b      	orrs	r3, r1
 8004fb6:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004fb8:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8004fbc:	68d1      	ldr	r1, [r2, #12]
 8004fbe:	4303      	orrs	r3, r0
 8004fc0:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8004fc4:	430b      	orrs	r3, r1
 8004fc6:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8004fc8:	6813      	ldr	r3, [r2, #0]
 8004fca:	f043 0301 	orr.w	r3, r3, #1
 8004fce:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fd0:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8004fd2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fd4:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004fd6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fda:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fdc:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  return HAL_OK;
 8004fe0:	e780      	b.n	8004ee4 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004fe2:	68a0      	ldr	r0, [r4, #8]
 8004fe4:	b950      	cbnz	r0, 8004ffc <HAL_I2C_Init+0x120>
 8004fe6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004fea:	fbb3 f3f5 	udiv	r3, r3, r5
 8004fee:	3301      	adds	r3, #1
 8004ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ff4:	b17b      	cbz	r3, 8005016 <HAL_I2C_Init+0x13a>
 8004ff6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ffa:	e7c9      	b.n	8004f90 <HAL_I2C_Init+0xb4>
 8004ffc:	2019      	movs	r0, #25
 8004ffe:	4368      	muls	r0, r5
 8005000:	fbb3 f3f0 	udiv	r3, r3, r0
 8005004:	3301      	adds	r3, #1
 8005006:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800500a:	b123      	cbz	r3, 8005016 <HAL_I2C_Init+0x13a>
 800500c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005010:	e7be      	b.n	8004f90 <HAL_I2C_Init+0xb4>
 8005012:	2304      	movs	r3, #4
 8005014:	e7bc      	b.n	8004f90 <HAL_I2C_Init+0xb4>
 8005016:	2301      	movs	r3, #1
 8005018:	e7ba      	b.n	8004f90 <HAL_I2C_Init+0xb4>
 800501a:	bf00      	nop
 800501c:	000186a0 	.word	0x000186a0
 8005020:	001e847f 	.word	0x001e847f
 8005024:	003d08ff 	.word	0x003d08ff
 8005028:	000f4240 	.word	0x000f4240

0800502c <HAL_I2C_Mem_Write>:
{
 800502c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005030:	4604      	mov	r4, r0
 8005032:	4699      	mov	r9, r3
 8005034:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005036:	460f      	mov	r7, r1
 8005038:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800503a:	f7ff f8db 	bl	80041f4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800503e:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8005042:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8005044:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005046:	d003      	beq.n	8005050 <HAL_I2C_Mem_Write+0x24>
      return HAL_BUSY;
 8005048:	2002      	movs	r0, #2
}
 800504a:	b003      	add	sp, #12
 800504c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005050:	9000      	str	r0, [sp, #0]
 8005052:	493c      	ldr	r1, [pc, #240]	@ (8005144 <HAL_I2C_Mem_Write+0x118>)
 8005054:	2319      	movs	r3, #25
 8005056:	2201      	movs	r2, #1
 8005058:	4620      	mov	r0, r4
 800505a:	f7ff fd79 	bl	8004b50 <I2C_WaitOnFlagUntilTimeout>
 800505e:	2800      	cmp	r0, #0
 8005060:	d1f2      	bne.n	8005048 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8005062:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8005066:	2b01      	cmp	r3, #1
 8005068:	d0ee      	beq.n	8005048 <HAL_I2C_Mem_Write+0x1c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800506a:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 800506c:	2301      	movs	r3, #1
 800506e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005072:	6803      	ldr	r3, [r0, #0]
 8005074:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8005076:	bf5e      	ittt	pl
 8005078:	6803      	ldrpl	r3, [r0, #0]
 800507a:	f043 0301 	orrpl.w	r3, r3, #1
 800507e:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005080:	6803      	ldr	r3, [r0, #0]
 8005082:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005086:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005088:	2321      	movs	r3, #33	@ 0x21
 800508a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800508e:	2340      	movs	r3, #64	@ 0x40
 8005090:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005094:	2300      	movs	r3, #0
 8005096:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8005098:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800509a:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800509c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80050a0:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050a2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80050a4:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050a6:	4b28      	ldr	r3, [pc, #160]	@ (8005148 <HAL_I2C_Mem_Write+0x11c>)
 80050a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050aa:	4642      	mov	r2, r8
 80050ac:	e9cd 6500 	strd	r6, r5, [sp]
 80050b0:	464b      	mov	r3, r9
 80050b2:	4639      	mov	r1, r7
 80050b4:	4620      	mov	r0, r4
 80050b6:	f7ff fddf 	bl	8004c78 <I2C_RequestMemoryWrite>
 80050ba:	2800      	cmp	r0, #0
 80050bc:	d02a      	beq.n	8005114 <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 80050be:	2001      	movs	r0, #1
 80050c0:	e7c3      	b.n	800504a <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050c2:	f7ff fdb2 	bl	8004c2a <I2C_WaitOnTXEFlagUntilTimeout>
 80050c6:	b140      	cbz	r0, 80050da <HAL_I2C_Mem_Write+0xae>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80050ca:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050cc:	bf01      	itttt	eq
 80050ce:	6822      	ldreq	r2, [r4, #0]
 80050d0:	6813      	ldreq	r3, [r2, #0]
 80050d2:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 80050d6:	6013      	streq	r3, [r2, #0]
 80050d8:	e7f1      	b.n	80050be <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050da:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80050dc:	6827      	ldr	r7, [r4, #0]
 80050de:	461a      	mov	r2, r3
 80050e0:	f812 1b01 	ldrb.w	r1, [r2], #1
 80050e4:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 80050e6:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80050e8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80050ea:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80050ec:	3a01      	subs	r2, #1
 80050ee:	b292      	uxth	r2, r2
 80050f0:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80050f2:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 80050f4:	1e48      	subs	r0, r1, #1
 80050f6:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80050f8:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 80050fa:	8520      	strh	r0, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80050fc:	d50a      	bpl.n	8005114 <HAL_I2C_Mem_Write+0xe8>
 80050fe:	b148      	cbz	r0, 8005114 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005100:	785a      	ldrb	r2, [r3, #1]
 8005102:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8005104:	3302      	adds	r3, #2
 8005106:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8005108:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800510a:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 800510c:	3902      	subs	r1, #2
        hi2c->XferCount--;
 800510e:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8005110:	8521      	strh	r1, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8005112:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005114:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005116:	462a      	mov	r2, r5
 8005118:	4631      	mov	r1, r6
 800511a:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1d0      	bne.n	80050c2 <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005120:	f7ff fe86 	bl	8004e30 <I2C_WaitOnBTFFlagUntilTimeout>
 8005124:	2800      	cmp	r0, #0
 8005126:	d1cf      	bne.n	80050c8 <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005128:	6822      	ldr	r2, [r4, #0]
 800512a:	6813      	ldr	r3, [r2, #0]
 800512c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005130:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005132:	2320      	movs	r3, #32
 8005134:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 8005138:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800513c:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
    return HAL_OK;
 8005140:	e783      	b.n	800504a <HAL_I2C_Mem_Write+0x1e>
 8005142:	bf00      	nop
 8005144:	00100002 	.word	0x00100002
 8005148:	ffff0000 	.word	0xffff0000

0800514c <HAL_I2C_Mem_Read>:
{
 800514c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005150:	4604      	mov	r4, r0
 8005152:	b087      	sub	sp, #28
 8005154:	4699      	mov	r9, r3
 8005156:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8005158:	460d      	mov	r5, r1
 800515a:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800515c:	f7ff f84a 	bl	80041f4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005160:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8005164:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8005166:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005168:	d004      	beq.n	8005174 <HAL_I2C_Mem_Read+0x28>
      return HAL_BUSY;
 800516a:	2502      	movs	r5, #2
}
 800516c:	4628      	mov	r0, r5
 800516e:	b007      	add	sp, #28
 8005170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005174:	9000      	str	r0, [sp, #0]
 8005176:	4976      	ldr	r1, [pc, #472]	@ (8005350 <HAL_I2C_Mem_Read+0x204>)
 8005178:	2319      	movs	r3, #25
 800517a:	2201      	movs	r2, #1
 800517c:	4620      	mov	r0, r4
 800517e:	f7ff fce7 	bl	8004b50 <I2C_WaitOnFlagUntilTimeout>
 8005182:	2800      	cmp	r0, #0
 8005184:	d1f1      	bne.n	800516a <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8005186:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 800518a:	2b01      	cmp	r3, #1
 800518c:	d0ed      	beq.n	800516a <HAL_I2C_Mem_Read+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800518e:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8005190:	2301      	movs	r3, #1
 8005192:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005196:	6803      	ldr	r3, [r0, #0]
 8005198:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800519a:	bf5e      	ittt	pl
 800519c:	6803      	ldrpl	r3, [r0, #0]
 800519e:	f043 0301 	orrpl.w	r3, r3, #1
 80051a2:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051a4:	6803      	ldr	r3, [r0, #0]
 80051a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051aa:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80051ac:	2322      	movs	r3, #34	@ 0x22
 80051ae:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80051b2:	2340      	movs	r3, #64	@ 0x40
 80051b4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051b8:	2300      	movs	r3, #0
 80051ba:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 80051bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80051be:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80051c0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 80051c4:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051c6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80051c8:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051ca:	4b62      	ldr	r3, [pc, #392]	@ (8005354 <HAL_I2C_Mem_Read+0x208>)
 80051cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051ce:	4629      	mov	r1, r5
 80051d0:	e9cd 7600 	strd	r7, r6, [sp]
 80051d4:	464b      	mov	r3, r9
 80051d6:	4642      	mov	r2, r8
 80051d8:	4620      	mov	r0, r4
 80051da:	f7ff fda7 	bl	8004d2c <I2C_RequestMemoryRead>
 80051de:	4605      	mov	r5, r0
 80051e0:	b108      	cbz	r0, 80051e6 <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 80051e2:	2501      	movs	r5, #1
 80051e4:	e7c2      	b.n	800516c <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 80051e6:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051e8:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 80051ea:	b9b2      	cbnz	r2, 800521a <HAL_I2C_Mem_Read+0xce>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ec:	9002      	str	r0, [sp, #8]
 80051ee:	695a      	ldr	r2, [r3, #20]
 80051f0:	9202      	str	r2, [sp, #8]
 80051f2:	699a      	ldr	r2, [r3, #24]
 80051f4:	9202      	str	r2, [sp, #8]
 80051f6:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051fe:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005200:	f8df 8154 	ldr.w	r8, [pc, #340]	@ 8005358 <HAL_I2C_Mem_Read+0x20c>
    while (hi2c->XferSize > 0U)
 8005204:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8005206:	2b00      	cmp	r3, #0
 8005208:	d12c      	bne.n	8005264 <HAL_I2C_Mem_Read+0x118>
    hi2c->State = HAL_I2C_STATE_READY;
 800520a:	2220      	movs	r2, #32
 800520c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 8005210:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005214:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 8005218:	e7a8      	b.n	800516c <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 800521a:	2a01      	cmp	r2, #1
 800521c:	d10a      	bne.n	8005234 <HAL_I2C_Mem_Read+0xe8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005224:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005226:	9003      	str	r0, [sp, #12]
 8005228:	695a      	ldr	r2, [r3, #20]
 800522a:	9203      	str	r2, [sp, #12]
 800522c:	699a      	ldr	r2, [r3, #24]
 800522e:	9203      	str	r2, [sp, #12]
 8005230:	9a03      	ldr	r2, [sp, #12]
 8005232:	e7e1      	b.n	80051f8 <HAL_I2C_Mem_Read+0xac>
    else if (hi2c->XferSize == 2U)
 8005234:	2a02      	cmp	r2, #2
 8005236:	d10e      	bne.n	8005256 <HAL_I2C_Mem_Read+0x10a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800523e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005246:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005248:	9004      	str	r0, [sp, #16]
 800524a:	695a      	ldr	r2, [r3, #20]
 800524c:	9204      	str	r2, [sp, #16]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	9304      	str	r3, [sp, #16]
 8005252:	9b04      	ldr	r3, [sp, #16]
 8005254:	e7d4      	b.n	8005200 <HAL_I2C_Mem_Read+0xb4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005256:	9005      	str	r0, [sp, #20]
 8005258:	695a      	ldr	r2, [r3, #20]
 800525a:	9205      	str	r2, [sp, #20]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	9305      	str	r3, [sp, #20]
 8005260:	9b05      	ldr	r3, [sp, #20]
 8005262:	e7cd      	b.n	8005200 <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 8005264:	2b03      	cmp	r3, #3
 8005266:	d856      	bhi.n	8005316 <HAL_I2C_Mem_Read+0x1ca>
        if (hi2c->XferSize == 1U)
 8005268:	2b01      	cmp	r3, #1
 800526a:	d115      	bne.n	8005298 <HAL_I2C_Mem_Read+0x14c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800526c:	4632      	mov	r2, r6
 800526e:	4639      	mov	r1, r7
 8005270:	4620      	mov	r0, r4
 8005272:	f7ff fe03 	bl	8004e7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005276:	2800      	cmp	r0, #0
 8005278:	d1b3      	bne.n	80051e2 <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800527a:	6823      	ldr	r3, [r4, #0]
 800527c:	691a      	ldr	r2, [r3, #16]
 800527e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005280:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005282:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005284:	3301      	adds	r3, #1
 8005286:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8005288:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800528a:	3b01      	subs	r3, #1
 800528c:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800528e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005290:	3b01      	subs	r3, #1
 8005292:	b29b      	uxth	r3, r3
 8005294:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8005296:	e7b5      	b.n	8005204 <HAL_I2C_Mem_Read+0xb8>
        else if (hi2c->XferSize == 2U)
 8005298:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800529a:	9600      	str	r6, [sp, #0]
 800529c:	463b      	mov	r3, r7
 800529e:	f04f 0200 	mov.w	r2, #0
 80052a2:	4641      	mov	r1, r8
 80052a4:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 80052a6:	d119      	bne.n	80052dc <HAL_I2C_Mem_Read+0x190>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052a8:	f7ff fc52 	bl	8004b50 <I2C_WaitOnFlagUntilTimeout>
 80052ac:	2800      	cmp	r0, #0
 80052ae:	d198      	bne.n	80051e2 <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052b0:	6823      	ldr	r3, [r4, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052b8:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ba:	691a      	ldr	r2, [r3, #16]
 80052bc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80052be:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80052c0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80052c2:	1c53      	adds	r3, r2, #1
 80052c4:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80052c6:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80052c8:	3b01      	subs	r3, #1
 80052ca:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80052cc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80052ce:	3b01      	subs	r3, #1
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052d4:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	7053      	strb	r3, [r2, #1]
 80052da:	e7d2      	b.n	8005282 <HAL_I2C_Mem_Read+0x136>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052dc:	f7ff fc38 	bl	8004b50 <I2C_WaitOnFlagUntilTimeout>
 80052e0:	4602      	mov	r2, r0
 80052e2:	2800      	cmp	r0, #0
 80052e4:	f47f af7d 	bne.w	80051e2 <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052e8:	6823      	ldr	r3, [r4, #0]
 80052ea:	6819      	ldr	r1, [r3, #0]
 80052ec:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 80052f0:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052f2:	6919      	ldr	r1, [r3, #16]
 80052f4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80052f6:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 80052f8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80052fa:	3301      	adds	r3, #1
 80052fc:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80052fe:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8005300:	3b01      	subs	r3, #1
 8005302:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8005304:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005306:	3b01      	subs	r3, #1
 8005308:	b29b      	uxth	r3, r3
 800530a:	8563      	strh	r3, [r4, #42]	@ 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800530c:	4641      	mov	r1, r8
 800530e:	9600      	str	r6, [sp, #0]
 8005310:	463b      	mov	r3, r7
 8005312:	4620      	mov	r0, r4
 8005314:	e7c8      	b.n	80052a8 <HAL_I2C_Mem_Read+0x15c>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005316:	4632      	mov	r2, r6
 8005318:	4639      	mov	r1, r7
 800531a:	4620      	mov	r0, r4
 800531c:	f7ff fdae 	bl	8004e7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005320:	2800      	cmp	r0, #0
 8005322:	f47f af5e 	bne.w	80051e2 <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005326:	6823      	ldr	r3, [r4, #0]
 8005328:	691a      	ldr	r2, [r3, #16]
 800532a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800532c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800532e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005330:	1c53      	adds	r3, r2, #1
 8005332:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8005334:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8005336:	3b01      	subs	r3, #1
 8005338:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 800533a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800533c:	3b01      	subs	r3, #1
 800533e:	b29b      	uxth	r3, r3
 8005340:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005342:	6823      	ldr	r3, [r4, #0]
 8005344:	6959      	ldr	r1, [r3, #20]
 8005346:	0749      	lsls	r1, r1, #29
 8005348:	f57f af5c 	bpl.w	8005204 <HAL_I2C_Mem_Read+0xb8>
 800534c:	e7c3      	b.n	80052d6 <HAL_I2C_Mem_Read+0x18a>
 800534e:	bf00      	nop
 8005350:	00100002 	.word	0x00100002
 8005354:	ffff0000 	.word	0xffff0000
 8005358:	00010004 	.word	0x00010004

0800535c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800535c:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800535e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005362:	2b20      	cmp	r3, #32
 8005364:	b2dc      	uxtb	r4, r3
 8005366:	d116      	bne.n	8005396 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005368:	2324      	movs	r3, #36	@ 0x24
 800536a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800536e:	6803      	ldr	r3, [r0, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	f022 0201 	bic.w	r2, r2, #1
 8005376:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005378:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800537a:	f022 0210 	bic.w	r2, r2, #16
 800537e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005380:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005382:	4311      	orrs	r1, r2
 8005384:	6259      	str	r1, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	f042 0201 	orr.w	r2, r2, #1
 800538c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800538e:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d

    return HAL_OK;
 8005392:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005394:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8005396:	2002      	movs	r0, #2
 8005398:	e7fc      	b.n	8005394 <HAL_I2CEx_ConfigAnalogFilter+0x38>

0800539a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800539a:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800539c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80053a0:	2b20      	cmp	r3, #32
 80053a2:	b2dc      	uxtb	r4, r3
 80053a4:	d116      	bne.n	80053d4 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053a6:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 80053a8:	2324      	movs	r3, #36	@ 0x24
 80053aa:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    __HAL_I2C_DISABLE(hi2c);
 80053ae:	6813      	ldr	r3, [r2, #0]
 80053b0:	f023 0301 	bic.w	r3, r3, #1
 80053b4:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80053b6:	6a55      	ldr	r5, [r2, #36]	@ 0x24

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80053b8:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80053bc:	402b      	ands	r3, r5

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80053be:	430b      	orrs	r3, r1

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	6253      	str	r3, [r2, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80053c4:	6813      	ldr	r3, [r2, #0]
 80053c6:	f043 0301 	orr.w	r3, r3, #1
 80053ca:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053cc:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d

    return HAL_OK;
 80053d0:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80053d2:	bd30      	pop	{r4, r5, pc}
    return HAL_BUSY;
 80053d4:	2002      	movs	r0, #2
 80053d6:	e7fc      	b.n	80053d2 <HAL_I2CEx_ConfigDigitalFilter+0x38>

080053d8 <LTDC_SetConfig>:
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80053d8:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80053da:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80053de:	01d2      	lsls	r2, r2, #7
 80053e0:	3284      	adds	r2, #132	@ 0x84
 80053e2:	1883      	adds	r3, r0, r2
{
 80053e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80053e8:	68c6      	ldr	r6, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80053ea:	685d      	ldr	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80053ec:	684c      	ldr	r4, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80053ee:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80053f2:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 80053f6:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80053f8:	68c5      	ldr	r5, [r0, #12]
 80053fa:	f10c 0701 	add.w	r7, ip, #1
 80053fe:	f3c5 450b 	ubfx	r5, r5, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005402:	f3c6 460b 	ubfx	r6, r6, #16, #12
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005406:	443d      	add	r5, r7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005408:	4426      	add	r6, r4
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800540a:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800540e:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005410:	68c6      	ldr	r6, [r0, #12]
 8005412:	68cd      	ldr	r5, [r1, #12]
 8005414:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8005418:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800541a:	689d      	ldr	r5, [r3, #8]
 800541c:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 8005420:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005422:	68c7      	ldr	r7, [r0, #12]
 8005424:	688d      	ldr	r5, [r1, #8]
 8005426:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800542a:	3501      	adds	r5, #1
 800542c:	443d      	add	r5, r7
 800542e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8005432:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005434:	691d      	ldr	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005436:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005438:	f025 0507 	bic.w	r5, r5, #7
 800543c:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800543e:	f04f 0e00 	mov.w	lr, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005442:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005444:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005446:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800544a:	f891 8031 	ldrb.w	r8, [r1, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800544e:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005452:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 8005456:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800545a:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 800545e:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8005462:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005464:	695d      	ldr	r5, [r3, #20]
 8005466:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 800546a:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800546c:	694d      	ldr	r5, [r1, #20]
 800546e:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005470:	69dd      	ldr	r5, [r3, #28]
 8005472:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 8005476:	f025 0507 	bic.w	r5, r5, #7
 800547a:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800547c:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8005480:	433d      	orrs	r5, r7
 8005482:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005484:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005486:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005488:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800548c:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800548e:	b31e      	cbz	r6, 80054d8 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005490:	2e01      	cmp	r6, #1
 8005492:	d023      	beq.n	80054dc <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005494:	1eb5      	subs	r5, r6, #2
 8005496:	2d02      	cmp	r5, #2
 8005498:	d922      	bls.n	80054e0 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 800549a:	2e07      	cmp	r6, #7
 800549c:	bf14      	ite	ne
 800549e:	2501      	movne	r5, #1
 80054a0:	2502      	moveq	r5, #2
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80054a2:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
 80054a4:	f006 26e0 	and.w	r6, r6, #3758153728	@ 0xe000e000
 80054a8:	62de      	str	r6, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80054aa:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80054ae:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80054b0:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80054b2:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80054b4:	436e      	muls	r6, r5
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80054b6:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80054b8:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80054bc:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80054be:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80054c0:	f424 64ff 	bic.w	r4, r4, #2040	@ 0x7f8
 80054c4:	f024 0407 	bic.w	r4, r4, #7
 80054c8:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80054ca:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80054cc:	5883      	ldr	r3, [r0, r2]
 80054ce:	f043 0301 	orr.w	r3, r3, #1
 80054d2:	5083      	str	r3, [r0, r2]
}
 80054d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 80054d8:	2504      	movs	r5, #4
 80054da:	e7e2      	b.n	80054a2 <LTDC_SetConfig+0xca>
    tmp = 3U;
 80054dc:	2503      	movs	r5, #3
 80054de:	e7e0      	b.n	80054a2 <LTDC_SetConfig+0xca>
    tmp = 2U;
 80054e0:	2502      	movs	r5, #2
 80054e2:	e7de      	b.n	80054a2 <LTDC_SetConfig+0xca>

080054e4 <HAL_LTDC_Init>:
{
 80054e4:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 80054e6:	4604      	mov	r4, r0
 80054e8:	2800      	cmp	r0, #0
 80054ea:	d063      	beq.n	80055b4 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80054ec:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 80054f0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80054f4:	b91b      	cbnz	r3, 80054fe <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 80054f6:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 80054fa:	f7fc fb73 	bl	8001be4 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80054fe:	2302      	movs	r3, #2
 8005500:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005504:	6823      	ldr	r3, [r4, #0]
 8005506:	699a      	ldr	r2, [r3, #24]
 8005508:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800550c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800550e:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8005512:	4302      	orrs	r2, r0
 8005514:	68e0      	ldr	r0, [r4, #12]
 8005516:	6999      	ldr	r1, [r3, #24]
 8005518:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800551a:	6920      	ldr	r0, [r4, #16]
 800551c:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800551e:	430a      	orrs	r2, r1
 8005520:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005522:	689a      	ldr	r2, [r3, #8]
 8005524:	4924      	ldr	r1, [pc, #144]	@ (80055b8 <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005526:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005528:	400a      	ands	r2, r1
 800552a:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800552c:	689a      	ldr	r2, [r3, #8]
 800552e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005532:	69a0      	ldr	r0, [r4, #24]
 8005534:	4302      	orrs	r2, r0
 8005536:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005538:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800553a:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800553c:	400a      	ands	r2, r1
 800553e:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005540:	68da      	ldr	r2, [r3, #12]
 8005542:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005546:	6a20      	ldr	r0, [r4, #32]
 8005548:	4302      	orrs	r2, r0
 800554a:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800554c:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800554e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005550:	400a      	ands	r2, r1
 8005552:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005554:	691a      	ldr	r2, [r3, #16]
 8005556:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800555a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800555c:	4302      	orrs	r2, r0
 800555e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005560:	695a      	ldr	r2, [r3, #20]
 8005562:	400a      	ands	r2, r1
 8005564:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005566:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005568:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800556a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800556e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005570:	430a      	orrs	r2, r1
 8005572:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005576:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800557a:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800557e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005582:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005584:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8005586:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 800558a:	432a      	orrs	r2, r5
 800558c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005594:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005596:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005598:	f042 0206 	orr.w	r2, r2, #6
 800559c:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800559e:	699a      	ldr	r2, [r3, #24]
 80055a0:	f042 0201 	orr.w	r2, r2, #1
 80055a4:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80055a6:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 80055a8:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80055aa:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80055ae:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 80055b2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80055b4:	2001      	movs	r0, #1
 80055b6:	e7fc      	b.n	80055b2 <HAL_LTDC_Init+0xce>
 80055b8:	f000f800 	.word	0xf000f800

080055bc <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 80055bc:	4770      	bx	lr

080055be <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 80055be:	4770      	bx	lr

080055c0 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80055c0:	6803      	ldr	r3, [r0, #0]
{
 80055c2:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80055c4:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80055c6:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80055c8:	0772      	lsls	r2, r6, #29
{
 80055ca:	4604      	mov	r4, r0
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80055cc:	d514      	bpl.n	80055f8 <HAL_LTDC_IRQHandler+0x38>
 80055ce:	0769      	lsls	r1, r5, #29
 80055d0:	d512      	bpl.n	80055f8 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80055d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055d4:	f022 0204 	bic.w	r2, r2, #4
 80055d8:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80055da:	2204      	movs	r2, #4
 80055dc:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80055de:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 80055e2:	f043 0301 	orr.w	r3, r3, #1
 80055e6:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 80055ea:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80055ec:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 80055f0:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80055f4:	f7ff ffe2 	bl	80055bc <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80055f8:	07b2      	lsls	r2, r6, #30
 80055fa:	d516      	bpl.n	800562a <HAL_LTDC_IRQHandler+0x6a>
 80055fc:	07ab      	lsls	r3, r5, #30
 80055fe:	d514      	bpl.n	800562a <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005600:	6823      	ldr	r3, [r4, #0]
 8005602:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005604:	f022 0202 	bic.w	r2, r2, #2
 8005608:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800560a:	2202      	movs	r2, #2
 800560c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800560e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8005612:	4313      	orrs	r3, r2
 8005614:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005618:	2304      	movs	r3, #4
 800561a:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800561e:	2300      	movs	r3, #0
 8005620:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8005624:	4620      	mov	r0, r4
 8005626:	f7ff ffc9 	bl	80055bc <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800562a:	07f0      	lsls	r0, r6, #31
 800562c:	d510      	bpl.n	8005650 <HAL_LTDC_IRQHandler+0x90>
 800562e:	07e9      	lsls	r1, r5, #31
 8005630:	d50e      	bpl.n	8005650 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005632:	6823      	ldr	r3, [r4, #0]
 8005634:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005636:	f022 0201 	bic.w	r2, r2, #1
 800563a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800563c:	2201      	movs	r2, #1
 800563e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 8005640:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8005642:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8005646:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800564a:	4620      	mov	r0, r4
 800564c:	f7fb fdd4 	bl	80011f8 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005650:	0732      	lsls	r2, r6, #28
 8005652:	d511      	bpl.n	8005678 <HAL_LTDC_IRQHandler+0xb8>
 8005654:	072b      	lsls	r3, r5, #28
 8005656:	d50f      	bpl.n	8005678 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005658:	6823      	ldr	r3, [r4, #0]
 800565a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800565c:	f022 0208 	bic.w	r2, r2, #8
 8005660:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005662:	2208      	movs	r2, #8
 8005664:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8005666:	2301      	movs	r3, #1
 8005668:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800566c:	2300      	movs	r3, #0
 800566e:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005672:	4620      	mov	r0, r4
 8005674:	f7ff ffa3 	bl	80055be <HAL_LTDC_ReloadEventCallback>
}
 8005678:	bd70      	pop	{r4, r5, r6, pc}

0800567a <HAL_LTDC_ConfigLayer>:
{
 800567a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 800567e:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 8005682:	2b01      	cmp	r3, #1
{
 8005684:	4606      	mov	r6, r0
 8005686:	460f      	mov	r7, r1
 8005688:	4694      	mov	ip, r2
 800568a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 800568e:	d01f      	beq.n	80056d0 <HAL_LTDC_ConfigLayer+0x56>
 8005690:	f04f 0801 	mov.w	r8, #1
 8005694:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005698:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800569c:	2434      	movs	r4, #52	@ 0x34
 800569e:	460d      	mov	r5, r1
 80056a0:	fb04 6402 	mla	r4, r4, r2, r6
 80056a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056a6:	3438      	adds	r4, #56	@ 0x38
 80056a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80056b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80056b2:	682b      	ldr	r3, [r5, #0]
 80056b4:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80056b6:	4630      	mov	r0, r6
 80056b8:	4662      	mov	r2, ip
 80056ba:	4639      	mov	r1, r7
 80056bc:	f7ff fe8c 	bl	80053d8 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80056c0:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 80056c2:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80056c4:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80056c8:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 80056cc:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 80056d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080056d4 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 80056d4:	f890 20a0 	ldrb.w	r2, [r0, #160]	@ 0xa0
 80056d8:	2a01      	cmp	r2, #1
{
 80056da:	4603      	mov	r3, r0
 80056dc:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 80056e0:	d012      	beq.n	8005708 <HAL_LTDC_ProgramLineEvent+0x34>
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80056e2:	681a      	ldr	r2, [r3, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80056e4:	f883 00a1 	strb.w	r0, [r3, #161]	@ 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80056e8:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 80056ea:	f020 0001 	bic.w	r0, r0, #1
 80056ee:	6350      	str	r0, [r2, #52]	@ 0x34
  LTDC->LIPCR = (uint32_t)Line;
 80056f0:	4806      	ldr	r0, [pc, #24]	@ (800570c <HAL_LTDC_ProgramLineEvent+0x38>)
 80056f2:	6401      	str	r1, [r0, #64]	@ 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80056f4:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 80056f6:	f041 0101 	orr.w	r1, r1, #1
 80056fa:	6351      	str	r1, [r2, #52]	@ 0x34
  __HAL_UNLOCK(hltdc);
 80056fc:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8005704:	f883 00a0 	strb.w	r0, [r3, #160]	@ 0xa0
}
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	40016800 	.word	0x40016800

08005710 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005710:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005714:	4604      	mov	r4, r0
 8005716:	b340      	cbz	r0, 800576a <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005718:	6803      	ldr	r3, [r0, #0]
 800571a:	07de      	lsls	r6, r3, #31
 800571c:	d410      	bmi.n	8005740 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800571e:	6823      	ldr	r3, [r4, #0]
 8005720:	079d      	lsls	r5, r3, #30
 8005722:	d45b      	bmi.n	80057dc <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005724:	6823      	ldr	r3, [r4, #0]
 8005726:	0719      	lsls	r1, r3, #28
 8005728:	f100 809d 	bmi.w	8005866 <HAL_RCC_OscConfig+0x156>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800572c:	6823      	ldr	r3, [r4, #0]
 800572e:	075a      	lsls	r2, r3, #29
 8005730:	f100 80bd 	bmi.w	80058ae <HAL_RCC_OscConfig+0x19e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005734:	69a3      	ldr	r3, [r4, #24]
 8005736:	2b00      	cmp	r3, #0
 8005738:	f040 8124 	bne.w	8005984 <HAL_RCC_OscConfig+0x274>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800573c:	2000      	movs	r0, #0
 800573e:	e02c      	b.n	800579a <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005740:	4b8d      	ldr	r3, [pc, #564]	@ (8005978 <HAL_RCC_OscConfig+0x268>)
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	f002 020c 	and.w	r2, r2, #12
 8005748:	2a04      	cmp	r2, #4
 800574a:	d007      	beq.n	800575c <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800574c:	689a      	ldr	r2, [r3, #8]
 800574e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005752:	2a08      	cmp	r2, #8
 8005754:	d10b      	bne.n	800576e <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	0259      	lsls	r1, r3, #9
 800575a:	d508      	bpl.n	800576e <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800575c:	4b86      	ldr	r3, [pc, #536]	@ (8005978 <HAL_RCC_OscConfig+0x268>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	039a      	lsls	r2, r3, #14
 8005762:	d5dc      	bpl.n	800571e <HAL_RCC_OscConfig+0xe>
 8005764:	6863      	ldr	r3, [r4, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1d9      	bne.n	800571e <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 800576a:	2001      	movs	r0, #1
 800576c:	e015      	b.n	800579a <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800576e:	6863      	ldr	r3, [r4, #4]
 8005770:	4d81      	ldr	r5, [pc, #516]	@ (8005978 <HAL_RCC_OscConfig+0x268>)
 8005772:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005776:	d113      	bne.n	80057a0 <HAL_RCC_OscConfig+0x90>
 8005778:	682b      	ldr	r3, [r5, #0]
 800577a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800577e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005780:	f7fe fd38 	bl	80041f4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005784:	4e7c      	ldr	r6, [pc, #496]	@ (8005978 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8005786:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005788:	6833      	ldr	r3, [r6, #0]
 800578a:	039b      	lsls	r3, r3, #14
 800578c:	d4c7      	bmi.n	800571e <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800578e:	f7fe fd31 	bl	80041f4 <HAL_GetTick>
 8005792:	1b40      	subs	r0, r0, r5
 8005794:	2864      	cmp	r0, #100	@ 0x64
 8005796:	d9f7      	bls.n	8005788 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8005798:	2003      	movs	r0, #3
}
 800579a:	b002      	add	sp, #8
 800579c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80057a4:	d104      	bne.n	80057b0 <HAL_RCC_OscConfig+0xa0>
 80057a6:	682b      	ldr	r3, [r5, #0]
 80057a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057ac:	602b      	str	r3, [r5, #0]
 80057ae:	e7e3      	b.n	8005778 <HAL_RCC_OscConfig+0x68>
 80057b0:	682a      	ldr	r2, [r5, #0]
 80057b2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80057b6:	602a      	str	r2, [r5, #0]
 80057b8:	682a      	ldr	r2, [r5, #0]
 80057ba:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80057be:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1dd      	bne.n	8005780 <HAL_RCC_OscConfig+0x70>
        tickstart = HAL_GetTick();
 80057c4:	f7fe fd16 	bl	80041f4 <HAL_GetTick>
 80057c8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057ca:	682b      	ldr	r3, [r5, #0]
 80057cc:	039f      	lsls	r7, r3, #14
 80057ce:	d5a6      	bpl.n	800571e <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057d0:	f7fe fd10 	bl	80041f4 <HAL_GetTick>
 80057d4:	1b80      	subs	r0, r0, r6
 80057d6:	2864      	cmp	r0, #100	@ 0x64
 80057d8:	d9f7      	bls.n	80057ca <HAL_RCC_OscConfig+0xba>
 80057da:	e7dd      	b.n	8005798 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057dc:	4b66      	ldr	r3, [pc, #408]	@ (8005978 <HAL_RCC_OscConfig+0x268>)
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	f012 0f0c 	tst.w	r2, #12
 80057e4:	d007      	beq.n	80057f6 <HAL_RCC_OscConfig+0xe6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057e6:	689a      	ldr	r2, [r3, #8]
 80057e8:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057ec:	2a08      	cmp	r2, #8
 80057ee:	d111      	bne.n	8005814 <HAL_RCC_OscConfig+0x104>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	025d      	lsls	r5, r3, #9
 80057f4:	d40e      	bmi.n	8005814 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057f6:	4a60      	ldr	r2, [pc, #384]	@ (8005978 <HAL_RCC_OscConfig+0x268>)
 80057f8:	6813      	ldr	r3, [r2, #0]
 80057fa:	0799      	lsls	r1, r3, #30
 80057fc:	d502      	bpl.n	8005804 <HAL_RCC_OscConfig+0xf4>
 80057fe:	68e3      	ldr	r3, [r4, #12]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d1b2      	bne.n	800576a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005804:	6813      	ldr	r3, [r2, #0]
 8005806:	6921      	ldr	r1, [r4, #16]
 8005808:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800580c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005810:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005812:	e787      	b.n	8005724 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005814:	68e2      	ldr	r2, [r4, #12]
 8005816:	4b59      	ldr	r3, [pc, #356]	@ (800597c <HAL_RCC_OscConfig+0x26c>)
 8005818:	b1b2      	cbz	r2, 8005848 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_ENABLE();
 800581a:	2201      	movs	r2, #1
 800581c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800581e:	f7fe fce9 	bl	80041f4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005822:	4d55      	ldr	r5, [pc, #340]	@ (8005978 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8005824:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005826:	682b      	ldr	r3, [r5, #0]
 8005828:	079b      	lsls	r3, r3, #30
 800582a:	d507      	bpl.n	800583c <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800582c:	682b      	ldr	r3, [r5, #0]
 800582e:	6922      	ldr	r2, [r4, #16]
 8005830:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005834:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005838:	602b      	str	r3, [r5, #0]
 800583a:	e773      	b.n	8005724 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800583c:	f7fe fcda 	bl	80041f4 <HAL_GetTick>
 8005840:	1b80      	subs	r0, r0, r6
 8005842:	2802      	cmp	r0, #2
 8005844:	d9ef      	bls.n	8005826 <HAL_RCC_OscConfig+0x116>
 8005846:	e7a7      	b.n	8005798 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8005848:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800584a:	f7fe fcd3 	bl	80041f4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800584e:	4e4a      	ldr	r6, [pc, #296]	@ (8005978 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8005850:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005852:	6833      	ldr	r3, [r6, #0]
 8005854:	079f      	lsls	r7, r3, #30
 8005856:	f57f af65 	bpl.w	8005724 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800585a:	f7fe fccb 	bl	80041f4 <HAL_GetTick>
 800585e:	1b40      	subs	r0, r0, r5
 8005860:	2802      	cmp	r0, #2
 8005862:	d9f6      	bls.n	8005852 <HAL_RCC_OscConfig+0x142>
 8005864:	e798      	b.n	8005798 <HAL_RCC_OscConfig+0x88>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005866:	6962      	ldr	r2, [r4, #20]
 8005868:	4b44      	ldr	r3, [pc, #272]	@ (800597c <HAL_RCC_OscConfig+0x26c>)
 800586a:	b182      	cbz	r2, 800588e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 800586c:	2201      	movs	r2, #1
 800586e:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8005872:	f7fe fcbf 	bl	80041f4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005876:	4e40      	ldr	r6, [pc, #256]	@ (8005978 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8005878:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800587a:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 800587c:	079b      	lsls	r3, r3, #30
 800587e:	f53f af55 	bmi.w	800572c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005882:	f7fe fcb7 	bl	80041f4 <HAL_GetTick>
 8005886:	1b40      	subs	r0, r0, r5
 8005888:	2802      	cmp	r0, #2
 800588a:	d9f6      	bls.n	800587a <HAL_RCC_OscConfig+0x16a>
 800588c:	e784      	b.n	8005798 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 800588e:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8005892:	f7fe fcaf 	bl	80041f4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005896:	4e38      	ldr	r6, [pc, #224]	@ (8005978 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8005898:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800589a:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 800589c:	079f      	lsls	r7, r3, #30
 800589e:	f57f af45 	bpl.w	800572c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058a2:	f7fe fca7 	bl	80041f4 <HAL_GetTick>
 80058a6:	1b40      	subs	r0, r0, r5
 80058a8:	2802      	cmp	r0, #2
 80058aa:	d9f6      	bls.n	800589a <HAL_RCC_OscConfig+0x18a>
 80058ac:	e774      	b.n	8005798 <HAL_RCC_OscConfig+0x88>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058ae:	4b32      	ldr	r3, [pc, #200]	@ (8005978 <HAL_RCC_OscConfig+0x268>)
 80058b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058b2:	f012 5280 	ands.w	r2, r2, #268435456	@ 0x10000000
 80058b6:	d128      	bne.n	800590a <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_PWR_CLK_ENABLE();
 80058b8:	9201      	str	r2, [sp, #4]
 80058ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058bc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80058c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80058c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058c8:	9301      	str	r3, [sp, #4]
 80058ca:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80058cc:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058ce:	4d2c      	ldr	r5, [pc, #176]	@ (8005980 <HAL_RCC_OscConfig+0x270>)
 80058d0:	682b      	ldr	r3, [r5, #0]
 80058d2:	05d8      	lsls	r0, r3, #23
 80058d4:	d51b      	bpl.n	800590e <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058d6:	68a3      	ldr	r3, [r4, #8]
 80058d8:	4d27      	ldr	r5, [pc, #156]	@ (8005978 <HAL_RCC_OscConfig+0x268>)
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d127      	bne.n	800592e <HAL_RCC_OscConfig+0x21e>
 80058de:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80058e0:	f043 0301 	orr.w	r3, r3, #1
 80058e4:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80058e6:	f7fe fc85 	bl	80041f4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058ea:	4e23      	ldr	r6, [pc, #140]	@ (8005978 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 80058ec:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058ee:	f241 3888 	movw	r8, #5000	@ 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058f2:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80058f4:	079a      	lsls	r2, r3, #30
 80058f6:	d539      	bpl.n	800596c <HAL_RCC_OscConfig+0x25c>
    if(pwrclkchanged == SET)
 80058f8:	2f00      	cmp	r7, #0
 80058fa:	f43f af1b 	beq.w	8005734 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80058fe:	4a1e      	ldr	r2, [pc, #120]	@ (8005978 <HAL_RCC_OscConfig+0x268>)
 8005900:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005902:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005906:	6413      	str	r3, [r2, #64]	@ 0x40
 8005908:	e714      	b.n	8005734 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 800590a:	2700      	movs	r7, #0
 800590c:	e7df      	b.n	80058ce <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800590e:	682b      	ldr	r3, [r5, #0]
 8005910:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005914:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8005916:	f7fe fc6d 	bl	80041f4 <HAL_GetTick>
 800591a:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800591c:	682b      	ldr	r3, [r5, #0]
 800591e:	05d9      	lsls	r1, r3, #23
 8005920:	d4d9      	bmi.n	80058d6 <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005922:	f7fe fc67 	bl	80041f4 <HAL_GetTick>
 8005926:	1b80      	subs	r0, r0, r6
 8005928:	2802      	cmp	r0, #2
 800592a:	d9f7      	bls.n	800591c <HAL_RCC_OscConfig+0x20c>
 800592c:	e734      	b.n	8005798 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800592e:	2b05      	cmp	r3, #5
 8005930:	d104      	bne.n	800593c <HAL_RCC_OscConfig+0x22c>
 8005932:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005934:	f043 0304 	orr.w	r3, r3, #4
 8005938:	672b      	str	r3, [r5, #112]	@ 0x70
 800593a:	e7d0      	b.n	80058de <HAL_RCC_OscConfig+0x1ce>
 800593c:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 800593e:	f022 0201 	bic.w	r2, r2, #1
 8005942:	672a      	str	r2, [r5, #112]	@ 0x70
 8005944:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 8005946:	f022 0204 	bic.w	r2, r2, #4
 800594a:	672a      	str	r2, [r5, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1ca      	bne.n	80058e6 <HAL_RCC_OscConfig+0x1d6>
      tickstart = HAL_GetTick();
 8005950:	f7fe fc50 	bl	80041f4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005954:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8005958:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800595a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800595c:	079b      	lsls	r3, r3, #30
 800595e:	d5cb      	bpl.n	80058f8 <HAL_RCC_OscConfig+0x1e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005960:	f7fe fc48 	bl	80041f4 <HAL_GetTick>
 8005964:	1b80      	subs	r0, r0, r6
 8005966:	4540      	cmp	r0, r8
 8005968:	d9f7      	bls.n	800595a <HAL_RCC_OscConfig+0x24a>
 800596a:	e715      	b.n	8005798 <HAL_RCC_OscConfig+0x88>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800596c:	f7fe fc42 	bl	80041f4 <HAL_GetTick>
 8005970:	1b40      	subs	r0, r0, r5
 8005972:	4540      	cmp	r0, r8
 8005974:	d9bd      	bls.n	80058f2 <HAL_RCC_OscConfig+0x1e2>
 8005976:	e70f      	b.n	8005798 <HAL_RCC_OscConfig+0x88>
 8005978:	40023800 	.word	0x40023800
 800597c:	42470000 	.word	0x42470000
 8005980:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005984:	4d37      	ldr	r5, [pc, #220]	@ (8005a64 <HAL_RCC_OscConfig+0x354>)
 8005986:	68aa      	ldr	r2, [r5, #8]
 8005988:	f002 020c 	and.w	r2, r2, #12
 800598c:	2a08      	cmp	r2, #8
 800598e:	d03e      	beq.n	8005a0e <HAL_RCC_OscConfig+0x2fe>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005990:	2b02      	cmp	r3, #2
 8005992:	4b35      	ldr	r3, [pc, #212]	@ (8005a68 <HAL_RCC_OscConfig+0x358>)
 8005994:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 8005998:	661a      	str	r2, [r3, #96]	@ 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800599a:	d12b      	bne.n	80059f4 <HAL_RCC_OscConfig+0x2e4>
        tickstart = HAL_GetTick();
 800599c:	f7fe fc2a 	bl	80041f4 <HAL_GetTick>
 80059a0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059a2:	682b      	ldr	r3, [r5, #0]
 80059a4:	0199      	lsls	r1, r3, #6
 80059a6:	d41f      	bmi.n	80059e8 <HAL_RCC_OscConfig+0x2d8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059a8:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80059b0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80059b4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80059b6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80059ba:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80059bc:	0852      	lsrs	r2, r2, #1
 80059be:	3a01      	subs	r2, #1
 80059c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059c4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80059c6:	4b28      	ldr	r3, [pc, #160]	@ (8005a68 <HAL_RCC_OscConfig+0x358>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059c8:	4d26      	ldr	r5, [pc, #152]	@ (8005a64 <HAL_RCC_OscConfig+0x354>)
        __HAL_RCC_PLL_ENABLE();
 80059ca:	2201      	movs	r2, #1
 80059cc:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80059ce:	f7fe fc11 	bl	80041f4 <HAL_GetTick>
 80059d2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059d4:	682b      	ldr	r3, [r5, #0]
 80059d6:	019a      	lsls	r2, r3, #6
 80059d8:	f53f aeb0 	bmi.w	800573c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059dc:	f7fe fc0a 	bl	80041f4 <HAL_GetTick>
 80059e0:	1b00      	subs	r0, r0, r4
 80059e2:	2802      	cmp	r0, #2
 80059e4:	d9f6      	bls.n	80059d4 <HAL_RCC_OscConfig+0x2c4>
 80059e6:	e6d7      	b.n	8005798 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059e8:	f7fe fc04 	bl	80041f4 <HAL_GetTick>
 80059ec:	1b80      	subs	r0, r0, r6
 80059ee:	2802      	cmp	r0, #2
 80059f0:	d9d7      	bls.n	80059a2 <HAL_RCC_OscConfig+0x292>
 80059f2:	e6d1      	b.n	8005798 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 80059f4:	f7fe fbfe 	bl	80041f4 <HAL_GetTick>
 80059f8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059fa:	682b      	ldr	r3, [r5, #0]
 80059fc:	019b      	lsls	r3, r3, #6
 80059fe:	f57f ae9d 	bpl.w	800573c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a02:	f7fe fbf7 	bl	80041f4 <HAL_GetTick>
 8005a06:	1b00      	subs	r0, r0, r4
 8005a08:	2802      	cmp	r0, #2
 8005a0a:	d9f6      	bls.n	80059fa <HAL_RCC_OscConfig+0x2ea>
 8005a0c:	e6c4      	b.n	8005798 <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	f43f aeab 	beq.w	800576a <HAL_RCC_OscConfig+0x5a>
        pll_config = RCC->PLLCFGR;
 8005a14:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a16:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a18:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a1c:	4291      	cmp	r1, r2
 8005a1e:	f47f aea4 	bne.w	800576a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a22:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a24:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a28:	428a      	cmp	r2, r1
 8005a2a:	f47f ae9e 	bne.w	800576a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a2e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a30:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8005a34:	401a      	ands	r2, r3
 8005a36:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8005a3a:	f47f ae96 	bne.w	800576a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a3e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8005a40:	0852      	lsrs	r2, r2, #1
 8005a42:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8005a46:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a48:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8005a4c:	f47f ae8d 	bne.w	800576a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a50:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005a52:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a56:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8005a5a:	bf14      	ite	ne
 8005a5c:	2001      	movne	r0, #1
 8005a5e:	2000      	moveq	r0, #0
 8005a60:	e69b      	b.n	800579a <HAL_RCC_OscConfig+0x8a>
 8005a62:	bf00      	nop
 8005a64:	40023800 	.word	0x40023800
 8005a68:	42470000 	.word	0x42470000

08005a6c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a6c:	4913      	ldr	r1, [pc, #76]	@ (8005abc <HAL_RCC_GetSysClockFreq+0x50>)
{
 8005a6e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a70:	688b      	ldr	r3, [r1, #8]
 8005a72:	f003 030c 	and.w	r3, r3, #12
 8005a76:	2b04      	cmp	r3, #4
 8005a78:	d01c      	beq.n	8005ab4 <HAL_RCC_GetSysClockFreq+0x48>
 8005a7a:	2b08      	cmp	r3, #8
 8005a7c:	d11c      	bne.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a7e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a80:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a82:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a84:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a88:	bf14      	ite	ne
 8005a8a:	480d      	ldrne	r0, [pc, #52]	@ (8005ac0 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a8c:	480d      	ldreq	r0, [pc, #52]	@ (8005ac4 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a8e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005a92:	bf18      	it	ne
 8005a94:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a96:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a9a:	fba1 0100 	umull	r0, r1, r1, r0
 8005a9e:	f7fa fbf7 	bl	8000290 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005aa2:	4b06      	ldr	r3, [pc, #24]	@ (8005abc <HAL_RCC_GetSysClockFreq+0x50>)
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8005aaa:	3301      	adds	r3, #1
 8005aac:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8005aae:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8005ab2:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ab4:	4802      	ldr	r0, [pc, #8]	@ (8005ac0 <HAL_RCC_GetSysClockFreq+0x54>)
 8005ab6:	e7fc      	b.n	8005ab2 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8005ab8:	4802      	ldr	r0, [pc, #8]	@ (8005ac4 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8005aba:	e7fa      	b.n	8005ab2 <HAL_RCC_GetSysClockFreq+0x46>
 8005abc:	40023800 	.word	0x40023800
 8005ac0:	007a1200 	.word	0x007a1200
 8005ac4:	00f42400 	.word	0x00f42400

08005ac8 <HAL_RCC_ClockConfig>:
{
 8005ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005acc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8005ace:	4604      	mov	r4, r0
 8005ad0:	b910      	cbnz	r0, 8005ad8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8005ad2:	2001      	movs	r0, #1
}
 8005ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ad8:	4b43      	ldr	r3, [pc, #268]	@ (8005be8 <HAL_RCC_ClockConfig+0x120>)
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	f002 020f 	and.w	r2, r2, #15
 8005ae0:	428a      	cmp	r2, r1
 8005ae2:	d328      	bcc.n	8005b36 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ae4:	6821      	ldr	r1, [r4, #0]
 8005ae6:	078f      	lsls	r7, r1, #30
 8005ae8:	d42d      	bmi.n	8005b46 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005aea:	07c8      	lsls	r0, r1, #31
 8005aec:	d440      	bmi.n	8005b70 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005aee:	4b3e      	ldr	r3, [pc, #248]	@ (8005be8 <HAL_RCC_ClockConfig+0x120>)
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	f002 020f 	and.w	r2, r2, #15
 8005af6:	42aa      	cmp	r2, r5
 8005af8:	d865      	bhi.n	8005bc6 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005afa:	6822      	ldr	r2, [r4, #0]
 8005afc:	0751      	lsls	r1, r2, #29
 8005afe:	d46b      	bmi.n	8005bd8 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b00:	0713      	lsls	r3, r2, #28
 8005b02:	d507      	bpl.n	8005b14 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b04:	4a39      	ldr	r2, [pc, #228]	@ (8005bec <HAL_RCC_ClockConfig+0x124>)
 8005b06:	6921      	ldr	r1, [r4, #16]
 8005b08:	6893      	ldr	r3, [r2, #8]
 8005b0a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005b0e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005b12:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b14:	f7ff ffaa 	bl	8005a6c <HAL_RCC_GetSysClockFreq>
 8005b18:	4b34      	ldr	r3, [pc, #208]	@ (8005bec <HAL_RCC_ClockConfig+0x124>)
 8005b1a:	4a35      	ldr	r2, [pc, #212]	@ (8005bf0 <HAL_RCC_ClockConfig+0x128>)
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005b22:	5cd3      	ldrb	r3, [r2, r3]
 8005b24:	40d8      	lsrs	r0, r3
 8005b26:	4b33      	ldr	r3, [pc, #204]	@ (8005bf4 <HAL_RCC_ClockConfig+0x12c>)
 8005b28:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8005b2a:	4b33      	ldr	r3, [pc, #204]	@ (8005bf8 <HAL_RCC_ClockConfig+0x130>)
 8005b2c:	6818      	ldr	r0, [r3, #0]
 8005b2e:	f7fc f9d7 	bl	8001ee0 <HAL_InitTick>
  return HAL_OK;
 8005b32:	2000      	movs	r0, #0
 8005b34:	e7ce      	b.n	8005ad4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b36:	b2ca      	uxtb	r2, r1
 8005b38:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 030f 	and.w	r3, r3, #15
 8005b40:	428b      	cmp	r3, r1
 8005b42:	d1c6      	bne.n	8005ad2 <HAL_RCC_ClockConfig+0xa>
 8005b44:	e7ce      	b.n	8005ae4 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b46:	4b29      	ldr	r3, [pc, #164]	@ (8005bec <HAL_RCC_ClockConfig+0x124>)
 8005b48:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b4c:	bf1e      	ittt	ne
 8005b4e:	689a      	ldrne	r2, [r3, #8]
 8005b50:	f442 52e0 	orrne.w	r2, r2, #7168	@ 0x1c00
 8005b54:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b56:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b58:	bf42      	ittt	mi
 8005b5a:	689a      	ldrmi	r2, [r3, #8]
 8005b5c:	f442 4260 	orrmi.w	r2, r2, #57344	@ 0xe000
 8005b60:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b62:	689a      	ldr	r2, [r3, #8]
 8005b64:	68a0      	ldr	r0, [r4, #8]
 8005b66:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8005b6a:	4302      	orrs	r2, r0
 8005b6c:	609a      	str	r2, [r3, #8]
 8005b6e:	e7bc      	b.n	8005aea <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b70:	6862      	ldr	r2, [r4, #4]
 8005b72:	4b1e      	ldr	r3, [pc, #120]	@ (8005bec <HAL_RCC_ClockConfig+0x124>)
 8005b74:	2a01      	cmp	r2, #1
 8005b76:	d11c      	bne.n	8005bb2 <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b7e:	d0a8      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b80:	4e1a      	ldr	r6, [pc, #104]	@ (8005bec <HAL_RCC_ClockConfig+0x124>)
 8005b82:	68b3      	ldr	r3, [r6, #8]
 8005b84:	f023 0303 	bic.w	r3, r3, #3
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8005b8c:	f7fe fb32 	bl	80041f4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b90:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8005b94:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b96:	68b3      	ldr	r3, [r6, #8]
 8005b98:	6862      	ldr	r2, [r4, #4]
 8005b9a:	f003 030c 	and.w	r3, r3, #12
 8005b9e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005ba2:	d0a4      	beq.n	8005aee <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ba4:	f7fe fb26 	bl	80041f4 <HAL_GetTick>
 8005ba8:	1bc0      	subs	r0, r0, r7
 8005baa:	4540      	cmp	r0, r8
 8005bac:	d9f3      	bls.n	8005b96 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8005bae:	2003      	movs	r0, #3
 8005bb0:	e790      	b.n	8005ad4 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bb2:	1e91      	subs	r1, r2, #2
 8005bb4:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bb6:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bb8:	d802      	bhi.n	8005bc0 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bba:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005bbe:	e7de      	b.n	8005b7e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bc0:	f013 0f02 	tst.w	r3, #2
 8005bc4:	e7db      	b.n	8005b7e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bc6:	b2ea      	uxtb	r2, r5
 8005bc8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 030f 	and.w	r3, r3, #15
 8005bd0:	42ab      	cmp	r3, r5
 8005bd2:	f47f af7e 	bne.w	8005ad2 <HAL_RCC_ClockConfig+0xa>
 8005bd6:	e790      	b.n	8005afa <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bd8:	4904      	ldr	r1, [pc, #16]	@ (8005bec <HAL_RCC_ClockConfig+0x124>)
 8005bda:	68e0      	ldr	r0, [r4, #12]
 8005bdc:	688b      	ldr	r3, [r1, #8]
 8005bde:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8005be2:	4303      	orrs	r3, r0
 8005be4:	608b      	str	r3, [r1, #8]
 8005be6:	e78b      	b.n	8005b00 <HAL_RCC_ClockConfig+0x38>
 8005be8:	40023c00 	.word	0x40023c00
 8005bec:	40023800 	.word	0x40023800
 8005bf0:	080158b8 	.word	0x080158b8
 8005bf4:	20000074 	.word	0x20000074
 8005bf8:	2000007c 	.word	0x2000007c

08005bfc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005bfc:	4b04      	ldr	r3, [pc, #16]	@ (8005c10 <HAL_RCC_GetPCLK1Freq+0x14>)
 8005bfe:	4a05      	ldr	r2, [pc, #20]	@ (8005c14 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8005c06:	5cd3      	ldrb	r3, [r2, r3]
 8005c08:	4a03      	ldr	r2, [pc, #12]	@ (8005c18 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005c0a:	6810      	ldr	r0, [r2, #0]
}
 8005c0c:	40d8      	lsrs	r0, r3
 8005c0e:	4770      	bx	lr
 8005c10:	40023800 	.word	0x40023800
 8005c14:	080158b0 	.word	0x080158b0
 8005c18:	20000074 	.word	0x20000074

08005c1c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005c1c:	230f      	movs	r3, #15
 8005c1e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005c20:	4b0b      	ldr	r3, [pc, #44]	@ (8005c50 <HAL_RCC_GetClockConfig+0x34>)
 8005c22:	689a      	ldr	r2, [r3, #8]
 8005c24:	f002 0203 	and.w	r2, r2, #3
 8005c28:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005c2a:	689a      	ldr	r2, [r3, #8]
 8005c2c:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8005c30:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005c32:	689a      	ldr	r2, [r3, #8]
 8005c34:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8005c38:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	08db      	lsrs	r3, r3, #3
 8005c3e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8005c42:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005c44:	4b03      	ldr	r3, [pc, #12]	@ (8005c54 <HAL_RCC_GetClockConfig+0x38>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 030f 	and.w	r3, r3, #15
 8005c4c:	600b      	str	r3, [r1, #0]
}
 8005c4e:	4770      	bx	lr
 8005c50:	40023800 	.word	0x40023800
 8005c54:	40023c00 	.word	0x40023c00

08005c58 <HAL_RCCEx_PeriphCLKConfig>:
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005c58:	6803      	ldr	r3, [r0, #0]
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c5a:	f013 0f43 	tst.w	r3, #67	@ 0x43
{
 8005c5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c60:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c62:	f040 8088 	bne.w	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x11e>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005c66:	6823      	ldr	r3, [r4, #0]
 8005c68:	f013 0f0c 	tst.w	r3, #12
 8005c6c:	d045      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005c6e:	4b8c      	ldr	r3, [pc, #560]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c70:	4d8c      	ldr	r5, [pc, #560]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLSAI_DISABLE();
 8005c72:	2200      	movs	r2, #0
 8005c74:	671a      	str	r2, [r3, #112]	@ 0x70
    tickstart = HAL_GetTick();
 8005c76:	f7fe fabd 	bl	80041f4 <HAL_GetTick>
 8005c7a:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c7c:	682b      	ldr	r3, [r5, #0]
 8005c7e:	0099      	lsls	r1, r3, #2
 8005c80:	f100 80cb 	bmi.w	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005c84:	6821      	ldr	r1, [r4, #0]
 8005c86:	074a      	lsls	r2, r1, #29
 8005c88:	d515      	bpl.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005c8a:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005c8e:	f8d5 2088 	ldr.w	r2, [r5, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005c92:	061b      	lsls	r3, r3, #24
 8005c94:	f002 42e0 	and.w	r2, r2, #1879048192	@ 0x70000000
 8005c98:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005ca2:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 8005ca6:	6a22      	ldr	r2, [r4, #32]
 8005ca8:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8005cac:	3a01      	subs	r2, #1
 8005cae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005cb2:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005cb6:	070b      	lsls	r3, r1, #28
 8005cb8:	d514      	bpl.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005cba:	4a7a      	ldr	r2, [pc, #488]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005cbc:	69a3      	ldr	r3, [r4, #24]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005cbe:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005cc2:	6920      	ldr	r0, [r4, #16]
 8005cc4:	071b      	lsls	r3, r3, #28
 8005cc6:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8005cca:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005cce:	430b      	orrs	r3, r1
 8005cd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005cd4:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8005cd8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005cda:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8005cde:	430b      	orrs	r3, r1
 8005ce0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005ce4:	4b6e      	ldr	r3, [pc, #440]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ce6:	4e6f      	ldr	r6, [pc, #444]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLSAI_ENABLE();
 8005ce8:	2201      	movs	r2, #1
 8005cea:	671a      	str	r2, [r3, #112]	@ 0x70
    tickstart = HAL_GetTick();
 8005cec:	f7fe fa82 	bl	80041f4 <HAL_GetTick>
 8005cf0:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005cf2:	6833      	ldr	r3, [r6, #0]
 8005cf4:	009f      	lsls	r7, r3, #2
 8005cf6:	f140 8097 	bpl.w	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005cfa:	6823      	ldr	r3, [r4, #0]
 8005cfc:	0698      	lsls	r0, r3, #26
 8005cfe:	d534      	bpl.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d00:	2300      	movs	r3, #0
 8005d02:	9301      	str	r3, [sp, #4]
 8005d04:	4b67      	ldr	r3, [pc, #412]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d06:	4d68      	ldr	r5, [pc, #416]	@ (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d0a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005d0e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d16:	9301      	str	r3, [sp, #4]
 8005d18:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8005d1a:	682b      	ldr	r3, [r5, #0]
 8005d1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d20:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d22:	f7fe fa67 	bl	80041f4 <HAL_GetTick>
 8005d26:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d28:	682b      	ldr	r3, [r5, #0]
 8005d2a:	05d8      	lsls	r0, r3, #23
 8005d2c:	f140 8083 	bpl.w	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d30:	4d5c      	ldr	r5, [pc, #368]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d32:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d34:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d36:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8005d3a:	f040 8083 	bne.w	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d3e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005d40:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8005d44:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8005d48:	4a56      	ldr	r2, [pc, #344]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005d4a:	f040 809e 	bne.w	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x232>
 8005d4e:	6891      	ldr	r1, [r2, #8]
 8005d50:	f023 4070 	bic.w	r0, r3, #4026531840	@ 0xf0000000
 8005d54:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 8005d58:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8005d5c:	4301      	orrs	r1, r0
 8005d5e:	6091      	str	r1, [r2, #8]
 8005d60:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8005d62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d66:	430b      	orrs	r3, r1
 8005d68:	6713      	str	r3, [r2, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005d6a:	6823      	ldr	r3, [r4, #0]
 8005d6c:	06db      	lsls	r3, r3, #27
 8005d6e:	f100 8090 	bmi.w	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
  return HAL_OK;
 8005d72:	2000      	movs	r0, #0
 8005d74:	e04f      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    __HAL_RCC_PLLI2S_DISABLE();
 8005d76:	4b4a      	ldr	r3, [pc, #296]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d78:	4e4a      	ldr	r6, [pc, #296]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLI2S_DISABLE();
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8005d7e:	f7fe fa39 	bl	80041f4 <HAL_GetTick>
 8005d82:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d84:	6833      	ldr	r3, [r6, #0]
 8005d86:	011f      	lsls	r7, r3, #4
 8005d88:	d43f      	bmi.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005d8a:	6821      	ldr	r1, [r4, #0]
 8005d8c:	07c8      	lsls	r0, r1, #31
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005d8e:	bf41      	itttt	mi
 8005d90:	e9d4 2301 	ldrdmi	r2, r3, [r4, #4]
 8005d94:	071b      	lslmi	r3, r3, #28
 8005d96:	ea43 1382 	orrmi.w	r3, r3, r2, lsl #6
 8005d9a:	f8c6 3084 	strmi.w	r3, [r6, #132]	@ 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005d9e:	078a      	lsls	r2, r1, #30
 8005da0:	d515      	bpl.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005da2:	4a40      	ldr	r2, [pc, #256]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005da4:	68e3      	ldr	r3, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005da6:	f8d2 0084 	ldr.w	r0, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005daa:	6865      	ldr	r5, [r4, #4]
 8005dac:	061b      	lsls	r3, r3, #24
 8005dae:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8005db2:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8005db6:	4303      	orrs	r3, r0
 8005db8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005dbc:	f8d2 008c 	ldr.w	r0, [r2, #140]	@ 0x8c
 8005dc0:	69e3      	ldr	r3, [r4, #28]
 8005dc2:	f020 001f 	bic.w	r0, r0, #31
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	4303      	orrs	r3, r0
 8005dca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005dce:	064b      	lsls	r3, r1, #25
 8005dd0:	d50a      	bpl.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x190>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005dd2:	68e3      	ldr	r3, [r4, #12]
 8005dd4:	6862      	ldr	r2, [r4, #4]
 8005dd6:	061b      	lsls	r3, r3, #24
 8005dd8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005ddc:	68a2      	ldr	r2, [r4, #8]
 8005dde:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8005de2:	4a30      	ldr	r2, [pc, #192]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005de4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8005de8:	4b2d      	ldr	r3, [pc, #180]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005dea:	4e2e      	ldr	r6, [pc, #184]	@ (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLI2S_ENABLE();
 8005dec:	2201      	movs	r2, #1
 8005dee:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8005df0:	f7fe fa00 	bl	80041f4 <HAL_GetTick>
 8005df4:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005df6:	6833      	ldr	r3, [r6, #0]
 8005df8:	011f      	lsls	r7, r3, #4
 8005dfa:	f53f af34 	bmi.w	8005c66 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005dfe:	f7fe f9f9 	bl	80041f4 <HAL_GetTick>
 8005e02:	1b40      	subs	r0, r0, r5
 8005e04:	2802      	cmp	r0, #2
 8005e06:	d9f6      	bls.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8005e08:	e004      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e0a:	f7fe f9f3 	bl	80041f4 <HAL_GetTick>
 8005e0e:	1b40      	subs	r0, r0, r5
 8005e10:	2802      	cmp	r0, #2
 8005e12:	d9b7      	bls.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        return HAL_TIMEOUT;
 8005e14:	2003      	movs	r0, #3
}
 8005e16:	b003      	add	sp, #12
 8005e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005e1a:	f7fe f9eb 	bl	80041f4 <HAL_GetTick>
 8005e1e:	1b80      	subs	r0, r0, r6
 8005e20:	2802      	cmp	r0, #2
 8005e22:	f67f af2b 	bls.w	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x24>
 8005e26:	e7f5      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005e28:	f7fe f9e4 	bl	80041f4 <HAL_GetTick>
 8005e2c:	1b40      	subs	r0, r0, r5
 8005e2e:	2802      	cmp	r0, #2
 8005e30:	f67f af5f 	bls.w	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8005e34:	e7ee      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005e36:	f7fe f9dd 	bl	80041f4 <HAL_GetTick>
 8005e3a:	1b80      	subs	r0, r0, r6
 8005e3c:	2802      	cmp	r0, #2
 8005e3e:	f67f af73 	bls.w	8005d28 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8005e42:	e7e7      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e44:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	f43f af78 	beq.w	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xe6>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e4e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e50:	4a13      	ldr	r2, [pc, #76]	@ (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005e52:	2101      	movs	r1, #1
 8005e54:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e5c:	2100      	movs	r1, #0
 8005e5e:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      RCC->BDCR = tmpreg1;
 8005e62:	672b      	str	r3, [r5, #112]	@ 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e64:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005e66:	07d9      	lsls	r1, r3, #31
 8005e68:	f57f af69 	bpl.w	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xe6>
        tickstart = HAL_GetTick();
 8005e6c:	f7fe f9c2 	bl	80041f4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e70:	f241 3788 	movw	r7, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8005e74:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e76:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005e78:	079a      	lsls	r2, r3, #30
 8005e7a:	f53f af60 	bmi.w	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e7e:	f7fe f9b9 	bl	80041f4 <HAL_GetTick>
 8005e82:	1b80      	subs	r0, r0, r6
 8005e84:	42b8      	cmp	r0, r7
 8005e86:	d9f6      	bls.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005e88:	e7c4      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e8a:	6891      	ldr	r1, [r2, #8]
 8005e8c:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 8005e90:	e765      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x106>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e92:	4b06      	ldr	r3, [pc, #24]	@ (8005eac <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005e94:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8005e98:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
 8005e9c:	e769      	b.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x11a>
 8005e9e:	bf00      	nop
 8005ea0:	42470000 	.word	0x42470000
 8005ea4:	40023800 	.word	0x40023800
 8005ea8:	40007000 	.word	0x40007000
 8005eac:	42471000 	.word	0x42471000

08005eb0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005eb0:	b538      	push	{r3, r4, r5, lr}
 8005eb2:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005eb4:	4604      	mov	r4, r0
 8005eb6:	b1c8      	cbz	r0, 8005eec <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005eb8:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8005ebc:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005ec0:	b91b      	cbnz	r3, 8005eca <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005ec2:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005ec6:	f7fb ff9f 	bl	8001e08 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005eca:	2302      	movs	r3, #2
 8005ecc:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005ed0:	1d21      	adds	r1, r4, #4
 8005ed2:	6820      	ldr	r0, [r4, #0]
 8005ed4:	f000 fcfe 	bl	80068d4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005ed8:	6862      	ldr	r2, [r4, #4]
 8005eda:	6820      	ldr	r0, [r4, #0]
 8005edc:	4629      	mov	r1, r5
 8005ede:	f000 fd31 	bl	8006944 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c

  return HAL_OK;
 8005ee8:	2000      	movs	r0, #0
}
 8005eea:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005eec:	2001      	movs	r0, #1
 8005eee:	e7fc      	b.n	8005eea <HAL_SDRAM_Init+0x3a>

08005ef0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8005ef0:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005ef2:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8005ef6:	2b02      	cmp	r3, #2
{
 8005ef8:	4605      	mov	r5, r0
 8005efa:	460e      	mov	r6, r1
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005efc:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8005efe:	d012      	beq.n	8005f26 <HAL_SDRAM_SendCommand+0x36>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8005f00:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 8005f04:	2c01      	cmp	r4, #1
 8005f06:	d10f      	bne.n	8005f28 <HAL_SDRAM_SendCommand+0x38>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005f08:	2302      	movs	r3, #2
 8005f0a:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005f0e:	6828      	ldr	r0, [r5, #0]
 8005f10:	f000 fd4e 	bl	80069b0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005f14:	6833      	ldr	r3, [r6, #0]
 8005f16:	2b02      	cmp	r3, #2
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005f18:	bf06      	itte	eq
 8005f1a:	2305      	moveq	r3, #5
 8005f1c:	f885 302c 	strbeq.w	r3, [r5, #44]	@ 0x2c
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8005f20:	f885 402c 	strbne.w	r4, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005f24:	2000      	movs	r0, #0
}
 8005f26:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005f28:	2001      	movs	r0, #1
 8005f2a:	e7fc      	b.n	8005f26 <HAL_SDRAM_SendCommand+0x36>

08005f2c <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005f2c:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005f2e:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8005f32:	2b02      	cmp	r3, #2
{
 8005f34:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005f36:	b2d8      	uxtb	r0, r3
 8005f38:	d00d      	beq.n	8005f56 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8005f3a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	b2dd      	uxtb	r5, r3
 8005f42:	d109      	bne.n	8005f58 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005f44:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005f46:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005f48:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005f4c:	f000 fd54 	bl	80069f8 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005f50:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005f54:	2000      	movs	r0, #0
}
 8005f56:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005f58:	2001      	movs	r0, #1
 8005f5a:	e7fc      	b.n	8005f56 <HAL_SDRAM_ProgramRefreshRate+0x2a>

08005f5c <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8005f5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005f60:	461c      	mov	r4, r3
 8005f62:	4616      	mov	r6, r2
 8005f64:	460f      	mov	r7, r1
 8005f66:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f68:	f7fe f944 	bl	80041f4 <HAL_GetTick>
 8005f6c:	4434      	add	r4, r6
 8005f6e:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8005f70:	f7fe f940 	bl	80041f4 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f74:	4b24      	ldr	r3, [pc, #144]	@ (8006008 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xac>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8005f7c:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 8005f7e:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f80:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f82:	682a      	ldr	r2, [r5, #0]
 8005f84:	6893      	ldr	r3, [r2, #8]
 8005f86:	ea37 0303 	bics.w	r3, r7, r3
 8005f8a:	d001      	beq.n	8005f90 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
      }
      count--;
    }
  }

  return HAL_OK;
 8005f8c:	2000      	movs	r0, #0
 8005f8e:	e02e      	b.n	8005fee <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8005f90:	1c73      	adds	r3, r6, #1
 8005f92:	d0f7      	beq.n	8005f84 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f94:	f7fe f92e 	bl	80041f4 <HAL_GetTick>
 8005f98:	eba0 0008 	sub.w	r0, r0, r8
 8005f9c:	42a0      	cmp	r0, r4
 8005f9e:	d329      	bcc.n	8005ff4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fa0:	682b      	ldr	r3, [r5, #0]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005fa8:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005faa:	686a      	ldr	r2, [r5, #4]
 8005fac:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8005fb0:	d10a      	bne.n	8005fc8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 8005fb2:	68aa      	ldr	r2, [r5, #8]
 8005fb4:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8005fb8:	d002      	beq.n	8005fc0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fba:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8005fbe:	d103      	bne.n	8005fc8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fc6:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fc8:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8005fca:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8005fce:	d107      	bne.n	8005fe0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005fd6:	601a      	str	r2, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005fde:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005fec:	2003      	movs	r0, #3
}
 8005fee:	b002      	add	sp, #8
 8005ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (count == 0U)
 8005ff4:	9a01      	ldr	r2, [sp, #4]
      count--;
 8005ff6:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8005ff8:	2a00      	cmp	r2, #0
      count--;
 8005ffa:	f103 33ff 	add.w	r3, r3, #4294967295
 8005ffe:	9301      	str	r3, [sp, #4]
 8006000:	bf08      	it	eq
 8006002:	4614      	moveq	r4, r2
 8006004:	e7bd      	b.n	8005f82 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
 8006006:	bf00      	nop
 8006008:	20000074 	.word	0x20000074

0800600c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800600c:	b538      	push	{r3, r4, r5, lr}
 800600e:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006010:	6842      	ldr	r2, [r0, #4]
 8006012:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
{
 8006016:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006018:	d006      	beq.n	8006028 <SPI_EndRxTransaction+0x1c>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800601a:	460a      	mov	r2, r1
 800601c:	2101      	movs	r1, #1
 800601e:	f7ff ff9d 	bl	8005f5c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8006022:	b9b8      	cbnz	r0, 8006054 <SPI_EndRxTransaction+0x48>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8006024:	2000      	movs	r0, #0
}
 8006026:	bd38      	pop	{r3, r4, r5, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006028:	6882      	ldr	r2, [r0, #8]
 800602a:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800602e:	d002      	beq.n	8006036 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006030:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8006034:	d107      	bne.n	8006046 <SPI_EndRxTransaction+0x3a>
    __HAL_SPI_DISABLE(hspi);
 8006036:	6825      	ldr	r5, [r4, #0]
 8006038:	6828      	ldr	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800603a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
    __HAL_SPI_DISABLE(hspi);
 800603e:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8006042:	6028      	str	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006044:	d003      	beq.n	800604e <SPI_EndRxTransaction+0x42>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006046:	460a      	mov	r2, r1
 8006048:	2180      	movs	r1, #128	@ 0x80
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800604a:	4620      	mov	r0, r4
 800604c:	e7e7      	b.n	800601e <SPI_EndRxTransaction+0x12>
 800604e:	460a      	mov	r2, r1
 8006050:	2101      	movs	r1, #1
 8006052:	e7fa      	b.n	800604a <SPI_EndRxTransaction+0x3e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006054:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006056:	f043 0320 	orr.w	r3, r3, #32
 800605a:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 800605c:	2003      	movs	r0, #3
 800605e:	e7e2      	b.n	8006026 <SPI_EndRxTransaction+0x1a>

08006060 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006060:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006062:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006064:	4a12      	ldr	r2, [pc, #72]	@ (80060b0 <SPI_EndRxTxTransaction+0x50>)
 8006066:	6815      	ldr	r5, [r2, #0]
 8006068:	4a12      	ldr	r2, [pc, #72]	@ (80060b4 <SPI_EndRxTxTransaction+0x54>)
 800606a:	fbb5 f5f2 	udiv	r5, r5, r2
 800606e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006072:	4355      	muls	r5, r2
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006074:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006076:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006078:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
{
 800607c:	4604      	mov	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800607e:	d10b      	bne.n	8006098 <SPI_EndRxTxTransaction+0x38>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006080:	460a      	mov	r2, r1
 8006082:	2180      	movs	r1, #128	@ 0x80
 8006084:	f7ff ff6a 	bl	8005f5c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8006088:	b178      	cbz	r0, 80060aa <SPI_EndRxTxTransaction+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800608a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800608c:	f043 0320 	orr.w	r3, r3, #32
 8006090:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006092:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 8006094:	b003      	add	sp, #12
 8006096:	bd30      	pop	{r4, r5, pc}
      if (count == 0U)
 8006098:	9b01      	ldr	r3, [sp, #4]
 800609a:	b133      	cbz	r3, 80060aa <SPI_EndRxTxTransaction+0x4a>
      count--;
 800609c:	9b01      	ldr	r3, [sp, #4]
 800609e:	3b01      	subs	r3, #1
 80060a0:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80060a2:	6823      	ldr	r3, [r4, #0]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	061b      	lsls	r3, r3, #24
 80060a8:	d4f6      	bmi.n	8006098 <SPI_EndRxTxTransaction+0x38>
  return HAL_OK;
 80060aa:	2000      	movs	r0, #0
 80060ac:	e7f2      	b.n	8006094 <SPI_EndRxTxTransaction+0x34>
 80060ae:	bf00      	nop
 80060b0:	20000074 	.word	0x20000074
 80060b4:	016e3600 	.word	0x016e3600

080060b8 <HAL_SPI_Init>:
{
 80060b8:	b510      	push	{r4, lr}
  if (hspi == NULL)
 80060ba:	4604      	mov	r4, r0
 80060bc:	2800      	cmp	r0, #0
 80060be:	d055      	beq.n	800616c <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060c0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d14e      	bne.n	8006164 <HAL_SPI_Init+0xac>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060c6:	6842      	ldr	r2, [r0, #4]
 80060c8:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80060cc:	d000      	beq.n	80060d0 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80060ce:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060d0:	2300      	movs	r3, #0
 80060d2:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80060d4:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80060d8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80060dc:	b923      	cbnz	r3, 80060e8 <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 80060de:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 80060e2:	4620      	mov	r0, r4
 80060e4:	f7fb fe5a 	bl	8001d9c <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80060e8:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060ea:	68a0      	ldr	r0, [r4, #8]
 80060ec:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 80060ee:	2302      	movs	r3, #2
 80060f0:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 80060f4:	680b      	ldr	r3, [r1, #0]
 80060f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060fa:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060fc:	6863      	ldr	r3, [r4, #4]
 80060fe:	f400 4004 	and.w	r0, r0, #33792	@ 0x8400
 8006102:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8006106:	4303      	orrs	r3, r0
 8006108:	68e0      	ldr	r0, [r4, #12]
 800610a:	f400 6000 	and.w	r0, r0, #2048	@ 0x800
 800610e:	4303      	orrs	r3, r0
 8006110:	6920      	ldr	r0, [r4, #16]
 8006112:	f000 0002 	and.w	r0, r0, #2
 8006116:	4303      	orrs	r3, r0
 8006118:	6960      	ldr	r0, [r4, #20]
 800611a:	f000 0001 	and.w	r0, r0, #1
 800611e:	4303      	orrs	r3, r0
 8006120:	f402 7000 	and.w	r0, r2, #512	@ 0x200
 8006124:	4303      	orrs	r3, r0
 8006126:	69e0      	ldr	r0, [r4, #28]
 8006128:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 800612c:	4303      	orrs	r3, r0
 800612e:	6a20      	ldr	r0, [r4, #32]
 8006130:	f000 0080 	and.w	r0, r0, #128	@ 0x80
 8006134:	4303      	orrs	r3, r0
 8006136:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8006138:	f400 5000 	and.w	r0, r0, #8192	@ 0x2000
 800613c:	4303      	orrs	r3, r0
 800613e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006140:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006142:	0c12      	lsrs	r2, r2, #16
 8006144:	f003 0310 	and.w	r3, r3, #16
 8006148:	f002 0204 	and.w	r2, r2, #4
 800614c:	431a      	orrs	r2, r3
 800614e:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006150:	69cb      	ldr	r3, [r1, #28]
 8006152:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006156:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006158:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800615a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800615c:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800615e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8006162:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006164:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006166:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800616a:	e7b1      	b.n	80060d0 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 800616c:	2001      	movs	r0, #1
 800616e:	e7f8      	b.n	8006162 <HAL_SPI_Init+0xaa>

08006170 <HAL_SPI_Transmit>:
{
 8006170:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006174:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8006176:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 800617a:	2b01      	cmp	r3, #1
{
 800617c:	4604      	mov	r4, r0
 800617e:	460d      	mov	r5, r1
 8006180:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8006182:	f000 80a0 	beq.w	80062c6 <HAL_SPI_Transmit+0x156>
 8006186:	2301      	movs	r3, #1
 8006188:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tickstart = HAL_GetTick();
 800618c:	f7fe f832 	bl	80041f4 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8006190:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8006194:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8006196:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8006198:	b2d8      	uxtb	r0, r3
 800619a:	f040 8092 	bne.w	80062c2 <HAL_SPI_Transmit+0x152>
  if ((pData == NULL) || (Size == 0U))
 800619e:	2d00      	cmp	r5, #0
 80061a0:	d061      	beq.n	8006266 <HAL_SPI_Transmit+0xf6>
 80061a2:	f1b8 0f00 	cmp.w	r8, #0
 80061a6:	d05e      	beq.n	8006266 <HAL_SPI_Transmit+0xf6>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80061a8:	2303      	movs	r3, #3
 80061aa:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061ae:	2300      	movs	r3, #0
 80061b0:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->RxISR       = NULL;
 80061b2:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  hspi->TxXferCount = Size;
 80061b6:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80061ba:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80061bc:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80061be:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061c0:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 80061c2:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80061c4:	6325      	str	r5, [r4, #48]	@ 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  hspi->TxXferSize  = Size;
 80061ca:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061ce:	d107      	bne.n	80061e0 <HAL_SPI_Transmit+0x70>
    __HAL_SPI_DISABLE(hspi);
 80061d0:	6833      	ldr	r3, [r6, #0]
 80061d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061d6:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 80061d8:	6833      	ldr	r3, [r6, #0]
 80061da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80061de:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061e0:	6833      	ldr	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061e2:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061e4:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80061e6:	bf5e      	ittt	pl
 80061e8:	6833      	ldrpl	r3, [r6, #0]
 80061ea:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 80061ee:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061f0:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061f4:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061f6:	d13f      	bne.n	8006278 <HAL_SPI_Transmit+0x108>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061f8:	b113      	cbz	r3, 8006200 <HAL_SPI_Transmit+0x90>
 80061fa:	f1b8 0f01 	cmp.w	r8, #1
 80061fe:	d107      	bne.n	8006210 <HAL_SPI_Transmit+0xa0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006200:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006204:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006206:	6325      	str	r5, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8006208:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800620a:	3b01      	subs	r3, #1
 800620c:	b29b      	uxth	r3, r3
 800620e:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8006210:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006212:	b29b      	uxth	r3, r3
 8006214:	b9a3      	cbnz	r3, 8006240 <HAL_SPI_Transmit+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006216:	464a      	mov	r2, r9
 8006218:	4639      	mov	r1, r7
 800621a:	4620      	mov	r0, r4
 800621c:	f7ff ff20 	bl	8006060 <SPI_EndRxTxTransaction>
 8006220:	2800      	cmp	r0, #0
 8006222:	d14b      	bne.n	80062bc <HAL_SPI_Transmit+0x14c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006224:	68a3      	ldr	r3, [r4, #8]
 8006226:	b933      	cbnz	r3, 8006236 <HAL_SPI_Transmit+0xc6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006228:	9301      	str	r3, [sp, #4]
 800622a:	6823      	ldr	r3, [r4, #0]
 800622c:	68da      	ldr	r2, [r3, #12]
 800622e:	9201      	str	r2, [sp, #4]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	9301      	str	r3, [sp, #4]
 8006234:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006236:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8006238:	3800      	subs	r0, #0
 800623a:	bf18      	it	ne
 800623c:	2001      	movne	r0, #1
error:
 800623e:	e012      	b.n	8006266 <HAL_SPI_Transmit+0xf6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006240:	6822      	ldr	r2, [r4, #0]
 8006242:	6893      	ldr	r3, [r2, #8]
 8006244:	0798      	lsls	r0, r3, #30
 8006246:	d505      	bpl.n	8006254 <HAL_SPI_Transmit+0xe4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006248:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800624a:	f833 1b02 	ldrh.w	r1, [r3], #2
 800624e:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006250:	6323      	str	r3, [r4, #48]	@ 0x30
 8006252:	e7d9      	b.n	8006208 <HAL_SPI_Transmit+0x98>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006254:	f7fd ffce 	bl	80041f4 <HAL_GetTick>
 8006258:	eba0 0009 	sub.w	r0, r0, r9
 800625c:	42b8      	cmp	r0, r7
 800625e:	d3d7      	bcc.n	8006210 <HAL_SPI_Transmit+0xa0>
 8006260:	1c79      	adds	r1, r7, #1
 8006262:	d0d5      	beq.n	8006210 <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 8006264:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8006266:	2301      	movs	r3, #1
 8006268:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800626c:	2300      	movs	r3, #0
 800626e:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8006272:	b003      	add	sp, #12
 8006274:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006278:	b113      	cbz	r3, 8006280 <HAL_SPI_Transmit+0x110>
 800627a:	f1b8 0f01 	cmp.w	r8, #1
 800627e:	d108      	bne.n	8006292 <HAL_SPI_Transmit+0x122>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006280:	782b      	ldrb	r3, [r5, #0]
 8006282:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006284:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006286:	3301      	adds	r3, #1
 8006288:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 800628a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800628c:	3b01      	subs	r3, #1
 800628e:	b29b      	uxth	r3, r3
 8006290:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8006292:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006294:	b29b      	uxth	r3, r3
 8006296:	2b00      	cmp	r3, #0
 8006298:	d0bd      	beq.n	8006216 <HAL_SPI_Transmit+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800629a:	6823      	ldr	r3, [r4, #0]
 800629c:	689a      	ldr	r2, [r3, #8]
 800629e:	0792      	lsls	r2, r2, #30
 80062a0:	d503      	bpl.n	80062aa <HAL_SPI_Transmit+0x13a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062a2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80062a4:	7812      	ldrb	r2, [r2, #0]
 80062a6:	731a      	strb	r2, [r3, #12]
 80062a8:	e7ec      	b.n	8006284 <HAL_SPI_Transmit+0x114>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062aa:	f7fd ffa3 	bl	80041f4 <HAL_GetTick>
 80062ae:	eba0 0009 	sub.w	r0, r0, r9
 80062b2:	42b8      	cmp	r0, r7
 80062b4:	d3ed      	bcc.n	8006292 <HAL_SPI_Transmit+0x122>
 80062b6:	1c7b      	adds	r3, r7, #1
 80062b8:	d0eb      	beq.n	8006292 <HAL_SPI_Transmit+0x122>
 80062ba:	e7d3      	b.n	8006264 <HAL_SPI_Transmit+0xf4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062bc:	2320      	movs	r3, #32
 80062be:	6563      	str	r3, [r4, #84]	@ 0x54
 80062c0:	e7b0      	b.n	8006224 <HAL_SPI_Transmit+0xb4>
    errorcode = HAL_BUSY;
 80062c2:	2002      	movs	r0, #2
 80062c4:	e7cf      	b.n	8006266 <HAL_SPI_Transmit+0xf6>
  __HAL_LOCK(hspi);
 80062c6:	2002      	movs	r0, #2
 80062c8:	e7d3      	b.n	8006272 <HAL_SPI_Transmit+0x102>

080062ca <HAL_SPI_TransmitReceive>:
{
 80062ca:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80062ce:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80062d0:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
{
 80062d4:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hspi);
 80062d8:	2b01      	cmp	r3, #1
{
 80062da:	4604      	mov	r4, r0
 80062dc:	460d      	mov	r5, r1
 80062de:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 80062e0:	f000 80e3 	beq.w	80064aa <HAL_SPI_TransmitReceive+0x1e0>
 80062e4:	2301      	movs	r3, #1
 80062e6:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tickstart = HAL_GetTick();
 80062ea:	f7fd ff83 	bl	80041f4 <HAL_GetTick>
  tmp_state           = hspi->State;
 80062ee:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tmp_mode            = hspi->Init.Mode;
 80062f2:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80062f4:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80062f6:	4607      	mov	r7, r0
  tmp_state           = hspi->State;
 80062f8:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80062fa:	d00a      	beq.n	8006312 <HAL_SPI_TransmitReceive+0x48>
 80062fc:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8006300:	f040 80d1 	bne.w	80064a6 <HAL_SPI_TransmitReceive+0x1dc>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006304:	68a3      	ldr	r3, [r4, #8]
 8006306:	2b00      	cmp	r3, #0
 8006308:	f040 80cd 	bne.w	80064a6 <HAL_SPI_TransmitReceive+0x1dc>
 800630c:	2904      	cmp	r1, #4
 800630e:	f040 80ca 	bne.w	80064a6 <HAL_SPI_TransmitReceive+0x1dc>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006312:	b115      	cbz	r5, 800631a <HAL_SPI_TransmitReceive+0x50>
 8006314:	f1b9 0f00 	cmp.w	r9, #0
 8006318:	d109      	bne.n	800632e <HAL_SPI_TransmitReceive+0x64>
    errorcode = HAL_ERROR;
 800631a:	2001      	movs	r0, #1
  hspi->State = HAL_SPI_STATE_READY;
 800631c:	2301      	movs	r3, #1
 800631e:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8006322:	2300      	movs	r3, #0
 8006324:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8006328:	b003      	add	sp, #12
 800632a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800632e:	2e00      	cmp	r6, #0
 8006330:	d0f3      	beq.n	800631a <HAL_SPI_TransmitReceive+0x50>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006332:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006336:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800633a:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800633c:	bf1c      	itt	ne
 800633e:	2305      	movne	r3, #5
 8006340:	f884 3051 	strbne.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006344:	2300      	movs	r3, #0
 8006346:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->TxISR       = NULL;
 8006348:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800634c:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 800634e:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxXferCount = Size;
 8006350:	86e6      	strh	r6, [r4, #54]	@ 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006352:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 8006354:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006356:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 8006358:	bf58      	it	pl
 800635a:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800635c:	6325      	str	r5, [r4, #48]	@ 0x30
    __HAL_SPI_ENABLE(hspi);
 800635e:	bf58      	it	pl
 8006360:	f041 0140 	orrpl.w	r1, r1, #64	@ 0x40
  hspi->TxXferSize  = Size;
 8006364:	86a6      	strh	r6, [r4, #52]	@ 0x34
    __HAL_SPI_ENABLE(hspi);
 8006366:	bf58      	it	pl
 8006368:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800636a:	68e1      	ldr	r1, [r4, #12]
 800636c:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8006370:	d148      	bne.n	8006404 <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006372:	b10a      	cbz	r2, 8006378 <HAL_SPI_TransmitReceive+0xae>
 8006374:	2e01      	cmp	r6, #1
 8006376:	d107      	bne.n	8006388 <HAL_SPI_TransmitReceive+0xbe>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006378:	f835 2b02 	ldrh.w	r2, [r5], #2
 800637c:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800637e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006380:	6325      	str	r5, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8006382:	3b01      	subs	r3, #1
 8006384:	b29b      	uxth	r3, r3
 8006386:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8006388:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800638a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800638c:	b29b      	uxth	r3, r3
 800638e:	b963      	cbnz	r3, 80063aa <HAL_SPI_TransmitReceive+0xe0>
 8006390:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006392:	b29b      	uxth	r3, r3
 8006394:	b94b      	cbnz	r3, 80063aa <HAL_SPI_TransmitReceive+0xe0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006396:	463a      	mov	r2, r7
 8006398:	4641      	mov	r1, r8
 800639a:	4620      	mov	r0, r4
 800639c:	f7ff fe60 	bl	8006060 <SPI_EndRxTxTransaction>
 80063a0:	2800      	cmp	r0, #0
 80063a2:	d074      	beq.n	800648e <HAL_SPI_TransmitReceive+0x1c4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063a4:	2320      	movs	r3, #32
 80063a6:	6563      	str	r3, [r4, #84]	@ 0x54
    goto error;
 80063a8:	e7b7      	b.n	800631a <HAL_SPI_TransmitReceive+0x50>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063aa:	6821      	ldr	r1, [r4, #0]
 80063ac:	688b      	ldr	r3, [r1, #8]
 80063ae:	079a      	lsls	r2, r3, #30
 80063b0:	d50d      	bpl.n	80063ce <HAL_SPI_TransmitReceive+0x104>
 80063b2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	b153      	cbz	r3, 80063ce <HAL_SPI_TransmitReceive+0x104>
 80063b8:	b145      	cbz	r5, 80063cc <HAL_SPI_TransmitReceive+0x102>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063ba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80063bc:	f833 2b02 	ldrh.w	r2, [r3], #2
 80063c0:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063c2:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80063c4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80063c6:	3b01      	subs	r3, #1
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 80063cc:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063ce:	688a      	ldr	r2, [r1, #8]
 80063d0:	f012 0201 	ands.w	r2, r2, #1
 80063d4:	d00c      	beq.n	80063f0 <HAL_SPI_TransmitReceive+0x126>
 80063d6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80063d8:	b29b      	uxth	r3, r3
 80063da:	b14b      	cbz	r3, 80063f0 <HAL_SPI_TransmitReceive+0x126>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063dc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80063de:	68c9      	ldr	r1, [r1, #12]
 80063e0:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063e4:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80063e6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80063e8:	3b01      	subs	r3, #1
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80063ee:	4615      	mov	r5, r2
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80063f0:	f7fd ff00 	bl	80041f4 <HAL_GetTick>
 80063f4:	1bc0      	subs	r0, r0, r7
 80063f6:	4540      	cmp	r0, r8
 80063f8:	d3c7      	bcc.n	800638a <HAL_SPI_TransmitReceive+0xc0>
 80063fa:	f1b8 3fff 	cmp.w	r8, #4294967295
 80063fe:	d0c4      	beq.n	800638a <HAL_SPI_TransmitReceive+0xc0>
        errorcode = HAL_TIMEOUT;
 8006400:	2003      	movs	r0, #3
 8006402:	e78b      	b.n	800631c <HAL_SPI_TransmitReceive+0x52>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006404:	b10a      	cbz	r2, 800640a <HAL_SPI_TransmitReceive+0x140>
 8006406:	2e01      	cmp	r6, #1
 8006408:	d108      	bne.n	800641c <HAL_SPI_TransmitReceive+0x152>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800640a:	782a      	ldrb	r2, [r5, #0]
 800640c:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800640e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006410:	3301      	adds	r3, #1
 8006412:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8006414:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006416:	3b01      	subs	r3, #1
 8006418:	b29b      	uxth	r3, r3
 800641a:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 800641c:	2501      	movs	r5, #1
 800641e:	e02d      	b.n	800647c <HAL_SPI_TransmitReceive+0x1b2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006420:	6822      	ldr	r2, [r4, #0]
 8006422:	6893      	ldr	r3, [r2, #8]
 8006424:	079b      	lsls	r3, r3, #30
 8006426:	d50e      	bpl.n	8006446 <HAL_SPI_TransmitReceive+0x17c>
 8006428:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800642a:	b29b      	uxth	r3, r3
 800642c:	b15b      	cbz	r3, 8006446 <HAL_SPI_TransmitReceive+0x17c>
 800642e:	b14d      	cbz	r5, 8006444 <HAL_SPI_TransmitReceive+0x17a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006430:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8006436:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006438:	3301      	adds	r3, #1
 800643a:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 800643c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800643e:	3b01      	subs	r3, #1
 8006440:	b29b      	uxth	r3, r3
 8006442:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8006444:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006446:	6822      	ldr	r2, [r4, #0]
 8006448:	6891      	ldr	r1, [r2, #8]
 800644a:	f011 0101 	ands.w	r1, r1, #1
 800644e:	d00d      	beq.n	800646c <HAL_SPI_TransmitReceive+0x1a2>
 8006450:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006452:	b29b      	uxth	r3, r3
 8006454:	b153      	cbz	r3, 800646c <HAL_SPI_TransmitReceive+0x1a2>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006456:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006458:	68d2      	ldr	r2, [r2, #12]
 800645a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800645c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800645e:	3301      	adds	r3, #1
 8006460:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8006462:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006464:	3b01      	subs	r3, #1
 8006466:	b29b      	uxth	r3, r3
 8006468:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 800646a:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800646c:	f7fd fec2 	bl	80041f4 <HAL_GetTick>
 8006470:	1bc0      	subs	r0, r0, r7
 8006472:	4540      	cmp	r0, r8
 8006474:	d302      	bcc.n	800647c <HAL_SPI_TransmitReceive+0x1b2>
 8006476:	f1b8 3fff 	cmp.w	r8, #4294967295
 800647a:	d1c1      	bne.n	8006400 <HAL_SPI_TransmitReceive+0x136>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800647c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800647e:	b29b      	uxth	r3, r3
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1cd      	bne.n	8006420 <HAL_SPI_TransmitReceive+0x156>
 8006484:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006486:	b29b      	uxth	r3, r3
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1c9      	bne.n	8006420 <HAL_SPI_TransmitReceive+0x156>
 800648c:	e783      	b.n	8006396 <HAL_SPI_TransmitReceive+0xcc>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800648e:	68a3      	ldr	r3, [r4, #8]
 8006490:	2b00      	cmp	r3, #0
 8006492:	f47f af43 	bne.w	800631c <HAL_SPI_TransmitReceive+0x52>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006496:	6823      	ldr	r3, [r4, #0]
 8006498:	9001      	str	r0, [sp, #4]
 800649a:	68da      	ldr	r2, [r3, #12]
 800649c:	9201      	str	r2, [sp, #4]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	9301      	str	r3, [sp, #4]
 80064a2:	9b01      	ldr	r3, [sp, #4]
 80064a4:	e73a      	b.n	800631c <HAL_SPI_TransmitReceive+0x52>
    errorcode = HAL_BUSY;
 80064a6:	2002      	movs	r0, #2
 80064a8:	e738      	b.n	800631c <HAL_SPI_TransmitReceive+0x52>
  __HAL_LOCK(hspi);
 80064aa:	2002      	movs	r0, #2
 80064ac:	e73c      	b.n	8006328 <HAL_SPI_TransmitReceive+0x5e>

080064ae <HAL_SPI_Receive>:
{
 80064ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80064b2:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80064b4:	6843      	ldr	r3, [r0, #4]
 80064b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
{
 80064ba:	4604      	mov	r4, r0
 80064bc:	4689      	mov	r9, r1
 80064be:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80064c0:	d10c      	bne.n	80064dc <HAL_SPI_Receive+0x2e>
 80064c2:	6883      	ldr	r3, [r0, #8]
 80064c4:	b953      	cbnz	r3, 80064dc <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80064c6:	2304      	movs	r3, #4
 80064c8:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80064cc:	4613      	mov	r3, r2
 80064ce:	9500      	str	r5, [sp, #0]
 80064d0:	460a      	mov	r2, r1
 80064d2:	f7ff fefa 	bl	80062ca <HAL_SPI_TransmitReceive>
}
 80064d6:	b003      	add	sp, #12
 80064d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 80064dc:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d07f      	beq.n	80065e4 <HAL_SPI_Receive+0x136>
 80064e4:	2301      	movs	r3, #1
 80064e6:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  tickstart = HAL_GetTick();
 80064ea:	f7fd fe83 	bl	80041f4 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80064ee:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80064f2:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80064f4:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80064f6:	b2d8      	uxtb	r0, r3
 80064f8:	d172      	bne.n	80065e0 <HAL_SPI_Receive+0x132>
  if ((pData == NULL) || (Size == 0U))
 80064fa:	f1b9 0f00 	cmp.w	r9, #0
 80064fe:	d05c      	beq.n	80065ba <HAL_SPI_Receive+0x10c>
 8006500:	2f00      	cmp	r7, #0
 8006502:	d05a      	beq.n	80065ba <HAL_SPI_Receive+0x10c>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006504:	68a2      	ldr	r2, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006506:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800650a:	2600      	movs	r6, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800650c:	2304      	movs	r3, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800650e:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006512:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->TxISR       = NULL;
 8006516:	e9c4 6610 	strd	r6, r6, [r4, #64]	@ 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800651a:	6566      	str	r6, [r4, #84]	@ 0x54
    __HAL_SPI_DISABLE(hspi);
 800651c:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 800651e:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006520:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006522:	6326      	str	r6, [r4, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006524:	86a6      	strh	r6, [r4, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006526:	86e6      	strh	r6, [r4, #54]	@ 0x36
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006528:	d107      	bne.n	800653a <HAL_SPI_Receive+0x8c>
    __HAL_SPI_DISABLE(hspi);
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006530:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006538:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	0656      	lsls	r6, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800653e:	bf5e      	ittt	pl
 8006540:	681a      	ldrpl	r2, [r3, #0]
 8006542:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 8006546:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006548:	68e3      	ldr	r3, [r4, #12]
 800654a:	b1f3      	cbz	r3, 800658a <HAL_SPI_Receive+0xdc>
    while (hspi->RxXferCount > 0U)
 800654c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800654e:	b29b      	uxth	r3, r3
 8006550:	b1fb      	cbz	r3, 8006592 <HAL_SPI_Receive+0xe4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006552:	6823      	ldr	r3, [r4, #0]
 8006554:	689a      	ldr	r2, [r3, #8]
 8006556:	07d2      	lsls	r2, r2, #31
 8006558:	d536      	bpl.n	80065c8 <HAL_SPI_Receive+0x11a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800655a:	68da      	ldr	r2, [r3, #12]
 800655c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800655e:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006562:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8006564:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006566:	3b01      	subs	r3, #1
 8006568:	b29b      	uxth	r3, r3
 800656a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800656c:	e7ee      	b.n	800654c <HAL_SPI_Receive+0x9e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800656e:	6823      	ldr	r3, [r4, #0]
 8006570:	689a      	ldr	r2, [r3, #8]
 8006572:	07d0      	lsls	r0, r2, #31
 8006574:	d518      	bpl.n	80065a8 <HAL_SPI_Receive+0xfa>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006576:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006578:	7b1b      	ldrb	r3, [r3, #12]
 800657a:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800657c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800657e:	3301      	adds	r3, #1
 8006580:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8006582:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006584:	3b01      	subs	r3, #1
 8006586:	b29b      	uxth	r3, r3
 8006588:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 800658a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800658c:	b29b      	uxth	r3, r3
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1ed      	bne.n	800656e <HAL_SPI_Receive+0xc0>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006592:	4642      	mov	r2, r8
 8006594:	4629      	mov	r1, r5
 8006596:	4620      	mov	r0, r4
 8006598:	f7ff fd38 	bl	800600c <SPI_EndRxTransaction>
 800659c:	b9e8      	cbnz	r0, 80065da <HAL_SPI_Receive+0x12c>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800659e:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80065a0:	3800      	subs	r0, #0
 80065a2:	bf18      	it	ne
 80065a4:	2001      	movne	r0, #1
error :
 80065a6:	e008      	b.n	80065ba <HAL_SPI_Receive+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065a8:	f7fd fe24 	bl	80041f4 <HAL_GetTick>
 80065ac:	eba0 0008 	sub.w	r0, r0, r8
 80065b0:	42a8      	cmp	r0, r5
 80065b2:	d3ea      	bcc.n	800658a <HAL_SPI_Receive+0xdc>
 80065b4:	1c69      	adds	r1, r5, #1
 80065b6:	d0e8      	beq.n	800658a <HAL_SPI_Receive+0xdc>
          errorcode = HAL_TIMEOUT;
 80065b8:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80065ba:	2301      	movs	r3, #1
 80065bc:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80065c0:	2300      	movs	r3, #0
 80065c2:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  return errorcode;
 80065c6:	e786      	b.n	80064d6 <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065c8:	f7fd fe14 	bl	80041f4 <HAL_GetTick>
 80065cc:	eba0 0008 	sub.w	r0, r0, r8
 80065d0:	42a8      	cmp	r0, r5
 80065d2:	d3bb      	bcc.n	800654c <HAL_SPI_Receive+0x9e>
 80065d4:	1c6b      	adds	r3, r5, #1
 80065d6:	d0b9      	beq.n	800654c <HAL_SPI_Receive+0x9e>
 80065d8:	e7ee      	b.n	80065b8 <HAL_SPI_Receive+0x10a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065da:	2320      	movs	r3, #32
 80065dc:	6563      	str	r3, [r4, #84]	@ 0x54
 80065de:	e7de      	b.n	800659e <HAL_SPI_Receive+0xf0>
    errorcode = HAL_BUSY;
 80065e0:	2002      	movs	r0, #2
 80065e2:	e7ea      	b.n	80065ba <HAL_SPI_Receive+0x10c>
  __HAL_LOCK(hspi);
 80065e4:	2002      	movs	r0, #2
 80065e6:	e776      	b.n	80064d6 <HAL_SPI_Receive+0x28>

080065e8 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80065e8:	4770      	bx	lr
	...

080065ec <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065ec:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d130      	bne.n	8006656 <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065f4:	2302      	movs	r3, #2
 80065f6:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065fa:	6803      	ldr	r3, [r0, #0]
 80065fc:	68da      	ldr	r2, [r3, #12]
 80065fe:	f042 0201 	orr.w	r2, r2, #1
 8006602:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006604:	4a15      	ldr	r2, [pc, #84]	@ (800665c <HAL_TIM_Base_Start_IT+0x70>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d01a      	beq.n	8006640 <HAL_TIM_Base_Start_IT+0x54>
 800660a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800660e:	d017      	beq.n	8006640 <HAL_TIM_Base_Start_IT+0x54>
 8006610:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 8006614:	4293      	cmp	r3, r2
 8006616:	d013      	beq.n	8006640 <HAL_TIM_Base_Start_IT+0x54>
 8006618:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800661c:	4293      	cmp	r3, r2
 800661e:	d00f      	beq.n	8006640 <HAL_TIM_Base_Start_IT+0x54>
 8006620:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006624:	4293      	cmp	r3, r2
 8006626:	d00b      	beq.n	8006640 <HAL_TIM_Base_Start_IT+0x54>
 8006628:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800662c:	4293      	cmp	r3, r2
 800662e:	d007      	beq.n	8006640 <HAL_TIM_Base_Start_IT+0x54>
 8006630:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8006634:	4293      	cmp	r3, r2
 8006636:	d003      	beq.n	8006640 <HAL_TIM_Base_Start_IT+0x54>
 8006638:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800663c:	4293      	cmp	r3, r2
 800663e:	d104      	bne.n	800664a <HAL_TIM_Base_Start_IT+0x5e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006640:	689a      	ldr	r2, [r3, #8]
 8006642:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006646:	2a06      	cmp	r2, #6
 8006648:	d003      	beq.n	8006652 <HAL_TIM_Base_Start_IT+0x66>
    {
      __HAL_TIM_ENABLE(htim);
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	f042 0201 	orr.w	r2, r2, #1
 8006650:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8006652:	2000      	movs	r0, #0
 8006654:	4770      	bx	lr
    return HAL_ERROR;
 8006656:	2001      	movs	r0, #1
}
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	40010000 	.word	0x40010000

08006660 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8006660:	4770      	bx	lr

08006662 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8006662:	4770      	bx	lr

08006664 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8006664:	4770      	bx	lr

08006666 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8006666:	4770      	bx	lr

08006668 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006668:	6803      	ldr	r3, [r0, #0]
 800666a:	691a      	ldr	r2, [r3, #16]
 800666c:	0791      	lsls	r1, r2, #30
{
 800666e:	b510      	push	{r4, lr}
 8006670:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006672:	d50e      	bpl.n	8006692 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006674:	68da      	ldr	r2, [r3, #12]
 8006676:	0792      	lsls	r2, r2, #30
 8006678:	d50b      	bpl.n	8006692 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800667a:	f06f 0202 	mvn.w	r2, #2
 800667e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006680:	2201      	movs	r2, #1
 8006682:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	079b      	lsls	r3, r3, #30
 8006688:	d077      	beq.n	800677a <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800668a:	f7ff ffea 	bl	8006662 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800668e:	2300      	movs	r3, #0
 8006690:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006692:	6823      	ldr	r3, [r4, #0]
 8006694:	691a      	ldr	r2, [r3, #16]
 8006696:	0750      	lsls	r0, r2, #29
 8006698:	d510      	bpl.n	80066bc <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800669a:	68da      	ldr	r2, [r3, #12]
 800669c:	0751      	lsls	r1, r2, #29
 800669e:	d50d      	bpl.n	80066bc <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066a0:	f06f 0204 	mvn.w	r2, #4
 80066a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066a6:	2202      	movs	r2, #2
 80066a8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80066b0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066b2:	d068      	beq.n	8006786 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80066b4:	f7ff ffd5 	bl	8006662 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066b8:	2300      	movs	r3, #0
 80066ba:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066bc:	6823      	ldr	r3, [r4, #0]
 80066be:	691a      	ldr	r2, [r3, #16]
 80066c0:	0712      	lsls	r2, r2, #28
 80066c2:	d50f      	bpl.n	80066e4 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066c4:	68da      	ldr	r2, [r3, #12]
 80066c6:	0710      	lsls	r0, r2, #28
 80066c8:	d50c      	bpl.n	80066e4 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066ca:	f06f 0208 	mvn.w	r2, #8
 80066ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066d0:	2204      	movs	r2, #4
 80066d2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066d4:	69db      	ldr	r3, [r3, #28]
 80066d6:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80066d8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066da:	d05a      	beq.n	8006792 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80066dc:	f7ff ffc1 	bl	8006662 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066e0:	2300      	movs	r3, #0
 80066e2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80066e4:	6823      	ldr	r3, [r4, #0]
 80066e6:	691a      	ldr	r2, [r3, #16]
 80066e8:	06d2      	lsls	r2, r2, #27
 80066ea:	d510      	bpl.n	800670e <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80066ec:	68da      	ldr	r2, [r3, #12]
 80066ee:	06d0      	lsls	r0, r2, #27
 80066f0:	d50d      	bpl.n	800670e <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066f2:	f06f 0210 	mvn.w	r2, #16
 80066f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066f8:	2208      	movs	r2, #8
 80066fa:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8006702:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006704:	d04b      	beq.n	800679e <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8006706:	f7ff ffac 	bl	8006662 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800670a:	2300      	movs	r3, #0
 800670c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800670e:	6823      	ldr	r3, [r4, #0]
 8006710:	691a      	ldr	r2, [r3, #16]
 8006712:	07d1      	lsls	r1, r2, #31
 8006714:	d508      	bpl.n	8006728 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006716:	68da      	ldr	r2, [r3, #12]
 8006718:	07d2      	lsls	r2, r2, #31
 800671a:	d505      	bpl.n	8006728 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800671c:	f06f 0201 	mvn.w	r2, #1
 8006720:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006722:	4620      	mov	r0, r4
 8006724:	f7fb f944 	bl	80019b0 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006728:	6823      	ldr	r3, [r4, #0]
 800672a:	691a      	ldr	r2, [r3, #16]
 800672c:	0610      	lsls	r0, r2, #24
 800672e:	d508      	bpl.n	8006742 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006730:	68da      	ldr	r2, [r3, #12]
 8006732:	0611      	lsls	r1, r2, #24
 8006734:	d505      	bpl.n	8006742 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006736:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800673a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800673c:	4620      	mov	r0, r4
 800673e:	f000 f8c8 	bl	80068d2 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006742:	6823      	ldr	r3, [r4, #0]
 8006744:	691a      	ldr	r2, [r3, #16]
 8006746:	0652      	lsls	r2, r2, #25
 8006748:	d508      	bpl.n	800675c <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800674a:	68da      	ldr	r2, [r3, #12]
 800674c:	0650      	lsls	r0, r2, #25
 800674e:	d505      	bpl.n	800675c <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006750:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006754:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006756:	4620      	mov	r0, r4
 8006758:	f7ff ff85 	bl	8006666 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800675c:	6823      	ldr	r3, [r4, #0]
 800675e:	691a      	ldr	r2, [r3, #16]
 8006760:	0691      	lsls	r1, r2, #26
 8006762:	d522      	bpl.n	80067aa <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006764:	68da      	ldr	r2, [r3, #12]
 8006766:	0692      	lsls	r2, r2, #26
 8006768:	d51f      	bpl.n	80067aa <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800676a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800676e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006770:	611a      	str	r2, [r3, #16]
}
 8006772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8006776:	f000 b8ab 	b.w	80068d0 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800677a:	f7ff ff71 	bl	8006660 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800677e:	4620      	mov	r0, r4
 8006780:	f7ff ff70 	bl	8006664 <HAL_TIM_PWM_PulseFinishedCallback>
 8006784:	e783      	b.n	800668e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006786:	f7ff ff6b 	bl	8006660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800678a:	4620      	mov	r0, r4
 800678c:	f7ff ff6a 	bl	8006664 <HAL_TIM_PWM_PulseFinishedCallback>
 8006790:	e792      	b.n	80066b8 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006792:	f7ff ff65 	bl	8006660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006796:	4620      	mov	r0, r4
 8006798:	f7ff ff64 	bl	8006664 <HAL_TIM_PWM_PulseFinishedCallback>
 800679c:	e7a0      	b.n	80066e0 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800679e:	f7ff ff5f 	bl	8006660 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067a2:	4620      	mov	r0, r4
 80067a4:	f7ff ff5e 	bl	8006664 <HAL_TIM_PWM_PulseFinishedCallback>
 80067a8:	e7af      	b.n	800670a <HAL_TIM_IRQHandler+0xa2>
}
 80067aa:	bd10      	pop	{r4, pc}

080067ac <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067ac:	4a30      	ldr	r2, [pc, #192]	@ (8006870 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80067ae:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067b0:	4290      	cmp	r0, r2
 80067b2:	d012      	beq.n	80067da <TIM_Base_SetConfig+0x2e>
 80067b4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80067b8:	d00f      	beq.n	80067da <TIM_Base_SetConfig+0x2e>
 80067ba:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80067be:	4290      	cmp	r0, r2
 80067c0:	d00b      	beq.n	80067da <TIM_Base_SetConfig+0x2e>
 80067c2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80067c6:	4290      	cmp	r0, r2
 80067c8:	d007      	beq.n	80067da <TIM_Base_SetConfig+0x2e>
 80067ca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80067ce:	4290      	cmp	r0, r2
 80067d0:	d003      	beq.n	80067da <TIM_Base_SetConfig+0x2e>
 80067d2:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80067d6:	4290      	cmp	r0, r2
 80067d8:	d119      	bne.n	800680e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80067da:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80067e0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067e2:	4a23      	ldr	r2, [pc, #140]	@ (8006870 <TIM_Base_SetConfig+0xc4>)
 80067e4:	4290      	cmp	r0, r2
 80067e6:	d029      	beq.n	800683c <TIM_Base_SetConfig+0x90>
 80067e8:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80067ec:	d026      	beq.n	800683c <TIM_Base_SetConfig+0x90>
 80067ee:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80067f2:	4290      	cmp	r0, r2
 80067f4:	d022      	beq.n	800683c <TIM_Base_SetConfig+0x90>
 80067f6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80067fa:	4290      	cmp	r0, r2
 80067fc:	d01e      	beq.n	800683c <TIM_Base_SetConfig+0x90>
 80067fe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006802:	4290      	cmp	r0, r2
 8006804:	d01a      	beq.n	800683c <TIM_Base_SetConfig+0x90>
 8006806:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800680a:	4290      	cmp	r0, r2
 800680c:	d016      	beq.n	800683c <TIM_Base_SetConfig+0x90>
 800680e:	4a19      	ldr	r2, [pc, #100]	@ (8006874 <TIM_Base_SetConfig+0xc8>)
 8006810:	4290      	cmp	r0, r2
 8006812:	d013      	beq.n	800683c <TIM_Base_SetConfig+0x90>
 8006814:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006818:	4290      	cmp	r0, r2
 800681a:	d00f      	beq.n	800683c <TIM_Base_SetConfig+0x90>
 800681c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006820:	4290      	cmp	r0, r2
 8006822:	d00b      	beq.n	800683c <TIM_Base_SetConfig+0x90>
 8006824:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8006828:	4290      	cmp	r0, r2
 800682a:	d007      	beq.n	800683c <TIM_Base_SetConfig+0x90>
 800682c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006830:	4290      	cmp	r0, r2
 8006832:	d003      	beq.n	800683c <TIM_Base_SetConfig+0x90>
 8006834:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006838:	4290      	cmp	r0, r2
 800683a:	d103      	bne.n	8006844 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800683c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800683e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006842:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006844:	694a      	ldr	r2, [r1, #20]
 8006846:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800684a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800684c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800684e:	688b      	ldr	r3, [r1, #8]
 8006850:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006852:	680b      	ldr	r3, [r1, #0]
 8006854:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006856:	4b06      	ldr	r3, [pc, #24]	@ (8006870 <TIM_Base_SetConfig+0xc4>)
 8006858:	4298      	cmp	r0, r3
 800685a:	d003      	beq.n	8006864 <TIM_Base_SetConfig+0xb8>
 800685c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006860:	4298      	cmp	r0, r3
 8006862:	d101      	bne.n	8006868 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006864:	690b      	ldr	r3, [r1, #16]
 8006866:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006868:	2301      	movs	r3, #1
 800686a:	6143      	str	r3, [r0, #20]
}
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	40010000 	.word	0x40010000
 8006874:	40014000 	.word	0x40014000

08006878 <HAL_TIM_Base_Init>:
{
 8006878:	b510      	push	{r4, lr}
  if (htim == NULL)
 800687a:	4604      	mov	r4, r0
 800687c:	b330      	cbz	r0, 80068cc <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800687e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006882:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006886:	b91b      	cbnz	r3, 8006890 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8006888:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800688c:	f7ff feac 	bl	80065e8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006890:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006892:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006894:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006898:	1d21      	adds	r1, r4, #4
 800689a:	f7ff ff87 	bl	80067ac <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800689e:	2301      	movs	r3, #1
 80068a0:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  return HAL_OK;
 80068a4:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068a6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80068aa:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80068ae:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80068b2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068b6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80068ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068be:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80068c2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80068c6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 80068ca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80068cc:	2001      	movs	r0, #1
 80068ce:	e7fc      	b.n	80068ca <HAL_TIM_Base_Init+0x52>

080068d0 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 80068d0:	4770      	bx	lr

080068d2 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 80068d2:	4770      	bx	lr

080068d4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80068d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80068d8:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 80068dc:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 80068e0:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 80068e4:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
 80068e8:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80068ec:	6809      	ldr	r1, [r1, #0]
 80068ee:	ea43 0308 	orr.w	r3, r3, r8
 80068f2:	b991      	cbnz	r1, 800691a <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80068f4:	ea43 030e 	orr.w	r3, r3, lr
 80068f8:	4313      	orrs	r3, r2
 80068fa:	ea43 030c 	orr.w	r3, r3, ip
 80068fe:	6801      	ldr	r1, [r0, #0]
 8006900:	433b      	orrs	r3, r7
 8006902:	4333      	orrs	r3, r6
 8006904:	432b      	orrs	r3, r5
 8006906:	f421 41ff 	bic.w	r1, r1, #32640	@ 0x7f80
 800690a:	4323      	orrs	r3, r4
 800690c:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 8006910:	430b      	orrs	r3, r1
 8006912:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8006914:	2000      	movs	r0, #0
 8006916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800691a:	6801      	ldr	r1, [r0, #0]
 800691c:	ea43 030e 	orr.w	r3, r3, lr
 8006920:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 8006924:	430b      	orrs	r3, r1
 8006926:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006928:	ea42 030c 	orr.w	r3, r2, ip
 800692c:	6841      	ldr	r1, [r0, #4]
 800692e:	433b      	orrs	r3, r7
 8006930:	4333      	orrs	r3, r6
 8006932:	432b      	orrs	r3, r5
 8006934:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 8006938:	4323      	orrs	r3, r4
 800693a:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800693e:	4313      	orrs	r3, r2
 8006940:	6043      	str	r3, [r0, #4]
 8006942:	e7e7      	b.n	8006914 <FMC_SDRAM_Init+0x40>

08006944 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006944:	68cb      	ldr	r3, [r1, #12]
 8006946:	f103 3cff 	add.w	ip, r3, #4294967295
 800694a:	694b      	ldr	r3, [r1, #20]
{
 800694c:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800694e:	680f      	ldr	r7, [r1, #0]
 8006950:	684c      	ldr	r4, [r1, #4]
 8006952:	688e      	ldr	r6, [r1, #8]
 8006954:	690d      	ldr	r5, [r1, #16]
 8006956:	6989      	ldr	r1, [r1, #24]
 8006958:	3b01      	subs	r3, #1
 800695a:	051b      	lsls	r3, r3, #20
 800695c:	3c01      	subs	r4, #1
 800695e:	3e01      	subs	r6, #1
 8006960:	3d01      	subs	r5, #1
 8006962:	3901      	subs	r1, #1
 8006964:	3f01      	subs	r7, #1
 8006966:	0124      	lsls	r4, r4, #4
 8006968:	0236      	lsls	r6, r6, #8
 800696a:	042d      	lsls	r5, r5, #16
 800696c:	0609      	lsls	r1, r1, #24
 800696e:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8006972:	b95a      	cbnz	r2, 800698c <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006974:	433b      	orrs	r3, r7
 8006976:	4323      	orrs	r3, r4
 8006978:	6882      	ldr	r2, [r0, #8]
 800697a:	4333      	orrs	r3, r6
 800697c:	432b      	orrs	r3, r5
 800697e:	430b      	orrs	r3, r1
 8006980:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8006984:	4313      	orrs	r3, r2
 8006986:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8006988:	2000      	movs	r0, #0
 800698a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800698c:	6882      	ldr	r2, [r0, #8]
 800698e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006992:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 8006996:	431a      	orrs	r2, r3
 8006998:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800699a:	ea44 0306 	orr.w	r3, r4, r6
 800699e:	68c2      	ldr	r2, [r0, #12]
 80069a0:	433b      	orrs	r3, r7
 80069a2:	432b      	orrs	r3, r5
 80069a4:	430b      	orrs	r3, r1
 80069a6:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 80069aa:	4313      	orrs	r3, r2
 80069ac:	60c3      	str	r3, [r0, #12]
 80069ae:	e7eb      	b.n	8006988 <FMC_SDRAM_Timing_Init+0x44>

080069b0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80069b0:	b570      	push	{r4, r5, r6, lr}
 80069b2:	4604      	mov	r4, r0
 80069b4:	4615      	mov	r5, r2
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80069b6:	6902      	ldr	r2, [r0, #16]
 80069b8:	e9d1 3000 	ldrd	r3, r0, [r1]
 80069bc:	4303      	orrs	r3, r0
 80069be:	68c8      	ldr	r0, [r1, #12]
 80069c0:	0d92      	lsrs	r2, r2, #22
 80069c2:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
 80069c6:	0592      	lsls	r2, r2, #22
 80069c8:	4313      	orrs	r3, r2
 80069ca:	688a      	ldr	r2, [r1, #8]
 80069cc:	3a01      	subs	r2, #1
 80069ce:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80069d2:	6123      	str	r3, [r4, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 80069d4:	f7fd fc0e 	bl	80041f4 <HAL_GetTick>
 80069d8:	4606      	mov	r6, r0

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80069da:	69a0      	ldr	r0, [r4, #24]
 80069dc:	f010 0020 	ands.w	r0, r0, #32
 80069e0:	d003      	beq.n	80069ea <FMC_SDRAM_SendCommand+0x3a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069e2:	1c6b      	adds	r3, r5, #1
 80069e4:	d0f9      	beq.n	80069da <FMC_SDRAM_SendCommand+0x2a>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80069e6:	b90d      	cbnz	r5, 80069ec <FMC_SDRAM_SendCommand+0x3c>
      {
        return HAL_TIMEOUT;
 80069e8:	2003      	movs	r0, #3
      }
    }
  }
  return HAL_OK;
}
 80069ea:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80069ec:	f7fd fc02 	bl	80041f4 <HAL_GetTick>
 80069f0:	1b80      	subs	r0, r0, r6
 80069f2:	42a8      	cmp	r0, r5
 80069f4:	d9f1      	bls.n	80069da <FMC_SDRAM_SendCommand+0x2a>
 80069f6:	e7f7      	b.n	80069e8 <FMC_SDRAM_SendCommand+0x38>

080069f8 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80069f8:	6943      	ldr	r3, [r0, #20]
 80069fa:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80069fe:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 8006a02:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8006a06:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 8006a08:	2000      	movs	r0, #0
 8006a0a:	4770      	bx	lr

08006a0c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006a0c:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8006a0e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006a12:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006a14:	f001 fe24 	bl	8008660 <xTaskGetSchedulerState>
 8006a18:	2801      	cmp	r0, #1
 8006a1a:	d003      	beq.n	8006a24 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8006a1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8006a20:	f000 bbf0 	b.w	8007204 <xPortSysTickHandler>
}
 8006a24:	bd08      	pop	{r3, pc}
	...

08006a28 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a28:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a2c:	b92b      	cbnz	r3, 8006a3a <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8006a2e:	4b06      	ldr	r3, [pc, #24]	@ (8006a48 <osKernelInitialize+0x20>)
 8006a30:	6818      	ldr	r0, [r3, #0]
 8006a32:	b928      	cbnz	r0, 8006a40 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006a34:	2201      	movs	r2, #1
 8006a36:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006a38:	4770      	bx	lr
    stat = osErrorISR;
 8006a3a:	f06f 0005 	mvn.w	r0, #5
 8006a3e:	4770      	bx	lr
    } else {
      stat = osError;
 8006a40:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	20001fb8 	.word	0x20001fb8

08006a4c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006a4c:	b510      	push	{r4, lr}
 8006a4e:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a52:	b95c      	cbnz	r4, 8006a6c <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8006a54:	4b08      	ldr	r3, [pc, #32]	@ (8006a78 <osKernelStart+0x2c>)
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	2a01      	cmp	r2, #1
 8006a5a:	d10a      	bne.n	8006a72 <osKernelStart+0x26>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a5c:	4a07      	ldr	r2, [pc, #28]	@ (8006a7c <osKernelStart+0x30>)
 8006a5e:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006a60:	2202      	movs	r2, #2
 8006a62:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006a64:	f001 fb7a 	bl	800815c <vTaskStartScheduler>
      stat = osOK;
 8006a68:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8006a6a:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8006a6c:	f06f 0005 	mvn.w	r0, #5
 8006a70:	e7fb      	b.n	8006a6a <osKernelStart+0x1e>
      stat = osError;
 8006a72:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8006a76:	e7f8      	b.n	8006a6a <osKernelStart+0x1e>
 8006a78:	20001fb8 	.word	0x20001fb8
 8006a7c:	e000ed00 	.word	0xe000ed00

08006a80 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006a80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a82:	b087      	sub	sp, #28
 8006a84:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006a86:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006a88:	460b      	mov	r3, r1
  hTask = NULL;
 8006a8a:	9205      	str	r2, [sp, #20]
 8006a8c:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8006a90:	b9ca      	cbnz	r2, 8006ac6 <osThreadNew+0x46>
 8006a92:	b1c0      	cbz	r0, 8006ac6 <osThreadNew+0x46>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8006a94:	b36c      	cbz	r4, 8006af2 <osThreadNew+0x72>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8006a96:	69a5      	ldr	r5, [r4, #24]
 8006a98:	2d00      	cmp	r5, #0
 8006a9a:	bf08      	it	eq
 8006a9c:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006a9e:	1e69      	subs	r1, r5, #1
 8006aa0:	2937      	cmp	r1, #55	@ 0x37
 8006aa2:	46ac      	mov	ip, r5
 8006aa4:	d82a      	bhi.n	8006afc <osThreadNew+0x7c>
 8006aa6:	6861      	ldr	r1, [r4, #4]
 8006aa8:	07c9      	lsls	r1, r1, #31
 8006aaa:	d427      	bmi.n	8006afc <osThreadNew+0x7c>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8006aac:	6966      	ldr	r6, [r4, #20]
 8006aae:	b16e      	cbz	r6, 8006acc <osThreadNew+0x4c>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006ab0:	08b2      	lsrs	r2, r6, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006ab2:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
      if (attr->name != NULL) {
 8006ab6:	6821      	ldr	r1, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006ab8:	b157      	cbz	r7, 8006ad0 <osThreadNew+0x50>
 8006aba:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8006abe:	d902      	bls.n	8006ac6 <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006ac0:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006ac2:	b104      	cbz	r4, 8006ac6 <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006ac4:	b9e6      	cbnz	r6, 8006b00 <osThreadNew+0x80>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006ac6:	9805      	ldr	r0, [sp, #20]
}
 8006ac8:	b007      	add	sp, #28
 8006aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8006acc:	2280      	movs	r2, #128	@ 0x80
 8006ace:	e7f0      	b.n	8006ab2 <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006ad0:	f1be 0f00 	cmp.w	lr, #0
 8006ad4:	d1f7      	bne.n	8006ac6 <osThreadNew+0x46>
      if (mem == 0) {
 8006ad6:	6924      	ldr	r4, [r4, #16]
 8006ad8:	2c00      	cmp	r4, #0
 8006ada:	d1f4      	bne.n	8006ac6 <osThreadNew+0x46>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006adc:	ac05      	add	r4, sp, #20
 8006ade:	e9cd c400 	strd	ip, r4, [sp]
 8006ae2:	b292      	uxth	r2, r2
 8006ae4:	f001 fb0b 	bl	80080fe <xTaskCreate>
 8006ae8:	2801      	cmp	r0, #1
            hTask = NULL;
 8006aea:	bf1c      	itt	ne
 8006aec:	2300      	movne	r3, #0
 8006aee:	9305      	strne	r3, [sp, #20]
 8006af0:	e7e9      	b.n	8006ac6 <osThreadNew+0x46>
    name = NULL;
 8006af2:	4621      	mov	r1, r4
    prio  = (UBaseType_t)osPriorityNormal;
 8006af4:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 8006af8:	2280      	movs	r2, #128	@ 0x80
 8006afa:	e7ef      	b.n	8006adc <osThreadNew+0x5c>
        return (NULL);
 8006afc:	4610      	mov	r0, r2
 8006afe:	e7e3      	b.n	8006ac8 <osThreadNew+0x48>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006b00:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8006b04:	9500      	str	r5, [sp, #0]
 8006b06:	f001 fac2 	bl	800808e <xTaskCreateStatic>
 8006b0a:	9005      	str	r0, [sp, #20]
 8006b0c:	e7db      	b.n	8006ac6 <osThreadNew+0x46>

08006b0e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006b0e:	b508      	push	{r3, lr}
 8006b10:	f3ef 8205 	mrs	r2, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b14:	b922      	cbnz	r2, 8006b20 <osDelay+0x12>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8006b16:	b108      	cbz	r0, 8006b1c <osDelay+0xe>
      vTaskDelay(ticks);
 8006b18:	f001 fc7e 	bl	8008418 <vTaskDelay>
    stat = osOK;
 8006b1c:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 8006b1e:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8006b20:	f06f 0005 	mvn.w	r0, #5
  return (stat);
 8006b24:	e7fb      	b.n	8006b1e <osDelay+0x10>

08006b26 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006b26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b28:	4604      	mov	r4, r0
 8006b2a:	460e      	mov	r6, r1
 8006b2c:	4615      	mov	r5, r2
 8006b2e:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006b32:	b942      	cbnz	r2, 8006b46 <osSemaphoreNew+0x20>
 8006b34:	b138      	cbz	r0, 8006b46 <osSemaphoreNew+0x20>
 8006b36:	4288      	cmp	r0, r1
 8006b38:	d305      	bcc.n	8006b46 <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 8006b3a:	b155      	cbz	r5, 8006b52 <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006b3c:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 8006b40:	b12b      	cbz	r3, 8006b4e <osSemaphoreNew+0x28>
 8006b42:	2f4f      	cmp	r7, #79	@ 0x4f
 8006b44:	d822      	bhi.n	8006b8c <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 8006b46:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8006b48:	4620      	mov	r0, r4
 8006b4a:	b003      	add	sp, #12
 8006b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006b4e:	2f00      	cmp	r7, #0
 8006b50:	d1f9      	bne.n	8006b46 <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 8006b52:	2c01      	cmp	r4, #1
 8006b54:	d00c      	beq.n	8006b70 <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006b56:	4620      	mov	r0, r4
 8006b58:	4631      	mov	r1, r6
 8006b5a:	f000 fd8d 	bl	8007678 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8006b5e:	4604      	mov	r4, r0
 8006b60:	2800      	cmp	r0, #0
 8006b62:	d0f0      	beq.n	8006b46 <osSemaphoreNew+0x20>
        if (attr != NULL) {
 8006b64:	b985      	cbnz	r5, 8006b88 <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 8006b66:	4629      	mov	r1, r5
 8006b68:	4620      	mov	r0, r4
 8006b6a:	f001 f8cb 	bl	8007d04 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 8006b6e:	e7eb      	b.n	8006b48 <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 8006b70:	2203      	movs	r2, #3
 8006b72:	2100      	movs	r1, #0
 8006b74:	2001      	movs	r0, #1
 8006b76:	f000 fd36 	bl	80075e6 <xQueueGenericCreate>
 8006b7a:	e00e      	b.n	8006b9a <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	f000 fd59 	bl	8007634 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8006b82:	4604      	mov	r4, r0
 8006b84:	2800      	cmp	r0, #0
 8006b86:	d0de      	beq.n	8006b46 <osSemaphoreNew+0x20>
          name = attr->name;
 8006b88:	682d      	ldr	r5, [r5, #0]
 8006b8a:	e7ec      	b.n	8006b66 <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 8006b8c:	2801      	cmp	r0, #1
 8006b8e:	d1f5      	bne.n	8006b7c <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006b90:	2103      	movs	r1, #3
 8006b92:	9100      	str	r1, [sp, #0]
 8006b94:	4611      	mov	r1, r2
 8006b96:	f000 fcd8 	bl	800754a <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 8006b9a:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	d0d2      	beq.n	8006b46 <osSemaphoreNew+0x20>
 8006ba0:	2e00      	cmp	r6, #0
 8006ba2:	d0df      	beq.n	8006b64 <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	4619      	mov	r1, r3
 8006baa:	f000 fd83 	bl	80076b4 <xQueueGenericSend>
 8006bae:	2801      	cmp	r0, #1
 8006bb0:	d0d8      	beq.n	8006b64 <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	f001 f8d0 	bl	8007d58 <vQueueDelete>
      if (hSemaphore != NULL) {
 8006bb8:	e7c5      	b.n	8006b46 <osSemaphoreNew+0x20>

08006bba <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006bba:	b513      	push	{r0, r1, r4, lr}
 8006bbc:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8006bbe:	b328      	cbz	r0, 8006c0c <osSemaphoreAcquire+0x52>
 8006bc0:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8006bc4:	b1cb      	cbz	r3, 8006bfa <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 8006bc6:	bb09      	cbnz	r1, 8006c0c <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006bc8:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8006bca:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006bcc:	f001 f82d 	bl	8007c2a <xQueueReceiveFromISR>
 8006bd0:	2801      	cmp	r0, #1
 8006bd2:	d003      	beq.n	8006bdc <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 8006bd4:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 8006bd8:	b002      	add	sp, #8
 8006bda:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 8006bdc:	9b01      	ldr	r3, [sp, #4]
 8006bde:	b90b      	cbnz	r3, 8006be4 <osSemaphoreAcquire+0x2a>
  stat = osOK;
 8006be0:	2000      	movs	r0, #0
 8006be2:	e7f9      	b.n	8006bd8 <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 8006be4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006be8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bec:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	f3bf 8f6f 	isb	sy
 8006bf8:	e7f2      	b.n	8006be0 <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006bfa:	f000 ff59 	bl	8007ab0 <xQueueSemaphoreTake>
 8006bfe:	2801      	cmp	r0, #1
 8006c00:	d0ee      	beq.n	8006be0 <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 8006c02:	2c00      	cmp	r4, #0
 8006c04:	d0e6      	beq.n	8006bd4 <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 8006c06:	f06f 0001 	mvn.w	r0, #1
 8006c0a:	e7e5      	b.n	8006bd8 <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 8006c0c:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8006c10:	e7e2      	b.n	8006bd8 <osSemaphoreAcquire+0x1e>

08006c12 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006c12:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8006c14:	b318      	cbz	r0, 8006c5e <osSemaphoreRelease+0x4c>
 8006c16:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8006c1a:	b1cb      	cbz	r3, 8006c50 <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 8006c1c:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006c1e:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 8006c20:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006c22:	f000 fe56 	bl	80078d2 <xQueueGiveFromISR>
 8006c26:	2801      	cmp	r0, #1
 8006c28:	d004      	beq.n	8006c34 <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 8006c2a:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 8006c2e:	b003      	add	sp, #12
 8006c30:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 8006c34:	9b01      	ldr	r3, [sp, #4]
 8006c36:	b14b      	cbz	r3, 8006c4c <osSemaphoreRelease+0x3a>
 8006c38:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006c3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c40:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006c44:	f3bf 8f4f 	dsb	sy
 8006c48:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8006c4c:	2000      	movs	r0, #0
 8006c4e:	e7ee      	b.n	8006c2e <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006c50:	461a      	mov	r2, r3
 8006c52:	4619      	mov	r1, r3
 8006c54:	f000 fd2e 	bl	80076b4 <xQueueGenericSend>
 8006c58:	2801      	cmp	r0, #1
 8006c5a:	d0f7      	beq.n	8006c4c <osSemaphoreRelease+0x3a>
 8006c5c:	e7e5      	b.n	8006c2a <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 8006c5e:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8006c62:	e7e4      	b.n	8006c2e <osSemaphoreRelease+0x1c>

08006c64 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  uint32_t count;

  if (hSemaphore == NULL) {
 8006c64:	b130      	cbz	r0, 8006c74 <osSemaphoreGetCount+0x10>
 8006c66:	f3ef 8305 	mrs	r3, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 8006c6a:	b10b      	cbz	r3, 8006c70 <osSemaphoreGetCount+0xc>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 8006c6c:	f001 b83d 	b.w	8007cea <uxQueueMessagesWaitingFromISR>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 8006c70:	f001 b828 	b.w	8007cc4 <uxQueueMessagesWaiting>
  }

  return (count);
}
 8006c74:	4770      	bx	lr

08006c76 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006c76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c78:	4605      	mov	r5, r0
 8006c7a:	460e      	mov	r6, r1
 8006c7c:	4614      	mov	r4, r2
 8006c7e:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006c82:	b11f      	cbz	r7, 8006c8c <osMessageQueueNew+0x16>
  hQueue = NULL;
 8006c84:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8006c86:	4628      	mov	r0, r5
 8006c88:	b003      	add	sp, #12
 8006c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	d0f9      	beq.n	8006c84 <osMessageQueueNew+0xe>
 8006c90:	2900      	cmp	r1, #0
 8006c92:	d0f7      	beq.n	8006c84 <osMessageQueueNew+0xe>
    if (attr != NULL) {
 8006c94:	b1da      	cbz	r2, 8006cce <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006c96:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 8006c9a:	b183      	cbz	r3, 8006cbe <osMessageQueueNew+0x48>
 8006c9c:	2a4f      	cmp	r2, #79	@ 0x4f
 8006c9e:	d9f1      	bls.n	8006c84 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006ca0:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006ca2:	2a00      	cmp	r2, #0
 8006ca4:	d0ee      	beq.n	8006c84 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006ca6:	6966      	ldr	r6, [r4, #20]
 8006ca8:	434d      	muls	r5, r1
 8006caa:	42ae      	cmp	r6, r5
 8006cac:	d3ea      	bcc.n	8006c84 <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006cae:	9700      	str	r7, [sp, #0]
 8006cb0:	f000 fc4b 	bl	800754a <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8006cb4:	4605      	mov	r5, r0
 8006cb6:	2800      	cmp	r0, #0
 8006cb8:	d0e4      	beq.n	8006c84 <osMessageQueueNew+0xe>
        name = attr->name;
 8006cba:	6824      	ldr	r4, [r4, #0]
 8006cbc:	e011      	b.n	8006ce2 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006cbe:	2a00      	cmp	r2, #0
 8006cc0:	d1e0      	bne.n	8006c84 <osMessageQueueNew+0xe>
 8006cc2:	6923      	ldr	r3, [r4, #16]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1dd      	bne.n	8006c84 <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006cc8:	6963      	ldr	r3, [r4, #20]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1da      	bne.n	8006c84 <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 8006cce:	4628      	mov	r0, r5
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	4631      	mov	r1, r6
 8006cd4:	f000 fc87 	bl	80075e6 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8006cd8:	4605      	mov	r5, r0
 8006cda:	2800      	cmp	r0, #0
 8006cdc:	d0d2      	beq.n	8006c84 <osMessageQueueNew+0xe>
      if (attr != NULL) {
 8006cde:	2c00      	cmp	r4, #0
 8006ce0:	d1eb      	bne.n	8006cba <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 8006ce2:	4621      	mov	r1, r4
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	f001 f80d 	bl	8007d04 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8006cea:	e7cc      	b.n	8006c86 <osMessageQueueNew+0x10>

08006cec <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006cec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006cee:	461c      	mov	r4, r3
 8006cf0:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8006cf4:	b1de      	cbz	r6, 8006d2e <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006cf6:	b338      	cbz	r0, 8006d48 <osMessageQueuePut+0x5c>
 8006cf8:	b331      	cbz	r1, 8006d48 <osMessageQueuePut+0x5c>
 8006cfa:	bb2b      	cbnz	r3, 8006d48 <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006cfc:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8006cfe:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006d00:	f000 fd8a 	bl	8007818 <xQueueGenericSendFromISR>
 8006d04:	2801      	cmp	r0, #1
 8006d06:	d003      	beq.n	8006d10 <osMessageQueuePut+0x24>
        stat = osErrorResource;
 8006d08:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 8006d0c:	b002      	add	sp, #8
 8006d0e:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 8006d10:	9b01      	ldr	r3, [sp, #4]
 8006d12:	b90b      	cbnz	r3, 8006d18 <osMessageQueuePut+0x2c>
  stat = osOK;
 8006d14:	2000      	movs	r0, #0
 8006d16:	e7f9      	b.n	8006d0c <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 8006d18:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006d1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d20:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006d24:	f3bf 8f4f 	dsb	sy
 8006d28:	f3bf 8f6f 	isb	sy
 8006d2c:	e7f2      	b.n	8006d14 <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006d2e:	b158      	cbz	r0, 8006d48 <osMessageQueuePut+0x5c>
 8006d30:	b151      	cbz	r1, 8006d48 <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006d32:	4633      	mov	r3, r6
 8006d34:	4622      	mov	r2, r4
 8006d36:	f000 fcbd 	bl	80076b4 <xQueueGenericSend>
 8006d3a:	2801      	cmp	r0, #1
 8006d3c:	d0ea      	beq.n	8006d14 <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 8006d3e:	2c00      	cmp	r4, #0
 8006d40:	d0e2      	beq.n	8006d08 <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 8006d42:	f06f 0001 	mvn.w	r0, #1
 8006d46:	e7e1      	b.n	8006d0c <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 8006d48:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8006d4c:	e7de      	b.n	8006d0c <osMessageQueuePut+0x20>

08006d4e <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006d4e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d50:	461c      	mov	r4, r3
 8006d52:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8006d56:	b1db      	cbz	r3, 8006d90 <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006d58:	b330      	cbz	r0, 8006da8 <osMessageQueueGet+0x5a>
 8006d5a:	b329      	cbz	r1, 8006da8 <osMessageQueueGet+0x5a>
 8006d5c:	bb24      	cbnz	r4, 8006da8 <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006d5e:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8006d60:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006d62:	f000 ff62 	bl	8007c2a <xQueueReceiveFromISR>
 8006d66:	2801      	cmp	r0, #1
 8006d68:	d003      	beq.n	8006d72 <osMessageQueueGet+0x24>
        stat = osErrorResource;
 8006d6a:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 8006d6e:	b003      	add	sp, #12
 8006d70:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 8006d72:	9b01      	ldr	r3, [sp, #4]
 8006d74:	b90b      	cbnz	r3, 8006d7a <osMessageQueueGet+0x2c>
  stat = osOK;
 8006d76:	2000      	movs	r0, #0
 8006d78:	e7f9      	b.n	8006d6e <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 8006d7a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006d7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d82:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006d86:	f3bf 8f4f 	dsb	sy
 8006d8a:	f3bf 8f6f 	isb	sy
 8006d8e:	e7f2      	b.n	8006d76 <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006d90:	b150      	cbz	r0, 8006da8 <osMessageQueueGet+0x5a>
 8006d92:	b149      	cbz	r1, 8006da8 <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006d94:	4622      	mov	r2, r4
 8006d96:	f000 fded 	bl	8007974 <xQueueReceive>
 8006d9a:	2801      	cmp	r0, #1
 8006d9c:	d0eb      	beq.n	8006d76 <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 8006d9e:	2c00      	cmp	r4, #0
 8006da0:	d0e3      	beq.n	8006d6a <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 8006da2:	f06f 0001 	mvn.w	r0, #1
 8006da6:	e7e2      	b.n	8006d6e <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 8006da8:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8006dac:	e7df      	b.n	8006d6e <osMessageQueueGet+0x20>

08006dae <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8006dae:	f7ff bf59 	b.w	8006c64 <osSemaphoreGetCount>
	...

08006db4 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006db4:	4b03      	ldr	r3, [pc, #12]	@ (8006dc4 <vApplicationGetIdleTaskMemory+0x10>)
 8006db6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006db8:	4b03      	ldr	r3, [pc, #12]	@ (8006dc8 <vApplicationGetIdleTaskMemory+0x14>)
 8006dba:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006dbc:	2380      	movs	r3, #128	@ 0x80
 8006dbe:	6013      	str	r3, [r2, #0]
}
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	20001f58 	.word	0x20001f58
 8006dc8:	20001d58 	.word	0x20001d58

08006dcc <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006dcc:	4b03      	ldr	r3, [pc, #12]	@ (8006ddc <vApplicationGetTimerTaskMemory+0x10>)
 8006dce:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006dd0:	4b03      	ldr	r3, [pc, #12]	@ (8006de0 <vApplicationGetTimerTaskMemory+0x14>)
 8006dd2:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006dd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006dd8:	6013      	str	r3, [r2, #0]
}
 8006dda:	4770      	bx	lr
 8006ddc:	20001cf8 	.word	0x20001cf8
 8006de0:	200018f8 	.word	0x200018f8

08006de4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006de4:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006de6:	4b10      	ldr	r3, [pc, #64]	@ (8006e28 <prvInsertBlockIntoFreeList+0x44>)
 8006de8:	461a      	mov	r2, r3
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4283      	cmp	r3, r0
 8006dee:	d3fb      	bcc.n	8006de8 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006df0:	6854      	ldr	r4, [r2, #4]
 8006df2:	1911      	adds	r1, r2, r4
 8006df4:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006df6:	bf01      	itttt	eq
 8006df8:	6841      	ldreq	r1, [r0, #4]
 8006dfa:	4610      	moveq	r0, r2
 8006dfc:	1909      	addeq	r1, r1, r4
 8006dfe:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e00:	6844      	ldr	r4, [r0, #4]
 8006e02:	1901      	adds	r1, r0, r4
 8006e04:	428b      	cmp	r3, r1
 8006e06:	d10c      	bne.n	8006e22 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e08:	4908      	ldr	r1, [pc, #32]	@ (8006e2c <prvInsertBlockIntoFreeList+0x48>)
 8006e0a:	6809      	ldr	r1, [r1, #0]
 8006e0c:	428b      	cmp	r3, r1
 8006e0e:	d003      	beq.n	8006e18 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e10:	6859      	ldr	r1, [r3, #4]
 8006e12:	4421      	add	r1, r4
 8006e14:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e16:	6819      	ldr	r1, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e18:	6001      	str	r1, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e1a:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e1c:	bf18      	it	ne
 8006e1e:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e20:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e22:	4619      	mov	r1, r3
 8006e24:	e7f8      	b.n	8006e18 <prvInsertBlockIntoFreeList+0x34>
 8006e26:	bf00      	nop
 8006e28:	20001fd4 	.word	0x20001fd4
 8006e2c:	20001fd0 	.word	0x20001fd0

08006e30 <pvPortMalloc>:
{
 8006e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e34:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006e36:	f001 f9d7 	bl	80081e8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006e3a:	4942      	ldr	r1, [pc, #264]	@ (8006f44 <pvPortMalloc+0x114>)
 8006e3c:	4d42      	ldr	r5, [pc, #264]	@ (8006f48 <pvPortMalloc+0x118>)
 8006e3e:	680b      	ldr	r3, [r1, #0]
 8006e40:	bb0b      	cbnz	r3, 8006e86 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8006e42:	4a42      	ldr	r2, [pc, #264]	@ (8006f4c <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e44:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e46:	bf1f      	itttt	ne
 8006e48:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e4a:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e4e:	f502 3280 	addne.w	r2, r2, #65536	@ 0x10000
 8006e52:	1a13      	subne	r3, r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e54:	bf0c      	ite	eq
 8006e56:	f44f 3380 	moveq.w	r3, #65536	@ 0x10000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e5a:	4602      	movne	r2, r0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e5c:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e5e:	4e3c      	ldr	r6, [pc, #240]	@ (8006f50 <pvPortMalloc+0x120>)
	uxAddress -= xHeapStructSize;
 8006e60:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e62:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8006e66:	2000      	movs	r0, #0
 8006e68:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e6a:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8006e6c:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e70:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e72:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 8006e76:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e78:	4b36      	ldr	r3, [pc, #216]	@ (8006f54 <pvPortMalloc+0x124>)
 8006e7a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e7c:	4b36      	ldr	r3, [pc, #216]	@ (8006f58 <pvPortMalloc+0x128>)
 8006e7e:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e80:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006e84:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e86:	682e      	ldr	r6, [r5, #0]
 8006e88:	4226      	tst	r6, r4
 8006e8a:	d155      	bne.n	8006f38 <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 8006e8c:	2c00      	cmp	r4, #0
 8006e8e:	d046      	beq.n	8006f1e <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 8006e90:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e94:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e96:	bf1c      	itt	ne
 8006e98:	f023 0307 	bicne.w	r3, r3, #7
 8006e9c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d04a      	beq.n	8006f38 <pvPortMalloc+0x108>
 8006ea2:	4f2d      	ldr	r7, [pc, #180]	@ (8006f58 <pvPortMalloc+0x128>)
 8006ea4:	683c      	ldr	r4, [r7, #0]
 8006ea6:	429c      	cmp	r4, r3
 8006ea8:	d346      	bcc.n	8006f38 <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 8006eaa:	4a29      	ldr	r2, [pc, #164]	@ (8006f50 <pvPortMalloc+0x120>)
 8006eac:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006eae:	6868      	ldr	r0, [r5, #4]
 8006eb0:	4298      	cmp	r0, r3
 8006eb2:	d204      	bcs.n	8006ebe <pvPortMalloc+0x8e>
 8006eb4:	f8d5 c000 	ldr.w	ip, [r5]
 8006eb8:	f1bc 0f00 	cmp.w	ip, #0
 8006ebc:	d115      	bne.n	8006eea <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 8006ebe:	6809      	ldr	r1, [r1, #0]
 8006ec0:	42a9      	cmp	r1, r5
 8006ec2:	d039      	beq.n	8006f38 <pvPortMalloc+0x108>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ec4:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ec6:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006eca:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006ecc:	1ac2      	subs	r2, r0, r3
 8006ece:	2a10      	cmp	r2, #16
 8006ed0:	d912      	bls.n	8006ef8 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006ed2:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ed4:	0741      	lsls	r1, r0, #29
 8006ed6:	d00b      	beq.n	8006ef0 <pvPortMalloc+0xc0>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006edc:	f383 8811 	msr	BASEPRI, r3
 8006ee0:	f3bf 8f6f 	isb	sy
 8006ee4:	f3bf 8f4f 	dsb	sy
 8006ee8:	e7fe      	b.n	8006ee8 <pvPortMalloc+0xb8>
 8006eea:	462a      	mov	r2, r5
 8006eec:	4665      	mov	r5, ip
 8006eee:	e7de      	b.n	8006eae <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ef0:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ef2:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ef4:	f7ff ff76 	bl	8006de4 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ef8:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006efa:	4916      	ldr	r1, [pc, #88]	@ (8006f54 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006efc:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006efe:	4316      	orrs	r6, r2
					xNumberOfSuccessfulAllocations++;
 8006f00:	4a16      	ldr	r2, [pc, #88]	@ (8006f5c <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f02:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f04:	603c      	str	r4, [r7, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8006f06:	2300      	movs	r3, #0
 8006f08:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 8006f0a:	6813      	ldr	r3, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006f0c:	606e      	str	r6, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006f0e:	4284      	cmp	r4, r0
					xNumberOfSuccessfulAllocations++;
 8006f10:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006f14:	bf38      	it	cc
 8006f16:	600c      	strcc	r4, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 8006f18:	6013      	str	r3, [r2, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f1a:	f108 0408 	add.w	r4, r8, #8
	( void ) xTaskResumeAll();
 8006f1e:	f001 fa07 	bl	8008330 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f22:	0763      	lsls	r3, r4, #29
 8006f24:	d00a      	beq.n	8006f3c <pvPortMalloc+0x10c>
 8006f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f2a:	f383 8811 	msr	BASEPRI, r3
 8006f2e:	f3bf 8f6f 	isb	sy
 8006f32:	f3bf 8f4f 	dsb	sy
 8006f36:	e7fe      	b.n	8006f36 <pvPortMalloc+0x106>
void *pvReturn = NULL;
 8006f38:	2400      	movs	r4, #0
 8006f3a:	e7f0      	b.n	8006f1e <pvPortMalloc+0xee>
}
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f42:	bf00      	nop
 8006f44:	20001fd0 	.word	0x20001fd0
 8006f48:	20001fbc 	.word	0x20001fbc
 8006f4c:	20001fdc 	.word	0x20001fdc
 8006f50:	20001fd4 	.word	0x20001fd4
 8006f54:	20001fc8 	.word	0x20001fc8
 8006f58:	20001fcc 	.word	0x20001fcc
 8006f5c:	20001fc4 	.word	0x20001fc4

08006f60 <vPortFree>:
{
 8006f60:	b510      	push	{r4, lr}
	if( pv != NULL )
 8006f62:	4604      	mov	r4, r0
 8006f64:	b390      	cbz	r0, 8006fcc <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f66:	4a1a      	ldr	r2, [pc, #104]	@ (8006fd0 <vPortFree+0x70>)
 8006f68:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006f6c:	6812      	ldr	r2, [r2, #0]
 8006f6e:	4213      	tst	r3, r2
 8006f70:	d108      	bne.n	8006f84 <vPortFree+0x24>
 8006f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f76:	f383 8811 	msr	BASEPRI, r3
 8006f7a:	f3bf 8f6f 	isb	sy
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	e7fe      	b.n	8006f82 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f84:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8006f88:	b141      	cbz	r1, 8006f9c <vPortFree+0x3c>
 8006f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f8e:	f383 8811 	msr	BASEPRI, r3
 8006f92:	f3bf 8f6f 	isb	sy
 8006f96:	f3bf 8f4f 	dsb	sy
 8006f9a:	e7fe      	b.n	8006f9a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f9c:	ea23 0302 	bic.w	r3, r3, r2
 8006fa0:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8006fa4:	f001 f920 	bl	80081e8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006fa8:	4a0a      	ldr	r2, [pc, #40]	@ (8006fd4 <vPortFree+0x74>)
 8006faa:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006fae:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006fb0:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006fb4:	440b      	add	r3, r1
 8006fb6:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006fb8:	f7ff ff14 	bl	8006de4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006fbc:	4a06      	ldr	r2, [pc, #24]	@ (8006fd8 <vPortFree+0x78>)
 8006fbe:	6813      	ldr	r3, [r2, #0]
}
 8006fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8006fc8:	f001 b9b2 	b.w	8008330 <xTaskResumeAll>
}
 8006fcc:	bd10      	pop	{r4, pc}
 8006fce:	bf00      	nop
 8006fd0:	20001fbc 	.word	0x20001fbc
 8006fd4:	20001fcc 	.word	0x20001fcc
 8006fd8:	20001fc0 	.word	0x20001fc0

08006fdc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006fdc:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006fe0:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006fe4:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006fe8:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006fea:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006ff0:	4770      	bx	lr

08006ff2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006ff6:	4770      	bx	lr

08006ff8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8006ff8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006ffa:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006ffc:	689a      	ldr	r2, [r3, #8]
 8006ffe:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007000:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007002:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8007004:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8007006:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007008:	3301      	adds	r3, #1
 800700a:	6003      	str	r3, [r0, #0]
}
 800700c:	4770      	bx	lr

0800700e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800700e:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007010:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007012:	1c63      	adds	r3, r4, #1
 8007014:	d10a      	bne.n	800702c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007016:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007018:	685a      	ldr	r2, [r3, #4]
 800701a:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800701c:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800701e:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8007020:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8007022:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8007024:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8007026:	3301      	adds	r3, #1
 8007028:	6003      	str	r3, [r0, #0]
}
 800702a:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800702c:	f100 0208 	add.w	r2, r0, #8
 8007030:	4613      	mov	r3, r2
 8007032:	6852      	ldr	r2, [r2, #4]
 8007034:	6815      	ldr	r5, [r2, #0]
 8007036:	42a5      	cmp	r5, r4
 8007038:	d9fa      	bls.n	8007030 <vListInsert+0x22>
 800703a:	e7ed      	b.n	8007018 <vListInsert+0xa>

0800703c <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800703c:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 8007040:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007042:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007044:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007046:	6859      	ldr	r1, [r3, #4]
 8007048:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800704a:	bf08      	it	eq
 800704c:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800704e:	2200      	movs	r2, #0
 8007050:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	3a01      	subs	r2, #1
 8007056:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007058:	6818      	ldr	r0, [r3, #0]
}
 800705a:	4770      	bx	lr

0800705c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800705c:	4808      	ldr	r0, [pc, #32]	@ (8007080 <prvPortStartFirstTask+0x24>)
 800705e:	6800      	ldr	r0, [r0, #0]
 8007060:	6800      	ldr	r0, [r0, #0]
 8007062:	f380 8808 	msr	MSP, r0
 8007066:	f04f 0000 	mov.w	r0, #0
 800706a:	f380 8814 	msr	CONTROL, r0
 800706e:	b662      	cpsie	i
 8007070:	b661      	cpsie	f
 8007072:	f3bf 8f4f 	dsb	sy
 8007076:	f3bf 8f6f 	isb	sy
 800707a:	df00      	svc	0
 800707c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800707e:	0000      	.short	0x0000
 8007080:	e000ed08 	.word	0xe000ed08

08007084 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007084:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007094 <vPortEnableVFP+0x10>
 8007088:	6801      	ldr	r1, [r0, #0]
 800708a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800708e:	6001      	str	r1, [r0, #0]
 8007090:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007092:	0000      	.short	0x0000
 8007094:	e000ed88 	.word	0xe000ed88

08007098 <prvTaskExitError>:
{
 8007098:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800709a:	2300      	movs	r3, #0
 800709c:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800709e:	4b0d      	ldr	r3, [pc, #52]	@ (80070d4 <prvTaskExitError+0x3c>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	3301      	adds	r3, #1
 80070a4:	d008      	beq.n	80070b8 <prvTaskExitError+0x20>
 80070a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070aa:	f383 8811 	msr	BASEPRI, r3
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	f3bf 8f4f 	dsb	sy
 80070b6:	e7fe      	b.n	80070b6 <prvTaskExitError+0x1e>
 80070b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070bc:	f383 8811 	msr	BASEPRI, r3
 80070c0:	f3bf 8f6f 	isb	sy
 80070c4:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80070c8:	9b01      	ldr	r3, [sp, #4]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d0fc      	beq.n	80070c8 <prvTaskExitError+0x30>
}
 80070ce:	b002      	add	sp, #8
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	20000080 	.word	0x20000080

080070d8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80070d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80070dc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80070e0:	4b07      	ldr	r3, [pc, #28]	@ (8007100 <pxPortInitialiseStack+0x28>)
 80070e2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80070e6:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80070ea:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80070ee:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80070f2:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80070f6:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80070fa:	3844      	subs	r0, #68	@ 0x44
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop
 8007100:	08007099 	.word	0x08007099
	...

08007110 <SVC_Handler>:
	__asm volatile (
 8007110:	4b07      	ldr	r3, [pc, #28]	@ (8007130 <pxCurrentTCBConst2>)
 8007112:	6819      	ldr	r1, [r3, #0]
 8007114:	6808      	ldr	r0, [r1, #0]
 8007116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800711a:	f380 8809 	msr	PSP, r0
 800711e:	f3bf 8f6f 	isb	sy
 8007122:	f04f 0000 	mov.w	r0, #0
 8007126:	f380 8811 	msr	BASEPRI, r0
 800712a:	4770      	bx	lr
 800712c:	f3af 8000 	nop.w

08007130 <pxCurrentTCBConst2>:
 8007130:	2001251c 	.word	0x2001251c

08007134 <vPortEnterCritical>:
 8007134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007138:	f383 8811 	msr	BASEPRI, r3
 800713c:	f3bf 8f6f 	isb	sy
 8007140:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8007144:	4a0a      	ldr	r2, [pc, #40]	@ (8007170 <vPortEnterCritical+0x3c>)
 8007146:	6813      	ldr	r3, [r2, #0]
 8007148:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800714a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800714c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800714e:	d10e      	bne.n	800716e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007150:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007154:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8007158:	b2db      	uxtb	r3, r3
 800715a:	b143      	cbz	r3, 800716e <vPortEnterCritical+0x3a>
 800715c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007160:	f383 8811 	msr	BASEPRI, r3
 8007164:	f3bf 8f6f 	isb	sy
 8007168:	f3bf 8f4f 	dsb	sy
 800716c:	e7fe      	b.n	800716c <vPortEnterCritical+0x38>
}
 800716e:	4770      	bx	lr
 8007170:	20000080 	.word	0x20000080

08007174 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8007174:	4a08      	ldr	r2, [pc, #32]	@ (8007198 <vPortExitCritical+0x24>)
 8007176:	6813      	ldr	r3, [r2, #0]
 8007178:	b943      	cbnz	r3, 800718c <vPortExitCritical+0x18>
 800717a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800717e:	f383 8811 	msr	BASEPRI, r3
 8007182:	f3bf 8f6f 	isb	sy
 8007186:	f3bf 8f4f 	dsb	sy
 800718a:	e7fe      	b.n	800718a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800718c:	3b01      	subs	r3, #1
 800718e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007190:	b90b      	cbnz	r3, 8007196 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007192:	f383 8811 	msr	BASEPRI, r3
}
 8007196:	4770      	bx	lr
 8007198:	20000080 	.word	0x20000080
 800719c:	00000000 	.word	0x00000000

080071a0 <PendSV_Handler>:
	__asm volatile
 80071a0:	f3ef 8009 	mrs	r0, PSP
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	4b15      	ldr	r3, [pc, #84]	@ (8007200 <pxCurrentTCBConst>)
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	f01e 0f10 	tst.w	lr, #16
 80071b0:	bf08      	it	eq
 80071b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80071b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ba:	6010      	str	r0, [r2, #0]
 80071bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80071c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80071c4:	f380 8811 	msr	BASEPRI, r0
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	f3bf 8f6f 	isb	sy
 80071d0:	f001 f946 	bl	8008460 <vTaskSwitchContext>
 80071d4:	f04f 0000 	mov.w	r0, #0
 80071d8:	f380 8811 	msr	BASEPRI, r0
 80071dc:	bc09      	pop	{r0, r3}
 80071de:	6819      	ldr	r1, [r3, #0]
 80071e0:	6808      	ldr	r0, [r1, #0]
 80071e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e6:	f01e 0f10 	tst.w	lr, #16
 80071ea:	bf08      	it	eq
 80071ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80071f0:	f380 8809 	msr	PSP, r0
 80071f4:	f3bf 8f6f 	isb	sy
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	f3af 8000 	nop.w

08007200 <pxCurrentTCBConst>:
 8007200:	2001251c 	.word	0x2001251c

08007204 <xPortSysTickHandler>:
{
 8007204:	b508      	push	{r3, lr}
	__asm volatile
 8007206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800720a:	f383 8811 	msr	BASEPRI, r3
 800720e:	f3bf 8f6f 	isb	sy
 8007212:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8007216:	f000 fff5 	bl	8008204 <xTaskIncrementTick>
 800721a:	b128      	cbz	r0, 8007228 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800721c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007220:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007224:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8007228:	2300      	movs	r3, #0
 800722a:	f383 8811 	msr	BASEPRI, r3
}
 800722e:	bd08      	pop	{r3, pc}

08007230 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007230:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8007234:	2300      	movs	r3, #0
 8007236:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007238:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800723a:	4b05      	ldr	r3, [pc, #20]	@ (8007250 <vPortSetupTimerInterrupt+0x20>)
 800723c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	fbb3 f3f1 	udiv	r3, r3, r1
 8007246:	3b01      	subs	r3, #1
 8007248:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800724a:	2307      	movs	r3, #7
 800724c:	6113      	str	r3, [r2, #16]
}
 800724e:	4770      	bx	lr
 8007250:	20000074 	.word	0x20000074

08007254 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007254:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 8007258:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800725a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800725e:	4a38      	ldr	r2, [pc, #224]	@ (8007340 <xPortStartScheduler+0xec>)
 8007260:	4291      	cmp	r1, r2
 8007262:	d108      	bne.n	8007276 <xPortStartScheduler+0x22>
	__asm volatile
 8007264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007268:	f383 8811 	msr	BASEPRI, r3
 800726c:	f3bf 8f6f 	isb	sy
 8007270:	f3bf 8f4f 	dsb	sy
 8007274:	e7fe      	b.n	8007274 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007276:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800727a:	4b32      	ldr	r3, [pc, #200]	@ (8007344 <xPortStartScheduler+0xf0>)
 800727c:	429a      	cmp	r2, r3
 800727e:	d108      	bne.n	8007292 <xPortStartScheduler+0x3e>
 8007280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007284:	f383 8811 	msr	BASEPRI, r3
 8007288:	f3bf 8f6f 	isb	sy
 800728c:	f3bf 8f4f 	dsb	sy
 8007290:	e7fe      	b.n	8007290 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007292:	4b2d      	ldr	r3, [pc, #180]	@ (8007348 <xPortStartScheduler+0xf4>)
 8007294:	781a      	ldrb	r2, [r3, #0]
 8007296:	b2d2      	uxtb	r2, r2
 8007298:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800729a:	22ff      	movs	r2, #255	@ 0xff
 800729c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800729e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80072a0:	4a2a      	ldr	r2, [pc, #168]	@ (800734c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80072a8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80072ac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80072b0:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80072b2:	4a27      	ldr	r2, [pc, #156]	@ (8007350 <xPortStartScheduler+0xfc>)
 80072b4:	2307      	movs	r3, #7
 80072b6:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072b8:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 80072bc:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072be:	0609      	lsls	r1, r1, #24
 80072c0:	d40a      	bmi.n	80072d8 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80072c2:	2b03      	cmp	r3, #3
 80072c4:	d011      	beq.n	80072ea <xPortStartScheduler+0x96>
 80072c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ca:	f383 8811 	msr	BASEPRI, r3
 80072ce:	f3bf 8f6f 	isb	sy
 80072d2:	f3bf 8f4f 	dsb	sy
 80072d6:	e7fe      	b.n	80072d6 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 80072d8:	3b01      	subs	r3, #1
 80072da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80072dc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80072e0:	005b      	lsls	r3, r3, #1
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	f88d 3003 	strb.w	r3, [sp, #3]
 80072e8:	e7e6      	b.n	80072b8 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80072ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80072ee:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80072f0:	9b01      	ldr	r3, [sp, #4]
 80072f2:	4a15      	ldr	r2, [pc, #84]	@ (8007348 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80072f4:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80072fc:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8007300:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007304:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007308:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800730c:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007310:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8007314:	f7ff ff8c 	bl	8007230 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007318:	4b0e      	ldr	r3, [pc, #56]	@ (8007354 <xPortStartScheduler+0x100>)
 800731a:	2500      	movs	r5, #0
 800731c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800731e:	f7ff feb1 	bl	8007084 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007322:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8007326:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800732a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800732e:	f7ff fe95 	bl	800705c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007332:	f001 f895 	bl	8008460 <vTaskSwitchContext>
	prvTaskExitError();
 8007336:	f7ff feaf 	bl	8007098 <prvTaskExitError>
}
 800733a:	4628      	mov	r0, r5
 800733c:	b003      	add	sp, #12
 800733e:	bd30      	pop	{r4, r5, pc}
 8007340:	410fc271 	.word	0x410fc271
 8007344:	410fc270 	.word	0x410fc270
 8007348:	e000e400 	.word	0xe000e400
 800734c:	20011fe0 	.word	0x20011fe0
 8007350:	20011fdc 	.word	0x20011fdc
 8007354:	20000080 	.word	0x20000080

08007358 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007358:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800735c:	2b0f      	cmp	r3, #15
 800735e:	d90e      	bls.n	800737e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007360:	4a11      	ldr	r2, [pc, #68]	@ (80073a8 <vPortValidateInterruptPriority+0x50>)
 8007362:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007364:	4a11      	ldr	r2, [pc, #68]	@ (80073ac <vPortValidateInterruptPriority+0x54>)
 8007366:	7812      	ldrb	r2, [r2, #0]
 8007368:	429a      	cmp	r2, r3
 800736a:	d908      	bls.n	800737e <vPortValidateInterruptPriority+0x26>
 800736c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007370:	f383 8811 	msr	BASEPRI, r3
 8007374:	f3bf 8f6f 	isb	sy
 8007378:	f3bf 8f4f 	dsb	sy
 800737c:	e7fe      	b.n	800737c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800737e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007382:	4a0b      	ldr	r2, [pc, #44]	@ (80073b0 <vPortValidateInterruptPriority+0x58>)
 8007384:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8007388:	6812      	ldr	r2, [r2, #0]
 800738a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800738e:	4293      	cmp	r3, r2
 8007390:	d908      	bls.n	80073a4 <vPortValidateInterruptPriority+0x4c>
 8007392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007396:	f383 8811 	msr	BASEPRI, r3
 800739a:	f3bf 8f6f 	isb	sy
 800739e:	f3bf 8f4f 	dsb	sy
 80073a2:	e7fe      	b.n	80073a2 <vPortValidateInterruptPriority+0x4a>
	}
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	e000e3f0 	.word	0xe000e3f0
 80073ac:	20011fe0 	.word	0x20011fe0
 80073b0:	20011fdc 	.word	0x20011fdc

080073b4 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80073b4:	b510      	push	{r4, lr}
 80073b6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073b8:	f7ff febc 	bl	8007134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80073bc:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80073be:	f7ff fed9 	bl	8007174 <vPortExitCritical>

	return xReturn;
}
 80073c2:	fab4 f084 	clz	r0, r4
 80073c6:	0940      	lsrs	r0, r0, #5
 80073c8:	bd10      	pop	{r4, pc}

080073ca <prvCopyDataToQueue>:
{
 80073ca:	b570      	push	{r4, r5, r6, lr}
 80073cc:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80073ce:	6c02      	ldr	r2, [r0, #64]	@ 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073d0:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 80073d2:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80073d4:	b942      	cbnz	r2, 80073e8 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073d6:	6806      	ldr	r6, [r0, #0]
 80073d8:	b99e      	cbnz	r6, 8007402 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80073da:	6880      	ldr	r0, [r0, #8]
 80073dc:	f001 f98e 	bl	80086fc <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80073e0:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80073e2:	3501      	adds	r5, #1
 80073e4:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 80073e6:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80073e8:	b96e      	cbnz	r6, 8007406 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80073ea:	6840      	ldr	r0, [r0, #4]
 80073ec:	f00c faa9 	bl	8013942 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80073f0:	6863      	ldr	r3, [r4, #4]
 80073f2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80073f4:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073f6:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80073f8:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073fa:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80073fc:	bf24      	itt	cs
 80073fe:	6823      	ldrcs	r3, [r4, #0]
 8007400:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8007402:	2000      	movs	r0, #0
 8007404:	e7ed      	b.n	80073e2 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007406:	68c0      	ldr	r0, [r0, #12]
 8007408:	f00c fa9b 	bl	8013942 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800740c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800740e:	68e3      	ldr	r3, [r4, #12]
 8007410:	4251      	negs	r1, r2
 8007412:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007414:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007416:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007418:	4293      	cmp	r3, r2
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800741a:	bf3e      	ittt	cc
 800741c:	68a3      	ldrcc	r3, [r4, #8]
 800741e:	185b      	addcc	r3, r3, r1
 8007420:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8007422:	2e02      	cmp	r6, #2
 8007424:	d1ed      	bne.n	8007402 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007426:	b10d      	cbz	r5, 800742c <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8007428:	3d01      	subs	r5, #1
 800742a:	e7ea      	b.n	8007402 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800742c:	4628      	mov	r0, r5
 800742e:	e7d8      	b.n	80073e2 <prvCopyDataToQueue+0x18>

08007430 <prvCopyDataFromQueue>:
{
 8007430:	4603      	mov	r3, r0
 8007432:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007434:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8007436:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007438:	b16a      	cbz	r2, 8007456 <prvCopyDataFromQueue+0x26>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800743a:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800743c:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800743e:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007440:	428c      	cmp	r4, r1
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007442:	bf28      	it	cs
 8007444:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007446:	60dc      	str	r4, [r3, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007448:	bf28      	it	cs
 800744a:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800744c:	68d9      	ldr	r1, [r3, #12]
}
 800744e:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007452:	f00c ba76 	b.w	8013942 <memcpy>
}
 8007456:	f85d 4b04 	ldr.w	r4, [sp], #4
 800745a:	4770      	bx	lr

0800745c <prvUnlockQueue>:
{
 800745c:	b570      	push	{r4, r5, r6, lr}
 800745e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007460:	f7ff fe68 	bl	8007134 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007464:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007468:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800746c:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800746e:	2d00      	cmp	r5, #0
 8007470:	dc14      	bgt.n	800749c <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8007472:	23ff      	movs	r3, #255	@ 0xff
 8007474:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8007478:	f7ff fe7c 	bl	8007174 <vPortExitCritical>
	taskENTER_CRITICAL();
 800747c:	f7ff fe5a 	bl	8007134 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8007480:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007484:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8007488:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800748a:	2d00      	cmp	r5, #0
 800748c:	dc12      	bgt.n	80074b4 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800748e:	23ff      	movs	r3, #255	@ 0xff
 8007490:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 8007494:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8007498:	f7ff be6c 	b.w	8007174 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800749c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d0e7      	beq.n	8007472 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074a2:	4630      	mov	r0, r6
 80074a4:	f001 f84e 	bl	8008544 <xTaskRemoveFromEventList>
 80074a8:	b108      	cbz	r0, 80074ae <prvUnlockQueue+0x52>
						vTaskMissedYield();
 80074aa:	f001 f8d3 	bl	8008654 <vTaskMissedYield>
			--cTxLock;
 80074ae:	3d01      	subs	r5, #1
 80074b0:	b26d      	sxtb	r5, r5
 80074b2:	e7dc      	b.n	800746e <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074b4:	6923      	ldr	r3, [r4, #16]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d0e9      	beq.n	800748e <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074ba:	4630      	mov	r0, r6
 80074bc:	f001 f842 	bl	8008544 <xTaskRemoveFromEventList>
 80074c0:	b108      	cbz	r0, 80074c6 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80074c2:	f001 f8c7 	bl	8008654 <vTaskMissedYield>
				--cRxLock;
 80074c6:	3d01      	subs	r5, #1
 80074c8:	b26d      	sxtb	r5, r5
 80074ca:	e7de      	b.n	800748a <prvUnlockQueue+0x2e>

080074cc <xQueueGenericReset>:
{
 80074cc:	b538      	push	{r3, r4, r5, lr}
 80074ce:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80074d0:	4604      	mov	r4, r0
 80074d2:	b940      	cbnz	r0, 80074e6 <xQueueGenericReset+0x1a>
 80074d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d8:	f383 8811 	msr	BASEPRI, r3
 80074dc:	f3bf 8f6f 	isb	sy
 80074e0:	f3bf 8f4f 	dsb	sy
 80074e4:	e7fe      	b.n	80074e4 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 80074e6:	f7ff fe25 	bl	8007134 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80074ea:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 80074ee:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80074f0:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80074f2:	434b      	muls	r3, r1
 80074f4:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80074f6:	1a5b      	subs	r3, r3, r1
 80074f8:	441a      	add	r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80074fa:	60a0      	str	r0, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 80074fc:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80074fe:	2000      	movs	r0, #0
 8007500:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007502:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007504:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007508:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800750c:	b9a5      	cbnz	r5, 8007538 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800750e:	6923      	ldr	r3, [r4, #16]
 8007510:	b173      	cbz	r3, 8007530 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007512:	f104 0010 	add.w	r0, r4, #16
 8007516:	f001 f815 	bl	8008544 <xTaskRemoveFromEventList>
 800751a:	b148      	cbz	r0, 8007530 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800751c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007520:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007524:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007528:	f3bf 8f4f 	dsb	sy
 800752c:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8007530:	f7ff fe20 	bl	8007174 <vPortExitCritical>
}
 8007534:	2001      	movs	r0, #1
 8007536:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007538:	f104 0010 	add.w	r0, r4, #16
 800753c:	f7ff fd4e 	bl	8006fdc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007540:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007544:	f7ff fd4a 	bl	8006fdc <vListInitialise>
 8007548:	e7f2      	b.n	8007530 <xQueueGenericReset+0x64>

0800754a <xQueueGenericCreateStatic>:
	{
 800754a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800754c:	460d      	mov	r5, r1
 800754e:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007550:	b940      	cbnz	r0, 8007564 <xQueueGenericCreateStatic+0x1a>
 8007552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007556:	f383 8811 	msr	BASEPRI, r3
 800755a:	f3bf 8f6f 	isb	sy
 800755e:	f3bf 8f4f 	dsb	sy
 8007562:	e7fe      	b.n	8007562 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 8007564:	b943      	cbnz	r3, 8007578 <xQueueGenericCreateStatic+0x2e>
 8007566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800756a:	f383 8811 	msr	BASEPRI, r3
 800756e:	f3bf 8f6f 	isb	sy
 8007572:	f3bf 8f4f 	dsb	sy
 8007576:	e7fe      	b.n	8007576 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007578:	b14a      	cbz	r2, 800758e <xQueueGenericCreateStatic+0x44>
 800757a:	b991      	cbnz	r1, 80075a2 <xQueueGenericCreateStatic+0x58>
 800757c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007580:	f383 8811 	msr	BASEPRI, r3
 8007584:	f3bf 8f6f 	isb	sy
 8007588:	f3bf 8f4f 	dsb	sy
 800758c:	e7fe      	b.n	800758c <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800758e:	b141      	cbz	r1, 80075a2 <xQueueGenericCreateStatic+0x58>
 8007590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007594:	f383 8811 	msr	BASEPRI, r3
 8007598:	f3bf 8f6f 	isb	sy
 800759c:	f3bf 8f4f 	dsb	sy
 80075a0:	e7fe      	b.n	80075a0 <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80075a2:	2350      	movs	r3, #80	@ 0x50
 80075a4:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80075a6:	9b01      	ldr	r3, [sp, #4]
 80075a8:	2b50      	cmp	r3, #80	@ 0x50
 80075aa:	d008      	beq.n	80075be <xQueueGenericCreateStatic+0x74>
 80075ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b0:	f383 8811 	msr	BASEPRI, r3
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	f3bf 8f4f 	dsb	sy
 80075bc:	e7fe      	b.n	80075bc <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80075be:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80075c0:	2d00      	cmp	r5, #0
 80075c2:	bf08      	it	eq
 80075c4:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 80075c6:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80075ca:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
 80075ce:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80075d0:	4620      	mov	r0, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80075d2:	9b01      	ldr	r3, [sp, #4]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80075d4:	f7ff ff7a 	bl	80074cc <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80075d8:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80075dc:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 80075e0:	4620      	mov	r0, r4
 80075e2:	b003      	add	sp, #12
 80075e4:	bd30      	pop	{r4, r5, pc}

080075e6 <xQueueGenericCreate>:
	{
 80075e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075e8:	460d      	mov	r5, r1
 80075ea:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80075ec:	4606      	mov	r6, r0
 80075ee:	b940      	cbnz	r0, 8007602 <xQueueGenericCreate+0x1c>
 80075f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f4:	f383 8811 	msr	BASEPRI, r3
 80075f8:	f3bf 8f6f 	isb	sy
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	e7fe      	b.n	8007600 <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007602:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007604:	3050      	adds	r0, #80	@ 0x50
 8007606:	f7ff fc13 	bl	8006e30 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800760a:	4604      	mov	r4, r0
 800760c:	b170      	cbz	r0, 800762c <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800760e:	2300      	movs	r3, #0
 8007610:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8007614:	b165      	cbz	r5, 8007630 <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007616:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	pxNewQueue->uxItemSize = uxItemSize;
 800761a:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
 800761e:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007620:	2101      	movs	r1, #1
 8007622:	4620      	mov	r0, r4
 8007624:	f7ff ff52 	bl	80074cc <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8007628:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 800762c:	4620      	mov	r0, r4
 800762e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007630:	4603      	mov	r3, r0
 8007632:	e7f2      	b.n	800761a <xQueueGenericCreate+0x34>

08007634 <xQueueCreateCountingSemaphoreStatic>:
	{
 8007634:	b513      	push	{r0, r1, r4, lr}
 8007636:	4613      	mov	r3, r2
 8007638:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800763a:	b940      	cbnz	r0, 800764e <xQueueCreateCountingSemaphoreStatic+0x1a>
 800763c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007640:	f383 8811 	msr	BASEPRI, r3
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	f3bf 8f4f 	dsb	sy
 800764c:	e7fe      	b.n	800764c <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800764e:	4288      	cmp	r0, r1
 8007650:	d208      	bcs.n	8007664 <xQueueCreateCountingSemaphoreStatic+0x30>
 8007652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007656:	f383 8811 	msr	BASEPRI, r3
 800765a:	f3bf 8f6f 	isb	sy
 800765e:	f3bf 8f4f 	dsb	sy
 8007662:	e7fe      	b.n	8007662 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007664:	2202      	movs	r2, #2
 8007666:	9200      	str	r2, [sp, #0]
 8007668:	2200      	movs	r2, #0
 800766a:	4611      	mov	r1, r2
 800766c:	f7ff ff6d 	bl	800754a <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8007670:	b100      	cbz	r0, 8007674 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007672:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8007674:	b002      	add	sp, #8
 8007676:	bd10      	pop	{r4, pc}

08007678 <xQueueCreateCountingSemaphore>:
	{
 8007678:	b510      	push	{r4, lr}
 800767a:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800767c:	b940      	cbnz	r0, 8007690 <xQueueCreateCountingSemaphore+0x18>
 800767e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007682:	f383 8811 	msr	BASEPRI, r3
 8007686:	f3bf 8f6f 	isb	sy
 800768a:	f3bf 8f4f 	dsb	sy
 800768e:	e7fe      	b.n	800768e <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007690:	4288      	cmp	r0, r1
 8007692:	d208      	bcs.n	80076a6 <xQueueCreateCountingSemaphore+0x2e>
 8007694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007698:	f383 8811 	msr	BASEPRI, r3
 800769c:	f3bf 8f6f 	isb	sy
 80076a0:	f3bf 8f4f 	dsb	sy
 80076a4:	e7fe      	b.n	80076a4 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80076a6:	2202      	movs	r2, #2
 80076a8:	2100      	movs	r1, #0
 80076aa:	f7ff ff9c 	bl	80075e6 <xQueueGenericCreate>
		if( xHandle != NULL )
 80076ae:	b100      	cbz	r0, 80076b2 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80076b0:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 80076b2:	bd10      	pop	{r4, pc}

080076b4 <xQueueGenericSend>:
{
 80076b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80076b8:	460f      	mov	r7, r1
 80076ba:	9201      	str	r2, [sp, #4]
 80076bc:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 80076be:	4604      	mov	r4, r0
 80076c0:	b940      	cbnz	r0, 80076d4 <xQueueGenericSend+0x20>
 80076c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c6:	f383 8811 	msr	BASEPRI, r3
 80076ca:	f3bf 8f6f 	isb	sy
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	e7fe      	b.n	80076d2 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076d4:	b951      	cbnz	r1, 80076ec <xQueueGenericSend+0x38>
 80076d6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80076d8:	b143      	cbz	r3, 80076ec <xQueueGenericSend+0x38>
 80076da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076de:	f383 8811 	msr	BASEPRI, r3
 80076e2:	f3bf 8f6f 	isb	sy
 80076e6:	f3bf 8f4f 	dsb	sy
 80076ea:	e7fe      	b.n	80076ea <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80076ec:	2e02      	cmp	r6, #2
 80076ee:	d10b      	bne.n	8007708 <xQueueGenericSend+0x54>
 80076f0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d008      	beq.n	8007708 <xQueueGenericSend+0x54>
 80076f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076fa:	f383 8811 	msr	BASEPRI, r3
 80076fe:	f3bf 8f6f 	isb	sy
 8007702:	f3bf 8f4f 	dsb	sy
 8007706:	e7fe      	b.n	8007706 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007708:	f000 ffaa 	bl	8008660 <xTaskGetSchedulerState>
 800770c:	4605      	mov	r5, r0
 800770e:	b330      	cbz	r0, 800775e <xQueueGenericSend+0xaa>
 8007710:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8007712:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8007716:	f7ff fd0d 	bl	8007134 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800771a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800771c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800771e:	429a      	cmp	r2, r3
 8007720:	d301      	bcc.n	8007726 <xQueueGenericSend+0x72>
 8007722:	2e02      	cmp	r6, #2
 8007724:	d127      	bne.n	8007776 <xQueueGenericSend+0xc2>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007726:	4632      	mov	r2, r6
 8007728:	4639      	mov	r1, r7
 800772a:	4620      	mov	r0, r4
 800772c:	f7ff fe4d 	bl	80073ca <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007730:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007732:	b11b      	cbz	r3, 800773c <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007734:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007738:	f000 ff04 	bl	8008544 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800773c:	b148      	cbz	r0, 8007752 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800773e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007742:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007746:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800774a:	f3bf 8f4f 	dsb	sy
 800774e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007752:	f7ff fd0f 	bl	8007174 <vPortExitCritical>
				return pdPASS;
 8007756:	2001      	movs	r0, #1
}
 8007758:	b004      	add	sp, #16
 800775a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800775e:	9b01      	ldr	r3, [sp, #4]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d0d6      	beq.n	8007712 <xQueueGenericSend+0x5e>
 8007764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007768:	f383 8811 	msr	BASEPRI, r3
 800776c:	f3bf 8f6f 	isb	sy
 8007770:	f3bf 8f4f 	dsb	sy
 8007774:	e7fe      	b.n	8007774 <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007776:	9b01      	ldr	r3, [sp, #4]
 8007778:	b91b      	cbnz	r3, 8007782 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 800777a:	f7ff fcfb 	bl	8007174 <vPortExitCritical>
					return errQUEUE_FULL;
 800777e:	2000      	movs	r0, #0
 8007780:	e7ea      	b.n	8007758 <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 8007782:	b915      	cbnz	r5, 800778a <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007784:	a802      	add	r0, sp, #8
 8007786:	f000 ff1d 	bl	80085c4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800778a:	f7ff fcf3 	bl	8007174 <vPortExitCritical>
		vTaskSuspendAll();
 800778e:	f000 fd2b 	bl	80081e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007792:	f7ff fccf 	bl	8007134 <vPortEnterCritical>
 8007796:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800779a:	2bff      	cmp	r3, #255	@ 0xff
 800779c:	bf08      	it	eq
 800779e:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 80077a2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80077a6:	2bff      	cmp	r3, #255	@ 0xff
 80077a8:	bf08      	it	eq
 80077aa:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 80077ae:	f7ff fce1 	bl	8007174 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077b2:	a901      	add	r1, sp, #4
 80077b4:	a802      	add	r0, sp, #8
 80077b6:	f000 ff11 	bl	80085dc <xTaskCheckForTimeOut>
 80077ba:	bb38      	cbnz	r0, 800780c <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80077bc:	f7ff fcba 	bl	8007134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80077c0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80077c2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d10e      	bne.n	80077e6 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80077c8:	f7ff fcd4 	bl	8007174 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80077cc:	9901      	ldr	r1, [sp, #4]
 80077ce:	f104 0010 	add.w	r0, r4, #16
 80077d2:	f000 fe7f 	bl	80084d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80077d6:	4620      	mov	r0, r4
 80077d8:	f7ff fe40 	bl	800745c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80077dc:	f000 fda8 	bl	8008330 <xTaskResumeAll>
 80077e0:	b148      	cbz	r0, 80077f6 <xQueueGenericSend+0x142>
 80077e2:	2501      	movs	r5, #1
 80077e4:	e797      	b.n	8007716 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 80077e6:	f7ff fcc5 	bl	8007174 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80077ea:	4620      	mov	r0, r4
 80077ec:	f7ff fe36 	bl	800745c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80077f0:	f000 fd9e 	bl	8008330 <xTaskResumeAll>
 80077f4:	e7f5      	b.n	80077e2 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 80077f6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80077fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077fe:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007802:	f3bf 8f4f 	dsb	sy
 8007806:	f3bf 8f6f 	isb	sy
 800780a:	e7ea      	b.n	80077e2 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 800780c:	4620      	mov	r0, r4
 800780e:	f7ff fe25 	bl	800745c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007812:	f000 fd8d 	bl	8008330 <xTaskResumeAll>
			return errQUEUE_FULL;
 8007816:	e7b2      	b.n	800777e <xQueueGenericSend+0xca>

08007818 <xQueueGenericSendFromISR>:
{
 8007818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800781c:	4689      	mov	r9, r1
 800781e:	4617      	mov	r7, r2
 8007820:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8007822:	4604      	mov	r4, r0
 8007824:	b940      	cbnz	r0, 8007838 <xQueueGenericSendFromISR+0x20>
 8007826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800782a:	f383 8811 	msr	BASEPRI, r3
 800782e:	f3bf 8f6f 	isb	sy
 8007832:	f3bf 8f4f 	dsb	sy
 8007836:	e7fe      	b.n	8007836 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007838:	b951      	cbnz	r1, 8007850 <xQueueGenericSendFromISR+0x38>
 800783a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800783c:	b143      	cbz	r3, 8007850 <xQueueGenericSendFromISR+0x38>
 800783e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007842:	f383 8811 	msr	BASEPRI, r3
 8007846:	f3bf 8f6f 	isb	sy
 800784a:	f3bf 8f4f 	dsb	sy
 800784e:	e7fe      	b.n	800784e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007850:	2e02      	cmp	r6, #2
 8007852:	d10b      	bne.n	800786c <xQueueGenericSendFromISR+0x54>
 8007854:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007856:	2b01      	cmp	r3, #1
 8007858:	d008      	beq.n	800786c <xQueueGenericSendFromISR+0x54>
 800785a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800785e:	f383 8811 	msr	BASEPRI, r3
 8007862:	f3bf 8f6f 	isb	sy
 8007866:	f3bf 8f4f 	dsb	sy
 800786a:	e7fe      	b.n	800786a <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800786c:	f7ff fd74 	bl	8007358 <vPortValidateInterruptPriority>
	__asm volatile
 8007870:	f3ef 8811 	mrs	r8, BASEPRI
 8007874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007878:	f383 8811 	msr	BASEPRI, r3
 800787c:	f3bf 8f6f 	isb	sy
 8007880:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007884:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007886:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007888:	429a      	cmp	r2, r3
 800788a:	d301      	bcc.n	8007890 <xQueueGenericSendFromISR+0x78>
 800788c:	2e02      	cmp	r6, #2
 800788e:	d11e      	bne.n	80078ce <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 8007890:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007894:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8007896:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007898:	4632      	mov	r2, r6
 800789a:	4649      	mov	r1, r9
 800789c:	4620      	mov	r0, r4
 800789e:	f7ff fd94 	bl	80073ca <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80078a2:	1c6b      	adds	r3, r5, #1
 80078a4:	d10e      	bne.n	80078c4 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078a6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80078a8:	b13b      	cbz	r3, 80078ba <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078aa:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80078ae:	f000 fe49 	bl	8008544 <xTaskRemoveFromEventList>
 80078b2:	b110      	cbz	r0, 80078ba <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 80078b4:	b10f      	cbz	r7, 80078ba <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80078b6:	2301      	movs	r3, #1
 80078b8:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 80078ba:	2001      	movs	r0, #1
	__asm volatile
 80078bc:	f388 8811 	msr	BASEPRI, r8
}
 80078c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80078c4:	3501      	adds	r5, #1
 80078c6:	b26d      	sxtb	r5, r5
 80078c8:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 80078cc:	e7f5      	b.n	80078ba <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 80078ce:	2000      	movs	r0, #0
 80078d0:	e7f4      	b.n	80078bc <xQueueGenericSendFromISR+0xa4>

080078d2 <xQueueGiveFromISR>:
{
 80078d2:	b570      	push	{r4, r5, r6, lr}
 80078d4:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80078d6:	4604      	mov	r4, r0
 80078d8:	b940      	cbnz	r0, 80078ec <xQueueGiveFromISR+0x1a>
	__asm volatile
 80078da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078de:	f383 8811 	msr	BASEPRI, r3
 80078e2:	f3bf 8f6f 	isb	sy
 80078e6:	f3bf 8f4f 	dsb	sy
 80078ea:	e7fe      	b.n	80078ea <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 80078ec:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80078ee:	b143      	cbz	r3, 8007902 <xQueueGiveFromISR+0x30>
 80078f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f4:	f383 8811 	msr	BASEPRI, r3
 80078f8:	f3bf 8f6f 	isb	sy
 80078fc:	f3bf 8f4f 	dsb	sy
 8007900:	e7fe      	b.n	8007900 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007902:	6803      	ldr	r3, [r0, #0]
 8007904:	b953      	cbnz	r3, 800791c <xQueueGiveFromISR+0x4a>
 8007906:	6883      	ldr	r3, [r0, #8]
 8007908:	b143      	cbz	r3, 800791c <xQueueGiveFromISR+0x4a>
 800790a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800790e:	f383 8811 	msr	BASEPRI, r3
 8007912:	f3bf 8f6f 	isb	sy
 8007916:	f3bf 8f4f 	dsb	sy
 800791a:	e7fe      	b.n	800791a <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800791c:	f7ff fd1c 	bl	8007358 <vPortValidateInterruptPriority>
	__asm volatile
 8007920:	f3ef 8611 	mrs	r6, BASEPRI
 8007924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007928:	f383 8811 	msr	BASEPRI, r3
 800792c:	f3bf 8f6f 	isb	sy
 8007930:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007934:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007936:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007938:	4293      	cmp	r3, r2
 800793a:	d919      	bls.n	8007970 <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 800793c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007940:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8007942:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8007944:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007946:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 8007948:	d10d      	bne.n	8007966 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800794a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800794c:	b13b      	cbz	r3, 800795e <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800794e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007952:	f000 fdf7 	bl	8008544 <xTaskRemoveFromEventList>
 8007956:	b110      	cbz	r0, 800795e <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 8007958:	b10d      	cbz	r5, 800795e <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800795a:	2301      	movs	r3, #1
 800795c:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 800795e:	2001      	movs	r0, #1
	__asm volatile
 8007960:	f386 8811 	msr	BASEPRI, r6
}
 8007964:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007966:	3301      	adds	r3, #1
 8007968:	b25b      	sxtb	r3, r3
 800796a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800796e:	e7f6      	b.n	800795e <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 8007970:	2000      	movs	r0, #0
 8007972:	e7f5      	b.n	8007960 <xQueueGiveFromISR+0x8e>

08007974 <xQueueReceive>:
{
 8007974:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007978:	460e      	mov	r6, r1
 800797a:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800797c:	4604      	mov	r4, r0
 800797e:	b940      	cbnz	r0, 8007992 <xQueueReceive+0x1e>
	__asm volatile
 8007980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007984:	f383 8811 	msr	BASEPRI, r3
 8007988:	f3bf 8f6f 	isb	sy
 800798c:	f3bf 8f4f 	dsb	sy
 8007990:	e7fe      	b.n	8007990 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007992:	b951      	cbnz	r1, 80079aa <xQueueReceive+0x36>
 8007994:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007996:	b143      	cbz	r3, 80079aa <xQueueReceive+0x36>
 8007998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800799c:	f383 8811 	msr	BASEPRI, r3
 80079a0:	f3bf 8f6f 	isb	sy
 80079a4:	f3bf 8f4f 	dsb	sy
 80079a8:	e7fe      	b.n	80079a8 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079aa:	f000 fe59 	bl	8008660 <xTaskGetSchedulerState>
 80079ae:	4605      	mov	r5, r0
 80079b0:	b318      	cbz	r0, 80079fa <xQueueReceive+0x86>
 80079b2:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 80079b4:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 80079b8:	f7ff fbbc 	bl	8007134 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079bc:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079be:	b347      	cbz	r7, 8007a12 <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80079c0:	4631      	mov	r1, r6
 80079c2:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80079c4:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80079c6:	f7ff fd33 	bl	8007430 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80079ca:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079cc:	6923      	ldr	r3, [r4, #16]
 80079ce:	b173      	cbz	r3, 80079ee <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079d0:	f104 0010 	add.w	r0, r4, #16
 80079d4:	f000 fdb6 	bl	8008544 <xTaskRemoveFromEventList>
 80079d8:	b148      	cbz	r0, 80079ee <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 80079da:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80079de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079e2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80079e6:	f3bf 8f4f 	dsb	sy
 80079ea:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80079ee:	f7ff fbc1 	bl	8007174 <vPortExitCritical>
				return pdPASS;
 80079f2:	2001      	movs	r0, #1
}
 80079f4:	b004      	add	sp, #16
 80079f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079fa:	9b01      	ldr	r3, [sp, #4]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d0d9      	beq.n	80079b4 <xQueueReceive+0x40>
 8007a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a04:	f383 8811 	msr	BASEPRI, r3
 8007a08:	f3bf 8f6f 	isb	sy
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	e7fe      	b.n	8007a10 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a12:	9b01      	ldr	r3, [sp, #4]
 8007a14:	b91b      	cbnz	r3, 8007a1e <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 8007a16:	f7ff fbad 	bl	8007174 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8007a1a:	2000      	movs	r0, #0
 8007a1c:	e7ea      	b.n	80079f4 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 8007a1e:	b915      	cbnz	r5, 8007a26 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a20:	a802      	add	r0, sp, #8
 8007a22:	f000 fdcf 	bl	80085c4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007a26:	f7ff fba5 	bl	8007174 <vPortExitCritical>
		vTaskSuspendAll();
 8007a2a:	f000 fbdd 	bl	80081e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a2e:	f7ff fb81 	bl	8007134 <vPortEnterCritical>
 8007a32:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007a36:	2bff      	cmp	r3, #255	@ 0xff
 8007a38:	bf08      	it	eq
 8007a3a:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8007a3e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007a42:	2bff      	cmp	r3, #255	@ 0xff
 8007a44:	bf08      	it	eq
 8007a46:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8007a4a:	f7ff fb93 	bl	8007174 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a4e:	a901      	add	r1, sp, #4
 8007a50:	a802      	add	r0, sp, #8
 8007a52:	f000 fdc3 	bl	80085dc <xTaskCheckForTimeOut>
 8007a56:	bb00      	cbnz	r0, 8007a9a <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a58:	4620      	mov	r0, r4
 8007a5a:	f7ff fcab 	bl	80073b4 <prvIsQueueEmpty>
 8007a5e:	b1b0      	cbz	r0, 8007a8e <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007a60:	9901      	ldr	r1, [sp, #4]
 8007a62:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007a66:	f000 fd35 	bl	80084d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	f7ff fcf6 	bl	800745c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a70:	f000 fc5e 	bl	8008330 <xTaskResumeAll>
 8007a74:	b948      	cbnz	r0, 8007a8a <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8007a76:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007a7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a7e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007a82:	f3bf 8f4f 	dsb	sy
 8007a86:	f3bf 8f6f 	isb	sy
 8007a8a:	2501      	movs	r5, #1
 8007a8c:	e794      	b.n	80079b8 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 8007a8e:	4620      	mov	r0, r4
 8007a90:	f7ff fce4 	bl	800745c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a94:	f000 fc4c 	bl	8008330 <xTaskResumeAll>
 8007a98:	e7f7      	b.n	8007a8a <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	f7ff fcde 	bl	800745c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007aa0:	f000 fc46 	bl	8008330 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	f7ff fc85 	bl	80073b4 <prvIsQueueEmpty>
 8007aaa:	2800      	cmp	r0, #0
 8007aac:	d0ed      	beq.n	8007a8a <xQueueReceive+0x116>
 8007aae:	e7b4      	b.n	8007a1a <xQueueReceive+0xa6>

08007ab0 <xQueueSemaphoreTake>:
{
 8007ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ab2:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8007ab4:	4604      	mov	r4, r0
{
 8007ab6:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007ab8:	b940      	cbnz	r0, 8007acc <xQueueSemaphoreTake+0x1c>
 8007aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007abe:	f383 8811 	msr	BASEPRI, r3
 8007ac2:	f3bf 8f6f 	isb	sy
 8007ac6:	f3bf 8f4f 	dsb	sy
 8007aca:	e7fe      	b.n	8007aca <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8007acc:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8007ace:	b145      	cbz	r5, 8007ae2 <xQueueSemaphoreTake+0x32>
 8007ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad4:	f383 8811 	msr	BASEPRI, r3
 8007ad8:	f3bf 8f6f 	isb	sy
 8007adc:	f3bf 8f4f 	dsb	sy
 8007ae0:	e7fe      	b.n	8007ae0 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ae2:	f000 fdbd 	bl	8008660 <xTaskGetSchedulerState>
 8007ae6:	4606      	mov	r6, r0
 8007ae8:	b320      	cbz	r0, 8007b34 <xQueueSemaphoreTake+0x84>
 8007aea:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8007aec:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 8007aee:	f7ff fb21 	bl	8007134 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007af2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007af4:	b353      	cbz	r3, 8007b4c <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007af6:	3b01      	subs	r3, #1
 8007af8:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007afa:	6823      	ldr	r3, [r4, #0]
 8007afc:	b913      	cbnz	r3, 8007b04 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007afe:	f000 fe8d 	bl	800881c <pvTaskIncrementMutexHeldCount>
 8007b02:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b04:	6923      	ldr	r3, [r4, #16]
 8007b06:	b173      	cbz	r3, 8007b26 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b08:	f104 0010 	add.w	r0, r4, #16
 8007b0c:	f000 fd1a 	bl	8008544 <xTaskRemoveFromEventList>
 8007b10:	b148      	cbz	r0, 8007b26 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 8007b12:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007b16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b1a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007b26:	f7ff fb25 	bl	8007174 <vPortExitCritical>
				return pdPASS;
 8007b2a:	2001      	movs	r0, #1
}
 8007b2c:	b005      	add	sp, #20
 8007b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b30:	4635      	mov	r5, r6
 8007b32:	e7db      	b.n	8007aec <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b34:	9b01      	ldr	r3, [sp, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d0fa      	beq.n	8007b30 <xQueueSemaphoreTake+0x80>
 8007b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b3e:	f383 8811 	msr	BASEPRI, r3
 8007b42:	f3bf 8f6f 	isb	sy
 8007b46:	f3bf 8f4f 	dsb	sy
 8007b4a:	e7fe      	b.n	8007b4a <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b4c:	9b01      	ldr	r3, [sp, #4]
 8007b4e:	b953      	cbnz	r3, 8007b66 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007b50:	2d00      	cmp	r5, #0
 8007b52:	d066      	beq.n	8007c22 <xQueueSemaphoreTake+0x172>
 8007b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b58:	f383 8811 	msr	BASEPRI, r3
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f3bf 8f4f 	dsb	sy
 8007b64:	e7fe      	b.n	8007b64 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 8007b66:	b916      	cbnz	r6, 8007b6e <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b68:	a802      	add	r0, sp, #8
 8007b6a:	f000 fd2b 	bl	80085c4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007b6e:	f7ff fb01 	bl	8007174 <vPortExitCritical>
		vTaskSuspendAll();
 8007b72:	f000 fb39 	bl	80081e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b76:	f7ff fadd 	bl	8007134 <vPortEnterCritical>
 8007b7a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007b7e:	2bff      	cmp	r3, #255	@ 0xff
 8007b80:	bf08      	it	eq
 8007b82:	f884 7044 	strbeq.w	r7, [r4, #68]	@ 0x44
 8007b86:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007b8a:	2bff      	cmp	r3, #255	@ 0xff
 8007b8c:	bf08      	it	eq
 8007b8e:	f884 7045 	strbeq.w	r7, [r4, #69]	@ 0x45
 8007b92:	f7ff faef 	bl	8007174 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b96:	a901      	add	r1, sp, #4
 8007b98:	a802      	add	r0, sp, #8
 8007b9a:	f000 fd1f 	bl	80085dc <xTaskCheckForTimeOut>
 8007b9e:	bb50      	cbnz	r0, 8007bf6 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	f7ff fc07 	bl	80073b4 <prvIsQueueEmpty>
 8007ba6:	b300      	cbz	r0, 8007bea <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ba8:	6823      	ldr	r3, [r4, #0]
 8007baa:	b93b      	cbnz	r3, 8007bbc <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 8007bac:	f7ff fac2 	bl	8007134 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007bb0:	68a0      	ldr	r0, [r4, #8]
 8007bb2:	f000 fd65 	bl	8008680 <xTaskPriorityInherit>
 8007bb6:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8007bb8:	f7ff fadc 	bl	8007174 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007bbc:	9901      	ldr	r1, [sp, #4]
 8007bbe:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007bc2:	f000 fc87 	bl	80084d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007bc6:	4620      	mov	r0, r4
 8007bc8:	f7ff fc48 	bl	800745c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007bcc:	f000 fbb0 	bl	8008330 <xTaskResumeAll>
 8007bd0:	b948      	cbnz	r0, 8007be6 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 8007bd2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007bd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bda:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007bde:	f3bf 8f4f 	dsb	sy
 8007be2:	f3bf 8f6f 	isb	sy
 8007be6:	2601      	movs	r6, #1
 8007be8:	e781      	b.n	8007aee <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 8007bea:	4620      	mov	r0, r4
 8007bec:	f7ff fc36 	bl	800745c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007bf0:	f000 fb9e 	bl	8008330 <xTaskResumeAll>
 8007bf4:	e7f7      	b.n	8007be6 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	f7ff fc30 	bl	800745c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007bfc:	f000 fb98 	bl	8008330 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c00:	4620      	mov	r0, r4
 8007c02:	f7ff fbd7 	bl	80073b4 <prvIsQueueEmpty>
 8007c06:	2800      	cmp	r0, #0
 8007c08:	d0ed      	beq.n	8007be6 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 8007c0a:	b165      	cbz	r5, 8007c26 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 8007c0c:	f7ff fa92 	bl	8007134 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007c10:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8007c12:	b119      	cbz	r1, 8007c1c <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007c14:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007c16:	6819      	ldr	r1, [r3, #0]
 8007c18:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007c1c:	68a0      	ldr	r0, [r4, #8]
 8007c1e:	f000 fdaf 	bl	8008780 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8007c22:	f7ff faa7 	bl	8007174 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8007c26:	2000      	movs	r0, #0
 8007c28:	e780      	b.n	8007b2c <xQueueSemaphoreTake+0x7c>

08007c2a <xQueueReceiveFromISR>:
{
 8007c2a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c2e:	4689      	mov	r9, r1
 8007c30:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8007c32:	4604      	mov	r4, r0
 8007c34:	b940      	cbnz	r0, 8007c48 <xQueueReceiveFromISR+0x1e>
 8007c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c3a:	f383 8811 	msr	BASEPRI, r3
 8007c3e:	f3bf 8f6f 	isb	sy
 8007c42:	f3bf 8f4f 	dsb	sy
 8007c46:	e7fe      	b.n	8007c46 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c48:	b951      	cbnz	r1, 8007c60 <xQueueReceiveFromISR+0x36>
 8007c4a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007c4c:	b143      	cbz	r3, 8007c60 <xQueueReceiveFromISR+0x36>
 8007c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c52:	f383 8811 	msr	BASEPRI, r3
 8007c56:	f3bf 8f6f 	isb	sy
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	e7fe      	b.n	8007c5e <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c60:	f7ff fb7a 	bl	8007358 <vPortValidateInterruptPriority>
	__asm volatile
 8007c64:	f3ef 8711 	mrs	r7, BASEPRI
 8007c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c6c:	f383 8811 	msr	BASEPRI, r3
 8007c70:	f3bf 8f6f 	isb	sy
 8007c74:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c78:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c7a:	b30d      	cbz	r5, 8007cc0 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 8007c7c:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c80:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 8007c82:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c84:	4620      	mov	r0, r4
 8007c86:	f7ff fbd3 	bl	8007430 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c8a:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8007c8c:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c8e:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8007c90:	d111      	bne.n	8007cb6 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c92:	6923      	ldr	r3, [r4, #16]
 8007c94:	b153      	cbz	r3, 8007cac <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c96:	f104 0010 	add.w	r0, r4, #16
 8007c9a:	f000 fc53 	bl	8008544 <xTaskRemoveFromEventList>
 8007c9e:	b128      	cbz	r0, 8007cac <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 8007ca0:	f1b8 0f00 	cmp.w	r8, #0
 8007ca4:	d002      	beq.n	8007cac <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 8007cac:	2001      	movs	r0, #1
	__asm volatile
 8007cae:	f387 8811 	msr	BASEPRI, r7
}
 8007cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007cb6:	3601      	adds	r6, #1
 8007cb8:	b276      	sxtb	r6, r6
 8007cba:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 8007cbe:	e7f5      	b.n	8007cac <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 8007cc0:	4628      	mov	r0, r5
 8007cc2:	e7f4      	b.n	8007cae <xQueueReceiveFromISR+0x84>

08007cc4 <uxQueueMessagesWaiting>:
{
 8007cc4:	b510      	push	{r4, lr}
	configASSERT( xQueue );
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	b940      	cbnz	r0, 8007cdc <uxQueueMessagesWaiting+0x18>
	__asm volatile
 8007cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cce:	f383 8811 	msr	BASEPRI, r3
 8007cd2:	f3bf 8f6f 	isb	sy
 8007cd6:	f3bf 8f4f 	dsb	sy
 8007cda:	e7fe      	b.n	8007cda <uxQueueMessagesWaiting+0x16>
	taskENTER_CRITICAL();
 8007cdc:	f7ff fa2a 	bl	8007134 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007ce0:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 8007ce2:	f7ff fa47 	bl	8007174 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	bd10      	pop	{r4, pc}

08007cea <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 8007cea:	b940      	cbnz	r0, 8007cfe <uxQueueMessagesWaitingFromISR+0x14>
 8007cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf0:	f383 8811 	msr	BASEPRI, r3
 8007cf4:	f3bf 8f6f 	isb	sy
 8007cf8:	f3bf 8f4f 	dsb	sy
 8007cfc:	e7fe      	b.n	8007cfc <uxQueueMessagesWaitingFromISR+0x12>
	uxReturn = pxQueue->uxMessagesWaiting;
 8007cfe:	6b80      	ldr	r0, [r0, #56]	@ 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007d00:	4770      	bx	lr
	...

08007d04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007d04:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007d06:	4a07      	ldr	r2, [pc, #28]	@ (8007d24 <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d08:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007d0a:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8007d0e:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8007d12:	b91d      	cbnz	r5, 8007d1c <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007d14:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007d18:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007d1a:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	2b08      	cmp	r3, #8
 8007d20:	d1f3      	bne.n	8007d0a <vQueueAddToRegistry+0x6>
 8007d22:	e7fa      	b.n	8007d1a <vQueueAddToRegistry+0x16>
 8007d24:	20011fe4 	.word	0x20011fe4

08007d28 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007d28:	b510      	push	{r4, lr}

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007d2a:	4a09      	ldr	r2, [pc, #36]	@ (8007d50 <vQueueUnregisterQueue+0x28>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d2c:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007d2e:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8007d32:	4281      	cmp	r1, r0
 8007d34:	ea4f 04c3 	mov.w	r4, r3, lsl #3
 8007d38:	d106      	bne.n	8007d48 <vQueueUnregisterQueue+0x20>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007d3a:	4a06      	ldr	r2, [pc, #24]	@ (8007d54 <vQueueUnregisterQueue+0x2c>)
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007d42:	4422      	add	r2, r4
 8007d44:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007d46:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d48:	3301      	adds	r3, #1
 8007d4a:	2b08      	cmp	r3, #8
 8007d4c:	d1ef      	bne.n	8007d2e <vQueueUnregisterQueue+0x6>
 8007d4e:	e7fa      	b.n	8007d46 <vQueueUnregisterQueue+0x1e>
 8007d50:	20011fe8 	.word	0x20011fe8
 8007d54:	20011fe4 	.word	0x20011fe4

08007d58 <vQueueDelete>:
{
 8007d58:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8007d5a:	b940      	cbnz	r0, 8007d6e <vQueueDelete+0x16>
 8007d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d60:	f383 8811 	msr	BASEPRI, r3
 8007d64:	f3bf 8f6f 	isb	sy
 8007d68:	f3bf 8f4f 	dsb	sy
 8007d6c:	e7fe      	b.n	8007d6c <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 8007d6e:	f7ff ffdb 	bl	8007d28 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007d72:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 8007d76:	b91b      	cbnz	r3, 8007d80 <vQueueDelete+0x28>
}
 8007d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8007d7c:	f7ff b8f0 	b.w	8006f60 <vPortFree>
}
 8007d80:	bd10      	pop	{r4, pc}

08007d82 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d82:	b570      	push	{r4, r5, r6, lr}
 8007d84:	4604      	mov	r4, r0
 8007d86:	460d      	mov	r5, r1
 8007d88:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007d8a:	f7ff f9d3 	bl	8007134 <vPortEnterCritical>
 8007d8e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007d92:	2bff      	cmp	r3, #255	@ 0xff
 8007d94:	bf04      	itt	eq
 8007d96:	2300      	moveq	r3, #0
 8007d98:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 8007d9c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007da0:	2bff      	cmp	r3, #255	@ 0xff
 8007da2:	bf04      	itt	eq
 8007da4:	2300      	moveq	r3, #0
 8007da6:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 8007daa:	f7ff f9e3 	bl	8007174 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007dae:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007db0:	b92b      	cbnz	r3, 8007dbe <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007db2:	4632      	mov	r2, r6
 8007db4:	4629      	mov	r1, r5
 8007db6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007dba:	f000 fba5 	bl	8008508 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007dbe:	4620      	mov	r0, r4
	}
 8007dc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8007dc4:	f7ff bb4a 	b.w	800745c <prvUnlockQueue>

08007dc8 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dcc:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007dce:	f7ff f9b1 	bl	8007134 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007dd2:	4b30      	ldr	r3, [pc, #192]	@ (8007e94 <prvAddNewTaskToReadyList+0xcc>)
		if( pxCurrentTCB == NULL )
 8007dd4:	4e30      	ldr	r6, [pc, #192]	@ (8007e98 <prvAddNewTaskToReadyList+0xd0>)
		uxCurrentNumberOfTasks++;
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	4f30      	ldr	r7, [pc, #192]	@ (8007e9c <prvAddNewTaskToReadyList+0xd4>)
 8007dda:	3201      	adds	r2, #1
 8007ddc:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8007dde:	6835      	ldr	r5, [r6, #0]
 8007de0:	2d00      	cmp	r5, #0
 8007de2:	d14b      	bne.n	8007e7c <prvAddNewTaskToReadyList+0xb4>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007de4:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d11f      	bne.n	8007e2c <prvAddNewTaskToReadyList+0x64>
 8007dec:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007dee:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007df0:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007df2:	f7ff f8f3 	bl	8006fdc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007df6:	2d38      	cmp	r5, #56	@ 0x38
 8007df8:	f108 0814 	add.w	r8, r8, #20
 8007dfc:	d1f7      	bne.n	8007dee <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007dfe:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 8007ec4 <prvAddNewTaskToReadyList+0xfc>
	vListInitialise( &xDelayedTaskList2 );
 8007e02:	4d27      	ldr	r5, [pc, #156]	@ (8007ea0 <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 8007e04:	4640      	mov	r0, r8
 8007e06:	f7ff f8e9 	bl	8006fdc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e0a:	4628      	mov	r0, r5
 8007e0c:	f7ff f8e6 	bl	8006fdc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e10:	4824      	ldr	r0, [pc, #144]	@ (8007ea4 <prvAddNewTaskToReadyList+0xdc>)
 8007e12:	f7ff f8e3 	bl	8006fdc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e16:	4824      	ldr	r0, [pc, #144]	@ (8007ea8 <prvAddNewTaskToReadyList+0xe0>)
 8007e18:	f7ff f8e0 	bl	8006fdc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007e1c:	4823      	ldr	r0, [pc, #140]	@ (8007eac <prvAddNewTaskToReadyList+0xe4>)
 8007e1e:	f7ff f8dd 	bl	8006fdc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007e22:	4b23      	ldr	r3, [pc, #140]	@ (8007eb0 <prvAddNewTaskToReadyList+0xe8>)
 8007e24:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e28:	4b22      	ldr	r3, [pc, #136]	@ (8007eb4 <prvAddNewTaskToReadyList+0xec>)
 8007e2a:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8007e2c:	4a22      	ldr	r2, [pc, #136]	@ (8007eb8 <prvAddNewTaskToReadyList+0xf0>)
 8007e2e:	6813      	ldr	r3, [r2, #0]
 8007e30:	3301      	adds	r3, #1
 8007e32:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8007e34:	4a21      	ldr	r2, [pc, #132]	@ (8007ebc <prvAddNewTaskToReadyList+0xf4>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007e36:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8007e38:	6811      	ldr	r1, [r2, #0]
 8007e3a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007e3c:	2014      	movs	r0, #20
 8007e3e:	428b      	cmp	r3, r1
 8007e40:	fb00 7003 	mla	r0, r0, r3, r7
 8007e44:	f104 0104 	add.w	r1, r4, #4
 8007e48:	bf88      	it	hi
 8007e4a:	6013      	strhi	r3, [r2, #0]
 8007e4c:	f7ff f8d4 	bl	8006ff8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8007e50:	f7ff f990 	bl	8007174 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8007e54:	4b1a      	ldr	r3, [pc, #104]	@ (8007ec0 <prvAddNewTaskToReadyList+0xf8>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	b173      	cbz	r3, 8007e78 <prvAddNewTaskToReadyList+0xb0>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e5a:	6833      	ldr	r3, [r6, #0]
 8007e5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e5e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d209      	bcs.n	8007e78 <prvAddNewTaskToReadyList+0xb0>
			taskYIELD_IF_USING_PREEMPTION();
 8007e64:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007e68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e6c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007e70:	f3bf 8f4f 	dsb	sy
 8007e74:	f3bf 8f6f 	isb	sy
}
 8007e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8007e7c:	4b10      	ldr	r3, [pc, #64]	@ (8007ec0 <prvAddNewTaskToReadyList+0xf8>)
 8007e7e:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007e80:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8007e82:	2a00      	cmp	r2, #0
 8007e84:	d1d2      	bne.n	8007e2c <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007e86:	6832      	ldr	r2, [r6, #0]
 8007e88:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007e8a:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8007e8c:	bf98      	it	ls
 8007e8e:	6034      	strls	r4, [r6, #0]
 8007e90:	e7cc      	b.n	8007e2c <prvAddNewTaskToReadyList+0x64>
 8007e92:	bf00      	nop
 8007e94:	20012048 	.word	0x20012048
 8007e98:	2001251c 	.word	0x2001251c
 8007e9c:	200120bc 	.word	0x200120bc
 8007ea0:	20012094 	.word	0x20012094
 8007ea4:	20012078 	.word	0x20012078
 8007ea8:	20012064 	.word	0x20012064
 8007eac:	2001204c 	.word	0x2001204c
 8007eb0:	20012090 	.word	0x20012090
 8007eb4:	2001208c 	.word	0x2001208c
 8007eb8:	2001202c 	.word	0x2001202c
 8007ebc:	20012040 	.word	0x20012040
 8007ec0:	2001203c 	.word	0x2001203c
 8007ec4:	200120a8 	.word	0x200120a8

08007ec8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007eca:	4b15      	ldr	r3, [pc, #84]	@ (8007f20 <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ecc:	4d15      	ldr	r5, [pc, #84]	@ (8007f24 <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 8007ece:	681c      	ldr	r4, [r3, #0]
{
 8007ed0:	4606      	mov	r6, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ed2:	6828      	ldr	r0, [r5, #0]
 8007ed4:	3004      	adds	r0, #4
{
 8007ed6:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ed8:	f7ff f8b0 	bl	800703c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007edc:	1c73      	adds	r3, r6, #1
 8007ede:	d107      	bne.n	8007ef0 <prvAddCurrentTaskToDelayedList+0x28>
 8007ee0:	b137      	cbz	r7, 8007ef0 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ee2:	6829      	ldr	r1, [r5, #0]
 8007ee4:	4810      	ldr	r0, [pc, #64]	@ (8007f28 <prvAddCurrentTaskToDelayedList+0x60>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007ee6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007eea:	3104      	adds	r1, #4
 8007eec:	f7ff b884 	b.w	8006ff8 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007ef0:	682b      	ldr	r3, [r5, #0]
 8007ef2:	19a4      	adds	r4, r4, r6
 8007ef4:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007ef6:	d307      	bcc.n	8007f08 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8007f2c <prvAddCurrentTaskToDelayedList+0x64>)
 8007efa:	6818      	ldr	r0, [r3, #0]
 8007efc:	6829      	ldr	r1, [r5, #0]
}
 8007efe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f02:	3104      	adds	r1, #4
 8007f04:	f7ff b883 	b.w	800700e <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f08:	4b09      	ldr	r3, [pc, #36]	@ (8007f30 <prvAddCurrentTaskToDelayedList+0x68>)
 8007f0a:	6818      	ldr	r0, [r3, #0]
 8007f0c:	6829      	ldr	r1, [r5, #0]
 8007f0e:	3104      	adds	r1, #4
 8007f10:	f7ff f87d 	bl	800700e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007f14:	4b07      	ldr	r3, [pc, #28]	@ (8007f34 <prvAddCurrentTaskToDelayedList+0x6c>)
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8007f1a:	bf88      	it	hi
 8007f1c:	601c      	strhi	r4, [r3, #0]
}
 8007f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f20:	20012044 	.word	0x20012044
 8007f24:	2001251c 	.word	0x2001251c
 8007f28:	2001204c 	.word	0x2001204c
 8007f2c:	2001208c 	.word	0x2001208c
 8007f30:	20012090 	.word	0x20012090
 8007f34:	20012028 	.word	0x20012028

08007f38 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f38:	4a06      	ldr	r2, [pc, #24]	@ (8007f54 <prvResetNextTaskUnblockTime+0x1c>)
 8007f3a:	6813      	ldr	r3, [r2, #0]
 8007f3c:	6819      	ldr	r1, [r3, #0]
 8007f3e:	4b06      	ldr	r3, [pc, #24]	@ (8007f58 <prvResetNextTaskUnblockTime+0x20>)
 8007f40:	b919      	cbnz	r1, 8007f4a <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f42:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f46:	601a      	str	r2, [r3, #0]
}
 8007f48:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f4a:	6812      	ldr	r2, [r2, #0]
 8007f4c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f4e:	68d2      	ldr	r2, [r2, #12]
 8007f50:	6852      	ldr	r2, [r2, #4]
 8007f52:	e7f8      	b.n	8007f46 <prvResetNextTaskUnblockTime+0xe>
 8007f54:	20012090 	.word	0x20012090
 8007f58:	20012028 	.word	0x20012028

08007f5c <prvDeleteTCB>:
	{
 8007f5c:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f5e:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
	{
 8007f62:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f64:	b93b      	cbnz	r3, 8007f76 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8007f66:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8007f68:	f7fe fffa 	bl	8006f60 <vPortFree>
				vPortFree( pxTCB );
 8007f6c:	4620      	mov	r0, r4
	}
 8007f6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8007f72:	f7fe bff5 	b.w	8006f60 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d0f9      	beq.n	8007f6e <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d008      	beq.n	8007f90 <prvDeleteTCB+0x34>
 8007f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f82:	f383 8811 	msr	BASEPRI, r3
 8007f86:	f3bf 8f6f 	isb	sy
 8007f8a:	f3bf 8f4f 	dsb	sy
 8007f8e:	e7fe      	b.n	8007f8e <prvDeleteTCB+0x32>
	}
 8007f90:	bd10      	pop	{r4, pc}
	...

08007f94 <prvIdleTask>:
{
 8007f94:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f96:	4c13      	ldr	r4, [pc, #76]	@ (8007fe4 <prvIdleTask+0x50>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f98:	4f13      	ldr	r7, [pc, #76]	@ (8007fe8 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8007f9a:	4d14      	ldr	r5, [pc, #80]	@ (8007fec <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f9c:	6823      	ldr	r3, [r4, #0]
 8007f9e:	b973      	cbnz	r3, 8007fbe <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007fa0:	4b13      	ldr	r3, [pc, #76]	@ (8007ff0 <prvIdleTask+0x5c>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d9f8      	bls.n	8007f9a <prvIdleTask+0x6>
				taskYIELD();
 8007fa8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007fac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fb0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007fb4:	f3bf 8f4f 	dsb	sy
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	e7ed      	b.n	8007f9a <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8007fbe:	f7ff f8b9 	bl	8007134 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fc6:	1d30      	adds	r0, r6, #4
 8007fc8:	f7ff f838 	bl	800703c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007fcc:	682b      	ldr	r3, [r5, #0]
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007fd2:	6823      	ldr	r3, [r4, #0]
 8007fd4:	3b01      	subs	r3, #1
 8007fd6:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8007fd8:	f7ff f8cc 	bl	8007174 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8007fdc:	4630      	mov	r0, r6
 8007fde:	f7ff ffbd 	bl	8007f5c <prvDeleteTCB>
 8007fe2:	e7db      	b.n	8007f9c <prvIdleTask+0x8>
 8007fe4:	20012060 	.word	0x20012060
 8007fe8:	20012064 	.word	0x20012064
 8007fec:	20012048 	.word	0x20012048
 8007ff0:	200120bc 	.word	0x200120bc

08007ff4 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8007ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ff8:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007ffc:	0096      	lsls	r6, r2, #2
 8007ffe:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008000:	4607      	mov	r7, r0
 8008002:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008004:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8008006:	21a5      	movs	r1, #165	@ 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008008:	4698      	mov	r8, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800800a:	f00b fbca 	bl	80137a2 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800800e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008010:	3e04      	subs	r6, #4
 8008012:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008014:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8008018:	b3b5      	cbz	r5, 8008088 <prvInitialiseNewTask.constprop.0+0x94>
 800801a:	1e6b      	subs	r3, r5, #1
 800801c:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 8008020:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008022:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8008026:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800802a:	b109      	cbz	r1, 8008030 <prvInitialiseNewTask.constprop.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800802c:	42ab      	cmp	r3, r5
 800802e:	d1f8      	bne.n	8008022 <prvInitialiseNewTask.constprop.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008030:	2300      	movs	r3, #0
 8008032:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008036:	9d08      	ldr	r5, [sp, #32]
 8008038:	2d37      	cmp	r5, #55	@ 0x37
 800803a:	bf28      	it	cs
 800803c:	2537      	movcs	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800803e:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 8008042:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8008044:	64e5      	str	r5, [r4, #76]	@ 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008046:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8008048:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800804c:	f7fe ffd1 	bl	8006ff2 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008050:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008054:	f104 0018 	add.w	r0, r4, #24
 8008058:	f7fe ffcb 	bl	8006ff2 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800805c:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008060:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008062:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008064:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 8008066:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800806a:	f884 a05c 	strb.w	sl, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800806e:	4642      	mov	r2, r8
 8008070:	4639      	mov	r1, r7
 8008072:	4630      	mov	r0, r6
 8008074:	f7ff f830 	bl	80070d8 <pxPortInitialiseStack>
 8008078:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800807a:	f1b9 0f00 	cmp.w	r9, #0
 800807e:	d001      	beq.n	8008084 <prvInitialiseNewTask.constprop.0+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008080:	f8c9 4000 	str.w	r4, [r9]
}
 8008084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008088:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 800808c:	e7d3      	b.n	8008036 <prvInitialiseNewTask.constprop.0+0x42>

0800808e <xTaskCreateStatic>:
	{
 800808e:	b570      	push	{r4, r5, r6, lr}
 8008090:	b086      	sub	sp, #24
 8008092:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8008096:	b945      	cbnz	r5, 80080aa <xTaskCreateStatic+0x1c>
 8008098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800809c:	f383 8811 	msr	BASEPRI, r3
 80080a0:	f3bf 8f6f 	isb	sy
 80080a4:	f3bf 8f4f 	dsb	sy
 80080a8:	e7fe      	b.n	80080a8 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 80080aa:	b944      	cbnz	r4, 80080be <xTaskCreateStatic+0x30>
 80080ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b0:	f383 8811 	msr	BASEPRI, r3
 80080b4:	f3bf 8f6f 	isb	sy
 80080b8:	f3bf 8f4f 	dsb	sy
 80080bc:	e7fe      	b.n	80080bc <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 80080be:	2660      	movs	r6, #96	@ 0x60
 80080c0:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80080c2:	9e05      	ldr	r6, [sp, #20]
 80080c4:	2e60      	cmp	r6, #96	@ 0x60
 80080c6:	d008      	beq.n	80080da <xTaskCreateStatic+0x4c>
 80080c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080cc:	f383 8811 	msr	BASEPRI, r3
 80080d0:	f3bf 8f6f 	isb	sy
 80080d4:	f3bf 8f4f 	dsb	sy
 80080d8:	e7fe      	b.n	80080d8 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80080da:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80080dc:	2502      	movs	r5, #2
 80080de:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80080e2:	ad04      	add	r5, sp, #16
 80080e4:	9501      	str	r5, [sp, #4]
 80080e6:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80080e8:	9402      	str	r4, [sp, #8]
 80080ea:	9500      	str	r5, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80080ec:	9e05      	ldr	r6, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80080ee:	f7ff ff81 	bl	8007ff4 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80080f2:	4620      	mov	r0, r4
 80080f4:	f7ff fe68 	bl	8007dc8 <prvAddNewTaskToReadyList>
	}
 80080f8:	9804      	ldr	r0, [sp, #16]
 80080fa:	b006      	add	sp, #24
 80080fc:	bd70      	pop	{r4, r5, r6, pc}

080080fe <xTaskCreate>:
	{
 80080fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008102:	4607      	mov	r7, r0
 8008104:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008106:	0090      	lsls	r0, r2, #2
	{
 8008108:	4688      	mov	r8, r1
 800810a:	4616      	mov	r6, r2
 800810c:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800810e:	f7fe fe8f 	bl	8006e30 <pvPortMalloc>
			if( pxStack != NULL )
 8008112:	4605      	mov	r5, r0
 8008114:	b920      	cbnz	r0, 8008120 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008116:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800811a:	b005      	add	sp, #20
 800811c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008120:	2060      	movs	r0, #96	@ 0x60
 8008122:	f7fe fe85 	bl	8006e30 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008126:	4604      	mov	r4, r0
 8008128:	b198      	cbz	r0, 8008152 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800812a:	2300      	movs	r3, #0
 800812c:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008130:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 8008132:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008134:	9301      	str	r3, [sp, #4]
 8008136:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008138:	9002      	str	r0, [sp, #8]
 800813a:	9300      	str	r3, [sp, #0]
 800813c:	4632      	mov	r2, r6
 800813e:	464b      	mov	r3, r9
 8008140:	4641      	mov	r1, r8
 8008142:	4638      	mov	r0, r7
 8008144:	f7ff ff56 	bl	8007ff4 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008148:	4620      	mov	r0, r4
 800814a:	f7ff fe3d 	bl	8007dc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800814e:	2001      	movs	r0, #1
 8008150:	e7e3      	b.n	800811a <xTaskCreate+0x1c>
					vPortFree( pxStack );
 8008152:	4628      	mov	r0, r5
 8008154:	f7fe ff04 	bl	8006f60 <vPortFree>
		if( pxNewTCB != NULL )
 8008158:	e7dd      	b.n	8008116 <xTaskCreate+0x18>
	...

0800815c <vTaskStartScheduler>:
{
 800815c:	b510      	push	{r4, lr}
 800815e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008160:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008162:	aa07      	add	r2, sp, #28
 8008164:	a906      	add	r1, sp, #24
 8008166:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008168:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800816c:	f7fe fe22 	bl	8006db4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008170:	9b05      	ldr	r3, [sp, #20]
 8008172:	9302      	str	r3, [sp, #8]
 8008174:	9b06      	ldr	r3, [sp, #24]
 8008176:	9a07      	ldr	r2, [sp, #28]
 8008178:	4916      	ldr	r1, [pc, #88]	@ (80081d4 <vTaskStartScheduler+0x78>)
 800817a:	4817      	ldr	r0, [pc, #92]	@ (80081d8 <vTaskStartScheduler+0x7c>)
 800817c:	e9cd 4300 	strd	r4, r3, [sp]
 8008180:	4623      	mov	r3, r4
 8008182:	f7ff ff84 	bl	800808e <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8008186:	b318      	cbz	r0, 80081d0 <vTaskStartScheduler+0x74>
			xReturn = xTimerCreateTimerTask();
 8008188:	f000 fba6 	bl	80088d8 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800818c:	2801      	cmp	r0, #1
 800818e:	d114      	bne.n	80081ba <vTaskStartScheduler+0x5e>
 8008190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008194:	f383 8811 	msr	BASEPRI, r3
 8008198:	f3bf 8f6f 	isb	sy
 800819c:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80081a0:	4b0e      	ldr	r3, [pc, #56]	@ (80081dc <vTaskStartScheduler+0x80>)
 80081a2:	f04f 32ff 	mov.w	r2, #4294967295
 80081a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80081a8:	4b0d      	ldr	r3, [pc, #52]	@ (80081e0 <vTaskStartScheduler+0x84>)
 80081aa:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80081ac:	4b0d      	ldr	r3, [pc, #52]	@ (80081e4 <vTaskStartScheduler+0x88>)
 80081ae:	601c      	str	r4, [r3, #0]
}
 80081b0:	b008      	add	sp, #32
 80081b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80081b6:	f7ff b84d 	b.w	8007254 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80081ba:	3001      	adds	r0, #1
 80081bc:	d108      	bne.n	80081d0 <vTaskStartScheduler+0x74>
 80081be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c2:	f383 8811 	msr	BASEPRI, r3
 80081c6:	f3bf 8f6f 	isb	sy
 80081ca:	f3bf 8f4f 	dsb	sy
 80081ce:	e7fe      	b.n	80081ce <vTaskStartScheduler+0x72>
}
 80081d0:	b008      	add	sp, #32
 80081d2:	bd10      	pop	{r4, pc}
 80081d4:	080158c8 	.word	0x080158c8
 80081d8:	08007f95 	.word	0x08007f95
 80081dc:	20012028 	.word	0x20012028
 80081e0:	2001203c 	.word	0x2001203c
 80081e4:	20012044 	.word	0x20012044

080081e8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80081e8:	4a02      	ldr	r2, [pc, #8]	@ (80081f4 <vTaskSuspendAll+0xc>)
 80081ea:	6813      	ldr	r3, [r2, #0]
 80081ec:	3301      	adds	r3, #1
 80081ee:	6013      	str	r3, [r2, #0]
}
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	20012024 	.word	0x20012024

080081f8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80081f8:	4b01      	ldr	r3, [pc, #4]	@ (8008200 <xTaskGetTickCount+0x8>)
 80081fa:	6818      	ldr	r0, [r3, #0]
}
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop
 8008200:	20012044 	.word	0x20012044

08008204 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008204:	4b3f      	ldr	r3, [pc, #252]	@ (8008304 <xTaskIncrementTick+0x100>)
 8008206:	681b      	ldr	r3, [r3, #0]
{
 8008208:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800820c:	2b00      	cmp	r3, #0
 800820e:	d172      	bne.n	80082f6 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008210:	4b3d      	ldr	r3, [pc, #244]	@ (8008308 <xTaskIncrementTick+0x104>)
 8008212:	681c      	ldr	r4, [r3, #0]
 8008214:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8008216:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008218:	b9bc      	cbnz	r4, 800824a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800821a:	4b3c      	ldr	r3, [pc, #240]	@ (800830c <xTaskIncrementTick+0x108>)
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	6812      	ldr	r2, [r2, #0]
 8008220:	b142      	cbz	r2, 8008234 <xTaskIncrementTick+0x30>
 8008222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008226:	f383 8811 	msr	BASEPRI, r3
 800822a:	f3bf 8f6f 	isb	sy
 800822e:	f3bf 8f4f 	dsb	sy
 8008232:	e7fe      	b.n	8008232 <xTaskIncrementTick+0x2e>
 8008234:	4a36      	ldr	r2, [pc, #216]	@ (8008310 <xTaskIncrementTick+0x10c>)
 8008236:	6819      	ldr	r1, [r3, #0]
 8008238:	6810      	ldr	r0, [r2, #0]
 800823a:	6018      	str	r0, [r3, #0]
 800823c:	6011      	str	r1, [r2, #0]
 800823e:	4a35      	ldr	r2, [pc, #212]	@ (8008314 <xTaskIncrementTick+0x110>)
 8008240:	6813      	ldr	r3, [r2, #0]
 8008242:	3301      	adds	r3, #1
 8008244:	6013      	str	r3, [r2, #0]
 8008246:	f7ff fe77 	bl	8007f38 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800824a:	4d33      	ldr	r5, [pc, #204]	@ (8008318 <xTaskIncrementTick+0x114>)
 800824c:	4e33      	ldr	r6, [pc, #204]	@ (800831c <xTaskIncrementTick+0x118>)
 800824e:	682b      	ldr	r3, [r5, #0]
 8008250:	4f33      	ldr	r7, [pc, #204]	@ (8008320 <xTaskIncrementTick+0x11c>)
 8008252:	429c      	cmp	r4, r3
BaseType_t xSwitchRequired = pdFALSE;
 8008254:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008258:	d212      	bcs.n	8008280 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800825a:	683a      	ldr	r2, [r7, #0]
 800825c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800825e:	2114      	movs	r1, #20
 8008260:	434a      	muls	r2, r1
 8008262:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 8008264:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 8008266:	4a2f      	ldr	r2, [pc, #188]	@ (8008324 <xTaskIncrementTick+0x120>)
 8008268:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 800826a:	bf28      	it	cs
 800826c:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 8008270:	2a00      	cmp	r2, #0
 8008272:	bf18      	it	ne
 8008274:	f04f 0b01 	movne.w	fp, #1
}
 8008278:	4658      	mov	r0, fp
 800827a:	b003      	add	sp, #12
 800827c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008280:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 800830c <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 8008284:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 800832c <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008288:	f8d9 2000 	ldr.w	r2, [r9]
 800828c:	6812      	ldr	r2, [r2, #0]
 800828e:	b91a      	cbnz	r2, 8008298 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008290:	f04f 32ff 	mov.w	r2, #4294967295
 8008294:	602a      	str	r2, [r5, #0]
					break;
 8008296:	e7e0      	b.n	800825a <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008298:	f8d9 2000 	ldr.w	r2, [r9]
 800829c:	68d2      	ldr	r2, [r2, #12]
 800829e:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80082a2:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 80082a6:	428c      	cmp	r4, r1
 80082a8:	d201      	bcs.n	80082ae <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 80082aa:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80082ac:	e7d5      	b.n	800825a <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082ae:	f108 0304 	add.w	r3, r8, #4
 80082b2:	4618      	mov	r0, r3
 80082b4:	9301      	str	r3, [sp, #4]
 80082b6:	f7fe fec1 	bl	800703c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80082ba:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 80082be:	b119      	cbz	r1, 80082c8 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082c0:	f108 0018 	add.w	r0, r8, #24
 80082c4:	f7fe feba 	bl	800703c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80082c8:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 80082cc:	f8da 1000 	ldr.w	r1, [sl]
 80082d0:	2314      	movs	r3, #20
 80082d2:	4288      	cmp	r0, r1
 80082d4:	bf88      	it	hi
 80082d6:	f8ca 0000 	strhi.w	r0, [sl]
 80082da:	9901      	ldr	r1, [sp, #4]
 80082dc:	fb03 6000 	mla	r0, r3, r0, r6
 80082e0:	f7fe fe8a 	bl	8006ff8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082e4:	6838      	ldr	r0, [r7, #0]
 80082e6:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 80082ea:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 80082ec:	4291      	cmp	r1, r2
 80082ee:	bf28      	it	cs
 80082f0:	f04f 0b01 	movcs.w	fp, #1
 80082f4:	e7c8      	b.n	8008288 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 80082f6:	4a0c      	ldr	r2, [pc, #48]	@ (8008328 <xTaskIncrementTick+0x124>)
 80082f8:	6813      	ldr	r3, [r2, #0]
 80082fa:	3301      	adds	r3, #1
 80082fc:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80082fe:	f04f 0b00 	mov.w	fp, #0
 8008302:	e7b9      	b.n	8008278 <xTaskIncrementTick+0x74>
 8008304:	20012024 	.word	0x20012024
 8008308:	20012044 	.word	0x20012044
 800830c:	20012090 	.word	0x20012090
 8008310:	2001208c 	.word	0x2001208c
 8008314:	20012030 	.word	0x20012030
 8008318:	20012028 	.word	0x20012028
 800831c:	200120bc 	.word	0x200120bc
 8008320:	2001251c 	.word	0x2001251c
 8008324:	20012034 	.word	0x20012034
 8008328:	20012038 	.word	0x20012038
 800832c:	20012040 	.word	0x20012040

08008330 <xTaskResumeAll>:
{
 8008330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8008334:	4c30      	ldr	r4, [pc, #192]	@ (80083f8 <xTaskResumeAll+0xc8>)
 8008336:	6823      	ldr	r3, [r4, #0]
 8008338:	b943      	cbnz	r3, 800834c <xTaskResumeAll+0x1c>
 800833a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800833e:	f383 8811 	msr	BASEPRI, r3
 8008342:	f3bf 8f6f 	isb	sy
 8008346:	f3bf 8f4f 	dsb	sy
 800834a:	e7fe      	b.n	800834a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800834c:	f7fe fef2 	bl	8007134 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8008350:	6823      	ldr	r3, [r4, #0]
 8008352:	3b01      	subs	r3, #1
 8008354:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008356:	6824      	ldr	r4, [r4, #0]
 8008358:	b12c      	cbz	r4, 8008366 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800835a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800835c:	f7fe ff0a 	bl	8007174 <vPortExitCritical>
}
 8008360:	4620      	mov	r0, r4
 8008362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008366:	4b25      	ldr	r3, [pc, #148]	@ (80083fc <xTaskResumeAll+0xcc>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d0f5      	beq.n	800835a <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800836e:	4d24      	ldr	r5, [pc, #144]	@ (8008400 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8008370:	4e24      	ldr	r6, [pc, #144]	@ (8008404 <xTaskResumeAll+0xd4>)
 8008372:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 8008414 <xTaskResumeAll+0xe4>
 8008376:	e01d      	b.n	80083b4 <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008378:	68eb      	ldr	r3, [r5, #12]
 800837a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800837c:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800837e:	f104 0018 	add.w	r0, r4, #24
 8008382:	f7fe fe5b 	bl	800703c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008386:	4638      	mov	r0, r7
 8008388:	f7fe fe58 	bl	800703c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800838c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800838e:	6832      	ldr	r2, [r6, #0]
 8008390:	2014      	movs	r0, #20
 8008392:	4293      	cmp	r3, r2
 8008394:	fb00 8003 	mla	r0, r0, r3, r8
 8008398:	4639      	mov	r1, r7
 800839a:	bf88      	it	hi
 800839c:	6033      	strhi	r3, [r6, #0]
 800839e:	f7fe fe2b 	bl	8006ff8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80083a2:	4b19      	ldr	r3, [pc, #100]	@ (8008408 <xTaskResumeAll+0xd8>)
 80083a4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d302      	bcc.n	80083b4 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 80083ae:	4b17      	ldr	r3, [pc, #92]	@ (800840c <xTaskResumeAll+0xdc>)
 80083b0:	2201      	movs	r2, #1
 80083b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80083b4:	682b      	ldr	r3, [r5, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d1de      	bne.n	8008378 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 80083ba:	b10c      	cbz	r4, 80083c0 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 80083bc:	f7ff fdbc 	bl	8007f38 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80083c0:	4d13      	ldr	r5, [pc, #76]	@ (8008410 <xTaskResumeAll+0xe0>)
 80083c2:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 80083c4:	b144      	cbz	r4, 80083d8 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 80083c6:	4e11      	ldr	r6, [pc, #68]	@ (800840c <xTaskResumeAll+0xdc>)
 80083c8:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80083ca:	f7ff ff1b 	bl	8008204 <xTaskIncrementTick>
 80083ce:	b100      	cbz	r0, 80083d2 <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 80083d0:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80083d2:	3c01      	subs	r4, #1
 80083d4:	d1f9      	bne.n	80083ca <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 80083d6:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80083d8:	4b0c      	ldr	r3, [pc, #48]	@ (800840c <xTaskResumeAll+0xdc>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d0bc      	beq.n	800835a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80083e0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80083e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083e8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80083ec:	f3bf 8f4f 	dsb	sy
 80083f0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80083f4:	2401      	movs	r4, #1
 80083f6:	e7b1      	b.n	800835c <xTaskResumeAll+0x2c>
 80083f8:	20012024 	.word	0x20012024
 80083fc:	20012048 	.word	0x20012048
 8008400:	20012078 	.word	0x20012078
 8008404:	20012040 	.word	0x20012040
 8008408:	2001251c 	.word	0x2001251c
 800840c:	20012034 	.word	0x20012034
 8008410:	20012038 	.word	0x20012038
 8008414:	200120bc 	.word	0x200120bc

08008418 <vTaskDelay>:
	{
 8008418:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800841a:	b950      	cbnz	r0, 8008432 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 800841c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008420:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008424:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008428:	f3bf 8f4f 	dsb	sy
 800842c:	f3bf 8f6f 	isb	sy
	}
 8008430:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8008432:	4b0a      	ldr	r3, [pc, #40]	@ (800845c <vTaskDelay+0x44>)
 8008434:	6819      	ldr	r1, [r3, #0]
 8008436:	b141      	cbz	r1, 800844a <vTaskDelay+0x32>
 8008438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800843c:	f383 8811 	msr	BASEPRI, r3
 8008440:	f3bf 8f6f 	isb	sy
 8008444:	f3bf 8f4f 	dsb	sy
 8008448:	e7fe      	b.n	8008448 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800844a:	f7ff fecd 	bl	80081e8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800844e:	f7ff fd3b 	bl	8007ec8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8008452:	f7ff ff6d 	bl	8008330 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8008456:	2800      	cmp	r0, #0
 8008458:	d0e0      	beq.n	800841c <vTaskDelay+0x4>
 800845a:	e7e9      	b.n	8008430 <vTaskDelay+0x18>
 800845c:	20012024 	.word	0x20012024

08008460 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008460:	4b17      	ldr	r3, [pc, #92]	@ (80084c0 <vTaskSwitchContext+0x60>)
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	4b17      	ldr	r3, [pc, #92]	@ (80084c4 <vTaskSwitchContext+0x64>)
{
 8008466:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008468:	b112      	cbz	r2, 8008470 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800846a:	2201      	movs	r2, #1
 800846c:	601a      	str	r2, [r3, #0]
}
 800846e:	bd70      	pop	{r4, r5, r6, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008470:	4d15      	ldr	r5, [pc, #84]	@ (80084c8 <vTaskSwitchContext+0x68>)
		xYieldPending = pdFALSE;
 8008472:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008474:	682a      	ldr	r2, [r5, #0]
 8008476:	4915      	ldr	r1, [pc, #84]	@ (80084cc <vTaskSwitchContext+0x6c>)
 8008478:	2614      	movs	r6, #20
 800847a:	fb06 f302 	mul.w	r3, r6, r2
 800847e:	18c8      	adds	r0, r1, r3
 8008480:	58cc      	ldr	r4, [r1, r3]
 8008482:	b18c      	cbz	r4, 80084a8 <vTaskSwitchContext+0x48>
 8008484:	6844      	ldr	r4, [r0, #4]
 8008486:	3308      	adds	r3, #8
 8008488:	6864      	ldr	r4, [r4, #4]
 800848a:	6044      	str	r4, [r0, #4]
 800848c:	440b      	add	r3, r1
 800848e:	429c      	cmp	r4, r3
 8008490:	bf04      	itt	eq
 8008492:	6863      	ldreq	r3, [r4, #4]
 8008494:	6043      	streq	r3, [r0, #4]
 8008496:	2314      	movs	r3, #20
 8008498:	fb03 1102 	mla	r1, r3, r2, r1
 800849c:	684b      	ldr	r3, [r1, #4]
 800849e:	68d9      	ldr	r1, [r3, #12]
 80084a0:	4b0b      	ldr	r3, [pc, #44]	@ (80084d0 <vTaskSwitchContext+0x70>)
 80084a2:	6019      	str	r1, [r3, #0]
 80084a4:	602a      	str	r2, [r5, #0]
}
 80084a6:	e7e2      	b.n	800846e <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084a8:	b942      	cbnz	r2, 80084bc <vTaskSwitchContext+0x5c>
 80084aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ae:	f383 8811 	msr	BASEPRI, r3
 80084b2:	f3bf 8f6f 	isb	sy
 80084b6:	f3bf 8f4f 	dsb	sy
 80084ba:	e7fe      	b.n	80084ba <vTaskSwitchContext+0x5a>
 80084bc:	3a01      	subs	r2, #1
 80084be:	e7dc      	b.n	800847a <vTaskSwitchContext+0x1a>
 80084c0:	20012024 	.word	0x20012024
 80084c4:	20012034 	.word	0x20012034
 80084c8:	20012040 	.word	0x20012040
 80084cc:	200120bc 	.word	0x200120bc
 80084d0:	2001251c 	.word	0x2001251c

080084d4 <vTaskPlaceOnEventList>:
{
 80084d4:	b510      	push	{r4, lr}
 80084d6:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80084d8:	b940      	cbnz	r0, 80084ec <vTaskPlaceOnEventList+0x18>
 80084da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084de:	f383 8811 	msr	BASEPRI, r3
 80084e2:	f3bf 8f6f 	isb	sy
 80084e6:	f3bf 8f4f 	dsb	sy
 80084ea:	e7fe      	b.n	80084ea <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80084ec:	4b05      	ldr	r3, [pc, #20]	@ (8008504 <vTaskPlaceOnEventList+0x30>)
 80084ee:	6819      	ldr	r1, [r3, #0]
 80084f0:	3118      	adds	r1, #24
 80084f2:	f7fe fd8c 	bl	800700e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80084f6:	4620      	mov	r0, r4
 80084f8:	2101      	movs	r1, #1
}
 80084fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80084fe:	f7ff bce3 	b.w	8007ec8 <prvAddCurrentTaskToDelayedList>
 8008502:	bf00      	nop
 8008504:	2001251c 	.word	0x2001251c

08008508 <vTaskPlaceOnEventListRestricted>:
	{
 8008508:	b538      	push	{r3, r4, r5, lr}
 800850a:	460d      	mov	r5, r1
 800850c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800850e:	b940      	cbnz	r0, 8008522 <vTaskPlaceOnEventListRestricted+0x1a>
 8008510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008514:	f383 8811 	msr	BASEPRI, r3
 8008518:	f3bf 8f6f 	isb	sy
 800851c:	f3bf 8f4f 	dsb	sy
 8008520:	e7fe      	b.n	8008520 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008522:	4b07      	ldr	r3, [pc, #28]	@ (8008540 <vTaskPlaceOnEventListRestricted+0x38>)
 8008524:	6819      	ldr	r1, [r3, #0]
 8008526:	3118      	adds	r1, #24
 8008528:	f7fe fd66 	bl	8006ff8 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800852c:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800852e:	4621      	mov	r1, r4
 8008530:	bf0c      	ite	eq
 8008532:	4628      	moveq	r0, r5
 8008534:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8008538:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800853c:	f7ff bcc4 	b.w	8007ec8 <prvAddCurrentTaskToDelayedList>
 8008540:	2001251c 	.word	0x2001251c

08008544 <xTaskRemoveFromEventList>:
{
 8008544:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008546:	68c3      	ldr	r3, [r0, #12]
 8008548:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800854a:	b944      	cbnz	r4, 800855e <xTaskRemoveFromEventList+0x1a>
 800854c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008550:	f383 8811 	msr	BASEPRI, r3
 8008554:	f3bf 8f6f 	isb	sy
 8008558:	f3bf 8f4f 	dsb	sy
 800855c:	e7fe      	b.n	800855c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800855e:	f104 0518 	add.w	r5, r4, #24
 8008562:	4628      	mov	r0, r5
 8008564:	f7fe fd6a 	bl	800703c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008568:	4b10      	ldr	r3, [pc, #64]	@ (80085ac <xTaskRemoveFromEventList+0x68>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	b9db      	cbnz	r3, 80085a6 <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800856e:	1d25      	adds	r5, r4, #4
 8008570:	4628      	mov	r0, r5
 8008572:	f7fe fd63 	bl	800703c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008576:	4a0e      	ldr	r2, [pc, #56]	@ (80085b0 <xTaskRemoveFromEventList+0x6c>)
 8008578:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800857a:	6811      	ldr	r1, [r2, #0]
 800857c:	428b      	cmp	r3, r1
 800857e:	bf88      	it	hi
 8008580:	6013      	strhi	r3, [r2, #0]
 8008582:	4a0c      	ldr	r2, [pc, #48]	@ (80085b4 <xTaskRemoveFromEventList+0x70>)
 8008584:	2014      	movs	r0, #20
 8008586:	4629      	mov	r1, r5
 8008588:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800858c:	f7fe fd34 	bl	8006ff8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008590:	4b09      	ldr	r3, [pc, #36]	@ (80085b8 <xTaskRemoveFromEventList+0x74>)
 8008592:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008598:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800859a:	bf83      	ittte	hi
 800859c:	4b07      	ldrhi	r3, [pc, #28]	@ (80085bc <xTaskRemoveFromEventList+0x78>)
 800859e:	2001      	movhi	r0, #1
 80085a0:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 80085a2:	2000      	movls	r0, #0
}
 80085a4:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80085a6:	4806      	ldr	r0, [pc, #24]	@ (80085c0 <xTaskRemoveFromEventList+0x7c>)
 80085a8:	4629      	mov	r1, r5
 80085aa:	e7ef      	b.n	800858c <xTaskRemoveFromEventList+0x48>
 80085ac:	20012024 	.word	0x20012024
 80085b0:	20012040 	.word	0x20012040
 80085b4:	200120bc 	.word	0x200120bc
 80085b8:	2001251c 	.word	0x2001251c
 80085bc:	20012034 	.word	0x20012034
 80085c0:	20012078 	.word	0x20012078

080085c4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80085c4:	4b03      	ldr	r3, [pc, #12]	@ (80085d4 <vTaskInternalSetTimeOutState+0x10>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80085ca:	4b03      	ldr	r3, [pc, #12]	@ (80085d8 <vTaskInternalSetTimeOutState+0x14>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	6043      	str	r3, [r0, #4]
}
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop
 80085d4:	20012030 	.word	0x20012030
 80085d8:	20012044 	.word	0x20012044

080085dc <xTaskCheckForTimeOut>:
{
 80085dc:	b570      	push	{r4, r5, r6, lr}
 80085de:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 80085e0:	4605      	mov	r5, r0
 80085e2:	b940      	cbnz	r0, 80085f6 <xTaskCheckForTimeOut+0x1a>
 80085e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e8:	f383 8811 	msr	BASEPRI, r3
 80085ec:	f3bf 8f6f 	isb	sy
 80085f0:	f3bf 8f4f 	dsb	sy
 80085f4:	e7fe      	b.n	80085f4 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80085f6:	b941      	cbnz	r1, 800860a <xTaskCheckForTimeOut+0x2e>
 80085f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085fc:	f383 8811 	msr	BASEPRI, r3
 8008600:	f3bf 8f6f 	isb	sy
 8008604:	f3bf 8f4f 	dsb	sy
 8008608:	e7fe      	b.n	8008608 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800860a:	f7fe fd93 	bl	8007134 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800860e:	4b0f      	ldr	r3, [pc, #60]	@ (800864c <xTaskCheckForTimeOut+0x70>)
 8008610:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8008612:	6823      	ldr	r3, [r4, #0]
 8008614:	1c5a      	adds	r2, r3, #1
 8008616:	d010      	beq.n	800863a <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008618:	480d      	ldr	r0, [pc, #52]	@ (8008650 <xTaskCheckForTimeOut+0x74>)
 800861a:	682e      	ldr	r6, [r5, #0]
 800861c:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800861e:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008620:	4286      	cmp	r6, r0
 8008622:	d001      	beq.n	8008628 <xTaskCheckForTimeOut+0x4c>
 8008624:	428a      	cmp	r2, r1
 8008626:	d90f      	bls.n	8008648 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008628:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800862a:	4283      	cmp	r3, r0
 800862c:	d90a      	bls.n	8008644 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800862e:	1a5b      	subs	r3, r3, r1
 8008630:	4413      	add	r3, r2
 8008632:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008634:	4628      	mov	r0, r5
 8008636:	f7ff ffc5 	bl	80085c4 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800863a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800863c:	f7fe fd9a 	bl	8007174 <vPortExitCritical>
}
 8008640:	4620      	mov	r0, r4
 8008642:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8008644:	2300      	movs	r3, #0
 8008646:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8008648:	2401      	movs	r4, #1
 800864a:	e7f7      	b.n	800863c <xTaskCheckForTimeOut+0x60>
 800864c:	20012044 	.word	0x20012044
 8008650:	20012030 	.word	0x20012030

08008654 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8008654:	4b01      	ldr	r3, [pc, #4]	@ (800865c <vTaskMissedYield+0x8>)
 8008656:	2201      	movs	r2, #1
 8008658:	601a      	str	r2, [r3, #0]
}
 800865a:	4770      	bx	lr
 800865c:	20012034 	.word	0x20012034

08008660 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8008660:	4b05      	ldr	r3, [pc, #20]	@ (8008678 <xTaskGetSchedulerState+0x18>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	b133      	cbz	r3, 8008674 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008666:	4b05      	ldr	r3, [pc, #20]	@ (800867c <xTaskGetSchedulerState+0x1c>)
 8008668:	6818      	ldr	r0, [r3, #0]
 800866a:	fab0 f080 	clz	r0, r0
 800866e:	0940      	lsrs	r0, r0, #5
 8008670:	0040      	lsls	r0, r0, #1
 8008672:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008674:	2001      	movs	r0, #1
	}
 8008676:	4770      	bx	lr
 8008678:	2001203c 	.word	0x2001203c
 800867c:	20012024 	.word	0x20012024

08008680 <xTaskPriorityInherit>:
	{
 8008680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8008682:	4604      	mov	r4, r0
 8008684:	b338      	cbz	r0, 80086d6 <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008686:	4d1a      	ldr	r5, [pc, #104]	@ (80086f0 <xTaskPriorityInherit+0x70>)
 8008688:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800868a:	682a      	ldr	r2, [r5, #0]
 800868c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800868e:	4293      	cmp	r3, r2
 8008690:	d226      	bcs.n	80086e0 <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008692:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008694:	4e17      	ldr	r6, [pc, #92]	@ (80086f4 <xTaskPriorityInherit+0x74>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008696:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008698:	bfa1      	itttt	ge
 800869a:	682a      	ldrge	r2, [r5, #0]
 800869c:	6ad2      	ldrge	r2, [r2, #44]	@ 0x2c
 800869e:	f1c2 0238 	rsbge	r2, r2, #56	@ 0x38
 80086a2:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80086a4:	2214      	movs	r2, #20
 80086a6:	fb02 6303 	mla	r3, r2, r3, r6
 80086aa:	6942      	ldr	r2, [r0, #20]
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d113      	bne.n	80086d8 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086b0:	1d07      	adds	r7, r0, #4
 80086b2:	4638      	mov	r0, r7
 80086b4:	f7fe fcc2 	bl	800703c <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80086b8:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80086ba:	4a0f      	ldr	r2, [pc, #60]	@ (80086f8 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80086bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80086be:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80086c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80086c2:	2014      	movs	r0, #20
 80086c4:	428b      	cmp	r3, r1
 80086c6:	fb00 6003 	mla	r0, r0, r3, r6
 80086ca:	4639      	mov	r1, r7
 80086cc:	bf88      	it	hi
 80086ce:	6013      	strhi	r3, [r2, #0]
 80086d0:	f7fe fc92 	bl	8006ff8 <vListInsertEnd>
				xReturn = pdTRUE;
 80086d4:	2001      	movs	r0, #1
	}
 80086d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80086d8:	682b      	ldr	r3, [r5, #0]
 80086da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086dc:	62c3      	str	r3, [r0, #44]	@ 0x2c
 80086de:	e7f9      	b.n	80086d4 <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80086e0:	682b      	ldr	r3, [r5, #0]
 80086e2:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 80086e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086e6:	4298      	cmp	r0, r3
 80086e8:	bf2c      	ite	cs
 80086ea:	2000      	movcs	r0, #0
 80086ec:	2001      	movcc	r0, #1
 80086ee:	e7f2      	b.n	80086d6 <xTaskPriorityInherit+0x56>
 80086f0:	2001251c 	.word	0x2001251c
 80086f4:	200120bc 	.word	0x200120bc
 80086f8:	20012040 	.word	0x20012040

080086fc <xTaskPriorityDisinherit>:
	{
 80086fc:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 80086fe:	b908      	cbnz	r0, 8008704 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8008700:	2000      	movs	r0, #0
	}
 8008702:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8008704:	4b1b      	ldr	r3, [pc, #108]	@ (8008774 <xTaskPriorityDisinherit+0x78>)
 8008706:	681c      	ldr	r4, [r3, #0]
 8008708:	4284      	cmp	r4, r0
 800870a:	d008      	beq.n	800871e <xTaskPriorityDisinherit+0x22>
 800870c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008710:	f383 8811 	msr	BASEPRI, r3
 8008714:	f3bf 8f6f 	isb	sy
 8008718:	f3bf 8f4f 	dsb	sy
 800871c:	e7fe      	b.n	800871c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800871e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8008720:	b943      	cbnz	r3, 8008734 <xTaskPriorityDisinherit+0x38>
 8008722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008726:	f383 8811 	msr	BASEPRI, r3
 800872a:	f3bf 8f6f 	isb	sy
 800872e:	f3bf 8f4f 	dsb	sy
 8008732:	e7fe      	b.n	8008732 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008734:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008736:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 8008738:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800873a:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800873c:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800873e:	d0df      	beq.n	8008700 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008740:	2b00      	cmp	r3, #0
 8008742:	d1dd      	bne.n	8008700 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008744:	1d25      	adds	r5, r4, #4
 8008746:	4628      	mov	r0, r5
 8008748:	f7fe fc78 	bl	800703c <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800874c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800874e:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008750:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008754:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8008756:	4a08      	ldr	r2, [pc, #32]	@ (8008778 <xTaskPriorityDisinherit+0x7c>)
 8008758:	6811      	ldr	r1, [r2, #0]
 800875a:	428b      	cmp	r3, r1
 800875c:	bf88      	it	hi
 800875e:	6013      	strhi	r3, [r2, #0]
 8008760:	4a06      	ldr	r2, [pc, #24]	@ (800877c <xTaskPriorityDisinherit+0x80>)
 8008762:	2014      	movs	r0, #20
 8008764:	fb00 2003 	mla	r0, r0, r3, r2
 8008768:	4629      	mov	r1, r5
 800876a:	f7fe fc45 	bl	8006ff8 <vListInsertEnd>
					xReturn = pdTRUE;
 800876e:	2001      	movs	r0, #1
		return xReturn;
 8008770:	e7c7      	b.n	8008702 <xTaskPriorityDisinherit+0x6>
 8008772:	bf00      	nop
 8008774:	2001251c 	.word	0x2001251c
 8008778:	20012040 	.word	0x20012040
 800877c:	200120bc 	.word	0x200120bc

08008780 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8008780:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8008782:	4604      	mov	r4, r0
 8008784:	2800      	cmp	r0, #0
 8008786:	d041      	beq.n	800880c <vTaskPriorityDisinheritAfterTimeout+0x8c>
			configASSERT( pxTCB->uxMutexesHeld );
 8008788:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800878a:	b942      	cbnz	r2, 800879e <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800878c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008790:	f383 8811 	msr	BASEPRI, r3
 8008794:	f3bf 8f6f 	isb	sy
 8008798:	f3bf 8f4f 	dsb	sy
 800879c:	e7fe      	b.n	800879c <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800879e:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80087a0:	4299      	cmp	r1, r3
 80087a2:	bf38      	it	cc
 80087a4:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 80087a6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80087a8:	428b      	cmp	r3, r1
 80087aa:	d02f      	beq.n	800880c <vTaskPriorityDisinheritAfterTimeout+0x8c>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80087ac:	2a01      	cmp	r2, #1
 80087ae:	d12d      	bne.n	800880c <vTaskPriorityDisinheritAfterTimeout+0x8c>
					configASSERT( pxTCB != pxCurrentTCB );
 80087b0:	4a17      	ldr	r2, [pc, #92]	@ (8008810 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 80087b2:	6812      	ldr	r2, [r2, #0]
 80087b4:	4282      	cmp	r2, r0
 80087b6:	d108      	bne.n	80087ca <vTaskPriorityDisinheritAfterTimeout+0x4a>
 80087b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087bc:	f383 8811 	msr	BASEPRI, r3
 80087c0:	f3bf 8f6f 	isb	sy
 80087c4:	f3bf 8f4f 	dsb	sy
 80087c8:	e7fe      	b.n	80087c8 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80087ca:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80087cc:	4d11      	ldr	r5, [pc, #68]	@ (8008814 <vTaskPriorityDisinheritAfterTimeout+0x94>)
					pxTCB->uxPriority = uxPriorityToUse;
 80087ce:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80087d0:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80087d2:	f04f 0214 	mov.w	r2, #20
 80087d6:	fb02 5303 	mla	r3, r2, r3, r5
 80087da:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087dc:	bfa4      	itt	ge
 80087de:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
 80087e2:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d111      	bne.n	800880c <vTaskPriorityDisinheritAfterTimeout+0x8c>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087e8:	1d06      	adds	r6, r0, #4
 80087ea:	4630      	mov	r0, r6
 80087ec:	f7fe fc26 	bl	800703c <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 80087f0:	4a09      	ldr	r2, [pc, #36]	@ (8008818 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 80087f2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80087f4:	6811      	ldr	r1, [r2, #0]
 80087f6:	2014      	movs	r0, #20
 80087f8:	428b      	cmp	r3, r1
 80087fa:	fb00 5003 	mla	r0, r0, r3, r5
 80087fe:	4631      	mov	r1, r6
	}
 8008800:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 8008804:	bf88      	it	hi
 8008806:	6013      	strhi	r3, [r2, #0]
 8008808:	f7fe bbf6 	b.w	8006ff8 <vListInsertEnd>
	}
 800880c:	bd70      	pop	{r4, r5, r6, pc}
 800880e:	bf00      	nop
 8008810:	2001251c 	.word	0x2001251c
 8008814:	200120bc 	.word	0x200120bc
 8008818:	20012040 	.word	0x20012040

0800881c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800881c:	4b04      	ldr	r3, [pc, #16]	@ (8008830 <pvTaskIncrementMutexHeldCount+0x14>)
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	b11a      	cbz	r2, 800882a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8008822:	6819      	ldr	r1, [r3, #0]
 8008824:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8008826:	3201      	adds	r2, #1
 8008828:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 800882a:	6818      	ldr	r0, [r3, #0]
	}
 800882c:	4770      	bx	lr
 800882e:	bf00      	nop
 8008830:	2001251c 	.word	0x2001251c

08008834 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8008834:	4291      	cmp	r1, r2
{
 8008836:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008838:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800883a:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800883c:	d80a      	bhi.n	8008854 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800883e:	1ad2      	subs	r2, r2, r3
 8008840:	6983      	ldr	r3, [r0, #24]
 8008842:	429a      	cmp	r2, r3
 8008844:	d20d      	bcs.n	8008862 <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008846:	4b08      	ldr	r3, [pc, #32]	@ (8008868 <prvInsertTimerInActiveList+0x34>)
 8008848:	1d01      	adds	r1, r0, #4
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800884a:	6818      	ldr	r0, [r3, #0]
 800884c:	f7fe fbdf 	bl	800700e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8008850:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 8008852:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008854:	429a      	cmp	r2, r3
 8008856:	d201      	bcs.n	800885c <prvInsertTimerInActiveList+0x28>
 8008858:	4299      	cmp	r1, r3
 800885a:	d202      	bcs.n	8008862 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800885c:	4b03      	ldr	r3, [pc, #12]	@ (800886c <prvInsertTimerInActiveList+0x38>)
 800885e:	1d01      	adds	r1, r0, #4
 8008860:	e7f3      	b.n	800884a <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8008862:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8008864:	e7f5      	b.n	8008852 <prvInsertTimerInActiveList+0x1e>
 8008866:	bf00      	nop
 8008868:	2001261c 	.word	0x2001261c
 800886c:	20012620 	.word	0x20012620

08008870 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8008872:	4c11      	ldr	r4, [pc, #68]	@ (80088b8 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8008874:	f7fe fc5e 	bl	8007134 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8008878:	6825      	ldr	r5, [r4, #0]
 800887a:	b9bd      	cbnz	r5, 80088ac <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800887c:	4f0f      	ldr	r7, [pc, #60]	@ (80088bc <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800887e:	4e10      	ldr	r6, [pc, #64]	@ (80088c0 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8008880:	4638      	mov	r0, r7
 8008882:	f7fe fbab 	bl	8006fdc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008886:	4630      	mov	r0, r6
 8008888:	f7fe fba8 	bl	8006fdc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800888c:	4b0d      	ldr	r3, [pc, #52]	@ (80088c4 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800888e:	4a0e      	ldr	r2, [pc, #56]	@ (80088c8 <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 8008890:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008892:	4b0e      	ldr	r3, [pc, #56]	@ (80088cc <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008894:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 8008896:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008898:	200a      	movs	r0, #10
 800889a:	4b0d      	ldr	r3, [pc, #52]	@ (80088d0 <prvCheckForValidListAndQueue+0x60>)
 800889c:	9500      	str	r5, [sp, #0]
 800889e:	f7fe fe54 	bl	800754a <xQueueGenericCreateStatic>
 80088a2:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80088a4:	b110      	cbz	r0, 80088ac <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80088a6:	490b      	ldr	r1, [pc, #44]	@ (80088d4 <prvCheckForValidListAndQueue+0x64>)
 80088a8:	f7ff fa2c 	bl	8007d04 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 80088ac:	b003      	add	sp, #12
 80088ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 80088b2:	f7fe bc5f 	b.w	8007174 <vPortExitCritical>
 80088b6:	bf00      	nop
 80088b8:	20012618 	.word	0x20012618
 80088bc:	20012638 	.word	0x20012638
 80088c0:	20012624 	.word	0x20012624
 80088c4:	20012620 	.word	0x20012620
 80088c8:	20012570 	.word	0x20012570
 80088cc:	2001261c 	.word	0x2001261c
 80088d0:	20012520 	.word	0x20012520
 80088d4:	080158cd 	.word	0x080158cd

080088d8 <xTimerCreateTimerTask>:
{
 80088d8:	b510      	push	{r4, lr}
 80088da:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 80088dc:	f7ff ffc8 	bl	8008870 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80088e0:	4b12      	ldr	r3, [pc, #72]	@ (800892c <xTimerCreateTimerTask+0x54>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	b1b3      	cbz	r3, 8008914 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80088e6:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80088e8:	aa07      	add	r2, sp, #28
 80088ea:	a906      	add	r1, sp, #24
 80088ec:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80088ee:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80088f2:	f7fe fa6b 	bl	8006dcc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80088f6:	9b05      	ldr	r3, [sp, #20]
 80088f8:	9302      	str	r3, [sp, #8]
 80088fa:	9b06      	ldr	r3, [sp, #24]
 80088fc:	9301      	str	r3, [sp, #4]
 80088fe:	2302      	movs	r3, #2
 8008900:	9300      	str	r3, [sp, #0]
 8008902:	9a07      	ldr	r2, [sp, #28]
 8008904:	490a      	ldr	r1, [pc, #40]	@ (8008930 <xTimerCreateTimerTask+0x58>)
 8008906:	480b      	ldr	r0, [pc, #44]	@ (8008934 <xTimerCreateTimerTask+0x5c>)
 8008908:	4623      	mov	r3, r4
 800890a:	f7ff fbc0 	bl	800808e <xTaskCreateStatic>
 800890e:	4b0a      	ldr	r3, [pc, #40]	@ (8008938 <xTimerCreateTimerTask+0x60>)
 8008910:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8008912:	b940      	cbnz	r0, 8008926 <xTimerCreateTimerTask+0x4e>
 8008914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008918:	f383 8811 	msr	BASEPRI, r3
 800891c:	f3bf 8f6f 	isb	sy
 8008920:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8008924:	e7fe      	b.n	8008924 <xTimerCreateTimerTask+0x4c>
}
 8008926:	2001      	movs	r0, #1
 8008928:	b008      	add	sp, #32
 800892a:	bd10      	pop	{r4, pc}
 800892c:	20012618 	.word	0x20012618
 8008930:	080158d2 	.word	0x080158d2
 8008934:	08008a39 	.word	0x08008a39
 8008938:	20012614 	.word	0x20012614

0800893c <xTimerGenericCommand>:
{
 800893c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800893e:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8008940:	4604      	mov	r4, r0
{
 8008942:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8008944:	b940      	cbnz	r0, 8008958 <xTimerGenericCommand+0x1c>
 8008946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800894a:	f383 8811 	msr	BASEPRI, r3
 800894e:	f3bf 8f6f 	isb	sy
 8008952:	f3bf 8f4f 	dsb	sy
 8008956:	e7fe      	b.n	8008956 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8008958:	4d0d      	ldr	r5, [pc, #52]	@ (8008990 <xTimerGenericCommand+0x54>)
 800895a:	6828      	ldr	r0, [r5, #0]
 800895c:	b180      	cbz	r0, 8008980 <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800895e:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008960:	e9cd 1600 	strd	r1, r6, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008964:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008966:	dc0d      	bgt.n	8008984 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008968:	f7ff fe7a 	bl	8008660 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800896c:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800896e:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008970:	bf08      	it	eq
 8008972:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008974:	6828      	ldr	r0, [r5, #0]
 8008976:	bf18      	it	ne
 8008978:	461a      	movne	r2, r3
 800897a:	4669      	mov	r1, sp
 800897c:	f7fe fe9a 	bl	80076b4 <xQueueGenericSend>
}
 8008980:	b004      	add	sp, #16
 8008982:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008984:	2300      	movs	r3, #0
 8008986:	4669      	mov	r1, sp
 8008988:	f7fe ff46 	bl	8007818 <xQueueGenericSendFromISR>
 800898c:	e7f8      	b.n	8008980 <xTimerGenericCommand+0x44>
 800898e:	bf00      	nop
 8008990:	20012618 	.word	0x20012618

08008994 <prvSampleTimeNow>:
{
 8008994:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8008998:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8008a34 <prvSampleTimeNow+0xa0>
{
 800899c:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800899e:	f7ff fc2b 	bl	80081f8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80089a2:	f8d8 3000 	ldr.w	r3, [r8]
 80089a6:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 80089a8:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 80089aa:	d909      	bls.n	80089c0 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80089ac:	4f1f      	ldr	r7, [pc, #124]	@ (8008a2c <prvSampleTimeNow+0x98>)
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	b96a      	cbnz	r2, 80089d0 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 80089b4:	4a1e      	ldr	r2, [pc, #120]	@ (8008a30 <prvSampleTimeNow+0x9c>)
 80089b6:	6811      	ldr	r1, [r2, #0]
 80089b8:	6039      	str	r1, [r7, #0]
	pxOverflowTimerList = pxTemp;
 80089ba:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 80089bc:	2301      	movs	r3, #1
 80089be:	e000      	b.n	80089c2 <prvSampleTimeNow+0x2e>
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 80089c4:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 80089c6:	f8c8 5000 	str.w	r5, [r8]
}
 80089ca:	b002      	add	sp, #8
 80089cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089d0:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089d2:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089d4:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80089d8:	f104 0a04 	add.w	sl, r4, #4
 80089dc:	4650      	mov	r0, sl
 80089de:	f7fe fb2d 	bl	800703c <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089e2:	6a23      	ldr	r3, [r4, #32]
 80089e4:	4620      	mov	r0, r4
 80089e6:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80089e8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80089ec:	075b      	lsls	r3, r3, #29
 80089ee:	d5de      	bpl.n	80089ae <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80089f0:	69a3      	ldr	r3, [r4, #24]
 80089f2:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 80089f4:	4599      	cmp	r9, r3
 80089f6:	d206      	bcs.n	8008a06 <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80089f8:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80089fa:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80089fc:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80089fe:	4651      	mov	r1, sl
 8008a00:	f7fe fb05 	bl	800700e <vListInsert>
 8008a04:	e7d3      	b.n	80089ae <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a06:	2300      	movs	r3, #0
 8008a08:	9300      	str	r3, [sp, #0]
 8008a0a:	464a      	mov	r2, r9
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	4620      	mov	r0, r4
 8008a10:	f7ff ff94 	bl	800893c <xTimerGenericCommand>
				configASSERT( xResult );
 8008a14:	2800      	cmp	r0, #0
 8008a16:	d1ca      	bne.n	80089ae <prvSampleTimeNow+0x1a>
 8008a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a1c:	f383 8811 	msr	BASEPRI, r3
 8008a20:	f3bf 8f6f 	isb	sy
 8008a24:	f3bf 8f4f 	dsb	sy
 8008a28:	e7fe      	b.n	8008a28 <prvSampleTimeNow+0x94>
 8008a2a:	bf00      	nop
 8008a2c:	20012620 	.word	0x20012620
 8008a30:	2001261c 	.word	0x2001261c
 8008a34:	20012610 	.word	0x20012610

08008a38 <prvTimerTask>:
{
 8008a38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008a3c:	4d6e      	ldr	r5, [pc, #440]	@ (8008bf8 <prvTimerTask+0x1c0>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008a3e:	4e6f      	ldr	r6, [pc, #444]	@ (8008bfc <prvTimerTask+0x1c4>)
{
 8008a40:	b089      	sub	sp, #36	@ 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008a42:	682b      	ldr	r3, [r5, #0]
 8008a44:	f8d3 8000 	ldr.w	r8, [r3]
 8008a48:	f1b8 0f00 	cmp.w	r8, #0
 8008a4c:	d035      	beq.n	8008aba <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	f8d3 8000 	ldr.w	r8, [r3]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008a54:	2400      	movs	r4, #0
	vTaskSuspendAll();
 8008a56:	f7ff fbc7 	bl	80081e8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008a5a:	a804      	add	r0, sp, #16
 8008a5c:	f7ff ff9a 	bl	8008994 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8008a60:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008a62:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d169      	bne.n	8008b3c <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008a68:	2c00      	cmp	r4, #0
 8008a6a:	d14c      	bne.n	8008b06 <prvTimerTask+0xce>
 8008a6c:	4540      	cmp	r0, r8
 8008a6e:	d350      	bcc.n	8008b12 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 8008a70:	f7ff fc5e 	bl	8008330 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a74:	682b      	ldr	r3, [r5, #0]
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a7a:	1d38      	adds	r0, r7, #4
 8008a7c:	f7fe fade 	bl	800703c <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a80:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008a84:	0758      	lsls	r0, r3, #29
 8008a86:	d51a      	bpl.n	8008abe <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008a88:	69b9      	ldr	r1, [r7, #24]
 8008a8a:	4643      	mov	r3, r8
 8008a8c:	464a      	mov	r2, r9
 8008a8e:	4441      	add	r1, r8
 8008a90:	4638      	mov	r0, r7
 8008a92:	f7ff fecf 	bl	8008834 <prvInsertTimerInActiveList>
 8008a96:	b1b0      	cbz	r0, 8008ac6 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a98:	9400      	str	r4, [sp, #0]
 8008a9a:	4623      	mov	r3, r4
 8008a9c:	4642      	mov	r2, r8
 8008a9e:	4621      	mov	r1, r4
 8008aa0:	4638      	mov	r0, r7
 8008aa2:	f7ff ff4b 	bl	800893c <xTimerGenericCommand>
			configASSERT( xResult );
 8008aa6:	b970      	cbnz	r0, 8008ac6 <prvTimerTask+0x8e>
 8008aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aac:	f383 8811 	msr	BASEPRI, r3
 8008ab0:	f3bf 8f6f 	isb	sy
 8008ab4:	f3bf 8f4f 	dsb	sy
 8008ab8:	e7fe      	b.n	8008ab8 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008aba:	2401      	movs	r4, #1
 8008abc:	e7cb      	b.n	8008a56 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008abe:	f023 0301 	bic.w	r3, r3, #1
 8008ac2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ac6:	6a3b      	ldr	r3, [r7, #32]
 8008ac8:	4638      	mov	r0, r7
 8008aca:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008acc:	6830      	ldr	r0, [r6, #0]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	a904      	add	r1, sp, #16
 8008ad2:	f7fe ff4f 	bl	8007974 <xQueueReceive>
 8008ad6:	2800      	cmp	r0, #0
 8008ad8:	d0b3      	beq.n	8008a42 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008ada:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008adc:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	db2f      	blt.n	8008b42 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008ae2:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008ae4:	6963      	ldr	r3, [r4, #20]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d132      	bne.n	8008b50 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008aea:	a803      	add	r0, sp, #12
 8008aec:	f7ff ff52 	bl	8008994 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8008af0:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008af2:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8008af4:	2b09      	cmp	r3, #9
 8008af6:	d8e9      	bhi.n	8008acc <prvTimerTask+0x94>
 8008af8:	e8df f003 	tbb	[pc, r3]
 8008afc:	572e2e2e 	.word	0x572e2e2e
 8008b00:	2e2e765e 	.word	0x2e2e765e
 8008b04:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008b06:	4b3e      	ldr	r3, [pc, #248]	@ (8008c00 <prvTimerTask+0x1c8>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	681c      	ldr	r4, [r3, #0]
 8008b0c:	fab4 f484 	clz	r4, r4
 8008b10:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008b12:	6830      	ldr	r0, [r6, #0]
 8008b14:	4622      	mov	r2, r4
 8008b16:	eba8 0109 	sub.w	r1, r8, r9
 8008b1a:	f7ff f932 	bl	8007d82 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008b1e:	f7ff fc07 	bl	8008330 <xTaskResumeAll>
 8008b22:	2800      	cmp	r0, #0
 8008b24:	d1d2      	bne.n	8008acc <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 8008b26:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008b2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b2e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008b32:	f3bf 8f4f 	dsb	sy
 8008b36:	f3bf 8f6f 	isb	sy
 8008b3a:	e7c7      	b.n	8008acc <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 8008b3c:	f7ff fbf8 	bl	8008330 <xTaskResumeAll>
}
 8008b40:	e7c4      	b.n	8008acc <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008b42:	9b05      	ldr	r3, [sp, #20]
 8008b44:	9907      	ldr	r1, [sp, #28]
 8008b46:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008b48:	9b04      	ldr	r3, [sp, #16]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	dbbe      	blt.n	8008acc <prvTimerTask+0x94>
 8008b4e:	e7c8      	b.n	8008ae2 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b50:	1d20      	adds	r0, r4, #4
 8008b52:	f7fe fa73 	bl	800703c <uxListRemove>
 8008b56:	e7c8      	b.n	8008aea <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b58:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008b5c:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b5e:	f043 0301 	orr.w	r3, r3, #1
 8008b62:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008b66:	9b05      	ldr	r3, [sp, #20]
 8008b68:	4620      	mov	r0, r4
 8008b6a:	4419      	add	r1, r3
 8008b6c:	f7ff fe62 	bl	8008834 <prvInsertTimerInActiveList>
 8008b70:	2800      	cmp	r0, #0
 8008b72:	d0ab      	beq.n	8008acc <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b74:	6a23      	ldr	r3, [r4, #32]
 8008b76:	4620      	mov	r0, r4
 8008b78:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b7a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8008b7e:	0759      	lsls	r1, r3, #29
 8008b80:	d5a4      	bpl.n	8008acc <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008b82:	69a2      	ldr	r2, [r4, #24]
 8008b84:	9905      	ldr	r1, [sp, #20]
 8008b86:	2300      	movs	r3, #0
 8008b88:	440a      	add	r2, r1
 8008b8a:	9300      	str	r3, [sp, #0]
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	4620      	mov	r0, r4
 8008b90:	f7ff fed4 	bl	800893c <xTimerGenericCommand>
							configASSERT( xResult );
 8008b94:	2800      	cmp	r0, #0
 8008b96:	d199      	bne.n	8008acc <prvTimerTask+0x94>
 8008b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b9c:	f383 8811 	msr	BASEPRI, r3
 8008ba0:	f3bf 8f6f 	isb	sy
 8008ba4:	f3bf 8f4f 	dsb	sy
 8008ba8:	e7fe      	b.n	8008ba8 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008baa:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008bae:	f023 0301 	bic.w	r3, r3, #1
 8008bb2:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8008bb6:	e789      	b.n	8008acc <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008bb8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8008bbc:	f043 0301 	orr.w	r3, r3, #1
 8008bc0:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008bc4:	9905      	ldr	r1, [sp, #20]
 8008bc6:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008bc8:	b941      	cbnz	r1, 8008bdc <prvTimerTask+0x1a4>
 8008bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bce:	f383 8811 	msr	BASEPRI, r3
 8008bd2:	f3bf 8f6f 	isb	sy
 8008bd6:	f3bf 8f4f 	dsb	sy
 8008bda:	e7fe      	b.n	8008bda <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008bdc:	4603      	mov	r3, r0
 8008bde:	4401      	add	r1, r0
 8008be0:	4620      	mov	r0, r4
 8008be2:	f7ff fe27 	bl	8008834 <prvInsertTimerInActiveList>
					break;
 8008be6:	e771      	b.n	8008acc <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008be8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8008bec:	079a      	lsls	r2, r3, #30
 8008bee:	d4de      	bmi.n	8008bae <prvTimerTask+0x176>
							vPortFree( pxTimer );
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	f7fe f9b5 	bl	8006f60 <vPortFree>
 8008bf6:	e769      	b.n	8008acc <prvTimerTask+0x94>
 8008bf8:	20012620 	.word	0x20012620
 8008bfc:	20012618 	.word	0x20012618
 8008c00:	2001261c 	.word	0x2001261c

08008c04 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8008c04:	8880      	ldrh	r0, [r0, #4]
 8008c06:	4770      	bx	lr

08008c08 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8008c08:	b570      	push	{r4, r5, r6, lr}
 8008c0a:	6803      	ldr	r3, [r0, #0]
 8008c0c:	4605      	mov	r5, r0
 8008c0e:	460c      	mov	r4, r1
 8008c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c12:	2100      	movs	r1, #0
 8008c14:	4798      	blx	r3
 8008c16:	682b      	ldr	r3, [r5, #0]
 8008c18:	4606      	mov	r6, r0
 8008c1a:	6a1b      	ldr	r3, [r3, #32]
 8008c1c:	4628      	mov	r0, r5
 8008c1e:	4798      	blx	r3
 8008c20:	1ba4      	subs	r4, r4, r6
 8008c22:	b2a4      	uxth	r4, r4
 8008c24:	fbb4 f0f0 	udiv	r0, r4, r0
 8008c28:	bd70      	pop	{r4, r5, r6, pc}

08008c2a <_ZN8touchgfx17AbstractPartition5clearEv>:
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	8083      	strh	r3, [r0, #4]
 8008c2e:	4770      	bx	lr

08008c30 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8008c30:	b510      	push	{r4, lr}
 8008c32:	6803      	ldr	r3, [r0, #0]
 8008c34:	8881      	ldrh	r1, [r0, #4]
 8008c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c38:	4604      	mov	r4, r0
 8008c3a:	4798      	blx	r3
 8008c3c:	88a3      	ldrh	r3, [r4, #4]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	80a3      	strh	r3, [r4, #4]
 8008c42:	bd10      	pop	{r4, pc}

08008c44 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8008c44:	6803      	ldr	r3, [r0, #0]
 8008c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c48:	4718      	bx	r3

08008c4a <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8008c4a:	4770      	bx	lr

08008c4c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8008c4c:	4a02      	ldr	r2, [pc, #8]	@ (8008c58 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8008c4e:	6002      	str	r2, [r0, #0]
 8008c50:	2200      	movs	r2, #0
 8008c52:	8082      	strh	r2, [r0, #4]
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop
 8008c58:	080158e4 	.word	0x080158e4

08008c5c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8008c5c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8008c5e:	2000      	movs	r0, #0
 8008c60:	b12b      	cbz	r3, 8008c6e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8008c62:	b920      	cbnz	r0, 8008c6e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8008c64:	1a5a      	subs	r2, r3, r1
 8008c66:	4250      	negs	r0, r2
 8008c68:	4150      	adcs	r0, r2
 8008c6a:	699b      	ldr	r3, [r3, #24]
 8008c6c:	e7f8      	b.n	8008c60 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8008c6e:	4770      	bx	lr

08008c70 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8008c70:	2300      	movs	r3, #0
 8008c72:	6148      	str	r0, [r1, #20]
 8008c74:	618b      	str	r3, [r1, #24]
 8008c76:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8008c78:	b913      	cbnz	r3, 8008c80 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8008c7a:	6281      	str	r1, [r0, #40]	@ 0x28
 8008c7c:	4770      	bx	lr
 8008c7e:	4613      	mov	r3, r2
 8008c80:	699a      	ldr	r2, [r3, #24]
 8008c82:	2a00      	cmp	r2, #0
 8008c84:	d1fb      	bne.n	8008c7e <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8008c86:	6199      	str	r1, [r3, #24]
 8008c88:	4770      	bx	lr

08008c8a <_ZN8touchgfx9Container9removeAllEv>:
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8008c8e:	b123      	cbz	r3, 8008c9a <_ZN8touchgfx9Container9removeAllEv+0x10>
 8008c90:	6999      	ldr	r1, [r3, #24]
 8008c92:	6281      	str	r1, [r0, #40]	@ 0x28
 8008c94:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8008c98:	e7f8      	b.n	8008c8c <_ZN8touchgfx9Container9removeAllEv+0x2>
 8008c9a:	4770      	bx	lr

08008c9c <_ZN8touchgfx9Container6unlinkEv>:
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	6283      	str	r3, [r0, #40]	@ 0x28
 8008ca0:	4770      	bx	lr

08008ca2 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	8002      	strh	r2, [r0, #0]
 8008ca6:	8042      	strh	r2, [r0, #2]
 8008ca8:	8082      	strh	r2, [r0, #4]
 8008caa:	80c2      	strh	r2, [r0, #6]
 8008cac:	4770      	bx	lr

08008cae <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8008cae:	b570      	push	{r4, r5, r6, lr}
 8008cb0:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8008cb2:	460d      	mov	r5, r1
 8008cb4:	4616      	mov	r6, r2
 8008cb6:	b13c      	cbz	r4, 8008cc8 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8008cb8:	6823      	ldr	r3, [r4, #0]
 8008cba:	4620      	mov	r0, r4
 8008cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cbe:	4632      	mov	r2, r6
 8008cc0:	4629      	mov	r1, r5
 8008cc2:	4798      	blx	r3
 8008cc4:	69a4      	ldr	r4, [r4, #24]
 8008cc6:	e7f6      	b.n	8008cb6 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8008cc8:	bd70      	pop	{r4, r5, r6, pc}

08008cca <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8008cca:	b538      	push	{r3, r4, r5, lr}
 8008ccc:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8008cce:	460d      	mov	r5, r1
 8008cd0:	b134      	cbz	r4, 8008ce0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8008cd2:	682b      	ldr	r3, [r5, #0]
 8008cd4:	4621      	mov	r1, r4
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	4628      	mov	r0, r5
 8008cda:	4798      	blx	r3
 8008cdc:	69a4      	ldr	r4, [r4, #24]
 8008cde:	e7f7      	b.n	8008cd0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8008ce0:	bd38      	pop	{r3, r4, r5, pc}

08008ce2 <_ZN8touchgfx9ContainerD1Ev>:
 8008ce2:	4770      	bx	lr

08008ce4 <_ZN8touchgfx9ContainerD0Ev>:
 8008ce4:	b510      	push	{r4, lr}
 8008ce6:	212c      	movs	r1, #44	@ 0x2c
 8008ce8:	4604      	mov	r4, r0
 8008cea:	f00a fb25 	bl	8013338 <_ZdlPvj>
 8008cee:	4620      	mov	r0, r4
 8008cf0:	bd10      	pop	{r4, pc}

08008cf2 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8008cf2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8008cf4:	b19b      	cbz	r3, 8008d1e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8008cf6:	428b      	cmp	r3, r1
 8008cf8:	d109      	bne.n	8008d0e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8008cfa:	699a      	ldr	r2, [r3, #24]
 8008cfc:	2100      	movs	r1, #0
 8008cfe:	6159      	str	r1, [r3, #20]
 8008d00:	6282      	str	r2, [r0, #40]	@ 0x28
 8008d02:	b902      	cbnz	r2, 8008d06 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8008d04:	4770      	bx	lr
 8008d06:	6199      	str	r1, [r3, #24]
 8008d08:	4770      	bx	lr
 8008d0a:	4613      	mov	r3, r2
 8008d0c:	b13a      	cbz	r2, 8008d1e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8008d0e:	699a      	ldr	r2, [r3, #24]
 8008d10:	428a      	cmp	r2, r1
 8008d12:	d1fa      	bne.n	8008d0a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8008d14:	698a      	ldr	r2, [r1, #24]
 8008d16:	619a      	str	r2, [r3, #24]
 8008d18:	2300      	movs	r3, #0
 8008d1a:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8008d1e:	4770      	bx	lr

08008d20 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8008d20:	b410      	push	{r4}
 8008d22:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8008d24:	4604      	mov	r4, r0
 8008d26:	b92b      	cbnz	r3, 8008d34 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8008d28:	6803      	ldr	r3, [r0, #0]
 8008d2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d30:	4611      	mov	r1, r2
 8008d32:	4718      	bx	r3
 8008d34:	b941      	cbnz	r1, 8008d48 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8008d36:	6193      	str	r3, [r2, #24]
 8008d38:	6282      	str	r2, [r0, #40]	@ 0x28
 8008d3a:	6154      	str	r4, [r2, #20]
 8008d3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d40:	4770      	bx	lr
 8008d42:	4603      	mov	r3, r0
 8008d44:	2800      	cmp	r0, #0
 8008d46:	d0f9      	beq.n	8008d3c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8008d48:	4299      	cmp	r1, r3
 8008d4a:	6998      	ldr	r0, [r3, #24]
 8008d4c:	d1f9      	bne.n	8008d42 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8008d4e:	6190      	str	r0, [r2, #24]
 8008d50:	618a      	str	r2, [r1, #24]
 8008d52:	e7f2      	b.n	8008d3a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08008d54 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8008d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d58:	461f      	mov	r7, r3
 8008d5a:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8008d5e:	460d      	mov	r5, r1
 8008d60:	4616      	mov	r6, r2
 8008d62:	b103      	cbz	r3, 8008d66 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8008d64:	6038      	str	r0, [r7, #0]
 8008d66:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8008d68:	b314      	cbz	r4, 8008db0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8008d6a:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8008d6e:	b1eb      	cbz	r3, 8008dac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8008d70:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8008d74:	428d      	cmp	r5, r1
 8008d76:	db19      	blt.n	8008dac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8008d78:	8923      	ldrh	r3, [r4, #8]
 8008d7a:	b289      	uxth	r1, r1
 8008d7c:	440b      	add	r3, r1
 8008d7e:	b21b      	sxth	r3, r3
 8008d80:	429d      	cmp	r5, r3
 8008d82:	da13      	bge.n	8008dac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8008d84:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8008d88:	4296      	cmp	r6, r2
 8008d8a:	db0f      	blt.n	8008dac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8008d8c:	8963      	ldrh	r3, [r4, #10]
 8008d8e:	b292      	uxth	r2, r2
 8008d90:	4413      	add	r3, r2
 8008d92:	b21b      	sxth	r3, r3
 8008d94:	429e      	cmp	r6, r3
 8008d96:	da09      	bge.n	8008dac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8008d98:	6823      	ldr	r3, [r4, #0]
 8008d9a:	1ab2      	subs	r2, r6, r2
 8008d9c:	1a69      	subs	r1, r5, r1
 8008d9e:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 8008da2:	b212      	sxth	r2, r2
 8008da4:	463b      	mov	r3, r7
 8008da6:	b209      	sxth	r1, r1
 8008da8:	4620      	mov	r0, r4
 8008daa:	47c0      	blx	r8
 8008dac:	69a4      	ldr	r4, [r4, #24]
 8008dae:	e7db      	b.n	8008d68 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8008db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008db4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8008db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db8:	4c6e      	ldr	r4, [pc, #440]	@ (8008f74 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8008dba:	b0a1      	sub	sp, #132	@ 0x84
 8008dbc:	6824      	ldr	r4, [r4, #0]
 8008dbe:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8008dc0:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8008dc4:	9303      	str	r3, [sp, #12]
 8008dc6:	2400      	movs	r4, #0
 8008dc8:	802c      	strh	r4, [r5, #0]
 8008dca:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 8008dcc:	802c      	strh	r4, [r5, #0]
 8008dce:	601c      	str	r4, [r3, #0]
 8008dd0:	4606      	mov	r6, r0
 8008dd2:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8008dd6:	f7ff ffbd 	bl	8008d54 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8008dda:	f1b9 0f03 	cmp.w	r9, #3
 8008dde:	f340 80c2 	ble.w	8008f66 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 8008de2:	4631      	mov	r1, r6
 8008de4:	a80c      	add	r0, sp, #48	@ 0x30
 8008de6:	f005 f853 	bl	800de90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8008dea:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8008dee:	9306      	str	r3, [sp, #24]
 8008df0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8008df4:	9307      	str	r3, [sp, #28]
 8008df6:	9b03      	ldr	r3, [sp, #12]
 8008df8:	f8d3 a000 	ldr.w	sl, [r3]
 8008dfc:	f1ba 0f00 	cmp.w	sl, #0
 8008e00:	f000 80b4 	beq.w	8008f6c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>
 8008e04:	4651      	mov	r1, sl
 8008e06:	a810      	add	r0, sp, #64	@ 0x40
 8008e08:	f005 f842 	bl	800de90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8008e0c:	9b01      	ldr	r3, [sp, #4]
 8008e0e:	9a06      	ldr	r2, [sp, #24]
 8008e10:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 8008e14:	189d      	adds	r5, r3, r2
 8008e16:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 8008e1a:	9a07      	ldr	r2, [sp, #28]
 8008e1c:	2002      	movs	r0, #2
 8008e1e:	fb91 f1f0 	sdiv	r1, r1, r0
 8008e22:	4419      	add	r1, r3
 8008e24:	1a6d      	subs	r5, r5, r1
 8008e26:	9b02      	ldr	r3, [sp, #8]
 8008e28:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 8008e2c:	4413      	add	r3, r2
 8008e2e:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 8008e32:	fb92 f2f0 	sdiv	r2, r2, r0
 8008e36:	440a      	add	r2, r1
 8008e38:	1a9b      	subs	r3, r3, r2
 8008e3a:	435b      	muls	r3, r3
 8008e3c:	fb05 3505 	mla	r5, r5, r5, r3
 8008e40:	4f4d      	ldr	r7, [pc, #308]	@ (8008f78 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c4>)
 8008e42:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8008e44:	ac10      	add	r4, sp, #64	@ 0x40
 8008e46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e48:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8008e4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e4c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8008e4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e50:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8008e54:	f1b9 0f0c 	cmp.w	r9, #12
 8008e58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008e5c:	f04f 0303 	mov.w	r3, #3
 8008e60:	bfc8      	it	gt
 8008e62:	4698      	movgt	r8, r3
 8008e64:	f8cd 9000 	str.w	r9, [sp]
 8008e68:	f04f 0400 	mov.w	r4, #0
 8008e6c:	bfdc      	itt	le
 8008e6e:	f109 32ff 	addle.w	r2, r9, #4294967295
 8008e72:	fb92 f8f3 	sdivle	r8, r2, r3
 8008e76:	1c63      	adds	r3, r4, #1
 8008e78:	aa10      	add	r2, sp, #64	@ 0x40
 8008e7a:	f004 0401 	and.w	r4, r4, #1
 8008e7e:	9308      	str	r3, [sp, #32]
 8008e80:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8008e84:	9b00      	ldr	r3, [sp, #0]
 8008e86:	fb93 f3f8 	sdiv	r3, r3, r8
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	3404      	adds	r4, #4
 8008e8e:	f04f 0b00 	mov.w	fp, #0
 8008e92:	9304      	str	r3, [sp, #16]
 8008e94:	9a04      	ldr	r2, [sp, #16]
 8008e96:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008e9a:	fb13 f302 	smulbb	r3, r3, r2
 8008e9e:	9a01      	ldr	r2, [sp, #4]
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	1899      	adds	r1, r3, r2
 8008ea4:	9305      	str	r3, [sp, #20]
 8008ea6:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8008eaa:	b209      	sxth	r1, r1
 8008eac:	4299      	cmp	r1, r3
 8008eae:	db4d      	blt.n	8008f4c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8008eb0:	8932      	ldrh	r2, [r6, #8]
 8008eb2:	4413      	add	r3, r2
 8008eb4:	b21b      	sxth	r3, r3
 8008eb6:	4299      	cmp	r1, r3
 8008eb8:	da48      	bge.n	8008f4c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8008eba:	9b04      	ldr	r3, [sp, #16]
 8008ebc:	6827      	ldr	r7, [r4, #0]
 8008ebe:	fb17 f703 	smulbb	r7, r7, r3
 8008ec2:	9b02      	ldr	r3, [sp, #8]
 8008ec4:	b2bf      	uxth	r7, r7
 8008ec6:	18fa      	adds	r2, r7, r3
 8008ec8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8008ecc:	b212      	sxth	r2, r2
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	db3c      	blt.n	8008f4c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8008ed2:	8970      	ldrh	r0, [r6, #10]
 8008ed4:	4403      	add	r3, r0
 8008ed6:	b21b      	sxth	r3, r3
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	da37      	bge.n	8008f4c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8008edc:	2300      	movs	r3, #0
 8008ede:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ee0:	4630      	mov	r0, r6
 8008ee2:	ab0b      	add	r3, sp, #44	@ 0x2c
 8008ee4:	f7ff ff36 	bl	8008d54 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8008ee8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008eea:	b37a      	cbz	r2, 8008f4c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8008eec:	4552      	cmp	r2, sl
 8008eee:	d02d      	beq.n	8008f4c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8008ef0:	4611      	mov	r1, r2
 8008ef2:	a80e      	add	r0, sp, #56	@ 0x38
 8008ef4:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ef6:	f004 ffcb 	bl	800de90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8008efa:	9a06      	ldr	r2, [sp, #24]
 8008efc:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 8008f00:	9b01      	ldr	r3, [sp, #4]
 8008f02:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 8008f06:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 8008f0a:	4413      	add	r3, r2
 8008f0c:	f04f 0e02 	mov.w	lr, #2
 8008f10:	fb91 f1fe 	sdiv	r1, r1, lr
 8008f14:	4401      	add	r1, r0
 8008f16:	1a58      	subs	r0, r3, r1
 8008f18:	9a07      	ldr	r2, [sp, #28]
 8008f1a:	9b02      	ldr	r3, [sp, #8]
 8008f1c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 8008f20:	fb9c fcfe 	sdiv	ip, ip, lr
 8008f24:	4413      	add	r3, r2
 8008f26:	448c      	add	ip, r1
 8008f28:	eba3 030c 	sub.w	r3, r3, ip
 8008f2c:	435b      	muls	r3, r3
 8008f2e:	fb00 3300 	mla	r3, r0, r0, r3
 8008f32:	42ab      	cmp	r3, r5
 8008f34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f36:	d208      	bcs.n	8008f4a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8008f38:	9803      	ldr	r0, [sp, #12]
 8008f3a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008f3c:	6001      	str	r1, [r0, #0]
 8008f3e:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8008f40:	9805      	ldr	r0, [sp, #20]
 8008f42:	8008      	strh	r0, [r1, #0]
 8008f44:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8008f46:	461d      	mov	r5, r3
 8008f48:	800f      	strh	r7, [r1, #0]
 8008f4a:	4692      	mov	sl, r2
 8008f4c:	f10b 0b01 	add.w	fp, fp, #1
 8008f50:	f1bb 0f04 	cmp.w	fp, #4
 8008f54:	f104 0408 	add.w	r4, r4, #8
 8008f58:	d19c      	bne.n	8008e94 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8008f5a:	9b00      	ldr	r3, [sp, #0]
 8008f5c:	9c08      	ldr	r4, [sp, #32]
 8008f5e:	444b      	add	r3, r9
 8008f60:	4544      	cmp	r4, r8
 8008f62:	9300      	str	r3, [sp, #0]
 8008f64:	d187      	bne.n	8008e76 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8008f66:	b021      	add	sp, #132	@ 0x84
 8008f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f6c:	f04f 35ff 	mov.w	r5, #4294967295
 8008f70:	e766      	b.n	8008e40 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8008f72:	bf00      	nop
 8008f74:	20012658 	.word	0x20012658
 8008f78:	080143ec 	.word	0x080143ec

08008f7c <_ZN8touchgfx4RectaNERKS0_>:
 8008f7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f80:	f9b1 7000 	ldrsh.w	r7, [r1]
 8008f84:	888c      	ldrh	r4, [r1, #4]
 8008f86:	f9b0 9000 	ldrsh.w	r9, [r0]
 8008f8a:	443c      	add	r4, r7
 8008f8c:	b2a4      	uxth	r4, r4
 8008f8e:	fa0f f884 	sxth.w	r8, r4
 8008f92:	45c1      	cmp	r9, r8
 8008f94:	da2f      	bge.n	8008ff6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8008f96:	8882      	ldrh	r2, [r0, #4]
 8008f98:	444a      	add	r2, r9
 8008f9a:	b292      	uxth	r2, r2
 8008f9c:	fa0f fe82 	sxth.w	lr, r2
 8008fa0:	4577      	cmp	r7, lr
 8008fa2:	da28      	bge.n	8008ff6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8008fa4:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8008fa8:	88cb      	ldrh	r3, [r1, #6]
 8008faa:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8008fae:	442b      	add	r3, r5
 8008fb0:	b21b      	sxth	r3, r3
 8008fb2:	429e      	cmp	r6, r3
 8008fb4:	da1f      	bge.n	8008ff6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8008fb6:	88c3      	ldrh	r3, [r0, #6]
 8008fb8:	4433      	add	r3, r6
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	fa0f fc83 	sxth.w	ip, r3
 8008fc0:	4565      	cmp	r5, ip
 8008fc2:	da18      	bge.n	8008ff6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8008fc4:	454f      	cmp	r7, r9
 8008fc6:	bfb8      	it	lt
 8008fc8:	464f      	movlt	r7, r9
 8008fca:	42b5      	cmp	r5, r6
 8008fcc:	bfb8      	it	lt
 8008fce:	4635      	movlt	r5, r6
 8008fd0:	45f0      	cmp	r8, lr
 8008fd2:	bfd8      	it	le
 8008fd4:	4622      	movle	r2, r4
 8008fd6:	1bd2      	subs	r2, r2, r7
 8008fd8:	8082      	strh	r2, [r0, #4]
 8008fda:	884a      	ldrh	r2, [r1, #2]
 8008fdc:	88c9      	ldrh	r1, [r1, #6]
 8008fde:	8007      	strh	r7, [r0, #0]
 8008fe0:	440a      	add	r2, r1
 8008fe2:	b292      	uxth	r2, r2
 8008fe4:	b211      	sxth	r1, r2
 8008fe6:	458c      	cmp	ip, r1
 8008fe8:	bfa8      	it	ge
 8008fea:	4613      	movge	r3, r2
 8008fec:	1b5b      	subs	r3, r3, r5
 8008fee:	80c3      	strh	r3, [r0, #6]
 8008ff0:	8045      	strh	r5, [r0, #2]
 8008ff2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	8003      	strh	r3, [r0, #0]
 8008ffa:	8043      	strh	r3, [r0, #2]
 8008ffc:	8083      	strh	r3, [r0, #4]
 8008ffe:	80c3      	strh	r3, [r0, #6]
 8009000:	e7f7      	b.n	8008ff2 <_ZN8touchgfx4RectaNERKS0_+0x76>

08009002 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8009002:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8009006:	2b00      	cmp	r3, #0
 8009008:	dd06      	ble.n	8009018 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800900a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800900e:	2800      	cmp	r0, #0
 8009010:	bfcc      	ite	gt
 8009012:	2000      	movgt	r0, #0
 8009014:	2001      	movle	r0, #1
 8009016:	4770      	bx	lr
 8009018:	2001      	movs	r0, #1
 800901a:	4770      	bx	lr

0800901c <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800901c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009020:	2300      	movs	r3, #0
 8009022:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8009024:	8003      	strh	r3, [r0, #0]
 8009026:	4604      	mov	r4, r0
 8009028:	8043      	strh	r3, [r0, #2]
 800902a:	8083      	strh	r3, [r0, #4]
 800902c:	80c3      	strh	r3, [r0, #6]
 800902e:	2d00      	cmp	r5, #0
 8009030:	d040      	beq.n	80090b4 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8009032:	1d28      	adds	r0, r5, #4
 8009034:	f7ff ffe5 	bl	8009002 <_ZNK8touchgfx4Rect7isEmptyEv>
 8009038:	b988      	cbnz	r0, 800905e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800903a:	4620      	mov	r0, r4
 800903c:	f7ff ffe1 	bl	8009002 <_ZNK8touchgfx4Rect7isEmptyEv>
 8009040:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8009044:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8009048:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800904c:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8009050:	b138      	cbz	r0, 8009062 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8009052:	8022      	strh	r2, [r4, #0]
 8009054:	8063      	strh	r3, [r4, #2]
 8009056:	f8a4 e004 	strh.w	lr, [r4, #4]
 800905a:	f8a4 c006 	strh.w	ip, [r4, #6]
 800905e:	69ad      	ldr	r5, [r5, #24]
 8009060:	e7e5      	b.n	800902e <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8009062:	f9b4 0000 	ldrsh.w	r0, [r4]
 8009066:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800906a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800906e:	4290      	cmp	r0, r2
 8009070:	4607      	mov	r7, r0
 8009072:	bfa8      	it	ge
 8009074:	4617      	movge	r7, r2
 8009076:	4472      	add	r2, lr
 8009078:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800907c:	8027      	strh	r7, [r4, #0]
 800907e:	4299      	cmp	r1, r3
 8009080:	460e      	mov	r6, r1
 8009082:	4440      	add	r0, r8
 8009084:	bfa8      	it	ge
 8009086:	461e      	movge	r6, r3
 8009088:	4471      	add	r1, lr
 800908a:	4463      	add	r3, ip
 800908c:	b200      	sxth	r0, r0
 800908e:	b212      	sxth	r2, r2
 8009090:	b209      	sxth	r1, r1
 8009092:	b21b      	sxth	r3, r3
 8009094:	4290      	cmp	r0, r2
 8009096:	bfac      	ite	ge
 8009098:	ebc7 0200 	rsbge	r2, r7, r0
 800909c:	ebc7 0202 	rsblt	r2, r7, r2
 80090a0:	4299      	cmp	r1, r3
 80090a2:	bfac      	ite	ge
 80090a4:	ebc6 0301 	rsbge	r3, r6, r1
 80090a8:	ebc6 0303 	rsblt	r3, r6, r3
 80090ac:	8066      	strh	r6, [r4, #2]
 80090ae:	80a2      	strh	r2, [r4, #4]
 80090b0:	80e3      	strh	r3, [r4, #6]
 80090b2:	e7d4      	b.n	800905e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80090b4:	4620      	mov	r0, r4
 80090b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080090ba <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80090ba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80090be:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 80090c2:	b383      	cbz	r3, 8009126 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80090c4:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80090c6:	b374      	cbz	r4, 8009126 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80090c8:	f9b1 5000 	ldrsh.w	r5, [r1]
 80090cc:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80090d0:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80090d4:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80090d8:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80090dc:	b303      	cbz	r3, 8009120 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80090de:	4668      	mov	r0, sp
 80090e0:	1d21      	adds	r1, r4, #4
 80090e2:	f8ad 5000 	strh.w	r5, [sp]
 80090e6:	f8ad 6002 	strh.w	r6, [sp, #2]
 80090ea:	f8ad 7004 	strh.w	r7, [sp, #4]
 80090ee:	f8ad 8006 	strh.w	r8, [sp, #6]
 80090f2:	f7ff ff43 	bl	8008f7c <_ZN8touchgfx4RectaNERKS0_>
 80090f6:	4668      	mov	r0, sp
 80090f8:	f7ff ff83 	bl	8009002 <_ZNK8touchgfx4Rect7isEmptyEv>
 80090fc:	b980      	cbnz	r0, 8009120 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80090fe:	f8bd 3000 	ldrh.w	r3, [sp]
 8009102:	88a2      	ldrh	r2, [r4, #4]
 8009104:	1a9b      	subs	r3, r3, r2
 8009106:	f8ad 3000 	strh.w	r3, [sp]
 800910a:	88e2      	ldrh	r2, [r4, #6]
 800910c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8009110:	1a9b      	subs	r3, r3, r2
 8009112:	f8ad 3002 	strh.w	r3, [sp, #2]
 8009116:	6823      	ldr	r3, [r4, #0]
 8009118:	4669      	mov	r1, sp
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	4620      	mov	r0, r4
 800911e:	4798      	blx	r3
 8009120:	69a4      	ldr	r4, [r4, #24]
 8009122:	2c00      	cmp	r4, #0
 8009124:	d1d8      	bne.n	80090d8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8009126:	b002      	add	sp, #8
 8009128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800912c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800912c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800912e:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8009132:	460d      	mov	r5, r1
 8009134:	4616      	mov	r6, r2
 8009136:	b323      	cbz	r3, 8009182 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8009138:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800913a:	b314      	cbz	r4, 8009182 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800913c:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8009140:	b1eb      	cbz	r3, 800917e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8009142:	6828      	ldr	r0, [r5, #0]
 8009144:	6869      	ldr	r1, [r5, #4]
 8009146:	466b      	mov	r3, sp
 8009148:	c303      	stmia	r3!, {r0, r1}
 800914a:	4668      	mov	r0, sp
 800914c:	1d21      	adds	r1, r4, #4
 800914e:	f7ff ff15 	bl	8008f7c <_ZN8touchgfx4RectaNERKS0_>
 8009152:	4668      	mov	r0, sp
 8009154:	f7ff ff55 	bl	8009002 <_ZNK8touchgfx4Rect7isEmptyEv>
 8009158:	b988      	cbnz	r0, 800917e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800915a:	f8bd 3000 	ldrh.w	r3, [sp]
 800915e:	88a2      	ldrh	r2, [r4, #4]
 8009160:	1a9b      	subs	r3, r3, r2
 8009162:	f8ad 3000 	strh.w	r3, [sp]
 8009166:	88e2      	ldrh	r2, [r4, #6]
 8009168:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800916c:	1a9b      	subs	r3, r3, r2
 800916e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8009172:	6823      	ldr	r3, [r4, #0]
 8009174:	4632      	mov	r2, r6
 8009176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009178:	4669      	mov	r1, sp
 800917a:	4620      	mov	r0, r4
 800917c:	4798      	blx	r3
 800917e:	69a4      	ldr	r4, [r4, #24]
 8009180:	e7db      	b.n	800913a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8009182:	b002      	add	sp, #8
 8009184:	bd70      	pop	{r4, r5, r6, pc}

08009186 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8009186:	b513      	push	{r0, r1, r4, lr}
 8009188:	6803      	ldr	r3, [r0, #0]
 800918a:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 800918e:	2300      	movs	r3, #0
 8009190:	e9cd 3300 	strd	r3, r3, [sp]
 8009194:	466b      	mov	r3, sp
 8009196:	47a0      	blx	r4
 8009198:	b002      	add	sp, #8
 800919a:	bd10      	pop	{r4, pc}

0800919c <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800919c:	2301      	movs	r3, #1
 800919e:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 80091a2:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 80091a6:	4770      	bx	lr

080091a8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80091a8:	2301      	movs	r3, #1
 80091aa:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 80091ae:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 80091b2:	4770      	bx	lr

080091b4 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80091b4:	6843      	ldr	r3, [r0, #4]
 80091b6:	2201      	movs	r2, #1
 80091b8:	725a      	strb	r2, [r3, #9]
 80091ba:	6840      	ldr	r0, [r0, #4]
 80091bc:	6803      	ldr	r3, [r0, #0]
 80091be:	691b      	ldr	r3, [r3, #16]
 80091c0:	4718      	bx	r3

080091c2 <_ZN8touchgfx3HAL8flushDMAEv>:
 80091c2:	6840      	ldr	r0, [r0, #4]
 80091c4:	6803      	ldr	r3, [r0, #0]
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	4718      	bx	r3

080091ca <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80091ca:	b530      	push	{r4, r5, lr}
 80091cc:	b08b      	sub	sp, #44	@ 0x2c
 80091ce:	6804      	ldr	r4, [r0, #0]
 80091d0:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 80091d4:	9509      	str	r5, [sp, #36]	@ 0x24
 80091d6:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 80091da:	9508      	str	r5, [sp, #32]
 80091dc:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 80091e0:	9507      	str	r5, [sp, #28]
 80091e2:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 80091e6:	9506      	str	r5, [sp, #24]
 80091e8:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 80091ec:	9505      	str	r5, [sp, #20]
 80091ee:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 80091f2:	9504      	str	r5, [sp, #16]
 80091f4:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 80091f8:	9503      	str	r5, [sp, #12]
 80091fa:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 80091fe:	9502      	str	r5, [sp, #8]
 8009200:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8009204:	e9cd 3500 	strd	r3, r5, [sp]
 8009208:	4613      	mov	r3, r2
 800920a:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 800920c:	2200      	movs	r2, #0
 800920e:	47a0      	blx	r4
 8009210:	b00b      	add	sp, #44	@ 0x2c
 8009212:	bd30      	pop	{r4, r5, pc}

08009214 <_ZN8touchgfx3HAL10beginFrameEv>:
 8009214:	4b04      	ldr	r3, [pc, #16]	@ (8009228 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	b123      	cbz	r3, 8009224 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800921a:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 800921e:	f080 0001 	eor.w	r0, r0, #1
 8009222:	4770      	bx	lr
 8009224:	2001      	movs	r0, #1
 8009226:	4770      	bx	lr
 8009228:	20012656 	.word	0x20012656

0800922c <_ZN8touchgfx3HAL8endFrameEv>:
 800922c:	b510      	push	{r4, lr}
 800922e:	4604      	mov	r4, r0
 8009230:	6840      	ldr	r0, [r0, #4]
 8009232:	6803      	ldr	r3, [r0, #0]
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	4798      	blx	r3
 8009238:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 800923c:	b113      	cbz	r3, 8009244 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800923e:	2301      	movs	r3, #1
 8009240:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8009244:	bd10      	pop	{r4, pc}

08009246 <_ZN8touchgfx3HAL10initializeEv>:
 8009246:	b510      	push	{r4, lr}
 8009248:	4604      	mov	r4, r0
 800924a:	f7f7 fbf3 	bl	8000a34 <_ZN8touchgfx10OSWrappers10initializeEv>
 800924e:	f7f7 fafb 	bl	8000848 <_ZN8touchgfx4GPIO4initEv>
 8009252:	6860      	ldr	r0, [r4, #4]
 8009254:	6803      	ldr	r3, [r0, #0]
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	4798      	blx	r3
 800925a:	68e0      	ldr	r0, [r4, #12]
 800925c:	6803      	ldr	r3, [r0, #0]
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	4798      	blx	r3
 8009262:	6823      	ldr	r3, [r4, #0]
 8009264:	4620      	mov	r0, r4
 8009266:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800926c:	4718      	bx	r3
	...

08009270 <_ZN8touchgfx3HAL4tickEv>:
 8009270:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009272:	6803      	ldr	r3, [r0, #0]
 8009274:	4d5b      	ldr	r5, [pc, #364]	@ (80093e4 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8009276:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800927a:	4604      	mov	r4, r0
 800927c:	4798      	blx	r3
 800927e:	2800      	cmp	r0, #0
 8009280:	f000 8095 	beq.w	80093ae <_ZN8touchgfx3HAL4tickEv+0x13e>
 8009284:	2001      	movs	r0, #1
 8009286:	f7f7 fa5d 	bl	8000744 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800928a:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 800928e:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8009292:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8009296:	2600      	movs	r6, #0
 8009298:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 800929c:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 80092a0:	b133      	cbz	r3, 80092b0 <_ZN8touchgfx3HAL4tickEv+0x40>
 80092a2:	6823      	ldr	r3, [r4, #0]
 80092a4:	4620      	mov	r0, r4
 80092a6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80092aa:	4798      	blx	r3
 80092ac:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 80092b0:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 80092b4:	6862      	ldr	r2, [r4, #4]
 80092b6:	f083 0301 	eor.w	r3, r3, #1
 80092ba:	7253      	strb	r3, [r2, #9]
 80092bc:	2601      	movs	r6, #1
 80092be:	702e      	strb	r6, [r5, #0]
 80092c0:	f003 fcd0 	bl	800cc64 <_ZN8touchgfx11Application11getInstanceEv>
 80092c4:	6803      	ldr	r3, [r0, #0]
 80092c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092c8:	4798      	blx	r3
 80092ca:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 80092ce:	b90b      	cbnz	r3, 80092d4 <_ZN8touchgfx3HAL4tickEv+0x64>
 80092d0:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 80092d4:	f003 fcc6 	bl	800cc64 <_ZN8touchgfx11Application11getInstanceEv>
 80092d8:	6803      	ldr	r3, [r0, #0]
 80092da:	695b      	ldr	r3, [r3, #20]
 80092dc:	4798      	blx	r3
 80092de:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80092e0:	6803      	ldr	r3, [r0, #0]
 80092e2:	691b      	ldr	r3, [r3, #16]
 80092e4:	4798      	blx	r3
 80092e6:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 80092ea:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 80092ee:	3b01      	subs	r3, #1
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 80092f6:	b10a      	cbz	r2, 80092fc <_ZN8touchgfx3HAL4tickEv+0x8c>
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d1eb      	bne.n	80092d4 <_ZN8touchgfx3HAL4tickEv+0x64>
 80092fc:	4a3a      	ldr	r2, [pc, #232]	@ (80093e8 <_ZN8touchgfx3HAL4tickEv+0x178>)
 80092fe:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 8009302:	7813      	ldrb	r3, [r2, #0]
 8009304:	3301      	adds	r3, #1
 8009306:	b25b      	sxtb	r3, r3
 8009308:	4299      	cmp	r1, r3
 800930a:	7013      	strb	r3, [r2, #0]
 800930c:	dc10      	bgt.n	8009330 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800930e:	68e0      	ldr	r0, [r4, #12]
 8009310:	2300      	movs	r3, #0
 8009312:	7013      	strb	r3, [r2, #0]
 8009314:	6803      	ldr	r3, [r0, #0]
 8009316:	aa03      	add	r2, sp, #12
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	a902      	add	r1, sp, #8
 800931c:	4798      	blx	r3
 800931e:	6823      	ldr	r3, [r4, #0]
 8009320:	2800      	cmp	r0, #0
 8009322:	d050      	beq.n	80093c6 <_ZN8touchgfx3HAL4tickEv+0x156>
 8009324:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009328:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800932c:	4620      	mov	r0, r4
 800932e:	4798      	blx	r3
 8009330:	6960      	ldr	r0, [r4, #20]
 8009332:	2300      	movs	r3, #0
 8009334:	f88d 3007 	strb.w	r3, [sp, #7]
 8009338:	b158      	cbz	r0, 8009352 <_ZN8touchgfx3HAL4tickEv+0xe2>
 800933a:	6803      	ldr	r3, [r0, #0]
 800933c:	f10d 0107 	add.w	r1, sp, #7
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	4798      	blx	r3
 8009344:	b128      	cbz	r0, 8009352 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8009346:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8009348:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800934c:	6803      	ldr	r3, [r0, #0]
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	4798      	blx	r3
 8009352:	f104 001c 	add.w	r0, r4, #28
 8009356:	f009 ff1b 	bl	8013190 <_ZN8touchgfx8Gestures4tickEv>
 800935a:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 800935e:	b30b      	cbz	r3, 80093a4 <_ZN8touchgfx3HAL4tickEv+0x134>
 8009360:	6920      	ldr	r0, [r4, #16]
 8009362:	6803      	ldr	r3, [r0, #0]
 8009364:	691b      	ldr	r3, [r3, #16]
 8009366:	4798      	blx	r3
 8009368:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800936a:	4606      	mov	r6, r0
 800936c:	b903      	cbnz	r3, 8009370 <_ZN8touchgfx3HAL4tickEv+0x100>
 800936e:	6760      	str	r0, [r4, #116]	@ 0x74
 8009370:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8009372:	4a1e      	ldr	r2, [pc, #120]	@ (80093ec <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8009374:	1af3      	subs	r3, r6, r3
 8009376:	4293      	cmp	r3, r2
 8009378:	d914      	bls.n	80093a4 <_ZN8touchgfx3HAL4tickEv+0x134>
 800937a:	6920      	ldr	r0, [r4, #16]
 800937c:	6803      	ldr	r3, [r0, #0]
 800937e:	699b      	ldr	r3, [r3, #24]
 8009380:	4798      	blx	r3
 8009382:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8009384:	2264      	movs	r2, #100	@ 0x64
 8009386:	1af3      	subs	r3, r6, r3
 8009388:	fbb3 f3f2 	udiv	r3, r3, r2
 800938c:	fbb0 f0f3 	udiv	r0, r0, r3
 8009390:	2800      	cmp	r0, #0
 8009392:	dc1d      	bgt.n	80093d0 <_ZN8touchgfx3HAL4tickEv+0x160>
 8009394:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 8009398:	6920      	ldr	r0, [r4, #16]
 800939a:	6803      	ldr	r3, [r0, #0]
 800939c:	2100      	movs	r1, #0
 800939e:	69db      	ldr	r3, [r3, #28]
 80093a0:	4798      	blx	r3
 80093a2:	6766      	str	r6, [r4, #116]	@ 0x74
 80093a4:	f003 fc5e 	bl	800cc64 <_ZN8touchgfx11Application11getInstanceEv>
 80093a8:	6803      	ldr	r3, [r0, #0]
 80093aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093ac:	4798      	blx	r3
 80093ae:	6823      	ldr	r3, [r4, #0]
 80093b0:	4620      	mov	r0, r4
 80093b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80093b6:	4798      	blx	r3
 80093b8:	2001      	movs	r0, #1
 80093ba:	f7f7 f9ed 	bl	8000798 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80093be:	2300      	movs	r3, #0
 80093c0:	702b      	strb	r3, [r5, #0]
 80093c2:	b004      	add	sp, #16
 80093c4:	bd70      	pop	{r4, r5, r6, pc}
 80093c6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80093ca:	4620      	mov	r0, r4
 80093cc:	4798      	blx	r3
 80093ce:	e7af      	b.n	8009330 <_ZN8touchgfx3HAL4tickEv+0xc0>
 80093d0:	2863      	cmp	r0, #99	@ 0x63
 80093d2:	bfcb      	itete	gt
 80093d4:	2300      	movgt	r3, #0
 80093d6:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 80093da:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 80093de:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 80093e2:	e7d9      	b.n	8009398 <_ZN8touchgfx3HAL4tickEv+0x128>
 80093e4:	2001265c 	.word	0x2001265c
 80093e8:	2001265d 	.word	0x2001265d
 80093ec:	05f5e100 	.word	0x05f5e100

080093f0 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80093f0:	b510      	push	{r4, lr}
 80093f2:	4604      	mov	r4, r0
 80093f4:	f7f7 fb4e 	bl	8000a94 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 80093f8:	6863      	ldr	r3, [r4, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	729a      	strb	r2, [r3, #10]
 80093fe:	bd10      	pop	{r4, pc}

08009400 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8009400:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8009402:	301c      	adds	r0, #28
 8009404:	f009 bec2 	b.w	801318c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08009408 <_ZN8touchgfx3HAL5touchEll>:
 8009408:	b530      	push	{r4, r5, lr}
 800940a:	b087      	sub	sp, #28
 800940c:	4604      	mov	r4, r0
 800940e:	a804      	add	r0, sp, #16
 8009410:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8009414:	f003 fa0e 	bl	800c834 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8009418:	9b04      	ldr	r3, [sp, #16]
 800941a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800941e:	a906      	add	r1, sp, #24
 8009420:	9b05      	ldr	r3, [sp, #20]
 8009422:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8009426:	a803      	add	r0, sp, #12
 8009428:	f003 fa56 	bl	800c8d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800942c:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 8009430:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8009434:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8009438:	f104 001c 	add.w	r0, r4, #28
 800943c:	b189      	cbz	r1, 8009462 <_ZN8touchgfx3HAL5touchEll+0x5a>
 800943e:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 8009442:	9300      	str	r3, [sp, #0]
 8009444:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 8009448:	4613      	mov	r3, r2
 800944a:	462a      	mov	r2, r5
 800944c:	f009 feae 	bl	80131ac <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8009450:	b128      	cbz	r0, 800945e <_ZN8touchgfx3HAL5touchEll+0x56>
 8009452:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8009456:	6623      	str	r3, [r4, #96]	@ 0x60
 8009458:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800945c:	6663      	str	r3, [r4, #100]	@ 0x64
 800945e:	b007      	add	sp, #28
 8009460:	bd30      	pop	{r4, r5, pc}
 8009462:	f009 fee3 	bl	801322c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8009466:	2301      	movs	r3, #1
 8009468:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800946c:	e7f1      	b.n	8009452 <_ZN8touchgfx3HAL5touchEll+0x4a>

0800946e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800946e:	b510      	push	{r4, lr}
 8009470:	2b00      	cmp	r3, #0
 8009472:	d046      	beq.n	8009502 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8009474:	ea81 0002 	eor.w	r0, r1, r2
 8009478:	07c4      	lsls	r4, r0, #31
 800947a:	d508      	bpl.n	800948e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800947c:	440b      	add	r3, r1
 800947e:	3a01      	subs	r2, #1
 8009480:	428b      	cmp	r3, r1
 8009482:	d93e      	bls.n	8009502 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8009484:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8009488:	f801 0b01 	strb.w	r0, [r1], #1
 800948c:	e7f8      	b.n	8009480 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800948e:	07d0      	lsls	r0, r2, #31
 8009490:	bf42      	ittt	mi
 8009492:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8009496:	f801 0b01 	strbmi.w	r0, [r1], #1
 800949a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d911      	bls.n	80094c6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80094a2:	ea81 0402 	eor.w	r4, r1, r2
 80094a6:	07a4      	lsls	r4, r4, #30
 80094a8:	4610      	mov	r0, r2
 80094aa:	d022      	beq.n	80094f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 80094ac:	f023 0401 	bic.w	r4, r3, #1
 80094b0:	440c      	add	r4, r1
 80094b2:	428c      	cmp	r4, r1
 80094b4:	4602      	mov	r2, r0
 80094b6:	d904      	bls.n	80094c2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 80094b8:	8812      	ldrh	r2, [r2, #0]
 80094ba:	f821 2b02 	strh.w	r2, [r1], #2
 80094be:	3002      	adds	r0, #2
 80094c0:	e7f7      	b.n	80094b2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 80094c2:	f003 0301 	and.w	r3, r3, #1
 80094c6:	f023 0003 	bic.w	r0, r3, #3
 80094ca:	4408      	add	r0, r1
 80094cc:	4288      	cmp	r0, r1
 80094ce:	4614      	mov	r4, r2
 80094d0:	d904      	bls.n	80094dc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 80094d2:	6824      	ldr	r4, [r4, #0]
 80094d4:	f841 4b04 	str.w	r4, [r1], #4
 80094d8:	3204      	adds	r2, #4
 80094da:	e7f7      	b.n	80094cc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 80094dc:	f003 0303 	and.w	r3, r3, #3
 80094e0:	440b      	add	r3, r1
 80094e2:	3a01      	subs	r2, #1
 80094e4:	428b      	cmp	r3, r1
 80094e6:	d90c      	bls.n	8009502 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80094e8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80094ec:	f801 0b01 	strb.w	r0, [r1], #1
 80094f0:	e7f8      	b.n	80094e4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 80094f2:	0790      	lsls	r0, r2, #30
 80094f4:	d0e7      	beq.n	80094c6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80094f6:	f832 0b02 	ldrh.w	r0, [r2], #2
 80094fa:	f821 0b02 	strh.w	r0, [r1], #2
 80094fe:	3b02      	subs	r3, #2
 8009500:	e7e1      	b.n	80094c6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8009502:	2001      	movs	r0, #1
 8009504:	bd10      	pop	{r4, pc}

08009506 <_ZN8touchgfx3HAL7noTouchEv>:
 8009506:	b510      	push	{r4, lr}
 8009508:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 800950c:	4604      	mov	r4, r0
 800950e:	b153      	cbz	r3, 8009526 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8009510:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 8009514:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 8009518:	2101      	movs	r1, #1
 800951a:	301c      	adds	r0, #28
 800951c:	f009 fe86 	bl	801322c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8009520:	2300      	movs	r3, #0
 8009522:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8009526:	bd10      	pop	{r4, pc}

08009528 <_ZN8touchgfx3HAL3lcdEv>:
 8009528:	4b04      	ldr	r3, [pc, #16]	@ (800953c <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8009530:	b10a      	cbz	r2, 8009536 <_ZN8touchgfx3HAL3lcdEv+0xe>
 8009532:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8009534:	b900      	cbnz	r0, 8009538 <_ZN8touchgfx3HAL3lcdEv+0x10>
 8009536:	6898      	ldr	r0, [r3, #8]
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop
 800953c:	20012658 	.word	0x20012658

08009540 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8009540:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009544:	b085      	sub	sp, #20
 8009546:	ad04      	add	r5, sp, #16
 8009548:	4604      	mov	r4, r0
 800954a:	2000      	movs	r0, #0
 800954c:	f845 0d04 	str.w	r0, [r5, #-4]!
 8009550:	69a0      	ldr	r0, [r4, #24]
 8009552:	6806      	ldr	r6, [r0, #0]
 8009554:	9501      	str	r5, [sp, #4]
 8009556:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 800955a:	9500      	str	r5, [sp, #0]
 800955c:	6835      	ldr	r5, [r6, #0]
 800955e:	4699      	mov	r9, r3
 8009560:	460f      	mov	r7, r1
 8009562:	4690      	mov	r8, r2
 8009564:	47a8      	blx	r5
 8009566:	4d10      	ldr	r5, [pc, #64]	@ (80095a8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8009568:	4606      	mov	r6, r0
 800956a:	f8a5 9000 	strh.w	r9, [r5]
 800956e:	f7ff ffdb 	bl	8009528 <_ZN8touchgfx3HAL3lcdEv>
 8009572:	6803      	ldr	r3, [r0, #0]
 8009574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009576:	4798      	blx	r3
 8009578:	b128      	cbz	r0, 8009586 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800957a:	2801      	cmp	r0, #1
 800957c:	d00b      	beq.n	8009596 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800957e:	4630      	mov	r0, r6
 8009580:	b005      	add	sp, #20
 8009582:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009586:	882b      	ldrh	r3, [r5, #0]
 8009588:	fb08 7203 	mla	r2, r8, r3, r7
 800958c:	9b03      	ldr	r3, [sp, #12]
 800958e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8009592:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8009594:	e7f3      	b.n	800957e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8009596:	882a      	ldrh	r2, [r5, #0]
 8009598:	9b03      	ldr	r3, [sp, #12]
 800959a:	fb08 7202 	mla	r2, r8, r2, r7
 800959e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80095a2:	1a9a      	subs	r2, r3, r2
 80095a4:	63e2      	str	r2, [r4, #60]	@ 0x3c
 80095a6:	e7ea      	b.n	800957e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80095a8:	20012652 	.word	0x20012652

080095ac <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 80095ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095ae:	b08b      	sub	sp, #44	@ 0x2c
 80095b0:	4617      	mov	r7, r2
 80095b2:	4604      	mov	r4, r0
 80095b4:	460e      	mov	r6, r1
 80095b6:	461d      	mov	r5, r3
 80095b8:	f7ff ffb6 	bl	8009528 <_ZN8touchgfx3HAL3lcdEv>
 80095bc:	6803      	ldr	r3, [r0, #0]
 80095be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095c0:	4798      	blx	r3
 80095c2:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 80095c6:	9007      	str	r0, [sp, #28]
 80095c8:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80095cc:	4b0d      	ldr	r3, [pc, #52]	@ (8009604 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 80095ce:	6822      	ldr	r2, [r4, #0]
 80095d0:	881b      	ldrh	r3, [r3, #0]
 80095d2:	9306      	str	r3, [sp, #24]
 80095d4:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80095d8:	9305      	str	r3, [sp, #20]
 80095da:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 80095de:	9304      	str	r3, [sp, #16]
 80095e0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80095e4:	9303      	str	r3, [sp, #12]
 80095e6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80095ea:	9302      	str	r3, [sp, #8]
 80095ec:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80095f0:	e9cd 5300 	strd	r5, r3, [sp]
 80095f4:	4631      	mov	r1, r6
 80095f6:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 80095f8:	463b      	mov	r3, r7
 80095fa:	2200      	movs	r2, #0
 80095fc:	4620      	mov	r0, r4
 80095fe:	47a8      	blx	r5
 8009600:	b00b      	add	sp, #44	@ 0x2c
 8009602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009604:	20012652 	.word	0x20012652

08009608 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8009608:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800960c:	4698      	mov	r8, r3
 800960e:	6803      	ldr	r3, [r0, #0]
 8009610:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 8009612:	4b15      	ldr	r3, [pc, #84]	@ (8009668 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8009614:	b08b      	sub	sp, #44	@ 0x2c
 8009616:	4617      	mov	r7, r2
 8009618:	f8b3 9000 	ldrh.w	r9, [r3]
 800961c:	460e      	mov	r6, r1
 800961e:	4604      	mov	r4, r0
 8009620:	f7ff ff82 	bl	8009528 <_ZN8touchgfx3HAL3lcdEv>
 8009624:	6803      	ldr	r3, [r0, #0]
 8009626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009628:	4798      	blx	r3
 800962a:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800962e:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8009632:	2302      	movs	r3, #2
 8009634:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8009638:	2301      	movs	r3, #1
 800963a:	9305      	str	r3, [sp, #20]
 800963c:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8009640:	9304      	str	r3, [sp, #16]
 8009642:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8009646:	9303      	str	r3, [sp, #12]
 8009648:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800964c:	9302      	str	r3, [sp, #8]
 800964e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8009652:	2200      	movs	r2, #0
 8009654:	e9cd 8300 	strd	r8, r3, [sp]
 8009658:	4631      	mov	r1, r6
 800965a:	463b      	mov	r3, r7
 800965c:	4620      	mov	r0, r4
 800965e:	47a8      	blx	r5
 8009660:	b00b      	add	sp, #44	@ 0x2c
 8009662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009666:	bf00      	nop
 8009668:	20012652 	.word	0x20012652

0800966c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800966c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009670:	4698      	mov	r8, r3
 8009672:	6803      	ldr	r3, [r0, #0]
 8009674:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 8009676:	4b11      	ldr	r3, [pc, #68]	@ (80096bc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8009678:	b087      	sub	sp, #28
 800967a:	f8b3 9000 	ldrh.w	r9, [r3]
 800967e:	460e      	mov	r6, r1
 8009680:	4617      	mov	r7, r2
 8009682:	4604      	mov	r4, r0
 8009684:	f7ff ff50 	bl	8009528 <_ZN8touchgfx3HAL3lcdEv>
 8009688:	6803      	ldr	r3, [r0, #0]
 800968a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800968c:	4798      	blx	r3
 800968e:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 8009692:	f8cd 900c 	str.w	r9, [sp, #12]
 8009696:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800969a:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 800969e:	9302      	str	r3, [sp, #8]
 80096a0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 80096a4:	9301      	str	r3, [sp, #4]
 80096a6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80096aa:	9300      	str	r3, [sp, #0]
 80096ac:	463a      	mov	r2, r7
 80096ae:	4643      	mov	r3, r8
 80096b0:	4631      	mov	r1, r6
 80096b2:	4620      	mov	r0, r4
 80096b4:	47a8      	blx	r5
 80096b6:	b007      	add	sp, #28
 80096b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096bc:	20012652 	.word	0x20012652

080096c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80096c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c4:	4604      	mov	r4, r0
 80096c6:	b08f      	sub	sp, #60	@ 0x3c
 80096c8:	4610      	mov	r0, r2
 80096ca:	460d      	mov	r5, r1
 80096cc:	4691      	mov	r9, r2
 80096ce:	461e      	mov	r6, r3
 80096d0:	f006 ff20 	bl	8010514 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80096d4:	2800      	cmp	r0, #0
 80096d6:	f000 809d 	beq.w	8009814 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 80096da:	6823      	ldr	r3, [r4, #0]
 80096dc:	f8df b198 	ldr.w	fp, [pc, #408]	@ 8009878 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 80096e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096e2:	f8df a198 	ldr.w	sl, [pc, #408]	@ 800987c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 80096e6:	4f61      	ldr	r7, [pc, #388]	@ (800986c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80096e8:	4620      	mov	r0, r4
 80096ea:	4798      	blx	r3
 80096ec:	6823      	ldr	r3, [r4, #0]
 80096ee:	4620      	mov	r0, r4
 80096f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096f2:	4798      	blx	r3
 80096f4:	f8bb 3000 	ldrh.w	r3, [fp]
 80096f8:	9301      	str	r3, [sp, #4]
 80096fa:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 80096fe:	f8ba 3000 	ldrh.w	r3, [sl]
 8009702:	9302      	str	r3, [sp, #8]
 8009704:	883b      	ldrh	r3, [r7, #0]
 8009706:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800970a:	9303      	str	r3, [sp, #12]
 800970c:	4b58      	ldr	r3, [pc, #352]	@ (8009870 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800970e:	9305      	str	r3, [sp, #20]
 8009710:	881a      	ldrh	r2, [r3, #0]
 8009712:	9204      	str	r2, [sp, #16]
 8009714:	4640      	mov	r0, r8
 8009716:	f006 ff91 	bl	801063c <_ZNK8touchgfx6Bitmap8getWidthEv>
 800971a:	8038      	strh	r0, [r7, #0]
 800971c:	4640      	mov	r0, r8
 800971e:	f006 ffc1 	bl	80106a4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8009722:	9b05      	ldr	r3, [sp, #20]
 8009724:	b280      	uxth	r0, r0
 8009726:	8018      	strh	r0, [r3, #0]
 8009728:	4b52      	ldr	r3, [pc, #328]	@ (8009874 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d174      	bne.n	800981a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8009730:	883b      	ldrh	r3, [r7, #0]
 8009732:	f8ab 3000 	strh.w	r3, [fp]
 8009736:	f8aa 0000 	strh.w	r0, [sl]
 800973a:	4648      	mov	r0, r9
 800973c:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 8009740:	f006 fee8 	bl	8010514 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8009744:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8009748:	2200      	movs	r2, #0
 800974a:	4611      	mov	r1, r2
 800974c:	4628      	mov	r0, r5
 800974e:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8009752:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8009756:	f7f9 f993 	bl	8002a80 <_ZN8touchgfx8Drawable5setXYEss>
 800975a:	2301      	movs	r3, #1
 800975c:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 8009760:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8009764:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8009768:	2b00      	cmp	r3, #0
 800976a:	dd5c      	ble.n	8009826 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800976c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8009770:	2b00      	cmp	r3, #0
 8009772:	dd58      	ble.n	8009826 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8009774:	462a      	mov	r2, r5
 8009776:	ab0a      	add	r3, sp, #40	@ 0x28
 8009778:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800977c:	6851      	ldr	r1, [r2, #4]
 800977e:	c303      	stmia	r3!, {r0, r1}
 8009780:	4631      	mov	r1, r6
 8009782:	a80a      	add	r0, sp, #40	@ 0x28
 8009784:	f7ff fbfa 	bl	8008f7c <_ZN8touchgfx4RectaNERKS0_>
 8009788:	4b38      	ldr	r3, [pc, #224]	@ (800986c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800978a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800978e:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8009792:	2100      	movs	r1, #0
 8009794:	aa0a      	add	r2, sp, #40	@ 0x28
 8009796:	4b36      	ldr	r3, [pc, #216]	@ (8009870 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8009798:	910c      	str	r1, [sp, #48]	@ 0x30
 800979a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800979e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80097a2:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 80097a6:	ab08      	add	r3, sp, #32
 80097a8:	e883 0003 	stmia.w	r3, {r0, r1}
 80097ac:	4618      	mov	r0, r3
 80097ae:	a90c      	add	r1, sp, #48	@ 0x30
 80097b0:	f7ff fbe4 	bl	8008f7c <_ZN8touchgfx4RectaNERKS0_>
 80097b4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d13c      	bne.n	8009834 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 80097ba:	2000      	movs	r0, #0
 80097bc:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 80097c0:	2600      	movs	r6, #0
 80097c2:	682a      	ldr	r2, [r5, #0]
 80097c4:	696b      	ldr	r3, [r5, #20]
 80097c6:	616e      	str	r6, [r5, #20]
 80097c8:	9305      	str	r3, [sp, #20]
 80097ca:	6892      	ldr	r2, [r2, #8]
 80097cc:	a908      	add	r1, sp, #32
 80097ce:	4628      	mov	r0, r5
 80097d0:	4790      	blx	r2
 80097d2:	9b05      	ldr	r3, [sp, #20]
 80097d4:	616b      	str	r3, [r5, #20]
 80097d6:	4652      	mov	r2, sl
 80097d8:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 80097dc:	4649      	mov	r1, r9
 80097de:	4628      	mov	r0, r5
 80097e0:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 80097e4:	f7f9 f94c 	bl	8002a80 <_ZN8touchgfx8Drawable5setXYEss>
 80097e8:	4b23      	ldr	r3, [pc, #140]	@ (8009878 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 80097ea:	9a01      	ldr	r2, [sp, #4]
 80097ec:	801a      	strh	r2, [r3, #0]
 80097ee:	4b23      	ldr	r3, [pc, #140]	@ (800987c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 80097f0:	9a02      	ldr	r2, [sp, #8]
 80097f2:	801a      	strh	r2, [r3, #0]
 80097f4:	4b1d      	ldr	r3, [pc, #116]	@ (800986c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80097f6:	9a03      	ldr	r2, [sp, #12]
 80097f8:	801a      	strh	r2, [r3, #0]
 80097fa:	4b1d      	ldr	r3, [pc, #116]	@ (8009870 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80097fc:	9a04      	ldr	r2, [sp, #16]
 80097fe:	801a      	strh	r2, [r3, #0]
 8009800:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 8009804:	6823      	ldr	r3, [r4, #0]
 8009806:	4620      	mov	r0, r4
 8009808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800980a:	4798      	blx	r3
 800980c:	6823      	ldr	r3, [r4, #0]
 800980e:	4620      	mov	r0, r4
 8009810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009812:	4798      	blx	r3
 8009814:	b00f      	add	sp, #60	@ 0x3c
 8009816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800981a:	883b      	ldrh	r3, [r7, #0]
 800981c:	f8ab 0000 	strh.w	r0, [fp]
 8009820:	f8aa 3000 	strh.w	r3, [sl]
 8009824:	e789      	b.n	800973a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8009826:	462a      	mov	r2, r5
 8009828:	ab0a      	add	r3, sp, #40	@ 0x28
 800982a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800982e:	6851      	ldr	r1, [r2, #4]
 8009830:	c303      	stmia	r3!, {r0, r1}
 8009832:	e7a9      	b.n	8009788 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8009834:	a807      	add	r0, sp, #28
 8009836:	f007 f877 	bl	8010928 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800983a:	4606      	mov	r6, r0
 800983c:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800983e:	6803      	ldr	r3, [r0, #0]
 8009840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009842:	4798      	blx	r3
 8009844:	4286      	cmp	r6, r0
 8009846:	d1b8      	bne.n	80097ba <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8009848:	f7ff fe6e 	bl	8009528 <_ZN8touchgfx3HAL3lcdEv>
 800984c:	6803      	ldr	r3, [r0, #0]
 800984e:	4606      	mov	r6, r0
 8009850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009852:	9305      	str	r3, [sp, #20]
 8009854:	a807      	add	r0, sp, #28
 8009856:	f007 f867 	bl	8010928 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800985a:	9b05      	ldr	r3, [sp, #20]
 800985c:	4601      	mov	r1, r0
 800985e:	4630      	mov	r0, r6
 8009860:	4798      	blx	r3
 8009862:	f080 0001 	eor.w	r0, r0, #1
 8009866:	b2c0      	uxtb	r0, r0
 8009868:	e7a8      	b.n	80097bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800986a:	bf00      	nop
 800986c:	2001264c 	.word	0x2001264c
 8009870:	2001264e 	.word	0x2001264e
 8009874:	20012650 	.word	0x20012650
 8009878:	20012652 	.word	0x20012652
 800987c:	20012654 	.word	0x20012654

08009880 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8009880:	b510      	push	{r4, lr}
 8009882:	4b07      	ldr	r3, [pc, #28]	@ (80098a0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8009884:	781b      	ldrb	r3, [r3, #0]
 8009886:	4604      	mov	r4, r0
 8009888:	b13b      	cbz	r3, 800989a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800988a:	6803      	ldr	r3, [r0, #0]
 800988c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800988e:	4798      	blx	r3
 8009890:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009892:	4283      	cmp	r3, r0
 8009894:	d101      	bne.n	800989a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8009896:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8009898:	bd10      	pop	{r4, pc}
 800989a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800989c:	e7fc      	b.n	8009898 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800989e:	bf00      	nop
 80098a0:	20012656 	.word	0x20012656

080098a4 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 80098a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098a8:	b08a      	sub	sp, #40	@ 0x28
 80098aa:	461d      	mov	r5, r3
 80098ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80098b0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80098b4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80098b8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80098bc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80098c0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80098c4:	2400      	movs	r4, #0
 80098c6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80098ca:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 80098ce:	f8ad 301c 	strh.w	r3, [sp, #28]
 80098d2:	4690      	mov	r8, r2
 80098d4:	4607      	mov	r7, r0
 80098d6:	9404      	str	r4, [sp, #16]
 80098d8:	f88d 4020 	strb.w	r4, [sp, #32]
 80098dc:	f7ff ffd0 	bl	8009880 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80098e0:	fb06 8505 	mla	r5, r6, r5, r8
 80098e4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	9505      	str	r5, [sp, #20]
 80098ec:	f8ad 601e 	strh.w	r6, [sp, #30]
 80098f0:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 80098f4:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 80098f8:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 80098fc:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8009900:	6803      	ldr	r3, [r0, #0]
 8009902:	a901      	add	r1, sp, #4
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	4798      	blx	r3
 8009908:	b00a      	add	sp, #40	@ 0x28
 800990a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800990e <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800990e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009912:	b08b      	sub	sp, #44	@ 0x2c
 8009914:	2400      	movs	r4, #0
 8009916:	461d      	mov	r5, r3
 8009918:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800991c:	4688      	mov	r8, r1
 800991e:	4691      	mov	r9, r2
 8009920:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 8009924:	9404      	str	r4, [sp, #16]
 8009926:	4607      	mov	r7, r0
 8009928:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800992c:	f7ff ffa8 	bl	8009880 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009930:	fb06 9505 	mla	r5, r6, r5, r9
 8009934:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8009938:	f8ad 3018 	strh.w	r3, [sp, #24]
 800993c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8009940:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	9505      	str	r5, [sp, #20]
 8009948:	f8ad 301a 	strh.w	r3, [sp, #26]
 800994c:	f8ad 401c 	strh.w	r4, [sp, #28]
 8009950:	f8ad 601e 	strh.w	r6, [sp, #30]
 8009954:	f8cd 8010 	str.w	r8, [sp, #16]
 8009958:	f8ad 4020 	strh.w	r4, [sp, #32]
 800995c:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8009960:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8009964:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8009968:	6803      	ldr	r3, [r0, #0]
 800996a:	a901      	add	r1, sp, #4
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	4798      	blx	r3
 8009970:	b00b      	add	sp, #44	@ 0x2c
 8009972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08009978 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8009978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800997c:	b08a      	sub	sp, #40	@ 0x28
 800997e:	4698      	mov	r8, r3
 8009980:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8009984:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 8009988:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 800998c:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 8009990:	2300      	movs	r3, #0
 8009992:	2d0b      	cmp	r5, #11
 8009994:	4606      	mov	r6, r0
 8009996:	9304      	str	r3, [sp, #16]
 8009998:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 800999c:	d138      	bne.n	8009a10 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x98>
 800999e:	2380      	movs	r3, #128	@ 0x80
 80099a0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80099a4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80099a8:	f8ad 3018 	strh.w	r3, [sp, #24]
 80099ac:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80099b0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80099b4:	f88d 0020 	strb.w	r0, [sp, #32]
 80099b8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80099bc:	f8ad 301c 	strh.w	r3, [sp, #28]
 80099c0:	4630      	mov	r0, r6
 80099c2:	9203      	str	r2, [sp, #12]
 80099c4:	f7ff ff5c 	bl	8009880 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80099c8:	2c0b      	cmp	r4, #11
 80099ca:	bf98      	it	ls
 80099cc:	4b1b      	ldrls	r3, [pc, #108]	@ (8009a3c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 80099ce:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 80099d2:	bf98      	it	ls
 80099d4:	5d19      	ldrbls	r1, [r3, r4]
 80099d6:	f8ad 701e 	strh.w	r7, [sp, #30]
 80099da:	bf88      	it	hi
 80099dc:	2100      	movhi	r1, #0
 80099de:	fb02 8307 	mla	r3, r2, r7, r8
 80099e2:	10c9      	asrs	r1, r1, #3
 80099e4:	fb01 0003 	mla	r0, r1, r3, r0
 80099e8:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 80099ec:	9005      	str	r0, [sp, #20]
 80099ee:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 80099f2:	6870      	ldr	r0, [r6, #4]
 80099f4:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 80099f8:	2300      	movs	r3, #0
 80099fa:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 80099fe:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8009a02:	6803      	ldr	r3, [r0, #0]
 8009a04:	a901      	add	r1, sp, #4
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	4798      	blx	r3
 8009a0a:	b00a      	add	sp, #40	@ 0x28
 8009a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a10:	2d02      	cmp	r5, #2
 8009a12:	d109      	bne.n	8009a28 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb0>
 8009a14:	28ff      	cmp	r0, #255	@ 0xff
 8009a16:	d105      	bne.n	8009a24 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xac>
 8009a18:	f1bc 0f00 	cmp.w	ip, #0
 8009a1c:	bf14      	ite	ne
 8009a1e:	2340      	movne	r3, #64	@ 0x40
 8009a20:	2320      	moveq	r3, #32
 8009a22:	e7bd      	b.n	80099a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8009a24:	2340      	movs	r3, #64	@ 0x40
 8009a26:	e7bb      	b.n	80099a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8009a28:	28ff      	cmp	r0, #255	@ 0xff
 8009a2a:	d105      	bne.n	8009a38 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc0>
 8009a2c:	f1bc 0f00 	cmp.w	ip, #0
 8009a30:	bf14      	ite	ne
 8009a32:	2304      	movne	r3, #4
 8009a34:	2301      	moveq	r3, #1
 8009a36:	e7b3      	b.n	80099a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8009a38:	2304      	movs	r3, #4
 8009a3a:	e7b1      	b.n	80099a0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8009a3c:	080159a0 	.word	0x080159a0

08009a40 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8009a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a44:	b08b      	sub	sp, #44	@ 0x2c
 8009a46:	461d      	mov	r5, r3
 8009a48:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 8009a4c:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 8009a50:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 8009a54:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8009a58:	bf14      	ite	ne
 8009a5a:	2308      	movne	r3, #8
 8009a5c:	2302      	moveq	r3, #2
 8009a5e:	2400      	movs	r4, #0
 8009a60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a64:	4688      	mov	r8, r1
 8009a66:	4693      	mov	fp, r2
 8009a68:	9404      	str	r4, [sp, #16]
 8009a6a:	4607      	mov	r7, r0
 8009a6c:	f7ff ff08 	bl	8009880 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009a70:	2e0b      	cmp	r6, #11
 8009a72:	bf98      	it	ls
 8009a74:	4b15      	ldrls	r3, [pc, #84]	@ (8009acc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8009a76:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8009a7a:	bf98      	it	ls
 8009a7c:	5d9c      	ldrbls	r4, [r3, r6]
 8009a7e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8009a82:	f8ad 3018 	strh.w	r3, [sp, #24]
 8009a86:	fb05 b50a 	mla	r5, r5, sl, fp
 8009a8a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8009a8e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8009a92:	10e4      	asrs	r4, r4, #3
 8009a94:	fb04 0405 	mla	r4, r4, r5, r0
 8009a98:	2300      	movs	r3, #0
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	9405      	str	r4, [sp, #20]
 8009a9e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009aa2:	f8ad a01e 	strh.w	sl, [sp, #30]
 8009aa6:	f8cd 8010 	str.w	r8, [sp, #16]
 8009aaa:	f88d 9020 	strb.w	r9, [sp, #32]
 8009aae:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 8009ab2:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8009ab6:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 8009aba:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 8009abe:	6803      	ldr	r3, [r0, #0]
 8009ac0:	a901      	add	r1, sp, #4
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	4798      	blx	r3
 8009ac6:	b00b      	add	sp, #44	@ 0x2c
 8009ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009acc:	080159a0 	.word	0x080159a0

08009ad0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8009ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ad4:	461e      	mov	r6, r3
 8009ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8009b00 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8009ad8:	460f      	mov	r7, r1
 8009ada:	881d      	ldrh	r5, [r3, #0]
 8009adc:	4690      	mov	r8, r2
 8009ade:	f7ff fd23 	bl	8009528 <_ZN8touchgfx3HAL3lcdEv>
 8009ae2:	6803      	ldr	r3, [r0, #0]
 8009ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ae6:	4798      	blx	r3
 8009ae8:	280b      	cmp	r0, #11
 8009aea:	bf9a      	itte	ls
 8009aec:	4b05      	ldrls	r3, [pc, #20]	@ (8009b04 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8009aee:	5c1c      	ldrbls	r4, [r3, r0]
 8009af0:	2400      	movhi	r4, #0
 8009af2:	fb08 7005 	mla	r0, r8, r5, r7
 8009af6:	10e4      	asrs	r4, r4, #3
 8009af8:	fb04 6000 	mla	r0, r4, r0, r6
 8009afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b00:	20012652 	.word	0x20012652
 8009b04:	080159a0 	.word	0x080159a0

08009b08 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8009b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b0a:	b08b      	sub	sp, #44	@ 0x2c
 8009b0c:	461f      	mov	r7, r3
 8009b0e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8009b12:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8009b16:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8009b1a:	f8ad 3018 	strh.w	r3, [sp, #24]
 8009b1e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8009b22:	f8ad 301a 	strh.w	r3, [sp, #26]
 8009b26:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8009b2a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009b2e:	2500      	movs	r5, #0
 8009b30:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8009b34:	f88d 3020 	strb.w	r3, [sp, #32]
 8009b38:	4604      	mov	r4, r0
 8009b3a:	4616      	mov	r6, r2
 8009b3c:	9504      	str	r5, [sp, #16]
 8009b3e:	f7ff fe9f 	bl	8009880 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009b42:	463a      	mov	r2, r7
 8009b44:	4631      	mov	r1, r6
 8009b46:	4603      	mov	r3, r0
 8009b48:	4620      	mov	r0, r4
 8009b4a:	f7ff ffc1 	bl	8009ad0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8009b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8009b88 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8009b50:	9005      	str	r0, [sp, #20]
 8009b52:	881b      	ldrh	r3, [r3, #0]
 8009b54:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009b58:	f7ff fce6 	bl	8009528 <_ZN8touchgfx3HAL3lcdEv>
 8009b5c:	6803      	ldr	r3, [r0, #0]
 8009b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b60:	4798      	blx	r3
 8009b62:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009b64:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 8009b68:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8009b6c:	9304      	str	r3, [sp, #16]
 8009b6e:	6860      	ldr	r0, [r4, #4]
 8009b70:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8009b74:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8009b78:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 8009b7c:	6803      	ldr	r3, [r0, #0]
 8009b7e:	a901      	add	r1, sp, #4
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	4798      	blx	r3
 8009b84:	b00b      	add	sp, #44	@ 0x2c
 8009b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b88:	20012652 	.word	0x20012652

08009b8c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8009b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b8e:	b08d      	sub	sp, #52	@ 0x34
 8009b90:	466b      	mov	r3, sp
 8009b92:	e883 0006 	stmia.w	r3, {r1, r2}
 8009b96:	2300      	movs	r3, #0
 8009b98:	9306      	str	r3, [sp, #24]
 8009b9a:	6803      	ldr	r3, [r0, #0]
 8009b9c:	f8bd 6000 	ldrh.w	r6, [sp]
 8009ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ba2:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8009ba6:	2501      	movs	r5, #1
 8009ba8:	9503      	str	r5, [sp, #12]
 8009baa:	4604      	mov	r4, r0
 8009bac:	4798      	blx	r3
 8009bae:	463a      	mov	r2, r7
 8009bb0:	4631      	mov	r1, r6
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	4620      	mov	r0, r4
 8009bb6:	f7ff ff8b 	bl	8009ad0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8009bba:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009bbc:	9307      	str	r3, [sp, #28]
 8009bbe:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8009bc2:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009bc6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009bca:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8009bce:	4b0f      	ldr	r3, [pc, #60]	@ (8009c0c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8009bd0:	9004      	str	r0, [sp, #16]
 8009bd2:	881b      	ldrh	r3, [r3, #0]
 8009bd4:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8009bd8:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8009bdc:	f7ff fca4 	bl	8009528 <_ZN8touchgfx3HAL3lcdEv>
 8009be0:	6803      	ldr	r3, [r0, #0]
 8009be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009be4:	4798      	blx	r3
 8009be6:	23ff      	movs	r3, #255	@ 0xff
 8009be8:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8009bec:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8009bf0:	6860      	ldr	r0, [r4, #4]
 8009bf2:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8009bf6:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8009bfa:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8009bfe:	6803      	ldr	r3, [r0, #0]
 8009c00:	a903      	add	r1, sp, #12
 8009c02:	685b      	ldr	r3, [r3, #4]
 8009c04:	4798      	blx	r3
 8009c06:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8009c08:	b00d      	add	sp, #52	@ 0x34
 8009c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c0c:	20012652 	.word	0x20012652

08009c10 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8009c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c14:	b08c      	sub	sp, #48	@ 0x30
 8009c16:	461e      	mov	r6, r3
 8009c18:	466d      	mov	r5, sp
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	e885 0006 	stmia.w	r5, {r1, r2}
 8009c20:	9306      	str	r3, [sp, #24]
 8009c22:	6803      	ldr	r3, [r0, #0]
 8009c24:	f8bd 7000 	ldrh.w	r7, [sp]
 8009c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c2a:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8009c2e:	2501      	movs	r5, #1
 8009c30:	9503      	str	r5, [sp, #12]
 8009c32:	4604      	mov	r4, r0
 8009c34:	4798      	blx	r3
 8009c36:	4642      	mov	r2, r8
 8009c38:	4639      	mov	r1, r7
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	4620      	mov	r0, r4
 8009c3e:	f7ff ff47 	bl	8009ad0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8009c42:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8009c46:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009c4a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009c4e:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8009c52:	4b11      	ldr	r3, [pc, #68]	@ (8009c98 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8009c54:	9004      	str	r0, [sp, #16]
 8009c56:	881b      	ldrh	r3, [r3, #0]
 8009c58:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8009c5c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009c5e:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8009c62:	9607      	str	r6, [sp, #28]
 8009c64:	f7ff fc60 	bl	8009528 <_ZN8touchgfx3HAL3lcdEv>
 8009c68:	6803      	ldr	r3, [r0, #0]
 8009c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c6c:	4798      	blx	r3
 8009c6e:	23ff      	movs	r3, #255	@ 0xff
 8009c70:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8009c74:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8009c78:	6860      	ldr	r0, [r4, #4]
 8009c7a:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8009c7e:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8009c82:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8009c86:	6803      	ldr	r3, [r0, #0]
 8009c88:	a903      	add	r1, sp, #12
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	4798      	blx	r3
 8009c8e:	4630      	mov	r0, r6
 8009c90:	b00c      	add	sp, #48	@ 0x30
 8009c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c96:	bf00      	nop
 8009c98:	20012652 	.word	0x20012652

08009c9c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8009c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c9e:	b085      	sub	sp, #20
 8009ca0:	ac02      	add	r4, sp, #8
 8009ca2:	e884 0006 	stmia.w	r4, {r1, r2}
 8009ca6:	4605      	mov	r5, r0
 8009ca8:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8009cac:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8009cb0:	f7ff fde6 	bl	8009880 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009cb4:	463a      	mov	r2, r7
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	4631      	mov	r1, r6
 8009cba:	4628      	mov	r0, r5
 8009cbc:	f7ff ff08 	bl	8009ad0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8009cc0:	4a05      	ldr	r2, [pc, #20]	@ (8009cd8 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8009cc2:	682b      	ldr	r3, [r5, #0]
 8009cc4:	8812      	ldrh	r2, [r2, #0]
 8009cc6:	9200      	str	r2, [sp, #0]
 8009cc8:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8009cca:	e894 0006 	ldmia.w	r4, {r1, r2}
 8009cce:	4603      	mov	r3, r0
 8009cd0:	4628      	mov	r0, r5
 8009cd2:	47b0      	blx	r6
 8009cd4:	b005      	add	sp, #20
 8009cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cd8:	20012652 	.word	0x20012652

08009cdc <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8009cdc:	b570      	push	{r4, r5, r6, lr}
 8009cde:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 8009ce2:	4604      	mov	r4, r0
 8009ce4:	b19b      	cbz	r3, 8009d0e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8009ce6:	2002      	movs	r0, #2
 8009ce8:	f7f6 fd80 	bl	80007ec <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8009cec:	2300      	movs	r3, #0
 8009cee:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8009cf2:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8009cf6:	6823      	ldr	r3, [r4, #0]
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 8009cfe:	f7ff fdbf 	bl	8009880 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009d02:	462b      	mov	r3, r5
 8009d04:	4601      	mov	r1, r0
 8009d06:	4620      	mov	r0, r4
 8009d08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009d0c:	4718      	bx	r3
 8009d0e:	bd70      	pop	{r4, r5, r6, pc}

08009d10 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8009d10:	b538      	push	{r3, r4, r5, lr}
 8009d12:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8009d16:	428b      	cmp	r3, r1
 8009d18:	4604      	mov	r4, r0
 8009d1a:	460d      	mov	r5, r1
 8009d1c:	d006      	beq.n	8009d2c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8009d1e:	6803      	ldr	r3, [r0, #0]
 8009d20:	b929      	cbnz	r1, 8009d2e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8009d22:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8009d26:	4798      	blx	r3
 8009d28:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 8009d2c:	bd38      	pop	{r3, r4, r5, pc}
 8009d2e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8009d32:	e7f8      	b.n	8009d26 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08009d34 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8009d34:	b510      	push	{r4, lr}
 8009d36:	4b0d      	ldr	r3, [pc, #52]	@ (8009d6c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	4604      	mov	r4, r0
 8009d3c:	b95b      	cbnz	r3, 8009d56 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8009d3e:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8009d42:	2b02      	cmp	r3, #2
 8009d44:	d007      	beq.n	8009d56 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8009d46:	6840      	ldr	r0, [r0, #4]
 8009d48:	f000 f912 	bl	8009f70 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8009d4c:	b118      	cbz	r0, 8009d56 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8009d4e:	6862      	ldr	r2, [r4, #4]
 8009d50:	7a53      	ldrb	r3, [r2, #9]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d0fc      	beq.n	8009d50 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8009d56:	f7f6 fe95 	bl	8000a84 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8009d5a:	4620      	mov	r0, r4
 8009d5c:	2100      	movs	r1, #0
 8009d5e:	f7ff ffd7 	bl	8009d10 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8009d62:	4620      	mov	r0, r4
 8009d64:	f7ff fd8c 	bl	8009880 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009d68:	bd10      	pop	{r4, pc}
 8009d6a:	bf00      	nop
 8009d6c:	20012656 	.word	0x20012656

08009d70 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8009d70:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8009d74:	1a13      	subs	r3, r2, r0
 8009d76:	4258      	negs	r0, r3
 8009d78:	4158      	adcs	r0, r3
 8009d7a:	4770      	bx	lr

08009d7c <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8009d7c:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8009d80:	1a9b      	subs	r3, r3, r2
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	bfdc      	itt	le
 8009d86:	6882      	ldrle	r2, [r0, #8]
 8009d88:	189b      	addle	r3, r3, r2
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	bfcc      	ite	gt
 8009d8e:	2000      	movgt	r0, #0
 8009d90:	2001      	movle	r0, #1
 8009d92:	4770      	bx	lr

08009d94 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8009d94:	6902      	ldr	r2, [r0, #16]
 8009d96:	6843      	ldr	r3, [r0, #4]
 8009d98:	2024      	movs	r0, #36	@ 0x24
 8009d9a:	fb00 3002 	mla	r0, r0, r2, r3
 8009d9e:	4770      	bx	lr

08009da0 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8009da0:	6803      	ldr	r3, [r0, #0]
 8009da2:	691b      	ldr	r3, [r3, #16]
 8009da4:	4718      	bx	r3

08009da6 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8009da6:	b570      	push	{r4, r5, r6, lr}
 8009da8:	2301      	movs	r3, #1
 8009daa:	7203      	strb	r3, [r0, #8]
 8009dac:	4604      	mov	r4, r0
 8009dae:	6840      	ldr	r0, [r0, #4]
 8009db0:	6803      	ldr	r3, [r0, #0]
 8009db2:	699b      	ldr	r3, [r3, #24]
 8009db4:	4798      	blx	r3
 8009db6:	6803      	ldr	r3, [r0, #0]
 8009db8:	2b40      	cmp	r3, #64	@ 0x40
 8009dba:	4605      	mov	r5, r0
 8009dbc:	d00c      	beq.n	8009dd8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8009dbe:	d810      	bhi.n	8009de2 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8009dc0:	2b04      	cmp	r3, #4
 8009dc2:	d01d      	beq.n	8009e00 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8009dc4:	d804      	bhi.n	8009dd0 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d006      	beq.n	8009dd8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8009dca:	2b02      	cmp	r3, #2
 8009dcc:	d02c      	beq.n	8009e28 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8009dce:	bd70      	pop	{r4, r5, r6, pc}
 8009dd0:	2b08      	cmp	r3, #8
 8009dd2:	d01d      	beq.n	8009e10 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8009dd4:	2b20      	cmp	r3, #32
 8009dd6:	d1fa      	bne.n	8009dce <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8009dd8:	6823      	ldr	r3, [r4, #0]
 8009dda:	4620      	mov	r0, r4
 8009ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dde:	4798      	blx	r3
 8009de0:	e013      	b.n	8009e0a <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8009de2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009de6:	d0f7      	beq.n	8009dd8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8009de8:	d804      	bhi.n	8009df4 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8009dea:	2b80      	cmp	r3, #128	@ 0x80
 8009dec:	d0f4      	beq.n	8009dd8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8009dee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009df2:	e7f0      	b.n	8009dd6 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8009df4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009df8:	d0ee      	beq.n	8009dd8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8009dfa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009dfe:	e7e5      	b.n	8009dcc <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8009e00:	6823      	ldr	r3, [r4, #0]
 8009e02:	7f01      	ldrb	r1, [r0, #28]
 8009e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e06:	4620      	mov	r0, r4
 8009e08:	4798      	blx	r3
 8009e0a:	6823      	ldr	r3, [r4, #0]
 8009e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e0e:	e006      	b.n	8009e1e <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8009e10:	6823      	ldr	r3, [r4, #0]
 8009e12:	7f01      	ldrb	r1, [r0, #28]
 8009e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e16:	4620      	mov	r0, r4
 8009e18:	4798      	blx	r3
 8009e1a:	6823      	ldr	r3, [r4, #0]
 8009e1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e1e:	4629      	mov	r1, r5
 8009e20:	4620      	mov	r0, r4
 8009e22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009e26:	4718      	bx	r3
 8009e28:	6823      	ldr	r3, [r4, #0]
 8009e2a:	4620      	mov	r0, r4
 8009e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e2e:	4798      	blx	r3
 8009e30:	e7f3      	b.n	8009e1a <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08009e32 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8009e32:	4770      	bx	lr

08009e34 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8009e34:	4770      	bx	lr

08009e36 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 8009e36:	4770      	bx	lr

08009e38 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8009e38:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8009e3c:	1ad2      	subs	r2, r2, r3
 8009e3e:	2a00      	cmp	r2, #0
 8009e40:	b510      	push	{r4, lr}
 8009e42:	bfdc      	itt	le
 8009e44:	6884      	ldrle	r4, [r0, #8]
 8009e46:	1912      	addle	r2, r2, r4
 8009e48:	2a01      	cmp	r2, #1
 8009e4a:	dd16      	ble.n	8009e7a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8009e4c:	6842      	ldr	r2, [r0, #4]
 8009e4e:	2424      	movs	r4, #36	@ 0x24
 8009e50:	fb04 2303 	mla	r3, r4, r3, r2
 8009e54:	f101 0220 	add.w	r2, r1, #32
 8009e58:	f851 4b04 	ldr.w	r4, [r1], #4
 8009e5c:	f843 4b04 	str.w	r4, [r3], #4
 8009e60:	4291      	cmp	r1, r2
 8009e62:	d1f9      	bne.n	8009e58 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8009e64:	780a      	ldrb	r2, [r1, #0]
 8009e66:	701a      	strb	r2, [r3, #0]
 8009e68:	68c3      	ldr	r3, [r0, #12]
 8009e6a:	6882      	ldr	r2, [r0, #8]
 8009e6c:	f3bf 8f5b 	dmb	ish
 8009e70:	3301      	adds	r3, #1
 8009e72:	429a      	cmp	r2, r3
 8009e74:	bfd8      	it	le
 8009e76:	1a9b      	suble	r3, r3, r2
 8009e78:	60c3      	str	r3, [r0, #12]
 8009e7a:	bd10      	pop	{r4, pc}

08009e7c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8009e7c:	6903      	ldr	r3, [r0, #16]
 8009e7e:	6882      	ldr	r2, [r0, #8]
 8009e80:	f3bf 8f5b 	dmb	ish
 8009e84:	3301      	adds	r3, #1
 8009e86:	429a      	cmp	r2, r3
 8009e88:	bfd8      	it	le
 8009e8a:	1a9b      	suble	r3, r3, r2
 8009e8c:	6103      	str	r3, [r0, #16]
 8009e8e:	4770      	bx	lr

08009e90 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8009e90:	b570      	push	{r4, r5, r6, lr}
 8009e92:	4604      	mov	r4, r0
 8009e94:	460e      	mov	r6, r1
 8009e96:	6860      	ldr	r0, [r4, #4]
 8009e98:	6803      	ldr	r3, [r0, #0]
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	4798      	blx	r3
 8009e9e:	2800      	cmp	r0, #0
 8009ea0:	d1f9      	bne.n	8009e96 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8009ea2:	4d0d      	ldr	r5, [pc, #52]	@ (8009ed8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8009ea4:	6828      	ldr	r0, [r5, #0]
 8009ea6:	6803      	ldr	r3, [r0, #0]
 8009ea8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009eaa:	4798      	blx	r3
 8009eac:	f7f6 fdf8 	bl	8000aa0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8009eb0:	6828      	ldr	r0, [r5, #0]
 8009eb2:	2101      	movs	r1, #1
 8009eb4:	f7ff ff2c 	bl	8009d10 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8009eb8:	6860      	ldr	r0, [r4, #4]
 8009eba:	6803      	ldr	r3, [r0, #0]
 8009ebc:	4631      	mov	r1, r6
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	4798      	blx	r3
 8009ec2:	6823      	ldr	r3, [r4, #0]
 8009ec4:	4620      	mov	r0, r4
 8009ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ec8:	4798      	blx	r3
 8009eca:	6828      	ldr	r0, [r5, #0]
 8009ecc:	6803      	ldr	r3, [r0, #0]
 8009ece:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009ed2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ed4:	4718      	bx	r3
 8009ed6:	bf00      	nop
 8009ed8:	20012658 	.word	0x20012658

08009edc <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8009edc:	b508      	push	{r3, lr}
 8009ede:	f7f6 fdd1 	bl	8000a84 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8009ee2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009ee6:	f7f6 bdd5 	b.w	8000a94 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08009eea <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8009eea:	b510      	push	{r4, lr}
 8009eec:	2114      	movs	r1, #20
 8009eee:	4604      	mov	r4, r0
 8009ef0:	f009 fa22 	bl	8013338 <_ZdlPvj>
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	bd10      	pop	{r4, pc}

08009ef8 <_ZN8touchgfx13DMA_Interface5startEv>:
 8009ef8:	b510      	push	{r4, lr}
 8009efa:	4604      	mov	r4, r0
 8009efc:	6840      	ldr	r0, [r0, #4]
 8009efe:	6803      	ldr	r3, [r0, #0]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4798      	blx	r3
 8009f04:	b948      	cbnz	r0, 8009f1a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8009f06:	7a63      	ldrb	r3, [r4, #9]
 8009f08:	b13b      	cbz	r3, 8009f1a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8009f0a:	7a23      	ldrb	r3, [r4, #8]
 8009f0c:	b92b      	cbnz	r3, 8009f1a <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8009f0e:	6823      	ldr	r3, [r4, #0]
 8009f10:	4620      	mov	r0, r4
 8009f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f18:	4718      	bx	r3
 8009f1a:	bd10      	pop	{r4, pc}

08009f1c <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8009f1c:	b570      	push	{r4, r5, r6, lr}
 8009f1e:	4604      	mov	r4, r0
 8009f20:	6840      	ldr	r0, [r0, #4]
 8009f22:	6803      	ldr	r3, [r0, #0]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4798      	blx	r3
 8009f28:	4605      	mov	r5, r0
 8009f2a:	b930      	cbnz	r0, 8009f3a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8009f2c:	7a23      	ldrb	r3, [r4, #8]
 8009f2e:	b123      	cbz	r3, 8009f3a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8009f30:	6860      	ldr	r0, [r4, #4]
 8009f32:	6803      	ldr	r3, [r0, #0]
 8009f34:	695b      	ldr	r3, [r3, #20]
 8009f36:	4798      	blx	r3
 8009f38:	7225      	strb	r5, [r4, #8]
 8009f3a:	6860      	ldr	r0, [r4, #4]
 8009f3c:	6803      	ldr	r3, [r0, #0]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	4798      	blx	r3
 8009f42:	b928      	cbnz	r0, 8009f50 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8009f44:	6823      	ldr	r3, [r4, #0]
 8009f46:	4620      	mov	r0, r4
 8009f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009f4e:	4718      	bx	r3
 8009f50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009f54:	f7f6 bdac 	b.w	8000ab0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08009f58 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8009f58:	b510      	push	{r4, lr}
 8009f5a:	4c04      	ldr	r4, [pc, #16]	@ (8009f6c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8009f5c:	6082      	str	r2, [r0, #8]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	e9c0 4100 	strd	r4, r1, [r0]
 8009f64:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8009f68:	bd10      	pop	{r4, pc}
 8009f6a:	bf00      	nop
 8009f6c:	080159b4 	.word	0x080159b4

08009f70 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8009f70:	6840      	ldr	r0, [r0, #4]
 8009f72:	6803      	ldr	r3, [r0, #0]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	4718      	bx	r3

08009f78 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8009f78:	2000      	movs	r0, #0
 8009f7a:	4770      	bx	lr

08009f7c <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8009f7c:	4b07      	ldr	r3, [pc, #28]	@ (8009f9c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8009f7e:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8009f80:	881b      	ldrh	r3, [r3, #0]
 8009f82:	4293      	cmp	r3, r2
 8009f84:	bf81      	itttt	hi
 8009f86:	4b06      	ldrhi	r3, [pc, #24]	@ (8009fa0 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8009f88:	681b      	ldrhi	r3, [r3, #0]
 8009f8a:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8009f8e:	7858      	ldrbhi	r0, [r3, #1]
 8009f90:	bf8c      	ite	hi
 8009f92:	f000 0003 	andhi.w	r0, r0, #3
 8009f96:	2000      	movls	r0, #0
 8009f98:	4770      	bx	lr
 8009f9a:	bf00      	nop
 8009f9c:	200126ac 	.word	0x200126ac
 8009fa0:	200126a8 	.word	0x200126a8

08009fa4 <_ZN8touchgfx8TextAreaD1Ev>:
 8009fa4:	4770      	bx	lr
	...

08009fa8 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8009fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fac:	4b10      	ldr	r3, [pc, #64]	@ (8009ff0 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8009fae:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8009fb0:	881b      	ldrh	r3, [r3, #0]
 8009fb2:	428b      	cmp	r3, r1
 8009fb4:	4604      	mov	r4, r0
 8009fb6:	d918      	bls.n	8009fea <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8009fb8:	6803      	ldr	r3, [r0, #0]
 8009fba:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 8009fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8009ff4 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8009fbe:	6818      	ldr	r0, [r3, #0]
 8009fc0:	f7f9 fbac 	bl	800371c <_ZNK8touchgfx5Texts7getTextEt>
 8009fc4:	6823      	ldr	r3, [r4, #0]
 8009fc6:	4606      	mov	r6, r0
 8009fc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009fca:	4620      	mov	r0, r4
 8009fcc:	4798      	blx	r3
 8009fce:	6823      	ldr	r3, [r4, #0]
 8009fd0:	4607      	mov	r7, r0
 8009fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fd6:	4620      	mov	r0, r4
 8009fd8:	4798      	blx	r3
 8009fda:	463a      	mov	r2, r7
 8009fdc:	4603      	mov	r3, r0
 8009fde:	4631      	mov	r1, r6
 8009fe0:	4620      	mov	r0, r4
 8009fe2:	46ac      	mov	ip, r5
 8009fe4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fe8:	4760      	bx	ip
 8009fea:	2000      	movs	r0, #0
 8009fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ff0:	200126ac 	.word	0x200126ac
 8009ff4:	200126b4 	.word	0x200126b4

08009ff8 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8009ff8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ffc:	4b17      	ldr	r3, [pc, #92]	@ (800a05c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8009ffe:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800a000:	881b      	ldrh	r3, [r3, #0]
 800a002:	428b      	cmp	r3, r1
 800a004:	4604      	mov	r4, r0
 800a006:	d926      	bls.n	800a056 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 800a008:	4b15      	ldr	r3, [pc, #84]	@ (800a060 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 800a010:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 800a014:	4b13      	ldr	r3, [pc, #76]	@ (800a064 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 800a016:	7855      	ldrb	r5, [r2, #1]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800a01e:	6833      	ldr	r3, [r6, #0]
 800a020:	69df      	ldr	r7, [r3, #28]
 800a022:	4b11      	ldr	r3, [pc, #68]	@ (800a068 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 800a024:	6818      	ldr	r0, [r3, #0]
 800a026:	f7f9 fb79 	bl	800371c <_ZNK8touchgfx5Texts7getTextEt>
 800a02a:	6823      	ldr	r3, [r4, #0]
 800a02c:	4680      	mov	r8, r0
 800a02e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a030:	4620      	mov	r0, r4
 800a032:	4798      	blx	r3
 800a034:	6823      	ldr	r3, [r4, #0]
 800a036:	4681      	mov	r9, r0
 800a038:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a03c:	4620      	mov	r0, r4
 800a03e:	4798      	blx	r3
 800a040:	f3c5 0581 	ubfx	r5, r5, #2, #2
 800a044:	9000      	str	r0, [sp, #0]
 800a046:	464b      	mov	r3, r9
 800a048:	4642      	mov	r2, r8
 800a04a:	4629      	mov	r1, r5
 800a04c:	4630      	mov	r0, r6
 800a04e:	47b8      	blx	r7
 800a050:	b003      	add	sp, #12
 800a052:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a056:	2000      	movs	r0, #0
 800a058:	e7fa      	b.n	800a050 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 800a05a:	bf00      	nop
 800a05c:	200126ac 	.word	0x200126ac
 800a060:	200126a8 	.word	0x200126a8
 800a064:	200126b0 	.word	0x200126b0
 800a068:	200126b4 	.word	0x200126b4

0800a06c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 800a06c:	b40e      	push	{r1, r2, r3}
 800a06e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a072:	4b2f      	ldr	r3, [pc, #188]	@ (800a130 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 800a074:	881a      	ldrh	r2, [r3, #0]
 800a076:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 800a078:	429a      	cmp	r2, r3
 800a07a:	b09d      	sub	sp, #116	@ 0x74
 800a07c:	4604      	mov	r4, r0
 800a07e:	d954      	bls.n	800a12a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 800a080:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 800a134 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 800a084:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 800a138 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 800a088:	aa26      	add	r2, sp, #152	@ 0x98
 800a08a:	9202      	str	r2, [sp, #8]
 800a08c:	f8d9 2000 	ldr.w	r2, [r9]
 800a090:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800a094:	f8d8 3000 	ldr.w	r3, [r8]
 800a098:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800a09c:	682b      	ldr	r3, [r5, #0]
 800a09e:	4628      	mov	r0, r5
 800a0a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0a2:	4798      	blx	r3
 800a0a4:	b207      	sxth	r7, r0
 800a0a6:	4606      	mov	r6, r0
 800a0a8:	a803      	add	r0, sp, #12
 800a0aa:	f004 fae2 	bl	800e672 <_ZN8touchgfx12TextProviderC1Ev>
 800a0ae:	682b      	ldr	r3, [r5, #0]
 800a0b0:	4628      	mov	r0, r5
 800a0b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0b4:	4798      	blx	r3
 800a0b6:	682b      	ldr	r3, [r5, #0]
 800a0b8:	4682      	mov	sl, r0
 800a0ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0bc:	4628      	mov	r0, r5
 800a0be:	4798      	blx	r3
 800a0c0:	4653      	mov	r3, sl
 800a0c2:	9000      	str	r0, [sp, #0]
 800a0c4:	9a02      	ldr	r2, [sp, #8]
 800a0c6:	9925      	ldr	r1, [sp, #148]	@ 0x94
 800a0c8:	a803      	add	r0, sp, #12
 800a0ca:	f004 fb2d 	bl	800e728 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800a0ce:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800a0d0:	f8d9 3000 	ldr.w	r3, [r9]
 800a0d4:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 800a0d8:	8925      	ldrh	r5, [r4, #8]
 800a0da:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 800a0de:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 800a0e2:	eba5 050c 	sub.w	r5, r5, ip
 800a0e6:	784a      	ldrb	r2, [r1, #1]
 800a0e8:	f8d8 3000 	ldr.w	r3, [r8]
 800a0ec:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 800a0f0:	b22d      	sxth	r5, r5
 800a0f2:	9500      	str	r5, [sp, #0]
 800a0f4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800a0f8:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800a0fc:	a803      	add	r0, sp, #12
 800a0fe:	f002 f907 	bl	800c310 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 800a102:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 800a106:	18b9      	adds	r1, r7, r2
 800a108:	2900      	cmp	r1, #0
 800a10a:	b203      	sxth	r3, r0
 800a10c:	dd0b      	ble.n	800a126 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 800a10e:	3b01      	subs	r3, #1
 800a110:	fb13 f302 	smulbb	r3, r3, r2
 800a114:	fb16 3300 	smlabb	r3, r6, r0, r3
 800a118:	b21f      	sxth	r7, r3
 800a11a:	4638      	mov	r0, r7
 800a11c:	b01d      	add	sp, #116	@ 0x74
 800a11e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a122:	b003      	add	sp, #12
 800a124:	4770      	bx	lr
 800a126:	2b00      	cmp	r3, #0
 800a128:	dcf7      	bgt.n	800a11a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 800a12a:	2700      	movs	r7, #0
 800a12c:	e7f5      	b.n	800a11a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 800a12e:	bf00      	nop
 800a130:	200126ac 	.word	0x200126ac
 800a134:	200126a8 	.word	0x200126a8
 800a138:	200126b0 	.word	0x200126b0

0800a13c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 800a13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a140:	4bbc      	ldr	r3, [pc, #752]	@ (800a434 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 800a142:	460c      	mov	r4, r1
 800a144:	881b      	ldrh	r3, [r3, #0]
 800a146:	8d89      	ldrh	r1, [r1, #44]	@ 0x2c
 800a148:	428b      	cmp	r3, r1
 800a14a:	b0a9      	sub	sp, #164	@ 0xa4
 800a14c:	4680      	mov	r8, r0
 800a14e:	d809      	bhi.n	800a164 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 800a150:	2300      	movs	r3, #0
 800a152:	f04f 32ff 	mov.w	r2, #4294967295
 800a156:	e9c0 3200 	strd	r3, r2, [r0]
 800a15a:	6083      	str	r3, [r0, #8]
 800a15c:	4640      	mov	r0, r8
 800a15e:	b029      	add	sp, #164	@ 0xa4
 800a160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a164:	4eb4      	ldr	r6, [pc, #720]	@ (800a438 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 800a166:	6833      	ldr	r3, [r6, #0]
 800a168:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 800a16c:	4bb3      	ldr	r3, [pc, #716]	@ (800a43c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800a174:	4bb2      	ldr	r3, [pc, #712]	@ (800a440 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 800a176:	6818      	ldr	r0, [r3, #0]
 800a178:	f7f9 fad0 	bl	800371c <_ZNK8touchgfx5Texts7getTextEt>
 800a17c:	682b      	ldr	r3, [r5, #0]
 800a17e:	4681      	mov	r9, r0
 800a180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a182:	4628      	mov	r0, r5
 800a184:	4798      	blx	r3
 800a186:	8ea7      	ldrh	r7, [r4, #52]	@ 0x34
 800a188:	b203      	sxth	r3, r0
 800a18a:	4407      	add	r7, r0
 800a18c:	9304      	str	r3, [sp, #16]
 800a18e:	b2bb      	uxth	r3, r7
 800a190:	9303      	str	r3, [sp, #12]
 800a192:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 800a196:	4682      	mov	sl, r0
 800a198:	a80f      	add	r0, sp, #60	@ 0x3c
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	f040 80a6 	bne.w	800a2ec <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1b0>
 800a1a0:	f004 fa67 	bl	800e672 <_ZN8touchgfx12TextProviderC1Ev>
 800a1a4:	682b      	ldr	r3, [r5, #0]
 800a1a6:	4628      	mov	r0, r5
 800a1a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1aa:	4798      	blx	r3
 800a1ac:	682b      	ldr	r3, [r5, #0]
 800a1ae:	4606      	mov	r6, r0
 800a1b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1b2:	4628      	mov	r0, r5
 800a1b4:	4798      	blx	r3
 800a1b6:	6823      	ldr	r3, [r4, #0]
 800a1b8:	4607      	mov	r7, r0
 800a1ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a1bc:	4620      	mov	r0, r4
 800a1be:	4798      	blx	r3
 800a1c0:	6823      	ldr	r3, [r4, #0]
 800a1c2:	4683      	mov	fp, r0
 800a1c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	4798      	blx	r3
 800a1cc:	463b      	mov	r3, r7
 800a1ce:	e9cd b000 	strd	fp, r0, [sp]
 800a1d2:	4649      	mov	r1, r9
 800a1d4:	4632      	mov	r2, r6
 800a1d6:	a80f      	add	r0, sp, #60	@ 0x3c
 800a1d8:	f004 fabb 	bl	800e752 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 800a1dc:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800a1e0:	f8df b254 	ldr.w	fp, [pc, #596]	@ 800a438 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 800a1e4:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800a1e8:	f04f 0600 	mov.w	r6, #0
 800a1ec:	bf0c      	ite	eq
 800a1ee:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 800a1f2:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 800a1f6:	4637      	mov	r7, r6
 800a1f8:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800a1fa:	f8db 3000 	ldr.w	r3, [fp]
 800a1fe:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800a202:	4629      	mov	r1, r5
 800a204:	785b      	ldrb	r3, [r3, #1]
 800a206:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800a20a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800a20e:	a80f      	add	r0, sp, #60	@ 0x3c
 800a210:	f001 f9a9 	bl	800b566 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800a214:	9b03      	ldr	r3, [sp, #12]
 800a216:	4286      	cmp	r6, r0
 800a218:	bfb8      	it	lt
 800a21a:	4606      	movlt	r6, r0
 800a21c:	3701      	adds	r7, #1
 800a21e:	eba9 0903 	sub.w	r9, r9, r3
 800a222:	a80f      	add	r0, sp, #60	@ 0x3c
 800a224:	b236      	sxth	r6, r6
 800a226:	b2bf      	uxth	r7, r7
 800a228:	fa0f f989 	sxth.w	r9, r9
 800a22c:	f004 fa48 	bl	800e6c0 <_ZN8touchgfx12TextProvider11endOfStringEv>
 800a230:	b918      	cbnz	r0, 800a23a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 800a232:	7a2b      	ldrb	r3, [r5, #8]
 800a234:	444b      	add	r3, r9
 800a236:	2b00      	cmp	r3, #0
 800a238:	dcde      	bgt.n	800a1f8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xbc>
 800a23a:	9b03      	ldr	r3, [sp, #12]
 800a23c:	9a04      	ldr	r2, [sp, #16]
 800a23e:	f895 9009 	ldrb.w	r9, [r5, #9]
 800a242:	fb13 f707 	smulbb	r7, r3, r7
 800a246:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800a248:	1aff      	subs	r7, r7, r3
 800a24a:	b2bf      	uxth	r7, r7
 800a24c:	b23b      	sxth	r3, r7
 800a24e:	429a      	cmp	r2, r3
 800a250:	bfa8      	it	ge
 800a252:	4657      	movge	r7, sl
 800a254:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800a258:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800a25c:	6823      	ldr	r3, [r4, #0]
 800a25e:	bf08      	it	eq
 800a260:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 800a264:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a266:	bf18      	it	ne
 800a268:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 800a26c:	4620      	mov	r0, r4
 800a26e:	4798      	blx	r3
 800a270:	444f      	add	r7, r9
 800a272:	fa1f f987 	uxth.w	r9, r7
 800a276:	2801      	cmp	r0, #1
 800a278:	fa0f f789 	sxth.w	r7, r9
 800a27c:	b2b3      	uxth	r3, r6
 800a27e:	f000 80e1 	beq.w	800a444 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 800a282:	2802      	cmp	r0, #2
 800a284:	f894 6037 	ldrb.w	r6, [r4, #55]	@ 0x37
 800a288:	f000 80e2 	beq.w	800a450 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 800a28c:	7aea      	ldrb	r2, [r5, #11]
 800a28e:	7b2d      	ldrb	r5, [r5, #12]
 800a290:	b236      	sxth	r6, r6
 800a292:	1ab6      	subs	r6, r6, r2
 800a294:	442a      	add	r2, r5
 800a296:	4413      	add	r3, r2
 800a298:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 800a29c:	fa1f fa86 	uxth.w	sl, r6
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	2a02      	cmp	r2, #2
 800a2a4:	fa0f fb8a 	sxth.w	fp, sl
 800a2a8:	b21e      	sxth	r6, r3
 800a2aa:	f000 80d5 	beq.w	800a458 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 800a2ae:	2a03      	cmp	r2, #3
 800a2b0:	f000 80dd 	beq.w	800a46e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 800a2b4:	2a01      	cmp	r2, #1
 800a2b6:	f040 80e5 	bne.w	800a484 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 800a2ba:	8925      	ldrh	r5, [r4, #8]
 800a2bc:	4633      	mov	r3, r6
 800a2be:	eba5 0909 	sub.w	r9, r5, r9
 800a2c2:	463e      	mov	r6, r7
 800a2c4:	465d      	mov	r5, fp
 800a2c6:	461f      	mov	r7, r3
 800a2c8:	fa0f fb89 	sxth.w	fp, r9
 800a2cc:	4b5c      	ldr	r3, [pc, #368]	@ (800a440 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 800a2ce:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800a2d0:	6818      	ldr	r0, [r3, #0]
 800a2d2:	f7f9 fa23 	bl	800371c <_ZNK8touchgfx5Texts7getTextEt>
 800a2d6:	f8a8 b000 	strh.w	fp, [r8]
 800a2da:	f8a8 5002 	strh.w	r5, [r8, #2]
 800a2de:	f8a8 6004 	strh.w	r6, [r8, #4]
 800a2e2:	f8a8 7006 	strh.w	r7, [r8, #6]
 800a2e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a2ea:	e737      	b.n	800a15c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 800a2ec:	f004 f9c1 	bl	800e672 <_ZN8touchgfx12TextProviderC1Ev>
 800a2f0:	682b      	ldr	r3, [r5, #0]
 800a2f2:	4628      	mov	r0, r5
 800a2f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2f6:	4798      	blx	r3
 800a2f8:	682b      	ldr	r3, [r5, #0]
 800a2fa:	4607      	mov	r7, r0
 800a2fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2fe:	4628      	mov	r0, r5
 800a300:	4798      	blx	r3
 800a302:	6823      	ldr	r3, [r4, #0]
 800a304:	4683      	mov	fp, r0
 800a306:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a308:	4620      	mov	r0, r4
 800a30a:	4798      	blx	r3
 800a30c:	6822      	ldr	r2, [r4, #0]
 800a30e:	9005      	str	r0, [sp, #20]
 800a310:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a314:	4620      	mov	r0, r4
 800a316:	4790      	blx	r2
 800a318:	9b05      	ldr	r3, [sp, #20]
 800a31a:	9001      	str	r0, [sp, #4]
 800a31c:	463a      	mov	r2, r7
 800a31e:	4649      	mov	r1, r9
 800a320:	9300      	str	r3, [sp, #0]
 800a322:	a80f      	add	r0, sp, #60	@ 0x3c
 800a324:	465b      	mov	r3, fp
 800a326:	f004 fa14 	bl	800e752 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 800a32a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800a32e:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 800a332:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800a334:	f894 0039 	ldrb.w	r0, [r4, #57]	@ 0x39
 800a338:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800a33c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800a340:	bf0a      	itet	eq
 800a342:	464a      	moveq	r2, r9
 800a344:	461a      	movne	r2, r3
 800a346:	4699      	moveq	r9, r3
 800a348:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 800a34c:	1ad2      	subs	r2, r2, r3
 800a34e:	6833      	ldr	r3, [r6, #0]
 800a350:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	@ 0x34
 800a354:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800a358:	af0f      	add	r7, sp, #60	@ 0x3c
 800a35a:	7859      	ldrb	r1, [r3, #1]
 800a35c:	9707      	str	r7, [sp, #28]
 800a35e:	2300      	movs	r3, #0
 800a360:	f3c1 0181 	ubfx	r1, r1, #2, #2
 800a364:	f8ad 3018 	strh.w	r3, [sp, #24]
 800a368:	f88d 1020 	strb.w	r1, [sp, #32]
 800a36c:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 800a370:	9509      	str	r5, [sp, #36]	@ 0x24
 800a372:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800a376:	f8ad 902a 	strh.w	r9, [sp, #42]	@ 0x2a
 800a37a:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 800a37e:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800a382:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 800a386:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800a38a:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800a38e:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800a392:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 800a396:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800a39a:	b350      	cbz	r0, 800a3f2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 800a39c:	682b      	ldr	r3, [r5, #0]
 800a39e:	4628      	mov	r0, r5
 800a3a0:	695b      	ldr	r3, [r3, #20]
 800a3a2:	4798      	blx	r3
 800a3a4:	4607      	mov	r7, r0
 800a3a6:	b320      	cbz	r0, 800a3f2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 800a3a8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a3aa:	6803      	ldr	r3, [r0, #0]
 800a3ac:	4639      	mov	r1, r7
 800a3ae:	68db      	ldr	r3, [r3, #12]
 800a3b0:	4798      	blx	r3
 800a3b2:	4606      	mov	r6, r0
 800a3b4:	b1e8      	cbz	r0, 800a3f2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 800a3b6:	7b43      	ldrb	r3, [r0, #13]
 800a3b8:	7a82      	ldrb	r2, [r0, #10]
 800a3ba:	005b      	lsls	r3, r3, #1
 800a3bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 800a3c6:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 800a3ca:	2b06      	cmp	r3, #6
 800a3cc:	d111      	bne.n	800a3f2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 800a3ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a3d0:	6803      	ldr	r3, [r0, #0]
 800a3d2:	4632      	mov	r2, r6
 800a3d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3d6:	4639      	mov	r1, r7
 800a3d8:	4798      	blx	r3
 800a3da:	7b73      	ldrb	r3, [r6, #13]
 800a3dc:	005b      	lsls	r3, r3, #1
 800a3de:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800a3e2:	7ab3      	ldrb	r3, [r6, #10]
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	4418      	add	r0, r3
 800a3e8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800a3ec:	4418      	add	r0, r3
 800a3ee:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 800a3f2:	2600      	movs	r6, #0
 800a3f4:	4637      	mov	r7, r6
 800a3f6:	a806      	add	r0, sp, #24
 800a3f8:	f001 fe86 	bl	800c108 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800a3fc:	f8bd 0036 	ldrh.w	r0, [sp, #54]	@ 0x36
 800a400:	9b03      	ldr	r3, [sp, #12]
 800a402:	4286      	cmp	r6, r0
 800a404:	eba9 0903 	sub.w	r9, r9, r3
 800a408:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800a40c:	bfb8      	it	lt
 800a40e:	4606      	movlt	r6, r0
 800a410:	3701      	adds	r7, #1
 800a412:	b236      	sxth	r6, r6
 800a414:	b2bf      	uxth	r7, r7
 800a416:	fa0f f989 	sxth.w	r9, r9
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	f43f af0d 	beq.w	800a23a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 800a420:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 800a424:	2b00      	cmp	r3, #0
 800a426:	f47f af08 	bne.w	800a23a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 800a42a:	7a2b      	ldrb	r3, [r5, #8]
 800a42c:	444b      	add	r3, r9
 800a42e:	2b00      	cmp	r3, #0
 800a430:	dce1      	bgt.n	800a3f6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2ba>
 800a432:	e702      	b.n	800a23a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 800a434:	200126ac 	.word	0x200126ac
 800a438:	200126a8 	.word	0x200126a8
 800a43c:	200126b0 	.word	0x200126b0
 800a440:	200126b4 	.word	0x200126b4
 800a444:	ebaa 0606 	sub.w	r6, sl, r6
 800a448:	2002      	movs	r0, #2
 800a44a:	fb96 f6f0 	sdiv	r6, r6, r0
 800a44e:	e71d      	b.n	800a28c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x150>
 800a450:	441e      	add	r6, r3
 800a452:	ebaa 0606 	sub.w	r6, sl, r6
 800a456:	e719      	b.n	800a28c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x150>
 800a458:	8925      	ldrh	r5, [r4, #8]
 800a45a:	1aed      	subs	r5, r5, r3
 800a45c:	eba5 050a 	sub.w	r5, r5, sl
 800a460:	fa0f fb85 	sxth.w	fp, r5
 800a464:	8965      	ldrh	r5, [r4, #10]
 800a466:	eba5 0509 	sub.w	r5, r5, r9
 800a46a:	b22d      	sxth	r5, r5
 800a46c:	e72e      	b.n	800a2cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>
 800a46e:	8965      	ldrh	r5, [r4, #10]
 800a470:	1aed      	subs	r5, r5, r3
 800a472:	eba5 050a 	sub.w	r5, r5, sl
 800a476:	4633      	mov	r3, r6
 800a478:	b22d      	sxth	r5, r5
 800a47a:	463e      	mov	r6, r7
 800a47c:	f04f 0b00 	mov.w	fp, #0
 800a480:	461f      	mov	r7, r3
 800a482:	e723      	b.n	800a2cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>
 800a484:	2500      	movs	r5, #0
 800a486:	e721      	b.n	800a2cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>

0800a488 <_ZN8touchgfx8TextAreaD0Ev>:
 800a488:	b510      	push	{r4, lr}
 800a48a:	2148      	movs	r1, #72	@ 0x48
 800a48c:	4604      	mov	r4, r0
 800a48e:	f008 ff53 	bl	8013338 <_ZdlPvj>
 800a492:	4620      	mov	r0, r4
 800a494:	bd10      	pop	{r4, pc}
	...

0800a498 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 800a498:	b513      	push	{r0, r1, r4, lr}
 800a49a:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 800a49e:	4604      	mov	r4, r0
 800a4a0:	b1fb      	cbz	r3, 800a4e2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800a4a2:	4b16      	ldr	r3, [pc, #88]	@ (800a4fc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 800a4a4:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800a4a6:	881b      	ldrh	r3, [r3, #0]
 800a4a8:	428b      	cmp	r3, r1
 800a4aa:	d91a      	bls.n	800a4e2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800a4ac:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	dd16      	ble.n	800a4e2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800a4b4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	dd12      	ble.n	800a4e2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800a4bc:	4b10      	ldr	r3, [pc, #64]	@ (800a500 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 800a4be:	6818      	ldr	r0, [r3, #0]
 800a4c0:	f7f9 f92c 	bl	800371c <_ZNK8touchgfx5Texts7getTextEt>
 800a4c4:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 800a4c8:	6822      	ldr	r2, [r4, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	db06      	blt.n	800a4dc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 800a4ce:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	db02      	blt.n	800a4dc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 800a4d6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a4d8:	4298      	cmp	r0, r3
 800a4da:	d004      	beq.n	800a4e6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 800a4dc:	6953      	ldr	r3, [r2, #20]
 800a4de:	4620      	mov	r0, r4
 800a4e0:	4798      	blx	r3
 800a4e2:	b002      	add	sp, #8
 800a4e4:	bd10      	pop	{r4, pc}
 800a4e6:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 800a4ea:	c903      	ldmia	r1, {r0, r1}
 800a4ec:	466b      	mov	r3, sp
 800a4ee:	e883 0003 	stmia.w	r3, {r0, r1}
 800a4f2:	6912      	ldr	r2, [r2, #16]
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	4790      	blx	r2
 800a4fa:	e7f2      	b.n	800a4e2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800a4fc:	200126ac 	.word	0x200126ac
 800a500:	200126b4 	.word	0x200126b4

0800a504 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 800a504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a508:	4b44      	ldr	r3, [pc, #272]	@ (800a61c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 800a50a:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800a50c:	881b      	ldrh	r3, [r3, #0]
 800a50e:	4293      	cmp	r3, r2
 800a510:	b08e      	sub	sp, #56	@ 0x38
 800a512:	4604      	mov	r4, r0
 800a514:	d97e      	bls.n	800a614 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800a516:	6808      	ldr	r0, [r1, #0]
 800a518:	4d41      	ldr	r5, [pc, #260]	@ (800a620 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 800a51a:	6849      	ldr	r1, [r1, #4]
 800a51c:	ab05      	add	r3, sp, #20
 800a51e:	c303      	stmia	r3!, {r0, r1}
 800a520:	4611      	mov	r1, r2
 800a522:	6828      	ldr	r0, [r5, #0]
 800a524:	f7f9 f8fa 	bl	800371c <_ZNK8touchgfx5Texts7getTextEt>
 800a528:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	db11      	blt.n	800a554 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 800a530:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 800a534:	2b00      	cmp	r3, #0
 800a536:	db0d      	blt.n	800a554 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 800a538:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a53a:	4298      	cmp	r0, r3
 800a53c:	d10a      	bne.n	800a554 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 800a53e:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 800a542:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a546:	ab09      	add	r3, sp, #36	@ 0x24
 800a548:	e883 0003 	stmia.w	r3, {r0, r1}
 800a54c:	4619      	mov	r1, r3
 800a54e:	a805      	add	r0, sp, #20
 800a550:	f7fe fd14 	bl	8008f7c <_ZN8touchgfx4RectaNERKS0_>
 800a554:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	dd5b      	ble.n	800a614 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800a55c:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 800a560:	2b00      	cmp	r3, #0
 800a562:	dd57      	ble.n	800a614 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800a564:	4f2f      	ldr	r7, [pc, #188]	@ (800a624 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 800a566:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800a56e:	4b2e      	ldr	r3, [pc, #184]	@ (800a628 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800a576:	2e00      	cmp	r6, #0
 800a578:	d04c      	beq.n	800a614 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800a57a:	6823      	ldr	r3, [r4, #0]
 800a57c:	f894 8036 	ldrb.w	r8, [r4, #54]	@ 0x36
 800a580:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a582:	4620      	mov	r0, r4
 800a584:	4798      	blx	r3
 800a586:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	@ 0x34
 800a58e:	f894 e038 	ldrb.w	lr, [r4, #56]	@ 0x38
 800a592:	f894 7037 	ldrb.w	r7, [r4, #55]	@ 0x37
 800a596:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a598:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800a59c:	f894 2039 	ldrb.w	r2, [r4, #57]	@ 0x39
 800a5a0:	785b      	ldrb	r3, [r3, #1]
 800a5a2:	9609      	str	r6, [sp, #36]	@ 0x24
 800a5a4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800a5a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a5ac:	4b1f      	ldr	r3, [pc, #124]	@ (800a62c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 800a5ae:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f88d e02a 	strb.w	lr, [sp, #42]	@ 0x2a
 800a5b8:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a5ba:	f8ad c030 	strh.w	ip, [sp, #48]	@ 0x30
 800a5be:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 800a5c2:	f88d 7033 	strb.w	r7, [sp, #51]	@ 0x33
 800a5c6:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 800a5ca:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800a5ce:	b10a      	cbz	r2, 800a5d4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 800a5d0:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 800a5d2:	b906      	cbnz	r6, 800a5d6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 800a5d4:	689e      	ldr	r6, [r3, #8]
 800a5d6:	af07      	add	r7, sp, #28
 800a5d8:	4621      	mov	r1, r4
 800a5da:	4638      	mov	r0, r7
 800a5dc:	f003 fc58 	bl	800de90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800a5e0:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800a5e2:	6828      	ldr	r0, [r5, #0]
 800a5e4:	f7f9 f89a 	bl	800371c <_ZNK8touchgfx5Texts7getTextEt>
 800a5e8:	6823      	ldr	r3, [r4, #0]
 800a5ea:	4605      	mov	r5, r0
 800a5ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a5ee:	4620      	mov	r0, r4
 800a5f0:	4798      	blx	r3
 800a5f2:	6823      	ldr	r3, [r4, #0]
 800a5f4:	4680      	mov	r8, r0
 800a5f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5fa:	4620      	mov	r0, r4
 800a5fc:	4798      	blx	r3
 800a5fe:	e9cd 8002 	strd	r8, r0, [sp, #8]
 800a602:	ab09      	add	r3, sp, #36	@ 0x24
 800a604:	9300      	str	r3, [sp, #0]
 800a606:	9501      	str	r5, [sp, #4]
 800a608:	ab05      	add	r3, sp, #20
 800a60a:	e897 0006 	ldmia.w	r7, {r1, r2}
 800a60e:	4630      	mov	r0, r6
 800a610:	f7f9 f837 	bl	8003682 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800a614:	b00e      	add	sp, #56	@ 0x38
 800a616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a61a:	bf00      	nop
 800a61c:	200126ac 	.word	0x200126ac
 800a620:	200126b4 	.word	0x200126b4
 800a624:	200126a8 	.word	0x200126a8
 800a628:	200126b0 	.word	0x200126b0
 800a62c:	20012658 	.word	0x20012658

0800a630 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 800a630:	b570      	push	{r4, r5, r6, lr}
 800a632:	6803      	ldr	r3, [r0, #0]
 800a634:	4604      	mov	r4, r0
 800a636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a638:	4615      	mov	r5, r2
 800a63a:	4798      	blx	r3
 800a63c:	6823      	ldr	r3, [r4, #0]
 800a63e:	4629      	mov	r1, r5
 800a640:	4620      	mov	r0, r4
 800a642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a644:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a648:	4718      	bx	r3
	...

0800a64c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 800a64c:	b538      	push	{r3, r4, r5, lr}
 800a64e:	4b0e      	ldr	r3, [pc, #56]	@ (800a688 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 800a650:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800a652:	881b      	ldrh	r3, [r3, #0]
 800a654:	429a      	cmp	r2, r3
 800a656:	4604      	mov	r4, r0
 800a658:	d214      	bcs.n	800a684 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 800a65a:	6803      	ldr	r3, [r0, #0]
 800a65c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a65e:	4798      	blx	r3
 800a660:	6823      	ldr	r3, [r4, #0]
 800a662:	4605      	mov	r5, r0
 800a664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a666:	4620      	mov	r0, r4
 800a668:	4798      	blx	r3
 800a66a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800a66e:	b22d      	sxth	r5, r5
 800a670:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800a674:	4601      	mov	r1, r0
 800a676:	bf06      	itte	eq
 800a678:	4602      	moveq	r2, r0
 800a67a:	4629      	moveq	r1, r5
 800a67c:	462a      	movne	r2, r5
 800a67e:	4620      	mov	r0, r4
 800a680:	f7ff ffd6 	bl	800a630 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800a684:	bd38      	pop	{r3, r4, r5, pc}
 800a686:	bf00      	nop
 800a688:	200126ac 	.word	0x200126ac

0800a68c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 800a68c:	b530      	push	{r4, r5, lr}
 800a68e:	888b      	ldrh	r3, [r1, #4]
 800a690:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800a692:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800a696:	b085      	sub	sp, #20
 800a698:	4604      	mov	r4, r0
 800a69a:	b923      	cbnz	r3, 800a6a6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 800a69c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800a6a0:	b90b      	cbnz	r3, 800a6a6 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 800a6a2:	f7ff ffd3 	bl	800a64c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 800a6a6:	6823      	ldr	r3, [r4, #0]
 800a6a8:	466d      	mov	r5, sp
 800a6aa:	4621      	mov	r1, r4
 800a6ac:	4628      	mov	r0, r5
 800a6ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a6b2:	4798      	blx	r3
 800a6b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a6b8:	343c      	adds	r4, #60	@ 0x3c
 800a6ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a6be:	b005      	add	sp, #20
 800a6c0:	bd30      	pop	{r4, r5, pc}

0800a6c2 <_ZNK8touchgfx3Box12getSolidRectEv>:
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	8083      	strh	r3, [r0, #4]
 800a6c6:	80c3      	strh	r3, [r0, #6]
 800a6c8:	8003      	strh	r3, [r0, #0]
 800a6ca:	8043      	strh	r3, [r0, #2]
 800a6cc:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 800a6d0:	2bff      	cmp	r3, #255	@ 0xff
 800a6d2:	bf01      	itttt	eq
 800a6d4:	890b      	ldrheq	r3, [r1, #8]
 800a6d6:	8083      	strheq	r3, [r0, #4]
 800a6d8:	894b      	ldrheq	r3, [r1, #10]
 800a6da:	80c3      	strheq	r3, [r0, #6]
 800a6dc:	4770      	bx	lr
	...

0800a6e0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800a6e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a6e2:	4604      	mov	r4, r0
 800a6e4:	6808      	ldr	r0, [r1, #0]
 800a6e6:	6849      	ldr	r1, [r1, #4]
 800a6e8:	466b      	mov	r3, sp
 800a6ea:	c303      	stmia	r3!, {r0, r1}
 800a6ec:	6823      	ldr	r3, [r4, #0]
 800a6ee:	4669      	mov	r1, sp
 800a6f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	4798      	blx	r3
 800a6f6:	4b08      	ldr	r3, [pc, #32]	@ (800a718 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800a6fe:	b10a      	cbz	r2, 800a704 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800a700:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800a702:	b900      	cbnz	r0, 800a706 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800a704:	6898      	ldr	r0, [r3, #8]
 800a706:	6803      	ldr	r3, [r0, #0]
 800a708:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800a70a:	6a1d      	ldr	r5, [r3, #32]
 800a70c:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 800a710:	4669      	mov	r1, sp
 800a712:	47a8      	blx	r5
 800a714:	b003      	add	sp, #12
 800a716:	bd30      	pop	{r4, r5, pc}
 800a718:	20012658 	.word	0x20012658

0800a71c <_ZN8touchgfx3BoxD1Ev>:
 800a71c:	4770      	bx	lr

0800a71e <_ZN8touchgfx3BoxD0Ev>:
 800a71e:	b510      	push	{r4, lr}
 800a720:	212c      	movs	r1, #44	@ 0x2c
 800a722:	4604      	mov	r4, r0
 800a724:	f008 fe08 	bl	8013338 <_ZdlPvj>
 800a728:	4620      	mov	r0, r4
 800a72a:	bd10      	pop	{r4, pc}

0800a72c <_ZNK8touchgfx3Box17invalidateContentEv>:
 800a72c:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 800a730:	b12a      	cbz	r2, 800a73e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800a732:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800a736:	b112      	cbz	r2, 800a73e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800a738:	6803      	ldr	r3, [r0, #0]
 800a73a:	695b      	ldr	r3, [r3, #20]
 800a73c:	4718      	bx	r3
 800a73e:	4770      	bx	lr

0800a740 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 800a740:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 800a744:	4770      	bx	lr

0800a746 <_ZN8touchgfx6ButtonD1Ev>:
 800a746:	4770      	bx	lr

0800a748 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 800a748:	b570      	push	{r4, r5, r6, lr}
 800a74a:	880b      	ldrh	r3, [r1, #0]
 800a74c:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 800a74e:	4605      	mov	r5, r0
 800a750:	8813      	ldrh	r3, [r2, #0]
 800a752:	f825 3f30 	strh.w	r3, [r5, #48]!
 800a756:	4604      	mov	r4, r0
 800a758:	4628      	mov	r0, r5
 800a75a:	f005 ff6f 	bl	801063c <_ZNK8touchgfx6Bitmap8getWidthEv>
 800a75e:	4606      	mov	r6, r0
 800a760:	4628      	mov	r0, r5
 800a762:	f005 ff9f 	bl	80106a4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800a766:	6823      	ldr	r3, [r4, #0]
 800a768:	4605      	mov	r5, r0
 800a76a:	4631      	mov	r1, r6
 800a76c:	4620      	mov	r0, r4
 800a76e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a770:	4798      	blx	r3
 800a772:	6823      	ldr	r3, [r4, #0]
 800a774:	4629      	mov	r1, r5
 800a776:	4620      	mov	r0, r4
 800a778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a77a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a77e:	4718      	bx	r3

0800a780 <_ZN8touchgfx6ButtonD0Ev>:
 800a780:	b510      	push	{r4, lr}
 800a782:	2134      	movs	r1, #52	@ 0x34
 800a784:	4604      	mov	r4, r0
 800a786:	f008 fdd7 	bl	8013338 <_ZdlPvj>
 800a78a:	4620      	mov	r0, r4
 800a78c:	bd10      	pop	{r4, pc}

0800a78e <_ZN8touchgfx14AbstractButton13executeActionEv>:
 800a78e:	b510      	push	{r4, lr}
 800a790:	4604      	mov	r4, r0
 800a792:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800a794:	b150      	cbz	r0, 800a7ac <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800a796:	6803      	ldr	r3, [r0, #0]
 800a798:	68db      	ldr	r3, [r3, #12]
 800a79a:	4798      	blx	r3
 800a79c:	b130      	cbz	r0, 800a7ac <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800a79e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800a7a0:	6803      	ldr	r3, [r0, #0]
 800a7a2:	4621      	mov	r1, r4
 800a7a4:	689b      	ldr	r3, [r3, #8]
 800a7a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7aa:	4718      	bx	r3
 800a7ac:	bd10      	pop	{r4, pc}

0800a7ae <_ZNK8touchgfx6Button12getSolidRectEv>:
 800a7ae:	b510      	push	{r4, lr}
 800a7b0:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 800a7b4:	2bff      	cmp	r3, #255	@ 0xff
 800a7b6:	4604      	mov	r4, r0
 800a7b8:	d006      	beq.n	800a7c8 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	8003      	strh	r3, [r0, #0]
 800a7be:	8043      	strh	r3, [r0, #2]
 800a7c0:	8083      	strh	r3, [r0, #4]
 800a7c2:	80c3      	strh	r3, [r0, #6]
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	bd10      	pop	{r4, pc}
 800a7c8:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 800a7cc:	b11b      	cbz	r3, 800a7d6 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 800a7ce:	3130      	adds	r1, #48	@ 0x30
 800a7d0:	f005 ff9c 	bl	801070c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800a7d4:	e7f6      	b.n	800a7c4 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 800a7d6:	312e      	adds	r1, #46	@ 0x2e
 800a7d8:	e7fa      	b.n	800a7d0 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

0800a7dc <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 800a7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7e0:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800a7e4:	b08a      	sub	sp, #40	@ 0x28
 800a7e6:	4604      	mov	r4, r0
 800a7e8:	4688      	mov	r8, r1
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d066      	beq.n	800a8bc <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 800a7ee:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800a7f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a7f4:	a805      	add	r0, sp, #20
 800a7f6:	f005 ff21 	bl	801063c <_ZNK8touchgfx6Bitmap8getWidthEv>
 800a7fa:	4607      	mov	r7, r0
 800a7fc:	a805      	add	r0, sp, #20
 800a7fe:	f005 ff51 	bl	80106a4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800a802:	f9b8 6000 	ldrsh.w	r6, [r8]
 800a806:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 800a80a:	4432      	add	r2, r6
 800a80c:	b292      	uxth	r2, r2
 800a80e:	2300      	movs	r3, #0
 800a810:	fa0f fc82 	sxth.w	ip, r2
 800a814:	459c      	cmp	ip, r3
 800a816:	9306      	str	r3, [sp, #24]
 800a818:	dd52      	ble.n	800a8c0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800a81a:	42b7      	cmp	r7, r6
 800a81c:	dd50      	ble.n	800a8c0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800a81e:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 800a822:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800a826:	442b      	add	r3, r5
 800a828:	b29b      	uxth	r3, r3
 800a82a:	b219      	sxth	r1, r3
 800a82c:	2900      	cmp	r1, #0
 800a82e:	dd47      	ble.n	800a8c0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800a830:	42a8      	cmp	r0, r5
 800a832:	dd45      	ble.n	800a8c0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800a834:	4567      	cmp	r7, ip
 800a836:	bfb8      	it	lt
 800a838:	b2ba      	uxthlt	r2, r7
 800a83a:	4288      	cmp	r0, r1
 800a83c:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 800a840:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800a844:	bfb8      	it	lt
 800a846:	b283      	uxthlt	r3, r0
 800a848:	1b92      	subs	r2, r2, r6
 800a84a:	1b5b      	subs	r3, r3, r5
 800a84c:	f8ad 201c 	strh.w	r2, [sp, #28]
 800a850:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a854:	f8ad 6018 	strh.w	r6, [sp, #24]
 800a858:	f8ad 501a 	strh.w	r5, [sp, #26]
 800a85c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800a860:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a864:	429a      	cmp	r2, r3
 800a866:	d026      	beq.n	800a8b6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800a868:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	dd22      	ble.n	800a8b6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800a870:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800a874:	2b00      	cmp	r3, #0
 800a876:	dd1e      	ble.n	800a8b6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800a878:	2300      	movs	r3, #0
 800a87a:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800a87e:	6823      	ldr	r3, [r4, #0]
 800a880:	a908      	add	r1, sp, #32
 800a882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a884:	4620      	mov	r0, r4
 800a886:	4798      	blx	r3
 800a888:	4b0f      	ldr	r3, [pc, #60]	@ (800a8c8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800a890:	b10a      	cbz	r2, 800a896 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 800a892:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800a894:	b900      	cbnz	r0, 800a898 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 800a896:	6898      	ldr	r0, [r3, #8]
 800a898:	6801      	ldr	r1, [r0, #0]
 800a89a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 800a89e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800a8a2:	2501      	movs	r5, #1
 800a8a4:	9502      	str	r5, [sp, #8]
 800a8a6:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 800a8aa:	9401      	str	r4, [sp, #4]
 800a8ac:	ac06      	add	r4, sp, #24
 800a8ae:	9400      	str	r4, [sp, #0]
 800a8b0:	688c      	ldr	r4, [r1, #8]
 800a8b2:	a905      	add	r1, sp, #20
 800a8b4:	47a0      	blx	r4
 800a8b6:	b00a      	add	sp, #40	@ 0x28
 800a8b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8bc:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 800a8be:	e797      	b.n	800a7f0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	9307      	str	r3, [sp, #28]
 800a8c4:	e7ca      	b.n	800a85c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 800a8c6:	bf00      	nop
 800a8c8:	20012658 	.word	0x20012658

0800a8cc <_ZNK8touchgfx6Button17invalidateContentEv>:
 800a8cc:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 800a8d0:	b12a      	cbz	r2, 800a8de <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 800a8d2:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800a8d6:	b112      	cbz	r2, 800a8de <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 800a8d8:	6803      	ldr	r3, [r0, #0]
 800a8da:	695b      	ldr	r3, [r3, #20]
 800a8dc:	4718      	bx	r3
 800a8de:	4770      	bx	lr

0800a8e0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 800a8e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a8e4:	4b2f      	ldr	r3, [pc, #188]	@ (800a9a4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 800a8e6:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800a8e8:	881b      	ldrh	r3, [r3, #0]
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	b08d      	sub	sp, #52	@ 0x34
 800a8ee:	4604      	mov	r4, r0
 800a8f0:	460f      	mov	r7, r1
 800a8f2:	d954      	bls.n	800a99e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 800a8f4:	4b2c      	ldr	r3, [pc, #176]	@ (800a9a8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 800a8f6:	6819      	ldr	r1, [r3, #0]
 800a8f8:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 800a8fc:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 800a900:	4a2a      	ldr	r2, [pc, #168]	@ (800a9ac <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 800a902:	6812      	ldr	r2, [r2, #0]
 800a904:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800a908:	2900      	cmp	r1, #0
 800a90a:	d048      	beq.n	800a99e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 800a90c:	785a      	ldrb	r2, [r3, #1]
 800a90e:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 800a912:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800a916:	4b26      	ldr	r3, [pc, #152]	@ (800a9b0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 800a918:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
 800a91c:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	@ 0x34
 800a920:	f890 e038 	ldrb.w	lr, [r0, #56]	@ 0x38
 800a924:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800a926:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 800a92a:	9107      	str	r1, [sp, #28]
 800a92c:	f3c2 0801 	ubfx	r8, r2, #0, #2
 800a930:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800a934:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	f88d 8020 	strb.w	r8, [sp, #32]
 800a93e:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 800a942:	f88d e022 	strb.w	lr, [sp, #34]	@ 0x22
 800a946:	9609      	str	r6, [sp, #36]	@ 0x24
 800a948:	f8ad c028 	strh.w	ip, [sp, #40]	@ 0x28
 800a94c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800a950:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
 800a954:	b10b      	cbz	r3, 800a95a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 800a956:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
 800a958:	b905      	cbnz	r5, 800a95c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 800a95a:	6895      	ldr	r5, [r2, #8]
 800a95c:	ae05      	add	r6, sp, #20
 800a95e:	4621      	mov	r1, r4
 800a960:	4630      	mov	r0, r6
 800a962:	f003 fa95 	bl	800de90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800a966:	4b13      	ldr	r3, [pc, #76]	@ (800a9b4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 800a968:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800a96a:	6818      	ldr	r0, [r3, #0]
 800a96c:	f7f8 fed6 	bl	800371c <_ZNK8touchgfx5Texts7getTextEt>
 800a970:	6823      	ldr	r3, [r4, #0]
 800a972:	4680      	mov	r8, r0
 800a974:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a976:	4620      	mov	r0, r4
 800a978:	4798      	blx	r3
 800a97a:	6823      	ldr	r3, [r4, #0]
 800a97c:	4681      	mov	r9, r0
 800a97e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a982:	4620      	mov	r0, r4
 800a984:	4798      	blx	r3
 800a986:	e9cd 9002 	strd	r9, r0, [sp, #8]
 800a98a:	ab07      	add	r3, sp, #28
 800a98c:	9300      	str	r3, [sp, #0]
 800a98e:	f8cd 8004 	str.w	r8, [sp, #4]
 800a992:	463b      	mov	r3, r7
 800a994:	e896 0006 	ldmia.w	r6, {r1, r2}
 800a998:	4628      	mov	r0, r5
 800a99a:	f7f8 fe72 	bl	8003682 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800a99e:	b00d      	add	sp, #52	@ 0x34
 800a9a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9a4:	200126ac 	.word	0x200126ac
 800a9a8:	200126a8 	.word	0x200126a8
 800a9ac:	200126b0 	.word	0x200126b0
 800a9b0:	20012658 	.word	0x20012658
 800a9b4:	200126b4 	.word	0x200126b4

0800a9b8 <_ZN8touchgfx5ImageD1Ev>:
 800a9b8:	4770      	bx	lr

0800a9ba <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 800a9ba:	b570      	push	{r4, r5, r6, lr}
 800a9bc:	880b      	ldrh	r3, [r1, #0]
 800a9be:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800a9c0:	4604      	mov	r4, r0
 800a9c2:	4608      	mov	r0, r1
 800a9c4:	460d      	mov	r5, r1
 800a9c6:	f005 fe39 	bl	801063c <_ZNK8touchgfx6Bitmap8getWidthEv>
 800a9ca:	4606      	mov	r6, r0
 800a9cc:	4628      	mov	r0, r5
 800a9ce:	f005 fe69 	bl	80106a4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800a9d2:	6823      	ldr	r3, [r4, #0]
 800a9d4:	4605      	mov	r5, r0
 800a9d6:	4631      	mov	r1, r6
 800a9d8:	4620      	mov	r0, r4
 800a9da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9dc:	4798      	blx	r3
 800a9de:	6823      	ldr	r3, [r4, #0]
 800a9e0:	4629      	mov	r1, r5
 800a9e2:	4620      	mov	r0, r4
 800a9e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a9ea:	4718      	bx	r3

0800a9ec <_ZN8touchgfx5ImageD0Ev>:
 800a9ec:	b510      	push	{r4, lr}
 800a9ee:	212c      	movs	r1, #44	@ 0x2c
 800a9f0:	4604      	mov	r4, r0
 800a9f2:	f008 fca1 	bl	8013338 <_ZdlPvj>
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	bd10      	pop	{r4, pc}

0800a9fa <_ZNK8touchgfx5Image12getSolidRectEv>:
 800a9fa:	b510      	push	{r4, lr}
 800a9fc:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 800aa00:	2bff      	cmp	r3, #255	@ 0xff
 800aa02:	4604      	mov	r4, r0
 800aa04:	d006      	beq.n	800aa14 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 800aa06:	2300      	movs	r3, #0
 800aa08:	8003      	strh	r3, [r0, #0]
 800aa0a:	8043      	strh	r3, [r0, #2]
 800aa0c:	8083      	strh	r3, [r0, #4]
 800aa0e:	80c3      	strh	r3, [r0, #6]
 800aa10:	4620      	mov	r0, r4
 800aa12:	bd10      	pop	{r4, pc}
 800aa14:	3126      	adds	r1, #38	@ 0x26
 800aa16:	f005 fe79 	bl	801070c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800aa1a:	e7f9      	b.n	800aa10 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0800aa1c <_ZNK8touchgfx5Image17invalidateContentEv>:
 800aa1c:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 800aa20:	b12a      	cbz	r2, 800aa2e <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800aa22:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800aa26:	b112      	cbz	r2, 800aa2e <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800aa28:	6803      	ldr	r3, [r0, #0]
 800aa2a:	695b      	ldr	r3, [r3, #20]
 800aa2c:	4718      	bx	r3
 800aa2e:	4770      	bx	lr

0800aa30 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 800aa30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa34:	4604      	mov	r4, r0
 800aa36:	b088      	sub	sp, #32
 800aa38:	f854 3b26 	ldr.w	r3, [r4], #38
 800aa3c:	2500      	movs	r5, #0
 800aa3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa40:	460f      	mov	r7, r1
 800aa42:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800aa46:	a904      	add	r1, sp, #16
 800aa48:	4606      	mov	r6, r0
 800aa4a:	4798      	blx	r3
 800aa4c:	4620      	mov	r0, r4
 800aa4e:	f005 fdf5 	bl	801063c <_ZNK8touchgfx6Bitmap8getWidthEv>
 800aa52:	4680      	mov	r8, r0
 800aa54:	4620      	mov	r0, r4
 800aa56:	f005 fe25 	bl	80106a4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800aa5a:	9506      	str	r5, [sp, #24]
 800aa5c:	ad06      	add	r5, sp, #24
 800aa5e:	f8ad 001e 	strh.w	r0, [sp, #30]
 800aa62:	4639      	mov	r1, r7
 800aa64:	4628      	mov	r0, r5
 800aa66:	f8ad 801c 	strh.w	r8, [sp, #28]
 800aa6a:	f7fe fa87 	bl	8008f7c <_ZN8touchgfx4RectaNERKS0_>
 800aa6e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	dd19      	ble.n	800aaaa <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800aa76:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	dd15      	ble.n	800aaaa <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800aa7e:	4b0c      	ldr	r3, [pc, #48]	@ (800aab0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800aa86:	b10a      	cbz	r2, 800aa8c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 800aa88:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800aa8a:	b900      	cbnz	r0, 800aa8e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 800aa8c:	6898      	ldr	r0, [r3, #8]
 800aa8e:	6801      	ldr	r1, [r0, #0]
 800aa90:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800aa94:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800aa98:	2701      	movs	r7, #1
 800aa9a:	9702      	str	r7, [sp, #8]
 800aa9c:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 800aaa0:	e9cd 5600 	strd	r5, r6, [sp]
 800aaa4:	688d      	ldr	r5, [r1, #8]
 800aaa6:	4621      	mov	r1, r4
 800aaa8:	47a8      	blx	r5
 800aaaa:	b008      	add	sp, #32
 800aaac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aab0:	20012658 	.word	0x20012658

0800aab4 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 800aab4:	b510      	push	{r4, lr}
 800aab6:	6803      	ldr	r3, [r0, #0]
 800aab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaba:	460c      	mov	r4, r1
 800aabc:	4798      	blx	r3
 800aabe:	1b03      	subs	r3, r0, r4
 800aac0:	4258      	negs	r0, r3
 800aac2:	4158      	adcs	r0, r3
 800aac4:	bd10      	pop	{r4, pc}
	...

0800aac8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 800aac8:	4b01      	ldr	r3, [pc, #4]	@ (800aad0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 800aaca:	6019      	str	r1, [r3, #0]
 800aacc:	4770      	bx	lr
 800aace:	bf00      	nop
 800aad0:	20012660 	.word	0x20012660

0800aad4 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800aad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aad8:	4696      	mov	lr, r2
 800aada:	4605      	mov	r5, r0
 800aadc:	4614      	mov	r4, r2
 800aade:	460e      	mov	r6, r1
 800aae0:	461f      	mov	r7, r3
 800aae2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800aae6:	b097      	sub	sp, #92	@ 0x5c
 800aae8:	f10d 0c1c 	add.w	ip, sp, #28
 800aaec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800aaf0:	f8de 3000 	ldr.w	r3, [lr]
 800aaf4:	f8cc 3000 	str.w	r3, [ip]
 800aaf8:	f104 0e14 	add.w	lr, r4, #20
 800aafc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ab00:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800ab04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ab08:	f8de 3000 	ldr.w	r3, [lr]
 800ab0c:	f8cc 3000 	str.w	r3, [ip]
 800ab10:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 800ab14:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ab18:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800ab1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ab20:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 800ab24:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 800ab28:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 800ab2c:	f8de 3000 	ldr.w	r3, [lr]
 800ab30:	f8cc 3000 	str.w	r3, [ip]
 800ab34:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ab36:	682b      	ldr	r3, [r5, #0]
 800ab38:	9201      	str	r2, [sp, #4]
 800ab3a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800ab3e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ab40:	9200      	str	r2, [sp, #0]
 800ab42:	f8cd 8008 	str.w	r8, [sp, #8]
 800ab46:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 800ab4a:	aa07      	add	r2, sp, #28
 800ab4c:	463b      	mov	r3, r7
 800ab4e:	4631      	mov	r1, r6
 800ab50:	4628      	mov	r0, r5
 800ab52:	47d8      	blx	fp
 800ab54:	46a6      	mov	lr, r4
 800ab56:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ab5a:	f10d 0c1c 	add.w	ip, sp, #28
 800ab5e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ab62:	f8de 3000 	ldr.w	r3, [lr]
 800ab66:	f8cc 3000 	str.w	r3, [ip]
 800ab6a:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 800ab6e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ab72:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800ab76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ab7a:	343c      	adds	r4, #60	@ 0x3c
 800ab7c:	f8de 3000 	ldr.w	r3, [lr]
 800ab80:	f8cc 3000 	str.w	r3, [ip]
 800ab84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab86:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800ab8a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ab8e:	6823      	ldr	r3, [r4, #0]
 800ab90:	f8cc 3000 	str.w	r3, [ip]
 800ab94:	682b      	ldr	r3, [r5, #0]
 800ab96:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800ab9a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ab9c:	9201      	str	r2, [sp, #4]
 800ab9e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800aba0:	9200      	str	r2, [sp, #0]
 800aba2:	f8cd 8008 	str.w	r8, [sp, #8]
 800aba6:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 800aba8:	aa07      	add	r2, sp, #28
 800abaa:	463b      	mov	r3, r7
 800abac:	4631      	mov	r1, r6
 800abae:	4628      	mov	r0, r5
 800abb0:	47a0      	blx	r4
 800abb2:	b017      	add	sp, #92	@ 0x5c
 800abb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800abb8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800abb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abbc:	b08d      	sub	sp, #52	@ 0x34
 800abbe:	4688      	mov	r8, r1
 800abc0:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800abc2:	f8d3 c000 	ldr.w	ip, [r3]
 800abc6:	680f      	ldr	r7, [r1, #0]
 800abc8:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 800abcc:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 800abd0:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 800abd4:	edd3 6a07 	vldr	s13, [r3, #28]
 800abd8:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800abda:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 800abde:	f9b1 9000 	ldrsh.w	r9, [r1]
 800abe2:	f9ba 1000 	ldrsh.w	r1, [sl]
 800abe6:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 800abea:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 800abee:	eba7 070c 	sub.w	r7, r7, ip
 800abf2:	42bc      	cmp	r4, r7
 800abf4:	bfa8      	it	ge
 800abf6:	463c      	movge	r4, r7
 800abf8:	ee07 4a90 	vmov	s15, r4
 800abfc:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800ac00:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 800ac04:	ee25 4a04 	vmul.f32	s8, s10, s8
 800ac08:	ee65 4a24 	vmul.f32	s9, s10, s9
 800ac0c:	ee25 5a27 	vmul.f32	s10, s10, s15
 800ac10:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ac14:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ac18:	eb09 0e0c 	add.w	lr, r9, ip
 800ac1c:	4571      	cmp	r1, lr
 800ac1e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800ac22:	ee32 1a05 	vadd.f32	s2, s4, s10
 800ac26:	ee36 0a84 	vadd.f32	s0, s13, s8
 800ac2a:	ee61 1a87 	vmul.f32	s3, s3, s14
 800ac2e:	ee22 2a07 	vmul.f32	s4, s4, s14
 800ac32:	f340 808d 	ble.w	800ad50 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x198>
 800ac36:	eba1 060e 	sub.w	r6, r1, lr
 800ac3a:	fb96 f5f4 	sdiv	r5, r6, r4
 800ac3e:	ee07 5a10 	vmov	s14, r5
 800ac42:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ac46:	2d00      	cmp	r5, #0
 800ac48:	fb04 6615 	mls	r6, r4, r5, r6
 800ac4c:	eea7 0a04 	vfma.f32	s0, s14, s8
 800ac50:	eee7 0a24 	vfma.f32	s1, s14, s9
 800ac54:	eea7 1a05 	vfma.f32	s2, s14, s10
 800ac58:	dd13      	ble.n	800ac82 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca>
 800ac5a:	ee70 6a44 	vsub.f32	s13, s0, s8
 800ac5e:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800ac62:	eef5 6a40 	vcmp.f32	s13, #0.0
 800ac66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac6a:	bf18      	it	ne
 800ac6c:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800ac70:	ee31 2a45 	vsub.f32	s4, s2, s10
 800ac74:	bf08      	it	eq
 800ac76:	eeb0 7a67 	vmoveq.f32	s14, s15
 800ac7a:	ee61 1a87 	vmul.f32	s3, s3, s14
 800ac7e:	ee22 2a07 	vmul.f32	s4, s4, s14
 800ac82:	fb05 f204 	mul.w	r2, r5, r4
 800ac86:	1abf      	subs	r7, r7, r2
 800ac88:	4494      	add	ip, r2
 800ac8a:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800ac8e:	4411      	add	r1, r2
 800ac90:	eb09 020c 	add.w	r2, r9, ip
 800ac94:	443a      	add	r2, r7
 800ac96:	b209      	sxth	r1, r1
 800ac98:	428a      	cmp	r2, r1
 800ac9a:	bfc4      	itt	gt
 800ac9c:	eba1 0209 	subgt.w	r2, r1, r9
 800aca0:	eba2 070c 	subgt.w	r7, r2, ip
 800aca4:	2f00      	cmp	r7, #0
 800aca6:	dd50      	ble.n	800ad4a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x192>
 800aca8:	fb97 f1f4 	sdiv	r1, r7, r4
 800acac:	fb04 7211 	mls	r2, r4, r1, r7
 800acb0:	b90a      	cbnz	r2, 800acb6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe>
 800acb2:	3901      	subs	r1, #1
 800acb4:	4622      	mov	r2, r4
 800acb6:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800acba:	6840      	ldr	r0, [r0, #4]
 800acbc:	900b      	str	r0, [sp, #44]	@ 0x2c
 800acbe:	f8d0 a000 	ldr.w	sl, [r0]
 800acc2:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800acc4:	9008      	str	r0, [sp, #32]
 800acc6:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 800acca:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800accc:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800acd0:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 800acd4:	695b      	ldr	r3, [r3, #20]
 800acd6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800acd8:	445b      	add	r3, fp
 800acda:	eef0 6a42 	vmov.f32	s13, s4
 800acde:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800ace2:	ee21 3a23 	vmul.f32	s6, s2, s7
 800ace6:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800acea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800acee:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800acf2:	9307      	str	r3, [sp, #28]
 800acf4:	ee17 7a90 	vmov	r7, s15
 800acf8:	ee73 7a42 	vsub.f32	s15, s6, s4
 800acfc:	eeb0 7a61 	vmov.f32	s14, s3
 800ad00:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800ad04:	ee16 3a90 	vmov	r3, s13
 800ad08:	fb97 f7f4 	sdiv	r7, r7, r4
 800ad0c:	ee17 ca90 	vmov	ip, s15
 800ad10:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800ad14:	fb9c fcf4 	sdiv	ip, ip, r4
 800ad18:	fb0c 3306 	mla	r3, ip, r6, r3
 800ad1c:	9302      	str	r3, [sp, #8]
 800ad1e:	ee17 3a10 	vmov	r3, s14
 800ad22:	44b6      	add	lr, r6
 800ad24:	fb04 e505 	mla	r5, r4, r5, lr
 800ad28:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 800ad2c:	fb07 3706 	mla	r7, r7, r6, r3
 800ad30:	e9cd 8505 	strd	r8, r5, [sp, #20]
 800ad34:	e9cd 4700 	strd	r4, r7, [sp]
 800ad38:	2900      	cmp	r1, #0
 800ad3a:	bfcc      	ite	gt
 800ad3c:	46a1      	movgt	r9, r4
 800ad3e:	4691      	movle	r9, r2
 800ad40:	eba9 0306 	sub.w	r3, r9, r6
 800ad44:	f8da 4008 	ldr.w	r4, [sl, #8]
 800ad48:	47a0      	blx	r4
 800ad4a:	b00d      	add	sp, #52	@ 0x34
 800ad4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad50:	2500      	movs	r5, #0
 800ad52:	462e      	mov	r6, r5
 800ad54:	e799      	b.n	800ac8a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd2>
	...

0800ad58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800ad58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad5c:	b0db      	sub	sp, #364	@ 0x16c
 800ad5e:	461d      	mov	r5, r3
 800ad60:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 800ad64:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad66:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 800ad6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad6c:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 800ad70:	9310      	str	r3, [sp, #64]	@ 0x40
 800ad72:	6803      	ldr	r3, [r0, #0]
 800ad74:	910f      	str	r1, [sp, #60]	@ 0x3c
 800ad76:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 800ad78:	9009      	str	r0, [sp, #36]	@ 0x24
 800ad7a:	4614      	mov	r4, r2
 800ad7c:	4629      	mov	r1, r5
 800ad7e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800ad82:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 800ad86:	47b8      	blx	r7
 800ad88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad8a:	6058      	str	r0, [r3, #4]
 800ad8c:	2800      	cmp	r0, #0
 800ad8e:	f000 83a1 	beq.w	800b4d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800ad92:	682b      	ldr	r3, [r5, #0]
 800ad94:	9314      	str	r3, [sp, #80]	@ 0x50
 800ad96:	686b      	ldr	r3, [r5, #4]
 800ad98:	9315      	str	r3, [sp, #84]	@ 0x54
 800ad9a:	4bc4      	ldr	r3, [pc, #784]	@ (800b0ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 800ad9c:	ed94 7a02 	vldr	s14, [r4, #8]
 800ada0:	7819      	ldrb	r1, [r3, #0]
 800ada2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800ada6:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 800adaa:	2900      	cmp	r1, #0
 800adac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800adb0:	bf16      	itet	ne
 800adb2:	4619      	movne	r1, r3
 800adb4:	4611      	moveq	r1, r2
 800adb6:	4613      	movne	r3, r2
 800adb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adbc:	9116      	str	r1, [sp, #88]	@ 0x58
 800adbe:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 800adc2:	f240 8387 	bls.w	800b4d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800adc6:	ed94 7a07 	vldr	s14, [r4, #28]
 800adca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800adce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800add2:	f240 837f 	bls.w	800b4d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800add6:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 800adda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800adde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ade2:	f240 8377 	bls.w	800b4d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800ade6:	6822      	ldr	r2, [r4, #0]
 800ade8:	4bb1      	ldr	r3, [pc, #708]	@ (800b0b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 800adea:	429a      	cmp	r2, r3
 800adec:	f2c0 8372 	blt.w	800b4d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800adf0:	49b0      	ldr	r1, [pc, #704]	@ (800b0b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 800adf2:	6963      	ldr	r3, [r4, #20]
 800adf4:	428a      	cmp	r2, r1
 800adf6:	f300 836d 	bgt.w	800b4d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800adfa:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 800adfe:	48ae      	ldr	r0, [pc, #696]	@ (800b0b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 800ae00:	33ff      	adds	r3, #255	@ 0xff
 800ae02:	4283      	cmp	r3, r0
 800ae04:	f200 8366 	bhi.w	800b4d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800ae08:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ae0a:	4dac      	ldr	r5, [pc, #688]	@ (800b0bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 800ae0c:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 800ae10:	33ff      	adds	r3, #255	@ 0xff
 800ae12:	42ab      	cmp	r3, r5
 800ae14:	f200 835e 	bhi.w	800b4d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800ae18:	6862      	ldr	r2, [r4, #4]
 800ae1a:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 800ae1e:	33ff      	adds	r3, #255	@ 0xff
 800ae20:	4283      	cmp	r3, r0
 800ae22:	f200 8357 	bhi.w	800b4d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800ae26:	69a1      	ldr	r1, [r4, #24]
 800ae28:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 800ae2c:	33ff      	adds	r3, #255	@ 0xff
 800ae2e:	4283      	cmp	r3, r0
 800ae30:	f200 8350 	bhi.w	800b4d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800ae34:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ae36:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 800ae3a:	30ff      	adds	r0, #255	@ 0xff
 800ae3c:	42a8      	cmp	r0, r5
 800ae3e:	f200 8349 	bhi.w	800b4d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800ae42:	428a      	cmp	r2, r1
 800ae44:	f280 8110 	bge.w	800b068 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	f300 8119 	bgt.w	800b080 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 800ae4e:	4299      	cmp	r1, r3
 800ae50:	f280 811d 	bge.w	800b08e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 800ae54:	2502      	movs	r5, #2
 800ae56:	2701      	movs	r7, #1
 800ae58:	46a9      	mov	r9, r5
 800ae5a:	46b8      	mov	r8, r7
 800ae5c:	f04f 0a00 	mov.w	sl, #0
 800ae60:	4621      	mov	r1, r4
 800ae62:	a849      	add	r0, sp, #292	@ 0x124
 800ae64:	f004 fda6 	bl	800f9b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 800ae68:	4622      	mov	r2, r4
 800ae6a:	4653      	mov	r3, sl
 800ae6c:	a949      	add	r1, sp, #292	@ 0x124
 800ae6e:	f8cd 9000 	str.w	r9, [sp]
 800ae72:	a819      	add	r0, sp, #100	@ 0x64
 800ae74:	f004 fece 	bl	800fc14 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800ae78:	4622      	mov	r2, r4
 800ae7a:	4653      	mov	r3, sl
 800ae7c:	a949      	add	r1, sp, #292	@ 0x124
 800ae7e:	f8cd 8000 	str.w	r8, [sp]
 800ae82:	a829      	add	r0, sp, #164	@ 0xa4
 800ae84:	f004 fec6 	bl	800fc14 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800ae88:	4643      	mov	r3, r8
 800ae8a:	4622      	mov	r2, r4
 800ae8c:	a949      	add	r1, sp, #292	@ 0x124
 800ae8e:	f8cd 9000 	str.w	r9, [sp]
 800ae92:	a839      	add	r0, sp, #228	@ 0xe4
 800ae94:	f004 febe 	bl	800fc14 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800ae98:	42af      	cmp	r7, r5
 800ae9a:	bfb5      	itete	lt
 800ae9c:	2300      	movlt	r3, #0
 800ae9e:	2301      	movge	r3, #1
 800aea0:	930e      	strlt	r3, [sp, #56]	@ 0x38
 800aea2:	930e      	strge	r3, [sp, #56]	@ 0x38
 800aea4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aea6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800aeaa:	af12      	add	r7, sp, #72	@ 0x48
 800aeac:	bfb9      	ittee	lt
 800aeae:	ad29      	addlt	r5, sp, #164	@ 0xa4
 800aeb0:	ac19      	addlt	r4, sp, #100	@ 0x64
 800aeb2:	ad19      	addge	r5, sp, #100	@ 0x64
 800aeb4:	ac29      	addge	r4, sp, #164	@ 0xa4
 800aeb6:	e887 0003 	stmia.w	r7, {r0, r1}
 800aeba:	b928      	cbnz	r0, 800aec8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 800aebc:	4b80      	ldr	r3, [pc, #512]	@ (800b0c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 800aebe:	6818      	ldr	r0, [r3, #0]
 800aec0:	6803      	ldr	r3, [r0, #0]
 800aec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aec4:	4798      	blx	r3
 800aec6:	6038      	str	r0, [r7, #0]
 800aec8:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800aeca:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800aece:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800aed2:	930c      	str	r3, [sp, #48]	@ 0x30
 800aed4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800aed6:	6963      	ldr	r3, [r4, #20]
 800aed8:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 800aeda:	440b      	add	r3, r1
 800aedc:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800aee0:	4408      	add	r0, r1
 800aee2:	b200      	sxth	r0, r0
 800aee4:	4283      	cmp	r3, r0
 800aee6:	900d      	str	r0, [sp, #52]	@ 0x34
 800aee8:	f280 80dd 	bge.w	800b0a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 800aeec:	428b      	cmp	r3, r1
 800aeee:	da08      	bge.n	800af02 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800aef0:	2a00      	cmp	r2, #0
 800aef2:	dd06      	ble.n	800af02 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800aef4:	1acb      	subs	r3, r1, r3
 800aef6:	429a      	cmp	r2, r3
 800aef8:	f2c0 80e4 	blt.w	800b0c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	f300 80e2 	bgt.w	800b0c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 800af02:	6967      	ldr	r7, [r4, #20]
 800af04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af06:	443b      	add	r3, r7
 800af08:	461f      	mov	r7, r3
 800af0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800af0c:	1bdf      	subs	r7, r3, r7
 800af0e:	4297      	cmp	r7, r2
 800af10:	bfa8      	it	ge
 800af12:	4617      	movge	r7, r2
 800af14:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 800af18:	2f00      	cmp	r7, #0
 800af1a:	f340 8166 	ble.w	800b1ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 800af1e:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800af20:	6829      	ldr	r1, [r5, #0]
 800af22:	f9b3 2000 	ldrsh.w	r2, [r3]
 800af26:	f9bb 3000 	ldrsh.w	r3, [fp]
 800af2a:	6820      	ldr	r0, [r4, #0]
 800af2c:	4411      	add	r1, r2
 800af2e:	4299      	cmp	r1, r3
 800af30:	dd1a      	ble.n	800af68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800af32:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800af36:	440b      	add	r3, r1
 800af38:	4402      	add	r2, r0
 800af3a:	b21b      	sxth	r3, r3
 800af3c:	429a      	cmp	r2, r3
 800af3e:	dc13      	bgt.n	800af68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800af40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af42:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	9206      	str	r2, [sp, #24]
 800af48:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800af4a:	9205      	str	r2, [sp, #20]
 800af4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af4e:	9500      	str	r5, [sp, #0]
 800af50:	e9cd b203 	strd	fp, r2, [sp, #12]
 800af54:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800af56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af58:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800af5c:	a912      	add	r1, sp, #72	@ 0x48
 800af5e:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 800af62:	aa49      	add	r2, sp, #292	@ 0x124
 800af64:	4623      	mov	r3, r4
 800af66:	47c8      	blx	r9
 800af68:	e9d4 2300 	ldrd	r2, r3, [r4]
 800af6c:	441a      	add	r2, r3
 800af6e:	6963      	ldr	r3, [r4, #20]
 800af70:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 800af74:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 800af78:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 800af7c:	68a1      	ldr	r1, [r4, #8]
 800af7e:	ed94 6a08 	vldr	s12, [r4, #32]
 800af82:	6022      	str	r2, [r4, #0]
 800af84:	3301      	adds	r3, #1
 800af86:	6163      	str	r3, [r4, #20]
 800af88:	69a3      	ldr	r3, [r4, #24]
 800af8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800af8e:	3b01      	subs	r3, #1
 800af90:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 800af94:	61a3      	str	r3, [r4, #24]
 800af96:	6923      	ldr	r3, [r4, #16]
 800af98:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800af9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afa0:	edd4 6a07 	vldr	s13, [r4, #28]
 800afa4:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800afa8:	440b      	add	r3, r1
 800afaa:	68e1      	ldr	r1, [r4, #12]
 800afac:	6123      	str	r3, [r4, #16]
 800afae:	ee76 6a86 	vadd.f32	s13, s13, s12
 800afb2:	428b      	cmp	r3, r1
 800afb4:	edc4 6a07 	vstr	s13, [r4, #28]
 800afb8:	db15      	blt.n	800afe6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 800afba:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 800afbe:	ee76 6a26 	vadd.f32	s13, s12, s13
 800afc2:	3201      	adds	r2, #1
 800afc4:	edc4 6a07 	vstr	s13, [r4, #28]
 800afc8:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 800afcc:	6022      	str	r2, [r4, #0]
 800afce:	ee36 7a87 	vadd.f32	s14, s13, s14
 800afd2:	1a5b      	subs	r3, r3, r1
 800afd4:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800afd8:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 800afdc:	6123      	str	r3, [r4, #16]
 800afde:	ee77 7a27 	vadd.f32	s15, s14, s15
 800afe2:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800afe6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800afea:	441a      	add	r2, r3
 800afec:	696b      	ldr	r3, [r5, #20]
 800afee:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 800aff2:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 800aff6:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 800affa:	68a9      	ldr	r1, [r5, #8]
 800affc:	ed95 6a08 	vldr	s12, [r5, #32]
 800b000:	602a      	str	r2, [r5, #0]
 800b002:	3301      	adds	r3, #1
 800b004:	616b      	str	r3, [r5, #20]
 800b006:	69ab      	ldr	r3, [r5, #24]
 800b008:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b00c:	3b01      	subs	r3, #1
 800b00e:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 800b012:	61ab      	str	r3, [r5, #24]
 800b014:	692b      	ldr	r3, [r5, #16]
 800b016:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800b01a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b01e:	edd5 6a07 	vldr	s13, [r5, #28]
 800b022:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800b026:	440b      	add	r3, r1
 800b028:	68e9      	ldr	r1, [r5, #12]
 800b02a:	612b      	str	r3, [r5, #16]
 800b02c:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b030:	428b      	cmp	r3, r1
 800b032:	edc5 6a07 	vstr	s13, [r5, #28]
 800b036:	db15      	blt.n	800b064 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 800b038:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 800b03c:	ee76 6a26 	vadd.f32	s13, s12, s13
 800b040:	3201      	adds	r2, #1
 800b042:	edc5 6a07 	vstr	s13, [r5, #28]
 800b046:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 800b04a:	602a      	str	r2, [r5, #0]
 800b04c:	ee36 7a87 	vadd.f32	s14, s13, s14
 800b050:	1a5b      	subs	r3, r3, r1
 800b052:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800b056:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 800b05a:	612b      	str	r3, [r5, #16]
 800b05c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b060:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800b064:	3f01      	subs	r7, #1
 800b066:	e757      	b.n	800af18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 800b068:	4299      	cmp	r1, r3
 800b06a:	dc13      	bgt.n	800b094 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 800b06c:	429a      	cmp	r2, r3
 800b06e:	da14      	bge.n	800b09a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 800b070:	2502      	movs	r5, #2
 800b072:	2703      	movs	r7, #3
 800b074:	46a9      	mov	r9, r5
 800b076:	f04f 0800 	mov.w	r8, #0
 800b07a:	f04f 0a01 	mov.w	sl, #1
 800b07e:	e6ef      	b.n	800ae60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800b080:	2501      	movs	r5, #1
 800b082:	2700      	movs	r7, #0
 800b084:	46a9      	mov	r9, r5
 800b086:	46b8      	mov	r8, r7
 800b088:	f04f 0a02 	mov.w	sl, #2
 800b08c:	e6e8      	b.n	800ae60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800b08e:	2501      	movs	r5, #1
 800b090:	2702      	movs	r7, #2
 800b092:	e6e1      	b.n	800ae58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 800b094:	2500      	movs	r5, #0
 800b096:	2701      	movs	r7, #1
 800b098:	e7f4      	b.n	800b084 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 800b09a:	2702      	movs	r7, #2
 800b09c:	2503      	movs	r5, #3
 800b09e:	f04f 0900 	mov.w	r9, #0
 800b0a2:	46b8      	mov	r8, r7
 800b0a4:	e7e9      	b.n	800b07a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 800b0a6:	4613      	mov	r3, r2
 800b0a8:	e728      	b.n	800aefc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 800b0aa:	bf00      	nop
 800b0ac:	20012650 	.word	0x20012650
 800b0b0:	fffd8f01 	.word	0xfffd8f01
 800b0b4:	00027100 	.word	0x00027100
 800b0b8:	0004e1ff 	.word	0x0004e1ff
 800b0bc:	0004e1fe 	.word	0x0004e1fe
 800b0c0:	20012658 	.word	0x20012658
 800b0c4:	4613      	mov	r3, r2
 800b0c6:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800b0c8:	9111      	str	r1, [sp, #68]	@ 0x44
 800b0ca:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 800b0ce:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 800b0d2:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 800b0d4:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 800b0d8:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 800b0dc:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 800b0e0:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 800b0e4:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 800b0e8:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800b0ec:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 800b0f0:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 800b0f4:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 800b0f8:	469e      	mov	lr, r3
 800b0fa:	469c      	mov	ip, r3
 800b0fc:	f04f 0900 	mov.w	r9, #0
 800b100:	f1bc 0f00 	cmp.w	ip, #0
 800b104:	d147      	bne.n	800b196 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 800b106:	eb03 0c07 	add.w	ip, r3, r7
 800b10a:	1ad7      	subs	r7, r2, r3
 800b10c:	f1b9 0f00 	cmp.w	r9, #0
 800b110:	d009      	beq.n	800b126 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 800b112:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 800b116:	9029      	str	r0, [sp, #164]	@ 0xa4
 800b118:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 800b11c:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 800b120:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 800b124:	912d      	str	r1, [sp, #180]	@ 0xb4
 800b126:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800b128:	9111      	str	r1, [sp, #68]	@ 0x44
 800b12a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 800b12e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 800b132:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 800b136:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 800b13a:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 800b13e:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 800b142:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 800b146:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 800b14a:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 800b14e:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 800b152:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 800b156:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 800b15a:	f04f 0800 	mov.w	r8, #0
 800b15e:	f1be 0f00 	cmp.w	lr, #0
 800b162:	d031      	beq.n	800b1c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 800b164:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800b166:	4431      	add	r1, r6
 800b168:	4549      	cmp	r1, r9
 800b16a:	4450      	add	r0, sl
 800b16c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800b170:	ee37 7a04 	vadd.f32	s14, s14, s8
 800b174:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800b178:	db08      	blt.n	800b18c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 800b17a:	ee77 7a85 	vadd.f32	s15, s15, s10
 800b17e:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800b182:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b186:	3001      	adds	r0, #1
 800b188:	eba1 0109 	sub.w	r1, r1, r9
 800b18c:	f10e 3eff 	add.w	lr, lr, #4294967295
 800b190:	f04f 0801 	mov.w	r8, #1
 800b194:	e7e3      	b.n	800b15e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 800b196:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800b198:	4431      	add	r1, r6
 800b19a:	4541      	cmp	r1, r8
 800b19c:	4450      	add	r0, sl
 800b19e:	ee37 7a24 	vadd.f32	s14, s14, s9
 800b1a2:	ee77 7a84 	vadd.f32	s15, s15, s8
 800b1a6:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800b1aa:	db08      	blt.n	800b1be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 800b1ac:	ee76 6a85 	vadd.f32	s13, s13, s10
 800b1b0:	ee37 7a25 	vadd.f32	s14, s14, s11
 800b1b4:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b1b8:	3001      	adds	r0, #1
 800b1ba:	eba1 0108 	sub.w	r1, r1, r8
 800b1be:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b1c2:	f04f 0901 	mov.w	r9, #1
 800b1c6:	e79b      	b.n	800b100 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 800b1c8:	449c      	add	ip, r3
 800b1ca:	1aff      	subs	r7, r7, r3
 800b1cc:	f1b8 0f00 	cmp.w	r8, #0
 800b1d0:	d009      	beq.n	800b1e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 800b1d2:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 800b1d6:	9019      	str	r0, [sp, #100]	@ 0x64
 800b1d8:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 800b1dc:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 800b1e0:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 800b1e4:	911d      	str	r1, [sp, #116]	@ 0x74
 800b1e6:	1ad2      	subs	r2, r2, r3
 800b1e8:	e68b      	b.n	800af02 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800b1ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1ec:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	f000 80d1 	beq.w	800b396 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 800b1f4:	ad19      	add	r5, sp, #100	@ 0x64
 800b1f6:	ac39      	add	r4, sp, #228	@ 0xe4
 800b1f8:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800b1fa:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800b1fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b202:	930c      	str	r3, [sp, #48]	@ 0x30
 800b204:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b206:	6963      	ldr	r3, [r4, #20]
 800b208:	440b      	add	r3, r1
 800b20a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800b20e:	4408      	add	r0, r1
 800b210:	b200      	sxth	r0, r0
 800b212:	4283      	cmp	r3, r0
 800b214:	900d      	str	r0, [sp, #52]	@ 0x34
 800b216:	f280 80c1 	bge.w	800b39c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 800b21a:	428b      	cmp	r3, r1
 800b21c:	da08      	bge.n	800b230 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800b21e:	2a00      	cmp	r2, #0
 800b220:	dd06      	ble.n	800b230 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800b222:	1acb      	subs	r3, r1, r3
 800b224:	429a      	cmp	r2, r3
 800b226:	f2c0 80bb 	blt.w	800b3a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	f300 80b9 	bgt.w	800b3a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 800b230:	6967      	ldr	r7, [r4, #20]
 800b232:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b234:	443b      	add	r3, r7
 800b236:	461f      	mov	r7, r3
 800b238:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b23a:	1bdf      	subs	r7, r3, r7
 800b23c:	4297      	cmp	r7, r2
 800b23e:	bfa8      	it	ge
 800b240:	4617      	movge	r7, r2
 800b242:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 800b246:	2f00      	cmp	r7, #0
 800b248:	f340 813c 	ble.w	800b4c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 800b24c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800b24e:	6829      	ldr	r1, [r5, #0]
 800b250:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b254:	f9bb 3000 	ldrsh.w	r3, [fp]
 800b258:	6820      	ldr	r0, [r4, #0]
 800b25a:	4411      	add	r1, r2
 800b25c:	4299      	cmp	r1, r3
 800b25e:	dd1a      	ble.n	800b296 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800b260:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800b264:	440b      	add	r3, r1
 800b266:	4402      	add	r2, r0
 800b268:	b21b      	sxth	r3, r3
 800b26a:	429a      	cmp	r2, r3
 800b26c:	dc13      	bgt.n	800b296 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800b26e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b270:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	9206      	str	r2, [sp, #24]
 800b276:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b278:	9205      	str	r2, [sp, #20]
 800b27a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b27c:	9500      	str	r5, [sp, #0]
 800b27e:	e9cd b203 	strd	fp, r2, [sp, #12]
 800b282:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800b284:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b286:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800b28a:	a912      	add	r1, sp, #72	@ 0x48
 800b28c:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 800b290:	aa49      	add	r2, sp, #292	@ 0x124
 800b292:	4623      	mov	r3, r4
 800b294:	47c8      	blx	r9
 800b296:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b29a:	441a      	add	r2, r3
 800b29c:	6963      	ldr	r3, [r4, #20]
 800b29e:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 800b2a2:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 800b2a6:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 800b2aa:	68a1      	ldr	r1, [r4, #8]
 800b2ac:	ed94 6a08 	vldr	s12, [r4, #32]
 800b2b0:	6022      	str	r2, [r4, #0]
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	6163      	str	r3, [r4, #20]
 800b2b6:	69a3      	ldr	r3, [r4, #24]
 800b2b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b2bc:	3b01      	subs	r3, #1
 800b2be:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 800b2c2:	61a3      	str	r3, [r4, #24]
 800b2c4:	6923      	ldr	r3, [r4, #16]
 800b2c6:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800b2ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2ce:	edd4 6a07 	vldr	s13, [r4, #28]
 800b2d2:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800b2d6:	440b      	add	r3, r1
 800b2d8:	68e1      	ldr	r1, [r4, #12]
 800b2da:	6123      	str	r3, [r4, #16]
 800b2dc:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b2e0:	428b      	cmp	r3, r1
 800b2e2:	edc4 6a07 	vstr	s13, [r4, #28]
 800b2e6:	db15      	blt.n	800b314 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 800b2e8:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 800b2ec:	ee76 6a26 	vadd.f32	s13, s12, s13
 800b2f0:	3201      	adds	r2, #1
 800b2f2:	edc4 6a07 	vstr	s13, [r4, #28]
 800b2f6:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 800b2fa:	6022      	str	r2, [r4, #0]
 800b2fc:	ee36 7a87 	vadd.f32	s14, s13, s14
 800b300:	1a5b      	subs	r3, r3, r1
 800b302:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800b306:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 800b30a:	6123      	str	r3, [r4, #16]
 800b30c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b310:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800b314:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b318:	441a      	add	r2, r3
 800b31a:	696b      	ldr	r3, [r5, #20]
 800b31c:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 800b320:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 800b324:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 800b328:	68a9      	ldr	r1, [r5, #8]
 800b32a:	ed95 6a08 	vldr	s12, [r5, #32]
 800b32e:	602a      	str	r2, [r5, #0]
 800b330:	3301      	adds	r3, #1
 800b332:	616b      	str	r3, [r5, #20]
 800b334:	69ab      	ldr	r3, [r5, #24]
 800b336:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b33a:	3b01      	subs	r3, #1
 800b33c:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 800b340:	61ab      	str	r3, [r5, #24]
 800b342:	692b      	ldr	r3, [r5, #16]
 800b344:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800b348:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b34c:	edd5 6a07 	vldr	s13, [r5, #28]
 800b350:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800b354:	440b      	add	r3, r1
 800b356:	68e9      	ldr	r1, [r5, #12]
 800b358:	612b      	str	r3, [r5, #16]
 800b35a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b35e:	428b      	cmp	r3, r1
 800b360:	edc5 6a07 	vstr	s13, [r5, #28]
 800b364:	db15      	blt.n	800b392 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 800b366:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 800b36a:	ee76 6a26 	vadd.f32	s13, s12, s13
 800b36e:	3201      	adds	r2, #1
 800b370:	edc5 6a07 	vstr	s13, [r5, #28]
 800b374:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 800b378:	602a      	str	r2, [r5, #0]
 800b37a:	ee36 7a87 	vadd.f32	s14, s13, s14
 800b37e:	1a5b      	subs	r3, r3, r1
 800b380:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800b384:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 800b388:	612b      	str	r3, [r5, #16]
 800b38a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b38e:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800b392:	3f01      	subs	r7, #1
 800b394:	e757      	b.n	800b246 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 800b396:	ad39      	add	r5, sp, #228	@ 0xe4
 800b398:	ac19      	add	r4, sp, #100	@ 0x64
 800b39a:	e72d      	b.n	800b1f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 800b39c:	4613      	mov	r3, r2
 800b39e:	e744      	b.n	800b22a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 800b3a0:	4613      	mov	r3, r2
 800b3a2:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 800b3a6:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 800b3a8:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 800b3ac:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 800b3b0:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 800b3b4:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 800b3b8:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 800b3bc:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 800b3c0:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 800b3c4:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 800b3c6:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 800b3ca:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 800b3ce:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 800b3d2:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 800b3d6:	960e      	str	r6, [sp, #56]	@ 0x38
 800b3d8:	469e      	mov	lr, r3
 800b3da:	461f      	mov	r7, r3
 800b3dc:	f04f 0900 	mov.w	r9, #0
 800b3e0:	2f00      	cmp	r7, #0
 800b3e2:	d146      	bne.n	800b472 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 800b3e4:	449c      	add	ip, r3
 800b3e6:	1ad7      	subs	r7, r2, r3
 800b3e8:	f1b9 0f00 	cmp.w	r9, #0
 800b3ec:	d009      	beq.n	800b402 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 800b3ee:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 800b3f2:	9039      	str	r0, [sp, #228]	@ 0xe4
 800b3f4:	913d      	str	r1, [sp, #244]	@ 0xf4
 800b3f6:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 800b3fa:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 800b3fe:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 800b402:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800b404:	910e      	str	r1, [sp, #56]	@ 0x38
 800b406:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 800b40a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 800b40e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 800b412:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 800b416:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 800b41a:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 800b41e:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 800b422:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 800b426:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 800b42a:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 800b42e:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 800b432:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 800b436:	f04f 0800 	mov.w	r8, #0
 800b43a:	f1be 0f00 	cmp.w	lr, #0
 800b43e:	d030      	beq.n	800b4a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 800b440:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800b442:	4431      	add	r1, r6
 800b444:	4549      	cmp	r1, r9
 800b446:	4450      	add	r0, sl
 800b448:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800b44c:	ee37 7a04 	vadd.f32	s14, s14, s8
 800b450:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800b454:	db08      	blt.n	800b468 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 800b456:	ee77 7a85 	vadd.f32	s15, s15, s10
 800b45a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800b45e:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b462:	3001      	adds	r0, #1
 800b464:	eba1 0109 	sub.w	r1, r1, r9
 800b468:	f10e 3eff 	add.w	lr, lr, #4294967295
 800b46c:	f04f 0801 	mov.w	r8, #1
 800b470:	e7e3      	b.n	800b43a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 800b472:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800b474:	4431      	add	r1, r6
 800b476:	4541      	cmp	r1, r8
 800b478:	4450      	add	r0, sl
 800b47a:	ee37 7a24 	vadd.f32	s14, s14, s9
 800b47e:	ee77 7a84 	vadd.f32	s15, s15, s8
 800b482:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800b486:	db08      	blt.n	800b49a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 800b488:	ee76 6a85 	vadd.f32	s13, s13, s10
 800b48c:	ee37 7a25 	vadd.f32	s14, s14, s11
 800b490:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b494:	3001      	adds	r0, #1
 800b496:	eba1 0108 	sub.w	r1, r1, r8
 800b49a:	3f01      	subs	r7, #1
 800b49c:	f04f 0901 	mov.w	r9, #1
 800b4a0:	e79e      	b.n	800b3e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 800b4a2:	449c      	add	ip, r3
 800b4a4:	1aff      	subs	r7, r7, r3
 800b4a6:	f1b8 0f00 	cmp.w	r8, #0
 800b4aa:	d009      	beq.n	800b4c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 800b4ac:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 800b4b0:	9019      	str	r0, [sp, #100]	@ 0x64
 800b4b2:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 800b4b6:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 800b4ba:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 800b4be:	911d      	str	r1, [sp, #116]	@ 0x74
 800b4c0:	1ad2      	subs	r2, r2, r3
 800b4c2:	e6b5      	b.n	800b230 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800b4c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	b923      	cbnz	r3, 800b4d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b4ca:	4b04      	ldr	r3, [pc, #16]	@ (800b4dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 800b4cc:	6818      	ldr	r0, [r3, #0]
 800b4ce:	6803      	ldr	r3, [r0, #0]
 800b4d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4d2:	4798      	blx	r3
 800b4d4:	b05b      	add	sp, #364	@ 0x16c
 800b4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4da:	bf00      	nop
 800b4dc:	20012658 	.word	0x20012658

0800b4e0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 800b4e0:	b570      	push	{r4, r5, r6, lr}
 800b4e2:	4604      	mov	r4, r0
 800b4e4:	f89d 601c 	ldrb.w	r6, [sp, #28]
 800b4e8:	9805      	ldr	r0, [sp, #20]
 800b4ea:	6061      	str	r1, [r4, #4]
 800b4ec:	2500      	movs	r5, #0
 800b4ee:	f89d 1010 	ldrb.w	r1, [sp, #16]
 800b4f2:	8263      	strh	r3, [r4, #18]
 800b4f4:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800b4f8:	8025      	strh	r5, [r4, #0]
 800b4fa:	7221      	strb	r1, [r4, #8]
 800b4fc:	7266      	strb	r6, [r4, #9]
 800b4fe:	60e0      	str	r0, [r4, #12]
 800b500:	8222      	strh	r2, [r4, #16]
 800b502:	82a3      	strh	r3, [r4, #20]
 800b504:	82e5      	strh	r5, [r4, #22]
 800b506:	8325      	strh	r5, [r4, #24]
 800b508:	8365      	strh	r5, [r4, #26]
 800b50a:	83a5      	strh	r5, [r4, #28]
 800b50c:	83e5      	strh	r5, [r4, #30]
 800b50e:	8425      	strh	r5, [r4, #32]
 800b510:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 800b514:	b32e      	cbz	r6, 800b562 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800b516:	6803      	ldr	r3, [r0, #0]
 800b518:	695b      	ldr	r3, [r3, #20]
 800b51a:	4798      	blx	r3
 800b51c:	4606      	mov	r6, r0
 800b51e:	b300      	cbz	r0, 800b562 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800b520:	68e0      	ldr	r0, [r4, #12]
 800b522:	6803      	ldr	r3, [r0, #0]
 800b524:	4631      	mov	r1, r6
 800b526:	68db      	ldr	r3, [r3, #12]
 800b528:	4798      	blx	r3
 800b52a:	4605      	mov	r5, r0
 800b52c:	b1c8      	cbz	r0, 800b562 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800b52e:	7b43      	ldrb	r3, [r0, #13]
 800b530:	7a82      	ldrb	r2, [r0, #10]
 800b532:	005b      	lsls	r3, r3, #1
 800b534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b538:	4313      	orrs	r3, r2
 800b53a:	8423      	strh	r3, [r4, #32]
 800b53c:	7a63      	ldrb	r3, [r4, #9]
 800b53e:	2b06      	cmp	r3, #6
 800b540:	d10f      	bne.n	800b562 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800b542:	68e0      	ldr	r0, [r4, #12]
 800b544:	6803      	ldr	r3, [r0, #0]
 800b546:	462a      	mov	r2, r5
 800b548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b54a:	4631      	mov	r1, r6
 800b54c:	4798      	blx	r3
 800b54e:	7b6b      	ldrb	r3, [r5, #13]
 800b550:	005b      	lsls	r3, r3, #1
 800b552:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800b556:	7aab      	ldrb	r3, [r5, #10]
 800b558:	4313      	orrs	r3, r2
 800b55a:	4418      	add	r0, r3
 800b55c:	8c23      	ldrh	r3, [r4, #32]
 800b55e:	4418      	add	r0, r3
 800b560:	8420      	strh	r0, [r4, #32]
 800b562:	4620      	mov	r0, r4
 800b564:	bd70      	pop	{r4, r5, r6, pc}

0800b566 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 800b566:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b56a:	2400      	movs	r4, #0
 800b56c:	b085      	sub	sp, #20
 800b56e:	4681      	mov	r9, r0
 800b570:	4688      	mov	r8, r1
 800b572:	4692      	mov	sl, r2
 800b574:	469b      	mov	fp, r3
 800b576:	4627      	mov	r7, r4
 800b578:	4625      	mov	r5, r4
 800b57a:	4626      	mov	r6, r4
 800b57c:	4554      	cmp	r4, sl
 800b57e:	da2a      	bge.n	800b5d6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800b580:	2300      	movs	r3, #0
 800b582:	9303      	str	r3, [sp, #12]
 800b584:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800b588:	429d      	cmp	r5, r3
 800b58a:	d004      	beq.n	800b596 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 800b58c:	f242 030b 	movw	r3, #8203	@ 0x200b
 800b590:	429d      	cmp	r5, r3
 800b592:	bf18      	it	ne
 800b594:	462f      	movne	r7, r5
 800b596:	ab03      	add	r3, sp, #12
 800b598:	4642      	mov	r2, r8
 800b59a:	4659      	mov	r1, fp
 800b59c:	4648      	mov	r0, r9
 800b59e:	f004 f81f 	bl	800f5e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800b5a2:	4605      	mov	r5, r0
 800b5a4:	b1b8      	cbz	r0, 800b5d6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800b5a6:	280a      	cmp	r0, #10
 800b5a8:	d015      	beq.n	800b5d6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800b5aa:	9a03      	ldr	r2, [sp, #12]
 800b5ac:	b18a      	cbz	r2, 800b5d2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 800b5ae:	7b50      	ldrb	r0, [r2, #13]
 800b5b0:	7a93      	ldrb	r3, [r2, #10]
 800b5b2:	8895      	ldrh	r5, [r2, #4]
 800b5b4:	0040      	lsls	r0, r0, #1
 800b5b6:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 800b5ba:	4303      	orrs	r3, r0
 800b5bc:	9301      	str	r3, [sp, #4]
 800b5be:	f8d8 3000 	ldr.w	r3, [r8]
 800b5c2:	4639      	mov	r1, r7
 800b5c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5c6:	4640      	mov	r0, r8
 800b5c8:	4798      	blx	r3
 800b5ca:	9b01      	ldr	r3, [sp, #4]
 800b5cc:	4418      	add	r0, r3
 800b5ce:	4406      	add	r6, r0
 800b5d0:	b2b6      	uxth	r6, r6
 800b5d2:	3401      	adds	r4, #1
 800b5d4:	e7d2      	b.n	800b57c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 800b5d6:	4630      	mov	r0, r6
 800b5d8:	b005      	add	sp, #20
 800b5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b5de <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 800b5de:	2a02      	cmp	r2, #2
 800b5e0:	b530      	push	{r4, r5, lr}
 800b5e2:	d011      	beq.n	800b608 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 800b5e4:	2a03      	cmp	r2, #3
 800b5e6:	d01c      	beq.n	800b622 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 800b5e8:	2a01      	cmp	r2, #1
 800b5ea:	d10c      	bne.n	800b606 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800b5ec:	888b      	ldrh	r3, [r1, #4]
 800b5ee:	8801      	ldrh	r1, [r0, #0]
 800b5f0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800b5f4:	8844      	ldrh	r4, [r0, #2]
 800b5f6:	8004      	strh	r4, [r0, #0]
 800b5f8:	1a5b      	subs	r3, r3, r1
 800b5fa:	1a9b      	subs	r3, r3, r2
 800b5fc:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800b600:	8043      	strh	r3, [r0, #2]
 800b602:	8081      	strh	r1, [r0, #4]
 800b604:	80c2      	strh	r2, [r0, #6]
 800b606:	bd30      	pop	{r4, r5, pc}
 800b608:	88cb      	ldrh	r3, [r1, #6]
 800b60a:	8842      	ldrh	r2, [r0, #2]
 800b60c:	1a9b      	subs	r3, r3, r2
 800b60e:	88c2      	ldrh	r2, [r0, #6]
 800b610:	1a9b      	subs	r3, r3, r2
 800b612:	888a      	ldrh	r2, [r1, #4]
 800b614:	8801      	ldrh	r1, [r0, #0]
 800b616:	8043      	strh	r3, [r0, #2]
 800b618:	1a52      	subs	r2, r2, r1
 800b61a:	8881      	ldrh	r1, [r0, #4]
 800b61c:	1a52      	subs	r2, r2, r1
 800b61e:	8002      	strh	r2, [r0, #0]
 800b620:	e7f1      	b.n	800b606 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800b622:	88cb      	ldrh	r3, [r1, #6]
 800b624:	8841      	ldrh	r1, [r0, #2]
 800b626:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800b62a:	f9b0 5000 	ldrsh.w	r5, [r0]
 800b62e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800b632:	8045      	strh	r5, [r0, #2]
 800b634:	1a5b      	subs	r3, r3, r1
 800b636:	1a9b      	subs	r3, r3, r2
 800b638:	8003      	strh	r3, [r0, #0]
 800b63a:	8082      	strh	r2, [r0, #4]
 800b63c:	80c4      	strh	r4, [r0, #6]
 800b63e:	e7e2      	b.n	800b606 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0800b640 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 800b640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b644:	b09f      	sub	sp, #124	@ 0x7c
 800b646:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b648:	9312      	str	r3, [sp, #72]	@ 0x48
 800b64a:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800b64c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800b64e:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 800b650:	8812      	ldrh	r2, [r2, #0]
 800b652:	889b      	ldrh	r3, [r3, #4]
 800b654:	900e      	str	r0, [sp, #56]	@ 0x38
 800b656:	4413      	add	r3, r2
 800b658:	6828      	ldr	r0, [r5, #0]
 800b65a:	9117      	str	r1, [sp, #92]	@ 0x5c
 800b65c:	b21b      	sxth	r3, r3
 800b65e:	9311      	str	r3, [sp, #68]	@ 0x44
 800b660:	6803      	ldr	r3, [r0, #0]
 800b662:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 800b666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b668:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 800b66c:	4798      	blx	r3
 800b66e:	682b      	ldr	r3, [r5, #0]
 800b670:	9013      	str	r0, [sp, #76]	@ 0x4c
 800b672:	7b1a      	ldrb	r2, [r3, #12]
 800b674:	7adb      	ldrb	r3, [r3, #11]
 800b676:	9215      	str	r2, [sp, #84]	@ 0x54
 800b678:	9316      	str	r3, [sp, #88]	@ 0x58
 800b67a:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 800b67e:	2c00      	cmp	r4, #0
 800b680:	d067      	beq.n	800b752 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 800b682:	7c2b      	ldrb	r3, [r5, #16]
 800b684:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 800b686:	2b06      	cmp	r3, #6
 800b688:	bf14      	ite	ne
 800b68a:	2301      	movne	r3, #1
 800b68c:	2302      	moveq	r3, #2
 800b68e:	4413      	add	r3, r2
 800b690:	f04f 0900 	mov.w	r9, #0
 800b694:	9310      	str	r3, [sp, #64]	@ 0x40
 800b696:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 800b69a:	464c      	mov	r4, r9
 800b69c:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 800b6a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b6a2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	f280 808b 	bge.w	800b7c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 800b6b0:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 800b6b4:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800b6b8:	429c      	cmp	r4, r3
 800b6ba:	d006      	beq.n	800b6ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 800b6bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b6be:	f242 020b 	movw	r2, #8203	@ 0x200b
 800b6c2:	4294      	cmp	r4, r2
 800b6c4:	bf18      	it	ne
 800b6c6:	4623      	movne	r3, r4
 800b6c8:	930c      	str	r3, [sp, #48]	@ 0x30
 800b6ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b6cc:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 800b6ce:	682a      	ldr	r2, [r5, #0]
 800b6d0:	428b      	cmp	r3, r1
 800b6d2:	db40      	blt.n	800b756 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 800b6d4:	6813      	ldr	r3, [r2, #0]
 800b6d6:	4610      	mov	r0, r2
 800b6d8:	695b      	ldr	r3, [r3, #20]
 800b6da:	4798      	blx	r3
 800b6dc:	4604      	mov	r4, r0
 800b6de:	6828      	ldr	r0, [r5, #0]
 800b6e0:	6803      	ldr	r3, [r0, #0]
 800b6e2:	aa1d      	add	r2, sp, #116	@ 0x74
 800b6e4:	689f      	ldr	r7, [r3, #8]
 800b6e6:	4621      	mov	r1, r4
 800b6e8:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 800b6ec:	47b8      	blx	r7
 800b6ee:	901c      	str	r0, [sp, #112]	@ 0x70
 800b6f0:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800b6f4:	429c      	cmp	r4, r3
 800b6f6:	f000 80ea 	beq.w	800b8ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800b6fa:	f242 030b 	movw	r3, #8203	@ 0x200b
 800b6fe:	429c      	cmp	r4, r3
 800b700:	f000 80e5 	beq.w	800b8ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800b704:	2c00      	cmp	r4, #0
 800b706:	f000 810c 	beq.w	800b922 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 800b70a:	2c0a      	cmp	r4, #10
 800b70c:	d05e      	beq.n	800b7cc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800b70e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b710:	b36a      	cbz	r2, 800b76e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 800b712:	8894      	ldrh	r4, [r2, #4]
 800b714:	f1bb 0f00 	cmp.w	fp, #0
 800b718:	d03a      	beq.n	800b790 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 800b71a:	f892 900d 	ldrb.w	r9, [r2, #13]
 800b71e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800b722:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 800b726:	f892 900a 	ldrb.w	r9, [r2, #10]
 800b72a:	f1bb 0f01 	cmp.w	fp, #1
 800b72e:	ea49 0903 	orr.w	r9, r9, r3
 800b732:	d133      	bne.n	800b79c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 800b734:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b736:	eba6 0609 	sub.w	r6, r6, r9
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d14d      	bne.n	800b7da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800b73e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b740:	eb09 0306 	add.w	r3, r9, r6
 800b744:	4413      	add	r3, r2
 800b746:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800b748:	f9b2 2000 	ldrsh.w	r2, [r2]
 800b74c:	4293      	cmp	r3, r2
 800b74e:	da4e      	bge.n	800b7ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 800b750:	e036      	b.n	800b7c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800b752:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800b754:	e79c      	b.n	800b690 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 800b756:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 800b75a:	9301      	str	r3, [sp, #4]
 800b75c:	ab1d      	add	r3, sp, #116	@ 0x74
 800b75e:	9300      	str	r3, [sp, #0]
 800b760:	4659      	mov	r1, fp
 800b762:	ab1c      	add	r3, sp, #112	@ 0x70
 800b764:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800b766:	f003 ff84 	bl	800f672 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 800b76a:	4604      	mov	r4, r0
 800b76c:	e7c0      	b.n	800b6f0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 800b76e:	6828      	ldr	r0, [r5, #0]
 800b770:	6803      	ldr	r3, [r0, #0]
 800b772:	691b      	ldr	r3, [r3, #16]
 800b774:	4798      	blx	r3
 800b776:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800b77a:	4298      	cmp	r0, r3
 800b77c:	f000 80a7 	beq.w	800b8ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800b780:	f242 030b 	movw	r3, #8203	@ 0x200b
 800b784:	4298      	cmp	r0, r3
 800b786:	f000 80a2 	beq.w	800b8ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800b78a:	f1bb 0f00 	cmp.w	fp, #0
 800b78e:	d100      	bne.n	800b792 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 800b790:	444e      	add	r6, r9
 800b792:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b794:	2a00      	cmp	r2, #0
 800b796:	d1c0      	bne.n	800b71a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 800b798:	4691      	mov	r9, r2
 800b79a:	e098      	b.n	800b8ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800b79c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	f000 80c1 	beq.w	800b926 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e6>
 800b7a4:	f1bb 0f00 	cmp.w	fp, #0
 800b7a8:	d117      	bne.n	800b7da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800b7aa:	6828      	ldr	r0, [r5, #0]
 800b7ac:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b7ae:	6803      	ldr	r3, [r0, #0]
 800b7b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7b2:	4798      	blx	r3
 800b7b4:	4406      	add	r6, r0
 800b7b6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b7b8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b7ba:	1af3      	subs	r3, r6, r3
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	dd16      	ble.n	800b7ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 800b7c0:	2c00      	cmp	r4, #0
 800b7c2:	f000 80ae 	beq.w	800b922 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 800b7c6:	2c0a      	cmp	r4, #10
 800b7c8:	f040 809c 	bne.w	800b904 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c4>
 800b7cc:	240a      	movs	r4, #10
 800b7ce:	fab4 f084 	clz	r0, r4
 800b7d2:	0940      	lsrs	r0, r0, #5
 800b7d4:	b01f      	add	sp, #124	@ 0x7c
 800b7d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7da:	6828      	ldr	r0, [r5, #0]
 800b7dc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b7de:	6803      	ldr	r3, [r0, #0]
 800b7e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7e2:	4798      	blx	r3
 800b7e4:	f1bb 0f01 	cmp.w	fp, #1
 800b7e8:	eba6 0600 	sub.w	r6, r6, r0
 800b7ec:	d0a7      	beq.n	800b73e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 800b7ee:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800b7f0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800b7f2:	f990 1009 	ldrsb.w	r1, [r0, #9]
 800b7f6:	f9b3 8000 	ldrsh.w	r8, [r3]
 800b7fa:	7b43      	ldrb	r3, [r0, #13]
 800b7fc:	015b      	lsls	r3, r3, #5
 800b7fe:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800b802:	7983      	ldrb	r3, [r0, #6]
 800b804:	4431      	add	r1, r6
 800b806:	4313      	orrs	r3, r2
 800b808:	440b      	add	r3, r1
 800b80a:	4543      	cmp	r3, r8
 800b80c:	db5f      	blt.n	800b8ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800b80e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b810:	4299      	cmp	r1, r3
 800b812:	da5c      	bge.n	800b8ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800b814:	6828      	ldr	r0, [r5, #0]
 800b816:	6803      	ldr	r3, [r0, #0]
 800b818:	45b0      	cmp	r8, r6
 800b81a:	bfc8      	it	gt
 800b81c:	eba8 0806 	subgt.w	r8, r8, r6
 800b820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b822:	bfcc      	ite	gt
 800b824:	fa1f f888 	uxthgt.w	r8, r8
 800b828:	f04f 0800 	movle.w	r8, #0
 800b82c:	4798      	blx	r3
 800b82e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b830:	7b53      	ldrb	r3, [r2, #13]
 800b832:	00d9      	lsls	r1, r3, #3
 800b834:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 800b838:	7a11      	ldrb	r1, [r2, #8]
 800b83a:	4339      	orrs	r1, r7
 800b83c:	065f      	lsls	r7, r3, #25
 800b83e:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800b840:	bf44      	itt	mi
 800b842:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 800b846:	b209      	sxthmi	r1, r1
 800b848:	19c7      	adds	r7, r0, r7
 800b84a:	1a7f      	subs	r7, r7, r1
 800b84c:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 800b84e:	b2bf      	uxth	r7, r7
 800b850:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800b854:	fa0f fa87 	sxth.w	sl, r7
 800b858:	4551      	cmp	r1, sl
 800b85a:	dd3c      	ble.n	800b8d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 800b85c:	011b      	lsls	r3, r3, #4
 800b85e:	79d0      	ldrb	r0, [r2, #7]
 800b860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b864:	4303      	orrs	r3, r0
 800b866:	449a      	add	sl, r3
 800b868:	4551      	cmp	r1, sl
 800b86a:	dc30      	bgt.n	800b8ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800b86c:	1bcf      	subs	r7, r1, r7
 800b86e:	b23f      	sxth	r7, r7
 800b870:	468a      	mov	sl, r1
 800b872:	9219      	str	r2, [sp, #100]	@ 0x64
 800b874:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b876:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b878:	6828      	ldr	r0, [r5, #0]
 800b87a:	2a00      	cmp	r2, #0
 800b87c:	d12d      	bne.n	800b8da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 800b87e:	9318      	str	r3, [sp, #96]	@ 0x60
 800b880:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b882:	6819      	ldr	r1, [r3, #0]
 800b884:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 800b886:	6801      	ldr	r1, [r0, #0]
 800b888:	9314      	str	r3, [sp, #80]	@ 0x50
 800b88a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b88c:	4788      	blx	r1
 800b88e:	79a9      	ldrb	r1, [r5, #6]
 800b890:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b892:	7ba9      	ldrb	r1, [r5, #14]
 800b894:	910a      	str	r1, [sp, #40]	@ 0x28
 800b896:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 800b89a:	9109      	str	r1, [sp, #36]	@ 0x24
 800b89c:	68a9      	ldr	r1, [r5, #8]
 800b89e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800b8a0:	9306      	str	r3, [sp, #24]
 800b8a2:	b2bf      	uxth	r7, r7
 800b8a4:	e9cd 8702 	strd	r8, r7, [sp, #8]
 800b8a8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800b8aa:	9304      	str	r3, [sp, #16]
 800b8ac:	44b0      	add	r8, r6
 800b8ae:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800b8b2:	fa0f f388 	sxth.w	r3, r8
 800b8b6:	9300      	str	r3, [sp, #0]
 800b8b8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b8ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8bc:	9205      	str	r2, [sp, #20]
 800b8be:	f8cd a004 	str.w	sl, [sp, #4]
 800b8c2:	681a      	ldr	r2, [r3, #0]
 800b8c4:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800b8ca:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 800b8cc:	47b8      	blx	r7
 800b8ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b8d0:	3301      	adds	r3, #1
 800b8d2:	930d      	str	r3, [sp, #52]	@ 0x34
 800b8d4:	e6e4      	b.n	800b6a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 800b8d6:	2700      	movs	r7, #0
 800b8d8:	e7cb      	b.n	800b872 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 800b8da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b8dc:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800b8e0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b8e2:	f8dc 1000 	ldr.w	r1, [ip]
 800b8e6:	e9cd 6204 	strd	r6, r2, [sp, #16]
 800b8ea:	79aa      	ldrb	r2, [r5, #6]
 800b8ec:	9203      	str	r2, [sp, #12]
 800b8ee:	7baa      	ldrb	r2, [r5, #14]
 800b8f0:	9202      	str	r2, [sp, #8]
 800b8f2:	68aa      	ldr	r2, [r5, #8]
 800b8f4:	e9cd 0200 	strd	r0, r2, [sp]
 800b8f8:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800b8fa:	688f      	ldr	r7, [r1, #8]
 800b8fc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b8fe:	4660      	mov	r0, ip
 800b900:	47b8      	blx	r7
 800b902:	e7e4      	b.n	800b8ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800b904:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800b906:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800b908:	3501      	adds	r5, #1
 800b90a:	429d      	cmp	r5, r3
 800b90c:	f6bf af5f 	bge.w	800b7ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800b910:	4659      	mov	r1, fp
 800b912:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800b914:	f7f7 fe66 	bl	80035e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800b918:	4604      	mov	r4, r0
 800b91a:	b110      	cbz	r0, 800b922 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 800b91c:	280a      	cmp	r0, #10
 800b91e:	d1f2      	bne.n	800b906 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 800b920:	e754      	b.n	800b7cc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800b922:	2400      	movs	r4, #0
 800b924:	e753      	b.n	800b7ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800b926:	f1bb 0f00 	cmp.w	fp, #0
 800b92a:	f43f af44 	beq.w	800b7b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 800b92e:	e75e      	b.n	800b7ee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

0800b930 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>:
 800b930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b934:	b089      	sub	sp, #36	@ 0x24
 800b936:	4699      	mov	r9, r3
 800b938:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b93a:	f8bd 4050 	ldrh.w	r4, [sp, #80]	@ 0x50
 800b93e:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b940:	4683      	mov	fp, r0
 800b942:	460d      	mov	r5, r1
 800b944:	4690      	mov	r8, r2
 800b946:	bb1b      	cbnz	r3, 800b990 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0x60>
 800b948:	6813      	ldr	r3, [r2, #0]
 800b94a:	4610      	mov	r0, r2
 800b94c:	695b      	ldr	r3, [r3, #20]
 800b94e:	4798      	blx	r3
 800b950:	4682      	mov	sl, r0
 800b952:	b1e8      	cbz	r0, 800b990 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0x60>
 800b954:	f8d8 3000 	ldr.w	r3, [r8]
 800b958:	4601      	mov	r1, r0
 800b95a:	68db      	ldr	r3, [r3, #12]
 800b95c:	4640      	mov	r0, r8
 800b95e:	4798      	blx	r3
 800b960:	4602      	mov	r2, r0
 800b962:	2800      	cmp	r0, #0
 800b964:	d03f      	beq.n	800b9e6 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0xb6>
 800b966:	7b47      	ldrb	r7, [r0, #13]
 800b968:	007f      	lsls	r7, r7, #1
 800b96a:	f407 7380 	and.w	r3, r7, #256	@ 0x100
 800b96e:	7a87      	ldrb	r7, [r0, #10]
 800b970:	431f      	orrs	r7, r3
 800b972:	6933      	ldr	r3, [r6, #16]
 800b974:	7c1b      	ldrb	r3, [r3, #16]
 800b976:	443c      	add	r4, r7
 800b978:	2b06      	cmp	r3, #6
 800b97a:	b2a4      	uxth	r4, r4
 800b97c:	d108      	bne.n	800b990 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0x60>
 800b97e:	f8d8 3000 	ldr.w	r3, [r8]
 800b982:	4651      	mov	r1, sl
 800b984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b986:	4640      	mov	r0, r8
 800b988:	4798      	blx	r3
 800b98a:	4438      	add	r0, r7
 800b98c:	4404      	add	r4, r0
 800b98e:	b2a4      	uxth	r4, r4
 800b990:	6933      	ldr	r3, [r6, #16]
 800b992:	795a      	ldrb	r2, [r3, #5]
 800b994:	f9b5 3000 	ldrsh.w	r3, [r5]
 800b998:	bb42      	cbnz	r2, 800b9ec <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0xbc>
 800b99a:	f1b9 0f01 	cmp.w	r9, #1
 800b99e:	d101      	bne.n	800b9a4 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0x74>
 800b9a0:	4423      	add	r3, r4
 800b9a2:	802b      	strh	r3, [r5, #0]
 800b9a4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b9a6:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
 800b9aa:	fab2 f282 	clz	r2, r2
 800b9ae:	0952      	lsrs	r2, r2, #5
 800b9b0:	9206      	str	r2, [sp, #24]
 800b9b2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b9b4:	9205      	str	r2, [sp, #20]
 800b9b6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b9b8:	e9cd 9203 	strd	r9, r2, [sp, #12]
 800b9bc:	6932      	ldr	r2, [r6, #16]
 800b9be:	9202      	str	r2, [sp, #8]
 800b9c0:	68f2      	ldr	r2, [r6, #12]
 800b9c2:	9201      	str	r2, [sp, #4]
 800b9c4:	f9b5 2000 	ldrsh.w	r2, [r5]
 800b9c8:	9200      	str	r2, [sp, #0]
 800b9ca:	e9d6 1200 	ldrd	r1, r2, [r6]
 800b9ce:	4658      	mov	r0, fp
 800b9d0:	f7ff fe36 	bl	800b640 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 800b9d4:	6933      	ldr	r3, [r6, #16]
 800b9d6:	795b      	ldrb	r3, [r3, #5]
 800b9d8:	b97b      	cbnz	r3, 800b9fa <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0xca>
 800b9da:	f1b9 0f00 	cmp.w	r9, #0
 800b9de:	d102      	bne.n	800b9e6 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0xb6>
 800b9e0:	8828      	ldrh	r0, [r5, #0]
 800b9e2:	4404      	add	r4, r0
 800b9e4:	802c      	strh	r4, [r5, #0]
 800b9e6:	b009      	add	sp, #36	@ 0x24
 800b9e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ec:	2a01      	cmp	r2, #1
 800b9ee:	d1d9      	bne.n	800b9a4 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0x74>
 800b9f0:	f1b9 0f00 	cmp.w	r9, #0
 800b9f4:	d1d6      	bne.n	800b9a4 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0x74>
 800b9f6:	1b1b      	subs	r3, r3, r4
 800b9f8:	e7d3      	b.n	800b9a2 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0x72>
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d1f3      	bne.n	800b9e6 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0xb6>
 800b9fe:	f1b9 0f01 	cmp.w	r9, #1
 800ba02:	d1f0      	bne.n	800b9e6 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0xb6>
 800ba04:	8828      	ldrh	r0, [r5, #0]
 800ba06:	1b04      	subs	r4, r0, r4
 800ba08:	e7ec      	b.n	800b9e4 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0xb4>
	...

0800ba0c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE>:
 800ba0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba10:	b0a9      	sub	sp, #164	@ 0xa4
 800ba12:	4683      	mov	fp, r0
 800ba14:	9105      	str	r1, [sp, #20]
 800ba16:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba18:	4615      	mov	r5, r2
 800ba1a:	f89d 30d0 	ldrb.w	r3, [sp, #208]	@ 0xd0
 800ba1e:	9932      	ldr	r1, [sp, #200]	@ 0xc8
 800ba20:	930d      	str	r3, [sp, #52]	@ 0x34
 800ba22:	2264      	movs	r2, #100	@ 0x64
 800ba24:	a80f      	add	r0, sp, #60	@ 0x3c
 800ba26:	f007 ff8c 	bl	8013942 <memcpy>
 800ba2a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	930e      	str	r3, [sp, #56]	@ 0x38
 800ba30:	2a00      	cmp	r2, #0
 800ba32:	f040 815c 	bne.w	800bcee <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2e2>
 800ba36:	9207      	str	r2, [sp, #28]
 800ba38:	9209      	str	r2, [sp, #36]	@ 0x24
 800ba3a:	4690      	mov	r8, r2
 800ba3c:	4616      	mov	r6, r2
 800ba3e:	9208      	str	r2, [sp, #32]
 800ba40:	4614      	mov	r4, r2
 800ba42:	920a      	str	r2, [sp, #40]	@ 0x28
 800ba44:	4691      	mov	r9, r2
 800ba46:	9b07      	ldr	r3, [sp, #28]
 800ba48:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	f280 8101 	bge.w	800bc52 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x246>
 800ba50:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800ba54:	4599      	cmp	r9, r3
 800ba56:	d006      	beq.n	800ba66 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5a>
 800ba58:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ba5a:	f242 030b 	movw	r3, #8203	@ 0x200b
 800ba5e:	4599      	cmp	r9, r3
 800ba60:	bf18      	it	ne
 800ba62:	464a      	movne	r2, r9
 800ba64:	920a      	str	r2, [sp, #40]	@ 0x28
 800ba66:	462a      	mov	r2, r5
 800ba68:	ab0e      	add	r3, sp, #56	@ 0x38
 800ba6a:	2100      	movs	r1, #0
 800ba6c:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 800ba6e:	f003 fdb7 	bl	800f5e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800ba72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba74:	4681      	mov	r9, r0
 800ba76:	2a00      	cmp	r2, #0
 800ba78:	d06c      	beq.n	800bb54 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x148>
 800ba7a:	f892 a00d 	ldrb.w	sl, [r2, #13]
 800ba7e:	682b      	ldr	r3, [r5, #0]
 800ba80:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ba82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba84:	f8b2 9004 	ldrh.w	r9, [r2, #4]
 800ba88:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 800ba8c:	f40a 7080 	and.w	r0, sl, #256	@ 0x100
 800ba90:	f892 a00a 	ldrb.w	sl, [r2, #10]
 800ba94:	ea4a 0a00 	orr.w	sl, sl, r0
 800ba98:	4628      	mov	r0, r5
 800ba9a:	4798      	blx	r3
 800ba9c:	4450      	add	r0, sl
 800ba9e:	b287      	uxth	r7, r0
 800baa0:	f1b9 0f00 	cmp.w	r9, #0
 800baa4:	f000 80d5 	beq.w	800bc52 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x246>
 800baa8:	f1b9 0f0a 	cmp.w	r9, #10
 800baac:	f000 80d1 	beq.w	800bc52 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x246>
 800bab0:	f1a9 0328 	sub.w	r3, r9, #40	@ 0x28
 800bab4:	b29b      	uxth	r3, r3
 800bab6:	f029 0120 	bic.w	r1, r9, #32
 800baba:	2b01      	cmp	r3, #1
 800babc:	b289      	uxth	r1, r1
 800babe:	d94b      	bls.n	800bb58 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x14c>
 800bac0:	295b      	cmp	r1, #91	@ 0x5b
 800bac2:	d049      	beq.n	800bb58 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x14c>
 800bac4:	295d      	cmp	r1, #93	@ 0x5d
 800bac6:	d047      	beq.n	800bb58 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x14c>
 800bac8:	f029 0202 	bic.w	r2, r9, #2
 800bacc:	b292      	uxth	r2, r2
 800bace:	f1a2 033c 	sub.w	r3, r2, #60	@ 0x3c
 800bad2:	425a      	negs	r2, r3
 800bad4:	415a      	adcs	r2, r3
 800bad6:	f1a9 0330 	sub.w	r3, r9, #48	@ 0x30
 800bada:	b29b      	uxth	r3, r3
 800badc:	2b09      	cmp	r3, #9
 800bade:	d93d      	bls.n	800bb5c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x150>
 800bae0:	f5a9 6acc 	sub.w	sl, r9, #1632	@ 0x660
 800bae4:	fa1f fa8a 	uxth.w	sl, sl
 800bae8:	f1ba 0f09 	cmp.w	sl, #9
 800baec:	bf8c      	ite	hi
 800baee:	2300      	movhi	r3, #0
 800baf0:	2301      	movls	r3, #1
 800baf2:	9306      	str	r3, [sp, #24]
 800baf4:	f5a9 63b2 	sub.w	r3, r9, #1424	@ 0x590
 800baf8:	b29b      	uxth	r3, r3
 800bafa:	f5b3 7fb8 	cmp.w	r3, #368	@ 0x170
 800bafe:	d305      	bcc.n	800bb0c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x100>
 800bb00:	f509 6396 	add.w	r3, r9, #1200	@ 0x4b0
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	f5b3 7f6c 	cmp.w	r3, #944	@ 0x3b0
 800bb0a:	d229      	bcs.n	800bb60 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x154>
 800bb0c:	9b06      	ldr	r3, [sp, #24]
 800bb0e:	f083 0301 	eor.w	r3, r3, #1
 800bb12:	b2db      	uxtb	r3, r3
 800bb14:	f64f 60ff 	movw	r0, #65279	@ 0xfeff
 800bb18:	4581      	cmp	r9, r0
 800bb1a:	d023      	beq.n	800bb64 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x158>
 800bb1c:	f242 000b 	movw	r0, #8203	@ 0x200b
 800bb20:	eba9 0a00 	sub.w	sl, r9, r0
 800bb24:	f1da 0000 	rsbs	r0, sl, #0
 800bb28:	eb40 000a 	adc.w	r0, r0, sl
 800bb2c:	3941      	subs	r1, #65	@ 0x41
 800bb2e:	2919      	cmp	r1, #25
 800bb30:	f240 82a2 	bls.w	800c078 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x66c>
 800bb34:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
 800bb38:	f240 828b 	bls.w	800c052 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x646>
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	f040 8288 	bne.w	800c052 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x646>
 800bb42:	2800      	cmp	r0, #0
 800bb44:	f040 8285 	bne.w	800c052 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x646>
 800bb48:	2e03      	cmp	r6, #3
 800bb4a:	d850      	bhi.n	800bbee <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1e2>
 800bb4c:	e8df f006 	tbb	[pc, r6]
 800bb50:	62392b13 	.word	0x62392b13
 800bb54:	4617      	mov	r7, r2
 800bb56:	e7a3      	b.n	800baa0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x94>
 800bb58:	2201      	movs	r2, #1
 800bb5a:	e7bc      	b.n	800bad6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0xca>
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	e7c8      	b.n	800baf2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0xe6>
 800bb60:	2300      	movs	r3, #0
 800bb62:	e7d7      	b.n	800bb14 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x108>
 800bb64:	2001      	movs	r0, #1
 800bb66:	e7e1      	b.n	800bb2c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x120>
 800bb68:	2e03      	cmp	r6, #3
 800bb6a:	d840      	bhi.n	800bbee <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1e2>
 800bb6c:	e8df f006 	tbb	[pc, r6]
 800bb70:	46290902 	.word	0x46290902
 800bb74:	b99b      	cbnz	r3, 800bb9e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x192>
 800bb76:	f04f 0a01 	mov.w	sl, #1
 800bb7a:	4656      	mov	r6, sl
 800bb7c:	f8cd a018 	str.w	sl, [sp, #24]
 800bb80:	e017      	b.n	800bbb2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1a6>
 800bb82:	b183      	cbz	r3, 800bba6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x19a>
 800bb84:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bb86:	f8cd 8004 	str.w	r8, [sp, #4]
 800bb8a:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800bb8e:	ab0f      	add	r3, sp, #60	@ 0x3c
 800bb90:	9300      	str	r3, [sp, #0]
 800bb92:	462a      	mov	r2, r5
 800bb94:	2300      	movs	r3, #0
 800bb96:	9905      	ldr	r1, [sp, #20]
 800bb98:	4658      	mov	r0, fp
 800bb9a:	f7ff fec9 	bl	800b930 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800bb9e:	463c      	mov	r4, r7
 800bba0:	f04f 0801 	mov.w	r8, #1
 800bba4:	e034      	b.n	800bc10 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x204>
 800bba6:	443c      	add	r4, r7
 800bba8:	2601      	movs	r6, #1
 800bbaa:	f108 0a01 	add.w	sl, r8, #1
 800bbae:	b2a7      	uxth	r7, r4
 800bbb0:	9606      	str	r6, [sp, #24]
 800bbb2:	9b07      	ldr	r3, [sp, #28]
 800bbb4:	3301      	adds	r3, #1
 800bbb6:	9307      	str	r3, [sp, #28]
 800bbb8:	9b06      	ldr	r3, [sp, #24]
 800bbba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bbbc:	46d0      	mov	r8, sl
 800bbbe:	463c      	mov	r4, r7
 800bbc0:	e741      	b.n	800ba46 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x3a>
 800bbc2:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bbc4:	f8cd 8004 	str.w	r8, [sp, #4]
 800bbc8:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800bbcc:	ab0f      	add	r3, sp, #60	@ 0x3c
 800bbce:	9300      	str	r3, [sp, #0]
 800bbd0:	462a      	mov	r2, r5
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	9905      	ldr	r1, [sp, #20]
 800bbd6:	4658      	mov	r0, fp
 800bbd8:	f7ff feaa 	bl	800b930 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800bbdc:	e7cb      	b.n	800bb76 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x16a>
 800bbde:	b913      	cbnz	r3, 800bbe6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1da>
 800bbe0:	2800      	cmp	r0, #0
 800bbe2:	f000 8257 	beq.w	800c094 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x688>
 800bbe6:	443c      	add	r4, r7
 800bbe8:	f108 0801 	add.w	r8, r8, #1
 800bbec:	b2a4      	uxth	r4, r4
 800bbee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bbf0:	9306      	str	r3, [sp, #24]
 800bbf2:	46c2      	mov	sl, r8
 800bbf4:	4627      	mov	r7, r4
 800bbf6:	e7dc      	b.n	800bbb2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1a6>
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	9206      	str	r2, [sp, #24]
 800bbfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bbfe:	f102 0a01 	add.w	sl, r2, #1
 800bc02:	b14b      	cbz	r3, 800bc18 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x20c>
 800bc04:	9b08      	ldr	r3, [sp, #32]
 800bc06:	441c      	add	r4, r3
 800bc08:	fa17 f484 	uxtah	r4, r7, r4
 800bc0c:	44d0      	add	r8, sl
 800bc0e:	b2a4      	uxth	r4, r4
 800bc10:	2602      	movs	r6, #2
 800bc12:	e7ec      	b.n	800bbee <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1e2>
 800bc14:	2201      	movs	r2, #1
 800bc16:	e7f0      	b.n	800bbfa <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1ee>
 800bc18:	9b06      	ldr	r3, [sp, #24]
 800bc1a:	b19b      	cbz	r3, 800bc44 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x238>
 800bc1c:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bc1e:	f8cd 8004 	str.w	r8, [sp, #4]
 800bc22:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800bc26:	ab0f      	add	r3, sp, #60	@ 0x3c
 800bc28:	9300      	str	r3, [sp, #0]
 800bc2a:	462a      	mov	r2, r5
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	9905      	ldr	r1, [sp, #20]
 800bc30:	4658      	mov	r0, fp
 800bc32:	f7ff fe7d 	bl	800b930 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800bc36:	9b08      	ldr	r3, [sp, #32]
 800bc38:	441c      	add	r4, r3
 800bc3a:	fa17 f484 	uxtah	r4, r7, r4
 800bc3e:	b2a7      	uxth	r7, r4
 800bc40:	2601      	movs	r6, #1
 800bc42:	e7b6      	b.n	800bbb2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1a6>
 800bc44:	9b08      	ldr	r3, [sp, #32]
 800bc46:	443b      	add	r3, r7
 800bc48:	b29b      	uxth	r3, r3
 800bc4a:	e9cd 3a08 	strd	r3, sl, [sp, #32]
 800bc4e:	2603      	movs	r6, #3
 800bc50:	e7cd      	b.n	800bbee <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1e2>
 800bc52:	2e01      	cmp	r6, #1
 800bc54:	d107      	bne.n	800bc66 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x25a>
 800bc56:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bc58:	f8cd 8004 	str.w	r8, [sp, #4]
 800bc5c:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800bc60:	ab0f      	add	r3, sp, #60	@ 0x3c
 800bc62:	9300      	str	r3, [sp, #0]
 800bc64:	e021      	b.n	800bcaa <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x29e>
 800bc66:	2e02      	cmp	r6, #2
 800bc68:	d108      	bne.n	800bc7c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x270>
 800bc6a:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bc6c:	f8cd 8004 	str.w	r8, [sp, #4]
 800bc70:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800bc74:	ab0f      	add	r3, sp, #60	@ 0x3c
 800bc76:	9300      	str	r3, [sp, #0]
 800bc78:	2301      	movs	r3, #1
 800bc7a:	e017      	b.n	800bcac <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2a0>
 800bc7c:	2e03      	cmp	r6, #3
 800bc7e:	d11a      	bne.n	800bcb6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2aa>
 800bc80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc82:	ae0f      	add	r6, sp, #60	@ 0x3c
 800bc84:	b343      	cbz	r3, 800bcd8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2cc>
 800bc86:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bc88:	9905      	ldr	r1, [sp, #20]
 800bc8a:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800bc8e:	e9cd 6800 	strd	r6, r8, [sp]
 800bc92:	2301      	movs	r3, #1
 800bc94:	462a      	mov	r2, r5
 800bc96:	4658      	mov	r0, fp
 800bc98:	f7ff fe4a 	bl	800b930 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800bc9c:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bc9e:	9303      	str	r3, [sp, #12]
 800bca0:	9b08      	ldr	r3, [sp, #32]
 800bca2:	9302      	str	r3, [sp, #8]
 800bca4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bca6:	e9cd 6300 	strd	r6, r3, [sp]
 800bcaa:	2300      	movs	r3, #0
 800bcac:	462a      	mov	r2, r5
 800bcae:	9905      	ldr	r1, [sp, #20]
 800bcb0:	4658      	mov	r0, fp
 800bcb2:	f7ff fe3d 	bl	800b930 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800bcb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bcb8:	b15b      	cbz	r3, 800bcd2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2c6>
 800bcba:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bcbc:	9303      	str	r3, [sp, #12]
 800bcbe:	aa0f      	add	r2, sp, #60	@ 0x3c
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	9200      	str	r2, [sp, #0]
 800bcc4:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800bcc8:	462a      	mov	r2, r5
 800bcca:	9905      	ldr	r1, [sp, #20]
 800bccc:	4658      	mov	r0, fp
 800bcce:	f7ff fe2f 	bl	800b930 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800bcd2:	b029      	add	sp, #164	@ 0xa4
 800bcd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcd8:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bcda:	9303      	str	r3, [sp, #12]
 800bcdc:	9b08      	ldr	r3, [sp, #32]
 800bcde:	441c      	add	r4, r3
 800bce0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bce2:	b2a4      	uxth	r4, r4
 800bce4:	9402      	str	r4, [sp, #8]
 800bce6:	4443      	add	r3, r8
 800bce8:	e9cd 6300 	strd	r6, r3, [sp]
 800bcec:	e7c4      	b.n	800bc78 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x26c>
 800bcee:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800bcf2:	9307      	str	r3, [sp, #28]
 800bcf4:	461f      	mov	r7, r3
 800bcf6:	4698      	mov	r8, r3
 800bcf8:	9306      	str	r3, [sp, #24]
 800bcfa:	461c      	mov	r4, r3
 800bcfc:	930a      	str	r3, [sp, #40]	@ 0x28
 800bcfe:	4699      	mov	r9, r3
 800bd00:	9b08      	ldr	r3, [sp, #32]
 800bd02:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 800bd04:	4293      	cmp	r3, r2
 800bd06:	f280 816e 	bge.w	800bfe6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5da>
 800bd0a:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800bd0e:	4599      	cmp	r9, r3
 800bd10:	d006      	beq.n	800bd20 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x314>
 800bd12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bd14:	f242 020b 	movw	r2, #8203	@ 0x200b
 800bd18:	4591      	cmp	r9, r2
 800bd1a:	bf18      	it	ne
 800bd1c:	464b      	movne	r3, r9
 800bd1e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd20:	462a      	mov	r2, r5
 800bd22:	ab0e      	add	r3, sp, #56	@ 0x38
 800bd24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bd26:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 800bd28:	f003 fc5a 	bl	800f5e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800bd2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd2e:	4681      	mov	r9, r0
 800bd30:	2a00      	cmp	r2, #0
 800bd32:	d073      	beq.n	800be1c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x410>
 800bd34:	f892 a00d 	ldrb.w	sl, [r2, #13]
 800bd38:	682b      	ldr	r3, [r5, #0]
 800bd3a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bd3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd3e:	f8b2 9004 	ldrh.w	r9, [r2, #4]
 800bd42:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 800bd46:	f40a 7080 	and.w	r0, sl, #256	@ 0x100
 800bd4a:	f892 a00a 	ldrb.w	sl, [r2, #10]
 800bd4e:	ea4a 0a00 	orr.w	sl, sl, r0
 800bd52:	4628      	mov	r0, r5
 800bd54:	4798      	blx	r3
 800bd56:	4450      	add	r0, sl
 800bd58:	b286      	uxth	r6, r0
 800bd5a:	f1b9 0f00 	cmp.w	r9, #0
 800bd5e:	f000 8142 	beq.w	800bfe6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5da>
 800bd62:	f1b9 0f0a 	cmp.w	r9, #10
 800bd66:	f000 813e 	beq.w	800bfe6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5da>
 800bd6a:	f1a9 0328 	sub.w	r3, r9, #40	@ 0x28
 800bd6e:	b29b      	uxth	r3, r3
 800bd70:	f029 0220 	bic.w	r2, r9, #32
 800bd74:	2b01      	cmp	r3, #1
 800bd76:	b292      	uxth	r2, r2
 800bd78:	d952      	bls.n	800be20 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x414>
 800bd7a:	2a5b      	cmp	r2, #91	@ 0x5b
 800bd7c:	d050      	beq.n	800be20 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x414>
 800bd7e:	2a5d      	cmp	r2, #93	@ 0x5d
 800bd80:	d04e      	beq.n	800be20 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x414>
 800bd82:	f029 0a02 	bic.w	sl, r9, #2
 800bd86:	fa1f fa8a 	uxth.w	sl, sl
 800bd8a:	f1aa 0c3c 	sub.w	ip, sl, #60	@ 0x3c
 800bd8e:	f1dc 0a00 	rsbs	sl, ip, #0
 800bd92:	eb4a 0a0c 	adc.w	sl, sl, ip
 800bd96:	f1a9 0330 	sub.w	r3, r9, #48	@ 0x30
 800bd9a:	b29b      	uxth	r3, r3
 800bd9c:	2b09      	cmp	r3, #9
 800bd9e:	d942      	bls.n	800be26 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x41a>
 800bda0:	f5a9 63cc 	sub.w	r3, r9, #1632	@ 0x660
 800bda4:	b29b      	uxth	r3, r3
 800bda6:	2b09      	cmp	r3, #9
 800bda8:	bf8c      	ite	hi
 800bdaa:	2300      	movhi	r3, #0
 800bdac:	2301      	movls	r3, #1
 800bdae:	f5a9 61b2 	sub.w	r1, r9, #1424	@ 0x590
 800bdb2:	b289      	uxth	r1, r1
 800bdb4:	f5b1 7fb8 	cmp.w	r1, #368	@ 0x170
 800bdb8:	d308      	bcc.n	800bdcc <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x3c0>
 800bdba:	f509 6196 	add.w	r1, r9, #1200	@ 0x4b0
 800bdbe:	b289      	uxth	r1, r1
 800bdc0:	f5b1 7f6c 	cmp.w	r1, #944	@ 0x3b0
 800bdc4:	d302      	bcc.n	800bdcc <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x3c0>
 800bdc6:	f1ba 0f00 	cmp.w	sl, #0
 800bdca:	d001      	beq.n	800bdd0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x3c4>
 800bdcc:	f083 0a01 	eor.w	sl, r3, #1
 800bdd0:	f64f 61ff 	movw	r1, #65279	@ 0xfeff
 800bdd4:	4589      	cmp	r9, r1
 800bdd6:	d028      	beq.n	800be2a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x41e>
 800bdd8:	f242 010b 	movw	r1, #8203	@ 0x200b
 800bddc:	eba9 0001 	sub.w	r0, r9, r1
 800bde0:	4241      	negs	r1, r0
 800bde2:	4141      	adcs	r1, r0
 800bde4:	3a41      	subs	r2, #65	@ 0x41
 800bde6:	2a19      	cmp	r2, #25
 800bde8:	d90a      	bls.n	800be00 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x3f4>
 800bdea:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
 800bdee:	f240 8155 	bls.w	800c09c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x690>
 800bdf2:	f1ba 0f00 	cmp.w	sl, #0
 800bdf6:	f040 8151 	bne.w	800c09c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x690>
 800bdfa:	2900      	cmp	r1, #0
 800bdfc:	f040 814e 	bne.w	800c09c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x690>
 800be00:	f1b8 0f07 	cmp.w	r8, #7
 800be04:	f200 80e5 	bhi.w	800bfd2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5c6>
 800be08:	e8df f018 	tbh	[pc, r8, lsl #1]
 800be0c:	00e3001d 	.word	0x00e3001d
 800be10:	00e30030 	.word	0x00e30030
 800be14:	00830055 	.word	0x00830055
 800be18:	00c20068 	.word	0x00c20068
 800be1c:	4616      	mov	r6, r2
 800be1e:	e79c      	b.n	800bd5a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x34e>
 800be20:	f04f 0a01 	mov.w	sl, #1
 800be24:	e7b7      	b.n	800bd96 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x38a>
 800be26:	2301      	movs	r3, #1
 800be28:	e7c1      	b.n	800bdae <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x3a2>
 800be2a:	2101      	movs	r1, #1
 800be2c:	e7da      	b.n	800bde4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x3d8>
 800be2e:	2200      	movs	r2, #0
 800be30:	b9cb      	cbnz	r3, 800be66 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x45a>
 800be32:	bb52      	cbnz	r2, 800be8a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x47e>
 800be34:	2701      	movs	r7, #1
 800be36:	f04f 0802 	mov.w	r8, #2
 800be3a:	9709      	str	r7, [sp, #36]	@ 0x24
 800be3c:	9b08      	ldr	r3, [sp, #32]
 800be3e:	3301      	adds	r3, #1
 800be40:	9308      	str	r3, [sp, #32]
 800be42:	4634      	mov	r4, r6
 800be44:	e75c      	b.n	800bd00 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2f4>
 800be46:	2201      	movs	r2, #1
 800be48:	e7f2      	b.n	800be30 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x424>
 800be4a:	2200      	movs	r2, #0
 800be4c:	b183      	cbz	r3, 800be70 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x464>
 800be4e:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800be50:	9701      	str	r7, [sp, #4]
 800be52:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800be56:	ab0f      	add	r3, sp, #60	@ 0x3c
 800be58:	9300      	str	r3, [sp, #0]
 800be5a:	462a      	mov	r2, r5
 800be5c:	2301      	movs	r3, #1
 800be5e:	9905      	ldr	r1, [sp, #20]
 800be60:	4658      	mov	r0, fp
 800be62:	f7ff fd65 	bl	800b930 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800be66:	4634      	mov	r4, r6
 800be68:	2701      	movs	r7, #1
 800be6a:	e020      	b.n	800beae <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4a2>
 800be6c:	2201      	movs	r2, #1
 800be6e:	e7ed      	b.n	800be4c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x440>
 800be70:	b182      	cbz	r2, 800be94 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x488>
 800be72:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800be74:	9701      	str	r7, [sp, #4]
 800be76:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800be7a:	ab0f      	add	r3, sp, #60	@ 0x3c
 800be7c:	9300      	str	r3, [sp, #0]
 800be7e:	2301      	movs	r3, #1
 800be80:	462a      	mov	r2, r5
 800be82:	9905      	ldr	r1, [sp, #20]
 800be84:	4658      	mov	r0, fp
 800be86:	f7ff fd53 	bl	800b930 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800be8a:	4634      	mov	r4, r6
 800be8c:	2701      	movs	r7, #1
 800be8e:	f04f 0806 	mov.w	r8, #6
 800be92:	e00e      	b.n	800beb2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4a6>
 800be94:	3701      	adds	r7, #1
 800be96:	4434      	add	r4, r6
 800be98:	2301      	movs	r3, #1
 800be9a:	b2a6      	uxth	r6, r4
 800be9c:	f04f 0802 	mov.w	r8, #2
 800bea0:	9309      	str	r3, [sp, #36]	@ 0x24
 800bea2:	e7cb      	b.n	800be3c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x430>
 800bea4:	2200      	movs	r2, #0
 800bea6:	b143      	cbz	r3, 800beba <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4ae>
 800bea8:	3701      	adds	r7, #1
 800beaa:	4434      	add	r4, r6
 800beac:	b2a4      	uxth	r4, r4
 800beae:	f04f 0804 	mov.w	r8, #4
 800beb2:	4626      	mov	r6, r4
 800beb4:	e7c2      	b.n	800be3c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x430>
 800beb6:	2201      	movs	r2, #1
 800beb8:	e7f5      	b.n	800bea6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x49a>
 800beba:	f029 0302 	bic.w	r3, r9, #2
 800bebe:	b29b      	uxth	r3, r3
 800bec0:	2b2c      	cmp	r3, #44	@ 0x2c
 800bec2:	f000 8101 	beq.w	800c0c8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6bc>
 800bec6:	f1b9 0f3a 	cmp.w	r9, #58	@ 0x3a
 800beca:	f000 80fd 	beq.w	800c0c8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6bc>
 800bece:	f2a9 636b 	subw	r3, r9, #1643	@ 0x66b
 800bed2:	b29b      	uxth	r3, r3
 800bed4:	2b01      	cmp	r3, #1
 800bed6:	f240 80f7 	bls.w	800c0c8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6bc>
 800beda:	b11a      	cbz	r2, 800bee4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4d8>
 800bedc:	3701      	adds	r7, #1
 800bede:	4434      	add	r4, r6
 800bee0:	b2a4      	uxth	r4, r4
 800bee2:	e7d4      	b.n	800be8e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x482>
 800bee4:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bee6:	9701      	str	r7, [sp, #4]
 800bee8:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800beec:	ab0f      	add	r3, sp, #60	@ 0x3c
 800beee:	9300      	str	r3, [sp, #0]
 800bef0:	9905      	ldr	r1, [sp, #20]
 800bef2:	4613      	mov	r3, r2
 800bef4:	4658      	mov	r0, fp
 800bef6:	462a      	mov	r2, r5
 800bef8:	f7ff fd1a 	bl	800b930 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800befc:	e79a      	b.n	800be34 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x428>
 800befe:	2200      	movs	r2, #0
 800bf00:	b14b      	cbz	r3, 800bf16 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x50a>
 800bf02:	9b07      	ldr	r3, [sp, #28]
 800bf04:	3301      	adds	r3, #1
 800bf06:	441f      	add	r7, r3
 800bf08:	9b06      	ldr	r3, [sp, #24]
 800bf0a:	441c      	add	r4, r3
 800bf0c:	fa16 f484 	uxtah	r4, r6, r4
 800bf10:	e7cc      	b.n	800beac <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4a0>
 800bf12:	2201      	movs	r2, #1
 800bf14:	e7f4      	b.n	800bf00 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4f4>
 800bf16:	f10d 083c 	add.w	r8, sp, #60	@ 0x3c
 800bf1a:	b18a      	cbz	r2, 800bf40 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x534>
 800bf1c:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 800bf1e:	9905      	ldr	r1, [sp, #20]
 800bf20:	e9cd 4202 	strd	r4, r2, [sp, #8]
 800bf24:	e9cd 8700 	strd	r8, r7, [sp]
 800bf28:	462a      	mov	r2, r5
 800bf2a:	4658      	mov	r0, fp
 800bf2c:	f7ff fd00 	bl	800b930 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800bf30:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bf32:	9303      	str	r3, [sp, #12]
 800bf34:	9b06      	ldr	r3, [sp, #24]
 800bf36:	9302      	str	r3, [sp, #8]
 800bf38:	9b07      	ldr	r3, [sp, #28]
 800bf3a:	e9cd 8300 	strd	r8, r3, [sp]
 800bf3e:	e79e      	b.n	800be7e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x472>
 800bf40:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bf42:	9905      	ldr	r1, [sp, #20]
 800bf44:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800bf48:	e9cd 8700 	strd	r8, r7, [sp]
 800bf4c:	4613      	mov	r3, r2
 800bf4e:	4658      	mov	r0, fp
 800bf50:	462a      	mov	r2, r5
 800bf52:	f7ff fced 	bl	800b930 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800bf56:	9b07      	ldr	r3, [sp, #28]
 800bf58:	1c5f      	adds	r7, r3, #1
 800bf5a:	9b06      	ldr	r3, [sp, #24]
 800bf5c:	199c      	adds	r4, r3, r6
 800bf5e:	e79b      	b.n	800be98 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x48c>
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d1bb      	bne.n	800bedc <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4d0>
 800bf64:	f1ba 0f00 	cmp.w	sl, #0
 800bf68:	f000 80b4 	beq.w	800c0d4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6c8>
 800bf6c:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 800bf6e:	9701      	str	r7, [sp, #4]
 800bf70:	e9cd 4202 	strd	r4, r2, [sp, #8]
 800bf74:	aa0f      	add	r2, sp, #60	@ 0x3c
 800bf76:	9200      	str	r2, [sp, #0]
 800bf78:	9905      	ldr	r1, [sp, #20]
 800bf7a:	462a      	mov	r2, r5
 800bf7c:	4658      	mov	r0, fp
 800bf7e:	f7ff fcd7 	bl	800b930 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800bf82:	2701      	movs	r7, #1
 800bf84:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 800bf88:	f04f 0802 	mov.w	r8, #2
 800bf8c:	e756      	b.n	800be3c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x430>
 800bf8e:	b13b      	cbz	r3, 800bfa0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x594>
 800bf90:	9b07      	ldr	r3, [sp, #28]
 800bf92:	3301      	adds	r3, #1
 800bf94:	441f      	add	r7, r3
 800bf96:	9b06      	ldr	r3, [sp, #24]
 800bf98:	441c      	add	r4, r3
 800bf9a:	fa16 f484 	uxtah	r4, r6, r4
 800bf9e:	e79f      	b.n	800bee0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4d4>
 800bfa0:	9a07      	ldr	r2, [sp, #28]
 800bfa2:	3201      	adds	r2, #1
 800bfa4:	920c      	str	r2, [sp, #48]	@ 0x30
 800bfa6:	9a06      	ldr	r2, [sp, #24]
 800bfa8:	4416      	add	r6, r2
 800bfaa:	b2b6      	uxth	r6, r6
 800bfac:	f1ba 0f00 	cmp.w	sl, #0
 800bfb0:	f000 8096 	beq.w	800c0e0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6d4>
 800bfb4:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 800bfb6:	9701      	str	r7, [sp, #4]
 800bfb8:	e9cd 4202 	strd	r4, r2, [sp, #8]
 800bfbc:	aa0f      	add	r2, sp, #60	@ 0x3c
 800bfbe:	9200      	str	r2, [sp, #0]
 800bfc0:	9905      	ldr	r1, [sp, #20]
 800bfc2:	462a      	mov	r2, r5
 800bfc4:	4658      	mov	r0, fp
 800bfc6:	f7ff fcb3 	bl	800b930 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800bfca:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 800bfcc:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 800bfd0:	e7da      	b.n	800bf88 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x57c>
 800bfd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	f47f af6c 	bne.w	800beb2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4a6>
 800bfda:	f1a8 0202 	sub.w	r2, r8, #2
 800bfde:	4253      	negs	r3, r2
 800bfe0:	4153      	adcs	r3, r2
 800bfe2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfe4:	e765      	b.n	800beb2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4a6>
 800bfe6:	f1b8 0f02 	cmp.w	r8, #2
 800bfea:	d104      	bne.n	800bff6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5ea>
 800bfec:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bfee:	9701      	str	r7, [sp, #4]
 800bff0:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800bff4:	e63e      	b.n	800bc74 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x268>
 800bff6:	f008 0805 	and.w	r8, r8, #5
 800bffa:	f1b8 0f04 	cmp.w	r8, #4
 800bffe:	d104      	bne.n	800c00a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5fe>
 800c000:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800c002:	9701      	str	r7, [sp, #4]
 800c004:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800c008:	e62a      	b.n	800bc60 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x254>
 800c00a:	f1b8 0f05 	cmp.w	r8, #5
 800c00e:	f47f ae52 	bne.w	800bcb6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2aa>
 800c012:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c014:	ae0f      	add	r6, sp, #60	@ 0x3c
 800c016:	b183      	cbz	r3, 800c03a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x62e>
 800c018:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800c01a:	9905      	ldr	r1, [sp, #20]
 800c01c:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800c020:	e9cd 6700 	strd	r6, r7, [sp]
 800c024:	2300      	movs	r3, #0
 800c026:	462a      	mov	r2, r5
 800c028:	4658      	mov	r0, fp
 800c02a:	f7ff fc81 	bl	800b930 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800c02e:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800c030:	9303      	str	r3, [sp, #12]
 800c032:	9b06      	ldr	r3, [sp, #24]
 800c034:	9302      	str	r3, [sp, #8]
 800c036:	9b07      	ldr	r3, [sp, #28]
 800c038:	e656      	b.n	800bce8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2dc>
 800c03a:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800c03c:	9303      	str	r3, [sp, #12]
 800c03e:	9b06      	ldr	r3, [sp, #24]
 800c040:	441c      	add	r4, r3
 800c042:	9b07      	ldr	r3, [sp, #28]
 800c044:	b2a4      	uxth	r4, r4
 800c046:	441f      	add	r7, r3
 800c048:	9402      	str	r4, [sp, #8]
 800c04a:	e9cd 6700 	strd	r6, r7, [sp]
 800c04e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c050:	e62c      	b.n	800bcac <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2a0>
 800c052:	9906      	ldr	r1, [sp, #24]
 800c054:	2900      	cmp	r1, #0
 800c056:	f47f ad87 	bne.w	800bb68 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x15c>
 800c05a:	b96a      	cbnz	r2, 800c078 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x66c>
 800c05c:	2e03      	cmp	r6, #3
 800c05e:	f63f adc6 	bhi.w	800bbee <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1e2>
 800c062:	a201      	add	r2, pc, #4	@ (adr r2, 800c068 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x65c>)
 800c064:	f852 f026 	ldr.w	pc, [r2, r6, lsl #2]
 800c068:	0800bb75 	.word	0x0800bb75
 800c06c:	0800bb83 	.word	0x0800bb83
 800c070:	0800bbdf 	.word	0x0800bbdf
 800c074:	0800bbf9 	.word	0x0800bbf9
 800c078:	2e03      	cmp	r6, #3
 800c07a:	f63f adb8 	bhi.w	800bbee <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1e2>
 800c07e:	a201      	add	r2, pc, #4	@ (adr r2, 800c084 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x678>)
 800c080:	f852 f026 	ldr.w	pc, [r2, r6, lsl #2]
 800c084:	0800bb75 	.word	0x0800bb75
 800c088:	0800bb83 	.word	0x0800bb83
 800c08c:	0800bbc3 	.word	0x0800bbc3
 800c090:	0800bc15 	.word	0x0800bc15
 800c094:	2301      	movs	r3, #1
 800c096:	9708      	str	r7, [sp, #32]
 800c098:	9309      	str	r3, [sp, #36]	@ 0x24
 800c09a:	e5d8      	b.n	800bc4e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x242>
 800c09c:	f1b8 0f07 	cmp.w	r8, #7
 800c0a0:	d897      	bhi.n	800bfd2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5c6>
 800c0a2:	a201      	add	r2, pc, #4	@ (adr r2, 800c0a8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x69c>)
 800c0a4:	f852 f028 	ldr.w	pc, [r2, r8, lsl #2]
 800c0a8:	0800be2f 	.word	0x0800be2f
 800c0ac:	0800bfd3 	.word	0x0800bfd3
 800c0b0:	0800be4b 	.word	0x0800be4b
 800c0b4:	0800bfd3 	.word	0x0800bfd3
 800c0b8:	0800bea5 	.word	0x0800bea5
 800c0bc:	0800beff 	.word	0x0800beff
 800c0c0:	0800bf61 	.word	0x0800bf61
 800c0c4:	0800bf8f 	.word	0x0800bf8f
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	9606      	str	r6, [sp, #24]
 800c0cc:	9307      	str	r3, [sp, #28]
 800c0ce:	f04f 0805 	mov.w	r8, #5
 800c0d2:	e6ee      	b.n	800beb2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4a6>
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	9606      	str	r6, [sp, #24]
 800c0d8:	9307      	str	r3, [sp, #28]
 800c0da:	f04f 0807 	mov.w	r8, #7
 800c0de:	e6e8      	b.n	800beb2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4a6>
 800c0e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c0e2:	e9cd 6306 	strd	r6, r3, [sp, #24]
 800c0e6:	e6e4      	b.n	800beb2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4a6>

0800c0e8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 800c0e8:	b530      	push	{r4, r5, lr}
 800c0ea:	8ac4      	ldrh	r4, [r0, #22]
 800c0ec:	8b45      	ldrh	r5, [r0, #26]
 800c0ee:	8343      	strh	r3, [r0, #26]
 800c0f0:	442c      	add	r4, r5
 800c0f2:	1ae4      	subs	r4, r4, r3
 800c0f4:	82c4      	strh	r4, [r0, #22]
 800c0f6:	8b83      	ldrh	r3, [r0, #28]
 800c0f8:	8b04      	ldrh	r4, [r0, #24]
 800c0fa:	4422      	add	r2, r4
 800c0fc:	440c      	add	r4, r1
 800c0fe:	1a59      	subs	r1, r3, r1
 800c100:	83c2      	strh	r2, [r0, #30]
 800c102:	8304      	strh	r4, [r0, #24]
 800c104:	8381      	strh	r1, [r0, #28]
 800c106:	bd30      	pop	{r4, r5, pc}

0800c108 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 800c108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c10c:	4604      	mov	r4, r0
 800c10e:	8a47      	ldrh	r7, [r0, #18]
 800c110:	68c0      	ldr	r0, [r0, #12]
 800c112:	6803      	ldr	r3, [r0, #0]
 800c114:	b085      	sub	sp, #20
 800c116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c118:	4798      	blx	r3
 800c11a:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 800c11e:	7a63      	ldrb	r3, [r4, #9]
 800c120:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 800c124:	42b7      	cmp	r7, r6
 800c126:	f103 33ff 	add.w	r3, r3, #4294967295
 800c12a:	bfac      	ite	ge
 800c12c:	f04f 0900 	movge.w	r9, #0
 800c130:	f04f 0901 	movlt.w	r9, #1
 800c134:	2b05      	cmp	r3, #5
 800c136:	d804      	bhi.n	800c142 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3a>
 800c138:	e8df f003 	tbb	[pc, r3]
 800c13c:	470e0854 	.word	0x470e0854
 800c140:	4c4c      	.short	0x4c4c
 800c142:	2500      	movs	r5, #0
 800c144:	46a9      	mov	r9, r5
 800c146:	462e      	mov	r6, r5
 800c148:	462f      	mov	r7, r5
 800c14a:	e00d      	b.n	800c168 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 800c14c:	42b7      	cmp	r7, r6
 800c14e:	bfb4      	ite	lt
 800c150:	2600      	movlt	r6, #0
 800c152:	2601      	movge	r6, #1
 800c154:	2500      	movs	r5, #0
 800c156:	e7f7      	b.n	800c148 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 800c158:	42b7      	cmp	r7, r6
 800c15a:	464d      	mov	r5, r9
 800c15c:	f04f 0900 	mov.w	r9, #0
 800c160:	bfb4      	ite	lt
 800c162:	2600      	movlt	r6, #0
 800c164:	2601      	movge	r6, #1
 800c166:	464f      	mov	r7, r9
 800c168:	f04f 0800 	mov.w	r8, #0
 800c16c:	f8a4 8016 	strh.w	r8, [r4, #22]
 800c170:	f8a4 8018 	strh.w	r8, [r4, #24]
 800c174:	f8cd 8004 	str.w	r8, [sp, #4]
 800c178:	2300      	movs	r3, #0
 800c17a:	9303      	str	r3, [sp, #12]
 800c17c:	8823      	ldrh	r3, [r4, #0]
 800c17e:	2b20      	cmp	r3, #32
 800c180:	d034      	beq.n	800c1ec <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe4>
 800c182:	f242 010b 	movw	r1, #8203	@ 0x200b
 800c186:	1a5a      	subs	r2, r3, r1
 800c188:	f1d2 0a00 	rsbs	sl, r2, #0
 800c18c:	eb4a 0a02 	adc.w	sl, sl, r2
 800c190:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 800c194:	4293      	cmp	r3, r2
 800c196:	d009      	beq.n	800c1ac <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa4>
 800c198:	428b      	cmp	r3, r1
 800c19a:	9a01      	ldr	r2, [sp, #4]
 800c19c:	bf18      	it	ne
 800c19e:	461a      	movne	r2, r3
 800c1a0:	9201      	str	r2, [sp, #4]
 800c1a2:	bf0c      	ite	eq
 800c1a4:	f04f 0a01 	moveq.w	sl, #1
 800c1a8:	f04f 0a00 	movne.w	sl, #0
 800c1ac:	ab03      	add	r3, sp, #12
 800c1ae:	68e2      	ldr	r2, [r4, #12]
 800c1b0:	7a21      	ldrb	r1, [r4, #8]
 800c1b2:	6860      	ldr	r0, [r4, #4]
 800c1b4:	f003 fa14 	bl	800f5e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800c1b8:	8020      	strh	r0, [r4, #0]
 800c1ba:	b9d8      	cbnz	r0, 800c1f4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xec>
 800c1bc:	8ba2      	ldrh	r2, [r4, #28]
 800c1be:	2300      	movs	r3, #0
 800c1c0:	4611      	mov	r1, r2
 800c1c2:	4620      	mov	r0, r4
 800c1c4:	f7ff ff90 	bl	800c0e8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800c1c8:	e06e      	b.n	800c2a8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1a0>
 800c1ca:	2500      	movs	r5, #0
 800c1cc:	46a9      	mov	r9, r5
 800c1ce:	462e      	mov	r6, r5
 800c1d0:	2701      	movs	r7, #1
 800c1d2:	e7c9      	b.n	800c168 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 800c1d4:	42b7      	cmp	r7, r6
 800c1d6:	f04f 0500 	mov.w	r5, #0
 800c1da:	bfb4      	ite	lt
 800c1dc:	2700      	movlt	r7, #0
 800c1de:	2701      	movge	r7, #1
 800c1e0:	462e      	mov	r6, r5
 800c1e2:	e7c1      	b.n	800c168 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 800c1e4:	2500      	movs	r5, #0
 800c1e6:	46a9      	mov	r9, r5
 800c1e8:	2601      	movs	r6, #1
 800c1ea:	e7ad      	b.n	800c148 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 800c1ec:	9301      	str	r3, [sp, #4]
 800c1ee:	f04f 0a01 	mov.w	sl, #1
 800c1f2:	e7db      	b.n	800c1ac <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa4>
 800c1f4:	8b63      	ldrh	r3, [r4, #26]
 800c1f6:	280a      	cmp	r0, #10
 800c1f8:	f103 0301 	add.w	r3, r3, #1
 800c1fc:	8363      	strh	r3, [r4, #26]
 800c1fe:	d0dd      	beq.n	800c1bc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb4>
 800c200:	9a03      	ldr	r2, [sp, #12]
 800c202:	bb62      	cbnz	r2, 800c25e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x156>
 800c204:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800c208:	4298      	cmp	r0, r3
 800c20a:	d003      	beq.n	800c214 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10c>
 800c20c:	f242 030b 	movw	r3, #8203	@ 0x200b
 800c210:	4298      	cmp	r0, r3
 800c212:	d1b1      	bne.n	800c178 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c214:	8823      	ldrh	r3, [r4, #0]
 800c216:	8ba1      	ldrh	r1, [r4, #28]
 800c218:	2b20      	cmp	r3, #32
 800c21a:	d003      	beq.n	800c224 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11c>
 800c21c:	f242 000b 	movw	r0, #8203	@ 0x200b
 800c220:	4283      	cmp	r3, r0
 800c222:	d131      	bne.n	800c288 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x180>
 800c224:	f1ba 0f00 	cmp.w	sl, #0
 800c228:	bf0a      	itet	eq
 800c22a:	4688      	moveq	r8, r1
 800c22c:	4650      	movne	r0, sl
 800c22e:	2001      	moveq	r0, #1
 800c230:	440a      	add	r2, r1
 800c232:	8b23      	ldrh	r3, [r4, #24]
 800c234:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 800c238:	b292      	uxth	r2, r2
 800c23a:	83a2      	strh	r2, [r4, #28]
 800c23c:	4413      	add	r3, r2
 800c23e:	f1b9 0f00 	cmp.w	r9, #0
 800c242:	d102      	bne.n	800c24a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x142>
 800c244:	2d00      	cmp	r5, #0
 800c246:	d042      	beq.n	800c2ce <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c6>
 800c248:	b300      	cbz	r0, 800c28c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x184>
 800c24a:	8c21      	ldrh	r1, [r4, #32]
 800c24c:	4419      	add	r1, r3
 800c24e:	458c      	cmp	ip, r1
 800c250:	da37      	bge.n	800c2c2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ba>
 800c252:	8ae1      	ldrh	r1, [r4, #22]
 800c254:	2900      	cmp	r1, #0
 800c256:	d034      	beq.n	800c2c2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ba>
 800c258:	4563      	cmp	r3, ip
 800c25a:	dd8d      	ble.n	800c178 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c25c:	e01d      	b.n	800c29a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x192>
 800c25e:	8893      	ldrh	r3, [r2, #4]
 800c260:	8023      	strh	r3, [r4, #0]
 800c262:	f892 b00d 	ldrb.w	fp, [r2, #13]
 800c266:	9901      	ldr	r1, [sp, #4]
 800c268:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 800c26c:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 800c270:	f892 b00a 	ldrb.w	fp, [r2, #10]
 800c274:	ea4b 0b00 	orr.w	fp, fp, r0
 800c278:	68e0      	ldr	r0, [r4, #12]
 800c27a:	6803      	ldr	r3, [r0, #0]
 800c27c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c27e:	4798      	blx	r3
 800c280:	eb0b 0200 	add.w	r2, fp, r0
 800c284:	b292      	uxth	r2, r2
 800c286:	e7c5      	b.n	800c214 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10c>
 800c288:	2000      	movs	r0, #0
 800c28a:	e7d1      	b.n	800c230 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x128>
 800c28c:	4563      	cmp	r3, ip
 800c28e:	f77f af73 	ble.w	800c178 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c292:	8ae3      	ldrh	r3, [r4, #22]
 800c294:	2b00      	cmp	r3, #0
 800c296:	f43f af6f 	beq.w	800c178 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c29a:	2301      	movs	r3, #1
 800c29c:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 800c2a0:	8c22      	ldrh	r2, [r4, #32]
 800c2a2:	8be3      	ldrh	r3, [r4, #30]
 800c2a4:	4413      	add	r3, r2
 800c2a6:	83e3      	strh	r3, [r4, #30]
 800c2a8:	68e0      	ldr	r0, [r4, #12]
 800c2aa:	6803      	ldr	r3, [r0, #0]
 800c2ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2ae:	4798      	blx	r3
 800c2b0:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800c2b4:	4418      	add	r0, r3
 800c2b6:	8a63      	ldrh	r3, [r4, #18]
 800c2b8:	1a18      	subs	r0, r3, r0
 800c2ba:	8260      	strh	r0, [r4, #18]
 800c2bc:	b005      	add	sp, #20
 800c2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	4611      	mov	r1, r2
 800c2c6:	4620      	mov	r0, r4
 800c2c8:	f7ff ff0e 	bl	800c0e8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800c2cc:	e754      	b.n	800c178 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c2ce:	4563      	cmp	r3, ip
 800c2d0:	dd14      	ble.n	800c2fc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f4>
 800c2d2:	b117      	cbz	r7, 800c2da <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d2>
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	460a      	mov	r2, r1
 800c2d8:	e772      	b.n	800c1c0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 800c2da:	2e00      	cmp	r6, #0
 800c2dc:	f43f af4c 	beq.w	800c178 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c2e0:	2800      	cmp	r0, #0
 800c2e2:	f47f af49 	bne.w	800c178 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c2e6:	f1ba 0f00 	cmp.w	sl, #0
 800c2ea:	d002      	beq.n	800c2f2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ea>
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	4642      	mov	r2, r8
 800c2f0:	e767      	b.n	800c1c2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xba>
 800c2f2:	8ae3      	ldrh	r3, [r4, #22]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	f43f af3f 	beq.w	800c178 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c2fa:	e7d5      	b.n	800c2a8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1a0>
 800c2fc:	2800      	cmp	r0, #0
 800c2fe:	f47f af3b 	bne.w	800c178 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c302:	f1ba 0f00 	cmp.w	sl, #0
 800c306:	f43f af37 	beq.w	800c178 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c30a:	2301      	movs	r3, #1
 800c30c:	4642      	mov	r2, r8
 800c30e:	e7da      	b.n	800c2c6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1be>

0800c310 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 800c310:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c312:	4605      	mov	r5, r0
 800c314:	b08f      	sub	sp, #60	@ 0x3c
 800c316:	4617      	mov	r7, r2
 800c318:	461c      	mov	r4, r3
 800c31a:	460e      	mov	r6, r1
 800c31c:	b1d1      	cbz	r1, 800c354 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4620      	mov	r0, r4
 800c322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c324:	4798      	blx	r3
 800c326:	4240      	negs	r0, r0
 800c328:	b200      	sxth	r0, r0
 800c32a:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800c32e:	9603      	str	r6, [sp, #12]
 800c330:	9700      	str	r7, [sp, #0]
 800c332:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c336:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 800c33a:	4629      	mov	r1, r5
 800c33c:	a805      	add	r0, sp, #20
 800c33e:	f7ff f8cf 	bl	800b4e0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 800c342:	2401      	movs	r4, #1
 800c344:	a805      	add	r0, sp, #20
 800c346:	f7ff fedf 	bl	800c108 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800c34a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800c34e:	b163      	cbz	r3, 800c36a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 800c350:	3401      	adds	r4, #1
 800c352:	e7f7      	b.n	800c344 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 800c354:	f003 fa12 	bl	800f77c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800c358:	2401      	movs	r4, #1
 800c35a:	280a      	cmp	r0, #10
 800c35c:	4628      	mov	r0, r5
 800c35e:	bf08      	it	eq
 800c360:	3401      	addeq	r4, #1
 800c362:	f003 fa0b 	bl	800f77c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800c366:	2800      	cmp	r0, #0
 800c368:	d1f7      	bne.n	800c35a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 800c36a:	b2a0      	uxth	r0, r4
 800c36c:	b00f      	add	sp, #60	@ 0x3c
 800c36e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c370 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 800c370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c374:	b0e7      	sub	sp, #412	@ 0x19c
 800c376:	468a      	mov	sl, r1
 800c378:	f8dd 91c0 	ldr.w	r9, [sp, #448]	@ 0x1c0
 800c37c:	9006      	str	r0, [sp, #24]
 800c37e:	461c      	mov	r4, r3
 800c380:	f1b9 0f00 	cmp.w	r9, #0
 800c384:	f000 80c6 	beq.w	800c514 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	f000 80c2 	beq.w	800c514 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800c390:	7ba3      	ldrb	r3, [r4, #14]
 800c392:	2b00      	cmp	r3, #0
 800c394:	f000 80be 	beq.w	800c514 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800c398:	6810      	ldr	r0, [r2, #0]
 800c39a:	6851      	ldr	r1, [r2, #4]
 800c39c:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 800c3a0:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 800c3a4:	af09      	add	r7, sp, #36	@ 0x24
 800c3a6:	463b      	mov	r3, r7
 800c3a8:	c303      	stmia	r3!, {r0, r1}
 800c3aa:	79a2      	ldrb	r2, [r4, #6]
 800c3ac:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 800c3b0:	7966      	ldrb	r6, [r4, #5]
 800c3b2:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800c3b6:	a90b      	add	r1, sp, #44	@ 0x2c
 800c3b8:	4638      	mov	r0, r7
 800c3ba:	2500      	movs	r5, #0
 800c3bc:	950b      	str	r5, [sp, #44]	@ 0x2c
 800c3be:	f7ff f90e 	bl	800b5de <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800c3c2:	a90b      	add	r1, sp, #44	@ 0x2c
 800c3c4:	79a2      	ldrb	r2, [r4, #6]
 800c3c6:	4608      	mov	r0, r1
 800c3c8:	f7ff f909 	bl	800b5de <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800c3cc:	2e00      	cmp	r6, #0
 800c3ce:	d16a      	bne.n	800c4a6 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 800c3d0:	f894 8004 	ldrb.w	r8, [r4, #4]
 800c3d4:	ebb8 0805 	subs.w	r8, r8, r5
 800c3d8:	bf18      	it	ne
 800c3da:	f04f 0801 	movne.w	r8, #1
 800c3de:	4645      	mov	r5, r8
 800c3e0:	a81b      	add	r0, sp, #108	@ 0x6c
 800c3e2:	f002 f946 	bl	800e672 <_ZN8touchgfx12TextProviderC1Ev>
 800c3e6:	6820      	ldr	r0, [r4, #0]
 800c3e8:	6803      	ldr	r3, [r0, #0]
 800c3ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c3ec:	4798      	blx	r3
 800c3ee:	4683      	mov	fp, r0
 800c3f0:	6820      	ldr	r0, [r4, #0]
 800c3f2:	6803      	ldr	r3, [r0, #0]
 800c3f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c3f6:	4798      	blx	r3
 800c3f8:	465b      	mov	r3, fp
 800c3fa:	9a71      	ldr	r2, [sp, #452]	@ 0x1c4
 800c3fc:	9000      	str	r0, [sp, #0]
 800c3fe:	4649      	mov	r1, r9
 800c400:	a81b      	add	r0, sp, #108	@ 0x6c
 800c402:	f002 f991 	bl	800e728 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800c406:	6820      	ldr	r0, [r4, #0]
 800c408:	6803      	ldr	r3, [r0, #0]
 800c40a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c40c:	4798      	blx	r3
 800c40e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c412:	4403      	add	r3, r0
 800c414:	9305      	str	r3, [sp, #20]
 800c416:	6823      	ldr	r3, [r4, #0]
 800c418:	f893 b009 	ldrb.w	fp, [r3, #9]
 800c41c:	4483      	add	fp, r0
 800c41e:	a834      	add	r0, sp, #208	@ 0xd0
 800c420:	f002 f927 	bl	800e672 <_ZN8touchgfx12TextProviderC1Ev>
 800c424:	7c23      	ldrb	r3, [r4, #16]
 800c426:	b17b      	cbz	r3, 800c448 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 800c428:	6820      	ldr	r0, [r4, #0]
 800c42a:	6803      	ldr	r3, [r0, #0]
 800c42c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c42e:	4798      	blx	r3
 800c430:	9007      	str	r0, [sp, #28]
 800c432:	6820      	ldr	r0, [r4, #0]
 800c434:	6802      	ldr	r2, [r0, #0]
 800c436:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c438:	4790      	blx	r2
 800c43a:	9b07      	ldr	r3, [sp, #28]
 800c43c:	9000      	str	r0, [sp, #0]
 800c43e:	9a71      	ldr	r2, [sp, #452]	@ 0x1c4
 800c440:	4649      	mov	r1, r9
 800c442:	a834      	add	r0, sp, #208	@ 0xd0
 800c444:	f002 f970 	bl	800e728 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800c448:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 800c44c:	7be2      	ldrb	r2, [r4, #15]
 800c44e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 800c452:	1a8a      	subs	r2, r1, r2
 800c454:	7c21      	ldrb	r1, [r4, #16]
 800c456:	9103      	str	r1, [sp, #12]
 800c458:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 800c45c:	9102      	str	r1, [sp, #8]
 800c45e:	6821      	ldr	r1, [r4, #0]
 800c460:	9101      	str	r1, [sp, #4]
 800c462:	7961      	ldrb	r1, [r4, #5]
 800c464:	9100      	str	r1, [sp, #0]
 800c466:	b292      	uxth	r2, r2
 800c468:	a934      	add	r1, sp, #208	@ 0xd0
 800c46a:	a812      	add	r0, sp, #72	@ 0x48
 800c46c:	f7ff f838 	bl	800b4e0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 800c470:	7c23      	ldrb	r3, [r4, #16]
 800c472:	b30b      	cbz	r3, 800c4b8 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x148>
 800c474:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 800c478:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 800c47c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c480:	445b      	add	r3, fp
 800c482:	4293      	cmp	r3, r2
 800c484:	da49      	bge.n	800c51a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1aa>
 800c486:	a812      	add	r0, sp, #72	@ 0x48
 800c488:	f7ff fe3e 	bl	800c108 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800c48c:	f8bd 305e 	ldrh.w	r3, [sp, #94]	@ 0x5e
 800c490:	3b01      	subs	r3, #1
 800c492:	b29b      	uxth	r3, r3
 800c494:	454b      	cmp	r3, r9
 800c496:	9307      	str	r3, [sp, #28]
 800c498:	d029      	beq.n	800c4ee <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17e>
 800c49a:	4631      	mov	r1, r6
 800c49c:	a81b      	add	r0, sp, #108	@ 0x6c
 800c49e:	f7f7 f8a1 	bl	80035e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800c4a2:	9b07      	ldr	r3, [sp, #28]
 800c4a4:	e7f4      	b.n	800c490 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x120>
 800c4a6:	2e01      	cmp	r6, #1
 800c4a8:	d103      	bne.n	800c4b2 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 800c4aa:	7925      	ldrb	r5, [r4, #4]
 800c4ac:	3d02      	subs	r5, #2
 800c4ae:	bf18      	it	ne
 800c4b0:	2501      	movne	r5, #1
 800c4b2:	f04f 0801 	mov.w	r8, #1
 800c4b6:	e793      	b.n	800c3e0 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x70>
 800c4b8:	f8bd 9014 	ldrh.w	r9, [sp, #20]
 800c4bc:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 800c4c0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c4c4:	445b      	add	r3, fp
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	da27      	bge.n	800c51a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1aa>
 800c4ca:	a81b      	add	r0, sp, #108	@ 0x6c
 800c4cc:	f003 f956 	bl	800f77c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800c4d0:	b300      	cbz	r0, 800c514 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800c4d2:	280a      	cmp	r0, #10
 800c4d4:	d1f2      	bne.n	800c4bc <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14c>
 800c4d6:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 800c4da:	444b      	add	r3, r9
 800c4dc:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800c4e0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 800c4e4:	eba3 0309 	sub.w	r3, r3, r9
 800c4e8:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800c4ec:	e7e6      	b.n	800c4bc <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14c>
 800c4ee:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800c4f2:	f8bd 202e 	ldrh.w	r2, [sp, #46]	@ 0x2e
 800c4f6:	441a      	add	r2, r3
 800c4f8:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 800c4fc:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 800c500:	1ad3      	subs	r3, r2, r3
 800c502:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800c506:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800c50a:	b11b      	cbz	r3, 800c514 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800c50c:	f89d 306a 	ldrb.w	r3, [sp, #106]	@ 0x6a
 800c510:	2b00      	cmp	r3, #0
 800c512:	d0b1      	beq.n	800c478 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x108>
 800c514:	b067      	add	sp, #412	@ 0x19c
 800c516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c51a:	2300      	movs	r3, #0
 800c51c:	e9cd 3a0d 	strd	r3, sl, [sp, #52]	@ 0x34
 800c520:	e9cd 7410 	strd	r7, r4, [sp, #64]	@ 0x40
 800c524:	f8bd 202e 	ldrh.w	r2, [sp, #46]	@ 0x2e
 800c528:	f8ad 203c 	strh.w	r2, [sp, #60]	@ 0x3c
 800c52c:	4699      	mov	r9, r3
 800c52e:	7c23      	ldrb	r3, [r4, #16]
 800c530:	f8ad 9022 	strh.w	r9, [sp, #34]	@ 0x22
 800c534:	b113      	cbz	r3, 800c53c <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1cc>
 800c536:	a812      	add	r0, sp, #72	@ 0x48
 800c538:	f7ff fde6 	bl	800c108 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800c53c:	f1b8 0f00 	cmp.w	r8, #0
 800c540:	d068      	beq.n	800c614 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x2a4>
 800c542:	2d00      	cmp	r5, #0
 800c544:	d061      	beq.n	800c60a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x29a>
 800c546:	7c23      	ldrb	r3, [r4, #16]
 800c548:	b9c3      	cbnz	r3, 800c57c <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x20c>
 800c54a:	2264      	movs	r2, #100	@ 0x64
 800c54c:	a91b      	add	r1, sp, #108	@ 0x6c
 800c54e:	a84d      	add	r0, sp, #308	@ 0x134
 800c550:	f007 f9f7 	bl	8013942 <memcpy>
 800c554:	4633      	mov	r3, r6
 800c556:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800c55a:	6821      	ldr	r1, [r4, #0]
 800c55c:	a84d      	add	r0, sp, #308	@ 0x134
 800c55e:	f7ff f802 	bl	800b566 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800c562:	b200      	sxth	r0, r0
 800c564:	7922      	ldrb	r2, [r4, #4]
 800c566:	2e00      	cmp	r6, #0
 800c568:	d144      	bne.n	800c5f4 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x284>
 800c56a:	2a01      	cmp	r2, #1
 800c56c:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800c570:	d107      	bne.n	800c582 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x212>
 800c572:	1a1b      	subs	r3, r3, r0
 800c574:	2002      	movs	r0, #2
 800c576:	fb93 f3f0 	sdiv	r3, r3, r0
 800c57a:	e005      	b.n	800c588 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 800c57c:	f9bd 0066 	ldrsh.w	r0, [sp, #102]	@ 0x66
 800c580:	e7f0      	b.n	800c564 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f4>
 800c582:	7be2      	ldrb	r2, [r4, #15]
 800c584:	1a9b      	subs	r3, r3, r2
 800c586:	1a1b      	subs	r3, r3, r0
 800c588:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800c58c:	7c23      	ldrb	r3, [r4, #16]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d042      	beq.n	800c618 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x2a8>
 800c592:	f8bd 205e 	ldrh.w	r2, [sp, #94]	@ 0x5e
 800c596:	f89d 306a 	ldrb.w	r3, [sp, #106]	@ 0x6a
 800c59a:	9201      	str	r2, [sp, #4]
 800c59c:	f10d 0a34 	add.w	sl, sp, #52	@ 0x34
 800c5a0:	f10d 0b6c 	add.w	fp, sp, #108	@ 0x6c
 800c5a4:	e9cd 3a02 	strd	r3, sl, [sp, #8]
 800c5a8:	6822      	ldr	r2, [r4, #0]
 800c5aa:	f8cd b000 	str.w	fp, [sp]
 800c5ae:	4633      	mov	r3, r6
 800c5b0:	f10d 0122 	add.w	r1, sp, #34	@ 0x22
 800c5b4:	9806      	ldr	r0, [sp, #24]
 800c5b6:	f7ff fa29 	bl	800ba0c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE>
 800c5ba:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800c5be:	f8ba 3008 	ldrh.w	r3, [sl, #8]
 800c5c2:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800c5c6:	4413      	add	r3, r2
 800c5c8:	1a8a      	subs	r2, r1, r2
 800c5ca:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 800c5ce:	f89d 206a 	ldrb.w	r2, [sp, #106]	@ 0x6a
 800c5d2:	b21b      	sxth	r3, r3
 800c5d4:	f8aa 3008 	strh.w	r3, [sl, #8]
 800c5d8:	2a00      	cmp	r2, #0
 800c5da:	d19b      	bne.n	800c514 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800c5dc:	88fa      	ldrh	r2, [r7, #6]
 800c5de:	8879      	ldrh	r1, [r7, #2]
 800c5e0:	440a      	add	r2, r1
 800c5e2:	b212      	sxth	r2, r2
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	dc95      	bgt.n	800c514 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800c5e8:	4658      	mov	r0, fp
 800c5ea:	f002 f869 	bl	800e6c0 <_ZN8touchgfx12TextProvider11endOfStringEv>
 800c5ee:	2800      	cmp	r0, #0
 800c5f0:	d09d      	beq.n	800c52e <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1be>
 800c5f2:	e78f      	b.n	800c514 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800c5f4:	2a01      	cmp	r2, #1
 800c5f6:	d103      	bne.n	800c600 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x290>
 800c5f8:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800c5fc:	4403      	add	r3, r0
 800c5fe:	e7b9      	b.n	800c574 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x204>
 800c600:	2a00      	cmp	r2, #0
 800c602:	d1c3      	bne.n	800c58c <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x21c>
 800c604:	7be3      	ldrb	r3, [r4, #15]
 800c606:	4403      	add	r3, r0
 800c608:	e7be      	b.n	800c588 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 800c60a:	7be2      	ldrb	r2, [r4, #15]
 800c60c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 800c610:	1a9b      	subs	r3, r3, r2
 800c612:	e7b9      	b.n	800c588 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 800c614:	7be3      	ldrb	r3, [r4, #15]
 800c616:	e7b7      	b.n	800c588 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 800c618:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800c61c:	e7bd      	b.n	800c59a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x22a>

0800c61e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 800c61e:	2b03      	cmp	r3, #3
 800c620:	d818      	bhi.n	800c654 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 800c622:	e8df f003 	tbb	[pc, r3]
 800c626:	0602      	.short	0x0602
 800c628:	130d      	.short	0x130d
 800c62a:	f9b0 2000 	ldrsh.w	r2, [r0]
 800c62e:	1850      	adds	r0, r2, r1
 800c630:	4770      	bx	lr
 800c632:	8803      	ldrh	r3, [r0, #0]
 800c634:	8880      	ldrh	r0, [r0, #4]
 800c636:	4418      	add	r0, r3
 800c638:	b200      	sxth	r0, r0
 800c63a:	1a80      	subs	r0, r0, r2
 800c63c:	3801      	subs	r0, #1
 800c63e:	4770      	bx	lr
 800c640:	8803      	ldrh	r3, [r0, #0]
 800c642:	8880      	ldrh	r0, [r0, #4]
 800c644:	4418      	add	r0, r3
 800c646:	b200      	sxth	r0, r0
 800c648:	1a40      	subs	r0, r0, r1
 800c64a:	e7f7      	b.n	800c63c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 800c64c:	f9b0 0000 	ldrsh.w	r0, [r0]
 800c650:	4410      	add	r0, r2
 800c652:	4770      	bx	lr
 800c654:	2000      	movs	r0, #0
 800c656:	4770      	bx	lr

0800c658 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 800c658:	2b03      	cmp	r3, #3
 800c65a:	d817      	bhi.n	800c68c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 800c65c:	e8df f003 	tbb	[pc, r3]
 800c660:	10090602 	.word	0x10090602
 800c664:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800c668:	1850      	adds	r0, r2, r1
 800c66a:	4770      	bx	lr
 800c66c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800c670:	e7fa      	b.n	800c668 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 800c672:	8843      	ldrh	r3, [r0, #2]
 800c674:	88c0      	ldrh	r0, [r0, #6]
 800c676:	4418      	add	r0, r3
 800c678:	b200      	sxth	r0, r0
 800c67a:	1a80      	subs	r0, r0, r2
 800c67c:	3801      	subs	r0, #1
 800c67e:	4770      	bx	lr
 800c680:	8843      	ldrh	r3, [r0, #2]
 800c682:	88c0      	ldrh	r0, [r0, #6]
 800c684:	4418      	add	r0, r3
 800c686:	b200      	sxth	r0, r0
 800c688:	1a40      	subs	r0, r0, r1
 800c68a:	e7f7      	b.n	800c67c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 800c68c:	2000      	movs	r0, #0
 800c68e:	4770      	bx	lr

0800c690 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800c690:	4b01      	ldr	r3, [pc, #4]	@ (800c698 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800c692:	2200      	movs	r2, #0
 800c694:	601a      	str	r2, [r3, #0]
 800c696:	4770      	bx	lr
 800c698:	20012660 	.word	0x20012660

0800c69c <_ZN8touchgfx16TouchCalibration4clzuEm>:
 800c69c:	4603      	mov	r3, r0
 800c69e:	b1c8      	cbz	r0, 800c6d4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 800c6a0:	0c02      	lsrs	r2, r0, #16
 800c6a2:	0412      	lsls	r2, r2, #16
 800c6a4:	b9a2      	cbnz	r2, 800c6d0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 800c6a6:	0403      	lsls	r3, r0, #16
 800c6a8:	2010      	movs	r0, #16
 800c6aa:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 800c6ae:	bf04      	itt	eq
 800c6b0:	021b      	lsleq	r3, r3, #8
 800c6b2:	3008      	addeq	r0, #8
 800c6b4:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 800c6b8:	bf04      	itt	eq
 800c6ba:	011b      	lsleq	r3, r3, #4
 800c6bc:	3004      	addeq	r0, #4
 800c6be:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 800c6c2:	bf04      	itt	eq
 800c6c4:	009b      	lsleq	r3, r3, #2
 800c6c6:	3002      	addeq	r0, #2
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	db04      	blt.n	800c6d6 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 800c6cc:	3001      	adds	r0, #1
 800c6ce:	4770      	bx	lr
 800c6d0:	2000      	movs	r0, #0
 800c6d2:	e7ea      	b.n	800c6aa <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 800c6d4:	2020      	movs	r0, #32
 800c6d6:	4770      	bx	lr

0800c6d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 800c6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6dc:	b087      	sub	sp, #28
 800c6de:	460d      	mov	r5, r1
 800c6e0:	4616      	mov	r6, r2
 800c6e2:	4698      	mov	r8, r3
 800c6e4:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 800c6e8:	4601      	mov	r1, r0
 800c6ea:	b120      	cbz	r0, 800c6f6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800c6ec:	b11a      	cbz	r2, 800c6f6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800c6ee:	2d1f      	cmp	r5, #31
 800c6f0:	d801      	bhi.n	800c6f6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800c6f2:	2b1f      	cmp	r3, #31
 800c6f4:	d904      	bls.n	800c700 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 800c6f6:	2000      	movs	r0, #0
 800c6f8:	6038      	str	r0, [r7, #0]
 800c6fa:	b007      	add	sp, #28
 800c6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c700:	b97d      	cbnz	r5, 800c722 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 800c702:	b143      	cbz	r3, 800c716 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 800c704:	4602      	mov	r2, r0
 800c706:	e9cd 4700 	strd	r4, r7, [sp]
 800c70a:	462b      	mov	r3, r5
 800c70c:	4641      	mov	r1, r8
 800c70e:	4630      	mov	r0, r6
 800c710:	f7ff ffe2 	bl	800c6d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800c714:	e7f1      	b.n	800c6fa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800c716:	f04f 33ff 	mov.w	r3, #4294967295
 800c71a:	603b      	str	r3, [r7, #0]
 800c71c:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800c720:	e7eb      	b.n	800c6fa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800c722:	fa32 fa05 	lsrs.w	sl, r2, r5
 800c726:	d106      	bne.n	800c736 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 800c728:	4346      	muls	r6, r0
 800c72a:	fbb6 f0f4 	udiv	r0, r6, r4
 800c72e:	fb04 6610 	mls	r6, r4, r0, r6
 800c732:	603e      	str	r6, [r7, #0]
 800c734:	e7e1      	b.n	800c6fa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800c736:	2201      	movs	r2, #1
 800c738:	40aa      	lsls	r2, r5
 800c73a:	3a01      	subs	r2, #1
 800c73c:	4016      	ands	r6, r2
 800c73e:	fa00 fb05 	lsl.w	fp, r0, r5
 800c742:	4630      	mov	r0, r6
 800c744:	fbbb f9f4 	udiv	r9, fp, r4
 800c748:	fb0a f309 	mul.w	r3, sl, r9
 800c74c:	9303      	str	r3, [sp, #12]
 800c74e:	f7ff ffa5 	bl	800c69c <_ZN8touchgfx16TouchCalibration4clzuEm>
 800c752:	462b      	mov	r3, r5
 800c754:	460a      	mov	r2, r1
 800c756:	e9cd 4700 	strd	r4, r7, [sp]
 800c75a:	4601      	mov	r1, r0
 800c75c:	4630      	mov	r0, r6
 800c75e:	f7ff ffbb 	bl	800c6d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800c762:	fb04 b919 	mls	r9, r4, r9, fp
 800c766:	4606      	mov	r6, r0
 800c768:	4648      	mov	r0, r9
 800c76a:	eb05 0108 	add.w	r1, r5, r8
 800c76e:	f7ff ff95 	bl	800c69c <_ZN8touchgfx16TouchCalibration4clzuEm>
 800c772:	ab05      	add	r3, sp, #20
 800c774:	e9cd 4300 	strd	r4, r3, [sp]
 800c778:	464a      	mov	r2, r9
 800c77a:	4603      	mov	r3, r0
 800c77c:	4650      	mov	r0, sl
 800c77e:	f7ff ffab 	bl	800c6d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800c782:	6839      	ldr	r1, [r7, #0]
 800c784:	9a05      	ldr	r2, [sp, #20]
 800c786:	9b03      	ldr	r3, [sp, #12]
 800c788:	4411      	add	r1, r2
 800c78a:	fbb1 f2f4 	udiv	r2, r1, r4
 800c78e:	18d3      	adds	r3, r2, r3
 800c790:	441e      	add	r6, r3
 800c792:	fb04 1412 	mls	r4, r4, r2, r1
 800c796:	4430      	add	r0, r6
 800c798:	603c      	str	r4, [r7, #0]
 800c79a:	e7ae      	b.n	800c6fa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

0800c79c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 800c79c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c7a0:	b085      	sub	sp, #20
 800c7a2:	f1b0 0900 	subs.w	r9, r0, #0
 800c7a6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800c7a8:	461d      	mov	r5, r3
 800c7aa:	bfbf      	itttt	lt
 800c7ac:	6823      	ldrlt	r3, [r4, #0]
 800c7ae:	425b      	neglt	r3, r3
 800c7b0:	f1c9 0900 	rsblt	r9, r9, #0
 800c7b4:	6023      	strlt	r3, [r4, #0]
 800c7b6:	bfb4      	ite	lt
 800c7b8:	f04f 36ff 	movlt.w	r6, #4294967295
 800c7bc:	2601      	movge	r6, #1
 800c7be:	2a00      	cmp	r2, #0
 800c7c0:	4617      	mov	r7, r2
 800c7c2:	da04      	bge.n	800c7ce <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 800c7c4:	6823      	ldr	r3, [r4, #0]
 800c7c6:	425b      	negs	r3, r3
 800c7c8:	4257      	negs	r7, r2
 800c7ca:	4276      	negs	r6, r6
 800c7cc:	6023      	str	r3, [r4, #0]
 800c7ce:	2d00      	cmp	r5, #0
 800c7d0:	4638      	mov	r0, r7
 800c7d2:	bfba      	itte	lt
 800c7d4:	426d      	neglt	r5, r5
 800c7d6:	f04f 38ff 	movlt.w	r8, #4294967295
 800c7da:	f04f 0801 	movge.w	r8, #1
 800c7de:	f7ff ff5d 	bl	800c69c <_ZN8touchgfx16TouchCalibration4clzuEm>
 800c7e2:	ab03      	add	r3, sp, #12
 800c7e4:	e9cd 5300 	strd	r5, r3, [sp]
 800c7e8:	463a      	mov	r2, r7
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	4648      	mov	r0, r9
 800c7ee:	f7ff ff73 	bl	800c6d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800c7f2:	6823      	ldr	r3, [r4, #0]
 800c7f4:	9a03      	ldr	r2, [sp, #12]
 800c7f6:	4546      	cmp	r6, r8
 800c7f8:	441a      	add	r2, r3
 800c7fa:	fb92 f3f5 	sdiv	r3, r2, r5
 800c7fe:	4418      	add	r0, r3
 800c800:	bf18      	it	ne
 800c802:	4240      	negne	r0, r0
 800c804:	fb05 2313 	mls	r3, r5, r3, r2
 800c808:	1c72      	adds	r2, r6, #1
 800c80a:	6023      	str	r3, [r4, #0]
 800c80c:	d105      	bne.n	800c81a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 800c80e:	2b00      	cmp	r3, #0
 800c810:	f1c3 0200 	rsb	r2, r3, #0
 800c814:	db0b      	blt.n	800c82e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 800c816:	6022      	str	r2, [r4, #0]
 800c818:	e006      	b.n	800c828 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800c81a:	2e01      	cmp	r6, #1
 800c81c:	d104      	bne.n	800c828 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800c81e:	2b00      	cmp	r3, #0
 800c820:	da02      	bge.n	800c828 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800c822:	442b      	add	r3, r5
 800c824:	3801      	subs	r0, #1
 800c826:	6023      	str	r3, [r4, #0]
 800c828:	b005      	add	sp, #20
 800c82a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c82e:	3801      	subs	r0, #1
 800c830:	1b52      	subs	r2, r2, r5
 800c832:	e7f0      	b.n	800c816 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0800c834 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 800c834:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800c838:	4c1c      	ldr	r4, [pc, #112]	@ (800c8ac <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 800c83a:	6807      	ldr	r7, [r0, #0]
 800c83c:	69a3      	ldr	r3, [r4, #24]
 800c83e:	4605      	mov	r5, r0
 800c840:	b92b      	cbnz	r3, 800c84e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 800c842:	6840      	ldr	r0, [r0, #4]
 800c844:	e9c5 7000 	strd	r7, r0, [r5]
 800c848:	b004      	add	sp, #16
 800c84a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c84e:	68a2      	ldr	r2, [r4, #8]
 800c850:	6820      	ldr	r0, [r4, #0]
 800c852:	ae04      	add	r6, sp, #16
 800c854:	f04f 0802 	mov.w	r8, #2
 800c858:	fb93 f1f8 	sdiv	r1, r3, r8
 800c85c:	440a      	add	r2, r1
 800c85e:	f846 2d04 	str.w	r2, [r6, #-4]!
 800c862:	69e1      	ldr	r1, [r4, #28]
 800c864:	9600      	str	r6, [sp, #0]
 800c866:	463a      	mov	r2, r7
 800c868:	f7ff ff98 	bl	800c79c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800c86c:	69a3      	ldr	r3, [r4, #24]
 800c86e:	686a      	ldr	r2, [r5, #4]
 800c870:	6a21      	ldr	r1, [r4, #32]
 800c872:	9600      	str	r6, [sp, #0]
 800c874:	4607      	mov	r7, r0
 800c876:	6860      	ldr	r0, [r4, #4]
 800c878:	f7ff ff90 	bl	800c79c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800c87c:	6962      	ldr	r2, [r4, #20]
 800c87e:	69a3      	ldr	r3, [r4, #24]
 800c880:	fb93 f8f8 	sdiv	r8, r3, r8
 800c884:	4442      	add	r2, r8
 800c886:	9203      	str	r2, [sp, #12]
 800c888:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c88a:	682a      	ldr	r2, [r5, #0]
 800c88c:	9600      	str	r6, [sp, #0]
 800c88e:	4407      	add	r7, r0
 800c890:	68e0      	ldr	r0, [r4, #12]
 800c892:	f7ff ff83 	bl	800c79c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800c896:	9600      	str	r6, [sp, #0]
 800c898:	4680      	mov	r8, r0
 800c89a:	69a3      	ldr	r3, [r4, #24]
 800c89c:	686a      	ldr	r2, [r5, #4]
 800c89e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800c8a0:	6920      	ldr	r0, [r4, #16]
 800c8a2:	f7ff ff7b 	bl	800c79c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800c8a6:	4440      	add	r0, r8
 800c8a8:	e7cc      	b.n	800c844 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 800c8aa:	bf00      	nop
 800c8ac:	20012664 	.word	0x20012664

0800c8b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 800c8b0:	4b07      	ldr	r3, [pc, #28]	@ (800c8d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 800c8b2:	781b      	ldrb	r3, [r3, #0]
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d109      	bne.n	800c8cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 800c8b8:	f9b1 3000 	ldrsh.w	r3, [r1]
 800c8bc:	f9b0 2000 	ldrsh.w	r2, [r0]
 800c8c0:	8003      	strh	r3, [r0, #0]
 800c8c2:	4b04      	ldr	r3, [pc, #16]	@ (800c8d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 800c8c4:	881b      	ldrh	r3, [r3, #0]
 800c8c6:	3b01      	subs	r3, #1
 800c8c8:	1a9b      	subs	r3, r3, r2
 800c8ca:	800b      	strh	r3, [r1, #0]
 800c8cc:	4770      	bx	lr
 800c8ce:	bf00      	nop
 800c8d0:	20012650 	.word	0x20012650
 800c8d4:	2001264c 	.word	0x2001264c

0800c8d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 800c8d8:	b510      	push	{r4, lr}
 800c8da:	4b07      	ldr	r3, [pc, #28]	@ (800c8f8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	2b01      	cmp	r3, #1
 800c8e0:	d108      	bne.n	800c8f4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 800c8e2:	4b06      	ldr	r3, [pc, #24]	@ (800c8fc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 800c8e4:	880c      	ldrh	r4, [r1, #0]
 800c8e6:	881b      	ldrh	r3, [r3, #0]
 800c8e8:	f9b0 2000 	ldrsh.w	r2, [r0]
 800c8ec:	3b01      	subs	r3, #1
 800c8ee:	1b1b      	subs	r3, r3, r4
 800c8f0:	8003      	strh	r3, [r0, #0]
 800c8f2:	800a      	strh	r2, [r1, #0]
 800c8f4:	bd10      	pop	{r4, pc}
 800c8f6:	bf00      	nop
 800c8f8:	20012650 	.word	0x20012650
 800c8fc:	2001264c 	.word	0x2001264c

0800c900 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 800c900:	b510      	push	{r4, lr}
 800c902:	4b0a      	ldr	r3, [pc, #40]	@ (800c92c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 800c904:	781b      	ldrb	r3, [r3, #0]
 800c906:	2b01      	cmp	r3, #1
 800c908:	d10e      	bne.n	800c928 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 800c90a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800c90e:	8843      	ldrh	r3, [r0, #2]
 800c910:	f9b0 4000 	ldrsh.w	r4, [r0]
 800c914:	8044      	strh	r4, [r0, #2]
 800c916:	18ca      	adds	r2, r1, r3
 800c918:	4b05      	ldr	r3, [pc, #20]	@ (800c930 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 800c91a:	881b      	ldrh	r3, [r3, #0]
 800c91c:	1a9b      	subs	r3, r3, r2
 800c91e:	8003      	strh	r3, [r0, #0]
 800c920:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800c924:	80c3      	strh	r3, [r0, #6]
 800c926:	8081      	strh	r1, [r0, #4]
 800c928:	bd10      	pop	{r4, pc}
 800c92a:	bf00      	nop
 800c92c:	20012650 	.word	0x20012650
 800c930:	2001264c 	.word	0x2001264c

0800c934 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 800c934:	4b08      	ldr	r3, [pc, #32]	@ (800c958 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 800c936:	781b      	ldrb	r3, [r3, #0]
 800c938:	2b01      	cmp	r3, #1
 800c93a:	d10c      	bne.n	800c956 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 800c93c:	8803      	ldrh	r3, [r0, #0]
 800c93e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800c942:	8842      	ldrh	r2, [r0, #2]
 800c944:	8002      	strh	r2, [r0, #0]
 800c946:	185a      	adds	r2, r3, r1
 800c948:	4b04      	ldr	r3, [pc, #16]	@ (800c95c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 800c94a:	881b      	ldrh	r3, [r3, #0]
 800c94c:	1a9b      	subs	r3, r3, r2
 800c94e:	8043      	strh	r3, [r0, #2]
 800c950:	88c3      	ldrh	r3, [r0, #6]
 800c952:	8083      	strh	r3, [r0, #4]
 800c954:	80c1      	strh	r1, [r0, #6]
 800c956:	4770      	bx	lr
 800c958:	20012650 	.word	0x20012650
 800c95c:	2001264c 	.word	0x2001264c

0800c960 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 800c960:	b510      	push	{r4, lr}
 800c962:	4b07      	ldr	r3, [pc, #28]	@ (800c980 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 800c964:	781b      	ldrb	r3, [r3, #0]
 800c966:	2b01      	cmp	r3, #1
 800c968:	d108      	bne.n	800c97c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 800c96a:	f9b1 3000 	ldrsh.w	r3, [r1]
 800c96e:	f9b0 4000 	ldrsh.w	r4, [r0]
 800c972:	8003      	strh	r3, [r0, #0]
 800c974:	8893      	ldrh	r3, [r2, #4]
 800c976:	3b01      	subs	r3, #1
 800c978:	1b1b      	subs	r3, r3, r4
 800c97a:	800b      	strh	r3, [r1, #0]
 800c97c:	bd10      	pop	{r4, pc}
 800c97e:	bf00      	nop
 800c980:	20012650 	.word	0x20012650

0800c984 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 800c984:	b510      	push	{r4, lr}
 800c986:	4b0a      	ldr	r3, [pc, #40]	@ (800c9b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 800c988:	781b      	ldrb	r3, [r3, #0]
 800c98a:	2b01      	cmp	r3, #1
 800c98c:	460a      	mov	r2, r1
 800c98e:	d10d      	bne.n	800c9ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 800c990:	8881      	ldrh	r1, [r0, #4]
 800c992:	8803      	ldrh	r3, [r0, #0]
 800c994:	440b      	add	r3, r1
 800c996:	4601      	mov	r1, r0
 800c998:	3b01      	subs	r3, #1
 800c99a:	f821 3b02 	strh.w	r3, [r1], #2
 800c99e:	f7ff ffdf 	bl	800c960 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800c9a2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800c9a6:	88c2      	ldrh	r2, [r0, #6]
 800c9a8:	8082      	strh	r2, [r0, #4]
 800c9aa:	80c3      	strh	r3, [r0, #6]
 800c9ac:	bd10      	pop	{r4, pc}
 800c9ae:	bf00      	nop
 800c9b0:	20012650 	.word	0x20012650

0800c9b4 <_ZN8touchgfx11Application13requestRedrawEv>:
 800c9b4:	4b06      	ldr	r3, [pc, #24]	@ (800c9d0 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 800c9b6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c9ba:	4b06      	ldr	r3, [pc, #24]	@ (800c9d4 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 800c9bc:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 800c9c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c9c4:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 800c9c8:	2100      	movs	r1, #0
 800c9ca:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 800c9ce:	4770      	bx	lr
 800c9d0:	2001264c 	.word	0x2001264c
 800c9d4:	2001264e 	.word	0x2001264e

0800c9d8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 800c9d8:	4b03      	ldr	r3, [pc, #12]	@ (800c9e8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 800c9da:	6818      	ldr	r0, [r3, #0]
 800c9dc:	b110      	cbz	r0, 800c9e4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 800c9de:	6803      	ldr	r3, [r0, #0]
 800c9e0:	699b      	ldr	r3, [r3, #24]
 800c9e2:	4718      	bx	r3
 800c9e4:	4770      	bx	lr
 800c9e6:	bf00      	nop
 800c9e8:	20012694 	.word	0x20012694

0800c9ec <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 800c9ec:	4770      	bx	lr
	...

0800c9f0 <_ZN8touchgfx11Application4drawEv>:
 800c9f0:	b507      	push	{r0, r1, r2, lr}
 800c9f2:	4b09      	ldr	r3, [pc, #36]	@ (800ca18 <_ZN8touchgfx11Application4drawEv+0x28>)
 800c9f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c9f8:	4b08      	ldr	r3, [pc, #32]	@ (800ca1c <_ZN8touchgfx11Application4drawEv+0x2c>)
 800c9fa:	f8ad 2004 	strh.w	r2, [sp, #4]
 800c9fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca02:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ca06:	6803      	ldr	r3, [r0, #0]
 800ca08:	2100      	movs	r1, #0
 800ca0a:	9100      	str	r1, [sp, #0]
 800ca0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ca0e:	4669      	mov	r1, sp
 800ca10:	4798      	blx	r3
 800ca12:	b003      	add	sp, #12
 800ca14:	f85d fb04 	ldr.w	pc, [sp], #4
 800ca18:	2001264c 	.word	0x2001264c
 800ca1c:	2001264e 	.word	0x2001264e

0800ca20 <_ZN8touchgfx11Application10invalidateEv>:
 800ca20:	4b09      	ldr	r3, [pc, #36]	@ (800ca48 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 800ca22:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ca26:	4b09      	ldr	r3, [pc, #36]	@ (800ca4c <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 800ca28:	b082      	sub	sp, #8
 800ca2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca2e:	f8ad 2004 	strh.w	r2, [sp, #4]
 800ca32:	2100      	movs	r1, #0
 800ca34:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ca38:	9100      	str	r1, [sp, #0]
 800ca3a:	6803      	ldr	r3, [r0, #0]
 800ca3c:	aa02      	add	r2, sp, #8
 800ca3e:	e912 0006 	ldmdb	r2, {r1, r2}
 800ca42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca44:	b002      	add	sp, #8
 800ca46:	4718      	bx	r3
 800ca48:	2001264c 	.word	0x2001264c
 800ca4c:	2001264e 	.word	0x2001264e

0800ca50 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 800ca50:	4b03      	ldr	r3, [pc, #12]	@ (800ca60 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 800ca52:	6818      	ldr	r0, [r3, #0]
 800ca54:	b110      	cbz	r0, 800ca5c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 800ca56:	6803      	ldr	r3, [r0, #0]
 800ca58:	69db      	ldr	r3, [r3, #28]
 800ca5a:	4718      	bx	r3
 800ca5c:	4770      	bx	lr
 800ca5e:	bf00      	nop
 800ca60:	20012694 	.word	0x20012694

0800ca64 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 800ca64:	4b03      	ldr	r3, [pc, #12]	@ (800ca74 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 800ca66:	6818      	ldr	r0, [r3, #0]
 800ca68:	b110      	cbz	r0, 800ca70 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 800ca6a:	6803      	ldr	r3, [r0, #0]
 800ca6c:	6a1b      	ldr	r3, [r3, #32]
 800ca6e:	4718      	bx	r3
 800ca70:	4770      	bx	lr
 800ca72:	bf00      	nop
 800ca74:	20012694 	.word	0x20012694

0800ca78 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 800ca78:	2300      	movs	r3, #0
 800ca7a:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 800ca7e:	4770      	bx	lr

0800ca80 <_ZN8touchgfx11Application14handleKeyEventEh>:
 800ca80:	4b03      	ldr	r3, [pc, #12]	@ (800ca90 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 800ca82:	6818      	ldr	r0, [r3, #0]
 800ca84:	b110      	cbz	r0, 800ca8c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 800ca86:	6803      	ldr	r3, [r0, #0]
 800ca88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca8a:	4718      	bx	r3
 800ca8c:	4770      	bx	lr
 800ca8e:	bf00      	nop
 800ca90:	20012694 	.word	0x20012694

0800ca94 <_ZN8touchgfx11ApplicationD1Ev>:
 800ca94:	4770      	bx	lr

0800ca96 <_ZN8touchgfx11ApplicationD0Ev>:
 800ca96:	b510      	push	{r4, lr}
 800ca98:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 800ca9c:	4604      	mov	r4, r0
 800ca9e:	f006 fc4b 	bl	8013338 <_ZdlPvj>
 800caa2:	4620      	mov	r0, r4
 800caa4:	bd10      	pop	{r4, pc}

0800caa6 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800caa6:	b510      	push	{r4, lr}
 800caa8:	f9b1 4000 	ldrsh.w	r4, [r1]
 800caac:	888a      	ldrh	r2, [r1, #4]
 800caae:	f9b0 3000 	ldrsh.w	r3, [r0]
 800cab2:	4422      	add	r2, r4
 800cab4:	b212      	sxth	r2, r2
 800cab6:	4293      	cmp	r3, r2
 800cab8:	da15      	bge.n	800cae6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800caba:	8882      	ldrh	r2, [r0, #4]
 800cabc:	4413      	add	r3, r2
 800cabe:	b21b      	sxth	r3, r3
 800cac0:	429c      	cmp	r4, r3
 800cac2:	da10      	bge.n	800cae6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800cac4:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800cac8:	88c9      	ldrh	r1, [r1, #6]
 800caca:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800cace:	4419      	add	r1, r3
 800cad0:	b209      	sxth	r1, r1
 800cad2:	428a      	cmp	r2, r1
 800cad4:	da07      	bge.n	800cae6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800cad6:	88c0      	ldrh	r0, [r0, #6]
 800cad8:	4410      	add	r0, r2
 800cada:	b200      	sxth	r0, r0
 800cadc:	4283      	cmp	r3, r0
 800cade:	bfac      	ite	ge
 800cae0:	2000      	movge	r0, #0
 800cae2:	2001      	movlt	r0, #1
 800cae4:	bd10      	pop	{r4, pc}
 800cae6:	2000      	movs	r0, #0
 800cae8:	e7fc      	b.n	800cae4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0800caea <_ZN8touchgfx4Rect10restrictToEss>:
 800caea:	f9b0 3000 	ldrsh.w	r3, [r0]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	b510      	push	{r4, lr}
 800caf2:	da04      	bge.n	800cafe <_ZN8touchgfx4Rect10restrictToEss+0x14>
 800caf4:	8884      	ldrh	r4, [r0, #4]
 800caf6:	4423      	add	r3, r4
 800caf8:	8083      	strh	r3, [r0, #4]
 800cafa:	2300      	movs	r3, #0
 800cafc:	8003      	strh	r3, [r0, #0]
 800cafe:	f9b0 4000 	ldrsh.w	r4, [r0]
 800cb02:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800cb06:	1b09      	subs	r1, r1, r4
 800cb08:	428b      	cmp	r3, r1
 800cb0a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800cb0e:	bfc8      	it	gt
 800cb10:	8081      	strhgt	r1, [r0, #4]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	da04      	bge.n	800cb20 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 800cb16:	88c1      	ldrh	r1, [r0, #6]
 800cb18:	440b      	add	r3, r1
 800cb1a:	80c3      	strh	r3, [r0, #6]
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	8043      	strh	r3, [r0, #2]
 800cb20:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800cb24:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800cb28:	1a52      	subs	r2, r2, r1
 800cb2a:	4293      	cmp	r3, r2
 800cb2c:	bfc8      	it	gt
 800cb2e:	80c2      	strhgt	r2, [r0, #6]
 800cb30:	bd10      	pop	{r4, pc}
	...

0800cb34 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 800cb34:	b510      	push	{r4, lr}
 800cb36:	4b10      	ldr	r3, [pc, #64]	@ (800cb78 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 800cb38:	f9b3 2000 	ldrsh.w	r2, [r3]
 800cb3c:	4b0f      	ldr	r3, [pc, #60]	@ (800cb7c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 800cb3e:	460c      	mov	r4, r1
 800cb40:	4620      	mov	r0, r4
 800cb42:	f9b3 1000 	ldrsh.w	r1, [r3]
 800cb46:	f7ff ffd0 	bl	800caea <_ZN8touchgfx4Rect10restrictToEss>
 800cb4a:	4b0d      	ldr	r3, [pc, #52]	@ (800cb80 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 800cb4c:	6818      	ldr	r0, [r3, #0]
 800cb4e:	b190      	cbz	r0, 800cb76 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 800cb50:	6803      	ldr	r3, [r0, #0]
 800cb52:	4621      	mov	r1, r4
 800cb54:	689b      	ldr	r3, [r3, #8]
 800cb56:	4798      	blx	r3
 800cb58:	4b0a      	ldr	r3, [pc, #40]	@ (800cb84 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 800cb5a:	6818      	ldr	r0, [r3, #0]
 800cb5c:	b118      	cbz	r0, 800cb66 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 800cb5e:	6803      	ldr	r3, [r0, #0]
 800cb60:	4621      	mov	r1, r4
 800cb62:	689b      	ldr	r3, [r3, #8]
 800cb64:	4798      	blx	r3
 800cb66:	4b08      	ldr	r3, [pc, #32]	@ (800cb88 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 800cb68:	6818      	ldr	r0, [r3, #0]
 800cb6a:	6803      	ldr	r3, [r0, #0]
 800cb6c:	4621      	mov	r1, r4
 800cb6e:	69db      	ldr	r3, [r3, #28]
 800cb70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb74:	4718      	bx	r3
 800cb76:	bd10      	pop	{r4, pc}
 800cb78:	2001264e 	.word	0x2001264e
 800cb7c:	2001264c 	.word	0x2001264c
 800cb80:	20012694 	.word	0x20012694
 800cb84:	20012690 	.word	0x20012690
 800cb88:	20012658 	.word	0x20012658

0800cb8c <_ZNK8touchgfx4Rect8includesERKS0_>:
 800cb8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb8e:	4606      	mov	r6, r0
 800cb90:	4608      	mov	r0, r1
 800cb92:	460f      	mov	r7, r1
 800cb94:	f7fc fa35 	bl	8009002 <_ZNK8touchgfx4Rect7isEmptyEv>
 800cb98:	b9e8      	cbnz	r0, 800cbd6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800cb9a:	f9b7 5000 	ldrsh.w	r5, [r7]
 800cb9e:	f9b6 4000 	ldrsh.w	r4, [r6]
 800cba2:	42a5      	cmp	r5, r4
 800cba4:	db17      	blt.n	800cbd6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800cba6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800cbaa:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800cbae:	429a      	cmp	r2, r3
 800cbb0:	db11      	blt.n	800cbd6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800cbb2:	88b9      	ldrh	r1, [r7, #4]
 800cbb4:	440d      	add	r5, r1
 800cbb6:	88b1      	ldrh	r1, [r6, #4]
 800cbb8:	440c      	add	r4, r1
 800cbba:	b22d      	sxth	r5, r5
 800cbbc:	b224      	sxth	r4, r4
 800cbbe:	42a5      	cmp	r5, r4
 800cbc0:	dc09      	bgt.n	800cbd6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800cbc2:	88f8      	ldrh	r0, [r7, #6]
 800cbc4:	4410      	add	r0, r2
 800cbc6:	88f2      	ldrh	r2, [r6, #6]
 800cbc8:	4413      	add	r3, r2
 800cbca:	b200      	sxth	r0, r0
 800cbcc:	b21b      	sxth	r3, r3
 800cbce:	4298      	cmp	r0, r3
 800cbd0:	bfcc      	ite	gt
 800cbd2:	2000      	movgt	r0, #0
 800cbd4:	2001      	movle	r0, #1
 800cbd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cbd8 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800cbd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbda:	4604      	mov	r4, r0
 800cbdc:	4608      	mov	r0, r1
 800cbde:	460d      	mov	r5, r1
 800cbe0:	f7fc fa0f 	bl	8009002 <_ZNK8touchgfx4Rect7isEmptyEv>
 800cbe4:	b978      	cbnz	r0, 800cc06 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800cbe6:	4620      	mov	r0, r4
 800cbe8:	f7fc fa0b 	bl	8009002 <_ZNK8touchgfx4Rect7isEmptyEv>
 800cbec:	f9b5 6000 	ldrsh.w	r6, [r5]
 800cbf0:	b150      	cbz	r0, 800cc08 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800cbf2:	8026      	strh	r6, [r4, #0]
 800cbf4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800cbf8:	8063      	strh	r3, [r4, #2]
 800cbfa:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800cbfe:	80a3      	strh	r3, [r4, #4]
 800cc00:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800cc04:	80e3      	strh	r3, [r4, #6]
 800cc06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc08:	f9b4 1000 	ldrsh.w	r1, [r4]
 800cc0c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800cc10:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800cc14:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800cc18:	88ed      	ldrh	r5, [r5, #6]
 800cc1a:	42b1      	cmp	r1, r6
 800cc1c:	460f      	mov	r7, r1
 800cc1e:	bfa8      	it	ge
 800cc20:	4637      	movge	r7, r6
 800cc22:	4293      	cmp	r3, r2
 800cc24:	4618      	mov	r0, r3
 800cc26:	4466      	add	r6, ip
 800cc28:	bfa8      	it	ge
 800cc2a:	4610      	movge	r0, r2
 800cc2c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800cc30:	8027      	strh	r7, [r4, #0]
 800cc32:	442a      	add	r2, r5
 800cc34:	88e5      	ldrh	r5, [r4, #6]
 800cc36:	8060      	strh	r0, [r4, #2]
 800cc38:	4461      	add	r1, ip
 800cc3a:	442b      	add	r3, r5
 800cc3c:	b236      	sxth	r6, r6
 800cc3e:	b209      	sxth	r1, r1
 800cc40:	b212      	sxth	r2, r2
 800cc42:	b21b      	sxth	r3, r3
 800cc44:	428e      	cmp	r6, r1
 800cc46:	bfac      	ite	ge
 800cc48:	ebc7 0106 	rsbge	r1, r7, r6
 800cc4c:	ebc7 0101 	rsblt	r1, r7, r1
 800cc50:	429a      	cmp	r2, r3
 800cc52:	bfac      	ite	ge
 800cc54:	ebc0 0202 	rsbge	r2, r0, r2
 800cc58:	ebc0 0203 	rsblt	r2, r0, r3
 800cc5c:	80a1      	strh	r1, [r4, #4]
 800cc5e:	80e2      	strh	r2, [r4, #6]
 800cc60:	e7d1      	b.n	800cc06 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0800cc64 <_ZN8touchgfx11Application11getInstanceEv>:
 800cc64:	4b01      	ldr	r3, [pc, #4]	@ (800cc6c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 800cc66:	6818      	ldr	r0, [r3, #0]
 800cc68:	4770      	bx	lr
 800cc6a:	bf00      	nop
 800cc6c:	200126a4 	.word	0x200126a4

0800cc70 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>:
 800cc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc72:	4b10      	ldr	r3, [pc, #64]	@ (800ccb4 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x44>)
 800cc74:	781b      	ldrb	r3, [r3, #0]
 800cc76:	4605      	mov	r5, r0
 800cc78:	b1d3      	cbz	r3, 800ccb0 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x40>
 800cc7a:	4b0f      	ldr	r3, [pc, #60]	@ (800ccb8 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x48>)
 800cc7c:	4f0f      	ldr	r7, [pc, #60]	@ (800ccbc <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x4c>)
 800cc7e:	881c      	ldrh	r4, [r3, #0]
 800cc80:	f100 06ee 	add.w	r6, r0, #238	@ 0xee
 800cc84:	f8b5 312e 	ldrh.w	r3, [r5, #302]	@ 0x12e
 800cc88:	42a3      	cmp	r3, r4
 800cc8a:	d90e      	bls.n	800ccaa <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x3a>
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800cc92:	b10a      	cbz	r2, 800cc98 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x28>
 800cc94:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800cc96:	b900      	cbnz	r0, 800cc9a <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x2a>
 800cc98:	6898      	ldr	r0, [r3, #8]
 800cc9a:	6803      	ldr	r3, [r0, #0]
 800cc9c:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
 800cca0:	69db      	ldr	r3, [r3, #28]
 800cca2:	3401      	adds	r4, #1
 800cca4:	4798      	blx	r3
 800cca6:	b2a4      	uxth	r4, r4
 800cca8:	e7ec      	b.n	800cc84 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x14>
 800ccaa:	2300      	movs	r3, #0
 800ccac:	f8a5 312e 	strh.w	r3, [r5, #302]	@ 0x12e
 800ccb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccb2:	bf00      	nop
 800ccb4:	20012656 	.word	0x20012656
 800ccb8:	20000084 	.word	0x20000084
 800ccbc:	20012658 	.word	0x20012658

0800ccc0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 800ccc0:	b510      	push	{r4, lr}
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 800ccc8:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 800cccc:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 800ccd0:	4604      	mov	r4, r0
 800ccd2:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 800ccd6:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d90e      	bls.n	800ccfc <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 800ccde:	18e2      	adds	r2, r4, r3
 800cce0:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 800cce4:	b122      	cbz	r2, 800ccf0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 800cce6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800ccea:	6803      	ldr	r3, [r0, #0]
 800ccec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ccee:	4798      	blx	r3
 800ccf0:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 800ccfa:	e7ea      	b.n	800ccd2 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 800ccfc:	bd10      	pop	{r4, pc}

0800ccfe <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 800ccfe:	2300      	movs	r3, #0
 800cd00:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 800cd04:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 800cd08:	30a4      	adds	r0, #164	@ 0xa4
 800cd0a:	f802 3b01 	strb.w	r3, [r2], #1
 800cd0e:	4282      	cmp	r2, r0
 800cd10:	d1fb      	bne.n	800cd0a <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 800cd12:	4770      	bx	lr

0800cd14 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 800cd14:	b570      	push	{r4, r5, r6, lr}
 800cd16:	4c0b      	ldr	r4, [pc, #44]	@ (800cd44 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 800cd18:	4605      	mov	r5, r0
 800cd1a:	6820      	ldr	r0, [r4, #0]
 800cd1c:	460e      	mov	r6, r1
 800cd1e:	b110      	cbz	r0, 800cd26 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 800cd20:	6803      	ldr	r3, [r0, #0]
 800cd22:	695b      	ldr	r3, [r3, #20]
 800cd24:	4798      	blx	r3
 800cd26:	1d28      	adds	r0, r5, #4
 800cd28:	f7ff ffe9 	bl	800ccfe <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800cd2c:	6026      	str	r6, [r4, #0]
 800cd2e:	6833      	ldr	r3, [r6, #0]
 800cd30:	4630      	mov	r0, r6
 800cd32:	68db      	ldr	r3, [r3, #12]
 800cd34:	4798      	blx	r3
 800cd36:	682b      	ldr	r3, [r5, #0]
 800cd38:	4628      	mov	r0, r5
 800cd3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cd40:	4718      	bx	r3
 800cd42:	bf00      	nop
 800cd44:	20012694 	.word	0x20012694

0800cd48 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 800cd48:	2300      	movs	r3, #0
 800cd4a:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 800cd4e:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 800cd52:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd54:	461a      	mov	r2, r3
 800cd56:	461c      	mov	r4, r3
 800cd58:	461d      	mov	r5, r3
 800cd5a:	459c      	cmp	ip, r3
 800cd5c:	dd1a      	ble.n	800cd94 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 800cd5e:	18c6      	adds	r6, r0, r3
 800cd60:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 800cd64:	b16e      	cbz	r6, 800cd82 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 800cd66:	429a      	cmp	r2, r3
 800cd68:	d008      	beq.n	800cd7c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 800cd6a:	fa1f fe82 	uxth.w	lr, r2
 800cd6e:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 800cd72:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 800cd76:	1887      	adds	r7, r0, r2
 800cd78:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 800cd7c:	3201      	adds	r2, #1
 800cd7e:	3301      	adds	r3, #1
 800cd80:	e7eb      	b.n	800cd5a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 800cd82:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 800cd86:	4299      	cmp	r1, r3
 800cd88:	bfa8      	it	ge
 800cd8a:	3501      	addge	r5, #1
 800cd8c:	429e      	cmp	r6, r3
 800cd8e:	bfc8      	it	gt
 800cd90:	3401      	addgt	r4, #1
 800cd92:	e7f4      	b.n	800cd7e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 800cd94:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 800cd98:	1b49      	subs	r1, r1, r5
 800cd9a:	1b1b      	subs	r3, r3, r4
 800cd9c:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 800cda0:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 800cda4:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	dd03      	ble.n	800cdb4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 800cdac:	3b01      	subs	r3, #1
 800cdae:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 800cdb2:	e7f7      	b.n	800cda4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 800cdb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800cdb8 <_ZN8touchgfx11Application15handleTickEventEv>:
 800cdb8:	b570      	push	{r4, r5, r6, lr}
 800cdba:	4d16      	ldr	r5, [pc, #88]	@ (800ce14 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 800cdbc:	4604      	mov	r4, r0
 800cdbe:	6828      	ldr	r0, [r5, #0]
 800cdc0:	b140      	cbz	r0, 800cdd4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800cdc2:	7a03      	ldrb	r3, [r0, #8]
 800cdc4:	b933      	cbnz	r3, 800cdd4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800cdc6:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 800cdca:	6803      	ldr	r3, [r0, #0]
 800cdcc:	689b      	ldr	r3, [r3, #8]
 800cdce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cdd2:	4718      	bx	r3
 800cdd4:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 800cdd8:	4e0f      	ldr	r6, [pc, #60]	@ (800ce18 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 800cdda:	b973      	cbnz	r3, 800cdfa <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800cddc:	b168      	cbz	r0, 800cdfa <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800cdde:	7a03      	ldrb	r3, [r0, #8]
 800cde0:	b15b      	cbz	r3, 800cdfa <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800cde2:	6830      	ldr	r0, [r6, #0]
 800cde4:	b110      	cbz	r0, 800cdec <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 800cde6:	6803      	ldr	r3, [r0, #0]
 800cde8:	691b      	ldr	r3, [r3, #16]
 800cdea:	4798      	blx	r3
 800cdec:	6828      	ldr	r0, [r5, #0]
 800cdee:	6803      	ldr	r3, [r0, #0]
 800cdf0:	68db      	ldr	r3, [r3, #12]
 800cdf2:	4798      	blx	r3
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 800cdfa:	3404      	adds	r4, #4
 800cdfc:	4620      	mov	r0, r4
 800cdfe:	f7ff ff5f 	bl	800ccc0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 800ce02:	4620      	mov	r0, r4
 800ce04:	f7ff ffa0 	bl	800cd48 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 800ce08:	6830      	ldr	r0, [r6, #0]
 800ce0a:	b110      	cbz	r0, 800ce12 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 800ce0c:	6803      	ldr	r3, [r0, #0]
 800ce0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce10:	e7dd      	b.n	800cdce <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 800ce12:	bd70      	pop	{r4, r5, r6, pc}
 800ce14:	20012698 	.word	0x20012698
 800ce18:	20012694 	.word	0x20012694

0800ce1c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 800ce22:	2200      	movs	r2, #0
 800ce24:	801a      	strh	r2, [r3, #0]
 800ce26:	805a      	strh	r2, [r3, #2]
 800ce28:	809a      	strh	r2, [r3, #4]
 800ce2a:	80da      	strh	r2, [r3, #6]
 800ce2c:	3308      	adds	r3, #8
 800ce2e:	428b      	cmp	r3, r1
 800ce30:	d1f8      	bne.n	800ce24 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 800ce32:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 800ce36:	4770      	bx	lr

0800ce38 <_ZN8touchgfx11ApplicationC1Ev>:
 800ce38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce3a:	4606      	mov	r6, r0
 800ce3c:	4b1c      	ldr	r3, [pc, #112]	@ (800ceb0 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 800ce3e:	f846 3b04 	str.w	r3, [r6], #4
 800ce42:	4604      	mov	r4, r0
 800ce44:	2500      	movs	r5, #0
 800ce46:	22a8      	movs	r2, #168	@ 0xa8
 800ce48:	2100      	movs	r1, #0
 800ce4a:	4630      	mov	r0, r6
 800ce4c:	f006 fca9 	bl	80137a2 <memset>
 800ce50:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 800ce54:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 800ce58:	f7ff ffe0 	bl	800ce1c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800ce5c:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 800ce60:	f7ff ffdc 	bl	800ce1c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800ce64:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 800ce68:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 800ce6c:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 800ce70:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 800ce74:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 800ce78:	490e      	ldr	r1, [pc, #56]	@ (800ceb4 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 800ce7a:	480f      	ldr	r0, [pc, #60]	@ (800ceb8 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 800ce7c:	4f0f      	ldr	r7, [pc, #60]	@ (800cebc <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 800ce7e:	f006 f913 	bl	80130a8 <CRC_Lock>
 800ce82:	4b0f      	ldr	r3, [pc, #60]	@ (800cec0 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 800ce84:	b158      	cbz	r0, 800ce9e <_ZN8touchgfx11ApplicationC1Ev+0x66>
 800ce86:	801d      	strh	r5, [r3, #0]
 800ce88:	4a0e      	ldr	r2, [pc, #56]	@ (800cec4 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	6013      	str	r3, [r2, #0]
 800ce8e:	4a0e      	ldr	r2, [pc, #56]	@ (800cec8 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 800ce90:	603b      	str	r3, [r7, #0]
 800ce92:	4630      	mov	r0, r6
 800ce94:	6013      	str	r3, [r2, #0]
 800ce96:	f7ff ff32 	bl	800ccfe <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800cea2:	2002      	movs	r0, #2
 800cea4:	801a      	strh	r2, [r3, #0]
 800cea6:	6038      	str	r0, [r7, #0]
 800cea8:	f001 fa36 	bl	800e318 <_ZN8touchgfx6Screen4drawEv>
 800ceac:	e7ec      	b.n	800ce88 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 800ceae:	bf00      	nop
 800ceb0:	08015bb0 	.word	0x08015bb0
 800ceb4:	b5e8b5cd 	.word	0xb5e8b5cd
 800ceb8:	f407a5c2 	.word	0xf407a5c2
 800cebc:	20012694 	.word	0x20012694
 800cec0:	20000084 	.word	0x20000084
 800cec4:	200126a4 	.word	0x200126a4
 800cec8:	20012698 	.word	0x20012698

0800cecc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 800cecc:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 800ced0:	3b01      	subs	r3, #1
 800ced2:	b29b      	uxth	r3, r3
 800ced4:	428b      	cmp	r3, r1
 800ced6:	b510      	push	{r4, lr}
 800ced8:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 800cedc:	d908      	bls.n	800cef0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 800cede:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800cee2:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 800cee6:	681a      	ldr	r2, [r3, #0]
 800cee8:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 800ceec:	685a      	ldr	r2, [r3, #4]
 800ceee:	6062      	str	r2, [r4, #4]
 800cef0:	bd10      	pop	{r4, pc}
	...

0800cef4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 800cef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cef8:	4b8f      	ldr	r3, [pc, #572]	@ (800d138 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 800cefa:	b08f      	sub	sp, #60	@ 0x3c
 800cefc:	ac0a      	add	r4, sp, #40	@ 0x28
 800cefe:	e884 0006 	stmia.w	r4, {r1, r2}
 800cf02:	f9b3 2000 	ldrsh.w	r2, [r3]
 800cf06:	4b8d      	ldr	r3, [pc, #564]	@ (800d13c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 800cf08:	4683      	mov	fp, r0
 800cf0a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800cf0e:	4620      	mov	r0, r4
 800cf10:	f7ff fdeb 	bl	800caea <_ZN8touchgfx4Rect10restrictToEss>
 800cf14:	4620      	mov	r0, r4
 800cf16:	f7fc f874 	bl	8009002 <_ZNK8touchgfx4Rect7isEmptyEv>
 800cf1a:	2800      	cmp	r0, #0
 800cf1c:	d16a      	bne.n	800cff4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800cf1e:	9403      	str	r4, [sp, #12]
 800cf20:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 800cf24:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 800cf28:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 800cf2c:	35a4      	adds	r5, #164	@ 0xa4
 800cf2e:	9301      	str	r3, [sp, #4]
 800cf30:	b15c      	cbz	r4, 800cf4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 800cf32:	4629      	mov	r1, r5
 800cf34:	9803      	ldr	r0, [sp, #12]
 800cf36:	f7ff fe29 	bl	800cb8c <_ZNK8touchgfx4Rect8includesERKS0_>
 800cf3a:	3c01      	subs	r4, #1
 800cf3c:	b118      	cbz	r0, 800cf46 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 800cf3e:	b2a1      	uxth	r1, r4
 800cf40:	9801      	ldr	r0, [sp, #4]
 800cf42:	f7ff ffc3 	bl	800cecc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800cf46:	3d08      	subs	r5, #8
 800cf48:	e7f2      	b.n	800cf30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 800cf4a:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 800cf4e:	f8cd a010 	str.w	sl, [sp, #16]
 800cf52:	f10a 33ff 	add.w	r3, sl, #4294967295
 800cf56:	9302      	str	r3, [sp, #8]
 800cf58:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800cf5c:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 800cf60:	9306      	str	r3, [sp, #24]
 800cf62:	445c      	add	r4, fp
 800cf64:	2500      	movs	r5, #0
 800cf66:	4626      	mov	r6, r4
 800cf68:	f8cd a014 	str.w	sl, [sp, #20]
 800cf6c:	462f      	mov	r7, r5
 800cf6e:	9b05      	ldr	r3, [sp, #20]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d073      	beq.n	800d05c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 800cf74:	9903      	ldr	r1, [sp, #12]
 800cf76:	4630      	mov	r0, r6
 800cf78:	f7ff fd95 	bl	800caa6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800cf7c:	b350      	cbz	r0, 800cfd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800cf7e:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 800cf82:	f9b6 c000 	ldrsh.w	ip, [r6]
 800cf86:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 800cf8a:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 800cf8e:	45e6      	cmp	lr, ip
 800cf90:	db33      	blt.n	800cffa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800cf92:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800cf96:	88b3      	ldrh	r3, [r6, #4]
 800cf98:	4472      	add	r2, lr
 800cf9a:	4463      	add	r3, ip
 800cf9c:	b212      	sxth	r2, r2
 800cf9e:	b21b      	sxth	r3, r3
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	dc2a      	bgt.n	800cffa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800cfa4:	88f3      	ldrh	r3, [r6, #6]
 800cfa6:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 800cfaa:	fa1f f289 	uxth.w	r2, r9
 800cfae:	4413      	add	r3, r2
 800cfb0:	b29b      	uxth	r3, r3
 800cfb2:	45c8      	cmp	r8, r9
 800cfb4:	fa1f fc88 	uxth.w	ip, r8
 800cfb8:	fa0f fe83 	sxth.w	lr, r3
 800cfbc:	db0f      	blt.n	800cfde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 800cfbe:	eba3 030c 	sub.w	r3, r3, ip
 800cfc2:	1ac9      	subs	r1, r1, r3
 800cfc4:	b209      	sxth	r1, r1
 800cfc6:	2900      	cmp	r1, #0
 800cfc8:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800cfcc:	dd12      	ble.n	800cff4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800cfce:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 800cfd2:	4605      	mov	r5, r0
 800cfd4:	9b05      	ldr	r3, [sp, #20]
 800cfd6:	3b01      	subs	r3, #1
 800cfd8:	9305      	str	r3, [sp, #20]
 800cfda:	3e08      	subs	r6, #8
 800cfdc:	e7c7      	b.n	800cf6e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 800cfde:	4461      	add	r1, ip
 800cfe0:	b209      	sxth	r1, r1
 800cfe2:	4571      	cmp	r1, lr
 800cfe4:	dc38      	bgt.n	800d058 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800cfe6:	eba2 020c 	sub.w	r2, r2, ip
 800cfea:	b212      	sxth	r2, r2
 800cfec:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 800cff0:	2a00      	cmp	r2, #0
 800cff2:	dcee      	bgt.n	800cfd2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800cff4:	b00f      	add	sp, #60	@ 0x3c
 800cff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cffa:	45c8      	cmp	r8, r9
 800cffc:	db2c      	blt.n	800d058 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800cffe:	88f3      	ldrh	r3, [r6, #6]
 800d000:	4499      	add	r9, r3
 800d002:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 800d006:	4498      	add	r8, r3
 800d008:	fa0f f989 	sxth.w	r9, r9
 800d00c:	fa0f f888 	sxth.w	r8, r8
 800d010:	45c1      	cmp	r9, r8
 800d012:	db21      	blt.n	800d058 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800d014:	88b3      	ldrh	r3, [r6, #4]
 800d016:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 800d01a:	fa1f f28c 	uxth.w	r2, ip
 800d01e:	4413      	add	r3, r2
 800d020:	b29b      	uxth	r3, r3
 800d022:	45e6      	cmp	lr, ip
 800d024:	fa1f f88e 	uxth.w	r8, lr
 800d028:	fa0f f983 	sxth.w	r9, r3
 800d02c:	db0a      	blt.n	800d044 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 800d02e:	eba3 0308 	sub.w	r3, r3, r8
 800d032:	1ac9      	subs	r1, r1, r3
 800d034:	b209      	sxth	r1, r1
 800d036:	2900      	cmp	r1, #0
 800d038:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 800d03c:	ddda      	ble.n	800cff4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800d03e:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 800d042:	e7c6      	b.n	800cfd2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800d044:	4441      	add	r1, r8
 800d046:	b209      	sxth	r1, r1
 800d048:	4549      	cmp	r1, r9
 800d04a:	dc05      	bgt.n	800d058 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800d04c:	eba2 0208 	sub.w	r2, r2, r8
 800d050:	b212      	sxth	r2, r2
 800d052:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 800d056:	e7cb      	b.n	800cff0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 800d058:	4607      	mov	r7, r0
 800d05a:	e7bb      	b.n	800cfd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800d05c:	2d00      	cmp	r5, #0
 800d05e:	d181      	bne.n	800cf64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 800d060:	2f00      	cmp	r7, #0
 800d062:	f000 81dd 	beq.w	800d420 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800d066:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 800d06a:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 800d06e:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 800d072:	b2b3      	uxth	r3, r6
 800d074:	9305      	str	r3, [sp, #20]
 800d076:	9a05      	ldr	r2, [sp, #20]
 800d078:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 800d07c:	4413      	add	r3, r2
 800d07e:	b2ba      	uxth	r2, r7
 800d080:	4492      	add	sl, r2
 800d082:	b29b      	uxth	r3, r3
 800d084:	fa1f fa8a 	uxth.w	sl, sl
 800d088:	fa0f f883 	sxth.w	r8, r3
 800d08c:	fa0f f98a 	sxth.w	r9, sl
 800d090:	e9cd 2307 	strd	r2, r3, [sp, #28]
 800d094:	9b04      	ldr	r3, [sp, #16]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d052      	beq.n	800d140 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 800d09a:	9903      	ldr	r1, [sp, #12]
 800d09c:	4620      	mov	r0, r4
 800d09e:	f7ff fd02 	bl	800caa6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800d0a2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d0a6:	b1c0      	cbz	r0, 800d0da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800d0a8:	f9b4 e000 	ldrsh.w	lr, [r4]
 800d0ac:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800d0b0:	4576      	cmp	r6, lr
 800d0b2:	dc22      	bgt.n	800d0fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800d0b4:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800d0b8:	44f4      	add	ip, lr
 800d0ba:	fa0f fc8c 	sxth.w	ip, ip
 800d0be:	45e0      	cmp	r8, ip
 800d0c0:	db1b      	blt.n	800d0fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800d0c2:	428f      	cmp	r7, r1
 800d0c4:	fa1f fc81 	uxth.w	ip, r1
 800d0c8:	88e1      	ldrh	r1, [r4, #6]
 800d0ca:	dc0d      	bgt.n	800d0e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 800d0cc:	ebaa 0c0c 	sub.w	ip, sl, ip
 800d0d0:	eba1 010c 	sub.w	r1, r1, ip
 800d0d4:	f8a4 9002 	strh.w	r9, [r4, #2]
 800d0d8:	80e1      	strh	r1, [r4, #6]
 800d0da:	4628      	mov	r0, r5
 800d0dc:	9904      	ldr	r1, [sp, #16]
 800d0de:	3901      	subs	r1, #1
 800d0e0:	9104      	str	r1, [sp, #16]
 800d0e2:	3c08      	subs	r4, #8
 800d0e4:	4605      	mov	r5, r0
 800d0e6:	e7d3      	b.n	800d090 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 800d0e8:	4461      	add	r1, ip
 800d0ea:	b209      	sxth	r1, r1
 800d0ec:	4549      	cmp	r1, r9
 800d0ee:	dcf5      	bgt.n	800d0dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800d0f0:	eba2 0c0c 	sub.w	ip, r2, ip
 800d0f4:	f8a4 c006 	strh.w	ip, [r4, #6]
 800d0f8:	e7ef      	b.n	800d0da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800d0fa:	428f      	cmp	r7, r1
 800d0fc:	dcee      	bgt.n	800d0dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800d0fe:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 800d102:	4461      	add	r1, ip
 800d104:	b209      	sxth	r1, r1
 800d106:	4589      	cmp	r9, r1
 800d108:	dbe8      	blt.n	800d0dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800d10a:	4576      	cmp	r6, lr
 800d10c:	fa1f fc8e 	uxth.w	ip, lr
 800d110:	88a1      	ldrh	r1, [r4, #4]
 800d112:	dc07      	bgt.n	800d124 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 800d114:	eba3 0c0c 	sub.w	ip, r3, ip
 800d118:	eba1 010c 	sub.w	r1, r1, ip
 800d11c:	f8a4 8000 	strh.w	r8, [r4]
 800d120:	80a1      	strh	r1, [r4, #4]
 800d122:	e7da      	b.n	800d0da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800d124:	4461      	add	r1, ip
 800d126:	b209      	sxth	r1, r1
 800d128:	4588      	cmp	r8, r1
 800d12a:	dbd7      	blt.n	800d0dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800d12c:	9905      	ldr	r1, [sp, #20]
 800d12e:	eba1 0c0c 	sub.w	ip, r1, ip
 800d132:	f8a4 c004 	strh.w	ip, [r4, #4]
 800d136:	e7d0      	b.n	800d0da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800d138:	2001264e 	.word	0x2001264e
 800d13c:	2001264c 	.word	0x2001264c
 800d140:	2d00      	cmp	r5, #0
 800d142:	f000 816d 	beq.w	800d420 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800d146:	9b06      	ldr	r3, [sp, #24]
 800d148:	445b      	add	r3, fp
 800d14a:	461c      	mov	r4, r3
 800d14c:	9b02      	ldr	r3, [sp, #8]
 800d14e:	3301      	adds	r3, #1
 800d150:	f000 8166 	beq.w	800d420 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800d154:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 800d158:	4629      	mov	r1, r5
 800d15a:	9803      	ldr	r0, [sp, #12]
 800d15c:	f7ff fd16 	bl	800cb8c <_ZNK8touchgfx4Rect8includesERKS0_>
 800d160:	b120      	cbz	r0, 800d16c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 800d162:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800d166:	9801      	ldr	r0, [sp, #4]
 800d168:	f7ff feb0 	bl	800cecc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800d16c:	9903      	ldr	r1, [sp, #12]
 800d16e:	4628      	mov	r0, r5
 800d170:	f7ff fc99 	bl	800caa6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800d174:	2800      	cmp	r0, #0
 800d176:	f000 809c 	beq.w	800d2b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 800d17a:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 800d17e:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800d182:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 800d186:	9309      	str	r3, [sp, #36]	@ 0x24
 800d188:	fa1f f189 	uxth.w	r1, r9
 800d18c:	eb01 0c03 	add.w	ip, r1, r3
 800d190:	fa1f fa8c 	uxth.w	sl, ip
 800d194:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 800d198:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 800d19c:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 800d1a0:	b283      	uxth	r3, r0
 800d1a2:	eb03 050c 	add.w	r5, r3, ip
 800d1a6:	b2ad      	uxth	r5, r5
 800d1a8:	9505      	str	r5, [sp, #20]
 800d1aa:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 800d1ae:	9504      	str	r5, [sp, #16]
 800d1b0:	4548      	cmp	r0, r9
 800d1b2:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 800d1b6:	f340 8099 	ble.w	800d2ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 800d1ba:	1a5b      	subs	r3, r3, r1
 800d1bc:	b29b      	uxth	r3, r3
 800d1be:	4596      	cmp	lr, r2
 800d1c0:	fa0f f08a 	sxth.w	r0, sl
 800d1c4:	b21e      	sxth	r6, r3
 800d1c6:	dd2e      	ble.n	800d226 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 800d1c8:	9f02      	ldr	r7, [sp, #8]
 800d1ca:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 800d1ce:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 800d1d2:	9f04      	ldr	r7, [sp, #16]
 800d1d4:	1a3f      	subs	r7, r7, r0
 800d1d6:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 800d1da:	fa1f fe8e 	uxth.w	lr, lr
 800d1de:	b292      	uxth	r2, r2
 800d1e0:	ebae 0102 	sub.w	r1, lr, r2
 800d1e4:	44a6      	add	lr, r4
 800d1e6:	4402      	add	r2, r0
 800d1e8:	b289      	uxth	r1, r1
 800d1ea:	fa0f fe8e 	sxth.w	lr, lr
 800d1ee:	b212      	sxth	r2, r2
 800d1f0:	b20d      	sxth	r5, r1
 800d1f2:	ebae 0202 	sub.w	r2, lr, r2
 800d1f6:	436f      	muls	r7, r5
 800d1f8:	4372      	muls	r2, r6
 800d1fa:	4297      	cmp	r7, r2
 800d1fc:	db09      	blt.n	800d212 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 800d1fe:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 800d202:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 800d206:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800d20a:	449c      	add	ip, r3
 800d20c:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 800d210:	e686      	b.n	800cf20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d212:	4421      	add	r1, r4
 800d214:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 800d218:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 800d21c:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800d220:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800d224:	e67c      	b.n	800cf20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d226:	9f04      	ldr	r7, [sp, #16]
 800d228:	42b8      	cmp	r0, r7
 800d22a:	da27      	bge.n	800d27c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 800d22c:	9902      	ldr	r1, [sp, #8]
 800d22e:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 800d232:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 800d236:	eb05 010e 	add.w	r1, r5, lr
 800d23a:	fa1f f881 	uxth.w	r8, r1
 800d23e:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 800d242:	4411      	add	r1, r2
 800d244:	eba1 0108 	sub.w	r1, r1, r8
 800d248:	b289      	uxth	r1, r1
 800d24a:	fa0f f988 	sxth.w	r9, r8
 800d24e:	eba2 020e 	sub.w	r2, r2, lr
 800d252:	fa0f f881 	sxth.w	r8, r1
 800d256:	1a3f      	subs	r7, r7, r0
 800d258:	4372      	muls	r2, r6
 800d25a:	fb08 f707 	mul.w	r7, r8, r7
 800d25e:	42ba      	cmp	r2, r7
 800d260:	dc06      	bgt.n	800d270 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 800d262:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 800d266:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 800d26a:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 800d26e:	e7ca      	b.n	800d206 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 800d270:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 800d274:	4429      	add	r1, r5
 800d276:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800d27a:	e651      	b.n	800cf20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d27c:	9805      	ldr	r0, [sp, #20]
 800d27e:	ebaa 0000 	sub.w	r0, sl, r0
 800d282:	b280      	uxth	r0, r0
 800d284:	2d06      	cmp	r5, #6
 800d286:	fa0f fe80 	sxth.w	lr, r0
 800d28a:	d817      	bhi.n	800d2bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 800d28c:	9b04      	ldr	r3, [sp, #16]
 800d28e:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 800d292:	1c6b      	adds	r3, r5, #1
 800d294:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 800d298:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 800d29c:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 800d2a0:	9b01      	ldr	r3, [sp, #4]
 800d2a2:	9801      	ldr	r0, [sp, #4]
 800d2a4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d2a8:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 800d2ac:	805a      	strh	r2, [r3, #2]
 800d2ae:	809e      	strh	r6, [r3, #4]
 800d2b0:	80d9      	strh	r1, [r3, #6]
 800d2b2:	9b02      	ldr	r3, [sp, #8]
 800d2b4:	3b01      	subs	r3, #1
 800d2b6:	9302      	str	r3, [sp, #8]
 800d2b8:	3c08      	subs	r4, #8
 800d2ba:	e747      	b.n	800d14c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 800d2bc:	9a02      	ldr	r2, [sp, #8]
 800d2be:	45b6      	cmp	lr, r6
 800d2c0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800d2c4:	db0d      	blt.n	800d2e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 800d2c6:	449c      	add	ip, r3
 800d2c8:	fa1f fc8c 	uxth.w	ip, ip
 800d2cc:	445a      	add	r2, fp
 800d2ce:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 800d2d2:	448c      	add	ip, r1
 800d2d4:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 800d2d8:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 800d2dc:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 800d2e0:	e61e      	b.n	800cf20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d2e2:	445a      	add	r2, fp
 800d2e4:	4484      	add	ip, r0
 800d2e6:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 800d2ea:	e78f      	b.n	800d20c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800d2ec:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 800d2f0:	fa1f f18e 	uxth.w	r1, lr
 800d2f4:	eb01 0806 	add.w	r8, r1, r6
 800d2f8:	b293      	uxth	r3, r2
 800d2fa:	fa1f f888 	uxth.w	r8, r8
 800d2fe:	9306      	str	r3, [sp, #24]
 800d300:	fa0f f388 	sxth.w	r3, r8
 800d304:	9307      	str	r3, [sp, #28]
 800d306:	9f06      	ldr	r7, [sp, #24]
 800d308:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 800d30c:	443b      	add	r3, r7
 800d30e:	b29b      	uxth	r3, r3
 800d310:	4596      	cmp	lr, r2
 800d312:	9308      	str	r3, [sp, #32]
 800d314:	da24      	bge.n	800d360 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 800d316:	9905      	ldr	r1, [sp, #20]
 800d318:	eba3 0308 	sub.w	r3, r3, r8
 800d31c:	ebaa 0401 	sub.w	r4, sl, r1
 800d320:	b2a4      	uxth	r4, r4
 800d322:	b29b      	uxth	r3, r3
 800d324:	b225      	sxth	r5, r4
 800d326:	b219      	sxth	r1, r3
 800d328:	eba2 020e 	sub.w	r2, r2, lr
 800d32c:	eba9 0000 	sub.w	r0, r9, r0
 800d330:	436a      	muls	r2, r5
 800d332:	4348      	muls	r0, r1
 800d334:	4282      	cmp	r2, r0
 800d336:	9a02      	ldr	r2, [sp, #8]
 800d338:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800d33c:	445a      	add	r2, fp
 800d33e:	dc06      	bgt.n	800d34e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 800d340:	9b07      	ldr	r3, [sp, #28]
 800d342:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 800d346:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 800d34a:	44a4      	add	ip, r4
 800d34c:	e75e      	b.n	800d20c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800d34e:	9904      	ldr	r1, [sp, #16]
 800d350:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 800d354:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 800d358:	4433      	add	r3, r6
 800d35a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800d35e:	e5df      	b.n	800cf20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d360:	9f06      	ldr	r7, [sp, #24]
 800d362:	9b04      	ldr	r3, [sp, #16]
 800d364:	1bc9      	subs	r1, r1, r7
 800d366:	fa0f f78a 	sxth.w	r7, sl
 800d36a:	b289      	uxth	r1, r1
 800d36c:	429f      	cmp	r7, r3
 800d36e:	fa0f fe81 	sxth.w	lr, r1
 800d372:	dd23      	ble.n	800d3bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 800d374:	9a05      	ldr	r2, [sp, #20]
 800d376:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800d37a:	9d07      	ldr	r5, [sp, #28]
 800d37c:	ebaa 0202 	sub.w	r2, sl, r2
 800d380:	b292      	uxth	r2, r2
 800d382:	eba5 0a03 	sub.w	sl, r5, r3
 800d386:	b214      	sxth	r4, r2
 800d388:	eba9 0000 	sub.w	r0, r9, r0
 800d38c:	9b02      	ldr	r3, [sp, #8]
 800d38e:	fb0e f000 	mul.w	r0, lr, r0
 800d392:	fb04 fa0a 	mul.w	sl, r4, sl
 800d396:	00db      	lsls	r3, r3, #3
 800d398:	4550      	cmp	r0, sl
 800d39a:	445b      	add	r3, fp
 800d39c:	db03      	blt.n	800d3a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 800d39e:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 800d3a2:	4494      	add	ip, r2
 800d3a4:	e732      	b.n	800d20c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800d3a6:	9a04      	ldr	r2, [sp, #16]
 800d3a8:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 800d3ac:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 800d3b0:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 800d3b4:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800d3b8:	4431      	add	r1, r6
 800d3ba:	e75c      	b.n	800d276 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 800d3bc:	9b08      	ldr	r3, [sp, #32]
 800d3be:	eba3 0308 	sub.w	r3, r3, r8
 800d3c2:	b29b      	uxth	r3, r3
 800d3c4:	2d06      	cmp	r5, #6
 800d3c6:	b218      	sxth	r0, r3
 800d3c8:	d813      	bhi.n	800d3f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 800d3ca:	9b07      	ldr	r3, [sp, #28]
 800d3cc:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 800d3d0:	1c6b      	adds	r3, r5, #1
 800d3d2:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 800d3d6:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 800d3da:	9b01      	ldr	r3, [sp, #4]
 800d3dc:	9901      	ldr	r1, [sp, #4]
 800d3de:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d3e2:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 800d3e6:	805a      	strh	r2, [r3, #2]
 800d3e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d3ea:	809a      	strh	r2, [r3, #4]
 800d3ec:	f8a3 e006 	strh.w	lr, [r3, #6]
 800d3f0:	e75f      	b.n	800d2b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 800d3f2:	9c02      	ldr	r4, [sp, #8]
 800d3f4:	4570      	cmp	r0, lr
 800d3f6:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800d3fa:	db0d      	blt.n	800d418 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 800d3fc:	4431      	add	r1, r6
 800d3fe:	9b06      	ldr	r3, [sp, #24]
 800d400:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 800d404:	b289      	uxth	r1, r1
 800d406:	445c      	add	r4, fp
 800d408:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800d40c:	4419      	add	r1, r3
 800d40e:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 800d412:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 800d416:	e583      	b.n	800cf20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d418:	445c      	add	r4, fp
 800d41a:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 800d41e:	e79b      	b.n	800d358 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 800d420:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 800d424:	1e65      	subs	r5, r4, #1
 800d426:	b2ad      	uxth	r5, r5
 800d428:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800d42c:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 800d430:	42b5      	cmp	r5, r6
 800d432:	d044      	beq.n	800d4be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 800d434:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 800d438:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 800d43c:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 800d440:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 800d444:	4282      	cmp	r2, r0
 800d446:	d11f      	bne.n	800d488 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 800d448:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 800d44c:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 800d450:	459c      	cmp	ip, r3
 800d452:	d119      	bne.n	800d488 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 800d454:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 800d458:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800d45c:	19d8      	adds	r0, r3, r7
 800d45e:	b200      	sxth	r0, r0
 800d460:	4288      	cmp	r0, r1
 800d462:	d109      	bne.n	800d478 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 800d464:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 800d468:	4413      	add	r3, r2
 800d46a:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 800d46e:	4629      	mov	r1, r5
 800d470:	9801      	ldr	r0, [sp, #4]
 800d472:	f7ff fd2b 	bl	800cecc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800d476:	e003      	b.n	800d480 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800d478:	4411      	add	r1, r2
 800d47a:	b209      	sxth	r1, r1
 800d47c:	42b9      	cmp	r1, r7
 800d47e:	d0f3      	beq.n	800d468 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 800d480:	3d01      	subs	r5, #1
 800d482:	b2ad      	uxth	r5, r5
 800d484:	3c08      	subs	r4, #8
 800d486:	e7d3      	b.n	800d430 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 800d488:	42b9      	cmp	r1, r7
 800d48a:	d1f9      	bne.n	800d480 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800d48c:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 800d490:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800d494:	4299      	cmp	r1, r3
 800d496:	d1f3      	bne.n	800d480 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800d498:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 800d49c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 800d4a0:	181f      	adds	r7, r3, r0
 800d4a2:	b23f      	sxth	r7, r7
 800d4a4:	42ba      	cmp	r2, r7
 800d4a6:	d105      	bne.n	800d4b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 800d4a8:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 800d4ac:	440b      	add	r3, r1
 800d4ae:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800d4b2:	e7dc      	b.n	800d46e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 800d4b4:	440a      	add	r2, r1
 800d4b6:	b212      	sxth	r2, r2
 800d4b8:	4290      	cmp	r0, r2
 800d4ba:	d1e1      	bne.n	800d480 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800d4bc:	e7f6      	b.n	800d4ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 800d4be:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 800d4c2:	2e07      	cmp	r6, #7
 800d4c4:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 800d4c8:	d812      	bhi.n	800d4f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 800d4ca:	1c75      	adds	r5, r6, #1
 800d4cc:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 800d4d0:	9d01      	ldr	r5, [sp, #4]
 800d4d2:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 800d4d6:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 800d4da:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 800d4de:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 800d4e2:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 800d4e6:	442c      	add	r4, r5
 800d4e8:	8061      	strh	r1, [r4, #2]
 800d4ea:	80a2      	strh	r2, [r4, #4]
 800d4ec:	80e3      	strh	r3, [r4, #6]
 800d4ee:	e581      	b.n	800cff4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800d4f0:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 800d4f4:	3e01      	subs	r6, #1
 800d4f6:	445c      	add	r4, fp
 800d4f8:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 800d4fc:	f04f 37ff 	mov.w	r7, #4294967295
 800d500:	2500      	movs	r5, #0
 800d502:	9305      	str	r3, [sp, #20]
 800d504:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800d508:	9302      	str	r3, [sp, #8]
 800d50a:	1e72      	subs	r2, r6, #1
 800d50c:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 800d510:	9304      	str	r3, [sp, #16]
 800d512:	4691      	mov	r9, r2
 800d514:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 800d518:	f1b9 3fff 	cmp.w	r9, #4294967295
 800d51c:	bf14      	ite	ne
 800d51e:	9905      	ldrne	r1, [sp, #20]
 800d520:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 800d524:	6818      	ldr	r0, [r3, #0]
 800d526:	9207      	str	r2, [sp, #28]
 800d528:	bf18      	it	ne
 800d52a:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 800d52e:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800d532:	f8be 1006 	ldrh.w	r1, [lr, #6]
 800d536:	f8be 8004 	ldrh.w	r8, [lr, #4]
 800d53a:	9306      	str	r3, [sp, #24]
 800d53c:	fb18 f801 	smulbb	r8, r8, r1
 800d540:	6859      	ldr	r1, [r3, #4]
 800d542:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800d546:	4671      	mov	r1, lr
 800d548:	a80c      	add	r0, sp, #48	@ 0x30
 800d54a:	f7ff fb45 	bl	800cbd8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800d54e:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 800d552:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 800d556:	9b04      	ldr	r3, [sp, #16]
 800d558:	9a02      	ldr	r2, [sp, #8]
 800d55a:	fb10 f001 	smulbb	r0, r0, r1
 800d55e:	fb02 8803 	mla	r8, r2, r3, r8
 800d562:	eba0 0108 	sub.w	r1, r0, r8
 800d566:	f04f 0c08 	mov.w	ip, #8
 800d56a:	fb90 f0fc 	sdiv	r0, r0, ip
 800d56e:	4288      	cmp	r0, r1
 800d570:	dc20      	bgt.n	800d5b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 800d572:	4551      	cmp	r1, sl
 800d574:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d578:	da03      	bge.n	800d582 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68e>
 800d57a:	b1d9      	cbz	r1, 800d5b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 800d57c:	468a      	mov	sl, r1
 800d57e:	464f      	mov	r7, r9
 800d580:	4635      	mov	r5, r6
 800d582:	f109 39ff 	add.w	r9, r9, #4294967295
 800d586:	f119 0f02 	cmn.w	r9, #2
 800d58a:	d1c5      	bne.n	800d518 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 800d58c:	4616      	mov	r6, r2
 800d58e:	3201      	adds	r2, #1
 800d590:	f1a4 0408 	sub.w	r4, r4, #8
 800d594:	d1b6      	bne.n	800d504 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 800d596:	9b01      	ldr	r3, [sp, #4]
 800d598:	b2ac      	uxth	r4, r5
 800d59a:	00ed      	lsls	r5, r5, #3
 800d59c:	1958      	adds	r0, r3, r5
 800d59e:	1c7b      	adds	r3, r7, #1
 800d5a0:	d10b      	bne.n	800d5ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c6>
 800d5a2:	4601      	mov	r1, r0
 800d5a4:	9803      	ldr	r0, [sp, #12]
 800d5a6:	f7ff fb17 	bl	800cbd8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800d5aa:	4621      	mov	r1, r4
 800d5ac:	9801      	ldr	r0, [sp, #4]
 800d5ae:	f7ff fc8d 	bl	800cecc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800d5b2:	e4b5      	b.n	800cf20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d5b4:	464f      	mov	r7, r9
 800d5b6:	4635      	mov	r5, r6
 800d5b8:	e7ed      	b.n	800d596 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a2>
 800d5ba:	9b01      	ldr	r3, [sp, #4]
 800d5bc:	00ff      	lsls	r7, r7, #3
 800d5be:	19d9      	adds	r1, r3, r7
 800d5c0:	f7ff fb0a 	bl	800cbd8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800d5c4:	9b03      	ldr	r3, [sp, #12]
 800d5c6:	cb03      	ldmia	r3!, {r0, r1}
 800d5c8:	445f      	add	r7, fp
 800d5ca:	445d      	add	r5, fp
 800d5cc:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 800d5d0:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 800d5d4:	f855 0fac 	ldr.w	r0, [r5, #172]!
 800d5d8:	9b03      	ldr	r3, [sp, #12]
 800d5da:	6869      	ldr	r1, [r5, #4]
 800d5dc:	c303      	stmia	r3!, {r0, r1}
 800d5de:	e7e4      	b.n	800d5aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b6>

0800d5e0 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 800d5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5e4:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 800d5e8:	b09b      	sub	sp, #108	@ 0x6c
 800d5ea:	4604      	mov	r4, r0
 800d5ec:	4630      	mov	r0, r6
 800d5ee:	f7fb fd08 	bl	8009002 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d5f2:	4605      	mov	r5, r0
 800d5f4:	b948      	cbnz	r0, 800d60a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 800d5f6:	6823      	ldr	r3, [r4, #0]
 800d5f8:	e896 0006 	ldmia.w	r6, {r1, r2}
 800d5fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5fe:	4620      	mov	r0, r4
 800d600:	4798      	blx	r3
 800d602:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 800d606:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 800d60a:	4bc6      	ldr	r3, [pc, #792]	@ (800d924 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d03f      	beq.n	800d692 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 800d612:	4dc5      	ldr	r5, [pc, #788]	@ (800d928 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 800d614:	4628      	mov	r0, r5
 800d616:	f7fb fcf4 	bl	8009002 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d61a:	4606      	mov	r6, r0
 800d61c:	2800      	cmp	r0, #0
 800d61e:	d138      	bne.n	800d692 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 800d620:	4628      	mov	r0, r5
 800d622:	f7ff f96d 	bl	800c900 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800d626:	6823      	ldr	r3, [r4, #0]
 800d628:	6829      	ldr	r1, [r5, #0]
 800d62a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d62c:	686a      	ldr	r2, [r5, #4]
 800d62e:	4620      	mov	r0, r4
 800d630:	4798      	blx	r3
 800d632:	802e      	strh	r6, [r5, #0]
 800d634:	806e      	strh	r6, [r5, #2]
 800d636:	80ae      	strh	r6, [r5, #4]
 800d638:	80ee      	strh	r6, [r5, #6]
 800d63a:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 800d63e:	4dbb      	ldr	r5, [pc, #748]	@ (800d92c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 800d640:	4640      	mov	r0, r8
 800d642:	f7ff fbeb 	bl	800ce1c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800d646:	882e      	ldrh	r6, [r5, #0]
 800d648:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 800d64c:	4633      	mov	r3, r6
 800d64e:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 800d652:	42bb      	cmp	r3, r7
 800d654:	d224      	bcs.n	800d6a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 800d656:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 800d65a:	2907      	cmp	r1, #7
 800d65c:	d816      	bhi.n	800d68c <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 800d65e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 800d662:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 800d666:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 800d66a:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 800d66e:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 800d672:	1c4a      	adds	r2, r1, #1
 800d674:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 800d678:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 800d67c:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 800d680:	f8a2 a002 	strh.w	sl, [r2, #2]
 800d684:	f8a2 e004 	strh.w	lr, [r2, #4]
 800d688:	f8a2 c006 	strh.w	ip, [r2, #6]
 800d68c:	3301      	adds	r3, #1
 800d68e:	b29b      	uxth	r3, r3
 800d690:	e7df      	b.n	800d652 <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 800d692:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800d696:	2b00      	cmp	r3, #0
 800d698:	d1cf      	bne.n	800d63a <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 800d69a:	b01b      	add	sp, #108	@ 0x6c
 800d69c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6a0:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 800d6a4:	42b3      	cmp	r3, r6
 800d6a6:	d90c      	bls.n	800d6c2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 800d6a8:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800d6ac:	6822      	ldr	r2, [r4, #0]
 800d6ae:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 800d6b2:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 800d6b4:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 800d6b8:	4620      	mov	r0, r4
 800d6ba:	3601      	adds	r6, #1
 800d6bc:	47b8      	blx	r7
 800d6be:	b2b6      	uxth	r6, r6
 800d6c0:	e7ee      	b.n	800d6a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 800d6c2:	4a9b      	ldr	r2, [pc, #620]	@ (800d930 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 800d6c4:	6813      	ldr	r3, [r2, #0]
 800d6c6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d6ca:	2b01      	cmp	r3, #1
 800d6cc:	4691      	mov	r9, r2
 800d6ce:	f040 80e2 	bne.w	800d896 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 800d6d2:	8829      	ldrh	r1, [r5, #0]
 800d6d4:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 800d6d8:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 800d6dc:	33ae      	adds	r3, #174	@ 0xae
 800d6de:	2600      	movs	r6, #0
 800d6e0:	428f      	cmp	r7, r1
 800d6e2:	f103 0308 	add.w	r3, r3, #8
 800d6e6:	dd0a      	ble.n	800d6fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 800d6e8:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 800d6ec:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 800d6f0:	4402      	add	r2, r0
 800d6f2:	b212      	sxth	r2, r2
 800d6f4:	4296      	cmp	r6, r2
 800d6f6:	bfb8      	it	lt
 800d6f8:	4616      	movlt	r6, r2
 800d6fa:	3101      	adds	r1, #1
 800d6fc:	e7f0      	b.n	800d6e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 800d6fe:	4b8d      	ldr	r3, [pc, #564]	@ (800d934 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 800d700:	f8df 922c 	ldr.w	r9, [pc, #556]	@ 800d930 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>
 800d704:	881b      	ldrh	r3, [r3, #0]
 800d706:	2b0f      	cmp	r3, #15
 800d708:	bf88      	it	hi
 800d70a:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 800d70e:	f04f 0300 	mov.w	r3, #0
 800d712:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800d716:	bf98      	it	ls
 800d718:	f04f 0b01 	movls.w	fp, #1
 800d71c:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 800d720:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 800d724:	4b82      	ldr	r3, [pc, #520]	@ (800d930 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 800d726:	4438      	add	r0, r7
 800d728:	b207      	sxth	r7, r0
 800d72a:	6818      	ldr	r0, [r3, #0]
 800d72c:	42b7      	cmp	r7, r6
 800d72e:	6803      	ldr	r3, [r0, #0]
 800d730:	f280 8083 	bge.w	800d83a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 800d734:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d738:	4798      	blx	r3
 800d73a:	eb07 030b 	add.w	r3, r7, fp
 800d73e:	4298      	cmp	r0, r3
 800d740:	da07      	bge.n	800d752 <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 800d742:	42b0      	cmp	r0, r6
 800d744:	da05      	bge.n	800d752 <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 800d746:	4287      	cmp	r7, r0
 800d748:	dd6c      	ble.n	800d824 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 800d74a:	2f00      	cmp	r7, #0
 800d74c:	dd6a      	ble.n	800d824 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 800d74e:	4630      	mov	r0, r6
 800d750:	e004      	b.n	800d75c <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 800d752:	4287      	cmp	r7, r0
 800d754:	dcfb      	bgt.n	800d74e <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 800d756:	42b0      	cmp	r0, r6
 800d758:	bfa8      	it	ge
 800d75a:	4630      	movge	r0, r6
 800d75c:	4b76      	ldr	r3, [pc, #472]	@ (800d938 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 800d75e:	f8ad 7016 	strh.w	r7, [sp, #22]
 800d762:	1bc0      	subs	r0, r0, r7
 800d764:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d768:	882f      	ldrh	r7, [r5, #0]
 800d76a:	f8ad 3018 	strh.w	r3, [sp, #24]
 800d76e:	2200      	movs	r2, #0
 800d770:	f8ad 2014 	strh.w	r2, [sp, #20]
 800d774:	f8ad 001a 	strh.w	r0, [sp, #26]
 800d778:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800d77c:	42bb      	cmp	r3, r7
 800d77e:	d9cd      	bls.n	800d71c <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 800d780:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 800d784:	ab07      	add	r3, sp, #28
 800d786:	f852 0fac 	ldr.w	r0, [r2, #172]!
 800d78a:	6851      	ldr	r1, [r2, #4]
 800d78c:	c303      	stmia	r3!, {r0, r1}
 800d78e:	a905      	add	r1, sp, #20
 800d790:	a807      	add	r0, sp, #28
 800d792:	f7ff f988 	bl	800caa6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800d796:	2800      	cmp	r0, #0
 800d798:	d04c      	beq.n	800d834 <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 800d79a:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 800d79e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 800d7a2:	f8bd a020 	ldrh.w	sl, [sp, #32]
 800d7a6:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 800d7aa:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800d7ae:	9302      	str	r3, [sp, #8]
 800d7b0:	4686      	mov	lr, r0
 800d7b2:	4290      	cmp	r0, r2
 800d7b4:	4450      	add	r0, sl
 800d7b6:	f8bd a018 	ldrh.w	sl, [sp, #24]
 800d7ba:	bfb8      	it	lt
 800d7bc:	4696      	movlt	lr, r2
 800d7be:	4452      	add	r2, sl
 800d7c0:	4299      	cmp	r1, r3
 800d7c2:	b280      	uxth	r0, r0
 800d7c4:	b292      	uxth	r2, r2
 800d7c6:	468c      	mov	ip, r1
 800d7c8:	fa0f fa82 	sxth.w	sl, r2
 800d7cc:	bfb8      	it	lt
 800d7ce:	469c      	movlt	ip, r3
 800d7d0:	b203      	sxth	r3, r0
 800d7d2:	4553      	cmp	r3, sl
 800d7d4:	bfb8      	it	lt
 800d7d6:	4602      	movlt	r2, r0
 800d7d8:	eba2 020e 	sub.w	r2, r2, lr
 800d7dc:	f8ad 2020 	strh.w	r2, [sp, #32]
 800d7e0:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 800d7e4:	9b02      	ldr	r3, [sp, #8]
 800d7e6:	f8ad e01c 	strh.w	lr, [sp, #28]
 800d7ea:	4411      	add	r1, r2
 800d7ec:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800d7f0:	f8ad c01e 	strh.w	ip, [sp, #30]
 800d7f4:	4413      	add	r3, r2
 800d7f6:	b289      	uxth	r1, r1
 800d7f8:	b29b      	uxth	r3, r3
 800d7fa:	b208      	sxth	r0, r1
 800d7fc:	b21a      	sxth	r2, r3
 800d7fe:	4290      	cmp	r0, r2
 800d800:	bfb8      	it	lt
 800d802:	460b      	movlt	r3, r1
 800d804:	eba3 030c 	sub.w	r3, r3, ip
 800d808:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800d80c:	a807      	add	r0, sp, #28
 800d80e:	f7fb fbf8 	bl	8009002 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d812:	b920      	cbnz	r0, 800d81e <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 800d814:	6823      	ldr	r3, [r4, #0]
 800d816:	a907      	add	r1, sp, #28
 800d818:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d81a:	4620      	mov	r0, r4
 800d81c:	4798      	blx	r3
 800d81e:	3701      	adds	r7, #1
 800d820:	b2bf      	uxth	r7, r7
 800d822:	e7a9      	b.n	800d778 <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 800d824:	f8d9 0000 	ldr.w	r0, [r9]
 800d828:	6803      	ldr	r3, [r0, #0]
 800d82a:	2101      	movs	r1, #1
 800d82c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d830:	4798      	blx	r3
 800d832:	e773      	b.n	800d71c <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 800d834:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800d838:	e7e8      	b.n	800d80c <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 800d83a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d83c:	4798      	blx	r3
 800d83e:	4b3f      	ldr	r3, [pc, #252]	@ (800d93c <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 800d840:	781b      	ldrb	r3, [r3, #0]
 800d842:	2b00      	cmp	r3, #0
 800d844:	f43f af29 	beq.w	800d69a <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 800d848:	2300      	movs	r3, #0
 800d84a:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 800d84e:	882b      	ldrh	r3, [r5, #0]
 800d850:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 800d854:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 800d858:	42ab      	cmp	r3, r5
 800d85a:	f4bf af1e 	bcs.w	800d69a <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 800d85e:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 800d862:	2907      	cmp	r1, #7
 800d864:	d814      	bhi.n	800d890 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 800d866:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 800d86a:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 800d86e:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 800d872:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 800d876:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 800d87a:	1c4a      	adds	r2, r1, #1
 800d87c:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 800d880:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 800d884:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 800d888:	f8a2 c002 	strh.w	ip, [r2, #2]
 800d88c:	8097      	strh	r7, [r2, #4]
 800d88e:	80d6      	strh	r6, [r2, #6]
 800d890:	3301      	adds	r3, #1
 800d892:	b29b      	uxth	r3, r3
 800d894:	e7e0      	b.n	800d858 <_ZN8touchgfx11Application15drawCachedAreasEv+0x278>
 800d896:	2b02      	cmp	r3, #2
 800d898:	f040 8133 	bne.w	800db02 <_ZN8touchgfx11Application15drawCachedAreasEv+0x522>
 800d89c:	4b28      	ldr	r3, [pc, #160]	@ (800d940 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 800d89e:	781b      	ldrb	r3, [r3, #0]
 800d8a0:	2b01      	cmp	r3, #1
 800d8a2:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 800d8a6:	f000 8098 	beq.w	800d9da <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 800d8aa:	882a      	ldrh	r2, [r5, #0]
 800d8ac:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 800d8b0:	3201      	adds	r2, #1
 800d8b2:	b292      	uxth	r2, r2
 800d8b4:	2900      	cmp	r1, #0
 800d8b6:	d0c2      	beq.n	800d83e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 800d8b8:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 800d8bc:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 800d8c0:	441e      	add	r6, r3
 800d8c2:	b236      	sxth	r6, r6
 800d8c4:	4694      	mov	ip, r2
 800d8c6:	f04f 0900 	mov.w	r9, #0
 800d8ca:	fa1f f38c 	uxth.w	r3, ip
 800d8ce:	4299      	cmp	r1, r3
 800d8d0:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 800d8d4:	f240 80bf 	bls.w	800da56 <_ZN8touchgfx11Application15drawCachedAreasEv+0x476>
 800d8d8:	4427      	add	r7, r4
 800d8da:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 800d8de:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 800d8e2:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 800d8e6:	4283      	cmp	r3, r0
 800d8e8:	f340 80a1 	ble.w	800da2e <_ZN8touchgfx11Application15drawCachedAreasEv+0x44e>
 800d8ec:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 800d8f0:	4406      	add	r6, r0
 800d8f2:	b236      	sxth	r6, r6
 800d8f4:	429e      	cmp	r6, r3
 800d8f6:	bfa8      	it	ge
 800d8f8:	461e      	movge	r6, r3
 800d8fa:	46e1      	mov	r9, ip
 800d8fc:	f10c 0c01 	add.w	ip, ip, #1
 800d900:	e7e3      	b.n	800d8ca <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ea>
 800d902:	d10a      	bne.n	800d91a <_ZN8touchgfx11Application15drawCachedAreasEv+0x33a>
 800d904:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 800d908:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 800d90c:	4562      	cmp	r2, ip
 800d90e:	bfb8      	it	lt
 800d910:	4662      	movlt	r2, ip
 800d912:	4288      	cmp	r0, r1
 800d914:	bfb8      	it	lt
 800d916:	461f      	movlt	r7, r3
 800d918:	e087      	b.n	800da2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 800d91a:	428a      	cmp	r2, r1
 800d91c:	bfb8      	it	lt
 800d91e:	460a      	movlt	r2, r1
 800d920:	e083      	b.n	800da2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 800d922:	bf00      	nop
 800d924:	20012690 	.word	0x20012690
 800d928:	2001269c 	.word	0x2001269c
 800d92c:	20000084 	.word	0x20000084
 800d930:	20012658 	.word	0x20012658
 800d934:	2001264e 	.word	0x2001264e
 800d938:	2001264c 	.word	0x2001264c
 800d93c:	20012656 	.word	0x20012656
 800d940:	20012650 	.word	0x20012650
 800d944:	19a1      	adds	r1, r4, r6
 800d946:	ab07      	add	r3, sp, #28
 800d948:	f851 0fac 	ldr.w	r0, [r1, #172]!
 800d94c:	6849      	ldr	r1, [r1, #4]
 800d94e:	c303      	stmia	r3!, {r0, r1}
 800d950:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800d954:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800d958:	2b13      	cmp	r3, #19
 800d95a:	bfd8      	it	le
 800d95c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 800d960:	f8ad 201c 	strh.w	r2, [sp, #28]
 800d964:	440b      	add	r3, r1
 800d966:	1a9b      	subs	r3, r3, r2
 800d968:	a807      	add	r0, sp, #28
 800d96a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800d96e:	f7fe ffe1 	bl	800c934 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800d972:	a807      	add	r0, sp, #28
 800d974:	f7fb fb45 	bl	8009002 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d978:	bb78      	cbnz	r0, 800d9da <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 800d97a:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 800d97e:	f8d9 0000 	ldr.w	r0, [r9]
 800d982:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800d986:	f8d0 e000 	ldr.w	lr, [r0]
 800d98a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800d98e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800d992:	f1bc 0f14 	cmp.w	ip, #20
 800d996:	bfa8      	it	ge
 800d998:	f04f 0c14 	movge.w	ip, #20
 800d99c:	fa1f fc8c 	uxth.w	ip, ip
 800d9a0:	f8cd c000 	str.w	ip, [sp]
 800d9a4:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 800d9a8:	47d8      	blx	fp
 800d9aa:	4683      	mov	fp, r0
 800d9ac:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 800d9b0:	a807      	add	r0, sp, #28
 800d9b2:	f7fe ffa5 	bl	800c900 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800d9b6:	6823      	ldr	r3, [r4, #0]
 800d9b8:	4426      	add	r6, r4
 800d9ba:	4620      	mov	r0, r4
 800d9bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d9be:	a907      	add	r1, sp, #28
 800d9c0:	4798      	blx	r3
 800d9c2:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 800d9c6:	eba0 000b 	sub.w	r0, r0, fp
 800d9ca:	b200      	sxth	r0, r0
 800d9cc:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 800d9d0:	b918      	cbnz	r0, 800d9da <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 800d9d2:	b2b9      	uxth	r1, r7
 800d9d4:	4650      	mov	r0, sl
 800d9d6:	f7ff fa79 	bl	800cecc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800d9da:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 800d9de:	f1bb 0f00 	cmp.w	fp, #0
 800d9e2:	f43f af2c 	beq.w	800d83e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 800d9e6:	882b      	ldrh	r3, [r5, #0]
 800d9e8:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 800d9ec:	3301      	adds	r3, #1
 800d9ee:	b29b      	uxth	r3, r3
 800d9f0:	2700      	movs	r7, #0
 800d9f2:	b299      	uxth	r1, r3
 800d9f4:	458b      	cmp	fp, r1
 800d9f6:	ea4f 06c7 	mov.w	r6, r7, lsl #3
 800d9fa:	d9a3      	bls.n	800d944 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>
 800d9fc:	4426      	add	r6, r4
 800d9fe:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 800da02:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 800da06:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 800da0a:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 800da0e:	4408      	add	r0, r1
 800da10:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 800da14:	4461      	add	r1, ip
 800da16:	b200      	sxth	r0, r0
 800da18:	b209      	sxth	r1, r1
 800da1a:	4288      	cmp	r0, r1
 800da1c:	f6bf af71 	bge.w	800d902 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 800da20:	4584      	cmp	ip, r0
 800da22:	4662      	mov	r2, ip
 800da24:	461f      	mov	r7, r3
 800da26:	bfb8      	it	lt
 800da28:	4602      	movlt	r2, r0
 800da2a:	3301      	adds	r3, #1
 800da2c:	e7e1      	b.n	800d9f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x412>
 800da2e:	d10e      	bne.n	800da4e <_ZN8touchgfx11Application15drawCachedAreasEv+0x46e>
 800da30:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 800da34:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 800da38:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 800da3c:	4473      	add	r3, lr
 800da3e:	b21b      	sxth	r3, r3
 800da40:	429e      	cmp	r6, r3
 800da42:	bfa8      	it	ge
 800da44:	461e      	movge	r6, r3
 800da46:	4287      	cmp	r7, r0
 800da48:	bfb8      	it	lt
 800da4a:	46e1      	movlt	r9, ip
 800da4c:	e756      	b.n	800d8fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 800da4e:	4286      	cmp	r6, r0
 800da50:	bfa8      	it	ge
 800da52:	4606      	movge	r6, r0
 800da54:	e752      	b.n	800d8fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 800da56:	eb0a 0007 	add.w	r0, sl, r7
 800da5a:	4427      	add	r7, r4
 800da5c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800da60:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 800da64:	f1bb 0f13 	cmp.w	fp, #19
 800da68:	bfde      	ittt	le
 800da6a:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 800da6e:	445e      	addle	r6, fp
 800da70:	b236      	sxthle	r6, r6
 800da72:	f7fb fac6 	bl	8009002 <_ZNK8touchgfx4Rect7isEmptyEv>
 800da76:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800da7a:	2800      	cmp	r0, #0
 800da7c:	f47f af1a 	bne.w	800d8b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d4>
 800da80:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 800da84:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 800da88:	482a      	ldr	r0, [pc, #168]	@ (800db34 <_ZN8touchgfx11Application15drawCachedAreasEv+0x554>)
 800da8a:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 800da8e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 800da92:	6800      	ldr	r0, [r0, #0]
 800da94:	f8ad 101c 	strh.w	r1, [sp, #28]
 800da98:	1ab6      	subs	r6, r6, r2
 800da9a:	2e14      	cmp	r6, #20
 800da9c:	f8ad 201e 	strh.w	r2, [sp, #30]
 800daa0:	f8ad 3020 	strh.w	r3, [sp, #32]
 800daa4:	bfa8      	it	ge
 800daa6:	2614      	movge	r6, #20
 800daa8:	f8d0 c000 	ldr.w	ip, [r0]
 800daac:	b2b6      	uxth	r6, r6
 800daae:	fa1f fb8b 	uxth.w	fp, fp
 800dab2:	455e      	cmp	r6, fp
 800dab4:	bf94      	ite	ls
 800dab6:	9600      	strls	r6, [sp, #0]
 800dab8:	f8cd b000 	strhi.w	fp, [sp]
 800dabc:	b292      	uxth	r2, r2
 800dabe:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 800dac2:	b29b      	uxth	r3, r3
 800dac4:	b289      	uxth	r1, r1
 800dac6:	47b0      	blx	r6
 800dac8:	6823      	ldr	r3, [r4, #0]
 800daca:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 800dace:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dad0:	a907      	add	r1, sp, #28
 800dad2:	4620      	mov	r0, r4
 800dad4:	4798      	blx	r3
 800dad6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800dada:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800dade:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 800dae2:	1a5b      	subs	r3, r3, r1
 800dae4:	440a      	add	r2, r1
 800dae6:	b21b      	sxth	r3, r3
 800dae8:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 800daec:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	f47f aeda 	bne.w	800d8aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 800daf6:	fa1f f189 	uxth.w	r1, r9
 800dafa:	4650      	mov	r0, sl
 800dafc:	f7ff f9e6 	bl	800cecc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800db00:	e6d3      	b.n	800d8aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 800db02:	882e      	ldrh	r6, [r5, #0]
 800db04:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800db08:	42b3      	cmp	r3, r6
 800db0a:	f67f ae98 	bls.w	800d83e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 800db0e:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 800db12:	ab07      	add	r3, sp, #28
 800db14:	f852 0fac 	ldr.w	r0, [r2, #172]!
 800db18:	6851      	ldr	r1, [r2, #4]
 800db1a:	c303      	stmia	r3!, {r0, r1}
 800db1c:	a807      	add	r0, sp, #28
 800db1e:	f7fb fa70 	bl	8009002 <_ZNK8touchgfx4Rect7isEmptyEv>
 800db22:	b920      	cbnz	r0, 800db2e <_ZN8touchgfx11Application15drawCachedAreasEv+0x54e>
 800db24:	6823      	ldr	r3, [r4, #0]
 800db26:	a907      	add	r1, sp, #28
 800db28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800db2a:	4620      	mov	r0, r4
 800db2c:	4798      	blx	r3
 800db2e:	3601      	adds	r6, #1
 800db30:	b2b6      	uxth	r6, r6
 800db32:	e7e7      	b.n	800db04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x524>
 800db34:	20012658 	.word	0x20012658

0800db38 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 800db38:	4b03      	ldr	r3, [pc, #12]	@ (800db48 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 800db3a:	2200      	movs	r2, #0
 800db3c:	801a      	strh	r2, [r3, #0]
 800db3e:	805a      	strh	r2, [r3, #2]
 800db40:	809a      	strh	r2, [r3, #4]
 800db42:	80da      	strh	r2, [r3, #6]
 800db44:	4770      	bx	lr
 800db46:	bf00      	nop
 800db48:	2001269c 	.word	0x2001269c

0800db4c <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list>:
 800db4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db50:	4604      	mov	r4, r0
 800db52:	b09c      	sub	sp, #112	@ 0x70
 800db54:	a803      	add	r0, sp, #12
 800db56:	4615      	mov	r5, r2
 800db58:	460e      	mov	r6, r1
 800db5a:	461f      	mov	r7, r3
 800db5c:	f000 fd89 	bl	800e672 <_ZN8touchgfx12TextProviderC1Ev>
 800db60:	6823      	ldr	r3, [r4, #0]
 800db62:	4620      	mov	r0, r4
 800db64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800db66:	4798      	blx	r3
 800db68:	6823      	ldr	r3, [r4, #0]
 800db6a:	4680      	mov	r8, r0
 800db6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db6e:	4620      	mov	r0, r4
 800db70:	4798      	blx	r3
 800db72:	4629      	mov	r1, r5
 800db74:	9000      	str	r0, [sp, #0]
 800db76:	4643      	mov	r3, r8
 800db78:	463a      	mov	r2, r7
 800db7a:	a803      	add	r0, sp, #12
 800db7c:	f000 fdd4 	bl	800e728 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800db80:	2500      	movs	r5, #0
 800db82:	a803      	add	r0, sp, #12
 800db84:	f000 fd9c 	bl	800e6c0 <_ZN8touchgfx12TextProvider11endOfStringEv>
 800db88:	b958      	cbnz	r0, 800dba2 <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list+0x56>
 800db8a:	4633      	mov	r3, r6
 800db8c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800db90:	4621      	mov	r1, r4
 800db92:	a803      	add	r0, sp, #12
 800db94:	f7fd fce7 	bl	800b566 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800db98:	b203      	sxth	r3, r0
 800db9a:	42ab      	cmp	r3, r5
 800db9c:	bfc8      	it	gt
 800db9e:	4605      	movgt	r5, r0
 800dba0:	e7ef      	b.n	800db82 <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list+0x36>
 800dba2:	4628      	mov	r0, r5
 800dba4:	b01c      	add	sp, #112	@ 0x70
 800dba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dbaa <_ZNK8touchgfx4Font12getCharWidthEt>:
 800dbaa:	b508      	push	{r3, lr}
 800dbac:	6803      	ldr	r3, [r0, #0]
 800dbae:	68db      	ldr	r3, [r3, #12]
 800dbb0:	4798      	blx	r3
 800dbb2:	b128      	cbz	r0, 800dbc0 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 800dbb4:	7b43      	ldrb	r3, [r0, #13]
 800dbb6:	7a80      	ldrb	r0, [r0, #10]
 800dbb8:	005b      	lsls	r3, r3, #1
 800dbba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dbbe:	4318      	orrs	r0, r3
 800dbc0:	bd08      	pop	{r3, pc}

0800dbc2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 800dbc2:	b40e      	push	{r1, r2, r3}
 800dbc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbc6:	b09e      	sub	sp, #120	@ 0x78
 800dbc8:	ab23      	add	r3, sp, #140	@ 0x8c
 800dbca:	4605      	mov	r5, r0
 800dbcc:	f853 4b04 	ldr.w	r4, [r3], #4
 800dbd0:	9303      	str	r3, [sp, #12]
 800dbd2:	a805      	add	r0, sp, #20
 800dbd4:	f000 fd4d 	bl	800e672 <_ZN8touchgfx12TextProviderC1Ev>
 800dbd8:	682b      	ldr	r3, [r5, #0]
 800dbda:	4628      	mov	r0, r5
 800dbdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dbde:	4798      	blx	r3
 800dbe0:	682b      	ldr	r3, [r5, #0]
 800dbe2:	4606      	mov	r6, r0
 800dbe4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dbe6:	4628      	mov	r0, r5
 800dbe8:	4798      	blx	r3
 800dbea:	4633      	mov	r3, r6
 800dbec:	ae1e      	add	r6, sp, #120	@ 0x78
 800dbee:	4621      	mov	r1, r4
 800dbf0:	9000      	str	r0, [sp, #0]
 800dbf2:	9a03      	ldr	r2, [sp, #12]
 800dbf4:	2400      	movs	r4, #0
 800dbf6:	a805      	add	r0, sp, #20
 800dbf8:	f000 fd96 	bl	800e728 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800dbfc:	f846 4d68 	str.w	r4, [r6, #-104]!
 800dc00:	462a      	mov	r2, r5
 800dc02:	4633      	mov	r3, r6
 800dc04:	4621      	mov	r1, r4
 800dc06:	a805      	add	r0, sp, #20
 800dc08:	f001 fcea 	bl	800f5e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800dc0c:	b1f0      	cbz	r0, 800dc4c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 800dc0e:	280a      	cmp	r0, #10
 800dc10:	d018      	beq.n	800dc44 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 800dc12:	9f04      	ldr	r7, [sp, #16]
 800dc14:	b1b7      	cbz	r7, 800dc44 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 800dc16:	7b78      	ldrb	r0, [r7, #13]
 800dc18:	7a3b      	ldrb	r3, [r7, #8]
 800dc1a:	88ea      	ldrh	r2, [r5, #6]
 800dc1c:	00c1      	lsls	r1, r0, #3
 800dc1e:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800dc22:	4319      	orrs	r1, r3
 800dc24:	0643      	lsls	r3, r0, #25
 800dc26:	bf44      	itt	mi
 800dc28:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 800dc2c:	b219      	sxthmi	r1, r3
 800dc2e:	0100      	lsls	r0, r0, #4
 800dc30:	79fb      	ldrb	r3, [r7, #7]
 800dc32:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 800dc36:	4303      	orrs	r3, r0
 800dc38:	4413      	add	r3, r2
 800dc3a:	1a5b      	subs	r3, r3, r1
 800dc3c:	b21b      	sxth	r3, r3
 800dc3e:	429c      	cmp	r4, r3
 800dc40:	bfb8      	it	lt
 800dc42:	461c      	movlt	r4, r3
 800dc44:	4633      	mov	r3, r6
 800dc46:	462a      	mov	r2, r5
 800dc48:	2100      	movs	r1, #0
 800dc4a:	e7dc      	b.n	800dc06 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 800dc4c:	b2a0      	uxth	r0, r4
 800dc4e:	b01e      	add	sp, #120	@ 0x78
 800dc50:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800dc54:	b003      	add	sp, #12
 800dc56:	4770      	bx	lr

0800dc58 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 800dc58:	7a43      	ldrb	r3, [r0, #9]
 800dc5a:	8880      	ldrh	r0, [r0, #4]
 800dc5c:	4418      	add	r0, r3
 800dc5e:	b280      	uxth	r0, r0
 800dc60:	4770      	bx	lr

0800dc62 <_ZNK8touchgfx4Font13getFontHeightEv>:
 800dc62:	6803      	ldr	r3, [r0, #0]
 800dc64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc66:	4718      	bx	r3

0800dc68 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 800dc68:	b40e      	push	{r1, r2, r3}
 800dc6a:	b570      	push	{r4, r5, r6, lr}
 800dc6c:	b09d      	sub	sp, #116	@ 0x74
 800dc6e:	ab21      	add	r3, sp, #132	@ 0x84
 800dc70:	4604      	mov	r4, r0
 800dc72:	f853 5b04 	ldr.w	r5, [r3], #4
 800dc76:	9302      	str	r3, [sp, #8]
 800dc78:	a803      	add	r0, sp, #12
 800dc7a:	f000 fcfa 	bl	800e672 <_ZN8touchgfx12TextProviderC1Ev>
 800dc7e:	6823      	ldr	r3, [r4, #0]
 800dc80:	4620      	mov	r0, r4
 800dc82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dc84:	4798      	blx	r3
 800dc86:	6823      	ldr	r3, [r4, #0]
 800dc88:	4606      	mov	r6, r0
 800dc8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc8c:	4620      	mov	r0, r4
 800dc8e:	4798      	blx	r3
 800dc90:	4633      	mov	r3, r6
 800dc92:	9000      	str	r0, [sp, #0]
 800dc94:	9a02      	ldr	r2, [sp, #8]
 800dc96:	4629      	mov	r1, r5
 800dc98:	a803      	add	r0, sp, #12
 800dc9a:	f000 fd45 	bl	800e728 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800dc9e:	a803      	add	r0, sp, #12
 800dca0:	f001 fd6c 	bl	800f77c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800dca4:	2401      	movs	r4, #1
 800dca6:	b2a3      	uxth	r3, r4
 800dca8:	b140      	cbz	r0, 800dcbc <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 800dcaa:	280a      	cmp	r0, #10
 800dcac:	bf08      	it	eq
 800dcae:	3301      	addeq	r3, #1
 800dcb0:	a803      	add	r0, sp, #12
 800dcb2:	bf08      	it	eq
 800dcb4:	b21c      	sxtheq	r4, r3
 800dcb6:	f001 fd61 	bl	800f77c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800dcba:	e7f4      	b.n	800dca6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	b01d      	add	sp, #116	@ 0x74
 800dcc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dcc4:	b003      	add	sp, #12
 800dcc6:	4770      	bx	lr

0800dcc8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 800dcc8:	b40e      	push	{r1, r2, r3}
 800dcca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dccc:	b09e      	sub	sp, #120	@ 0x78
 800dcce:	ab23      	add	r3, sp, #140	@ 0x8c
 800dcd0:	4604      	mov	r4, r0
 800dcd2:	f853 5b04 	ldr.w	r5, [r3], #4
 800dcd6:	9303      	str	r3, [sp, #12]
 800dcd8:	a805      	add	r0, sp, #20
 800dcda:	f000 fcca 	bl	800e672 <_ZN8touchgfx12TextProviderC1Ev>
 800dcde:	6823      	ldr	r3, [r4, #0]
 800dce0:	4620      	mov	r0, r4
 800dce2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dce4:	4798      	blx	r3
 800dce6:	6823      	ldr	r3, [r4, #0]
 800dce8:	4606      	mov	r6, r0
 800dcea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dcec:	4620      	mov	r0, r4
 800dcee:	4798      	blx	r3
 800dcf0:	4633      	mov	r3, r6
 800dcf2:	4629      	mov	r1, r5
 800dcf4:	9000      	str	r0, [sp, #0]
 800dcf6:	9a03      	ldr	r2, [sp, #12]
 800dcf8:	a805      	add	r0, sp, #20
 800dcfa:	ad1e      	add	r5, sp, #120	@ 0x78
 800dcfc:	f000 fd14 	bl	800e728 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800dd00:	2100      	movs	r1, #0
 800dd02:	f845 1d68 	str.w	r1, [r5, #-104]!
 800dd06:	4622      	mov	r2, r4
 800dd08:	462b      	mov	r3, r5
 800dd0a:	a805      	add	r0, sp, #20
 800dd0c:	f001 fc68 	bl	800f5e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800dd10:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 800dd14:	b1d8      	cbz	r0, 800dd4e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 800dd16:	280a      	cmp	r0, #10
 800dd18:	d012      	beq.n	800dd40 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800dd1a:	9804      	ldr	r0, [sp, #16]
 800dd1c:	b180      	cbz	r0, 800dd40 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800dd1e:	7b47      	ldrb	r7, [r0, #13]
 800dd20:	88e2      	ldrh	r2, [r4, #6]
 800dd22:	00fb      	lsls	r3, r7, #3
 800dd24:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800dd28:	7a03      	ldrb	r3, [r0, #8]
 800dd2a:	430b      	orrs	r3, r1
 800dd2c:	0679      	lsls	r1, r7, #25
 800dd2e:	bf44      	itt	mi
 800dd30:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800dd34:	b21b      	sxthmi	r3, r3
 800dd36:	1ad3      	subs	r3, r2, r3
 800dd38:	b21b      	sxth	r3, r3
 800dd3a:	429e      	cmp	r6, r3
 800dd3c:	bfa8      	it	ge
 800dd3e:	461e      	movge	r6, r3
 800dd40:	462b      	mov	r3, r5
 800dd42:	4622      	mov	r2, r4
 800dd44:	2100      	movs	r1, #0
 800dd46:	a805      	add	r0, sp, #20
 800dd48:	f001 fc4a 	bl	800f5e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800dd4c:	e7e2      	b.n	800dd14 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 800dd4e:	4630      	mov	r0, r6
 800dd50:	b01e      	add	sp, #120	@ 0x78
 800dd52:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800dd56:	b003      	add	sp, #12
 800dd58:	4770      	bx	lr

0800dd5a <_ZNK8touchgfx8Drawable10invalidateEv>:
 800dd5a:	b513      	push	{r0, r1, r4, lr}
 800dd5c:	6803      	ldr	r3, [r0, #0]
 800dd5e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800dd62:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800dd66:	f8ad 1004 	strh.w	r1, [sp, #4]
 800dd6a:	2400      	movs	r4, #0
 800dd6c:	9400      	str	r4, [sp, #0]
 800dd6e:	f8ad 2006 	strh.w	r2, [sp, #6]
 800dd72:	691b      	ldr	r3, [r3, #16]
 800dd74:	4669      	mov	r1, sp
 800dd76:	4798      	blx	r3
 800dd78:	b002      	add	sp, #8
 800dd7a:	bd10      	pop	{r4, pc}

0800dd7c <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 800dd7c:	b538      	push	{r3, r4, r5, lr}
 800dd7e:	680b      	ldr	r3, [r1, #0]
 800dd80:	460c      	mov	r4, r1
 800dd82:	68db      	ldr	r3, [r3, #12]
 800dd84:	4605      	mov	r5, r0
 800dd86:	4798      	blx	r3
 800dd88:	6823      	ldr	r3, [r4, #0]
 800dd8a:	4620      	mov	r0, r4
 800dd8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd8e:	4629      	mov	r1, r5
 800dd90:	4798      	blx	r3
 800dd92:	4628      	mov	r0, r5
 800dd94:	bd38      	pop	{r3, r4, r5, pc}

0800dd96 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 800dd96:	b410      	push	{r4}
 800dd98:	880a      	ldrh	r2, [r1, #0]
 800dd9a:	8884      	ldrh	r4, [r0, #4]
 800dd9c:	4422      	add	r2, r4
 800dd9e:	800a      	strh	r2, [r1, #0]
 800dda0:	88c4      	ldrh	r4, [r0, #6]
 800dda2:	884a      	ldrh	r2, [r1, #2]
 800dda4:	4422      	add	r2, r4
 800dda6:	804a      	strh	r2, [r1, #2]
 800dda8:	6940      	ldr	r0, [r0, #20]
 800ddaa:	b120      	cbz	r0, 800ddb6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 800ddac:	6803      	ldr	r3, [r0, #0]
 800ddae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ddb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ddb4:	4718      	bx	r3
 800ddb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ddba:	4770      	bx	lr

0800ddbc <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 800ddbc:	b570      	push	{r4, r5, r6, lr}
 800ddbe:	8882      	ldrh	r2, [r0, #4]
 800ddc0:	880b      	ldrh	r3, [r1, #0]
 800ddc2:	4413      	add	r3, r2
 800ddc4:	800b      	strh	r3, [r1, #0]
 800ddc6:	88c2      	ldrh	r2, [r0, #6]
 800ddc8:	884b      	ldrh	r3, [r1, #2]
 800ddca:	460c      	mov	r4, r1
 800ddcc:	4413      	add	r3, r2
 800ddce:	804b      	strh	r3, [r1, #2]
 800ddd0:	4605      	mov	r5, r0
 800ddd2:	1d01      	adds	r1, r0, #4
 800ddd4:	4620      	mov	r0, r4
 800ddd6:	f7fb f8d1 	bl	8008f7c <_ZN8touchgfx4RectaNERKS0_>
 800ddda:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	dd0b      	ble.n	800ddfa <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800dde2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	dd07      	ble.n	800ddfa <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800ddea:	6968      	ldr	r0, [r5, #20]
 800ddec:	b128      	cbz	r0, 800ddfa <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800ddee:	6803      	ldr	r3, [r0, #0]
 800ddf0:	4621      	mov	r1, r4
 800ddf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ddf8:	4718      	bx	r3
 800ddfa:	bd70      	pop	{r4, r5, r6, pc}

0800ddfc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 800ddfc:	b570      	push	{r4, r5, r6, lr}
 800ddfe:	8882      	ldrh	r2, [r0, #4]
 800de00:	880b      	ldrh	r3, [r1, #0]
 800de02:	4413      	add	r3, r2
 800de04:	800b      	strh	r3, [r1, #0]
 800de06:	88c2      	ldrh	r2, [r0, #6]
 800de08:	884b      	ldrh	r3, [r1, #2]
 800de0a:	460c      	mov	r4, r1
 800de0c:	4413      	add	r3, r2
 800de0e:	804b      	strh	r3, [r1, #2]
 800de10:	4605      	mov	r5, r0
 800de12:	1d01      	adds	r1, r0, #4
 800de14:	4620      	mov	r0, r4
 800de16:	f7fb f8b1 	bl	8008f7c <_ZN8touchgfx4RectaNERKS0_>
 800de1a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	dd19      	ble.n	800de56 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 800de22:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800de26:	2b00      	cmp	r3, #0
 800de28:	dd15      	ble.n	800de56 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 800de2a:	6968      	ldr	r0, [r5, #20]
 800de2c:	b128      	cbz	r0, 800de3a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 800de2e:	6803      	ldr	r3, [r0, #0]
 800de30:	4621      	mov	r1, r4
 800de32:	691b      	ldr	r3, [r3, #16]
 800de34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de38:	4718      	bx	r3
 800de3a:	4b07      	ldr	r3, [pc, #28]	@ (800de58 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	3304      	adds	r3, #4
 800de40:	429d      	cmp	r5, r3
 800de42:	d108      	bne.n	800de56 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 800de44:	f7fe ff0e 	bl	800cc64 <_ZN8touchgfx11Application11getInstanceEv>
 800de48:	6803      	ldr	r3, [r0, #0]
 800de4a:	6821      	ldr	r1, [r4, #0]
 800de4c:	6862      	ldr	r2, [r4, #4]
 800de4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de54:	4718      	bx	r3
 800de56:	bd70      	pop	{r4, r5, r6, pc}
 800de58:	20012694 	.word	0x20012694

0800de5c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 800de5c:	b570      	push	{r4, r5, r6, lr}
 800de5e:	4604      	mov	r4, r0
 800de60:	4616      	mov	r6, r2
 800de62:	460d      	mov	r5, r1
 800de64:	b901      	cbnz	r1, 800de68 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 800de66:	b192      	cbz	r2, 800de8e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 800de68:	6823      	ldr	r3, [r4, #0]
 800de6a:	4620      	mov	r0, r4
 800de6c:	699b      	ldr	r3, [r3, #24]
 800de6e:	4798      	blx	r3
 800de70:	88e2      	ldrh	r2, [r4, #6]
 800de72:	88a1      	ldrh	r1, [r4, #4]
 800de74:	4432      	add	r2, r6
 800de76:	4429      	add	r1, r5
 800de78:	4620      	mov	r0, r4
 800de7a:	b212      	sxth	r2, r2
 800de7c:	b209      	sxth	r1, r1
 800de7e:	f7f4 fdff 	bl	8002a80 <_ZN8touchgfx8Drawable5setXYEss>
 800de82:	6823      	ldr	r3, [r4, #0]
 800de84:	4620      	mov	r0, r4
 800de86:	699b      	ldr	r3, [r3, #24]
 800de88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de8c:	4718      	bx	r3
 800de8e:	bd70      	pop	{r4, r5, r6, pc}

0800de90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 800de90:	b510      	push	{r4, lr}
 800de92:	4604      	mov	r4, r0
 800de94:	4608      	mov	r0, r1
 800de96:	2300      	movs	r3, #0
 800de98:	8023      	strh	r3, [r4, #0]
 800de9a:	8063      	strh	r3, [r4, #2]
 800de9c:	6803      	ldr	r3, [r0, #0]
 800de9e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800dea2:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 800dea6:	80a1      	strh	r1, [r4, #4]
 800dea8:	80e2      	strh	r2, [r4, #6]
 800deaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800deac:	4621      	mov	r1, r4
 800deae:	4798      	blx	r3
 800deb0:	4620      	mov	r0, r4
 800deb2:	bd10      	pop	{r4, pc}

0800deb4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 800deb4:	b530      	push	{r4, r5, lr}
 800deb6:	8083      	strh	r3, [r0, #4]
 800deb8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800debc:	80c3      	strh	r3, [r0, #6]
 800debe:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800dec2:	7203      	strb	r3, [r0, #8]
 800dec4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800dec8:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800decc:	7243      	strb	r3, [r0, #9]
 800dece:	7a83      	ldrb	r3, [r0, #10]
 800ded0:	6141      	str	r1, [r0, #20]
 800ded2:	f365 0306 	bfi	r3, r5, #0, #7
 800ded6:	f89d 501c 	ldrb.w	r5, [sp, #28]
 800deda:	8302      	strh	r2, [r0, #24]
 800dedc:	f365 13c7 	bfi	r3, r5, #7, #1
 800dee0:	7283      	strb	r3, [r0, #10]
 800dee2:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800dee6:	72c3      	strb	r3, [r0, #11]
 800dee8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800deec:	7303      	strb	r3, [r0, #12]
 800deee:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 800def2:	81c3      	strh	r3, [r0, #14]
 800def4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 800def8:	8203      	strh	r3, [r0, #16]
 800defa:	4b01      	ldr	r3, [pc, #4]	@ (800df00 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 800defc:	6003      	str	r3, [r0, #0]
 800defe:	bd30      	pop	{r4, r5, pc}
 800df00:	08015c04 	.word	0x08015c04

0800df04 <_ZNK8touchgfx9ConstFont4findEt>:
 800df04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df06:	6944      	ldr	r4, [r0, #20]
 800df08:	b3bc      	cbz	r4, 800df7a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800df0a:	88a3      	ldrh	r3, [r4, #4]
 800df0c:	8b02      	ldrh	r2, [r0, #24]
 800df0e:	1acb      	subs	r3, r1, r3
 800df10:	f102 32ff 	add.w	r2, r2, #4294967295
 800df14:	d431      	bmi.n	800df7a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800df16:	4293      	cmp	r3, r2
 800df18:	dd0c      	ble.n	800df34 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 800df1a:	230e      	movs	r3, #14
 800df1c:	fb03 4302 	mla	r3, r3, r2, r4
 800df20:	889b      	ldrh	r3, [r3, #4]
 800df22:	1a5b      	subs	r3, r3, r1
 800df24:	1ad3      	subs	r3, r2, r3
 800df26:	429a      	cmp	r2, r3
 800df28:	db27      	blt.n	800df7a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	bfbc      	itt	lt
 800df2e:	2302      	movlt	r3, #2
 800df30:	fb92 f3f3 	sdivlt	r3, r2, r3
 800df34:	2500      	movs	r5, #0
 800df36:	260e      	movs	r6, #14
 800df38:	4295      	cmp	r5, r2
 800df3a:	dc1e      	bgt.n	800df7a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800df3c:	fb06 4003 	mla	r0, r6, r3, r4
 800df40:	8887      	ldrh	r7, [r0, #4]
 800df42:	42b9      	cmp	r1, r7
 800df44:	d01a      	beq.n	800df7c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 800df46:	d20d      	bcs.n	800df64 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 800df48:	1e5a      	subs	r2, r3, #1
 800df4a:	4295      	cmp	r5, r2
 800df4c:	dc15      	bgt.n	800df7a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800df4e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 800df52:	1a5b      	subs	r3, r3, r1
 800df54:	1ad3      	subs	r3, r2, r3
 800df56:	429a      	cmp	r2, r3
 800df58:	db0f      	blt.n	800df7a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800df5a:	429d      	cmp	r5, r3
 800df5c:	ddec      	ble.n	800df38 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800df5e:	1953      	adds	r3, r2, r5
 800df60:	105b      	asrs	r3, r3, #1
 800df62:	e7e9      	b.n	800df38 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800df64:	1c5d      	adds	r5, r3, #1
 800df66:	42aa      	cmp	r2, r5
 800df68:	db07      	blt.n	800df7a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800df6a:	8a43      	ldrh	r3, [r0, #18]
 800df6c:	1acb      	subs	r3, r1, r3
 800df6e:	442b      	add	r3, r5
 800df70:	429d      	cmp	r5, r3
 800df72:	dc02      	bgt.n	800df7a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800df74:	429a      	cmp	r2, r3
 800df76:	dadf      	bge.n	800df38 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800df78:	e7f1      	b.n	800df5e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 800df7a:	2000      	movs	r0, #0
 800df7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800df7e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 800df7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df80:	4604      	mov	r4, r0
 800df82:	4617      	mov	r7, r2
 800df84:	461e      	mov	r6, r3
 800df86:	b911      	cbnz	r1, 800df8e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 800df88:	2500      	movs	r5, #0
 800df8a:	4628      	mov	r0, r5
 800df8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df8e:	290a      	cmp	r1, #10
 800df90:	d0fa      	beq.n	800df88 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800df92:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 800df96:	4291      	cmp	r1, r2
 800df98:	d0f6      	beq.n	800df88 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800df9a:	f242 020b 	movw	r2, #8203	@ 0x200b
 800df9e:	4291      	cmp	r1, r2
 800dfa0:	d0f2      	beq.n	800df88 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800dfa2:	f7ff ffaf 	bl	800df04 <_ZNK8touchgfx9ConstFont4findEt>
 800dfa6:	4605      	mov	r5, r0
 800dfa8:	b950      	cbnz	r0, 800dfc0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 800dfaa:	6823      	ldr	r3, [r4, #0]
 800dfac:	4620      	mov	r0, r4
 800dfae:	691b      	ldr	r3, [r3, #16]
 800dfb0:	4798      	blx	r3
 800dfb2:	4601      	mov	r1, r0
 800dfb4:	4620      	mov	r0, r4
 800dfb6:	f7ff ffa5 	bl	800df04 <_ZNK8touchgfx9ConstFont4findEt>
 800dfba:	4605      	mov	r5, r0
 800dfbc:	2800      	cmp	r0, #0
 800dfbe:	d0e3      	beq.n	800df88 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800dfc0:	6823      	ldr	r3, [r4, #0]
 800dfc2:	4629      	mov	r1, r5
 800dfc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dfc6:	4620      	mov	r0, r4
 800dfc8:	4798      	blx	r3
 800dfca:	6038      	str	r0, [r7, #0]
 800dfcc:	6823      	ldr	r3, [r4, #0]
 800dfce:	4620      	mov	r0, r4
 800dfd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dfd2:	4798      	blx	r3
 800dfd4:	7030      	strb	r0, [r6, #0]
 800dfd6:	e7d8      	b.n	800df8a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0800dfd8 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 800dfd8:	2000      	movs	r0, #0
 800dfda:	4770      	bx	lr

0800dfdc <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 800dfdc:	2001      	movs	r0, #1
 800dfde:	4770      	bx	lr

0800dfe0 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 800dfe0:	2002      	movs	r0, #2
 800dfe2:	4770      	bx	lr

0800dfe4 <_ZN8touchgfx6ScreenD1Ev>:
 800dfe4:	4770      	bx	lr

0800dfe6 <_ZN8touchgfx12GestureEventD1Ev>:
 800dfe6:	4770      	bx	lr

0800dfe8 <_ZN8touchgfx9DragEventD1Ev>:
 800dfe8:	4770      	bx	lr

0800dfea <_ZN8touchgfx10ClickEventD1Ev>:
 800dfea:	4770      	bx	lr

0800dfec <_ZN8touchgfx10ClickEventD0Ev>:
 800dfec:	b510      	push	{r4, lr}
 800dfee:	210c      	movs	r1, #12
 800dff0:	4604      	mov	r4, r0
 800dff2:	f005 f9a1 	bl	8013338 <_ZdlPvj>
 800dff6:	4620      	mov	r0, r4
 800dff8:	bd10      	pop	{r4, pc}

0800dffa <_ZN8touchgfx9DragEventD0Ev>:
 800dffa:	b510      	push	{r4, lr}
 800dffc:	2110      	movs	r1, #16
 800dffe:	4604      	mov	r4, r0
 800e000:	f005 f99a 	bl	8013338 <_ZdlPvj>
 800e004:	4620      	mov	r0, r4
 800e006:	bd10      	pop	{r4, pc}

0800e008 <_ZN8touchgfx12GestureEventD0Ev>:
 800e008:	b510      	push	{r4, lr}
 800e00a:	210c      	movs	r1, #12
 800e00c:	4604      	mov	r4, r0
 800e00e:	f005 f993 	bl	8013338 <_ZdlPvj>
 800e012:	4620      	mov	r0, r4
 800e014:	bd10      	pop	{r4, pc}

0800e016 <_ZN8touchgfx6ScreenD0Ev>:
 800e016:	b510      	push	{r4, lr}
 800e018:	213c      	movs	r1, #60	@ 0x3c
 800e01a:	4604      	mov	r4, r0
 800e01c:	f005 f98c 	bl	8013338 <_ZdlPvj>
 800e020:	4620      	mov	r0, r4
 800e022:	bd10      	pop	{r4, pc}

0800e024 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 800e024:	b530      	push	{r4, r5, lr}
 800e026:	460d      	mov	r5, r1
 800e028:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800e02a:	b087      	sub	sp, #28
 800e02c:	4604      	mov	r4, r0
 800e02e:	b301      	cbz	r1, 800e072 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 800e030:	a801      	add	r0, sp, #4
 800e032:	f7ff ff2d 	bl	800de90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e036:	892a      	ldrh	r2, [r5, #8]
 800e038:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800e03c:	7928      	ldrb	r0, [r5, #4]
 800e03e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 800e042:	f88d 0010 	strb.w	r0, [sp, #16]
 800e046:	1ad2      	subs	r2, r2, r3
 800e048:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800e04a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800e04c:	f8ad 1012 	strh.w	r1, [sp, #18]
 800e050:	441a      	add	r2, r3
 800e052:	896b      	ldrh	r3, [r5, #10]
 800e054:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 800e058:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e05c:	1b5b      	subs	r3, r3, r5
 800e05e:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 800e060:	442b      	add	r3, r5
 800e062:	4d05      	ldr	r5, [pc, #20]	@ (800e078 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 800e064:	9503      	str	r5, [sp, #12]
 800e066:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e06a:	6803      	ldr	r3, [r0, #0]
 800e06c:	a903      	add	r1, sp, #12
 800e06e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e070:	4798      	blx	r3
 800e072:	b007      	add	sp, #28
 800e074:	bd30      	pop	{r4, r5, pc}
 800e076:	bf00      	nop
 800e078:	08015c94 	.word	0x08015c94

0800e07c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 800e07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e080:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e082:	b08a      	sub	sp, #40	@ 0x28
 800e084:	4604      	mov	r4, r0
 800e086:	460d      	mov	r5, r1
 800e088:	b113      	cbz	r3, 800e090 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 800e08a:	790b      	ldrb	r3, [r1, #4]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d044      	beq.n	800e11a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800e090:	f104 0804 	add.w	r8, r4, #4
 800e094:	4641      	mov	r1, r8
 800e096:	a803      	add	r0, sp, #12
 800e098:	f7ff fefa 	bl	800de90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e09c:	792b      	ldrb	r3, [r5, #4]
 800e09e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 800e0a2:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 800e0a6:	b983      	cbnz	r3, 800e0ca <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 800e0a8:	892a      	ldrh	r2, [r5, #8]
 800e0aa:	88e9      	ldrh	r1, [r5, #6]
 800e0ac:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 800e0b0:	1b92      	subs	r2, r2, r6
 800e0b2:	1bc9      	subs	r1, r1, r7
 800e0b4:	9301      	str	r3, [sp, #4]
 800e0b6:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 800e0ba:	9300      	str	r3, [sp, #0]
 800e0bc:	b212      	sxth	r2, r2
 800e0be:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 800e0c2:	b209      	sxth	r1, r1
 800e0c4:	4640      	mov	r0, r8
 800e0c6:	f7fa fe75 	bl	8008db4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 800e0ca:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e0cc:	b329      	cbz	r1, 800e11a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800e0ce:	a805      	add	r0, sp, #20
 800e0d0:	f7ff fede 	bl	800de90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e0d4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800e0d8:	792b      	ldrb	r3, [r5, #4]
 800e0da:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800e0dc:	f88d 3020 	strb.w	r3, [sp, #32]
 800e0e0:	1abf      	subs	r7, r7, r2
 800e0e2:	88ea      	ldrh	r2, [r5, #6]
 800e0e4:	4417      	add	r7, r2
 800e0e6:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 800e0e8:	4417      	add	r7, r2
 800e0ea:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800e0ee:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 800e0f2:	1ab6      	subs	r6, r6, r2
 800e0f4:	892a      	ldrh	r2, [r5, #8]
 800e0f6:	4416      	add	r6, r2
 800e0f8:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800e0fa:	4416      	add	r6, r2
 800e0fc:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 800e100:	4a07      	ldr	r2, [pc, #28]	@ (800e120 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 800e102:	9207      	str	r2, [sp, #28]
 800e104:	2600      	movs	r6, #0
 800e106:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 800e10a:	6803      	ldr	r3, [r0, #0]
 800e10c:	a907      	add	r1, sp, #28
 800e10e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e110:	4798      	blx	r3
 800e112:	792b      	ldrb	r3, [r5, #4]
 800e114:	b10b      	cbz	r3, 800e11a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800e116:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 800e11a:	b00a      	add	sp, #40	@ 0x28
 800e11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e120:	08015c6c 	.word	0x08015c6c

0800e124 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 800e124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e128:	460c      	mov	r4, r1
 800e12a:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800e12c:	b088      	sub	sp, #32
 800e12e:	4605      	mov	r5, r0
 800e130:	2900      	cmp	r1, #0
 800e132:	d06d      	beq.n	800e210 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 800e134:	4668      	mov	r0, sp
 800e136:	f7ff feab 	bl	800de90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e13a:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 800e13c:	88e3      	ldrh	r3, [r4, #6]
 800e13e:	f9bd 8000 	ldrsh.w	r8, [sp]
 800e142:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 800e146:	440b      	add	r3, r1
 800e148:	b21b      	sxth	r3, r3
 800e14a:	4543      	cmp	r3, r8
 800e14c:	db31      	blt.n	800e1b2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e14e:	f8bd c004 	ldrh.w	ip, [sp, #4]
 800e152:	44c4      	add	ip, r8
 800e154:	fa0f fc8c 	sxth.w	ip, ip
 800e158:	4563      	cmp	r3, ip
 800e15a:	da2a      	bge.n	800e1b2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e15c:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 800e15e:	8926      	ldrh	r6, [r4, #8]
 800e160:	4416      	add	r6, r2
 800e162:	b236      	sxth	r6, r6
 800e164:	42be      	cmp	r6, r7
 800e166:	db24      	blt.n	800e1b2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e168:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800e16c:	4438      	add	r0, r7
 800e16e:	b200      	sxth	r0, r0
 800e170:	4286      	cmp	r6, r0
 800e172:	da1e      	bge.n	800e1b2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e174:	8963      	ldrh	r3, [r4, #10]
 800e176:	4419      	add	r1, r3
 800e178:	b209      	sxth	r1, r1
 800e17a:	4541      	cmp	r1, r8
 800e17c:	db08      	blt.n	800e190 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800e17e:	4561      	cmp	r1, ip
 800e180:	da06      	bge.n	800e190 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800e182:	89a3      	ldrh	r3, [r4, #12]
 800e184:	441a      	add	r2, r3
 800e186:	b212      	sxth	r2, r2
 800e188:	42ba      	cmp	r2, r7
 800e18a:	db01      	blt.n	800e190 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800e18c:	4282      	cmp	r2, r0
 800e18e:	db10      	blt.n	800e1b2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e190:	4b21      	ldr	r3, [pc, #132]	@ (800e218 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 800e192:	9304      	str	r3, [sp, #16]
 800e194:	2302      	movs	r3, #2
 800e196:	f88d 3014 	strb.w	r3, [sp, #20]
 800e19a:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800e19c:	2300      	movs	r3, #0
 800e19e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e1a2:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e1a6:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e1aa:	6803      	ldr	r3, [r0, #0]
 800e1ac:	a904      	add	r1, sp, #16
 800e1ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e1b0:	4798      	blx	r3
 800e1b2:	1d29      	adds	r1, r5, #4
 800e1b4:	a802      	add	r0, sp, #8
 800e1b6:	f7ff fe6b 	bl	800de90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e1ba:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800e1be:	88e0      	ldrh	r0, [r4, #6]
 800e1c0:	7921      	ldrb	r1, [r4, #4]
 800e1c2:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 800e1c6:	8922      	ldrh	r2, [r4, #8]
 800e1c8:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 800e1ca:	f88d 1014 	strb.w	r1, [sp, #20]
 800e1ce:	eba3 0808 	sub.w	r8, r3, r8
 800e1d2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800e1d6:	1bdf      	subs	r7, r3, r7
 800e1d8:	b2bb      	uxth	r3, r7
 800e1da:	fa1f f888 	uxth.w	r8, r8
 800e1de:	8967      	ldrh	r7, [r4, #10]
 800e1e0:	89a4      	ldrh	r4, [r4, #12]
 800e1e2:	4440      	add	r0, r8
 800e1e4:	4460      	add	r0, ip
 800e1e6:	441a      	add	r2, r3
 800e1e8:	44b8      	add	r8, r7
 800e1ea:	4423      	add	r3, r4
 800e1ec:	f8ad 0016 	strh.w	r0, [sp, #22]
 800e1f0:	4433      	add	r3, r6
 800e1f2:	4432      	add	r2, r6
 800e1f4:	44e0      	add	r8, ip
 800e1f6:	4c09      	ldr	r4, [pc, #36]	@ (800e21c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 800e1f8:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800e1fa:	9404      	str	r4, [sp, #16]
 800e1fc:	f8ad 2018 	strh.w	r2, [sp, #24]
 800e200:	f8ad 801a 	strh.w	r8, [sp, #26]
 800e204:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e208:	6803      	ldr	r3, [r0, #0]
 800e20a:	a904      	add	r1, sp, #16
 800e20c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e20e:	4798      	blx	r3
 800e210:	b008      	add	sp, #32
 800e212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e216:	bf00      	nop
 800e218:	08015c6c 	.word	0x08015c6c
 800e21c:	08015c80 	.word	0x08015c80

0800e220 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 800e220:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e222:	4604      	mov	r4, r0
 800e224:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 800e228:	3201      	adds	r2, #1
 800e22a:	d112      	bne.n	800e252 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 800e22c:	6803      	ldr	r3, [r0, #0]
 800e22e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800e232:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800e236:	f8ad 1004 	strh.w	r1, [sp, #4]
 800e23a:	2500      	movs	r5, #0
 800e23c:	9500      	str	r5, [sp, #0]
 800e23e:	466d      	mov	r5, sp
 800e240:	4629      	mov	r1, r5
 800e242:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e248:	4798      	blx	r3
 800e24a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e24e:	e884 0003 	stmia.w	r4, {r0, r1}
 800e252:	4620      	mov	r0, r4
 800e254:	b003      	add	sp, #12
 800e256:	bd30      	pop	{r4, r5, pc}

0800e258 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 800e258:	b513      	push	{r0, r1, r4, lr}
 800e25a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 800e25e:	3301      	adds	r3, #1
 800e260:	4604      	mov	r4, r0
 800e262:	d109      	bne.n	800e278 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 800e264:	4601      	mov	r1, r0
 800e266:	4668      	mov	r0, sp
 800e268:	f7ff fe12 	bl	800de90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e26c:	f8bd 3000 	ldrh.w	r3, [sp]
 800e270:	8423      	strh	r3, [r4, #32]
 800e272:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e276:	8463      	strh	r3, [r4, #34]	@ 0x22
 800e278:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 800e27c:	b002      	add	sp, #8
 800e27e:	bd10      	pop	{r4, pc}

0800e280 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 800e280:	b513      	push	{r0, r1, r4, lr}
 800e282:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 800e286:	3301      	adds	r3, #1
 800e288:	4604      	mov	r4, r0
 800e28a:	d109      	bne.n	800e2a0 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 800e28c:	4601      	mov	r1, r0
 800e28e:	4668      	mov	r0, sp
 800e290:	f7ff fdfe 	bl	800de90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e294:	f8bd 3000 	ldrh.w	r3, [sp]
 800e298:	8423      	strh	r3, [r4, #32]
 800e29a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e29e:	8463      	strh	r3, [r4, #34]	@ 0x22
 800e2a0:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 800e2a4:	b002      	add	sp, #8
 800e2a6:	bd10      	pop	{r4, pc}

0800e2a8 <_ZN8touchgfx6ScreenC1Ev>:
 800e2a8:	b570      	push	{r4, r5, r6, lr}
 800e2aa:	4605      	mov	r5, r0
 800e2ac:	4b16      	ldr	r3, [pc, #88]	@ (800e308 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 800e2ae:	f845 3b04 	str.w	r3, [r5], #4
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	8103      	strh	r3, [r0, #8]
 800e2b6:	8143      	strh	r3, [r0, #10]
 800e2b8:	8183      	strh	r3, [r0, #12]
 800e2ba:	81c3      	strh	r3, [r0, #14]
 800e2bc:	8203      	strh	r3, [r0, #16]
 800e2be:	8243      	strh	r3, [r0, #18]
 800e2c0:	8283      	strh	r3, [r0, #20]
 800e2c2:	82c3      	strh	r3, [r0, #22]
 800e2c4:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800e2c8:	6203      	str	r3, [r0, #32]
 800e2ca:	8483      	strh	r3, [r0, #36]	@ 0x24
 800e2cc:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800e2ce:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 800e2d2:	4a0e      	ldr	r2, [pc, #56]	@ (800e30c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 800e2d4:	6343      	str	r3, [r0, #52]	@ 0x34
 800e2d6:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 800e2da:	4b0d      	ldr	r3, [pc, #52]	@ (800e310 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 800e2dc:	6042      	str	r2, [r0, #4]
 800e2de:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e2e2:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800e2e4:	4a0b      	ldr	r2, [pc, #44]	@ (800e314 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 800e2e6:	4604      	mov	r4, r0
 800e2e8:	2101      	movs	r1, #1
 800e2ea:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 800e2ee:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800e2f2:	f9b2 1000 	ldrsh.w	r1, [r2]
 800e2f6:	4628      	mov	r0, r5
 800e2f8:	4798      	blx	r3
 800e2fa:	6863      	ldr	r3, [r4, #4]
 800e2fc:	4628      	mov	r0, r5
 800e2fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e300:	4631      	mov	r1, r6
 800e302:	4798      	blx	r3
 800e304:	4620      	mov	r0, r4
 800e306:	bd70      	pop	{r4, r5, r6, pc}
 800e308:	08015ca8 	.word	0x08015ca8
 800e30c:	08015918 	.word	0x08015918
 800e310:	2001264e 	.word	0x2001264e
 800e314:	2001264c 	.word	0x2001264c

0800e318 <_ZN8touchgfx6Screen4drawEv>:
 800e318:	b507      	push	{r0, r1, r2, lr}
 800e31a:	4b09      	ldr	r3, [pc, #36]	@ (800e340 <_ZN8touchgfx6Screen4drawEv+0x28>)
 800e31c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e320:	4b08      	ldr	r3, [pc, #32]	@ (800e344 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 800e322:	f8ad 2004 	strh.w	r2, [sp, #4]
 800e326:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e32a:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e32e:	6803      	ldr	r3, [r0, #0]
 800e330:	2100      	movs	r1, #0
 800e332:	9100      	str	r1, [sp, #0]
 800e334:	689b      	ldr	r3, [r3, #8]
 800e336:	4669      	mov	r1, sp
 800e338:	4798      	blx	r3
 800e33a:	b003      	add	sp, #12
 800e33c:	f85d fb04 	ldr.w	pc, [sp], #4
 800e340:	2001264c 	.word	0x2001264c
 800e344:	2001264e 	.word	0x2001264e

0800e348 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 800e348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e34c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800e350:	2b00      	cmp	r3, #0
 800e352:	b089      	sub	sp, #36	@ 0x24
 800e354:	4680      	mov	r8, r0
 800e356:	460c      	mov	r4, r1
 800e358:	4615      	mov	r5, r2
 800e35a:	dd0e      	ble.n	800e37a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e35c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800e360:	2b00      	cmp	r3, #0
 800e362:	dd0a      	ble.n	800e37a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e364:	4628      	mov	r0, r5
 800e366:	f7ff ff5b 	bl	800e220 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800e36a:	4621      	mov	r1, r4
 800e36c:	f7fe fb9b 	bl	800caa6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800e370:	69eb      	ldr	r3, [r5, #28]
 800e372:	b928      	cbnz	r0, 800e380 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 800e374:	461d      	mov	r5, r3
 800e376:	2b00      	cmp	r3, #0
 800e378:	d1f4      	bne.n	800e364 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 800e37a:	b009      	add	sp, #36	@ 0x24
 800e37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e380:	ae04      	add	r6, sp, #16
 800e382:	2b00      	cmp	r3, #0
 800e384:	f000 80b5 	beq.w	800e4f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800e388:	682b      	ldr	r3, [r5, #0]
 800e38a:	4629      	mov	r1, r5
 800e38c:	68db      	ldr	r3, [r3, #12]
 800e38e:	a802      	add	r0, sp, #8
 800e390:	4798      	blx	r3
 800e392:	4628      	mov	r0, r5
 800e394:	f7ff ff60 	bl	800e258 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800e398:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 800e39c:	4407      	add	r7, r0
 800e39e:	4628      	mov	r0, r5
 800e3a0:	f7ff ff6e 	bl	800e280 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800e3a4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800e3a8:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800e3ac:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e3b0:	4418      	add	r0, r3
 800e3b2:	4621      	mov	r1, r4
 800e3b4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800e3b8:	f8ad 0012 	strh.w	r0, [sp, #18]
 800e3bc:	b23f      	sxth	r7, r7
 800e3be:	4630      	mov	r0, r6
 800e3c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e3c4:	f8ad 7010 	strh.w	r7, [sp, #16]
 800e3c8:	f7fa fdd8 	bl	8008f7c <_ZN8touchgfx4RectaNERKS0_>
 800e3cc:	4628      	mov	r0, r5
 800e3ce:	f7ff ff27 	bl	800e220 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800e3d2:	4602      	mov	r2, r0
 800e3d4:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e3d8:	ab06      	add	r3, sp, #24
 800e3da:	e883 0003 	stmia.w	r3, {r0, r1}
 800e3de:	4611      	mov	r1, r2
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f7fa fdcb 	bl	8008f7c <_ZN8touchgfx4RectaNERKS0_>
 800e3e6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800e3ea:	f9b4 1000 	ldrsh.w	r1, [r4]
 800e3ee:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 800e3f2:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 800e3f6:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 800e3fa:	4299      	cmp	r1, r3
 800e3fc:	d10b      	bne.n	800e416 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800e3fe:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800e402:	4552      	cmp	r2, sl
 800e404:	d107      	bne.n	800e416 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800e406:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800e40a:	455a      	cmp	r2, fp
 800e40c:	d103      	bne.n	800e416 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800e40e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800e412:	454a      	cmp	r2, r9
 800e414:	d06d      	beq.n	800e4f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800e416:	f1bb 0f00 	cmp.w	fp, #0
 800e41a:	dd65      	ble.n	800e4e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800e41c:	f1b9 0f00 	cmp.w	r9, #0
 800e420:	dd62      	ble.n	800e4e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800e422:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800e426:	fa1f f08a 	uxth.w	r0, sl
 800e42a:	4552      	cmp	r2, sl
 800e42c:	9000      	str	r0, [sp, #0]
 800e42e:	da12      	bge.n	800e456 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 800e430:	9301      	str	r3, [sp, #4]
 800e432:	9b00      	ldr	r3, [sp, #0]
 800e434:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800e438:	f8ad 2012 	strh.w	r2, [sp, #18]
 800e43c:	1a9a      	subs	r2, r3, r2
 800e43e:	f8ad 1010 	strh.w	r1, [sp, #16]
 800e442:	f8ad 0014 	strh.w	r0, [sp, #20]
 800e446:	f8ad 2016 	strh.w	r2, [sp, #22]
 800e44a:	69ea      	ldr	r2, [r5, #28]
 800e44c:	4631      	mov	r1, r6
 800e44e:	4640      	mov	r0, r8
 800e450:	f7ff ff7a 	bl	800e348 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e454:	9b01      	ldr	r3, [sp, #4]
 800e456:	f9b4 2000 	ldrsh.w	r2, [r4]
 800e45a:	429a      	cmp	r2, r3
 800e45c:	b29f      	uxth	r7, r3
 800e45e:	da0d      	bge.n	800e47c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 800e460:	f8ad 2010 	strh.w	r2, [sp, #16]
 800e464:	1aba      	subs	r2, r7, r2
 800e466:	f8ad a012 	strh.w	sl, [sp, #18]
 800e46a:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e46e:	f8ad 9016 	strh.w	r9, [sp, #22]
 800e472:	69ea      	ldr	r2, [r5, #28]
 800e474:	4631      	mov	r1, r6
 800e476:	4640      	mov	r0, r8
 800e478:	f7ff ff66 	bl	800e348 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e47c:	8822      	ldrh	r2, [r4, #0]
 800e47e:	88a3      	ldrh	r3, [r4, #4]
 800e480:	445f      	add	r7, fp
 800e482:	4413      	add	r3, r2
 800e484:	b29b      	uxth	r3, r3
 800e486:	b2bf      	uxth	r7, r7
 800e488:	b23a      	sxth	r2, r7
 800e48a:	b219      	sxth	r1, r3
 800e48c:	4291      	cmp	r1, r2
 800e48e:	dd0d      	ble.n	800e4ac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 800e490:	1bdb      	subs	r3, r3, r7
 800e492:	f8ad 2010 	strh.w	r2, [sp, #16]
 800e496:	f8ad a012 	strh.w	sl, [sp, #18]
 800e49a:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e49e:	f8ad 9016 	strh.w	r9, [sp, #22]
 800e4a2:	69ea      	ldr	r2, [r5, #28]
 800e4a4:	4631      	mov	r1, r6
 800e4a6:	4640      	mov	r0, r8
 800e4a8:	f7ff ff4e 	bl	800e348 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e4ac:	88e2      	ldrh	r2, [r4, #6]
 800e4ae:	8863      	ldrh	r3, [r4, #2]
 800e4b0:	4413      	add	r3, r2
 800e4b2:	9a00      	ldr	r2, [sp, #0]
 800e4b4:	444a      	add	r2, r9
 800e4b6:	b29b      	uxth	r3, r3
 800e4b8:	fa1f f982 	uxth.w	r9, r2
 800e4bc:	fa0f f289 	sxth.w	r2, r9
 800e4c0:	b219      	sxth	r1, r3
 800e4c2:	428a      	cmp	r2, r1
 800e4c4:	da15      	bge.n	800e4f2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800e4c6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800e4ca:	f9b4 0000 	ldrsh.w	r0, [r4]
 800e4ce:	f8ad 1014 	strh.w	r1, [sp, #20]
 800e4d2:	eba3 0309 	sub.w	r3, r3, r9
 800e4d6:	f8ad 0010 	strh.w	r0, [sp, #16]
 800e4da:	f8ad 2012 	strh.w	r2, [sp, #18]
 800e4de:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e4e2:	69ea      	ldr	r2, [r5, #28]
 800e4e4:	4631      	mov	r1, r6
 800e4e6:	e001      	b.n	800e4ec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 800e4e8:	69ea      	ldr	r2, [r5, #28]
 800e4ea:	4621      	mov	r1, r4
 800e4ec:	4640      	mov	r0, r8
 800e4ee:	f7ff ff2b 	bl	800e348 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e4f2:	4628      	mov	r0, r5
 800e4f4:	f7ff fe94 	bl	800e220 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800e4f8:	6861      	ldr	r1, [r4, #4]
 800e4fa:	4602      	mov	r2, r0
 800e4fc:	6820      	ldr	r0, [r4, #0]
 800e4fe:	4633      	mov	r3, r6
 800e500:	c303      	stmia	r3!, {r0, r1}
 800e502:	4611      	mov	r1, r2
 800e504:	4630      	mov	r0, r6
 800e506:	f7fa fd39 	bl	8008f7c <_ZN8touchgfx4RectaNERKS0_>
 800e50a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	f77f af33 	ble.w	800e37a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e514:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	f77f af2e 	ble.w	800e37a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e51e:	4628      	mov	r0, r5
 800e520:	f7ff fe9a 	bl	800e258 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800e524:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800e528:	1a18      	subs	r0, r3, r0
 800e52a:	f8ad 0010 	strh.w	r0, [sp, #16]
 800e52e:	4628      	mov	r0, r5
 800e530:	f7ff fea6 	bl	800e280 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800e534:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800e538:	1a18      	subs	r0, r3, r0
 800e53a:	f8ad 0012 	strh.w	r0, [sp, #18]
 800e53e:	682b      	ldr	r3, [r5, #0]
 800e540:	4631      	mov	r1, r6
 800e542:	689b      	ldr	r3, [r3, #8]
 800e544:	4628      	mov	r0, r5
 800e546:	4798      	blx	r3
 800e548:	e717      	b.n	800e37a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0800e54a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 800e54a:	b570      	push	{r4, r5, r6, lr}
 800e54c:	460c      	mov	r4, r1
 800e54e:	b086      	sub	sp, #24
 800e550:	1d06      	adds	r6, r0, #4
 800e552:	2300      	movs	r3, #0
 800e554:	4631      	mov	r1, r6
 800e556:	4605      	mov	r5, r0
 800e558:	a802      	add	r0, sp, #8
 800e55a:	9301      	str	r3, [sp, #4]
 800e55c:	f7ff fc98 	bl	800de90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e560:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800e564:	8822      	ldrh	r2, [r4, #0]
 800e566:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800e56a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800e56e:	f8ad 0014 	strh.w	r0, [sp, #20]
 800e572:	1ad2      	subs	r2, r2, r3
 800e574:	8863      	ldrh	r3, [r4, #2]
 800e576:	f8ad 2010 	strh.w	r2, [sp, #16]
 800e57a:	1a5b      	subs	r3, r3, r1
 800e57c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800e580:	f8ad 1016 	strh.w	r1, [sp, #22]
 800e584:	aa01      	add	r2, sp, #4
 800e586:	a904      	add	r1, sp, #16
 800e588:	4630      	mov	r0, r6
 800e58a:	f8ad 3012 	strh.w	r3, [sp, #18]
 800e58e:	f7fa fdcd 	bl	800912c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 800e592:	9a01      	ldr	r2, [sp, #4]
 800e594:	b11a      	cbz	r2, 800e59e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 800e596:	4621      	mov	r1, r4
 800e598:	4628      	mov	r0, r5
 800e59a:	f7ff fed5 	bl	800e348 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e59e:	b006      	add	sp, #24
 800e5a0:	bd70      	pop	{r4, r5, r6, pc}

0800e5a2 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 800e5a2:	b530      	push	{r4, r5, lr}
 800e5a4:	4602      	mov	r2, r0
 800e5a6:	4604      	mov	r4, r0
 800e5a8:	f852 0f08 	ldr.w	r0, [r2, #8]!
 800e5ac:	b085      	sub	sp, #20
 800e5ae:	460d      	mov	r5, r1
 800e5b0:	6851      	ldr	r1, [r2, #4]
 800e5b2:	466b      	mov	r3, sp
 800e5b4:	c303      	stmia	r3!, {r0, r1}
 800e5b6:	4629      	mov	r1, r5
 800e5b8:	4668      	mov	r0, sp
 800e5ba:	f7fa fcdf 	bl	8008f7c <_ZN8touchgfx4RectaNERKS0_>
 800e5be:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800e5c2:	b12b      	cbz	r3, 800e5d0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 800e5c4:	4669      	mov	r1, sp
 800e5c6:	4620      	mov	r0, r4
 800e5c8:	f7ff ffbf 	bl	800e54a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 800e5cc:	b005      	add	sp, #20
 800e5ce:	bd30      	pop	{r4, r5, pc}
 800e5d0:	3404      	adds	r4, #4
 800e5d2:	4621      	mov	r1, r4
 800e5d4:	a802      	add	r0, sp, #8
 800e5d6:	f7ff fc5b 	bl	800de90 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e5da:	f8bd 3000 	ldrh.w	r3, [sp]
 800e5de:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800e5e2:	1a9b      	subs	r3, r3, r2
 800e5e4:	f8ad 3000 	strh.w	r3, [sp]
 800e5e8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800e5ec:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e5f0:	4669      	mov	r1, sp
 800e5f2:	1a9b      	subs	r3, r3, r2
 800e5f4:	4620      	mov	r0, r4
 800e5f6:	f8ad 3002 	strh.w	r3, [sp, #2]
 800e5fa:	f7fa fd5e 	bl	80090ba <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 800e5fe:	e7e5      	b.n	800e5cc <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0800e600 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 800e600:	680a      	ldr	r2, [r1, #0]
 800e602:	460b      	mov	r3, r1
 800e604:	6992      	ldr	r2, [r2, #24]
 800e606:	1d01      	adds	r1, r0, #4
 800e608:	4618      	mov	r0, r3
 800e60a:	4710      	bx	r2

0800e60c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 800e60c:	4298      	cmp	r0, r3
 800e60e:	d200      	bcs.n	800e612 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 800e610:	b913      	cbnz	r3, 800e618 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 800e612:	440a      	add	r2, r1
 800e614:	b210      	sxth	r0, r2
 800e616:	4770      	bx	lr
 800e618:	ee07 0a90 	vmov	s15, r0
 800e61c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e620:	ee07 3a90 	vmov	s15, r3
 800e624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e628:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e62c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e630:	ee37 7a66 	vsub.f32	s14, s14, s13
 800e634:	ee07 2a90 	vmov	s15, r2
 800e638:	ee67 5a07 	vmul.f32	s11, s14, s14
 800e63c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800e640:	eee5 6a87 	vfma.f32	s13, s11, s14
 800e644:	ee07 1a90 	vmov	s15, r1
 800e648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e64c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800e650:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e654:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e65c:	bfcc      	ite	gt
 800e65e:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 800e662:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 800e666:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e66a:	ee17 3a90 	vmov	r3, s15
 800e66e:	b218      	sxth	r0, r3
 800e670:	4770      	bx	lr

0800e672 <_ZN8touchgfx12TextProviderC1Ev>:
 800e672:	b538      	push	{r3, r4, r5, lr}
 800e674:	2500      	movs	r5, #0
 800e676:	2302      	movs	r3, #2
 800e678:	4604      	mov	r4, r0
 800e67a:	e9c0 5500 	strd	r5, r5, [r0]
 800e67e:	7403      	strb	r3, [r0, #16]
 800e680:	6145      	str	r5, [r0, #20]
 800e682:	7605      	strb	r5, [r0, #24]
 800e684:	83c5      	strh	r5, [r0, #30]
 800e686:	8405      	strh	r5, [r0, #32]
 800e688:	86c5      	strh	r5, [r0, #54]	@ 0x36
 800e68a:	8705      	strh	r5, [r0, #56]	@ 0x38
 800e68c:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 800e68e:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 800e692:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 800e696:	220e      	movs	r2, #14
 800e698:	4629      	mov	r1, r5
 800e69a:	304c      	adds	r0, #76	@ 0x4c
 800e69c:	f005 f881 	bl	80137a2 <memset>
 800e6a0:	2301      	movs	r3, #1
 800e6a2:	4620      	mov	r0, r4
 800e6a4:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 800e6a8:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800e6ac:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 800e6b0:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 800e6b4:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 800e6b8:	f7f4 ffda 	bl	8003670 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 800e6bc:	4620      	mov	r0, r4
 800e6be:	bd38      	pop	{r3, r4, r5, pc}

0800e6c0 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 800e6c0:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800e6c2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800e6c6:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 800e6c8:	fab0 f080 	clz	r0, r0
 800e6cc:	0940      	lsrs	r0, r0, #5
 800e6ce:	4770      	bx	lr

0800e6d0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 800e6d0:	b530      	push	{r4, r5, lr}
 800e6d2:	2500      	movs	r5, #0
 800e6d4:	2401      	movs	r4, #1
 800e6d6:	6843      	ldr	r3, [r0, #4]
 800e6d8:	b913      	cbnz	r3, 800e6e0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 800e6da:	6803      	ldr	r3, [r0, #0]
 800e6dc:	b313      	cbz	r3, 800e724 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800e6de:	6043      	str	r3, [r0, #4]
 800e6e0:	7e03      	ldrb	r3, [r0, #24]
 800e6e2:	b143      	cbz	r3, 800e6f6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 800e6e4:	6943      	ldr	r3, [r0, #20]
 800e6e6:	b12b      	cbz	r3, 800e6f4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800e6e8:	881a      	ldrh	r2, [r3, #0]
 800e6ea:	b11a      	cbz	r2, 800e6f4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800e6ec:	1c9a      	adds	r2, r3, #2
 800e6ee:	6142      	str	r2, [r0, #20]
 800e6f0:	8818      	ldrh	r0, [r3, #0]
 800e6f2:	bd30      	pop	{r4, r5, pc}
 800e6f4:	7605      	strb	r5, [r0, #24]
 800e6f6:	6843      	ldr	r3, [r0, #4]
 800e6f8:	8819      	ldrh	r1, [r3, #0]
 800e6fa:	b199      	cbz	r1, 800e724 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800e6fc:	1c9a      	adds	r2, r3, #2
 800e6fe:	2902      	cmp	r1, #2
 800e700:	6042      	str	r2, [r0, #4]
 800e702:	d1f5      	bne.n	800e6f0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 800e704:	7c03      	ldrb	r3, [r0, #16]
 800e706:	2b01      	cmp	r3, #1
 800e708:	d8e5      	bhi.n	800e6d6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e70a:	1c5a      	adds	r2, r3, #1
 800e70c:	3302      	adds	r3, #2
 800e70e:	7402      	strb	r2, [r0, #16]
 800e710:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800e714:	6143      	str	r3, [r0, #20]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d0dd      	beq.n	800e6d6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e71a:	881b      	ldrh	r3, [r3, #0]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d0da      	beq.n	800e6d6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e720:	7604      	strb	r4, [r0, #24]
 800e722:	e7d8      	b.n	800e6d6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e724:	2000      	movs	r0, #0
 800e726:	e7e4      	b.n	800e6f2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0800e728 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 800e728:	b430      	push	{r4, r5}
 800e72a:	6001      	str	r1, [r0, #0]
 800e72c:	2100      	movs	r1, #0
 800e72e:	6041      	str	r1, [r0, #4]
 800e730:	6815      	ldr	r5, [r2, #0]
 800e732:	6085      	str	r5, [r0, #8]
 800e734:	6852      	ldr	r2, [r2, #4]
 800e736:	6443      	str	r3, [r0, #68]	@ 0x44
 800e738:	9b02      	ldr	r3, [sp, #8]
 800e73a:	60c2      	str	r2, [r0, #12]
 800e73c:	7401      	strb	r1, [r0, #16]
 800e73e:	6141      	str	r1, [r0, #20]
 800e740:	7601      	strb	r1, [r0, #24]
 800e742:	8701      	strh	r1, [r0, #56]	@ 0x38
 800e744:	8401      	strh	r1, [r0, #32]
 800e746:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 800e74a:	6483      	str	r3, [r0, #72]	@ 0x48
 800e74c:	bc30      	pop	{r4, r5}
 800e74e:	f7f4 bf8f 	b.w	8003670 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0800e752 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 800e752:	b408      	push	{r3}
 800e754:	b510      	push	{r4, lr}
 800e756:	b085      	sub	sp, #20
 800e758:	ac07      	add	r4, sp, #28
 800e75a:	f854 3b04 	ldr.w	r3, [r4], #4
 800e75e:	9300      	str	r3, [sp, #0]
 800e760:	4613      	mov	r3, r2
 800e762:	4622      	mov	r2, r4
 800e764:	9403      	str	r4, [sp, #12]
 800e766:	f7ff ffdf 	bl	800e728 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800e76a:	b005      	add	sp, #20
 800e76c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e770:	b001      	add	sp, #4
 800e772:	4770      	bx	lr

0800e774 <_ZN8touchgfx12TextProvider20unicodeConverterInitEv>:
 800e774:	2301      	movs	r3, #1
 800e776:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800e77a:	4770      	bx	lr

0800e77c <_ZN8touchgfx12TextProvider16unicodeConverterEh>:
 800e77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e780:	f8b0 b036 	ldrh.w	fp, [r0, #54]	@ 0x36
 800e784:	eb00 064b 	add.w	r6, r0, fp, lsl #1
 800e788:	b087      	sub	sp, #28
 800e78a:	8c73      	ldrh	r3, [r6, #34]	@ 0x22
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	f000 813e 	beq.w	800ea0e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800e792:	2b7f      	cmp	r3, #127	@ 0x7f
 800e794:	d819      	bhi.n	800e7ca <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x4e>
 800e796:	2901      	cmp	r1, #1
 800e798:	d117      	bne.n	800e7ca <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x4e>
 800e79a:	2b3c      	cmp	r3, #60	@ 0x3c
 800e79c:	f000 83d2 	beq.w	800ef44 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7c8>
 800e7a0:	2b3e      	cmp	r3, #62	@ 0x3e
 800e7a2:	f000 83d1 	beq.w	800ef48 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7cc>
 800e7a6:	2b28      	cmp	r3, #40	@ 0x28
 800e7a8:	f000 83d0 	beq.w	800ef4c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7d0>
 800e7ac:	2b29      	cmp	r3, #41	@ 0x29
 800e7ae:	f000 83cf 	beq.w	800ef50 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7d4>
 800e7b2:	2b5b      	cmp	r3, #91	@ 0x5b
 800e7b4:	f000 83ce 	beq.w	800ef54 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7d8>
 800e7b8:	2b5d      	cmp	r3, #93	@ 0x5d
 800e7ba:	f000 83cd 	beq.w	800ef58 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7dc>
 800e7be:	2b7b      	cmp	r3, #123	@ 0x7b
 800e7c0:	f000 83cc 	beq.w	800ef5c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7e0>
 800e7c4:	2b7d      	cmp	r3, #125	@ 0x7d
 800e7c6:	f000 83cb 	beq.w	800ef60 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7e4>
 800e7ca:	f10b 0201 	add.w	r2, fp, #1
 800e7ce:	b292      	uxth	r2, r2
 800e7d0:	2a09      	cmp	r2, #9
 800e7d2:	4611      	mov	r1, r2
 800e7d4:	bf88      	it	hi
 800e7d6:	f1a2 010a 	subhi.w	r1, r2, #10
 800e7da:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800e7de:	9102      	str	r1, [sp, #8]
 800e7e0:	8c4d      	ldrh	r5, [r1, #34]	@ 0x22
 800e7e2:	f10b 0102 	add.w	r1, fp, #2
 800e7e6:	b289      	uxth	r1, r1
 800e7e8:	2909      	cmp	r1, #9
 800e7ea:	bf88      	it	hi
 800e7ec:	390a      	subhi	r1, #10
 800e7ee:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800e7f2:	8c4c      	ldrh	r4, [r1, #34]	@ 0x22
 800e7f4:	f240 6151 	movw	r1, #1617	@ 0x651
 800e7f8:	428d      	cmp	r5, r1
 800e7fa:	d125      	bne.n	800e848 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xcc>
 800e7fc:	f2a3 614b 	subw	r1, r3, #1611	@ 0x64b
 800e800:	b289      	uxth	r1, r1
 800e802:	2914      	cmp	r1, #20
 800e804:	d914      	bls.n	800e830 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xb4>
 800e806:	f023 0104 	bic.w	r1, r3, #4
 800e80a:	b289      	uxth	r1, r1
 800e80c:	f5b1 6fce 	cmp.w	r1, #1648	@ 0x670
 800e810:	d00e      	beq.n	800e830 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xb4>
 800e812:	f2a3 61d6 	subw	r1, r3, #1750	@ 0x6d6
 800e816:	b289      	uxth	r1, r1
 800e818:	2917      	cmp	r1, #23
 800e81a:	d804      	bhi.n	800e826 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xaa>
 800e81c:	4fad      	ldr	r7, [pc, #692]	@ (800ead4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x358>)
 800e81e:	fa27 f101 	lsr.w	r1, r7, r1
 800e822:	07c9      	lsls	r1, r1, #31
 800e824:	d404      	bmi.n	800e830 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xb4>
 800e826:	f6a3 01e4 	subw	r1, r3, #2276	@ 0x8e4
 800e82a:	b289      	uxth	r1, r1
 800e82c:	291a      	cmp	r1, #26
 800e82e:	d80b      	bhi.n	800e848 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xcc>
 800e830:	2a0a      	cmp	r2, #10
 800e832:	bf28      	it	cs
 800e834:	2200      	movcs	r2, #0
 800e836:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800e83a:	f240 6151 	movw	r1, #1617	@ 0x651
 800e83e:	8471      	strh	r1, [r6, #34]	@ 0x22
 800e840:	8453      	strh	r3, [r2, #34]	@ 0x22
 800e842:	461a      	mov	r2, r3
 800e844:	462b      	mov	r3, r5
 800e846:	4615      	mov	r5, r2
 800e848:	f2a3 6222 	subw	r2, r3, #1570	@ 0x622
 800e84c:	b292      	uxth	r2, r2
 800e84e:	2a18      	cmp	r2, #24
 800e850:	d90d      	bls.n	800e86e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xf2>
 800e852:	f5a3 62c8 	sub.w	r2, r3, #1600	@ 0x640
 800e856:	b292      	uxth	r2, r2
 800e858:	2a0a      	cmp	r2, #10
 800e85a:	d908      	bls.n	800e86e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xf2>
 800e85c:	f46f 67ce 	mvn.w	r7, #1648	@ 0x670
 800e860:	19da      	adds	r2, r3, r7
 800e862:	b292      	uxth	r2, r2
 800e864:	2a62      	cmp	r2, #98	@ 0x62
 800e866:	d902      	bls.n	800e86e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xf2>
 800e868:	2b20      	cmp	r3, #32
 800e86a:	f040 80d0 	bne.w	800ea0e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800e86e:	f10b 0103 	add.w	r1, fp, #3
 800e872:	b289      	uxth	r1, r1
 800e874:	2909      	cmp	r1, #9
 800e876:	460a      	mov	r2, r1
 800e878:	bf88      	it	hi
 800e87a:	f1a1 020a 	subhi.w	r2, r1, #10
 800e87e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800e882:	f8b2 c022 	ldrh.w	ip, [r2, #34]	@ 0x22
 800e886:	f10b 0204 	add.w	r2, fp, #4
 800e88a:	b292      	uxth	r2, r2
 800e88c:	2a09      	cmp	r2, #9
 800e88e:	bf88      	it	hi
 800e890:	3a0a      	subhi	r2, #10
 800e892:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800e896:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 800e898:	f2a2 6622 	subw	r6, r2, #1570	@ 0x622
 800e89c:	2e18      	cmp	r6, #24
 800e89e:	f240 80ba 	bls.w	800ea16 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x29a>
 800e8a2:	f5a2 66c8 	sub.w	r6, r2, #1600	@ 0x640
 800e8a6:	2e0a      	cmp	r6, #10
 800e8a8:	f240 80b5 	bls.w	800ea16 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x29a>
 800e8ac:	f46f 66ce 	mvn.w	r6, #1648	@ 0x670
 800e8b0:	4432      	add	r2, r6
 800e8b2:	2a62      	cmp	r2, #98	@ 0x62
 800e8b4:	f240 80af 	bls.w	800ea16 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x29a>
 800e8b8:	f2a3 6227 	subw	r2, r3, #1575	@ 0x627
 800e8bc:	b292      	uxth	r2, r2
 800e8be:	2a21      	cmp	r2, #33	@ 0x21
 800e8c0:	f200 80a9 	bhi.w	800ea16 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x29a>
 800e8c4:	f2a4 6227 	subw	r2, r4, #1575	@ 0x627
 800e8c8:	b292      	uxth	r2, r2
 800e8ca:	2a23      	cmp	r2, #35	@ 0x23
 800e8cc:	d82e      	bhi.n	800e92c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1b0>
 800e8ce:	f2ac 622f 	subw	r2, ip, #1583	@ 0x62f
 800e8d2:	b292      	uxth	r2, r2
 800e8d4:	2a18      	cmp	r2, #24
 800e8d6:	d829      	bhi.n	800e92c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1b0>
 800e8d8:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800e8dc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800e8e0:	f5a2 4282 	sub.w	r2, r2, #16640	@ 0x4100
 800e8e4:	ebc3 1603 	rsb	r6, r3, r3, lsl #4
 800e8e8:	3a1a      	subs	r2, #26
 800e8ea:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 800e8ee:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800e8f2:	6c87      	ldr	r7, [r0, #72]	@ 0x48
 800e8f4:	4462      	add	r2, ip
 800e8f6:	b292      	uxth	r2, r2
 800e8f8:	b1c7      	cbz	r7, 800e92c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1b0>
 800e8fa:	8b3e      	ldrh	r6, [r7, #24]
 800e8fc:	b1b6      	cbz	r6, 800e92c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1b0>
 800e8fe:	f8d7 9000 	ldr.w	r9, [r7]
 800e902:	f04f 0e00 	mov.w	lr, #0
 800e906:	eb06 070e 	add.w	r7, r6, lr
 800e90a:	f04f 080a 	mov.w	r8, #10
 800e90e:	107f      	asrs	r7, r7, #1
 800e910:	fb08 fa07 	mul.w	sl, r8, r7
 800e914:	eb09 080a 	add.w	r8, r9, sl
 800e918:	f839 a00a 	ldrh.w	sl, [r9, sl]
 800e91c:	4552      	cmp	r2, sl
 800e91e:	d961      	bls.n	800e9e4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x268>
 800e920:	f107 0e01 	add.w	lr, r7, #1
 800e924:	e000      	b.n	800e928 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1ac>
 800e926:	463e      	mov	r6, r7
 800e928:	45b6      	cmp	lr, r6
 800e92a:	dbec      	blt.n	800e906 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x18a>
 800e92c:	f5a3 62c5 	sub.w	r2, r3, #1576	@ 0x628
 800e930:	b292      	uxth	r2, r2
 800e932:	2a22      	cmp	r2, #34	@ 0x22
 800e934:	d971      	bls.n	800ea1a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x29e>
 800e936:	f2a5 624b 	subw	r2, r5, #1611	@ 0x64b
 800e93a:	b292      	uxth	r2, r2
 800e93c:	2a14      	cmp	r2, #20
 800e93e:	d918      	bls.n	800e972 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1f6>
 800e940:	f5b5 6fce 	cmp.w	r5, #1648	@ 0x670
 800e944:	d015      	beq.n	800e972 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1f6>
 800e946:	f240 6274 	movw	r2, #1652	@ 0x674
 800e94a:	4295      	cmp	r5, r2
 800e94c:	d011      	beq.n	800e972 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1f6>
 800e94e:	f2a5 62d6 	subw	r2, r5, #1750	@ 0x6d6
 800e952:	b292      	uxth	r2, r2
 800e954:	2a17      	cmp	r2, #23
 800e956:	d804      	bhi.n	800e962 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1e6>
 800e958:	495e      	ldr	r1, [pc, #376]	@ (800ead4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x358>)
 800e95a:	fa21 f202 	lsr.w	r2, r1, r2
 800e95e:	07d2      	lsls	r2, r2, #31
 800e960:	d407      	bmi.n	800e972 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1f6>
 800e962:	f6a5 02e4 	subw	r2, r5, #2276	@ 0x8e4
 800e966:	b292      	uxth	r2, r2
 800e968:	2a1a      	cmp	r2, #26
 800e96a:	d902      	bls.n	800e972 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1f6>
 800e96c:	46a4      	mov	ip, r4
 800e96e:	462c      	mov	r4, r5
 800e970:	2500      	movs	r5, #0
 800e972:	2b20      	cmp	r3, #32
 800e974:	d005      	beq.n	800e982 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x206>
 800e976:	f2a3 6226 	subw	r2, r3, #1574	@ 0x626
 800e97a:	b292      	uxth	r2, r2
 800e97c:	2a24      	cmp	r2, #36	@ 0x24
 800e97e:	f200 8136 	bhi.w	800ebee <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x472>
 800e982:	f2a4 6222 	subw	r2, r4, #1570	@ 0x622
 800e986:	b292      	uxth	r2, r2
 800e988:	2ab3      	cmp	r2, #179	@ 0xb3
 800e98a:	f200 8130 	bhi.w	800ebee <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x472>
 800e98e:	f240 6244 	movw	r2, #1604	@ 0x644
 800e992:	4294      	cmp	r4, r2
 800e994:	d104      	bne.n	800e9a0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x224>
 800e996:	f240 6227 	movw	r2, #1575	@ 0x627
 800e99a:	4594      	cmp	ip, r2
 800e99c:	f000 8127 	beq.w	800ebee <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x472>
 800e9a0:	f240 624f 	movw	r2, #1615	@ 0x64f
 800e9a4:	4295      	cmp	r5, r2
 800e9a6:	f000 8122 	beq.w	800ebee <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x472>
 800e9aa:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800e9ac:	2900      	cmp	r1, #0
 800e9ae:	f000 811e 	beq.w	800ebee <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x472>
 800e9b2:	8b8a      	ldrh	r2, [r1, #28]
 800e9b4:	2a00      	cmp	r2, #0
 800e9b6:	f000 811b 	beq.w	800ebf0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x474>
 800e9ba:	b2e4      	uxtb	r4, r4
 800e9bc:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 800e9c0:	6889      	ldr	r1, [r1, #8]
 800e9c2:	b2a4      	uxth	r4, r4
 800e9c4:	2700      	movs	r7, #0
 800e9c6:	f04f 080a 	mov.w	r8, #10
 800e9ca:	19d6      	adds	r6, r2, r7
 800e9cc:	1076      	asrs	r6, r6, #1
 800e9ce:	fb08 fc06 	mul.w	ip, r8, r6
 800e9d2:	eb01 0e0c 	add.w	lr, r1, ip
 800e9d6:	f831 c00c 	ldrh.w	ip, [r1, ip]
 800e9da:	4564      	cmp	r4, ip
 800e9dc:	f240 810a 	bls.w	800ebf4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x478>
 800e9e0:	1c77      	adds	r7, r6, #1
 800e9e2:	e101      	b.n	800ebe8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x46c>
 800e9e4:	d39f      	bcc.n	800e926 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1aa>
 800e9e6:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 800e9ea:	42aa      	cmp	r2, r5
 800e9ec:	d19e      	bne.n	800e92c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1b0>
 800e9ee:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 800e9f0:	86c1      	strh	r1, [r0, #54]	@ 0x36
 800e9f2:	3b03      	subs	r3, #3
 800e9f4:	2909      	cmp	r1, #9
 800e9f6:	8703      	strh	r3, [r0, #56]	@ 0x38
 800e9f8:	bf88      	it	hi
 800e9fa:	f1ab 0207 	subhi.w	r2, fp, #7
 800e9fe:	f04f 0301 	mov.w	r3, #1
 800ea02:	bf88      	it	hi
 800ea04:	86c2      	strhhi	r2, [r0, #54]	@ 0x36
 800ea06:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800ea0a:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 800ea0e:	4618      	mov	r0, r3
 800ea10:	b007      	add	sp, #28
 800ea12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea16:	2b20      	cmp	r3, #32
 800ea18:	d188      	bne.n	800e92c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1b0>
 800ea1a:	f2a5 622c 	subw	r2, r5, #1580	@ 0x62c
 800ea1e:	b292      	uxth	r2, r2
 800ea20:	2a25      	cmp	r2, #37	@ 0x25
 800ea22:	d888      	bhi.n	800e936 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1ba>
 800ea24:	f2a4 622c 	subw	r2, r4, #1580	@ 0x62c
 800ea28:	b291      	uxth	r1, r2
 800ea2a:	2925      	cmp	r1, #37	@ 0x25
 800ea2c:	d914      	bls.n	800ea58 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x2dc>
 800ea2e:	f5b4 6fce 	cmp.w	r4, #1648	@ 0x670
 800ea32:	f000 82ec 	beq.w	800f00e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x892>
 800ea36:	f240 62d2 	movw	r2, #1746	@ 0x6d2
 800ea3a:	4294      	cmp	r4, r2
 800ea3c:	f47f af7b 	bne.w	800e936 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1ba>
 800ea40:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800ea44:	00d2      	lsls	r2, r2, #3
 800ea46:	2b20      	cmp	r3, #32
 800ea48:	b292      	uxth	r2, r2
 800ea4a:	d107      	bne.n	800ea5c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x2e0>
 800ea4c:	f5a2 5240 	sub.w	r2, r2, #12288	@ 0x3000
 800ea50:	3a30      	subs	r2, #48	@ 0x30
 800ea52:	b292      	uxth	r2, r2
 800ea54:	2127      	movs	r1, #39	@ 0x27
 800ea56:	e017      	b.n	800ea88 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x30c>
 800ea58:	2b20      	cmp	r3, #32
 800ea5a:	d034      	beq.n	800eac6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x34a>
 800ea5c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800ea60:	ebc3 1242 	rsb	r2, r3, r2, lsl #5
 800ea64:	0112      	lsls	r2, r2, #4
 800ea66:	f502 42e5 	add.w	r2, r2, #29312	@ 0x7280
 800ea6a:	b292      	uxth	r2, r2
 800ea6c:	eb05 0685 	add.w	r6, r5, r5, lsl #2
 800ea70:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
 800ea74:	f5b4 6fce 	cmp.w	r4, #1648	@ 0x670
 800ea78:	b292      	uxth	r2, r2
 800ea7a:	f000 82d2 	beq.w	800f022 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x8a6>
 800ea7e:	f240 66d2 	movw	r6, #1746	@ 0x6d2
 800ea82:	42b4      	cmp	r4, r6
 800ea84:	bf08      	it	eq
 800ea86:	2127      	moveq	r1, #39	@ 0x27
 800ea88:	6c87      	ldr	r7, [r0, #72]	@ 0x48
 800ea8a:	2f00      	cmp	r7, #0
 800ea8c:	f43f af53 	beq.w	800e936 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1ba>
 800ea90:	8b7e      	ldrh	r6, [r7, #26]
 800ea92:	2e00      	cmp	r6, #0
 800ea94:	f43f af4f 	beq.w	800e936 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1ba>
 800ea98:	440a      	add	r2, r1
 800ea9a:	f502 6212 	add.w	r2, r2, #2336	@ 0x920
 800ea9e:	6879      	ldr	r1, [r7, #4]
 800eaa0:	b292      	uxth	r2, r2
 800eaa2:	f04f 0e00 	mov.w	lr, #0
 800eaa6:	f04f 0a0a 	mov.w	sl, #10
 800eaaa:	eb06 070e 	add.w	r7, r6, lr
 800eaae:	107f      	asrs	r7, r7, #1
 800eab0:	fb0a f807 	mul.w	r8, sl, r7
 800eab4:	eb01 0908 	add.w	r9, r1, r8
 800eab8:	f831 8008 	ldrh.w	r8, [r1, r8]
 800eabc:	4542      	cmp	r2, r8
 800eabe:	d90b      	bls.n	800ead8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x35c>
 800eac0:	f107 0e01 	add.w	lr, r7, #1
 800eac4:	e003      	b.n	800eace <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x352>
 800eac6:	f64c 72d0 	movw	r2, #53200	@ 0xcfd0
 800eaca:	e7cf      	b.n	800ea6c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x2f0>
 800eacc:	463e      	mov	r6, r7
 800eace:	4576      	cmp	r6, lr
 800ead0:	dceb      	bgt.n	800eaaa <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x32e>
 800ead2:	e730      	b.n	800e936 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1ba>
 800ead4:	00f67e7f 	.word	0x00f67e7f
 800ead8:	d3f8      	bcc.n	800eacc <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x350>
 800eada:	f109 0102 	add.w	r1, r9, #2
 800eade:	2500      	movs	r5, #0
 800eae0:	2202      	movs	r2, #2
 800eae2:	2d00      	cmp	r5, #0
 800eae4:	bf0c      	ite	eq
 800eae6:	4614      	moveq	r4, r2
 800eae8:	1c54      	addne	r4, r2, #1
 800eaea:	3401      	adds	r4, #1
 800eaec:	445c      	add	r4, fp
 800eaee:	f8df c388 	ldr.w	ip, [pc, #904]	@ 800ee78 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6fc>
 800eaf2:	b2a4      	uxth	r4, r4
 800eaf4:	2c09      	cmp	r4, #9
 800eaf6:	4626      	mov	r6, r4
 800eaf8:	bf88      	it	hi
 800eafa:	f1a4 060a 	subhi.w	r6, r4, #10
 800eafe:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800eb02:	8c76      	ldrh	r6, [r6, #34]	@ 0x22
 800eb04:	f2a6 674b 	subw	r7, r6, #1611	@ 0x64b
 800eb08:	2f14      	cmp	r7, #20
 800eb0a:	d978      	bls.n	800ebfe <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x482>
 800eb0c:	f026 0704 	bic.w	r7, r6, #4
 800eb10:	f5b7 6fce 	cmp.w	r7, #1648	@ 0x670
 800eb14:	d073      	beq.n	800ebfe <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x482>
 800eb16:	f2a6 67d6 	subw	r7, r6, #1750	@ 0x6d6
 800eb1a:	b2bf      	uxth	r7, r7
 800eb1c:	2f17      	cmp	r7, #23
 800eb1e:	d803      	bhi.n	800eb28 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3ac>
 800eb20:	fa2c f707 	lsr.w	r7, ip, r7
 800eb24:	07ff      	lsls	r7, r7, #31
 800eb26:	d46a      	bmi.n	800ebfe <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x482>
 800eb28:	f6a6 07e4 	subw	r7, r6, #2276	@ 0x8e4
 800eb2c:	2f1a      	cmp	r7, #26
 800eb2e:	d966      	bls.n	800ebfe <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x482>
 800eb30:	f2a6 6422 	subw	r4, r6, #1570	@ 0x622
 800eb34:	2c18      	cmp	r4, #24
 800eb36:	d965      	bls.n	800ec04 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x488>
 800eb38:	f5a6 64c8 	sub.w	r4, r6, #1600	@ 0x640
 800eb3c:	2c0a      	cmp	r4, #10
 800eb3e:	d961      	bls.n	800ec04 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x488>
 800eb40:	f46f 6cce 	mvn.w	ip, #1648	@ 0x670
 800eb44:	4466      	add	r6, ip
 800eb46:	2e62      	cmp	r6, #98	@ 0x62
 800eb48:	bf94      	ite	ls
 800eb4a:	2400      	movls	r4, #0
 800eb4c:	2401      	movhi	r4, #1
 800eb4e:	9401      	str	r4, [sp, #4]
 800eb50:	f890 4060 	ldrb.w	r4, [r0, #96]	@ 0x60
 800eb54:	f084 0401 	eor.w	r4, r4, #1
 800eb58:	9404      	str	r4, [sp, #16]
 800eb5a:	9c01      	ldr	r4, [sp, #4]
 800eb5c:	2c00      	cmp	r4, #0
 800eb5e:	9c04      	ldr	r4, [sp, #16]
 800eb60:	bf0c      	ite	eq
 800eb62:	2702      	moveq	r7, #2
 800eb64:	2700      	movne	r7, #0
 800eb66:	193c      	adds	r4, r7, r4
 800eb68:	9400      	str	r4, [sp, #0]
 800eb6a:	2900      	cmp	r1, #0
 800eb6c:	f000 8186 	beq.w	800ee7c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x700>
 800eb70:	f831 4014 	ldrh.w	r4, [r1, r4, lsl #1]
 800eb74:	2c00      	cmp	r4, #0
 800eb76:	f040 8221 	bne.w	800efbc <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x840>
 800eb7a:	2a00      	cmp	r2, #0
 800eb7c:	f000 821e 	beq.w	800efbc <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x840>
 800eb80:	eb0b 0402 	add.w	r4, fp, r2
 800eb84:	b2a4      	uxth	r4, r4
 800eb86:	2c09      	cmp	r4, #9
 800eb88:	bf88      	it	hi
 800eb8a:	3c0a      	subhi	r4, #10
 800eb8c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800eb90:	4eb9      	ldr	r6, [pc, #740]	@ (800ee78 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6fc>)
 800eb92:	8c64      	ldrh	r4, [r4, #34]	@ 0x22
 800eb94:	f102 0e01 	add.w	lr, r2, #1
 800eb98:	f2a4 6c4b 	subw	ip, r4, #1611	@ 0x64b
 800eb9c:	f1bc 0f14 	cmp.w	ip, #20
 800eba0:	d915      	bls.n	800ebce <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x452>
 800eba2:	f024 0c04 	bic.w	ip, r4, #4
 800eba6:	f5bc 6fce 	cmp.w	ip, #1648	@ 0x670
 800ebaa:	d010      	beq.n	800ebce <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x452>
 800ebac:	f2a4 6cd6 	subw	ip, r4, #1750	@ 0x6d6
 800ebb0:	fa1f fc8c 	uxth.w	ip, ip
 800ebb4:	f1bc 0f17 	cmp.w	ip, #23
 800ebb8:	d804      	bhi.n	800ebc4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x448>
 800ebba:	fa26 fc0c 	lsr.w	ip, r6, ip
 800ebbe:	f01c 0f01 	tst.w	ip, #1
 800ebc2:	d104      	bne.n	800ebce <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x452>
 800ebc4:	f6a4 0ce4 	subw	ip, r4, #2276	@ 0x8e4
 800ebc8:	f1bc 0f1a 	cmp.w	ip, #26
 800ebcc:	d81c      	bhi.n	800ec08 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x48c>
 800ebce:	eb0b 040e 	add.w	r4, fp, lr
 800ebd2:	b2a4      	uxth	r4, r4
 800ebd4:	2c09      	cmp	r4, #9
 800ebd6:	bf88      	it	hi
 800ebd8:	3c0a      	subhi	r4, #10
 800ebda:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800ebde:	f10e 0e01 	add.w	lr, lr, #1
 800ebe2:	8c64      	ldrh	r4, [r4, #34]	@ 0x22
 800ebe4:	e7d8      	b.n	800eb98 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x41c>
 800ebe6:	4632      	mov	r2, r6
 800ebe8:	4297      	cmp	r7, r2
 800ebea:	f6ff aeee 	blt.w	800e9ca <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x24e>
 800ebee:	2200      	movs	r2, #0
 800ebf0:	4611      	mov	r1, r2
 800ebf2:	e776      	b.n	800eae2 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x366>
 800ebf4:	d3f7      	bcc.n	800ebe6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x46a>
 800ebf6:	f10e 0102 	add.w	r1, lr, #2
 800ebfa:	2201      	movs	r2, #1
 800ebfc:	e771      	b.n	800eae2 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x366>
 800ebfe:	3401      	adds	r4, #1
 800ec00:	b2a4      	uxth	r4, r4
 800ec02:	e777      	b.n	800eaf4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x378>
 800ec04:	2400      	movs	r4, #0
 800ec06:	e7a2      	b.n	800eb4e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3d2>
 800ec08:	6c86      	ldr	r6, [r0, #72]	@ 0x48
 800ec0a:	2e00      	cmp	r6, #0
 800ec0c:	d07a      	beq.n	800ed04 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x588>
 800ec0e:	f46f 6ac4 	mvn.w	sl, #1568	@ 0x620
 800ec12:	eb04 0c0a 	add.w	ip, r4, sl
 800ec16:	f1bc 0f19 	cmp.w	ip, #25
 800ec1a:	d840      	bhi.n	800ec9e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x522>
 800ec1c:	f104 5400 	add.w	r4, r4, #536870912	@ 0x20000000
 800ec20:	f46f 69c4 	mvn.w	r9, #1568	@ 0x620
 800ec24:	68f7      	ldr	r7, [r6, #12]
 800ec26:	444c      	add	r4, r9
 800ec28:	eb07 0cc4 	add.w	ip, r7, r4, lsl #3
 800ec2c:	f10e 0401 	add.w	r4, lr, #1
 800ec30:	44de      	add	lr, fp
 800ec32:	fa1f fe8e 	uxth.w	lr, lr
 800ec36:	f1be 0f09 	cmp.w	lr, #9
 800ec3a:	bf88      	it	hi
 800ec3c:	f1ae 0e0a 	subhi.w	lr, lr, #10
 800ec40:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
 800ec44:	445c      	add	r4, fp
 800ec46:	f8be e022 	ldrh.w	lr, [lr, #34]	@ 0x22
 800ec4a:	f8df 922c 	ldr.w	r9, [pc, #556]	@ 800ee78 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6fc>
 800ec4e:	b2a4      	uxth	r4, r4
 800ec50:	f2ae 684b 	subw	r8, lr, #1611	@ 0x64b
 800ec54:	f1b8 0f14 	cmp.w	r8, #20
 800ec58:	d915      	bls.n	800ec86 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x50a>
 800ec5a:	f02e 0804 	bic.w	r8, lr, #4
 800ec5e:	f5b8 6fce 	cmp.w	r8, #1648	@ 0x670
 800ec62:	d010      	beq.n	800ec86 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x50a>
 800ec64:	f2ae 68d6 	subw	r8, lr, #1750	@ 0x6d6
 800ec68:	fa1f f888 	uxth.w	r8, r8
 800ec6c:	f1b8 0f17 	cmp.w	r8, #23
 800ec70:	d804      	bhi.n	800ec7c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x500>
 800ec72:	fa29 f808 	lsr.w	r8, r9, r8
 800ec76:	f018 0f01 	tst.w	r8, #1
 800ec7a:	d104      	bne.n	800ec86 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x50a>
 800ec7c:	f6ae 08e4 	subw	r8, lr, #2276	@ 0x8e4
 800ec80:	f1b8 0f1a 	cmp.w	r8, #26
 800ec84:	d846      	bhi.n	800ed14 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x598>
 800ec86:	2c09      	cmp	r4, #9
 800ec88:	46a6      	mov	lr, r4
 800ec8a:	bf88      	it	hi
 800ec8c:	f1a4 0e0a 	subhi.w	lr, r4, #10
 800ec90:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
 800ec94:	3401      	adds	r4, #1
 800ec96:	b2a4      	uxth	r4, r4
 800ec98:	f8be e022 	ldrh.w	lr, [lr, #34]	@ 0x22
 800ec9c:	e7d8      	b.n	800ec50 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x4d4>
 800ec9e:	f46f 68c8 	mvn.w	r8, #1600	@ 0x640
 800eca2:	eb04 0c08 	add.w	ip, r4, r8
 800eca6:	f1bc 0f09 	cmp.w	ip, #9
 800ecaa:	d806      	bhi.n	800ecba <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x53e>
 800ecac:	f104 5400 	add.w	r4, r4, #536870912	@ 0x20000000
 800ecb0:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 800ecb4:	4464      	add	r4, ip
 800ecb6:	6937      	ldr	r7, [r6, #16]
 800ecb8:	e7b6      	b.n	800ec28 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x4ac>
 800ecba:	f46f 67ce 	mvn.w	r7, #1648	@ 0x670
 800ecbe:	eb04 0c07 	add.w	ip, r4, r7
 800ecc2:	f1bc 0f62 	cmp.w	ip, #98	@ 0x62
 800ecc6:	d81d      	bhi.n	800ed04 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x588>
 800ecc8:	f8b6 c01e 	ldrh.w	ip, [r6, #30]
 800eccc:	f1bc 0f00 	cmp.w	ip, #0
 800ecd0:	d0ac      	beq.n	800ec2c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x4b0>
 800ecd2:	6977      	ldr	r7, [r6, #20]
 800ecd4:	9703      	str	r7, [sp, #12]
 800ecd6:	f04f 0900 	mov.w	r9, #0
 800ecda:	eb0c 0809 	add.w	r8, ip, r9
 800ecde:	270a      	movs	r7, #10
 800ece0:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ece4:	fb07 fa08 	mul.w	sl, r7, r8
 800ece8:	9f03      	ldr	r7, [sp, #12]
 800ecea:	4457      	add	r7, sl
 800ecec:	9705      	str	r7, [sp, #20]
 800ecee:	9f03      	ldr	r7, [sp, #12]
 800ecf0:	f837 a00a 	ldrh.w	sl, [r7, sl]
 800ecf4:	45a2      	cmp	sl, r4
 800ecf6:	d208      	bcs.n	800ed0a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x58e>
 800ecf8:	f108 0901 	add.w	r9, r8, #1
 800ecfc:	e000      	b.n	800ed00 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x584>
 800ecfe:	46c4      	mov	ip, r8
 800ed00:	45cc      	cmp	ip, r9
 800ed02:	dcea      	bgt.n	800ecda <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x55e>
 800ed04:	f04f 0c00 	mov.w	ip, #0
 800ed08:	e790      	b.n	800ec2c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x4b0>
 800ed0a:	d8f8      	bhi.n	800ecfe <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x582>
 800ed0c:	9c05      	ldr	r4, [sp, #20]
 800ed0e:	f104 0c02 	add.w	ip, r4, #2
 800ed12:	e78b      	b.n	800ec2c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x4b0>
 800ed14:	2e00      	cmp	r6, #0
 800ed16:	d05d      	beq.n	800edd4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x658>
 800ed18:	f46f 6ac4 	mvn.w	sl, #1568	@ 0x620
 800ed1c:	eb0e 040a 	add.w	r4, lr, sl
 800ed20:	2c19      	cmp	r4, #25
 800ed22:	d829      	bhi.n	800ed78 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5fc>
 800ed24:	f10e 5400 	add.w	r4, lr, #536870912	@ 0x20000000
 800ed28:	f46f 69c4 	mvn.w	r9, #1568	@ 0x620
 800ed2c:	68f7      	ldr	r7, [r6, #12]
 800ed2e:	444c      	add	r4, r9
 800ed30:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 800ed34:	f1bc 0f00 	cmp.w	ip, #0
 800ed38:	d00f      	beq.n	800ed5a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5de>
 800ed3a:	f8bc c006 	ldrh.w	ip, [ip, #6]
 800ed3e:	f1bc 0f00 	cmp.w	ip, #0
 800ed42:	d00a      	beq.n	800ed5a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5de>
 800ed44:	b14c      	cbz	r4, 800ed5a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5de>
 800ed46:	f8b4 c002 	ldrh.w	ip, [r4, #2]
 800ed4a:	f1bc 0f00 	cmp.w	ip, #0
 800ed4e:	f040 8109 	bne.w	800ef64 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7e8>
 800ed52:	88e4      	ldrh	r4, [r4, #6]
 800ed54:	2c00      	cmp	r4, #0
 800ed56:	f040 8105 	bne.w	800ef64 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7e8>
 800ed5a:	9c00      	ldr	r4, [sp, #0]
 800ed5c:	2c02      	cmp	r4, #2
 800ed5e:	d13f      	bne.n	800ede0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x664>
 800ed60:	880c      	ldrh	r4, [r1, #0]
 800ed62:	2c00      	cmp	r4, #0
 800ed64:	f000 80fe 	beq.w	800ef64 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7e8>
 800ed68:	f240 6444 	movw	r4, #1604	@ 0x644
 800ed6c:	42a3      	cmp	r3, r4
 800ed6e:	f040 80f9 	bne.w	800ef64 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7e8>
 800ed72:	2401      	movs	r4, #1
 800ed74:	9401      	str	r4, [sp, #4]
 800ed76:	e0dc      	b.n	800ef32 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7b6>
 800ed78:	f46f 68c8 	mvn.w	r8, #1600	@ 0x640
 800ed7c:	eb0e 0408 	add.w	r4, lr, r8
 800ed80:	2c09      	cmp	r4, #9
 800ed82:	d806      	bhi.n	800ed92 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x616>
 800ed84:	f46f 67c8 	mvn.w	r7, #1600	@ 0x640
 800ed88:	f10e 5400 	add.w	r4, lr, #536870912	@ 0x20000000
 800ed8c:	443c      	add	r4, r7
 800ed8e:	6937      	ldr	r7, [r6, #16]
 800ed90:	e7ce      	b.n	800ed30 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5b4>
 800ed92:	f46f 64ce 	mvn.w	r4, #1648	@ 0x670
 800ed96:	4474      	add	r4, lr
 800ed98:	2c62      	cmp	r4, #98	@ 0x62
 800ed9a:	d81b      	bhi.n	800edd4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x658>
 800ed9c:	8bf4      	ldrh	r4, [r6, #30]
 800ed9e:	2c00      	cmp	r4, #0
 800eda0:	d0c8      	beq.n	800ed34 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5b8>
 800eda2:	6977      	ldr	r7, [r6, #20]
 800eda4:	9703      	str	r7, [sp, #12]
 800eda6:	f04f 0900 	mov.w	r9, #0
 800edaa:	eb04 0809 	add.w	r8, r4, r9
 800edae:	270a      	movs	r7, #10
 800edb0:	ea4f 0868 	mov.w	r8, r8, asr #1
 800edb4:	fb07 fa08 	mul.w	sl, r7, r8
 800edb8:	9f03      	ldr	r7, [sp, #12]
 800edba:	4457      	add	r7, sl
 800edbc:	9705      	str	r7, [sp, #20]
 800edbe:	9f03      	ldr	r7, [sp, #12]
 800edc0:	f837 a00a 	ldrh.w	sl, [r7, sl]
 800edc4:	45f2      	cmp	sl, lr
 800edc6:	d207      	bcs.n	800edd8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x65c>
 800edc8:	f108 0901 	add.w	r9, r8, #1
 800edcc:	e000      	b.n	800edd0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x654>
 800edce:	4644      	mov	r4, r8
 800edd0:	45a1      	cmp	r9, r4
 800edd2:	dbea      	blt.n	800edaa <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x62e>
 800edd4:	2400      	movs	r4, #0
 800edd6:	e7ad      	b.n	800ed34 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5b8>
 800edd8:	d8f9      	bhi.n	800edce <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x652>
 800edda:	9c05      	ldr	r4, [sp, #20]
 800eddc:	3402      	adds	r4, #2
 800edde:	e7a9      	b.n	800ed34 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5b8>
 800ede0:	9c00      	ldr	r4, [sp, #0]
 800ede2:	2c03      	cmp	r4, #3
 800ede4:	f040 80be 	bne.w	800ef64 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7e8>
 800ede8:	884c      	ldrh	r4, [r1, #2]
 800edea:	2c00      	cmp	r4, #0
 800edec:	f000 80ba 	beq.w	800ef64 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7e8>
 800edf0:	f240 6444 	movw	r4, #1604	@ 0x644
 800edf4:	42a3      	cmp	r3, r4
 800edf6:	f040 80b5 	bne.w	800ef64 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7e8>
 800edfa:	2401      	movs	r4, #1
 800edfc:	9401      	str	r4, [sp, #4]
 800edfe:	884c      	ldrh	r4, [r1, #2]
 800ee00:	2c00      	cmp	r4, #0
 800ee02:	f000 8096 	beq.w	800ef32 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7b6>
 800ee06:	2401      	movs	r4, #1
 800ee08:	9400      	str	r4, [sp, #0]
 800ee0a:	e0de      	b.n	800efca <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x84e>
 800ee0c:	f46f 68c8 	mvn.w	r8, #1600	@ 0x640
 800ee10:	eb03 0408 	add.w	r4, r3, r8
 800ee14:	b2a4      	uxth	r4, r4
 800ee16:	2c09      	cmp	r4, #9
 800ee18:	d806      	bhi.n	800ee28 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6ac>
 800ee1a:	f103 5400 	add.w	r4, r3, #536870912	@ 0x20000000
 800ee1e:	f46f 67c8 	mvn.w	r7, #1600	@ 0x640
 800ee22:	443c      	add	r4, r7
 800ee24:	6936      	ldr	r6, [r6, #16]
 800ee26:	e0ac      	b.n	800ef82 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x806>
 800ee28:	f46f 6ace 	mvn.w	sl, #1648	@ 0x670
 800ee2c:	eb03 040a 	add.w	r4, r3, sl
 800ee30:	b2a4      	uxth	r4, r4
 800ee32:	2c62      	cmp	r4, #98	@ 0x62
 800ee34:	d819      	bhi.n	800ee6a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6ee>
 800ee36:	8bf4      	ldrh	r4, [r6, #30]
 800ee38:	b1bc      	cbz	r4, 800ee6a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6ee>
 800ee3a:	f8d6 e014 	ldr.w	lr, [r6, #20]
 800ee3e:	f04f 0c00 	mov.w	ip, #0
 800ee42:	4626      	mov	r6, r4
 800ee44:	f04f 0a0a 	mov.w	sl, #10
 800ee48:	eb06 040c 	add.w	r4, r6, ip
 800ee4c:	1064      	asrs	r4, r4, #1
 800ee4e:	fb0a f804 	mul.w	r8, sl, r4
 800ee52:	eb0e 0908 	add.w	r9, lr, r8
 800ee56:	f83e 8008 	ldrh.w	r8, [lr, r8]
 800ee5a:	4598      	cmp	r8, r3
 800ee5c:	d207      	bcs.n	800ee6e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6f2>
 800ee5e:	f104 0c01 	add.w	ip, r4, #1
 800ee62:	e000      	b.n	800ee66 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6ea>
 800ee64:	4626      	mov	r6, r4
 800ee66:	45b4      	cmp	ip, r6
 800ee68:	dbee      	blt.n	800ee48 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6cc>
 800ee6a:	2600      	movs	r6, #0
 800ee6c:	e08b      	b.n	800ef86 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x80a>
 800ee6e:	d8f9      	bhi.n	800ee64 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6e8>
 800ee70:	f109 0602 	add.w	r6, r9, #2
 800ee74:	e087      	b.n	800ef86 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x80a>
 800ee76:	bf00      	nop
 800ee78:	00f67e7f 	.word	0x00f67e7f
 800ee7c:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800ee7e:	b18c      	cbz	r4, 800eea4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x728>
 800ee80:	f46f 69c4 	mvn.w	r9, #1568	@ 0x620
 800ee84:	eb03 0609 	add.w	r6, r3, r9
 800ee88:	b2b6      	uxth	r6, r6
 800ee8a:	2e19      	cmp	r6, #25
 800ee8c:	d812      	bhi.n	800eeb4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x738>
 800ee8e:	f103 5100 	add.w	r1, r3, #536870912	@ 0x20000000
 800ee92:	f46f 68c4 	mvn.w	r8, #1568	@ 0x620
 800ee96:	68e4      	ldr	r4, [r4, #12]
 800ee98:	4441      	add	r1, r8
 800ee9a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800ee9e:	2900      	cmp	r1, #0
 800eea0:	f040 808c 	bne.w	800efbc <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x840>
 800eea4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800eea8:	f47f adb1 	bne.w	800ea0e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800eeac:	2200      	movs	r2, #0
 800eeae:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
 800eeb2:	e5ac      	b.n	800ea0e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800eeb4:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 800eeb8:	eb03 060c 	add.w	r6, r3, ip
 800eebc:	b2b6      	uxth	r6, r6
 800eebe:	2e09      	cmp	r6, #9
 800eec0:	d806      	bhi.n	800eed0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x754>
 800eec2:	f103 5100 	add.w	r1, r3, #536870912	@ 0x20000000
 800eec6:	f46f 67c8 	mvn.w	r7, #1600	@ 0x640
 800eeca:	4439      	add	r1, r7
 800eecc:	6924      	ldr	r4, [r4, #16]
 800eece:	e7e4      	b.n	800ee9a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x71e>
 800eed0:	f46f 66ce 	mvn.w	r6, #1648	@ 0x670
 800eed4:	199e      	adds	r6, r3, r6
 800eed6:	b2b6      	uxth	r6, r6
 800eed8:	2e62      	cmp	r6, #98	@ 0x62
 800eeda:	d8e3      	bhi.n	800eea4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x728>
 800eedc:	8be6      	ldrh	r6, [r4, #30]
 800eede:	2e00      	cmp	r6, #0
 800eee0:	d0e0      	beq.n	800eea4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x728>
 800eee2:	f8d4 e014 	ldr.w	lr, [r4, #20]
 800eee6:	f04f 090a 	mov.w	r9, #10
 800eeea:	4634      	mov	r4, r6
 800eeec:	1866      	adds	r6, r4, r1
 800eeee:	1076      	asrs	r6, r6, #1
 800eef0:	fb09 fc06 	mul.w	ip, r9, r6
 800eef4:	eb0e 080c 	add.w	r8, lr, ip
 800eef8:	f83e c00c 	ldrh.w	ip, [lr, ip]
 800eefc:	459c      	cmp	ip, r3
 800eefe:	d205      	bcs.n	800ef0c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x790>
 800ef00:	1c71      	adds	r1, r6, #1
 800ef02:	e000      	b.n	800ef06 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x78a>
 800ef04:	4634      	mov	r4, r6
 800ef06:	428c      	cmp	r4, r1
 800ef08:	dcf0      	bgt.n	800eeec <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x770>
 800ef0a:	e7cb      	b.n	800eea4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x728>
 800ef0c:	d8fa      	bhi.n	800ef04 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x788>
 800ef0e:	f108 0102 	add.w	r1, r8, #2
 800ef12:	e053      	b.n	800efbc <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x840>
 800ef14:	9c00      	ldr	r4, [sp, #0]
 800ef16:	2c03      	cmp	r4, #3
 800ef18:	d104      	bne.n	800ef24 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7a8>
 800ef1a:	88cc      	ldrh	r4, [r1, #6]
 800ef1c:	2c00      	cmp	r4, #0
 800ef1e:	f43f af6c 	beq.w	800edfa <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x67e>
 800ef22:	e052      	b.n	800efca <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x84e>
 800ef24:	9c00      	ldr	r4, [sp, #0]
 800ef26:	2c01      	cmp	r4, #1
 800ef28:	f43f af69 	beq.w	800edfe <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x682>
 800ef2c:	9c00      	ldr	r4, [sp, #0]
 800ef2e:	2c00      	cmp	r4, #0
 800ef30:	d14b      	bne.n	800efca <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x84e>
 800ef32:	880c      	ldrh	r4, [r1, #0]
 800ef34:	b924      	cbnz	r4, 800ef40 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7c4>
 800ef36:	884f      	ldrh	r7, [r1, #2]
 800ef38:	1c3c      	adds	r4, r7, #0
 800ef3a:	bf18      	it	ne
 800ef3c:	2401      	movne	r4, #1
 800ef3e:	e763      	b.n	800ee08 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x68c>
 800ef40:	2400      	movs	r4, #0
 800ef42:	e761      	b.n	800ee08 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x68c>
 800ef44:	233e      	movs	r3, #62	@ 0x3e
 800ef46:	e562      	b.n	800ea0e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800ef48:	233c      	movs	r3, #60	@ 0x3c
 800ef4a:	e560      	b.n	800ea0e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800ef4c:	2329      	movs	r3, #41	@ 0x29
 800ef4e:	e55e      	b.n	800ea0e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800ef50:	2328      	movs	r3, #40	@ 0x28
 800ef52:	e55c      	b.n	800ea0e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800ef54:	235d      	movs	r3, #93	@ 0x5d
 800ef56:	e55a      	b.n	800ea0e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800ef58:	235b      	movs	r3, #91	@ 0x5b
 800ef5a:	e558      	b.n	800ea0e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800ef5c:	237d      	movs	r3, #125	@ 0x7d
 800ef5e:	e556      	b.n	800ea0e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800ef60:	237b      	movs	r3, #123	@ 0x7b
 800ef62:	e554      	b.n	800ea0e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800ef64:	b17e      	cbz	r6, 800ef86 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x80a>
 800ef66:	f46f 6ac4 	mvn.w	sl, #1568	@ 0x620
 800ef6a:	eb03 040a 	add.w	r4, r3, sl
 800ef6e:	b2a4      	uxth	r4, r4
 800ef70:	2c19      	cmp	r4, #25
 800ef72:	f63f af4b 	bhi.w	800ee0c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x690>
 800ef76:	f103 5400 	add.w	r4, r3, #536870912	@ 0x20000000
 800ef7a:	f46f 69c4 	mvn.w	r9, #1568	@ 0x620
 800ef7e:	68f6      	ldr	r6, [r6, #12]
 800ef80:	444c      	add	r4, r9
 800ef82:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
 800ef86:	9c02      	ldr	r4, [sp, #8]
 800ef88:	9f04      	ldr	r7, [sp, #16]
 800ef8a:	8c64      	ldrh	r4, [r4, #34]	@ 0x22
 800ef8c:	f2a4 6422 	subw	r4, r4, #1570	@ 0x622
 800ef90:	b2a4      	uxth	r4, r4
 800ef92:	2cb1      	cmp	r4, #177	@ 0xb1
 800ef94:	bf8c      	ite	hi
 800ef96:	f04f 0c00 	movhi.w	ip, #0
 800ef9a:	f04f 0c02 	movls.w	ip, #2
 800ef9e:	44bc      	add	ip, r7
 800efa0:	b166      	cbz	r6, 800efbc <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x840>
 800efa2:	f836 e01c 	ldrh.w	lr, [r6, ip, lsl #1]
 800efa6:	f1be 0f00 	cmp.w	lr, #0
 800efaa:	d007      	beq.n	800efbc <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x840>
 800efac:	2cb1      	cmp	r4, #177	@ 0xb1
 800efae:	bf94      	ite	ls
 800efb0:	2200      	movls	r2, #0
 800efb2:	2201      	movhi	r2, #1
 800efb4:	e9cd c200 	strd	ip, r2, [sp]
 800efb8:	4631      	mov	r1, r6
 800efba:	2200      	movs	r2, #0
 800efbc:	9c00      	ldr	r4, [sp, #0]
 800efbe:	2c02      	cmp	r4, #2
 800efc0:	d1a8      	bne.n	800ef14 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x798>
 800efc2:	888c      	ldrh	r4, [r1, #4]
 800efc4:	2c00      	cmp	r4, #0
 800efc6:	f43f aed4 	beq.w	800ed72 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5f6>
 800efca:	9c00      	ldr	r4, [sp, #0]
 800efcc:	9e00      	ldr	r6, [sp, #0]
 800efce:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 800efd2:	f831 1016 	ldrh.w	r1, [r1, r6, lsl #1]
 800efd6:	2900      	cmp	r1, #0
 800efd8:	f43f ad19 	beq.w	800ea0e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800efdc:	9b01      	ldr	r3, [sp, #4]
 800efde:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800efe2:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 800efe4:	b292      	uxth	r2, r2
 800efe6:	1a9b      	subs	r3, r3, r2
 800efe8:	445a      	add	r2, fp
 800efea:	b292      	uxth	r2, r2
 800efec:	2a09      	cmp	r2, #9
 800efee:	bf88      	it	hi
 800eff0:	3a0a      	subhi	r2, #10
 800eff2:	8703      	strh	r3, [r0, #56]	@ 0x38
 800eff4:	86c2      	strh	r2, [r0, #54]	@ 0x36
 800eff6:	b145      	cbz	r5, 800f00a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x88e>
 800eff8:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800effa:	3301      	adds	r3, #1
 800effc:	b29b      	uxth	r3, r3
 800effe:	2b0a      	cmp	r3, #10
 800f000:	bf28      	it	cs
 800f002:	2300      	movcs	r3, #0
 800f004:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800f008:	8445      	strh	r5, [r0, #34]	@ 0x22
 800f00a:	8823      	ldrh	r3, [r4, #0]
 800f00c:	e4ff      	b.n	800ea0e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800f00e:	2b20      	cmp	r3, #32
 800f010:	f47f ad24 	bne.w	800ea5c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x2e0>
 800f014:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800f018:	00d2      	lsls	r2, r2, #3
 800f01a:	f5a2 5240 	sub.w	r2, r2, #12288	@ 0x3000
 800f01e:	3a30      	subs	r2, #48	@ 0x30
 800f020:	b292      	uxth	r2, r2
 800f022:	f240 6152 	movw	r1, #1618	@ 0x652
 800f026:	e52f      	b.n	800ea88 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x30c>

0800f028 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 800f028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f02a:	4605      	mov	r5, r0
 800f02c:	4608      	mov	r0, r1
 800f02e:	b1e9      	cbz	r1, 800f06c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 800f030:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 800f034:	460b      	mov	r3, r1
 800f036:	f101 0708 	add.w	r7, r1, #8
 800f03a:	4622      	mov	r2, r4
 800f03c:	6818      	ldr	r0, [r3, #0]
 800f03e:	6859      	ldr	r1, [r3, #4]
 800f040:	4626      	mov	r6, r4
 800f042:	c603      	stmia	r6!, {r0, r1}
 800f044:	3308      	adds	r3, #8
 800f046:	42bb      	cmp	r3, r7
 800f048:	4634      	mov	r4, r6
 800f04a:	d1f7      	bne.n	800f03c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 800f04c:	6818      	ldr	r0, [r3, #0]
 800f04e:	6030      	str	r0, [r6, #0]
 800f050:	889b      	ldrh	r3, [r3, #4]
 800f052:	80b3      	strh	r3, [r6, #4]
 800f054:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 800f058:	015b      	lsls	r3, r3, #5
 800f05a:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800f05e:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 800f062:	430b      	orrs	r3, r1
 800f064:	425b      	negs	r3, r3
 800f066:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 800f06a:	4610      	mov	r0, r2
 800f06c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f06e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 800f06e:	b538      	push	{r3, r4, r5, lr}
 800f070:	460c      	mov	r4, r1
 800f072:	6811      	ldr	r1, [r2, #0]
 800f074:	4610      	mov	r0, r2
 800f076:	68cd      	ldr	r5, [r1, #12]
 800f078:	4619      	mov	r1, r3
 800f07a:	47a8      	blx	r5
 800f07c:	2800      	cmp	r0, #0
 800f07e:	bf08      	it	eq
 800f080:	4620      	moveq	r0, r4
 800f082:	bd38      	pop	{r3, r4, r5, pc}

0800f084 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 800f084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f088:	468c      	mov	ip, r1
 800f08a:	4604      	mov	r4, r0
 800f08c:	4615      	mov	r5, r2
 800f08e:	b942      	cbnz	r2, 800f0a2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 800f090:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 800f094:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 800f098:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 800f09c:	4628      	mov	r0, r5
 800f09e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0a2:	7b50      	ldrb	r0, [r2, #13]
 800f0a4:	8893      	ldrh	r3, [r2, #4]
 800f0a6:	0106      	lsls	r6, r0, #4
 800f0a8:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 800f0ac:	79ee      	ldrb	r6, [r5, #7]
 800f0ae:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 800f0b2:	4316      	orrs	r6, r2
 800f0b4:	185a      	adds	r2, r3, r1
 800f0b6:	b291      	uxth	r1, r2
 800f0b8:	291d      	cmp	r1, #29
 800f0ba:	b2b7      	uxth	r7, r6
 800f0bc:	d87e      	bhi.n	800f1bc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x138>
 800f0be:	2201      	movs	r2, #1
 800f0c0:	408a      	lsls	r2, r1
 800f0c2:	4975      	ldr	r1, [pc, #468]	@ (800f298 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 800f0c4:	420a      	tst	r2, r1
 800f0c6:	ea4f 06e6 	mov.w	r6, r6, asr #3
 800f0ca:	d12d      	bne.n	800f128 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 800f0cc:	f412 7f60 	tst.w	r2, #896	@ 0x380
 800f0d0:	d074      	beq.n	800f1bc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x138>
 800f0d2:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 800f0d6:	462b      	mov	r3, r5
 800f0d8:	f105 0e08 	add.w	lr, r5, #8
 800f0dc:	4615      	mov	r5, r2
 800f0de:	6818      	ldr	r0, [r3, #0]
 800f0e0:	6859      	ldr	r1, [r3, #4]
 800f0e2:	4694      	mov	ip, r2
 800f0e4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800f0e8:	3308      	adds	r3, #8
 800f0ea:	4573      	cmp	r3, lr
 800f0ec:	4662      	mov	r2, ip
 800f0ee:	d1f6      	bne.n	800f0de <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 800f0f0:	6818      	ldr	r0, [r3, #0]
 800f0f2:	f8cc 0000 	str.w	r0, [ip]
 800f0f6:	889b      	ldrh	r3, [r3, #4]
 800f0f8:	f8ac 3004 	strh.w	r3, [ip, #4]
 800f0fc:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800f100:	f894 0059 	ldrb.w	r0, [r4, #89]	@ 0x59
 800f104:	b2b3      	uxth	r3, r6
 800f106:	1aca      	subs	r2, r1, r3
 800f108:	b292      	uxth	r2, r2
 800f10a:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 800f10e:	10d2      	asrs	r2, r2, #3
 800f110:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 800f114:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 800f118:	4302      	orrs	r2, r0
 800f11a:	1bcf      	subs	r7, r1, r7
 800f11c:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 800f120:	1afb      	subs	r3, r7, r3
 800f122:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 800f126:	e7b9      	b.n	800f09c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 800f128:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 800f12c:	462b      	mov	r3, r5
 800f12e:	f105 0808 	add.w	r8, r5, #8
 800f132:	4615      	mov	r5, r2
 800f134:	6818      	ldr	r0, [r3, #0]
 800f136:	6859      	ldr	r1, [r3, #4]
 800f138:	4696      	mov	lr, r2
 800f13a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800f13e:	3308      	adds	r3, #8
 800f140:	4543      	cmp	r3, r8
 800f142:	4672      	mov	r2, lr
 800f144:	d1f6      	bne.n	800f134 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 800f146:	6818      	ldr	r0, [r3, #0]
 800f148:	f8ce 0000 	str.w	r0, [lr]
 800f14c:	889b      	ldrh	r3, [r3, #4]
 800f14e:	f8ae 3004 	strh.w	r3, [lr, #4]
 800f152:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800f154:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800f158:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 800f15a:	f640 6333 	movw	r3, #3635	@ 0xe33
 800f15e:	4299      	cmp	r1, r3
 800f160:	d111      	bne.n	800f186 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 800f162:	f8dc 3000 	ldr.w	r3, [ip]
 800f166:	4660      	mov	r0, ip
 800f168:	68db      	ldr	r3, [r3, #12]
 800f16a:	4798      	blx	r3
 800f16c:	7b41      	ldrb	r1, [r0, #13]
 800f16e:	00cb      	lsls	r3, r1, #3
 800f170:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800f174:	7a03      	ldrb	r3, [r0, #8]
 800f176:	4313      	orrs	r3, r2
 800f178:	064a      	lsls	r2, r1, #25
 800f17a:	bf44      	itt	mi
 800f17c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800f180:	b21b      	sxthmi	r3, r3
 800f182:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800f186:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 800f18a:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800f18e:	443b      	add	r3, r7
 800f190:	4433      	add	r3, r6
 800f192:	b29b      	uxth	r3, r3
 800f194:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800f198:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800f19c:	10db      	asrs	r3, r3, #3
 800f19e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800f1a2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f1a6:	4313      	orrs	r3, r2
 800f1a8:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800f1ac:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
 800f1b0:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 800f1b4:	1a9b      	subs	r3, r3, r2
 800f1b6:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 800f1ba:	e76f      	b.n	800f09c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 800f1bc:	f023 0204 	bic.w	r2, r3, #4
 800f1c0:	f640 611b 	movw	r1, #3611	@ 0xe1b
 800f1c4:	428a      	cmp	r2, r1
 800f1c6:	d003      	beq.n	800f1d0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14c>
 800f1c8:	f640 621d 	movw	r2, #3613	@ 0xe1d
 800f1cc:	4293      	cmp	r3, r2
 800f1ce:	d120      	bne.n	800f212 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18e>
 800f1d0:	3b01      	subs	r3, #1
 800f1d2:	b29b      	uxth	r3, r3
 800f1d4:	4662      	mov	r2, ip
 800f1d6:	4629      	mov	r1, r5
 800f1d8:	4620      	mov	r0, r4
 800f1da:	f7ff ff48 	bl	800f06e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800f1de:	7b41      	ldrb	r1, [r0, #13]
 800f1e0:	00cb      	lsls	r3, r1, #3
 800f1e2:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800f1e6:	7a03      	ldrb	r3, [r0, #8]
 800f1e8:	0648      	lsls	r0, r1, #25
 800f1ea:	ea43 0302 	orr.w	r3, r3, r2
 800f1ee:	bf44      	itt	mi
 800f1f0:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800f1f4:	b21b      	sxthmi	r3, r3
 800f1f6:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800f1fa:	7b6b      	ldrb	r3, [r5, #13]
 800f1fc:	7aaa      	ldrb	r2, [r5, #10]
 800f1fe:	005b      	lsls	r3, r3, #1
 800f200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f204:	4313      	orrs	r3, r2
 800f206:	115a      	asrs	r2, r3, #5
 800f208:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 800f20c:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 800f210:	e032      	b.n	800f278 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 800f212:	00c2      	lsls	r2, r0, #3
 800f214:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 800f218:	7a2a      	ldrb	r2, [r5, #8]
 800f21a:	430a      	orrs	r2, r1
 800f21c:	0641      	lsls	r1, r0, #25
 800f21e:	bf44      	itt	mi
 800f220:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 800f224:	b212      	sxthmi	r2, r2
 800f226:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 800f22a:	f640 6109 	movw	r1, #3593	@ 0xe09
 800f22e:	f023 0210 	bic.w	r2, r3, #16
 800f232:	428a      	cmp	r2, r1
 800f234:	d003      	beq.n	800f23e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 800f236:	f640 6213 	movw	r2, #3603	@ 0xe13
 800f23a:	4293      	cmp	r3, r2
 800f23c:	d129      	bne.n	800f292 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 800f23e:	7b6e      	ldrb	r6, [r5, #13]
 800f240:	0076      	lsls	r6, r6, #1
 800f242:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 800f246:	7aae      	ldrb	r6, [r5, #10]
 800f248:	4316      	orrs	r6, r2
 800f24a:	f640 6213 	movw	r2, #3603	@ 0xe13
 800f24e:	4293      	cmp	r3, r2
 800f250:	bf1a      	itte	ne
 800f252:	f103 33ff 	addne.w	r3, r3, #4294967295
 800f256:	b29b      	uxthne	r3, r3
 800f258:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 800f25c:	4662      	mov	r2, ip
 800f25e:	4629      	mov	r1, r5
 800f260:	4620      	mov	r0, r4
 800f262:	f7ff ff04 	bl	800f06e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800f266:	7b43      	ldrb	r3, [r0, #13]
 800f268:	7a82      	ldrb	r2, [r0, #10]
 800f26a:	005b      	lsls	r3, r3, #1
 800f26c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f270:	4313      	orrs	r3, r2
 800f272:	1af6      	subs	r6, r6, r3
 800f274:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
 800f278:	7b69      	ldrb	r1, [r5, #13]
 800f27a:	00cb      	lsls	r3, r1, #3
 800f27c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800f280:	7a2b      	ldrb	r3, [r5, #8]
 800f282:	4313      	orrs	r3, r2
 800f284:	064a      	lsls	r2, r1, #25
 800f286:	bf44      	itt	mi
 800f288:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800f28c:	b21b      	sxthmi	r3, r3
 800f28e:	1bdb      	subs	r3, r3, r7
 800f290:	e747      	b.n	800f122 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 800f292:	2300      	movs	r3, #0
 800f294:	e7ba      	b.n	800f20c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 800f296:	bf00      	nop
 800f298:	3fc00079 	.word	0x3fc00079

0800f29c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 800f29c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f2a0:	4604      	mov	r4, r0
 800f2a2:	b942      	cbnz	r2, 800f2b6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 800f2a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f2a8:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 800f2ac:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 800f2b0:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 800f2b4:	e047      	b.n	800f346 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800f2b6:	7b51      	ldrb	r1, [r2, #13]
 800f2b8:	8893      	ldrh	r3, [r2, #4]
 800f2ba:	010d      	lsls	r5, r1, #4
 800f2bc:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 800f2c0:	79d5      	ldrb	r5, [r2, #7]
 800f2c2:	4305      	orrs	r5, r0
 800f2c4:	2d04      	cmp	r5, #4
 800f2c6:	bfcc      	ite	gt
 800f2c8:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 800f2cc:	f04f 0e01 	movle.w	lr, #1
 800f2d0:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 800f2d4:	f200 80ab 	bhi.w	800f42e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 800f2d8:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 800f2dc:	4283      	cmp	r3, r0
 800f2de:	d216      	bcs.n	800f30e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f2e0:	f240 605b 	movw	r0, #1627	@ 0x65b
 800f2e4:	4283      	cmp	r3, r0
 800f2e6:	d859      	bhi.n	800f39c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 800f2e8:	f240 6057 	movw	r0, #1623	@ 0x657
 800f2ec:	4283      	cmp	r3, r0
 800f2ee:	d20e      	bcs.n	800f30e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f2f0:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 800f2f4:	d24a      	bcs.n	800f38c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 800f2f6:	f240 604e 	movw	r0, #1614	@ 0x64e
 800f2fa:	4283      	cmp	r3, r0
 800f2fc:	d207      	bcs.n	800f30e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f2fe:	f240 601a 	movw	r0, #1562	@ 0x61a
 800f302:	4283      	cmp	r3, r0
 800f304:	d02a      	beq.n	800f35c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800f306:	d821      	bhi.n	800f34c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 800f308:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 800f30c:	d35b      	bcc.n	800f3c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800f30e:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 800f312:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800f316:	f040 80d0 	bne.w	800f4ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800f31a:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 800f31e:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800f322:	f040 80ca 	bne.w	800f4ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800f326:	00cb      	lsls	r3, r1, #3
 800f328:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800f32c:	7a13      	ldrb	r3, [r2, #8]
 800f32e:	0649      	lsls	r1, r1, #25
 800f330:	ea43 0300 	orr.w	r3, r3, r0
 800f334:	bf44      	itt	mi
 800f336:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800f33a:	b21b      	sxthmi	r3, r3
 800f33c:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800f340:	1b5d      	subs	r5, r3, r5
 800f342:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800f346:	4610      	mov	r0, r2
 800f348:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f34c:	f240 604b 	movw	r0, #1611	@ 0x64b
 800f350:	4283      	cmp	r3, r0
 800f352:	d338      	bcc.n	800f3c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800f354:	f240 604c 	movw	r0, #1612	@ 0x64c
 800f358:	4283      	cmp	r3, r0
 800f35a:	d9d8      	bls.n	800f30e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f35c:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 800f360:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 800f364:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800f368:	f040 80f2 	bne.w	800f550 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 800f36c:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800f370:	f040 80ee 	bne.w	800f550 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 800f374:	00cb      	lsls	r3, r1, #3
 800f376:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800f37a:	7a13      	ldrb	r3, [r2, #8]
 800f37c:	064e      	lsls	r6, r1, #25
 800f37e:	ea43 0300 	orr.w	r3, r3, r0
 800f382:	bf44      	itt	mi
 800f384:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800f388:	b21b      	sxthmi	r3, r3
 800f38a:	e7d9      	b.n	800f340 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 800f38c:	f240 6054 	movw	r0, #1620	@ 0x654
 800f390:	4283      	cmp	r3, r0
 800f392:	d8e3      	bhi.n	800f35c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800f394:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 800f398:	d9e0      	bls.n	800f35c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800f39a:	e7b8      	b.n	800f30e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f39c:	f240 6074 	movw	r0, #1652	@ 0x674
 800f3a0:	4283      	cmp	r3, r0
 800f3a2:	d0b4      	beq.n	800f30e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f3a4:	d82d      	bhi.n	800f402 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 800f3a6:	f240 605e 	movw	r0, #1630	@ 0x65e
 800f3aa:	4283      	cmp	r3, r0
 800f3ac:	d804      	bhi.n	800f3b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 800f3ae:	f240 605d 	movw	r0, #1629	@ 0x65d
 800f3b2:	4283      	cmp	r3, r0
 800f3b4:	d3d2      	bcc.n	800f35c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800f3b6:	e7aa      	b.n	800f30e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f3b8:	f240 605f 	movw	r0, #1631	@ 0x65f
 800f3bc:	4283      	cmp	r3, r0
 800f3be:	d0cd      	beq.n	800f35c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800f3c0:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 800f3c4:	d0a3      	beq.n	800f30e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f3c6:	00cb      	lsls	r3, r1, #3
 800f3c8:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800f3cc:	7a13      	ldrb	r3, [r2, #8]
 800f3ce:	0649      	lsls	r1, r1, #25
 800f3d0:	ea43 0300 	orr.w	r3, r3, r0
 800f3d4:	bf44      	itt	mi
 800f3d6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800f3da:	b21b      	sxthmi	r3, r3
 800f3dc:	1b5d      	subs	r5, r3, r5
 800f3de:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800f3e2:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800f3e6:	7b53      	ldrb	r3, [r2, #13]
 800f3e8:	015b      	lsls	r3, r3, #5
 800f3ea:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800f3ee:	7993      	ldrb	r3, [r2, #6]
 800f3f0:	430b      	orrs	r3, r1
 800f3f2:	005b      	lsls	r3, r3, #1
 800f3f4:	2105      	movs	r1, #5
 800f3f6:	fb93 f3f1 	sdiv	r3, r3, r1
 800f3fa:	f992 1009 	ldrsb.w	r1, [r2, #9]
 800f3fe:	440b      	add	r3, r1
 800f400:	e756      	b.n	800f2b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 800f402:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 800f406:	4283      	cmp	r3, r0
 800f408:	d809      	bhi.n	800f41e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 800f40a:	f240 60df 	movw	r0, #1759	@ 0x6df
 800f40e:	4283      	cmp	r3, r0
 800f410:	f4bf af7d 	bcs.w	800f30e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f414:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 800f418:	2b05      	cmp	r3, #5
 800f41a:	d8d4      	bhi.n	800f3c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800f41c:	e777      	b.n	800f30e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f41e:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 800f422:	4283      	cmp	r3, r0
 800f424:	d09a      	beq.n	800f35c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800f426:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 800f42a:	4283      	cmp	r3, r0
 800f42c:	e7ca      	b.n	800f3c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800f42e:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 800f432:	d22b      	bcs.n	800f48c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 800f434:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 800f438:	4283      	cmp	r3, r0
 800f43a:	d28f      	bcs.n	800f35c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800f43c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800f440:	4283      	cmp	r3, r0
 800f442:	d816      	bhi.n	800f472 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 800f444:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 800f448:	4283      	cmp	r3, r0
 800f44a:	f4bf af60 	bcs.w	800f30e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f44e:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 800f452:	4283      	cmp	r3, r0
 800f454:	d80a      	bhi.n	800f46c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 800f456:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 800f45a:	4283      	cmp	r3, r0
 800f45c:	f4bf af57 	bcs.w	800f30e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f460:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 800f464:	4283      	cmp	r3, r0
 800f466:	f43f af79 	beq.w	800f35c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800f46a:	e7ac      	b.n	800f3c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800f46c:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 800f470:	e7f8      	b.n	800f464 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 800f472:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 800f476:	4283      	cmp	r3, r0
 800f478:	d802      	bhi.n	800f480 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 800f47a:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800f47e:	e798      	b.n	800f3b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 800f480:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 800f484:	4283      	cmp	r3, r0
 800f486:	f47f af42 	bne.w	800f30e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f48a:	e767      	b.n	800f35c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800f48c:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 800f490:	4283      	cmp	r3, r0
 800f492:	f43f af63 	beq.w	800f35c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800f496:	d802      	bhi.n	800f49e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 800f498:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 800f49c:	e7f2      	b.n	800f484 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 800f49e:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 800f4a2:	4283      	cmp	r3, r0
 800f4a4:	d805      	bhi.n	800f4b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 800f4a6:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 800f4aa:	4283      	cmp	r3, r0
 800f4ac:	f4ff af2f 	bcc.w	800f30e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f4b0:	e754      	b.n	800f35c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800f4b2:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 800f4b6:	4283      	cmp	r3, r0
 800f4b8:	e7af      	b.n	800f41a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 800f4ba:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 800f4be:	4617      	mov	r7, r2
 800f4c0:	f102 0808 	add.w	r8, r2, #8
 800f4c4:	4666      	mov	r6, ip
 800f4c6:	6838      	ldr	r0, [r7, #0]
 800f4c8:	6879      	ldr	r1, [r7, #4]
 800f4ca:	46e6      	mov	lr, ip
 800f4cc:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800f4d0:	3708      	adds	r7, #8
 800f4d2:	4547      	cmp	r7, r8
 800f4d4:	46f4      	mov	ip, lr
 800f4d6:	d1f6      	bne.n	800f4c6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 800f4d8:	6838      	ldr	r0, [r7, #0]
 800f4da:	f8ce 0000 	str.w	r0, [lr]
 800f4de:	88b9      	ldrh	r1, [r7, #4]
 800f4e0:	f8ae 1004 	strh.w	r1, [lr, #4]
 800f4e4:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 800f4e8:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800f4ec:	d009      	beq.n	800f502 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 800f4ee:	7b51      	ldrb	r1, [r2, #13]
 800f4f0:	7992      	ldrb	r2, [r2, #6]
 800f4f2:	0149      	lsls	r1, r1, #5
 800f4f4:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800f4f8:	4311      	orrs	r1, r2
 800f4fa:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800f4fe:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 800f502:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800f506:	b2ad      	uxth	r5, r5
 800f508:	d00d      	beq.n	800f526 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 800f50a:	442b      	add	r3, r5
 800f50c:	b29b      	uxth	r3, r3
 800f50e:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800f512:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800f516:	10db      	asrs	r3, r3, #3
 800f518:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800f51c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f520:	4313      	orrs	r3, r2
 800f522:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800f526:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800f52a:	00cb      	lsls	r3, r1, #3
 800f52c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800f530:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 800f534:	064f      	lsls	r7, r1, #25
 800f536:	ea43 0302 	orr.w	r3, r3, r2
 800f53a:	bf44      	itt	mi
 800f53c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800f540:	b21b      	sxthmi	r3, r3
 800f542:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800f546:	1b5b      	subs	r3, r3, r5
 800f548:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 800f54c:	4632      	mov	r2, r6
 800f54e:	e6fa      	b.n	800f346 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800f550:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 800f554:	4617      	mov	r7, r2
 800f556:	f102 0908 	add.w	r9, r2, #8
 800f55a:	4666      	mov	r6, ip
 800f55c:	6838      	ldr	r0, [r7, #0]
 800f55e:	6879      	ldr	r1, [r7, #4]
 800f560:	46e0      	mov	r8, ip
 800f562:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 800f566:	3708      	adds	r7, #8
 800f568:	454f      	cmp	r7, r9
 800f56a:	46c4      	mov	ip, r8
 800f56c:	d1f6      	bne.n	800f55c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 800f56e:	6838      	ldr	r0, [r7, #0]
 800f570:	f8c8 0000 	str.w	r0, [r8]
 800f574:	88b9      	ldrh	r1, [r7, #4]
 800f576:	f8a8 1004 	strh.w	r1, [r8, #4]
 800f57a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 800f57e:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800f582:	d009      	beq.n	800f598 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 800f584:	7b51      	ldrb	r1, [r2, #13]
 800f586:	7992      	ldrb	r2, [r2, #6]
 800f588:	0149      	lsls	r1, r1, #5
 800f58a:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800f58e:	4311      	orrs	r1, r2
 800f590:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800f594:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 800f598:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800f59c:	d00e      	beq.n	800f5bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 800f59e:	eba3 030e 	sub.w	r3, r3, lr
 800f5a2:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800f5a6:	b29b      	uxth	r3, r3
 800f5a8:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800f5ac:	10db      	asrs	r3, r3, #3
 800f5ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f5b2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800f5b6:	4313      	orrs	r3, r2
 800f5b8:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800f5bc:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800f5c0:	00cb      	lsls	r3, r1, #3
 800f5c2:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800f5c6:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 800f5ca:	0648      	lsls	r0, r1, #25
 800f5cc:	ea43 0302 	orr.w	r3, r3, r2
 800f5d0:	bf44      	itt	mi
 800f5d2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800f5d6:	b21b      	sxthmi	r3, r3
 800f5d8:	1b5d      	subs	r5, r3, r5
 800f5da:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800f5de:	e7b5      	b.n	800f54c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

0800f5e0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 800f5e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5e4:	461e      	mov	r6, r3
 800f5e6:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800f5e8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800f5ec:	4604      	mov	r4, r0
 800f5ee:	4617      	mov	r7, r2
 800f5f0:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800f5f4:	f7f3 fff6 	bl	80035e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800f5f8:	4605      	mov	r5, r0
 800f5fa:	b918      	cbnz	r0, 800f604 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 800f5fc:	6030      	str	r0, [r6, #0]
 800f5fe:	4628      	mov	r0, r5
 800f600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f604:	683b      	ldr	r3, [r7, #0]
 800f606:	4601      	mov	r1, r0
 800f608:	68db      	ldr	r3, [r3, #12]
 800f60a:	4638      	mov	r0, r7
 800f60c:	4798      	blx	r3
 800f60e:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 800f612:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f616:	4602      	mov	r2, r0
 800f618:	6030      	str	r0, [r6, #0]
 800f61a:	d213      	bcs.n	800f644 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 800f61c:	4643      	mov	r3, r8
 800f61e:	4639      	mov	r1, r7
 800f620:	4620      	mov	r0, r4
 800f622:	f7ff fe3b 	bl	800f29c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800f626:	6030      	str	r0, [r6, #0]
 800f628:	6833      	ldr	r3, [r6, #0]
 800f62a:	b143      	cbz	r3, 800f63e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 800f62c:	7b5a      	ldrb	r2, [r3, #13]
 800f62e:	7a9b      	ldrb	r3, [r3, #10]
 800f630:	0052      	lsls	r2, r2, #1
 800f632:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800f636:	4313      	orrs	r3, r2
 800f638:	bf0c      	ite	eq
 800f63a:	2301      	moveq	r3, #1
 800f63c:	2300      	movne	r3, #0
 800f63e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 800f642:	e7dc      	b.n	800f5fe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 800f644:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 800f648:	b29b      	uxth	r3, r3
 800f64a:	2b7f      	cmp	r3, #127	@ 0x7f
 800f64c:	d804      	bhi.n	800f658 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 800f64e:	4639      	mov	r1, r7
 800f650:	4620      	mov	r0, r4
 800f652:	f7ff fd17 	bl	800f084 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800f656:	e7e6      	b.n	800f626 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 800f658:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d0e3      	beq.n	800f628 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800f660:	f640 1302 	movw	r3, #2306	@ 0x902
 800f664:	429d      	cmp	r5, r3
 800f666:	d1df      	bne.n	800f628 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800f668:	4601      	mov	r1, r0
 800f66a:	4620      	mov	r0, r4
 800f66c:	f7ff fcdc 	bl	800f028 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 800f670:	e7d9      	b.n	800f626 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0800f672 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 800f672:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f676:	461e      	mov	r6, r3
 800f678:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800f67a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800f67e:	4604      	mov	r4, r0
 800f680:	4617      	mov	r7, r2
 800f682:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800f686:	f7f3 ffad 	bl	80035e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800f68a:	4605      	mov	r5, r0
 800f68c:	b918      	cbnz	r0, 800f696 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 800f68e:	6030      	str	r0, [r6, #0]
 800f690:	4628      	mov	r0, r5
 800f692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	4601      	mov	r1, r0
 800f69a:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800f69e:	4638      	mov	r0, r7
 800f6a0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f6a4:	47c8      	blx	r9
 800f6a6:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 800f6aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f6ae:	4602      	mov	r2, r0
 800f6b0:	6030      	str	r0, [r6, #0]
 800f6b2:	d213      	bcs.n	800f6dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 800f6b4:	4643      	mov	r3, r8
 800f6b6:	4639      	mov	r1, r7
 800f6b8:	4620      	mov	r0, r4
 800f6ba:	f7ff fdef 	bl	800f29c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800f6be:	6030      	str	r0, [r6, #0]
 800f6c0:	6833      	ldr	r3, [r6, #0]
 800f6c2:	b143      	cbz	r3, 800f6d6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 800f6c4:	7b5a      	ldrb	r2, [r3, #13]
 800f6c6:	7a9b      	ldrb	r3, [r3, #10]
 800f6c8:	0052      	lsls	r2, r2, #1
 800f6ca:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800f6ce:	4313      	orrs	r3, r2
 800f6d0:	bf0c      	ite	eq
 800f6d2:	2301      	moveq	r3, #1
 800f6d4:	2300      	movne	r3, #0
 800f6d6:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 800f6da:	e7d9      	b.n	800f690 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 800f6dc:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 800f6e0:	b29b      	uxth	r3, r3
 800f6e2:	2b7f      	cmp	r3, #127	@ 0x7f
 800f6e4:	d804      	bhi.n	800f6f0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 800f6e6:	4639      	mov	r1, r7
 800f6e8:	4620      	mov	r0, r4
 800f6ea:	f7ff fccb 	bl	800f084 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800f6ee:	e7e6      	b.n	800f6be <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 800f6f0:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d0e3      	beq.n	800f6c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 800f6f8:	f640 1302 	movw	r3, #2306	@ 0x902
 800f6fc:	429d      	cmp	r5, r3
 800f6fe:	d1df      	bne.n	800f6c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 800f700:	4601      	mov	r1, r0
 800f702:	4620      	mov	r0, r4
 800f704:	f7ff fc90 	bl	800f028 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 800f708:	e7d9      	b.n	800f6be <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0800f70a <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 800f70a:	b510      	push	{r4, lr}
 800f70c:	4604      	mov	r4, r0
 800f70e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 800f712:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800f714:	b1f1      	cbz	r1, 800f754 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 800f716:	2b0a      	cmp	r3, #10
 800f718:	d02f      	beq.n	800f77a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 800f71a:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800f71c:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800f720:	3901      	subs	r1, #1
 800f722:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 800f724:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 800f728:	1c51      	adds	r1, r2, #1
 800f72a:	b289      	uxth	r1, r1
 800f72c:	2901      	cmp	r1, #1
 800f72e:	bf84      	itt	hi
 800f730:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800f734:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 800f736:	f103 0201 	add.w	r2, r3, #1
 800f73a:	8722      	strh	r2, [r4, #56]	@ 0x38
 800f73c:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800f73e:	bf98      	it	ls
 800f740:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 800f742:	4413      	add	r3, r2
 800f744:	b29b      	uxth	r3, r3
 800f746:	2b09      	cmp	r3, #9
 800f748:	bf88      	it	hi
 800f74a:	3b0a      	subhi	r3, #10
 800f74c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800f750:	8458      	strh	r0, [r3, #34]	@ 0x22
 800f752:	e7dc      	b.n	800f70e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 800f754:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800f756:	2b0a      	cmp	r3, #10
 800f758:	d00f      	beq.n	800f77a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 800f75a:	4620      	mov	r0, r4
 800f75c:	f7fe ffb8 	bl	800e6d0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 800f760:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800f762:	1c5a      	adds	r2, r3, #1
 800f764:	8722      	strh	r2, [r4, #56]	@ 0x38
 800f766:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800f768:	4413      	add	r3, r2
 800f76a:	b29b      	uxth	r3, r3
 800f76c:	2b09      	cmp	r3, #9
 800f76e:	bf88      	it	hi
 800f770:	3b0a      	subhi	r3, #10
 800f772:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800f776:	8458      	strh	r0, [r3, #34]	@ 0x22
 800f778:	e7ec      	b.n	800f754 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 800f77a:	bd10      	pop	{r4, pc}

0800f77c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 800f77c:	b538      	push	{r3, r4, r5, lr}
 800f77e:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800f780:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 800f784:	4604      	mov	r4, r0
 800f786:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 800f788:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 800f78a:	3a01      	subs	r2, #1
 800f78c:	8702      	strh	r2, [r0, #56]	@ 0x38
 800f78e:	1c5a      	adds	r2, r3, #1
 800f790:	b292      	uxth	r2, r2
 800f792:	2a09      	cmp	r2, #9
 800f794:	bf86      	itte	hi
 800f796:	3b09      	subhi	r3, #9
 800f798:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 800f79a:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 800f79c:	f7ff ffb5 	bl	800f70a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 800f7a0:	8c23      	ldrh	r3, [r4, #32]
 800f7a2:	2b01      	cmp	r3, #1
 800f7a4:	bf9c      	itt	ls
 800f7a6:	3301      	addls	r3, #1
 800f7a8:	8423      	strhls	r3, [r4, #32]
 800f7aa:	8be3      	ldrh	r3, [r4, #30]
 800f7ac:	b90b      	cbnz	r3, 800f7b2 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 800f7ae:	2302      	movs	r3, #2
 800f7b0:	83e3      	strh	r3, [r4, #30]
 800f7b2:	8be3      	ldrh	r3, [r4, #30]
 800f7b4:	3b01      	subs	r3, #1
 800f7b6:	b29b      	uxth	r3, r3
 800f7b8:	83e3      	strh	r3, [r4, #30]
 800f7ba:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800f7be:	4628      	mov	r0, r5
 800f7c0:	8365      	strh	r5, [r4, #26]
 800f7c2:	bd38      	pop	{r3, r4, r5, pc}

0800f7c4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 800f7c4:	428a      	cmp	r2, r1
 800f7c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7ca:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 800f7cc:	d931      	bls.n	800f832 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 800f7ce:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 800f7d0:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 800f7d4:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 800f7d8:	19ee      	adds	r6, r5, r7
 800f7da:	1a54      	subs	r4, r2, r1
 800f7dc:	3e01      	subs	r6, #1
 800f7de:	fa1f fe84 	uxth.w	lr, r4
 800f7e2:	b2b4      	uxth	r4, r6
 800f7e4:	eba4 090e 	sub.w	r9, r4, lr
 800f7e8:	fa1f f989 	uxth.w	r9, r9
 800f7ec:	2c09      	cmp	r4, #9
 800f7ee:	4626      	mov	r6, r4
 800f7f0:	bf88      	it	hi
 800f7f2:	f1a4 060a 	subhi.w	r6, r4, #10
 800f7f6:	f1bc 0f00 	cmp.w	ip, #0
 800f7fa:	bf08      	it	eq
 800f7fc:	f04f 0c02 	moveq.w	ip, #2
 800f800:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800f804:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f808:	fa1f fc8c 	uxth.w	ip, ip
 800f80c:	3c01      	subs	r4, #1
 800f80e:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 800f812:	b2a4      	uxth	r4, r4
 800f814:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 800f818:	454c      	cmp	r4, r9
 800f81a:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 800f81e:	d1e5      	bne.n	800f7ec <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 800f820:	eba5 050e 	sub.w	r5, r5, lr
 800f824:	eb0e 0408 	add.w	r4, lr, r8
 800f828:	8705      	strh	r5, [r0, #56]	@ 0x38
 800f82a:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 800f82e:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 800f832:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 800f834:	1a64      	subs	r4, r4, r1
 800f836:	4439      	add	r1, r7
 800f838:	b289      	uxth	r1, r1
 800f83a:	2909      	cmp	r1, #9
 800f83c:	bf88      	it	hi
 800f83e:	390a      	subhi	r1, #10
 800f840:	8704      	strh	r4, [r0, #56]	@ 0x38
 800f842:	86c1      	strh	r1, [r0, #54]	@ 0x36
 800f844:	250a      	movs	r5, #10
 800f846:	b18a      	cbz	r2, 800f86c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 800f848:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 800f84a:	3a01      	subs	r2, #1
 800f84c:	b292      	uxth	r2, r2
 800f84e:	3101      	adds	r1, #1
 800f850:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 800f854:	8701      	strh	r1, [r0, #56]	@ 0x38
 800f856:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 800f858:	b901      	cbnz	r1, 800f85c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 800f85a:	86c5      	strh	r5, [r0, #54]	@ 0x36
 800f85c:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 800f85e:	3901      	subs	r1, #1
 800f860:	b289      	uxth	r1, r1
 800f862:	86c1      	strh	r1, [r0, #54]	@ 0x36
 800f864:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800f868:	844c      	strh	r4, [r1, #34]	@ 0x22
 800f86a:	e7ec      	b.n	800f846 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 800f86c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f870:	f7ff bf4b 	b.w	800f70a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0800f874 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 800f874:	b570      	push	{r4, r5, r6, lr}
 800f876:	2500      	movs	r5, #0
 800f878:	4295      	cmp	r5, r2
 800f87a:	d011      	beq.n	800f8a0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 800f87c:	8bc4      	ldrh	r4, [r0, #30]
 800f87e:	f831 6b02 	ldrh.w	r6, [r1], #2
 800f882:	4414      	add	r4, r2
 800f884:	3c01      	subs	r4, #1
 800f886:	1b64      	subs	r4, r4, r5
 800f888:	b2a4      	uxth	r4, r4
 800f88a:	2c01      	cmp	r4, #1
 800f88c:	bf88      	it	hi
 800f88e:	3c02      	subhi	r4, #2
 800f890:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800f894:	8b64      	ldrh	r4, [r4, #26]
 800f896:	42b4      	cmp	r4, r6
 800f898:	d117      	bne.n	800f8ca <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 800f89a:	3501      	adds	r5, #1
 800f89c:	b2ad      	uxth	r5, r5
 800f89e:	e7eb      	b.n	800f878 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 800f8a0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800f8a4:	2400      	movs	r4, #0
 800f8a6:	4413      	add	r3, r2
 800f8a8:	b2a2      	uxth	r2, r4
 800f8aa:	429a      	cmp	r2, r3
 800f8ac:	da0f      	bge.n	800f8ce <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 800f8ae:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 800f8b0:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 800f8b4:	4432      	add	r2, r6
 800f8b6:	b292      	uxth	r2, r2
 800f8b8:	2a09      	cmp	r2, #9
 800f8ba:	bf88      	it	hi
 800f8bc:	3a0a      	subhi	r2, #10
 800f8be:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800f8c2:	3401      	adds	r4, #1
 800f8c4:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 800f8c6:	42aa      	cmp	r2, r5
 800f8c8:	d0ee      	beq.n	800f8a8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 800f8ca:	2000      	movs	r0, #0
 800f8cc:	bd70      	pop	{r4, r5, r6, pc}
 800f8ce:	2001      	movs	r0, #1
 800f8d0:	e7fc      	b.n	800f8cc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0800f8d2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 800f8d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8d6:	4605      	mov	r5, r0
 800f8d8:	4616      	mov	r6, r2
 800f8da:	1c8c      	adds	r4, r1, #2
 800f8dc:	8809      	ldrh	r1, [r1, #0]
 800f8de:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 800f8e2:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 800f8e6:	42b3      	cmp	r3, r6
 800f8e8:	d124      	bne.n	800f934 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 800f8ea:	f3c1 2903 	ubfx	r9, r1, #8, #4
 800f8ee:	f3c1 1803 	ubfx	r8, r1, #4, #4
 800f8f2:	f001 070f 	and.w	r7, r1, #15
 800f8f6:	f8cd 8000 	str.w	r8, [sp]
 800f8fa:	464b      	mov	r3, r9
 800f8fc:	4652      	mov	r2, sl
 800f8fe:	4621      	mov	r1, r4
 800f900:	4628      	mov	r0, r5
 800f902:	f7ff ffb7 	bl	800f874 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 800f906:	4683      	mov	fp, r0
 800f908:	b168      	cbz	r0, 800f926 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 800f90a:	eb0a 0109 	add.w	r1, sl, r9
 800f90e:	4441      	add	r1, r8
 800f910:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 800f914:	463a      	mov	r2, r7
 800f916:	4649      	mov	r1, r9
 800f918:	4628      	mov	r0, r5
 800f91a:	f7ff ff53 	bl	800f7c4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 800f91e:	4658      	mov	r0, fp
 800f920:	b003      	add	sp, #12
 800f922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f926:	eb07 010a 	add.w	r1, r7, sl
 800f92a:	4449      	add	r1, r9
 800f92c:	4441      	add	r1, r8
 800f92e:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800f932:	e7d2      	b.n	800f8da <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 800f934:	f04f 0b00 	mov.w	fp, #0
 800f938:	e7f1      	b.n	800f91e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0800f93a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 800f93a:	b570      	push	{r4, r5, r6, lr}
 800f93c:	8810      	ldrh	r0, [r2, #0]
 800f93e:	4298      	cmp	r0, r3
 800f940:	d817      	bhi.n	800f972 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800f942:	1e48      	subs	r0, r1, #1
 800f944:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 800f948:	4298      	cmp	r0, r3
 800f94a:	d312      	bcc.n	800f972 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800f94c:	2400      	movs	r4, #0
 800f94e:	428c      	cmp	r4, r1
 800f950:	d20f      	bcs.n	800f972 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800f952:	1860      	adds	r0, r4, r1
 800f954:	1040      	asrs	r0, r0, #1
 800f956:	0085      	lsls	r5, r0, #2
 800f958:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 800f95c:	42b3      	cmp	r3, r6
 800f95e:	d902      	bls.n	800f966 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 800f960:	3001      	adds	r0, #1
 800f962:	b284      	uxth	r4, r0
 800f964:	e7f3      	b.n	800f94e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800f966:	d201      	bcs.n	800f96c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 800f968:	b281      	uxth	r1, r0
 800f96a:	e7f0      	b.n	800f94e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800f96c:	442a      	add	r2, r5
 800f96e:	8850      	ldrh	r0, [r2, #2]
 800f970:	bd70      	pop	{r4, r5, r6, pc}
 800f972:	2000      	movs	r0, #0
 800f974:	e7fc      	b.n	800f970 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0800f976 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 800f976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f97a:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 800f97c:	886f      	ldrh	r7, [r5, #2]
 800f97e:	4604      	mov	r4, r0
 800f980:	087f      	lsrs	r7, r7, #1
 800f982:	260b      	movs	r6, #11
 800f984:	3e01      	subs	r6, #1
 800f986:	d013      	beq.n	800f9b0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800f988:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800f98a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800f98e:	462a      	mov	r2, r5
 800f990:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800f994:	4639      	mov	r1, r7
 800f996:	4643      	mov	r3, r8
 800f998:	4620      	mov	r0, r4
 800f99a:	f7ff ffce 	bl	800f93a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 800f99e:	b138      	cbz	r0, 800f9b0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800f9a0:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 800f9a4:	4642      	mov	r2, r8
 800f9a6:	4620      	mov	r0, r4
 800f9a8:	f7ff ff93 	bl	800f8d2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 800f9ac:	2800      	cmp	r0, #0
 800f9ae:	d1e9      	bne.n	800f984 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 800f9b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f9b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 800f9b4:	b570      	push	{r4, r5, r6, lr}
 800f9b6:	694a      	ldr	r2, [r1, #20]
 800f9b8:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800f9ba:	684b      	ldr	r3, [r1, #4]
 800f9bc:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 800f9be:	1b54      	subs	r4, r2, r5
 800f9c0:	f000 8106 	beq.w	800fbd0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 800f9c4:	1b9b      	subs	r3, r3, r6
 800f9c6:	d003      	beq.n	800f9d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 800f9c8:	4363      	muls	r3, r4
 800f9ca:	2210      	movs	r2, #16
 800f9cc:	fb93 f3f2 	sdiv	r3, r3, r2
 800f9d0:	680c      	ldr	r4, [r1, #0]
 800f9d2:	698a      	ldr	r2, [r1, #24]
 800f9d4:	1b65      	subs	r5, r4, r5
 800f9d6:	f000 80fd 	beq.w	800fbd4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 800f9da:	1b92      	subs	r2, r2, r6
 800f9dc:	d003      	beq.n	800f9e6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 800f9de:	436a      	muls	r2, r5
 800f9e0:	2410      	movs	r4, #16
 800f9e2:	fb92 f2f4 	sdiv	r2, r2, r4
 800f9e6:	1a9b      	subs	r3, r3, r2
 800f9e8:	ee07 3a90 	vmov	s15, r3
 800f9ec:	ed9f 4a88 	vldr	s8, [pc, #544]	@ 800fc10 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 800f9f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f9f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f9f8:	ee67 7a84 	vmul.f32	s15, s15, s8
 800f9fc:	460a      	mov	r2, r1
 800f9fe:	ee87 3a27 	vdiv.f32	s6, s14, s15
 800fa02:	4603      	mov	r3, r0
 800fa04:	f100 040c 	add.w	r4, r0, #12
 800fa08:	eeb1 6a43 	vneg.f32	s12, s6
 800fa0c:	edd2 7a02 	vldr	s15, [r2, #8]
 800fa10:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800fa14:	3214      	adds	r2, #20
 800fa16:	ece3 6a01 	vstmia	r3!, {s13}
 800fa1a:	ed52 7a02 	vldr	s15, [r2, #-8]
 800fa1e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fa22:	429c      	cmp	r4, r3
 800fa24:	edc3 7a02 	vstr	s15, [r3, #8]
 800fa28:	ed52 7a01 	vldr	s15, [r2, #-4]
 800fa2c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fa30:	edc3 7a05 	vstr	s15, [r3, #20]
 800fa34:	d1ea      	bne.n	800fa0c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 800fa36:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800fa38:	698b      	ldr	r3, [r1, #24]
 800fa3a:	edd0 4a02 	vldr	s9, [r0, #8]
 800fa3e:	edd0 3a00 	vldr	s7, [r0]
 800fa42:	edd0 6a01 	vldr	s13, [r0, #4]
 800fa46:	ed90 5a05 	vldr	s10, [r0, #20]
 800fa4a:	ed90 2a03 	vldr	s4, [r0, #12]
 800fa4e:	edd0 5a04 	vldr	s11, [r0, #16]
 800fa52:	ed90 1a07 	vldr	s2, [r0, #28]
 800fa56:	edd0 2a06 	vldr	s5, [r0, #24]
 800fa5a:	1a9b      	subs	r3, r3, r2
 800fa5c:	ee07 3a90 	vmov	s15, r3
 800fa60:	684b      	ldr	r3, [r1, #4]
 800fa62:	1a9b      	subs	r3, r3, r2
 800fa64:	ee07 3a10 	vmov	s14, r3
 800fa68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fa6c:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800fa70:	ee67 7a84 	vmul.f32	s15, s15, s8
 800fa74:	ee73 4ae4 	vsub.f32	s9, s7, s9
 800fa78:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fa7c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 800fa80:	ee27 7a04 	vmul.f32	s14, s14, s8
 800fa84:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800fa88:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fa8c:	ee32 5a45 	vsub.f32	s10, s4, s10
 800fa90:	ee67 7a83 	vmul.f32	s15, s15, s6
 800fa94:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 800fa98:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800fa9a:	694a      	ldr	r2, [r1, #20]
 800fa9c:	1b13      	subs	r3, r2, r4
 800fa9e:	ee07 3a10 	vmov	s14, r3
 800faa2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800faa6:	680b      	ldr	r3, [r1, #0]
 800faa8:	ee27 7a04 	vmul.f32	s14, s14, s8
 800faac:	1b1b      	subs	r3, r3, r4
 800faae:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 800fab2:	ee07 3a10 	vmov	s14, r3
 800fab6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800faba:	ee27 7a04 	vmul.f32	s14, s14, s8
 800fabe:	eee6 4a87 	vfma.f32	s9, s13, s14
 800fac2:	ee64 4a86 	vmul.f32	s9, s9, s12
 800fac6:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 800faca:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800facc:	698b      	ldr	r3, [r1, #24]
 800face:	1a9b      	subs	r3, r3, r2
 800fad0:	ee06 3a90 	vmov	s13, r3
 800fad4:	684b      	ldr	r3, [r1, #4]
 800fad6:	1a9b      	subs	r3, r3, r2
 800fad8:	ee07 3a10 	vmov	s14, r3
 800fadc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800fae0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fae4:	ee66 6a84 	vmul.f32	s13, s13, s8
 800fae8:	ee27 7a04 	vmul.f32	s14, s14, s8
 800faec:	ee65 6a66 	vnmul.f32	s13, s10, s13
 800faf0:	eee5 6a87 	vfma.f32	s13, s11, s14
 800faf4:	ee66 6a83 	vmul.f32	s13, s13, s6
 800faf8:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 800fafc:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800fafe:	694a      	ldr	r2, [r1, #20]
 800fb00:	1b13      	subs	r3, r2, r4
 800fb02:	ee07 3a10 	vmov	s14, r3
 800fb06:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fb0a:	680b      	ldr	r3, [r1, #0]
 800fb0c:	ee27 7a04 	vmul.f32	s14, s14, s8
 800fb10:	1b1b      	subs	r3, r3, r4
 800fb12:	ee25 5a47 	vnmul.f32	s10, s10, s14
 800fb16:	ee07 3a10 	vmov	s14, r3
 800fb1a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fb1e:	ee27 7a04 	vmul.f32	s14, s14, s8
 800fb22:	eea5 5a87 	vfma.f32	s10, s11, s14
 800fb26:	edd0 5a08 	vldr	s11, [r0, #32]
 800fb2a:	ee25 5a06 	vmul.f32	s10, s10, s12
 800fb2e:	ee31 1a65 	vsub.f32	s2, s2, s11
 800fb32:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 800fb36:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800fb38:	698b      	ldr	r3, [r1, #24]
 800fb3a:	1a9b      	subs	r3, r3, r2
 800fb3c:	ee07 3a10 	vmov	s14, r3
 800fb40:	684b      	ldr	r3, [r1, #4]
 800fb42:	1a9b      	subs	r3, r3, r2
 800fb44:	ee01 3a90 	vmov	s3, r3
 800fb48:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fb4c:	ee72 5ae5 	vsub.f32	s11, s5, s11
 800fb50:	ee27 7a04 	vmul.f32	s14, s14, s8
 800fb54:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 800fb58:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 800fb5c:	ee61 1a84 	vmul.f32	s3, s3, s8
 800fb60:	eea1 7a21 	vfma.f32	s14, s2, s3
 800fb64:	ee27 7a03 	vmul.f32	s14, s14, s6
 800fb68:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 800fb6c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800fb6e:	694a      	ldr	r2, [r1, #20]
 800fb70:	1b13      	subs	r3, r2, r4
 800fb72:	ee03 3a10 	vmov	s6, r3
 800fb76:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800fb7a:	680b      	ldr	r3, [r1, #0]
 800fb7c:	ee23 3a04 	vmul.f32	s6, s6, s8
 800fb80:	1b1b      	subs	r3, r3, r4
 800fb82:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 800fb86:	ee03 3a10 	vmov	s6, r3
 800fb8a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800fb8e:	ee23 4a04 	vmul.f32	s8, s6, s8
 800fb92:	eee1 5a04 	vfma.f32	s11, s2, s8
 800fb96:	ee25 6a86 	vmul.f32	s12, s11, s12
 800fb9a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 800fb9e:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 800fba2:	eee3 5aa6 	vfma.f32	s11, s7, s13
 800fba6:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800fbaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbae:	dd13      	ble.n	800fbd8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 800fbb0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fbb4:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 800fbb8:	63c3      	str	r3, [r0, #60]	@ 0x3c
 800fbba:	eee3 7a87 	vfma.f32	s15, s7, s14
 800fbbe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fbc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbc6:	dd15      	ble.n	800fbf4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 800fbc8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fbcc:	6403      	str	r3, [r0, #64]	@ 0x40
 800fbce:	bd70      	pop	{r4, r5, r6, pc}
 800fbd0:	4623      	mov	r3, r4
 800fbd2:	e6fd      	b.n	800f9d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 800fbd4:	462a      	mov	r2, r5
 800fbd6:	e706      	b.n	800f9e6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 800fbd8:	d502      	bpl.n	800fbe0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 800fbda:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800fbde:	e7e9      	b.n	800fbb4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 800fbe0:	ee22 2a64 	vnmul.f32	s4, s4, s9
 800fbe4:	eea3 2a85 	vfma.f32	s4, s7, s10
 800fbe8:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 800fbec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbf0:	dade      	bge.n	800fbb0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 800fbf2:	e7f2      	b.n	800fbda <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 800fbf4:	d502      	bpl.n	800fbfc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 800fbf6:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800fbfa:	e7e7      	b.n	800fbcc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 800fbfc:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 800fc00:	eee3 4a86 	vfma.f32	s9, s7, s12
 800fc04:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 800fc08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc0c:	dadc      	bge.n	800fbc8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 800fc0e:	e7f2      	b.n	800fbf6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 800fc10:	3d800000 	.word	0x3d800000

0800fc14 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 800fc14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc18:	2714      	movs	r7, #20
 800fc1a:	435f      	muls	r7, r3
 800fc1c:	eb02 0c07 	add.w	ip, r2, r7
 800fc20:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800fc24:	f115 0e0f 	adds.w	lr, r5, #15
 800fc28:	f100 80a2 	bmi.w	800fd70 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 800fc2c:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 800fc30:	9c08      	ldr	r4, [sp, #32]
 800fc32:	f8c0 e014 	str.w	lr, [r0, #20]
 800fc36:	2614      	movs	r6, #20
 800fc38:	4366      	muls	r6, r4
 800fc3a:	eb02 0806 	add.w	r8, r2, r6
 800fc3e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fc42:	f115 040f 	adds.w	r4, r5, #15
 800fc46:	f100 809f 	bmi.w	800fd88 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 800fc4a:	1124      	asrs	r4, r4, #4
 800fc4c:	eba4 040e 	sub.w	r4, r4, lr
 800fc50:	6184      	str	r4, [r0, #24]
 800fc52:	2c00      	cmp	r4, #0
 800fc54:	f000 808a 	beq.w	800fd6c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 800fc58:	f8dc 9004 	ldr.w	r9, [ip, #4]
 800fc5c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800fc60:	5995      	ldr	r5, [r2, r6]
 800fc62:	eba4 0809 	sub.w	r8, r4, r9
 800fc66:	59d4      	ldr	r4, [r2, r7]
 800fc68:	eba5 0a04 	sub.w	sl, r5, r4
 800fc6c:	ea4f 150a 	mov.w	r5, sl, lsl #4
 800fc70:	fb0e fe05 	mul.w	lr, lr, r5
 800fc74:	fb0a ee19 	mls	lr, sl, r9, lr
 800fc78:	fb08 e404 	mla	r4, r8, r4, lr
 800fc7c:	ea4f 1608 	mov.w	r6, r8, lsl #4
 800fc80:	3c01      	subs	r4, #1
 800fc82:	19a4      	adds	r4, r4, r6
 800fc84:	f100 808c 	bmi.w	800fda0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 800fc88:	fb94 fef6 	sdiv	lr, r4, r6
 800fc8c:	f8c0 e000 	str.w	lr, [r0]
 800fc90:	fb06 441e 	mls	r4, r6, lr, r4
 800fc94:	6104      	str	r4, [r0, #16]
 800fc96:	2d00      	cmp	r5, #0
 800fc98:	f2c0 8095 	blt.w	800fdc6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 800fc9c:	fb95 f4f6 	sdiv	r4, r5, r6
 800fca0:	6044      	str	r4, [r0, #4]
 800fca2:	fb06 5514 	mls	r5, r6, r4, r5
 800fca6:	6085      	str	r5, [r0, #8]
 800fca8:	60c6      	str	r6, [r0, #12]
 800fcaa:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800fcae:	6945      	ldr	r5, [r0, #20]
 800fcb0:	59d2      	ldr	r2, [r2, r7]
 800fcb2:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 800fde8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 800fcb6:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 800fcba:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 800fcbe:	ee07 4a10 	vmov	s14, r4
 800fcc2:	6804      	ldr	r4, [r0, #0]
 800fcc4:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 800fcc8:	ee07 2a90 	vmov	s15, r2
 800fccc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fcd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fcd4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800fcd8:	ee27 7a26 	vmul.f32	s14, s14, s13
 800fcdc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fce0:	edd3 6a00 	vldr	s13, [r3]
 800fce4:	eee6 6a07 	vfma.f32	s13, s12, s14
 800fce8:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 800fcec:	eee6 6a27 	vfma.f32	s13, s12, s15
 800fcf0:	edc0 6a07 	vstr	s13, [r0, #28]
 800fcf4:	edd0 6a01 	vldr	s13, [r0, #4]
 800fcf8:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 800fcfc:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 800fd00:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800fd04:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800fd08:	ed80 6a08 	vstr	s12, [r0, #32]
 800fd0c:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 800fd0e:	6242      	str	r2, [r0, #36]	@ 0x24
 800fd10:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 800fd14:	ed93 6a03 	vldr	s12, [r3, #12]
 800fd18:	eea5 6a87 	vfma.f32	s12, s11, s14
 800fd1c:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 800fd20:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800fd24:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 800fd28:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 800fd2c:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 800fd30:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800fd34:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 800fd38:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800fd3a:	6302      	str	r2, [r0, #48]	@ 0x30
 800fd3c:	ed93 6a06 	vldr	s12, [r3, #24]
 800fd40:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 800fd44:	eea5 6a87 	vfma.f32	s12, s11, s14
 800fd48:	eeb0 7a46 	vmov.f32	s14, s12
 800fd4c:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 800fd50:	eea6 7a27 	vfma.f32	s14, s12, s15
 800fd54:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 800fd58:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 800fd5c:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 800fd60:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fd64:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 800fd68:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800fd6a:	63c3      	str	r3, [r0, #60]	@ 0x3c
 800fd6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd70:	f1c5 0501 	rsb	r5, r5, #1
 800fd74:	f015 050f 	ands.w	r5, r5, #15
 800fd78:	bf18      	it	ne
 800fd7a:	2501      	movne	r5, #1
 800fd7c:	2410      	movs	r4, #16
 800fd7e:	fb9e fef4 	sdiv	lr, lr, r4
 800fd82:	ebae 0e05 	sub.w	lr, lr, r5
 800fd86:	e753      	b.n	800fc30 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 800fd88:	f1c5 0501 	rsb	r5, r5, #1
 800fd8c:	f015 050f 	ands.w	r5, r5, #15
 800fd90:	bf18      	it	ne
 800fd92:	2501      	movne	r5, #1
 800fd94:	f04f 0910 	mov.w	r9, #16
 800fd98:	fb94 f4f9 	sdiv	r4, r4, r9
 800fd9c:	1b64      	subs	r4, r4, r5
 800fd9e:	e755      	b.n	800fc4c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 800fda0:	4264      	negs	r4, r4
 800fda2:	fb94 fef6 	sdiv	lr, r4, r6
 800fda6:	f1ce 0800 	rsb	r8, lr, #0
 800fdaa:	fb06 441e 	mls	r4, r6, lr, r4
 800fdae:	f8c0 8000 	str.w	r8, [r0]
 800fdb2:	6104      	str	r4, [r0, #16]
 800fdb4:	2c00      	cmp	r4, #0
 800fdb6:	f43f af6e 	beq.w	800fc96 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 800fdba:	ea6f 0e0e 	mvn.w	lr, lr
 800fdbe:	f8c0 e000 	str.w	lr, [r0]
 800fdc2:	1b34      	subs	r4, r6, r4
 800fdc4:	e766      	b.n	800fc94 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 800fdc6:	426d      	negs	r5, r5
 800fdc8:	fb95 f4f6 	sdiv	r4, r5, r6
 800fdcc:	f1c4 0e00 	rsb	lr, r4, #0
 800fdd0:	fb06 5514 	mls	r5, r6, r4, r5
 800fdd4:	f8c0 e004 	str.w	lr, [r0, #4]
 800fdd8:	6085      	str	r5, [r0, #8]
 800fdda:	2d00      	cmp	r5, #0
 800fddc:	f43f af64 	beq.w	800fca8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 800fde0:	43e4      	mvns	r4, r4
 800fde2:	6044      	str	r4, [r0, #4]
 800fde4:	1b75      	subs	r5, r6, r5
 800fde6:	e75e      	b.n	800fca6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 800fde8:	3d800000 	.word	0x3d800000

0800fdec <_ZN8touchgfx7Unicode6strlenEPKt>:
 800fdec:	4602      	mov	r2, r0
 800fdee:	b148      	cbz	r0, 800fe04 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	b298      	uxth	r0, r3
 800fdf4:	3301      	adds	r3, #1
 800fdf6:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 800fdfa:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 800fdfe:	2900      	cmp	r1, #0
 800fe00:	d1f7      	bne.n	800fdf2 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 800fe02:	4770      	bx	lr
 800fe04:	4770      	bx	lr

0800fe06 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 800fe06:	b530      	push	{r4, r5, lr}
 800fe08:	4604      	mov	r4, r0
 800fe0a:	b159      	cbz	r1, 800fe24 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 800fe0c:	b148      	cbz	r0, 800fe22 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 800fe0e:	2300      	movs	r3, #0
 800fe10:	b298      	uxth	r0, r3
 800fe12:	4282      	cmp	r2, r0
 800fe14:	d905      	bls.n	800fe22 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 800fe16:	5ccd      	ldrb	r5, [r1, r3]
 800fe18:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 800fe1c:	3301      	adds	r3, #1
 800fe1e:	2d00      	cmp	r5, #0
 800fe20:	d1f6      	bne.n	800fe10 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 800fe22:	bd30      	pop	{r4, r5, pc}
 800fe24:	4608      	mov	r0, r1
 800fe26:	e7fc      	b.n	800fe22 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0800fe28 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 800fe28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe2a:	b08b      	sub	sp, #44	@ 0x2c
 800fe2c:	468c      	mov	ip, r1
 800fe2e:	2100      	movs	r1, #0
 800fe30:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800fe34:	4604      	mov	r4, r0
 800fe36:	261f      	movs	r6, #31
 800fe38:	af01      	add	r7, sp, #4
 800fe3a:	fb94 fef3 	sdiv	lr, r4, r3
 800fe3e:	fb03 441e 	mls	r4, r3, lr, r4
 800fe42:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 800fe46:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 800fe4a:	b2ec      	uxtb	r4, r5
 800fe4c:	2d09      	cmp	r5, #9
 800fe4e:	bfd4      	ite	le
 800fe50:	3430      	addle	r4, #48	@ 0x30
 800fe52:	3457      	addgt	r4, #87	@ 0x57
 800fe54:	b2e4      	uxtb	r4, r4
 800fe56:	55bc      	strb	r4, [r7, r6]
 800fe58:	4674      	mov	r4, lr
 800fe5a:	1e71      	subs	r1, r6, #1
 800fe5c:	b974      	cbnz	r4, 800fe7c <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 800fe5e:	2800      	cmp	r0, #0
 800fe60:	da05      	bge.n	800fe6e <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 800fe62:	ab0a      	add	r3, sp, #40	@ 0x28
 800fe64:	4419      	add	r1, r3
 800fe66:	232d      	movs	r3, #45	@ 0x2d
 800fe68:	f801 3c24 	strb.w	r3, [r1, #-36]
 800fe6c:	1eb1      	subs	r1, r6, #2
 800fe6e:	3101      	adds	r1, #1
 800fe70:	4439      	add	r1, r7
 800fe72:	4660      	mov	r0, ip
 800fe74:	f7ff ffc7 	bl	800fe06 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 800fe78:	b00b      	add	sp, #44	@ 0x2c
 800fe7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe7c:	460e      	mov	r6, r1
 800fe7e:	e7dc      	b.n	800fe3a <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

0800fe80 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 800fe80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe82:	b08b      	sub	sp, #44	@ 0x2c
 800fe84:	468c      	mov	ip, r1
 800fe86:	2100      	movs	r1, #0
 800fe88:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800fe8c:	ae01      	add	r6, sp, #4
 800fe8e:	211f      	movs	r1, #31
 800fe90:	fbb0 f7f3 	udiv	r7, r0, r3
 800fe94:	fb03 0517 	mls	r5, r3, r7, r0
 800fe98:	b2ec      	uxtb	r4, r5
 800fe9a:	2d09      	cmp	r5, #9
 800fe9c:	bfd4      	ite	le
 800fe9e:	3430      	addle	r4, #48	@ 0x30
 800fea0:	3457      	addgt	r4, #87	@ 0x57
 800fea2:	b2e4      	uxtb	r4, r4
 800fea4:	558c      	strb	r4, [r1, r6]
 800fea6:	4638      	mov	r0, r7
 800fea8:	1e4c      	subs	r4, r1, #1
 800feaa:	b92f      	cbnz	r7, 800feb8 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 800feac:	4431      	add	r1, r6
 800feae:	4660      	mov	r0, ip
 800feb0:	f7ff ffa9 	bl	800fe06 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 800feb4:	b00b      	add	sp, #44	@ 0x2c
 800feb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800feb8:	4621      	mov	r1, r4
 800feba:	e7e9      	b.n	800fe90 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0800febc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 800febc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fec0:	4691      	mov	r9, r2
 800fec2:	b085      	sub	sp, #20
 800fec4:	6802      	ldr	r2, [r0, #0]
 800fec6:	9201      	str	r2, [sp, #4]
 800fec8:	4688      	mov	r8, r1
 800feca:	4683      	mov	fp, r0
 800fecc:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 800fed0:	9103      	str	r1, [sp, #12]
 800fed2:	4610      	mov	r0, r2
 800fed4:	461c      	mov	r4, r3
 800fed6:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 800feda:	9302      	str	r3, [sp, #8]
 800fedc:	f7ff ff86 	bl	800fdec <_ZN8touchgfx7Unicode6strlenEPKt>
 800fee0:	f1b8 0f00 	cmp.w	r8, #0
 800fee4:	bf0c      	ite	eq
 800fee6:	4684      	moveq	ip, r0
 800fee8:	f100 0c01 	addne.w	ip, r0, #1
 800feec:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 800fef0:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 800fef4:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 800fef6:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 800fef8:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 800fefc:	9903      	ldr	r1, [sp, #12]
 800fefe:	fa1f fc8c 	uxth.w	ip, ip
 800ff02:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ff06:	d041      	beq.n	800ff8c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 800ff08:	d834      	bhi.n	800ff74 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 800ff0a:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 800ff0e:	d059      	beq.n	800ffc4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 800ff10:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 800ff14:	d03a      	beq.n	800ff8c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 800ff16:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 800ff1a:	d034      	beq.n	800ff86 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 800ff1c:	2400      	movs	r4, #0
 800ff1e:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 800ff22:	3a01      	subs	r2, #1
 800ff24:	b169      	cbz	r1, 800ff42 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 800ff26:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800ff28:	458c      	cmp	ip, r1
 800ff2a:	da09      	bge.n	800ff40 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 800ff2c:	eba1 010c 	sub.w	r1, r1, ip
 800ff30:	b289      	uxth	r1, r1
 800ff32:	b933      	cbnz	r3, 800ff42 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 800ff34:	2e00      	cmp	r6, #0
 800ff36:	d051      	beq.n	800ffdc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 800ff38:	2800      	cmp	r0, #0
 800ff3a:	d04f      	beq.n	800ffdc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 800ff3c:	440c      	add	r4, r1
 800ff3e:	b2a4      	uxth	r4, r4
 800ff40:	2100      	movs	r1, #0
 800ff42:	682b      	ldr	r3, [r5, #0]
 800ff44:	4293      	cmp	r3, r2
 800ff46:	da07      	bge.n	800ff58 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 800ff48:	f1b8 0f00 	cmp.w	r8, #0
 800ff4c:	d004      	beq.n	800ff58 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 800ff4e:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 800ff52:	682b      	ldr	r3, [r5, #0]
 800ff54:	3301      	adds	r3, #1
 800ff56:	602b      	str	r3, [r5, #0]
 800ff58:	2730      	movs	r7, #48	@ 0x30
 800ff5a:	2c00      	cmp	r4, #0
 800ff5c:	d04e      	beq.n	800fffc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 800ff5e:	682e      	ldr	r6, [r5, #0]
 800ff60:	3c01      	subs	r4, #1
 800ff62:	42b2      	cmp	r2, r6
 800ff64:	b2a4      	uxth	r4, r4
 800ff66:	dd49      	ble.n	800fffc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 800ff68:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 800ff6c:	682b      	ldr	r3, [r5, #0]
 800ff6e:	3301      	adds	r3, #1
 800ff70:	602b      	str	r3, [r5, #0]
 800ff72:	e7f2      	b.n	800ff5a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 800ff74:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 800ff78:	d01d      	beq.n	800ffb6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 800ff7a:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 800ff7e:	d002      	beq.n	800ff86 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 800ff80:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 800ff84:	e7c9      	b.n	800ff1a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 800ff86:	4684      	mov	ip, r0
 800ff88:	f04f 0800 	mov.w	r8, #0
 800ff8c:	2c00      	cmp	r4, #0
 800ff8e:	d0c6      	beq.n	800ff1e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 800ff90:	b947      	cbnz	r7, 800ffa4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 800ff92:	2801      	cmp	r0, #1
 800ff94:	d106      	bne.n	800ffa4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 800ff96:	8814      	ldrh	r4, [r2, #0]
 800ff98:	2c30      	cmp	r4, #48	@ 0x30
 800ff9a:	bf02      	ittt	eq
 800ff9c:	3202      	addeq	r2, #2
 800ff9e:	f8cb 2000 	streq.w	r2, [fp]
 800ffa2:	4638      	moveq	r0, r7
 800ffa4:	45bc      	cmp	ip, r7
 800ffa6:	da14      	bge.n	800ffd2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 800ffa8:	b2bf      	uxth	r7, r7
 800ffaa:	eba7 040c 	sub.w	r4, r7, ip
 800ffae:	b2a4      	uxth	r4, r4
 800ffb0:	46bc      	mov	ip, r7
 800ffb2:	2600      	movs	r6, #0
 800ffb4:	e7b3      	b.n	800ff1e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 800ffb6:	4684      	mov	ip, r0
 800ffb8:	b16c      	cbz	r4, 800ffd6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 800ffba:	42b8      	cmp	r0, r7
 800ffbc:	dd00      	ble.n	800ffc0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 800ffbe:	b2b8      	uxth	r0, r7
 800ffc0:	2400      	movs	r4, #0
 800ffc2:	e003      	b.n	800ffcc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 800ffc4:	f04f 0c01 	mov.w	ip, #1
 800ffc8:	2400      	movs	r4, #0
 800ffca:	4660      	mov	r0, ip
 800ffcc:	4626      	mov	r6, r4
 800ffce:	46a0      	mov	r8, r4
 800ffd0:	e7a5      	b.n	800ff1e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 800ffd2:	2400      	movs	r4, #0
 800ffd4:	e7ed      	b.n	800ffb2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 800ffd6:	4626      	mov	r6, r4
 800ffd8:	46a0      	mov	r8, r4
 800ffda:	e7a0      	b.n	800ff1e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 800ffdc:	2900      	cmp	r1, #0
 800ffde:	d0b0      	beq.n	800ff42 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 800ffe0:	2720      	movs	r7, #32
 800ffe2:	682e      	ldr	r6, [r5, #0]
 800ffe4:	2900      	cmp	r1, #0
 800ffe6:	d0ac      	beq.n	800ff42 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 800ffe8:	3901      	subs	r1, #1
 800ffea:	4296      	cmp	r6, r2
 800ffec:	b289      	uxth	r1, r1
 800ffee:	daa7      	bge.n	800ff40 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 800fff0:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 800fff4:	682b      	ldr	r3, [r5, #0]
 800fff6:	3301      	adds	r3, #1
 800fff8:	602b      	str	r3, [r5, #0]
 800fffa:	e7f2      	b.n	800ffe2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 800fffc:	b188      	cbz	r0, 8010022 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 800fffe:	682b      	ldr	r3, [r5, #0]
 8010000:	3801      	subs	r0, #1
 8010002:	429a      	cmp	r2, r3
 8010004:	b280      	uxth	r0, r0
 8010006:	dd0c      	ble.n	8010022 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8010008:	f8db 3000 	ldr.w	r3, [fp]
 801000c:	1c9c      	adds	r4, r3, #2
 801000e:	f8cb 4000 	str.w	r4, [fp]
 8010012:	881c      	ldrh	r4, [r3, #0]
 8010014:	682b      	ldr	r3, [r5, #0]
 8010016:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801001a:	682b      	ldr	r3, [r5, #0]
 801001c:	3301      	adds	r3, #1
 801001e:	602b      	str	r3, [r5, #0]
 8010020:	e7ec      	b.n	800fffc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8010022:	2620      	movs	r6, #32
 8010024:	b151      	cbz	r1, 801003c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8010026:	6828      	ldr	r0, [r5, #0]
 8010028:	3901      	subs	r1, #1
 801002a:	4282      	cmp	r2, r0
 801002c:	b289      	uxth	r1, r1
 801002e:	dd05      	ble.n	801003c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8010030:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 8010034:	682b      	ldr	r3, [r5, #0]
 8010036:	3301      	adds	r3, #1
 8010038:	602b      	str	r3, [r5, #0]
 801003a:	e7f3      	b.n	8010024 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801003c:	b005      	add	sp, #20
 801003e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010042 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 8010042:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010046:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801004a:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 801004e:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 8010052:	2400      	movs	r4, #0
 8010054:	8014      	strh	r4, [r2, #0]
 8010056:	701c      	strb	r4, [r3, #0]
 8010058:	f888 4000 	strb.w	r4, [r8]
 801005c:	f88c 4000 	strb.w	r4, [ip]
 8010060:	f88e 4000 	strb.w	r4, [lr]
 8010064:	703c      	strb	r4, [r7, #0]
 8010066:	6804      	ldr	r4, [r0, #0]
 8010068:	b1a4      	cbz	r4, 8010094 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801006a:	8824      	ldrh	r4, [r4, #0]
 801006c:	f04f 0901 	mov.w	r9, #1
 8010070:	b314      	cbz	r4, 80100b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8010072:	2c2b      	cmp	r4, #43	@ 0x2b
 8010074:	d001      	beq.n	801007a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 8010076:	2c20      	cmp	r4, #32
 8010078:	d110      	bne.n	801009c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801007a:	8014      	strh	r4, [r2, #0]
 801007c:	6804      	ldr	r4, [r0, #0]
 801007e:	b10c      	cbz	r4, 8010084 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 8010080:	3402      	adds	r4, #2
 8010082:	6004      	str	r4, [r0, #0]
 8010084:	680c      	ldr	r4, [r1, #0]
 8010086:	b10c      	cbz	r4, 801008c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 8010088:	3401      	adds	r4, #1
 801008a:	600c      	str	r4, [r1, #0]
 801008c:	6804      	ldr	r4, [r0, #0]
 801008e:	b17c      	cbz	r4, 80100b0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 8010090:	8824      	ldrh	r4, [r4, #0]
 8010092:	e7ed      	b.n	8010070 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8010094:	680c      	ldr	r4, [r1, #0]
 8010096:	b17c      	cbz	r4, 80100b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8010098:	7824      	ldrb	r4, [r4, #0]
 801009a:	e7e7      	b.n	801006c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801009c:	2c2d      	cmp	r4, #45	@ 0x2d
 801009e:	d102      	bne.n	80100a6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 80100a0:	f883 9000 	strb.w	r9, [r3]
 80100a4:	e7ea      	b.n	801007c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 80100a6:	2c23      	cmp	r4, #35	@ 0x23
 80100a8:	d107      	bne.n	80100ba <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 80100aa:	f888 9000 	strb.w	r9, [r8]
 80100ae:	e7e5      	b.n	801007c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 80100b0:	680c      	ldr	r4, [r1, #0]
 80100b2:	b10c      	cbz	r4, 80100b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 80100b4:	7824      	ldrb	r4, [r4, #0]
 80100b6:	e7db      	b.n	8010070 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 80100b8:	2400      	movs	r4, #0
 80100ba:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 80100be:	2b09      	cmp	r3, #9
 80100c0:	d901      	bls.n	80100c6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 80100c2:	2c2a      	cmp	r4, #42	@ 0x2a
 80100c4:	d122      	bne.n	801010c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 80100c6:	2301      	movs	r3, #1
 80100c8:	2c30      	cmp	r4, #48	@ 0x30
 80100ca:	f88e 3000 	strb.w	r3, [lr]
 80100ce:	d10d      	bne.n	80100ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 80100d0:	f88c 3000 	strb.w	r3, [ip]
 80100d4:	6803      	ldr	r3, [r0, #0]
 80100d6:	b10b      	cbz	r3, 80100dc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 80100d8:	3302      	adds	r3, #2
 80100da:	6003      	str	r3, [r0, #0]
 80100dc:	680b      	ldr	r3, [r1, #0]
 80100de:	b10b      	cbz	r3, 80100e4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 80100e0:	3301      	adds	r3, #1
 80100e2:	600b      	str	r3, [r1, #0]
 80100e4:	6803      	ldr	r3, [r0, #0]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d02f      	beq.n	801014a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 80100ea:	881c      	ldrh	r4, [r3, #0]
 80100ec:	2c2a      	cmp	r4, #42	@ 0x2a
 80100ee:	d135      	bne.n	801015c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 80100f0:	f04f 33ff 	mov.w	r3, #4294967295
 80100f4:	6033      	str	r3, [r6, #0]
 80100f6:	6803      	ldr	r3, [r0, #0]
 80100f8:	b10b      	cbz	r3, 80100fe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 80100fa:	3302      	adds	r3, #2
 80100fc:	6003      	str	r3, [r0, #0]
 80100fe:	680b      	ldr	r3, [r1, #0]
 8010100:	b10b      	cbz	r3, 8010106 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 8010102:	3301      	adds	r3, #1
 8010104:	600b      	str	r3, [r1, #0]
 8010106:	6803      	ldr	r3, [r0, #0]
 8010108:	b31b      	cbz	r3, 8010152 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801010a:	881c      	ldrh	r4, [r3, #0]
 801010c:	2c2e      	cmp	r4, #46	@ 0x2e
 801010e:	d11a      	bne.n	8010146 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8010110:	2301      	movs	r3, #1
 8010112:	703b      	strb	r3, [r7, #0]
 8010114:	6803      	ldr	r3, [r0, #0]
 8010116:	b10b      	cbz	r3, 801011c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 8010118:	3302      	adds	r3, #2
 801011a:	6003      	str	r3, [r0, #0]
 801011c:	680b      	ldr	r3, [r1, #0]
 801011e:	b10b      	cbz	r3, 8010124 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 8010120:	3301      	adds	r3, #1
 8010122:	600b      	str	r3, [r1, #0]
 8010124:	6803      	ldr	r3, [r0, #0]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d036      	beq.n	8010198 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801012a:	881b      	ldrh	r3, [r3, #0]
 801012c:	2b2a      	cmp	r3, #42	@ 0x2a
 801012e:	d137      	bne.n	80101a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8010130:	f04f 33ff 	mov.w	r3, #4294967295
 8010134:	602b      	str	r3, [r5, #0]
 8010136:	6803      	ldr	r3, [r0, #0]
 8010138:	b10b      	cbz	r3, 801013e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801013a:	3302      	adds	r3, #2
 801013c:	6003      	str	r3, [r0, #0]
 801013e:	680b      	ldr	r3, [r1, #0]
 8010140:	b10b      	cbz	r3, 8010146 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8010142:	3301      	adds	r3, #1
 8010144:	600b      	str	r3, [r1, #0]
 8010146:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801014a:	680c      	ldr	r4, [r1, #0]
 801014c:	b134      	cbz	r4, 801015c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801014e:	7824      	ldrb	r4, [r4, #0]
 8010150:	e7cc      	b.n	80100ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8010152:	680b      	ldr	r3, [r1, #0]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d0f6      	beq.n	8010146 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8010158:	781c      	ldrb	r4, [r3, #0]
 801015a:	e7d7      	b.n	801010c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801015c:	2300      	movs	r3, #0
 801015e:	6033      	str	r3, [r6, #0]
 8010160:	220a      	movs	r2, #10
 8010162:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8010166:	fa1f f38c 	uxth.w	r3, ip
 801016a:	2b09      	cmp	r3, #9
 801016c:	d8ce      	bhi.n	801010c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801016e:	6833      	ldr	r3, [r6, #0]
 8010170:	fb02 c303 	mla	r3, r2, r3, ip
 8010174:	6033      	str	r3, [r6, #0]
 8010176:	6803      	ldr	r3, [r0, #0]
 8010178:	b10b      	cbz	r3, 801017e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801017a:	3302      	adds	r3, #2
 801017c:	6003      	str	r3, [r0, #0]
 801017e:	680b      	ldr	r3, [r1, #0]
 8010180:	b10b      	cbz	r3, 8010186 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 8010182:	3301      	adds	r3, #1
 8010184:	600b      	str	r3, [r1, #0]
 8010186:	6803      	ldr	r3, [r0, #0]
 8010188:	b10b      	cbz	r3, 801018e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801018a:	881c      	ldrh	r4, [r3, #0]
 801018c:	e7e9      	b.n	8010162 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801018e:	680c      	ldr	r4, [r1, #0]
 8010190:	2c00      	cmp	r4, #0
 8010192:	d0e6      	beq.n	8010162 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8010194:	7824      	ldrb	r4, [r4, #0]
 8010196:	e7e4      	b.n	8010162 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8010198:	680b      	ldr	r3, [r1, #0]
 801019a:	b10b      	cbz	r3, 80101a0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801019c:	781b      	ldrb	r3, [r3, #0]
 801019e:	e7c5      	b.n	801012c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 80101a0:	2200      	movs	r2, #0
 80101a2:	602a      	str	r2, [r5, #0]
 80101a4:	240a      	movs	r4, #10
 80101a6:	3b30      	subs	r3, #48	@ 0x30
 80101a8:	b29e      	uxth	r6, r3
 80101aa:	2e09      	cmp	r6, #9
 80101ac:	682a      	ldr	r2, [r5, #0]
 80101ae:	d813      	bhi.n	80101d8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 80101b0:	fb04 3302 	mla	r3, r4, r2, r3
 80101b4:	602b      	str	r3, [r5, #0]
 80101b6:	6803      	ldr	r3, [r0, #0]
 80101b8:	b10b      	cbz	r3, 80101be <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 80101ba:	3302      	adds	r3, #2
 80101bc:	6003      	str	r3, [r0, #0]
 80101be:	680b      	ldr	r3, [r1, #0]
 80101c0:	b10b      	cbz	r3, 80101c6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 80101c2:	3301      	adds	r3, #1
 80101c4:	600b      	str	r3, [r1, #0]
 80101c6:	6803      	ldr	r3, [r0, #0]
 80101c8:	b10b      	cbz	r3, 80101ce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 80101ca:	881b      	ldrh	r3, [r3, #0]
 80101cc:	e7eb      	b.n	80101a6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 80101ce:	680b      	ldr	r3, [r1, #0]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d0e8      	beq.n	80101a6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 80101d4:	781b      	ldrb	r3, [r3, #0]
 80101d6:	e7e6      	b.n	80101a6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 80101d8:	2a06      	cmp	r2, #6
 80101da:	bfa8      	it	ge
 80101dc:	2206      	movge	r2, #6
 80101de:	602a      	str	r2, [r5, #0]
 80101e0:	e7b1      	b.n	8010146 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

080101e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 80101e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101e6:	b0a3      	sub	sp, #140	@ 0x8c
 80101e8:	2600      	movs	r6, #0
 80101ea:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 80101ee:	4607      	mov	r7, r0
 80101f0:	4688      	mov	r8, r1
 80101f2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80101f6:	4631      	mov	r1, r6
 80101f8:	2242      	movs	r2, #66	@ 0x42
 80101fa:	4648      	mov	r0, r9
 80101fc:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 80101fe:	960d      	str	r6, [sp, #52]	@ 0x34
 8010200:	f003 facf 	bl	80137a2 <memset>
 8010204:	b15f      	cbz	r7, 801021e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 8010206:	f108 3aff 	add.w	sl, r8, #4294967295
 801020a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801020c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801020e:	b152      	cbz	r2, 8010226 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 8010210:	8812      	ldrh	r2, [r2, #0]
 8010212:	b10a      	cbz	r2, 8010218 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8010214:	459a      	cmp	sl, r3
 8010216:	dc2e      	bgt.n	8010276 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 8010218:	2200      	movs	r2, #0
 801021a:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801021e:	4638      	mov	r0, r7
 8010220:	b023      	add	sp, #140	@ 0x8c
 8010222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010226:	9a08      	ldr	r2, [sp, #32]
 8010228:	2a00      	cmp	r2, #0
 801022a:	d0f5      	beq.n	8010218 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801022c:	7812      	ldrb	r2, [r2, #0]
 801022e:	e7f0      	b.n	8010212 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 8010230:	2d00      	cmp	r5, #0
 8010232:	d0ea      	beq.n	801020a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8010234:	782a      	ldrb	r2, [r5, #0]
 8010236:	b142      	cbz	r2, 801024a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 8010238:	2a25      	cmp	r2, #37	@ 0x25
 801023a:	d001      	beq.n	8010240 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801023c:	459a      	cmp	sl, r3
 801023e:	dc08      	bgt.n	8010252 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 8010240:	f1bb 0f00 	cmp.w	fp, #0
 8010244:	d121      	bne.n	801028a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 8010246:	2d00      	cmp	r5, #0
 8010248:	d0df      	beq.n	801020a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801024a:	782a      	ldrb	r2, [r5, #0]
 801024c:	f04f 0b00 	mov.w	fp, #0
 8010250:	e01d      	b.n	801028e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 8010252:	f1bb 0f00 	cmp.w	fp, #0
 8010256:	d078      	beq.n	801034a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x168>
 8010258:	f8bb 2000 	ldrh.w	r2, [fp]
 801025c:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8010260:	f1bb 0f00 	cmp.w	fp, #0
 8010264:	d002      	beq.n	801026c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 8010266:	f10b 0202 	add.w	r2, fp, #2
 801026a:	9209      	str	r2, [sp, #36]	@ 0x24
 801026c:	b10d      	cbz	r5, 8010272 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801026e:	3501      	adds	r5, #1
 8010270:	9508      	str	r5, [sp, #32]
 8010272:	3301      	adds	r3, #1
 8010274:	930d      	str	r3, [sp, #52]	@ 0x34
 8010276:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801027a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801027c:	f1bb 0f00 	cmp.w	fp, #0
 8010280:	d0d6      	beq.n	8010230 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 8010282:	f8bb 2000 	ldrh.w	r2, [fp]
 8010286:	2a00      	cmp	r2, #0
 8010288:	d1d6      	bne.n	8010238 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801028a:	f8bb 2000 	ldrh.w	r2, [fp]
 801028e:	2a00      	cmp	r2, #0
 8010290:	d0bb      	beq.n	801020a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8010292:	459a      	cmp	sl, r3
 8010294:	ddb9      	ble.n	801020a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8010296:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 801029a:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801029e:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 80102a2:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 80102a6:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 80102aa:	960e      	str	r6, [sp, #56]	@ 0x38
 80102ac:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 80102b0:	960f      	str	r6, [sp, #60]	@ 0x3c
 80102b2:	f1bb 0f00 	cmp.w	fp, #0
 80102b6:	d002      	beq.n	80102be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 80102b8:	f10b 0302 	add.w	r3, fp, #2
 80102bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80102be:	b10d      	cbz	r5, 80102c4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 80102c0:	1c6b      	adds	r3, r5, #1
 80102c2:	9308      	str	r3, [sp, #32]
 80102c4:	ab0f      	add	r3, sp, #60	@ 0x3c
 80102c6:	9305      	str	r3, [sp, #20]
 80102c8:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 80102cc:	9304      	str	r3, [sp, #16]
 80102ce:	ab0e      	add	r3, sp, #56	@ 0x38
 80102d0:	9303      	str	r3, [sp, #12]
 80102d2:	ab0c      	add	r3, sp, #48	@ 0x30
 80102d4:	9302      	str	r3, [sp, #8]
 80102d6:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 80102da:	9301      	str	r3, [sp, #4]
 80102dc:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 80102e0:	9300      	str	r3, [sp, #0]
 80102e2:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 80102e6:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 80102ea:	a908      	add	r1, sp, #32
 80102ec:	a809      	add	r0, sp, #36	@ 0x24
 80102ee:	f7ff fea8 	bl	8010042 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 80102f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	bfbe      	ittt	lt
 80102f8:	6823      	ldrlt	r3, [r4, #0]
 80102fa:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80102fe:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8010300:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010302:	bfb8      	it	lt
 8010304:	3404      	addlt	r4, #4
 8010306:	2b00      	cmp	r3, #0
 8010308:	bfb8      	it	lt
 801030a:	6823      	ldrlt	r3, [r4, #0]
 801030c:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8010310:	bfbe      	ittt	lt
 8010312:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8010316:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 8010318:	3404      	addlt	r4, #4
 801031a:	b1d9      	cbz	r1, 8010354 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x172>
 801031c:	880b      	ldrh	r3, [r1, #0]
 801031e:	2b69      	cmp	r3, #105	@ 0x69
 8010320:	d01f      	beq.n	8010362 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8010322:	d82f      	bhi.n	8010384 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a2>
 8010324:	2b58      	cmp	r3, #88	@ 0x58
 8010326:	d01c      	beq.n	8010362 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8010328:	d818      	bhi.n	801035c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17a>
 801032a:	2b25      	cmp	r3, #37	@ 0x25
 801032c:	d034      	beq.n	8010398 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b6>
 801032e:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 8010332:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010334:	f1bb 0f00 	cmp.w	fp, #0
 8010338:	f000 80b8 	beq.w	80104ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2ca>
 801033c:	f8bb 5000 	ldrh.w	r5, [fp]
 8010340:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 8010344:	3301      	adds	r3, #1
 8010346:	930d      	str	r3, [sp, #52]	@ 0x34
 8010348:	e029      	b.n	801039e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 801034a:	b10d      	cbz	r5, 8010350 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16e>
 801034c:	782a      	ldrb	r2, [r5, #0]
 801034e:	e785      	b.n	801025c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8010350:	462a      	mov	r2, r5
 8010352:	e783      	b.n	801025c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8010354:	2a00      	cmp	r2, #0
 8010356:	d0ea      	beq.n	801032e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 8010358:	7813      	ldrb	r3, [r2, #0]
 801035a:	e7e0      	b.n	801031e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13c>
 801035c:	3b63      	subs	r3, #99	@ 0x63
 801035e:	2b01      	cmp	r3, #1
 8010360:	d8e5      	bhi.n	801032e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 8010362:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 8010366:	b329      	cbz	r1, 80103b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d2>
 8010368:	880b      	ldrh	r3, [r1, #0]
 801036a:	2b69      	cmp	r3, #105	@ 0x69
 801036c:	d063      	beq.n	8010436 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 801036e:	d825      	bhi.n	80103bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1da>
 8010370:	2b63      	cmp	r3, #99	@ 0x63
 8010372:	d038      	beq.n	80103e6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x204>
 8010374:	2b64      	cmp	r3, #100	@ 0x64
 8010376:	d05e      	beq.n	8010436 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 8010378:	2b58      	cmp	r3, #88	@ 0x58
 801037a:	d07b      	beq.n	8010474 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x292>
 801037c:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 8010380:	4625      	mov	r5, r4
 8010382:	e036      	b.n	80103f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8010384:	2b73      	cmp	r3, #115	@ 0x73
 8010386:	d0ec      	beq.n	8010362 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8010388:	d802      	bhi.n	8010390 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ae>
 801038a:	2b6f      	cmp	r3, #111	@ 0x6f
 801038c:	d1cf      	bne.n	801032e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 801038e:	e7e8      	b.n	8010362 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8010390:	2b75      	cmp	r3, #117	@ 0x75
 8010392:	d0e6      	beq.n	8010362 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8010394:	2b78      	cmp	r3, #120	@ 0x78
 8010396:	e7f9      	b.n	801038c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1aa>
 8010398:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801039a:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801039e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103a0:	b10b      	cbz	r3, 80103a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c4>
 80103a2:	3302      	adds	r3, #2
 80103a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80103a6:	9b08      	ldr	r3, [sp, #32]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	f43f af2e 	beq.w	801020a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80103ae:	3301      	adds	r3, #1
 80103b0:	9308      	str	r3, [sp, #32]
 80103b2:	e72a      	b.n	801020a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 80103b4:	2a00      	cmp	r2, #0
 80103b6:	d0e1      	beq.n	801037c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 80103b8:	7813      	ldrb	r3, [r2, #0]
 80103ba:	e7d6      	b.n	801036a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x188>
 80103bc:	2b73      	cmp	r3, #115	@ 0x73
 80103be:	d036      	beq.n	801042e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24c>
 80103c0:	d807      	bhi.n	80103d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1f0>
 80103c2:	2b6f      	cmp	r3, #111	@ 0x6f
 80103c4:	d1da      	bne.n	801037c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 80103c6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80103c8:	1d25      	adds	r5, r4, #4
 80103ca:	eba8 0202 	sub.w	r2, r8, r2
 80103ce:	2308      	movs	r3, #8
 80103d0:	e04a      	b.n	8010468 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 80103d2:	2b75      	cmp	r3, #117	@ 0x75
 80103d4:	d043      	beq.n	801045e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x27c>
 80103d6:	2b78      	cmp	r3, #120	@ 0x78
 80103d8:	d1d0      	bne.n	801037c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 80103da:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80103dc:	1d25      	adds	r5, r4, #4
 80103de:	eba8 0202 	sub.w	r2, r8, r2
 80103e2:	2310      	movs	r3, #16
 80103e4:	e040      	b.n	8010468 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 80103e6:	6823      	ldr	r3, [r4, #0]
 80103e8:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 80103ec:	1d25      	adds	r5, r4, #4
 80103ee:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 80103f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103f4:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d052      	beq.n	80104a2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c0>
 80103fc:	881a      	ldrh	r2, [r3, #0]
 80103fe:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 8010402:	a80d      	add	r0, sp, #52	@ 0x34
 8010404:	9005      	str	r0, [sp, #20]
 8010406:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 801040a:	9004      	str	r0, [sp, #16]
 801040c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801040e:	9003      	str	r0, [sp, #12]
 8010410:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 8010414:	9002      	str	r0, [sp, #8]
 8010416:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8010418:	9001      	str	r0, [sp, #4]
 801041a:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 801041e:	9000      	str	r0, [sp, #0]
 8010420:	e9cd 8706 	strd	r8, r7, [sp, #24]
 8010424:	a810      	add	r0, sp, #64	@ 0x40
 8010426:	f7ff fd49 	bl	800febc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801042a:	462c      	mov	r4, r5
 801042c:	e7b7      	b.n	801039e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 801042e:	6823      	ldr	r3, [r4, #0]
 8010430:	1d25      	adds	r5, r4, #4
 8010432:	9310      	str	r3, [sp, #64]	@ 0x40
 8010434:	e7dd      	b.n	80103f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8010436:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010438:	6820      	ldr	r0, [r4, #0]
 801043a:	eba8 0202 	sub.w	r2, r8, r2
 801043e:	230a      	movs	r3, #10
 8010440:	b292      	uxth	r2, r2
 8010442:	4649      	mov	r1, r9
 8010444:	f7ff fcf0 	bl	800fe28 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 8010448:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801044c:	2b2d      	cmp	r3, #45	@ 0x2d
 801044e:	f104 0504 	add.w	r5, r4, #4
 8010452:	d1ce      	bne.n	80103f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8010454:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8010458:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801045a:	3302      	adds	r3, #2
 801045c:	e7e9      	b.n	8010432 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x250>
 801045e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010460:	1d25      	adds	r5, r4, #4
 8010462:	eba8 0202 	sub.w	r2, r8, r2
 8010466:	230a      	movs	r3, #10
 8010468:	b292      	uxth	r2, r2
 801046a:	4649      	mov	r1, r9
 801046c:	6820      	ldr	r0, [r4, #0]
 801046e:	f7ff fd07 	bl	800fe80 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8010472:	e7be      	b.n	80103f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8010474:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010476:	6820      	ldr	r0, [r4, #0]
 8010478:	eba8 0202 	sub.w	r2, r8, r2
 801047c:	b292      	uxth	r2, r2
 801047e:	2310      	movs	r3, #16
 8010480:	4649      	mov	r1, r9
 8010482:	f7ff fcfd 	bl	800fe80 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8010486:	1d25      	adds	r5, r4, #4
 8010488:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 801048c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8010490:	2b00      	cmp	r3, #0
 8010492:	d0ae      	beq.n	80103f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8010494:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 8010498:	2919      	cmp	r1, #25
 801049a:	d8f7      	bhi.n	801048c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 801049c:	3b20      	subs	r3, #32
 801049e:	8013      	strh	r3, [r2, #0]
 80104a0:	e7f4      	b.n	801048c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 80104a2:	9a08      	ldr	r2, [sp, #32]
 80104a4:	2a00      	cmp	r2, #0
 80104a6:	d0aa      	beq.n	80103fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 80104a8:	7812      	ldrb	r2, [r2, #0]
 80104aa:	e7a8      	b.n	80103fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 80104ac:	2d00      	cmp	r5, #0
 80104ae:	f43f af47 	beq.w	8010340 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>
 80104b2:	782d      	ldrb	r5, [r5, #0]
 80104b4:	e744      	b.n	8010340 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>

080104b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 80104b6:	b507      	push	{r0, r1, r2, lr}
 80104b8:	9300      	str	r3, [sp, #0]
 80104ba:	4613      	mov	r3, r2
 80104bc:	2200      	movs	r2, #0
 80104be:	f7ff fe90 	bl	80101e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 80104c2:	b003      	add	sp, #12
 80104c4:	f85d fb04 	ldr.w	pc, [sp], #4

080104c8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 80104c8:	b40c      	push	{r2, r3}
 80104ca:	b507      	push	{r0, r1, r2, lr}
 80104cc:	ab04      	add	r3, sp, #16
 80104ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80104d2:	9301      	str	r3, [sp, #4]
 80104d4:	f7ff ffef 	bl	80104b6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 80104d8:	b003      	add	sp, #12
 80104da:	f85d eb04 	ldr.w	lr, [sp], #4
 80104de:	b002      	add	sp, #8
 80104e0:	4770      	bx	lr
	...

080104e4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 80104e4:	4b01      	ldr	r3, [pc, #4]	@ (80104ec <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 80104e6:	6018      	str	r0, [r3, #0]
 80104e8:	4770      	bx	lr
 80104ea:	bf00      	nop
 80104ec:	200126b8 	.word	0x200126b8

080104f0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 80104f0:	4b06      	ldr	r3, [pc, #24]	@ (801050c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 80104f2:	881a      	ldrh	r2, [r3, #0]
 80104f4:	4282      	cmp	r2, r0
 80104f6:	d807      	bhi.n	8010508 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 80104f8:	4b05      	ldr	r3, [pc, #20]	@ (8010510 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 80104fa:	881b      	ldrh	r3, [r3, #0]
 80104fc:	4413      	add	r3, r2
 80104fe:	4298      	cmp	r0, r3
 8010500:	bfac      	ite	ge
 8010502:	2000      	movge	r0, #0
 8010504:	2001      	movlt	r0, #1
 8010506:	4770      	bx	lr
 8010508:	2000      	movs	r0, #0
 801050a:	4770      	bx	lr
 801050c:	200126d8 	.word	0x200126d8
 8010510:	200126dc 	.word	0x200126dc

08010514 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8010514:	b508      	push	{r3, lr}
 8010516:	4601      	mov	r1, r0
 8010518:	f7ff ffea 	bl	80104f0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801051c:	b118      	cbz	r0, 8010526 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801051e:	4b02      	ldr	r3, [pc, #8]	@ (8010528 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8010526:	bd08      	pop	{r3, pc}
 8010528:	200126bc 	.word	0x200126bc

0801052c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801052c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801052e:	4c24      	ldr	r4, [pc, #144]	@ (80105c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8010530:	6823      	ldr	r3, [r4, #0]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d042      	beq.n	80105bc <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8010536:	4a23      	ldr	r2, [pc, #140]	@ (80105c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8010538:	4d23      	ldr	r5, [pc, #140]	@ (80105c8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801053a:	8811      	ldrh	r1, [r2, #0]
 801053c:	f8b5 c000 	ldrh.w	ip, [r5]
 8010540:	4822      	ldr	r0, [pc, #136]	@ (80105cc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8010542:	4461      	add	r1, ip
 8010544:	1c4a      	adds	r2, r1, #1
 8010546:	f022 0201 	bic.w	r2, r2, #1
 801054a:	008f      	lsls	r7, r1, #2
 801054c:	0412      	lsls	r2, r2, #16
 801054e:	19de      	adds	r6, r3, r7
 8010550:	0c12      	lsrs	r2, r2, #16
 8010552:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8010556:	6006      	str	r6, [r0, #0]
 8010558:	4e1d      	ldr	r6, [pc, #116]	@ (80105d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801055a:	19da      	adds	r2, r3, r7
 801055c:	6032      	str	r2, [r6, #0]
 801055e:	220e      	movs	r2, #14
 8010560:	fb02 f20c 	mul.w	r2, r2, ip
 8010564:	3203      	adds	r2, #3
 8010566:	f022 0203 	bic.w	r2, r2, #3
 801056a:	443a      	add	r2, r7
 801056c:	4f19      	ldr	r7, [pc, #100]	@ (80105d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801056e:	4413      	add	r3, r2
 8010570:	603b      	str	r3, [r7, #0]
 8010572:	4f19      	ldr	r7, [pc, #100]	@ (80105d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8010574:	2300      	movs	r3, #0
 8010576:	803b      	strh	r3, [r7, #0]
 8010578:	4f18      	ldr	r7, [pc, #96]	@ (80105dc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801057a:	683f      	ldr	r7, [r7, #0]
 801057c:	1aba      	subs	r2, r7, r2
 801057e:	4f18      	ldr	r7, [pc, #96]	@ (80105e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8010580:	603a      	str	r2, [r7, #0]
 8010582:	4a18      	ldr	r2, [pc, #96]	@ (80105e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8010584:	469c      	mov	ip, r3
 8010586:	8013      	strh	r3, [r2, #0]
 8010588:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 801058c:	428b      	cmp	r3, r1
 801058e:	d10d      	bne.n	80105ac <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8010590:	882d      	ldrh	r5, [r5, #0]
 8010592:	6830      	ldr	r0, [r6, #0]
 8010594:	2300      	movs	r3, #0
 8010596:	240e      	movs	r4, #14
 8010598:	429d      	cmp	r5, r3
 801059a:	d90f      	bls.n	80105bc <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801059c:	fb04 0203 	mla	r2, r4, r3, r0
 80105a0:	3301      	adds	r3, #1
 80105a2:	7b11      	ldrb	r1, [r2, #12]
 80105a4:	f36f 1145 	bfc	r1, #5, #1
 80105a8:	7311      	strb	r1, [r2, #12]
 80105aa:	e7f5      	b.n	8010598 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 80105ac:	6822      	ldr	r2, [r4, #0]
 80105ae:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 80105b2:	6802      	ldr	r2, [r0, #0]
 80105b4:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 80105b8:	3301      	adds	r3, #1
 80105ba:	e7e7      	b.n	801058c <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 80105bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105be:	bf00      	nop
 80105c0:	200126bc 	.word	0x200126bc
 80105c4:	200126d8 	.word	0x200126d8
 80105c8:	200126dc 	.word	0x200126dc
 80105cc:	200126d0 	.word	0x200126d0
 80105d0:	200126c0 	.word	0x200126c0
 80105d4:	200126c8 	.word	0x200126c8
 80105d8:	200126da 	.word	0x200126da
 80105dc:	200126c4 	.word	0x200126c4
 80105e0:	200126d4 	.word	0x200126d4
 80105e4:	200126cc 	.word	0x200126cc

080105e8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80105e8:	4b06      	ldr	r3, [pc, #24]	@ (8010604 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	b943      	cbnz	r3, 8010600 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80105ee:	b139      	cbz	r1, 8010600 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80105f0:	4b05      	ldr	r3, [pc, #20]	@ (8010608 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 80105f2:	801a      	strh	r2, [r3, #0]
 80105f4:	4b05      	ldr	r3, [pc, #20]	@ (801060c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 80105f6:	6019      	str	r1, [r3, #0]
 80105f8:	4b05      	ldr	r3, [pc, #20]	@ (8010610 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 80105fa:	6018      	str	r0, [r3, #0]
 80105fc:	f7ff bf96 	b.w	801052c <_ZN8touchgfx6Bitmap10clearCacheEv>
 8010600:	4770      	bx	lr
 8010602:	bf00      	nop
 8010604:	200126c8 	.word	0x200126c8
 8010608:	200126dc 	.word	0x200126dc
 801060c:	200126c4 	.word	0x200126c4
 8010610:	200126bc 	.word	0x200126bc

08010614 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8010614:	b470      	push	{r4, r5, r6}
 8010616:	4c07      	ldr	r4, [pc, #28]	@ (8010634 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8010618:	6826      	ldr	r6, [r4, #0]
 801061a:	4605      	mov	r5, r0
 801061c:	4610      	mov	r0, r2
 801061e:	9a03      	ldr	r2, [sp, #12]
 8010620:	b936      	cbnz	r6, 8010630 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8010622:	6025      	str	r5, [r4, #0]
 8010624:	4c04      	ldr	r4, [pc, #16]	@ (8010638 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8010626:	8021      	strh	r1, [r4, #0]
 8010628:	bc70      	pop	{r4, r5, r6}
 801062a:	4619      	mov	r1, r3
 801062c:	f7ff bfdc 	b.w	80105e8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8010630:	bc70      	pop	{r4, r5, r6}
 8010632:	4770      	bx	lr
 8010634:	200126e0 	.word	0x200126e0
 8010638:	200126d8 	.word	0x200126d8

0801063c <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801063c:	4a12      	ldr	r2, [pc, #72]	@ (8010688 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801063e:	8803      	ldrh	r3, [r0, #0]
 8010640:	8812      	ldrh	r2, [r2, #0]
 8010642:	4293      	cmp	r3, r2
 8010644:	d207      	bcs.n	8010656 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8010646:	4a11      	ldr	r2, [pc, #68]	@ (801068c <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8010648:	6812      	ldr	r2, [r2, #0]
 801064a:	2114      	movs	r1, #20
 801064c:	fb01 2303 	mla	r3, r1, r3, r2
 8010650:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8010654:	4770      	bx	lr
 8010656:	490e      	ldr	r1, [pc, #56]	@ (8010690 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8010658:	8809      	ldrh	r1, [r1, #0]
 801065a:	4411      	add	r1, r2
 801065c:	428b      	cmp	r3, r1
 801065e:	da04      	bge.n	801066a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8010660:	1a9b      	subs	r3, r3, r2
 8010662:	4a0c      	ldr	r2, [pc, #48]	@ (8010694 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8010664:	210e      	movs	r1, #14
 8010666:	6812      	ldr	r2, [r2, #0]
 8010668:	e7f0      	b.n	801064c <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801066a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801066e:	4293      	cmp	r3, r2
 8010670:	d108      	bne.n	8010684 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8010672:	4b09      	ldr	r3, [pc, #36]	@ (8010698 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8010674:	781b      	ldrb	r3, [r3, #0]
 8010676:	b91b      	cbnz	r3, 8010680 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8010678:	4b08      	ldr	r3, [pc, #32]	@ (801069c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801067a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801067e:	4770      	bx	lr
 8010680:	4b07      	ldr	r3, [pc, #28]	@ (80106a0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8010682:	e7fa      	b.n	801067a <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8010684:	2000      	movs	r0, #0
 8010686:	4770      	bx	lr
 8010688:	200126d8 	.word	0x200126d8
 801068c:	200126e0 	.word	0x200126e0
 8010690:	200126dc 	.word	0x200126dc
 8010694:	200126c0 	.word	0x200126c0
 8010698:	20012650 	.word	0x20012650
 801069c:	20012652 	.word	0x20012652
 80106a0:	20012654 	.word	0x20012654

080106a4 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 80106a4:	4a12      	ldr	r2, [pc, #72]	@ (80106f0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 80106a6:	8803      	ldrh	r3, [r0, #0]
 80106a8:	8812      	ldrh	r2, [r2, #0]
 80106aa:	4293      	cmp	r3, r2
 80106ac:	d207      	bcs.n	80106be <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 80106ae:	4a11      	ldr	r2, [pc, #68]	@ (80106f4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 80106b0:	6812      	ldr	r2, [r2, #0]
 80106b2:	2114      	movs	r1, #20
 80106b4:	fb01 2303 	mla	r3, r1, r3, r2
 80106b8:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 80106bc:	4770      	bx	lr
 80106be:	490e      	ldr	r1, [pc, #56]	@ (80106f8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 80106c0:	8809      	ldrh	r1, [r1, #0]
 80106c2:	4411      	add	r1, r2
 80106c4:	428b      	cmp	r3, r1
 80106c6:	da04      	bge.n	80106d2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 80106c8:	1a9b      	subs	r3, r3, r2
 80106ca:	4a0c      	ldr	r2, [pc, #48]	@ (80106fc <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 80106cc:	210e      	movs	r1, #14
 80106ce:	6812      	ldr	r2, [r2, #0]
 80106d0:	e7f0      	b.n	80106b4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 80106d2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80106d6:	4293      	cmp	r3, r2
 80106d8:	d108      	bne.n	80106ec <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 80106da:	4b09      	ldr	r3, [pc, #36]	@ (8010700 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 80106dc:	781b      	ldrb	r3, [r3, #0]
 80106de:	b91b      	cbnz	r3, 80106e8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 80106e0:	4b08      	ldr	r3, [pc, #32]	@ (8010704 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 80106e2:	f9b3 0000 	ldrsh.w	r0, [r3]
 80106e6:	4770      	bx	lr
 80106e8:	4b07      	ldr	r3, [pc, #28]	@ (8010708 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 80106ea:	e7fa      	b.n	80106e2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 80106ec:	2000      	movs	r0, #0
 80106ee:	4770      	bx	lr
 80106f0:	200126d8 	.word	0x200126d8
 80106f4:	200126e0 	.word	0x200126e0
 80106f8:	200126dc 	.word	0x200126dc
 80106fc:	200126c0 	.word	0x200126c0
 8010700:	20012650 	.word	0x20012650
 8010704:	20012654 	.word	0x20012654
 8010708:	20012652 	.word	0x20012652

0801070c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801070c:	b530      	push	{r4, r5, lr}
 801070e:	4a22      	ldr	r2, [pc, #136]	@ (8010798 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8010710:	880b      	ldrh	r3, [r1, #0]
 8010712:	8812      	ldrh	r2, [r2, #0]
 8010714:	4293      	cmp	r3, r2
 8010716:	d213      	bcs.n	8010740 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8010718:	4a20      	ldr	r2, [pc, #128]	@ (801079c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801071a:	6812      	ldr	r2, [r2, #0]
 801071c:	2114      	movs	r1, #20
 801071e:	fb01 2303 	mla	r3, r1, r3, r2
 8010722:	8a1a      	ldrh	r2, [r3, #16]
 8010724:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8010728:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801072c:	8a5b      	ldrh	r3, [r3, #18]
 801072e:	8004      	strh	r4, [r0, #0]
 8010730:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8010734:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010738:	8041      	strh	r1, [r0, #2]
 801073a:	8082      	strh	r2, [r0, #4]
 801073c:	80c3      	strh	r3, [r0, #6]
 801073e:	e024      	b.n	801078a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 8010740:	4917      	ldr	r1, [pc, #92]	@ (80107a0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8010742:	8809      	ldrh	r1, [r1, #0]
 8010744:	4411      	add	r1, r2
 8010746:	428b      	cmp	r3, r1
 8010748:	da10      	bge.n	801076c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 801074a:	1a9b      	subs	r3, r3, r2
 801074c:	220e      	movs	r2, #14
 801074e:	4353      	muls	r3, r2
 8010750:	4a14      	ldr	r2, [pc, #80]	@ (80107a4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8010752:	6811      	ldr	r1, [r2, #0]
 8010754:	18ca      	adds	r2, r1, r3
 8010756:	5ecd      	ldrsh	r5, [r1, r3]
 8010758:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 801075c:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8010760:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8010764:	8005      	strh	r5, [r0, #0]
 8010766:	8044      	strh	r4, [r0, #2]
 8010768:	8081      	strh	r1, [r0, #4]
 801076a:	e7e7      	b.n	801073c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801076c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010770:	4293      	cmp	r3, r2
 8010772:	d10b      	bne.n	801078c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 8010774:	4b0c      	ldr	r3, [pc, #48]	@ (80107a8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8010776:	f9b3 1000 	ldrsh.w	r1, [r3]
 801077a:	4b0c      	ldr	r3, [pc, #48]	@ (80107ac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801077c:	8081      	strh	r1, [r0, #4]
 801077e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010782:	80c2      	strh	r2, [r0, #6]
 8010784:	2300      	movs	r3, #0
 8010786:	8003      	strh	r3, [r0, #0]
 8010788:	8043      	strh	r3, [r0, #2]
 801078a:	bd30      	pop	{r4, r5, pc}
 801078c:	2300      	movs	r3, #0
 801078e:	8003      	strh	r3, [r0, #0]
 8010790:	8043      	strh	r3, [r0, #2]
 8010792:	8083      	strh	r3, [r0, #4]
 8010794:	e7d2      	b.n	801073c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8010796:	bf00      	nop
 8010798:	200126d8 	.word	0x200126d8
 801079c:	200126e0 	.word	0x200126e0
 80107a0:	200126dc 	.word	0x200126dc
 80107a4:	200126c0 	.word	0x200126c0
 80107a8:	2001264c 	.word	0x2001264c
 80107ac:	2001264e 	.word	0x2001264e

080107b0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 80107b0:	4a17      	ldr	r2, [pc, #92]	@ (8010810 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 80107b2:	8803      	ldrh	r3, [r0, #0]
 80107b4:	8812      	ldrh	r2, [r2, #0]
 80107b6:	4293      	cmp	r3, r2
 80107b8:	d213      	bcs.n	80107e2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 80107ba:	4a16      	ldr	r2, [pc, #88]	@ (8010814 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 80107bc:	6812      	ldr	r2, [r2, #0]
 80107be:	2114      	movs	r1, #20
 80107c0:	fb01 2303 	mla	r3, r1, r3, r2
 80107c4:	8a1a      	ldrh	r2, [r3, #16]
 80107c6:	8919      	ldrh	r1, [r3, #8]
 80107c8:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80107cc:	428a      	cmp	r2, r1
 80107ce:	db1d      	blt.n	801080c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 80107d0:	8a58      	ldrh	r0, [r3, #18]
 80107d2:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80107d6:	895b      	ldrh	r3, [r3, #10]
 80107d8:	4298      	cmp	r0, r3
 80107da:	bfac      	ite	ge
 80107dc:	2000      	movge	r0, #0
 80107de:	2001      	movlt	r0, #1
 80107e0:	4770      	bx	lr
 80107e2:	490d      	ldr	r1, [pc, #52]	@ (8010818 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 80107e4:	8809      	ldrh	r1, [r1, #0]
 80107e6:	4411      	add	r1, r2
 80107e8:	428b      	cmp	r3, r1
 80107ea:	da0d      	bge.n	8010808 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 80107ec:	1a9b      	subs	r3, r3, r2
 80107ee:	4a0b      	ldr	r2, [pc, #44]	@ (801081c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 80107f0:	6812      	ldr	r2, [r2, #0]
 80107f2:	210e      	movs	r1, #14
 80107f4:	fb01 2303 	mla	r3, r1, r3, r2
 80107f8:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80107fc:	891a      	ldrh	r2, [r3, #8]
 80107fe:	4291      	cmp	r1, r2
 8010800:	db04      	blt.n	801080c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8010802:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8010806:	e7e6      	b.n	80107d6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 8010808:	2000      	movs	r0, #0
 801080a:	4770      	bx	lr
 801080c:	2001      	movs	r0, #1
 801080e:	4770      	bx	lr
 8010810:	200126d8 	.word	0x200126d8
 8010814:	200126e0 	.word	0x200126e0
 8010818:	200126dc 	.word	0x200126dc
 801081c:	200126c0 	.word	0x200126c0

08010820 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8010820:	4a12      	ldr	r2, [pc, #72]	@ (801086c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8010822:	8803      	ldrh	r3, [r0, #0]
 8010824:	8811      	ldrh	r1, [r2, #0]
 8010826:	428b      	cmp	r3, r1
 8010828:	d20b      	bcs.n	8010842 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801082a:	4a11      	ldr	r2, [pc, #68]	@ (8010870 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801082c:	6812      	ldr	r2, [r2, #0]
 801082e:	b112      	cbz	r2, 8010836 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8010830:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010834:	b9c0      	cbnz	r0, 8010868 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8010836:	4a0f      	ldr	r2, [pc, #60]	@ (8010874 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8010838:	6811      	ldr	r1, [r2, #0]
 801083a:	2214      	movs	r2, #20
 801083c:	4353      	muls	r3, r2
 801083e:	58c8      	ldr	r0, [r1, r3]
 8010840:	4770      	bx	lr
 8010842:	4a0d      	ldr	r2, [pc, #52]	@ (8010878 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8010844:	8812      	ldrh	r2, [r2, #0]
 8010846:	440a      	add	r2, r1
 8010848:	4293      	cmp	r3, r2
 801084a:	da04      	bge.n	8010856 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801084c:	4a08      	ldr	r2, [pc, #32]	@ (8010870 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801084e:	6812      	ldr	r2, [r2, #0]
 8010850:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010854:	4770      	bx	lr
 8010856:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801085a:	4293      	cmp	r3, r2
 801085c:	d103      	bne.n	8010866 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801085e:	4b07      	ldr	r3, [pc, #28]	@ (801087c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8010864:	4770      	bx	lr
 8010866:	2000      	movs	r0, #0
 8010868:	4770      	bx	lr
 801086a:	bf00      	nop
 801086c:	200126d8 	.word	0x200126d8
 8010870:	200126bc 	.word	0x200126bc
 8010874:	200126e0 	.word	0x200126e0
 8010878:	200126dc 	.word	0x200126dc
 801087c:	20012658 	.word	0x20012658

08010880 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8010880:	4b24      	ldr	r3, [pc, #144]	@ (8010914 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8010882:	8802      	ldrh	r2, [r0, #0]
 8010884:	8818      	ldrh	r0, [r3, #0]
 8010886:	4282      	cmp	r2, r0
 8010888:	d221      	bcs.n	80108ce <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801088a:	4b23      	ldr	r3, [pc, #140]	@ (8010918 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801088c:	6819      	ldr	r1, [r3, #0]
 801088e:	2314      	movs	r3, #20
 8010890:	fb03 1302 	mla	r3, r3, r2, r1
 8010894:	6858      	ldr	r0, [r3, #4]
 8010896:	2800      	cmp	r0, #0
 8010898:	d03a      	beq.n	8010910 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801089a:	4920      	ldr	r1, [pc, #128]	@ (801091c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801089c:	6809      	ldr	r1, [r1, #0]
 801089e:	2900      	cmp	r1, #0
 80108a0:	d036      	beq.n	8010910 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80108a2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80108a6:	2900      	cmp	r1, #0
 80108a8:	d032      	beq.n	8010910 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80108aa:	891a      	ldrh	r2, [r3, #8]
 80108ac:	8958      	ldrh	r0, [r3, #10]
 80108ae:	4350      	muls	r0, r2
 80108b0:	7c5a      	ldrb	r2, [r3, #17]
 80108b2:	7cdb      	ldrb	r3, [r3, #19]
 80108b4:	0952      	lsrs	r2, r2, #5
 80108b6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80108ba:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80108be:	2b0b      	cmp	r3, #11
 80108c0:	bf18      	it	ne
 80108c2:	0040      	lslne	r0, r0, #1
 80108c4:	3003      	adds	r0, #3
 80108c6:	f020 0003 	bic.w	r0, r0, #3
 80108ca:	4408      	add	r0, r1
 80108cc:	4770      	bx	lr
 80108ce:	4b14      	ldr	r3, [pc, #80]	@ (8010920 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 80108d0:	881b      	ldrh	r3, [r3, #0]
 80108d2:	4403      	add	r3, r0
 80108d4:	429a      	cmp	r2, r3
 80108d6:	da1a      	bge.n	801090e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80108d8:	4b12      	ldr	r3, [pc, #72]	@ (8010924 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	1a10      	subs	r0, r2, r0
 80108de:	210e      	movs	r1, #14
 80108e0:	fb01 3000 	mla	r0, r1, r0, r3
 80108e4:	7b03      	ldrb	r3, [r0, #12]
 80108e6:	f003 031f 	and.w	r3, r3, #31
 80108ea:	2b0b      	cmp	r3, #11
 80108ec:	d10b      	bne.n	8010906 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 80108ee:	8903      	ldrh	r3, [r0, #8]
 80108f0:	8940      	ldrh	r0, [r0, #10]
 80108f2:	4358      	muls	r0, r3
 80108f4:	4b09      	ldr	r3, [pc, #36]	@ (801091c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80108f6:	6819      	ldr	r1, [r3, #0]
 80108f8:	3003      	adds	r0, #3
 80108fa:	f020 0303 	bic.w	r3, r0, #3
 80108fe:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8010902:	4418      	add	r0, r3
 8010904:	4770      	bx	lr
 8010906:	2b0d      	cmp	r3, #13
 8010908:	d101      	bne.n	801090e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801090a:	300d      	adds	r0, #13
 801090c:	4770      	bx	lr
 801090e:	2000      	movs	r0, #0
 8010910:	4770      	bx	lr
 8010912:	bf00      	nop
 8010914:	200126d8 	.word	0x200126d8
 8010918:	200126e0 	.word	0x200126e0
 801091c:	200126bc 	.word	0x200126bc
 8010920:	200126dc 	.word	0x200126dc
 8010924:	200126c0 	.word	0x200126c0

08010928 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8010928:	b510      	push	{r4, lr}
 801092a:	4b1f      	ldr	r3, [pc, #124]	@ (80109a8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 801092c:	8802      	ldrh	r2, [r0, #0]
 801092e:	881b      	ldrh	r3, [r3, #0]
 8010930:	429a      	cmp	r2, r3
 8010932:	d21a      	bcs.n	801096a <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 8010934:	4b1d      	ldr	r3, [pc, #116]	@ (80109ac <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	2114      	movs	r1, #20
 801093a:	fb01 3102 	mla	r1, r1, r2, r3
 801093e:	7c4b      	ldrb	r3, [r1, #17]
 8010940:	0958      	lsrs	r0, r3, #5
 8010942:	7ccb      	ldrb	r3, [r1, #19]
 8010944:	491a      	ldr	r1, [pc, #104]	@ (80109b0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 8010946:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801094a:	6809      	ldr	r1, [r1, #0]
 801094c:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 8010950:	b2d8      	uxtb	r0, r3
 8010952:	b149      	cbz	r1, 8010968 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8010954:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8010958:	b132      	cbz	r2, 8010968 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801095a:	2b0e      	cmp	r3, #14
 801095c:	d021      	beq.n	80109a2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801095e:	280f      	cmp	r0, #15
 8010960:	d01d      	beq.n	801099e <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 8010962:	2810      	cmp	r0, #16
 8010964:	bf08      	it	eq
 8010966:	2002      	moveq	r0, #2
 8010968:	bd10      	pop	{r4, pc}
 801096a:	4912      	ldr	r1, [pc, #72]	@ (80109b4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 801096c:	8809      	ldrh	r1, [r1, #0]
 801096e:	4419      	add	r1, r3
 8010970:	428a      	cmp	r2, r1
 8010972:	da09      	bge.n	8010988 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 8010974:	1ad3      	subs	r3, r2, r3
 8010976:	4a10      	ldr	r2, [pc, #64]	@ (80109b8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 8010978:	6812      	ldr	r2, [r2, #0]
 801097a:	210e      	movs	r1, #14
 801097c:	fb01 2303 	mla	r3, r1, r3, r2
 8010980:	7b18      	ldrb	r0, [r3, #12]
 8010982:	f000 001f 	and.w	r0, r0, #31
 8010986:	e7ef      	b.n	8010968 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8010988:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 801098c:	429a      	cmp	r2, r3
 801098e:	d108      	bne.n	80109a2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 8010990:	f7f8 fdca 	bl	8009528 <_ZN8touchgfx3HAL3lcdEv>
 8010994:	6803      	ldr	r3, [r0, #0]
 8010996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801099a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801099c:	4718      	bx	r3
 801099e:	2001      	movs	r0, #1
 80109a0:	e7e2      	b.n	8010968 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 80109a2:	2000      	movs	r0, #0
 80109a4:	e7e0      	b.n	8010968 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 80109a6:	bf00      	nop
 80109a8:	200126d8 	.word	0x200126d8
 80109ac:	200126e0 	.word	0x200126e0
 80109b0:	200126bc 	.word	0x200126bc
 80109b4:	200126dc 	.word	0x200126dc
 80109b8:	200126c0 	.word	0x200126c0

080109bc <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 80109bc:	2010      	movs	r0, #16
 80109be:	4770      	bx	lr

080109c0 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 80109c0:	2000      	movs	r0, #0
 80109c2:	4770      	bx	lr

080109c4 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 80109c4:	4b02      	ldr	r3, [pc, #8]	@ (80109d0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 80109c6:	8818      	ldrh	r0, [r3, #0]
 80109c8:	0040      	lsls	r0, r0, #1
 80109ca:	b280      	uxth	r0, r0
 80109cc:	4770      	bx	lr
 80109ce:	bf00      	nop
 80109d0:	20012652 	.word	0x20012652

080109d4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80109d4:	2bff      	cmp	r3, #255	@ 0xff
 80109d6:	d05e      	beq.n	8010a96 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc2>
 80109d8:	2a0b      	cmp	r2, #11
 80109da:	d058      	beq.n	8010a8e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 80109dc:	d80e      	bhi.n	80109fc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 80109de:	2a03      	cmp	r2, #3
 80109e0:	d04d      	beq.n	8010a7e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xaa>
 80109e2:	d804      	bhi.n	80109ee <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80109e4:	2a01      	cmp	r2, #1
 80109e6:	d04c      	beq.n	8010a82 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xae>
 80109e8:	d94d      	bls.n	8010a86 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb2>
 80109ea:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80109ec:	e031      	b.n	8010a52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80109ee:	2a09      	cmp	r2, #9
 80109f0:	d04d      	beq.n	8010a8e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 80109f2:	d84a      	bhi.n	8010a8a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 80109f4:	2a08      	cmp	r2, #8
 80109f6:	d048      	beq.n	8010a8a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 80109f8:	2300      	movs	r3, #0
 80109fa:	e02a      	b.n	8010a52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80109fc:	2a2f      	cmp	r2, #47	@ 0x2f
 80109fe:	d02c      	beq.n	8010a5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 8010a00:	d811      	bhi.n	8010a26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 8010a02:	2a2d      	cmp	r2, #45	@ 0x2d
 8010a04:	d018      	beq.n	8010a38 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64>
 8010a06:	d831      	bhi.n	8010a6c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x98>
 8010a08:	2a2c      	cmp	r2, #44	@ 0x2c
 8010a0a:	d1f5      	bne.n	80109f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010a0c:	684a      	ldr	r2, [r1, #4]
 8010a0e:	7813      	ldrb	r3, [r2, #0]
 8010a10:	7852      	ldrb	r2, [r2, #1]
 8010a12:	2a00      	cmp	r2, #0
 8010a14:	d1f0      	bne.n	80109f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010a16:	2b01      	cmp	r3, #1
 8010a18:	d01d      	beq.n	8010a56 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d02d      	beq.n	8010a7a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8010a1e:	2b02      	cmp	r3, #2
 8010a20:	d1ea      	bne.n	80109f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010a22:	68c3      	ldr	r3, [r0, #12]
 8010a24:	e015      	b.n	8010a52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010a26:	2a31      	cmp	r2, #49	@ 0x31
 8010a28:	d004      	beq.n	8010a34 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 8010a2a:	d332      	bcc.n	8010a92 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 8010a2c:	2a32      	cmp	r2, #50	@ 0x32
 8010a2e:	d030      	beq.n	8010a92 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 8010a30:	2a33      	cmp	r2, #51	@ 0x33
 8010a32:	d1e1      	bne.n	80109f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010a34:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 8010a36:	e00c      	b.n	8010a52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010a38:	684a      	ldr	r2, [r1, #4]
 8010a3a:	7813      	ldrb	r3, [r2, #0]
 8010a3c:	7852      	ldrb	r2, [r2, #1]
 8010a3e:	2a00      	cmp	r2, #0
 8010a40:	d1da      	bne.n	80109f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010a42:	2b01      	cmp	r3, #1
 8010a44:	d004      	beq.n	8010a50 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c>
 8010a46:	d30f      	bcc.n	8010a68 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x94>
 8010a48:	2b02      	cmp	r3, #2
 8010a4a:	d1d5      	bne.n	80109f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010a4c:	6943      	ldr	r3, [r0, #20]
 8010a4e:	e000      	b.n	8010a52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010a50:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8010a52:	4618      	mov	r0, r3
 8010a54:	4770      	bx	lr
 8010a56:	69c3      	ldr	r3, [r0, #28]
 8010a58:	e7fb      	b.n	8010a52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010a5a:	684b      	ldr	r3, [r1, #4]
 8010a5c:	781a      	ldrb	r2, [r3, #0]
 8010a5e:	785b      	ldrb	r3, [r3, #1]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d1c9      	bne.n	80109f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010a64:	2a00      	cmp	r2, #0
 8010a66:	d1f4      	bne.n	8010a52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010a68:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8010a6a:	e7f2      	b.n	8010a52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010a6c:	684b      	ldr	r3, [r1, #4]
 8010a6e:	781a      	ldrb	r2, [r3, #0]
 8010a70:	785b      	ldrb	r3, [r3, #1]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d1c0      	bne.n	80109f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010a76:	2a00      	cmp	r2, #0
 8010a78:	d1eb      	bne.n	8010a52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010a7a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8010a7c:	e7e9      	b.n	8010a52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010a7e:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8010a80:	e7e7      	b.n	8010a52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010a82:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8010a84:	e7e5      	b.n	8010a52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010a86:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8010a88:	e7e3      	b.n	8010a52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010a8a:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8010a8c:	e7e1      	b.n	8010a52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010a8e:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8010a90:	e7df      	b.n	8010a52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010a92:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8010a94:	e7dd      	b.n	8010a52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010a96:	2a0b      	cmp	r2, #11
 8010a98:	d059      	beq.n	8010b4e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 8010a9a:	d80e      	bhi.n	8010aba <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe6>
 8010a9c:	2a03      	cmp	r2, #3
 8010a9e:	d050      	beq.n	8010b42 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16e>
 8010aa0:	d804      	bhi.n	8010aac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 8010aa2:	2a01      	cmp	r2, #1
 8010aa4:	d04f      	beq.n	8010b46 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x172>
 8010aa6:	d950      	bls.n	8010b4a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x176>
 8010aa8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8010aaa:	e7d2      	b.n	8010a52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010aac:	2a09      	cmp	r2, #9
 8010aae:	d04e      	beq.n	8010b4e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 8010ab0:	d801      	bhi.n	8010ab6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 8010ab2:	2a08      	cmp	r2, #8
 8010ab4:	d1a0      	bne.n	80109f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010ab6:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8010ab8:	e7cb      	b.n	8010a52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010aba:	2a2f      	cmp	r2, #47	@ 0x2f
 8010abc:	d02d      	beq.n	8010b1a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x146>
 8010abe:	d811      	bhi.n	8010ae4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8010ac0:	2a2d      	cmp	r2, #45	@ 0x2d
 8010ac2:	d018      	beq.n	8010af6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x122>
 8010ac4:	d833      	bhi.n	8010b2e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x15a>
 8010ac6:	2a2c      	cmp	r2, #44	@ 0x2c
 8010ac8:	d196      	bne.n	80109f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010aca:	684a      	ldr	r2, [r1, #4]
 8010acc:	7813      	ldrb	r3, [r2, #0]
 8010ace:	7852      	ldrb	r2, [r2, #1]
 8010ad0:	2a00      	cmp	r2, #0
 8010ad2:	d191      	bne.n	80109f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010ad4:	2b01      	cmp	r3, #1
 8010ad6:	d01e      	beq.n	8010b16 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d030      	beq.n	8010b3e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16a>
 8010adc:	2b02      	cmp	r3, #2
 8010ade:	d18b      	bne.n	80109f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010ae0:	6903      	ldr	r3, [r0, #16]
 8010ae2:	e7b6      	b.n	8010a52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010ae4:	2a31      	cmp	r2, #49	@ 0x31
 8010ae6:	d004      	beq.n	8010af2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11e>
 8010ae8:	d333      	bcc.n	8010b52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 8010aea:	2a32      	cmp	r2, #50	@ 0x32
 8010aec:	d031      	beq.n	8010b52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 8010aee:	2a33      	cmp	r2, #51	@ 0x33
 8010af0:	d182      	bne.n	80109f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010af2:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 8010af4:	e7ad      	b.n	8010a52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010af6:	684a      	ldr	r2, [r1, #4]
 8010af8:	7813      	ldrb	r3, [r2, #0]
 8010afa:	7852      	ldrb	r2, [r2, #1]
 8010afc:	2a00      	cmp	r2, #0
 8010afe:	f47f af7b 	bne.w	80109f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010b02:	2b01      	cmp	r3, #1
 8010b04:	d005      	beq.n	8010b12 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8010b06:	d310      	bcc.n	8010b2a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x156>
 8010b08:	2b02      	cmp	r3, #2
 8010b0a:	f47f af75 	bne.w	80109f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010b0e:	6983      	ldr	r3, [r0, #24]
 8010b10:	e79f      	b.n	8010a52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010b12:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8010b14:	e79d      	b.n	8010a52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010b16:	6a03      	ldr	r3, [r0, #32]
 8010b18:	e79b      	b.n	8010a52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010b1a:	684b      	ldr	r3, [r1, #4]
 8010b1c:	781a      	ldrb	r2, [r3, #0]
 8010b1e:	785b      	ldrb	r3, [r3, #1]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	f47f af69 	bne.w	80109f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010b26:	2a00      	cmp	r2, #0
 8010b28:	d193      	bne.n	8010a52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010b2a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8010b2c:	e791      	b.n	8010a52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010b2e:	684b      	ldr	r3, [r1, #4]
 8010b30:	781a      	ldrb	r2, [r3, #0]
 8010b32:	785b      	ldrb	r3, [r3, #1]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	f47f af5f 	bne.w	80109f8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010b3a:	2a00      	cmp	r2, #0
 8010b3c:	d189      	bne.n	8010a52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010b3e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010b40:	e787      	b.n	8010a52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010b42:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8010b44:	e785      	b.n	8010a52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010b46:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8010b48:	e783      	b.n	8010a52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010b4a:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8010b4c:	e781      	b.n	8010a52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010b4e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8010b50:	e77f      	b.n	8010a52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010b52:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8010b54:	e77d      	b.n	8010a52 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>

08010b56 <_ZN8touchgfx8LCD16bppD1Ev>:
 8010b56:	4770      	bx	lr

08010b58 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
 8010b58:	4770      	bx	lr

08010b5a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8010b5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b5e:	b088      	sub	sp, #32
 8010b60:	ac08      	add	r4, sp, #32
 8010b62:	4606      	mov	r6, r0
 8010b64:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8010b68:	4620      	mov	r0, r4
 8010b6a:	4688      	mov	r8, r1
 8010b6c:	4691      	mov	r9, r2
 8010b6e:	f7ff fe57 	bl	8010820 <_ZNK8touchgfx6Bitmap7getDataEv>
 8010b72:	6833      	ldr	r3, [r6, #0]
 8010b74:	4605      	mov	r5, r0
 8010b76:	4620      	mov	r0, r4
 8010b78:	699f      	ldr	r7, [r3, #24]
 8010b7a:	f7ff fd5f 	bl	801063c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010b7e:	4682      	mov	sl, r0
 8010b80:	4620      	mov	r0, r4
 8010b82:	f7ff fd8f 	bl	80106a4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010b86:	9500      	str	r5, [sp, #0]
 8010b88:	e9cd a001 	strd	sl, r0, [sp, #4]
 8010b8c:	464b      	mov	r3, r9
 8010b8e:	a806      	add	r0, sp, #24
 8010b90:	4642      	mov	r2, r8
 8010b92:	4631      	mov	r1, r6
 8010b94:	47b8      	blx	r7
 8010b96:	4628      	mov	r0, r5
 8010b98:	b008      	add	sp, #32
 8010b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08010ba0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8010ba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	9300      	str	r3, [sp, #0]
 8010ba8:	4b3d      	ldr	r3, [pc, #244]	@ (8010ca0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 8010baa:	781b      	ldrb	r3, [r3, #0]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d137      	bne.n	8010c20 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 8010bb0:	4a3c      	ldr	r2, [pc, #240]	@ (8010ca4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8010bb2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010bb6:	f8ad 2004 	strh.w	r2, [sp, #4]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d132      	bne.n	8010c24 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 8010bbe:	4b3a      	ldr	r3, [pc, #232]	@ (8010ca8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8010bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010bc4:	6808      	ldr	r0, [r1, #0]
 8010bc6:	6849      	ldr	r1, [r1, #4]
 8010bc8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010bcc:	ac02      	add	r4, sp, #8
 8010bce:	ab02      	add	r3, sp, #8
 8010bd0:	c303      	stmia	r3!, {r0, r1}
 8010bd2:	4669      	mov	r1, sp
 8010bd4:	4620      	mov	r0, r4
 8010bd6:	f7fb fed5 	bl	800c984 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8010bda:	4668      	mov	r0, sp
 8010bdc:	f7fb feaa 	bl	800c934 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010be0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8010be4:	f8bd 2000 	ldrh.w	r2, [sp]
 8010be8:	4d30      	ldr	r5, [pc, #192]	@ (8010cac <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 8010bea:	4413      	add	r3, r2
 8010bec:	f8ad 3008 	strh.w	r3, [sp, #8]
 8010bf0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010bf4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8010bf8:	6828      	ldr	r0, [r5, #0]
 8010bfa:	4413      	add	r3, r2
 8010bfc:	f8ad 300a 	strh.w	r3, [sp, #10]
 8010c00:	6803      	ldr	r3, [r0, #0]
 8010c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c04:	4798      	blx	r3
 8010c06:	f010 0f01 	tst.w	r0, #1
 8010c0a:	462f      	mov	r7, r5
 8010c0c:	d00c      	beq.n	8010c28 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 8010c0e:	6828      	ldr	r0, [r5, #0]
 8010c10:	6803      	ldr	r3, [r0, #0]
 8010c12:	e894 0006 	ldmia.w	r4, {r1, r2}
 8010c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010c18:	4798      	blx	r3
 8010c1a:	b004      	add	sp, #16
 8010c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c20:	4a21      	ldr	r2, [pc, #132]	@ (8010ca8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8010c22:	e7c6      	b.n	8010bb2 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8010c24:	4b1f      	ldr	r3, [pc, #124]	@ (8010ca4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8010c26:	e7cb      	b.n	8010bc0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8010c28:	6838      	ldr	r0, [r7, #0]
 8010c2a:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8010c2e:	6803      	ldr	r3, [r0, #0]
 8010c30:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 8010c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010c36:	4798      	blx	r3
 8010c38:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8010c3c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8010c40:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 8010c44:	fb16 3602 	smlabb	r6, r6, r2, r3
 8010c48:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8010c4c:	6838      	ldr	r0, [r7, #0]
 8010c4e:	6803      	ldr	r3, [r0, #0]
 8010c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c52:	4798      	blx	r3
 8010c54:	4a13      	ldr	r2, [pc, #76]	@ (8010ca4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8010c56:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 8010c5a:	8813      	ldrh	r3, [r2, #0]
 8010c5c:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8010c60:	fb03 1404 	mla	r4, r3, r4, r1
 8010c64:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8010c68:	435d      	muls	r5, r3
 8010c6a:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8010c6e:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8010c72:	4691      	mov	r9, r2
 8010c74:	6838      	ldr	r0, [r7, #0]
 8010c76:	42ac      	cmp	r4, r5
 8010c78:	6803      	ldr	r3, [r0, #0]
 8010c7a:	d20e      	bcs.n	8010c9a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 8010c7c:	f8d3 a034 	ldr.w	sl, [r3, #52]	@ 0x34
 8010c80:	4632      	mov	r2, r6
 8010c82:	4643      	mov	r3, r8
 8010c84:	4621      	mov	r1, r4
 8010c86:	47d0      	blx	sl
 8010c88:	f8b9 3000 	ldrh.w	r3, [r9]
 8010c8c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8010c90:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8010c94:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8010c98:	e7ec      	b.n	8010c74 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 8010c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c9c:	4798      	blx	r3
 8010c9e:	e7bc      	b.n	8010c1a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8010ca0:	20012650 	.word	0x20012650
 8010ca4:	20012652 	.word	0x20012652
 8010ca8:	20012654 	.word	0x20012654
 8010cac:	20012658 	.word	0x20012658

08010cb0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8010cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cb4:	b08b      	sub	sp, #44	@ 0x2c
 8010cb6:	460f      	mov	r7, r1
 8010cb8:	f89d b050 	ldrb.w	fp, [sp, #80]	@ 0x50
 8010cbc:	f89d 4054 	ldrb.w	r4, [sp, #84]	@ 0x54
 8010cc0:	4616      	mov	r6, r2
 8010cc2:	f1bb 0f00 	cmp.w	fp, #0
 8010cc6:	d04a      	beq.n	8010d5e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 8010cc8:	6810      	ldr	r0, [r2, #0]
 8010cca:	6851      	ldr	r1, [r2, #4]
 8010ccc:	ad06      	add	r5, sp, #24
 8010cce:	c503      	stmia	r5!, {r0, r1}
 8010cd0:	6818      	ldr	r0, [r3, #0]
 8010cd2:	6859      	ldr	r1, [r3, #4]
 8010cd4:	ad08      	add	r5, sp, #32
 8010cd6:	c503      	stmia	r5!, {r0, r1}
 8010cd8:	a806      	add	r0, sp, #24
 8010cda:	f7fb fe2b 	bl	800c934 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010cde:	4631      	mov	r1, r6
 8010ce0:	a808      	add	r0, sp, #32
 8010ce2:	f7fb fe4f 	bl	800c984 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8010ce6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8010cea:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8010cee:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8010cf2:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 8010cf6:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 8010cfa:	fb16 2103 	smlabb	r1, r6, r3, r2
 8010cfe:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 8010d02:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8010d06:	4f5f      	ldr	r7, [pc, #380]	@ (8010e84 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8010d08:	440a      	add	r2, r1
 8010d0a:	f8ad 2020 	strh.w	r2, [sp, #32]
 8010d0e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8010d12:	6838      	ldr	r0, [r7, #0]
 8010d14:	4413      	add	r3, r2
 8010d16:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8010d1a:	6803      	ldr	r3, [r0, #0]
 8010d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d1e:	4798      	blx	r3
 8010d20:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8010d24:	46b9      	mov	r9, r7
 8010d26:	d11d      	bne.n	8010d64 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8010d28:	b9fc      	cbnz	r4, 8010d6a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8010d2a:	f010 0f01 	tst.w	r0, #1
 8010d2e:	d01c      	beq.n	8010d6a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8010d30:	f8d9 0000 	ldr.w	r0, [r9]
 8010d34:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8010d38:	6801      	ldr	r1, [r0, #0]
 8010d3a:	f8cd b00c 	str.w	fp, [sp, #12]
 8010d3e:	2700      	movs	r7, #0
 8010d40:	e9cd 4704 	strd	r4, r7, [sp, #16]
 8010d44:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8010d48:	9402      	str	r4, [sp, #8]
 8010d4a:	b2ad      	uxth	r5, r5
 8010d4c:	fa1f f488 	uxth.w	r4, r8
 8010d50:	9501      	str	r5, [sp, #4]
 8010d52:	9400      	str	r4, [sp, #0]
 8010d54:	6c4c      	ldr	r4, [r1, #68]	@ 0x44
 8010d56:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8010d5a:	4631      	mov	r1, r6
 8010d5c:	47a0      	blx	r4
 8010d5e:	b00b      	add	sp, #44	@ 0x2c
 8010d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d64:	f010 0f04 	tst.w	r0, #4
 8010d68:	e7e1      	b.n	8010d2e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 8010d6a:	f8d9 0000 	ldr.w	r0, [r9]
 8010d6e:	6803      	ldr	r3, [r0, #0]
 8010d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d72:	4798      	blx	r3
 8010d74:	4b44      	ldr	r3, [pc, #272]	@ (8010e88 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 8010d76:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 8010d7a:	881a      	ldrh	r2, [r3, #0]
 8010d7c:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8010d80:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8010d84:	fb02 1404 	mla	r4, r2, r4, r1
 8010d88:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8010d8c:	469a      	mov	sl, r3
 8010d8e:	fb05 f502 	mul.w	r5, r5, r2
 8010d92:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8010d96:	d059      	beq.n	8010e4c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 8010d98:	f1cb 09ff 	rsb	r9, fp, #255	@ 0xff
 8010d9c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8010da0:	fa1f f28b 	uxth.w	r2, fp
 8010da4:	fa1f f989 	uxth.w	r9, r9
 8010da8:	469e      	mov	lr, r3
 8010daa:	42ac      	cmp	r4, r5
 8010dac:	d264      	bcs.n	8010e78 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8010dae:	eb04 0a07 	add.w	sl, r4, r7
 8010db2:	4554      	cmp	r4, sl
 8010db4:	d23d      	bcs.n	8010e32 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 8010db6:	8821      	ldrh	r1, [r4, #0]
 8010db8:	f836 3b02 	ldrh.w	r3, [r6], #2
 8010dbc:	1208      	asrs	r0, r1, #8
 8010dbe:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8010dc2:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8010dc6:	fb10 f009 	smulbb	r0, r0, r9
 8010dca:	ea4f 0be1 	mov.w	fp, r1, asr #3
 8010dce:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8010dd2:	00c9      	lsls	r1, r1, #3
 8010dd4:	fb0c 0c02 	mla	ip, ip, r2, r0
 8010dd8:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 8010ddc:	10d8      	asrs	r0, r3, #3
 8010dde:	b2c9      	uxtb	r1, r1
 8010de0:	00db      	lsls	r3, r3, #3
 8010de2:	fa1f fc8c 	uxth.w	ip, ip
 8010de6:	fb1b fb09 	smulbb	fp, fp, r9
 8010dea:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8010dee:	b2db      	uxtb	r3, r3
 8010df0:	fb11 f109 	smulbb	r1, r1, r9
 8010df4:	fb00 b002 	mla	r0, r0, r2, fp
 8010df8:	fb03 1302 	mla	r3, r3, r2, r1
 8010dfc:	f10c 0b01 	add.w	fp, ip, #1
 8010e00:	b29b      	uxth	r3, r3
 8010e02:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8010e06:	b280      	uxth	r0, r0
 8010e08:	f40c 4b78 	and.w	fp, ip, #63488	@ 0xf800
 8010e0c:	f103 0c01 	add.w	ip, r3, #1
 8010e10:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8010e14:	1c43      	adds	r3, r0, #1
 8010e16:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8010e1a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8010e1e:	0940      	lsrs	r0, r0, #5
 8010e20:	ea4c 0c0b 	orr.w	ip, ip, fp
 8010e24:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8010e28:	ea4c 0c00 	orr.w	ip, ip, r0
 8010e2c:	f824 cb02 	strh.w	ip, [r4], #2
 8010e30:	e7bf      	b.n	8010db2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 8010e32:	f8be 3000 	ldrh.w	r3, [lr]
 8010e36:	eba3 0308 	sub.w	r3, r3, r8
 8010e3a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8010e3e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8010e42:	eba3 0308 	sub.w	r3, r3, r8
 8010e46:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8010e4a:	e7ae      	b.n	8010daa <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 8010e4c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8010e50:	f8d9 0000 	ldr.w	r0, [r9]
 8010e54:	42ac      	cmp	r4, r5
 8010e56:	6803      	ldr	r3, [r0, #0]
 8010e58:	d20e      	bcs.n	8010e78 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8010e5a:	f8d3 8034 	ldr.w	r8, [r3, #52]	@ 0x34
 8010e5e:	4632      	mov	r2, r6
 8010e60:	463b      	mov	r3, r7
 8010e62:	4621      	mov	r1, r4
 8010e64:	47c0      	blx	r8
 8010e66:	f8ba 3000 	ldrh.w	r3, [sl]
 8010e6a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8010e6e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8010e72:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8010e76:	e7eb      	b.n	8010e50 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 8010e78:	4b02      	ldr	r3, [pc, #8]	@ (8010e84 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8010e7a:	6818      	ldr	r0, [r3, #0]
 8010e7c:	6803      	ldr	r3, [r0, #0]
 8010e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e80:	4798      	blx	r3
 8010e82:	e76c      	b.n	8010d5e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 8010e84:	20012658 	.word	0x20012658
 8010e88:	20012652 	.word	0x20012652

08010e8c <_ZN8touchgfx8LCD16bppD0Ev>:
 8010e8c:	b510      	push	{r4, lr}
 8010e8e:	218c      	movs	r1, #140	@ 0x8c
 8010e90:	4604      	mov	r4, r0
 8010e92:	f002 fa51 	bl	8013338 <_ZdlPvj>
 8010e96:	4620      	mov	r0, r4
 8010e98:	bd10      	pop	{r4, pc}

08010e9a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
 8010e9a:	b510      	push	{r4, lr}
 8010e9c:	2104      	movs	r1, #4
 8010e9e:	4604      	mov	r4, r0
 8010ea0:	f002 fa4a 	bl	8013338 <_ZdlPvj>
 8010ea4:	4620      	mov	r0, r4
 8010ea6:	bd10      	pop	{r4, pc}

08010ea8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8010ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eac:	b091      	sub	sp, #68	@ 0x44
 8010eae:	469b      	mov	fp, r3
 8010eb0:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8010eb4:	4616      	mov	r6, r2
 8010eb6:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	@ 0x6c
 8010eba:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010ebe:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 8010ec2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010ec6:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8010eca:	4604      	mov	r4, r0
 8010ecc:	460d      	mov	r5, r1
 8010ece:	4640      	mov	r0, r8
 8010ed0:	4659      	mov	r1, fp
 8010ed2:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8010ed6:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
 8010eda:	f8ad 702e 	strh.w	r7, [sp, #46]	@ 0x2e
 8010ede:	f7f8 f84d 	bl	8008f7c <_ZN8touchgfx4RectaNERKS0_>
 8010ee2:	4631      	mov	r1, r6
 8010ee4:	4640      	mov	r0, r8
 8010ee6:	f7f8 f849 	bl	8008f7c <_ZN8touchgfx4RectaNERKS0_>
 8010eea:	4b74      	ldr	r3, [pc, #464]	@ (80110bc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 8010eec:	8818      	ldrh	r0, [r3, #0]
 8010eee:	4b74      	ldr	r3, [pc, #464]	@ (80110c0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 8010ef0:	8819      	ldrh	r1, [r3, #0]
 8010ef2:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	b202      	sxth	r2, r0
 8010efa:	b20e      	sxth	r6, r1
 8010efc:	da07      	bge.n	8010f0e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 8010efe:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8010f02:	4463      	add	r3, ip
 8010f04:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8010f08:	2300      	movs	r3, #0
 8010f0a:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 8010f0e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8010f12:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 8010f16:	1ad2      	subs	r2, r2, r3
 8010f18:	4594      	cmp	ip, r2
 8010f1a:	bfc4      	itt	gt
 8010f1c:	1ac2      	subgt	r2, r0, r3
 8010f1e:	f8ad 202c 	strhgt.w	r2, [sp, #44]	@ 0x2c
 8010f22:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8010f26:	2a00      	cmp	r2, #0
 8010f28:	da07      	bge.n	8010f3a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 8010f2a:	f8bd c02e 	ldrh.w	ip, [sp, #46]	@ 0x2e
 8010f2e:	4462      	add	r2, ip
 8010f30:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8010f34:	2200      	movs	r2, #0
 8010f36:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8010f3a:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	@ 0x2a
 8010f3e:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 8010f42:	eba6 060a 	sub.w	r6, r6, sl
 8010f46:	42b2      	cmp	r2, r6
 8010f48:	bfc4      	itt	gt
 8010f4a:	eba1 020a 	subgt.w	r2, r1, sl
 8010f4e:	f8ad 202e 	strhgt.w	r2, [sp, #46]	@ 0x2e
 8010f52:	4a5c      	ldr	r2, [pc, #368]	@ (80110c4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 8010f54:	7812      	ldrb	r2, [r2, #0]
 8010f56:	b9a2      	cbnz	r2, 8010f82 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 8010f58:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8010f5c:	4286      	cmp	r6, r0
 8010f5e:	4640      	mov	r0, r8
 8010f60:	9303      	str	r3, [sp, #12]
 8010f62:	bf14      	ite	ne
 8010f64:	2600      	movne	r6, #0
 8010f66:	2601      	moveq	r6, #1
 8010f68:	f7f8 f84b 	bl	8009002 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010f6c:	9b03      	ldr	r3, [sp, #12]
 8010f6e:	b160      	cbz	r0, 8010f8a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 8010f70:	2300      	movs	r3, #0
 8010f72:	8023      	strh	r3, [r4, #0]
 8010f74:	8063      	strh	r3, [r4, #2]
 8010f76:	80a3      	strh	r3, [r4, #4]
 8010f78:	4620      	mov	r0, r4
 8010f7a:	80e3      	strh	r3, [r4, #6]
 8010f7c:	b011      	add	sp, #68	@ 0x44
 8010f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f82:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 8010f86:	428e      	cmp	r6, r1
 8010f88:	e7e9      	b.n	8010f5e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 8010f8a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8010f8e:	9205      	str	r2, [sp, #20]
 8010f90:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 8010f94:	9206      	str	r2, [sp, #24]
 8010f96:	f8bb 2000 	ldrh.w	r2, [fp]
 8010f9a:	900e      	str	r0, [sp, #56]	@ 0x38
 8010f9c:	1a9b      	subs	r3, r3, r2
 8010f9e:	b21b      	sxth	r3, r3
 8010fa0:	9303      	str	r3, [sp, #12]
 8010fa2:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8010fa6:	f8ad 903c 	strh.w	r9, [sp, #60]	@ 0x3c
 8010faa:	ebaa 0a03 	sub.w	sl, sl, r3
 8010fae:	fa0f f38a 	sxth.w	r3, sl
 8010fb2:	9304      	str	r3, [sp, #16]
 8010fb4:	9b03      	ldr	r3, [sp, #12]
 8010fb6:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8010fba:	9b04      	ldr	r3, [sp, #16]
 8010fbc:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8010fc0:	9b05      	ldr	r3, [sp, #20]
 8010fc2:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8010fc6:	a90e      	add	r1, sp, #56	@ 0x38
 8010fc8:	9b06      	ldr	r3, [sp, #24]
 8010fca:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8010fce:	a80c      	add	r0, sp, #48	@ 0x30
 8010fd0:	f8ad 703e 	strh.w	r7, [sp, #62]	@ 0x3e
 8010fd4:	f7fb fcd6 	bl	800c984 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8010fd8:	4640      	mov	r0, r8
 8010fda:	f7fb fcab 	bl	800c934 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010fde:	a80e      	add	r0, sp, #56	@ 0x38
 8010fe0:	f7fb fca8 	bl	800c934 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010fe4:	4b38      	ldr	r3, [pc, #224]	@ (80110c8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8010fe6:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	@ 0x3c
 8010fea:	881b      	ldrh	r3, [r3, #0]
 8010fec:	9307      	str	r3, [sp, #28]
 8010fee:	682b      	ldr	r3, [r5, #0]
 8010ff0:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 80110cc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8010ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ff6:	4628      	mov	r0, r5
 8010ff8:	4798      	blx	r3
 8010ffa:	f8bd 5032 	ldrh.w	r5, [sp, #50]	@ 0x32
 8010ffe:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8011002:	4681      	mov	r9, r0
 8011004:	fb1a 3305 	smlabb	r3, sl, r5, r3
 8011008:	f8db 0000 	ldr.w	r0, [fp]
 801100c:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801100e:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8011012:	6803      	ldr	r3, [r0, #0]
 8011014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011016:	4798      	blx	r3
 8011018:	4607      	mov	r7, r0
 801101a:	f8db 0000 	ldr.w	r0, [fp]
 801101e:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8011022:	6803      	ldr	r3, [r0, #0]
 8011024:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8011028:	9109      	str	r1, [sp, #36]	@ 0x24
 801102a:	9208      	str	r2, [sp, #32]
 801102c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801102e:	4798      	blx	r3
 8011030:	f010 0f01 	tst.w	r0, #1
 8011034:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8011038:	d012      	beq.n	8011060 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 801103a:	f8db 0000 	ldr.w	r0, [fp]
 801103e:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 8011042:	6803      	ldr	r3, [r0, #0]
 8011044:	9200      	str	r2, [sp, #0]
 8011046:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8011048:	e898 0006 	ldmia.w	r8, {r1, r2}
 801104c:	462b      	mov	r3, r5
 801104e:	47b0      	blx	r6
 8011050:	9b03      	ldr	r3, [sp, #12]
 8011052:	8023      	strh	r3, [r4, #0]
 8011054:	9b04      	ldr	r3, [sp, #16]
 8011056:	8063      	strh	r3, [r4, #2]
 8011058:	9b05      	ldr	r3, [sp, #20]
 801105a:	80a3      	strh	r3, [r4, #4]
 801105c:	9b06      	ldr	r3, [sp, #24]
 801105e:	e78b      	b.n	8010f78 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 8011060:	fb09 f202 	mul.w	r2, r9, r2
 8011064:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8011068:	440f      	add	r7, r1
 801106a:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 801106e:	b166      	cbz	r6, 801108a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8011070:	9a07      	ldr	r2, [sp, #28]
 8011072:	4592      	cmp	sl, r2
 8011074:	d109      	bne.n	801108a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8011076:	f8db 0000 	ldr.w	r0, [fp]
 801107a:	6802      	ldr	r2, [r0, #0]
 801107c:	fb09 f303 	mul.w	r3, r9, r3
 8011080:	6b56      	ldr	r6, [r2, #52]	@ 0x34
 8011082:	4629      	mov	r1, r5
 8011084:	463a      	mov	r2, r7
 8011086:	47b0      	blx	r6
 8011088:	e7e2      	b.n	8011050 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801108a:	fb0a f303 	mul.w	r3, sl, r3
 801108e:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 80110cc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8011092:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 8011096:	ea4f 064a 	mov.w	r6, sl, lsl #1
 801109a:	4545      	cmp	r5, r8
 801109c:	d2d8      	bcs.n	8011050 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801109e:	f8db 0000 	ldr.w	r0, [fp]
 80110a2:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80110a6:	6802      	ldr	r2, [r0, #0]
 80110a8:	4629      	mov	r1, r5
 80110aa:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 80110ae:	005b      	lsls	r3, r3, #1
 80110b0:	463a      	mov	r2, r7
 80110b2:	47d0      	blx	sl
 80110b4:	444f      	add	r7, r9
 80110b6:	4435      	add	r5, r6
 80110b8:	e7ef      	b.n	801109a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 80110ba:	bf00      	nop
 80110bc:	2001264c 	.word	0x2001264c
 80110c0:	2001264e 	.word	0x2001264e
 80110c4:	20012650 	.word	0x20012650
 80110c8:	20012652 	.word	0x20012652
 80110cc:	20012658 	.word	0x20012658

080110d0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 80110d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110d2:	4606      	mov	r6, r0
 80110d4:	b087      	sub	sp, #28
 80110d6:	460c      	mov	r4, r1
 80110d8:	4617      	mov	r7, r2
 80110da:	461d      	mov	r5, r3
 80110dc:	b333      	cbz	r3, 801112c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80110de:	4608      	mov	r0, r1
 80110e0:	f7f7 ff8f 	bl	8009002 <_ZNK8touchgfx4Rect7isEmptyEv>
 80110e4:	bb10      	cbnz	r0, 801112c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80110e6:	6820      	ldr	r0, [r4, #0]
 80110e8:	6861      	ldr	r1, [r4, #4]
 80110ea:	4c1c      	ldr	r4, [pc, #112]	@ (801115c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 80110ec:	ab04      	add	r3, sp, #16
 80110ee:	c303      	stmia	r3!, {r0, r1}
 80110f0:	a804      	add	r0, sp, #16
 80110f2:	f7fb fc1f 	bl	800c934 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80110f6:	6820      	ldr	r0, [r4, #0]
 80110f8:	6803      	ldr	r3, [r0, #0]
 80110fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80110fc:	4798      	blx	r3
 80110fe:	2dff      	cmp	r5, #255	@ 0xff
 8011100:	d016      	beq.n	8011130 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8011102:	f010 0f08 	tst.w	r0, #8
 8011106:	6820      	ldr	r0, [r4, #0]
 8011108:	d015      	beq.n	8011136 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801110a:	2400      	movs	r4, #0
 801110c:	6801      	ldr	r1, [r0, #0]
 801110e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011112:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8011116:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801111a:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801111e:	9401      	str	r4, [sp, #4]
 8011120:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8011124:	9400      	str	r4, [sp, #0]
 8011126:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 8011128:	4639      	mov	r1, r7
 801112a:	47a0      	blx	r4
 801112c:	b007      	add	sp, #28
 801112e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011130:	f010 0f02 	tst.w	r0, #2
 8011134:	e7e7      	b.n	8011106 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8011136:	6803      	ldr	r3, [r0, #0]
 8011138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801113a:	4798      	blx	r3
 801113c:	4b08      	ldr	r3, [pc, #32]	@ (8011160 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801113e:	881a      	ldrh	r2, [r3, #0]
 8011140:	6833      	ldr	r3, [r6, #0]
 8011142:	e9cd 7500 	strd	r7, r5, [sp]
 8011146:	4601      	mov	r1, r0
 8011148:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801114a:	4630      	mov	r0, r6
 801114c:	ab04      	add	r3, sp, #16
 801114e:	47a8      	blx	r5
 8011150:	6820      	ldr	r0, [r4, #0]
 8011152:	6803      	ldr	r3, [r0, #0]
 8011154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011156:	4798      	blx	r3
 8011158:	e7e8      	b.n	801112c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801115a:	bf00      	nop
 801115c:	20012658 	.word	0x20012658
 8011160:	20012652 	.word	0x20012652

08011164 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8011164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011168:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 801116c:	9e08      	ldr	r6, [sp, #32]
 801116e:	4688      	mov	r8, r1
 8011170:	4614      	mov	r4, r2
 8011172:	461d      	mov	r5, r3
 8011174:	2f00      	cmp	r7, #0
 8011176:	f000 80a9 	beq.w	80112cc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801117a:	4618      	mov	r0, r3
 801117c:	f7f7 ff41 	bl	8009002 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011180:	2800      	cmp	r0, #0
 8011182:	f040 80a3 	bne.w	80112cc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8011186:	f9b5 1000 	ldrsh.w	r1, [r5]
 801118a:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801118e:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8011192:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8011196:	fb04 1303 	mla	r3, r4, r3, r1
 801119a:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801119e:	4365      	muls	r5, r4
 80111a0:	2fff      	cmp	r7, #255	@ 0xff
 80111a2:	eba4 0200 	sub.w	r2, r4, r0
 80111a6:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 80111aa:	ea4f 2816 	mov.w	r8, r6, lsr #8
 80111ae:	d04a      	beq.n	8011246 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 80111b0:	b2bc      	uxth	r4, r7
 80111b2:	f1c7 0cff 	rsb	ip, r7, #255	@ 0xff
 80111b6:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 80111ba:	fa5f f788 	uxtb.w	r7, r8
 80111be:	b2f3      	uxtb	r3, r6
 80111c0:	0040      	lsls	r0, r0, #1
 80111c2:	fb0e fe04 	mul.w	lr, lr, r4
 80111c6:	4367      	muls	r7, r4
 80111c8:	4363      	muls	r3, r4
 80111ca:	ea4f 0842 	mov.w	r8, r2, lsl #1
 80111ce:	fa1f fc8c 	uxth.w	ip, ip
 80111d2:	42a9      	cmp	r1, r5
 80111d4:	d27a      	bcs.n	80112cc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 80111d6:	eb01 0900 	add.w	r9, r1, r0
 80111da:	4549      	cmp	r1, r9
 80111dc:	d231      	bcs.n	8011242 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 80111de:	880a      	ldrh	r2, [r1, #0]
 80111e0:	1214      	asrs	r4, r2, #8
 80111e2:	10d6      	asrs	r6, r2, #3
 80111e4:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 80111e8:	00d2      	lsls	r2, r2, #3
 80111ea:	b2d2      	uxtb	r2, r2
 80111ec:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80111f0:	fb14 f40c 	smulbb	r4, r4, ip
 80111f4:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80111f8:	4474      	add	r4, lr
 80111fa:	fb12 f20c 	smulbb	r2, r2, ip
 80111fe:	b2a4      	uxth	r4, r4
 8011200:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8011204:	441a      	add	r2, r3
 8011206:	b292      	uxth	r2, r2
 8011208:	f104 0a01 	add.w	sl, r4, #1
 801120c:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8011210:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8011214:	fb16 f60c 	smulbb	r6, r6, ip
 8011218:	f102 0a01 	add.w	sl, r2, #1
 801121c:	443e      	add	r6, r7
 801121e:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8011222:	b2b6      	uxth	r6, r6
 8011224:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8011228:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801122c:	4322      	orrs	r2, r4
 801122e:	1c74      	adds	r4, r6, #1
 8011230:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8011234:	0976      	lsrs	r6, r6, #5
 8011236:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801123a:	4332      	orrs	r2, r6
 801123c:	f821 2b02 	strh.w	r2, [r1], #2
 8011240:	e7cb      	b.n	80111da <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 8011242:	4441      	add	r1, r8
 8011244:	e7c5      	b.n	80111d2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 8011246:	4f22      	ldr	r7, [pc, #136]	@ (80112d0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 8011248:	0973      	lsrs	r3, r6, #5
 801124a:	ea08 0707 	and.w	r7, r8, r7
 801124e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8011252:	433b      	orrs	r3, r7
 8011254:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8011258:	4333      	orrs	r3, r6
 801125a:	07e7      	lsls	r7, r4, #31
 801125c:	b29b      	uxth	r3, r3
 801125e:	d50b      	bpl.n	8011278 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8011260:	0040      	lsls	r0, r0, #1
 8011262:	0052      	lsls	r2, r2, #1
 8011264:	42a9      	cmp	r1, r5
 8011266:	d231      	bcs.n	80112cc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8011268:	180c      	adds	r4, r1, r0
 801126a:	42a1      	cmp	r1, r4
 801126c:	d202      	bcs.n	8011274 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 801126e:	f821 3b02 	strh.w	r3, [r1], #2
 8011272:	e7fa      	b.n	801126a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 8011274:	4411      	add	r1, r2
 8011276:	e7f5      	b.n	8011264 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 8011278:	078e      	lsls	r6, r1, #30
 801127a:	d008      	beq.n	801128e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801127c:	0066      	lsls	r6, r4, #1
 801127e:	460a      	mov	r2, r1
 8011280:	42aa      	cmp	r2, r5
 8011282:	d202      	bcs.n	801128a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 8011284:	8013      	strh	r3, [r2, #0]
 8011286:	4432      	add	r2, r6
 8011288:	e7fa      	b.n	8011280 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 801128a:	3102      	adds	r1, #2
 801128c:	3801      	subs	r0, #1
 801128e:	07c2      	lsls	r2, r0, #31
 8011290:	d50b      	bpl.n	80112aa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 8011292:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 8011296:	3a01      	subs	r2, #1
 8011298:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801129c:	0066      	lsls	r6, r4, #1
 801129e:	42aa      	cmp	r2, r5
 80112a0:	d202      	bcs.n	80112a8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 80112a2:	8013      	strh	r3, [r2, #0]
 80112a4:	4432      	add	r2, r6
 80112a6:	e7fa      	b.n	801129e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 80112a8:	3801      	subs	r0, #1
 80112aa:	b178      	cbz	r0, 80112cc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 80112ac:	1040      	asrs	r0, r0, #1
 80112ae:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 80112b2:	0080      	lsls	r0, r0, #2
 80112b4:	0064      	lsls	r4, r4, #1
 80112b6:	42a9      	cmp	r1, r5
 80112b8:	d208      	bcs.n	80112cc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 80112ba:	180e      	adds	r6, r1, r0
 80112bc:	460a      	mov	r2, r1
 80112be:	42b2      	cmp	r2, r6
 80112c0:	d202      	bcs.n	80112c8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 80112c2:	f842 3b04 	str.w	r3, [r2], #4
 80112c6:	e7fa      	b.n	80112be <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 80112c8:	4421      	add	r1, r4
 80112ca:	e7f4      	b.n	80112b6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 80112cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112d0:	00fff800 	.word	0x00fff800

080112d4 <_ZN8touchgfx8LCD16bppC1Ev>:
 80112d4:	2200      	movs	r2, #0
 80112d6:	4912      	ldr	r1, [pc, #72]	@ (8011320 <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 80112d8:	6001      	str	r1, [r0, #0]
 80112da:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80112de:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80112e2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80112e6:	e9c0 2207 	strd	r2, r2, [r0, #28]
 80112ea:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 80112ee:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 80112f2:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 80112f6:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 80112fa:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 80112fe:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 8011302:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 8011306:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 801130a:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 801130e:	e9c0 221b 	strd	r2, r2, [r0, #108]	@ 0x6c
 8011312:	e9c0 221d 	strd	r2, r2, [r0, #116]	@ 0x74
 8011316:	e9c0 221f 	strd	r2, r2, [r0, #124]	@ 0x7c
 801131a:	e9c0 2221 	strd	r2, r2, [r0, #132]	@ 0x84
 801131e:	4770      	bx	lr
 8011320:	08015cf8 	.word	0x08015cf8

08011324 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8011324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011328:	460d      	mov	r5, r1
 801132a:	b08d      	sub	sp, #52	@ 0x34
 801132c:	4604      	mov	r4, r0
 801132e:	6808      	ldr	r0, [r1, #0]
 8011330:	6849      	ldr	r1, [r1, #4]
 8011332:	4699      	mov	r9, r3
 8011334:	ab08      	add	r3, sp, #32
 8011336:	c303      	stmia	r3!, {r0, r1}
 8011338:	6810      	ldr	r0, [r2, #0]
 801133a:	6851      	ldr	r1, [r2, #4]
 801133c:	ab0a      	add	r3, sp, #40	@ 0x28
 801133e:	c303      	stmia	r3!, {r0, r1}
 8011340:	a808      	add	r0, sp, #32
 8011342:	f7fb faf7 	bl	800c934 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011346:	4629      	mov	r1, r5
 8011348:	a80a      	add	r0, sp, #40	@ 0x28
 801134a:	f7fb fb1b 	bl	800c984 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801134e:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 8011352:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 8011356:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 801135a:	4d63      	ldr	r5, [pc, #396]	@ (80114e8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801135c:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	@ 0x2c
 8011360:	6828      	ldr	r0, [r5, #0]
 8011362:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 8011366:	fb11 2103 	smlabb	r1, r1, r3, r2
 801136a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801136e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8011372:	440a      	add	r2, r1
 8011374:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8011378:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 801137c:	4413      	add	r3, r2
 801137e:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8011382:	6803      	ldr	r3, [r0, #0]
 8011384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011386:	4798      	blx	r3
 8011388:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801138c:	d119      	bne.n	80113c2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801138e:	f010 0f20 	tst.w	r0, #32
 8011392:	6828      	ldr	r0, [r5, #0]
 8011394:	d018      	beq.n	80113c8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8011396:	2500      	movs	r5, #0
 8011398:	6801      	ldr	r1, [r0, #0]
 801139a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801139e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 80113a2:	e9cd 9503 	strd	r9, r5, [sp, #12]
 80113a6:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 80113aa:	9502      	str	r5, [sp, #8]
 80113ac:	b2b6      	uxth	r6, r6
 80113ae:	fa1f f588 	uxth.w	r5, r8
 80113b2:	9601      	str	r6, [sp, #4]
 80113b4:	9500      	str	r5, [sp, #0]
 80113b6:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 80113b8:	4621      	mov	r1, r4
 80113ba:	47a8      	blx	r5
 80113bc:	b00d      	add	sp, #52	@ 0x34
 80113be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113c2:	f010 0f40 	tst.w	r0, #64	@ 0x40
 80113c6:	e7e4      	b.n	8011392 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 80113c8:	6803      	ldr	r3, [r0, #0]
 80113ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113cc:	4798      	blx	r3
 80113ce:	4947      	ldr	r1, [pc, #284]	@ (80114ec <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 80113d0:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 80113d4:	880b      	ldrh	r3, [r1, #0]
 80113d6:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	@ 0x28
 80113da:	fb03 5202 	mla	r2, r3, r2, r5
 80113de:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80113e2:	4373      	muls	r3, r6
 80113e4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80113e8:	9307      	str	r3, [sp, #28]
 80113ea:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80113ee:	9306      	str	r3, [sp, #24]
 80113f0:	468a      	mov	sl, r1
 80113f2:	9b07      	ldr	r3, [sp, #28]
 80113f4:	4298      	cmp	r0, r3
 80113f6:	d270      	bcs.n	80114da <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 80113f8:	9b06      	ldr	r3, [sp, #24]
 80113fa:	4621      	mov	r1, r4
 80113fc:	eb00 0b03 	add.w	fp, r0, r3
 8011400:	4558      	cmp	r0, fp
 8011402:	d25d      	bcs.n	80114c0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8011404:	f851 4b04 	ldr.w	r4, [r1], #4
 8011408:	0e23      	lsrs	r3, r4, #24
 801140a:	d014      	beq.n	8011436 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801140c:	2bff      	cmp	r3, #255	@ 0xff
 801140e:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8011412:	d112      	bne.n	801143a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8011414:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8011418:	d10f      	bne.n	801143a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801141a:	0963      	lsrs	r3, r4, #5
 801141c:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8011420:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8011424:	f02c 0c07 	bic.w	ip, ip, #7
 8011428:	ea43 0c0c 	orr.w	ip, r3, ip
 801142c:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8011430:	ea4c 0404 	orr.w	r4, ip, r4
 8011434:	8004      	strh	r4, [r0, #0]
 8011436:	3002      	adds	r0, #2
 8011438:	e7e2      	b.n	8011400 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801143a:	fb09 f303 	mul.w	r3, r9, r3
 801143e:	8807      	ldrh	r7, [r0, #0]
 8011440:	1c5a      	adds	r2, r3, #1
 8011442:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8011446:	1212      	asrs	r2, r2, #8
 8011448:	123e      	asrs	r6, r7, #8
 801144a:	b293      	uxth	r3, r2
 801144c:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8011450:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8011454:	43d2      	mvns	r2, r2
 8011456:	b2d2      	uxtb	r2, r2
 8011458:	10fd      	asrs	r5, r7, #3
 801145a:	fb1e fe03 	smulbb	lr, lr, r3
 801145e:	00ff      	lsls	r7, r7, #3
 8011460:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8011464:	fb06 e602 	mla	r6, r6, r2, lr
 8011468:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801146c:	b2ff      	uxtb	r7, r7
 801146e:	fa5f fc8c 	uxtb.w	ip, ip
 8011472:	b2e4      	uxtb	r4, r4
 8011474:	b2b6      	uxth	r6, r6
 8011476:	fb1c fc03 	smulbb	ip, ip, r3
 801147a:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801147e:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8011482:	fb14 f403 	smulbb	r4, r4, r3
 8011486:	fb05 c502 	mla	r5, r5, r2, ip
 801148a:	f106 0e01 	add.w	lr, r6, #1
 801148e:	fb07 4702 	mla	r7, r7, r2, r4
 8011492:	b2ad      	uxth	r5, r5
 8011494:	b2bf      	uxth	r7, r7
 8011496:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801149a:	f406 4e78 	and.w	lr, r6, #63488	@ 0xf800
 801149e:	f105 0c01 	add.w	ip, r5, #1
 80114a2:	1c7e      	adds	r6, r7, #1
 80114a4:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 80114a8:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80114ac:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80114b0:	096d      	lsrs	r5, r5, #5
 80114b2:	ea46 060e 	orr.w	r6, r6, lr
 80114b6:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 80114ba:	432e      	orrs	r6, r5
 80114bc:	8006      	strh	r6, [r0, #0]
 80114be:	e7ba      	b.n	8011436 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 80114c0:	f8ba 3000 	ldrh.w	r3, [sl]
 80114c4:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	@ 0x24
 80114c8:	eba3 0308 	sub.w	r3, r3, r8
 80114cc:	eba4 0408 	sub.w	r4, r4, r8
 80114d0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80114d4:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 80114d8:	e78b      	b.n	80113f2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 80114da:	4b03      	ldr	r3, [pc, #12]	@ (80114e8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 80114dc:	6818      	ldr	r0, [r3, #0]
 80114de:	6803      	ldr	r3, [r0, #0]
 80114e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114e2:	4798      	blx	r3
 80114e4:	e76a      	b.n	80113bc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 80114e6:	bf00      	nop
 80114e8:	20012658 	.word	0x20012658
 80114ec:	20012652 	.word	0x20012652

080114f0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 80114f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80114f4:	460c      	mov	r4, r1
 80114f6:	b085      	sub	sp, #20
 80114f8:	6810      	ldr	r0, [r2, #0]
 80114fa:	6851      	ldr	r1, [r2, #4]
 80114fc:	466d      	mov	r5, sp
 80114fe:	c503      	stmia	r5!, {r0, r1}
 8011500:	6818      	ldr	r0, [r3, #0]
 8011502:	6859      	ldr	r1, [r3, #4]
 8011504:	4616      	mov	r6, r2
 8011506:	c503      	stmia	r5!, {r0, r1}
 8011508:	4668      	mov	r0, sp
 801150a:	f7fb fa13 	bl	800c934 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801150e:	4631      	mov	r1, r6
 8011510:	a802      	add	r0, sp, #8
 8011512:	f7fb fa37 	bl	800c984 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011516:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801151a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801151e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8011522:	4d28      	ldr	r5, [pc, #160]	@ (80115c4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8011524:	4e28      	ldr	r6, [pc, #160]	@ (80115c8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 8011526:	6828      	ldr	r0, [r5, #0]
 8011528:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801152c:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8011530:	fb11 2103 	smlabb	r1, r1, r3, r2
 8011534:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8011538:	f8bd 1000 	ldrh.w	r1, [sp]
 801153c:	440a      	add	r2, r1
 801153e:	f8ad 2008 	strh.w	r2, [sp, #8]
 8011542:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011546:	4413      	add	r3, r2
 8011548:	f8ad 300a 	strh.w	r3, [sp, #10]
 801154c:	6803      	ldr	r3, [r0, #0]
 801154e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011550:	4798      	blx	r3
 8011552:	8833      	ldrh	r3, [r6, #0]
 8011554:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8011558:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801155c:	f8df e06c 	ldr.w	lr, [pc, #108]	@ 80115cc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8011560:	fb03 1202 	mla	r2, r3, r2, r1
 8011564:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8011568:	fb08 f303 	mul.w	r3, r8, r3
 801156c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8011570:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8011574:	4298      	cmp	r0, r3
 8011576:	d21d      	bcs.n	80115b4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8011578:	eb00 080c 	add.w	r8, r0, ip
 801157c:	4540      	cmp	r0, r8
 801157e:	d20f      	bcs.n	80115a0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 8011580:	f854 1b04 	ldr.w	r1, [r4], #4
 8011584:	ea4f 1951 	mov.w	r9, r1, lsr #5
 8011588:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801158c:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8011590:	ea42 0209 	orr.w	r2, r2, r9
 8011594:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8011598:	430a      	orrs	r2, r1
 801159a:	f820 2b02 	strh.w	r2, [r0], #2
 801159e:	e7ed      	b.n	801157c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 80115a0:	8832      	ldrh	r2, [r6, #0]
 80115a2:	1bd2      	subs	r2, r2, r7
 80115a4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80115a8:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80115ac:	1bd2      	subs	r2, r2, r7
 80115ae:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80115b2:	e7df      	b.n	8011574 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 80115b4:	6828      	ldr	r0, [r5, #0]
 80115b6:	6803      	ldr	r3, [r0, #0]
 80115b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115ba:	4798      	blx	r3
 80115bc:	b005      	add	sp, #20
 80115be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80115c2:	bf00      	nop
 80115c4:	20012658 	.word	0x20012658
 80115c8:	20012652 	.word	0x20012652
 80115cc:	fffff800 	.word	0xfffff800

080115d0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 80115d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115d4:	460e      	mov	r6, r1
 80115d6:	b08e      	sub	sp, #56	@ 0x38
 80115d8:	4604      	mov	r4, r0
 80115da:	6808      	ldr	r0, [r1, #0]
 80115dc:	6849      	ldr	r1, [r1, #4]
 80115de:	f8df 81d8 	ldr.w	r8, [pc, #472]	@ 80117b8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 80115e2:	f8df 91d8 	ldr.w	r9, [pc, #472]	@ 80117bc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 80115e6:	461d      	mov	r5, r3
 80115e8:	ab0a      	add	r3, sp, #40	@ 0x28
 80115ea:	c303      	stmia	r3!, {r0, r1}
 80115ec:	6810      	ldr	r0, [r2, #0]
 80115ee:	6851      	ldr	r1, [r2, #4]
 80115f0:	ab0c      	add	r3, sp, #48	@ 0x30
 80115f2:	c303      	stmia	r3!, {r0, r1}
 80115f4:	a80a      	add	r0, sp, #40	@ 0x28
 80115f6:	f7fb f99d 	bl	800c934 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80115fa:	4631      	mov	r1, r6
 80115fc:	a80c      	add	r0, sp, #48	@ 0x30
 80115fe:	f7fb f9c1 	bl	800c984 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011602:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8011606:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801160a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801160e:	f8d8 0000 	ldr.w	r0, [r8]
 8011612:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 8011616:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801161a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801161e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8011622:	440c      	add	r4, r1
 8011624:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8011628:	440a      	add	r2, r1
 801162a:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801162e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8011632:	4413      	add	r3, r2
 8011634:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8011638:	6803      	ldr	r3, [r0, #0]
 801163a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801163c:	4798      	blx	r3
 801163e:	2dff      	cmp	r5, #255	@ 0xff
 8011640:	d124      	bne.n	801168c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 8011642:	f010 0f01 	tst.w	r0, #1
 8011646:	f8d8 0000 	ldr.w	r0, [r8]
 801164a:	d022      	beq.n	8011692 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801164c:	2100      	movs	r1, #0
 801164e:	f8d0 c000 	ldr.w	ip, [r0]
 8011652:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8011656:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801165a:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801165e:	f04f 0e01 	mov.w	lr, #1
 8011662:	f8cd e018 	str.w	lr, [sp, #24]
 8011666:	f8b9 e000 	ldrh.w	lr, [r9]
 801166a:	9503      	str	r5, [sp, #12]
 801166c:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8011670:	b2b6      	uxth	r6, r6
 8011672:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8011676:	9102      	str	r1, [sp, #8]
 8011678:	b2bf      	uxth	r7, r7
 801167a:	9601      	str	r6, [sp, #4]
 801167c:	9700      	str	r7, [sp, #0]
 801167e:	f8dc 5040 	ldr.w	r5, [ip, #64]	@ 0x40
 8011682:	4621      	mov	r1, r4
 8011684:	47a8      	blx	r5
 8011686:	b00e      	add	sp, #56	@ 0x38
 8011688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801168c:	f010 0f04 	tst.w	r0, #4
 8011690:	e7d9      	b.n	8011646 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 8011692:	6803      	ldr	r3, [r0, #0]
 8011694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011696:	4798      	blx	r3
 8011698:	f8b9 3000 	ldrh.w	r3, [r9]
 801169c:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 80116a0:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 80116a4:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 80116a8:	fb03 1202 	mla	r2, r3, r2, r1
 80116ac:	ebac 0c07 	sub.w	ip, ip, r7
 80116b0:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80116b4:	435e      	muls	r6, r3
 80116b6:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 80116ba:	2dff      	cmp	r5, #255	@ 0xff
 80116bc:	eba3 0707 	sub.w	r7, r3, r7
 80116c0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80116c4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80116c8:	ea4f 0747 	mov.w	r7, r7, lsl #1
 80116cc:	d049      	beq.n	8011762 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 80116ce:	43eb      	mvns	r3, r5
 80116d0:	fa1f f985 	uxth.w	r9, r5
 80116d4:	b2db      	uxtb	r3, r3
 80116d6:	42b0      	cmp	r0, r6
 80116d8:	d266      	bcs.n	80117a8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 80116da:	eb00 0a0e 	add.w	sl, r0, lr
 80116de:	4550      	cmp	r0, sl
 80116e0:	4621      	mov	r1, r4
 80116e2:	f104 0403 	add.w	r4, r4, #3
 80116e6:	d25b      	bcs.n	80117a0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 80116e8:	8802      	ldrh	r2, [r0, #0]
 80116ea:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80116ee:	ea4f 2822 	mov.w	r8, r2, asr #8
 80116f2:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 80116f6:	fb11 f109 	smulbb	r1, r1, r9
 80116fa:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 80116fe:	10d5      	asrs	r5, r2, #3
 8011700:	fb08 1803 	mla	r8, r8, r3, r1
 8011704:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8011708:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801170c:	fb11 f109 	smulbb	r1, r1, r9
 8011710:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8011714:	fb05 1503 	mla	r5, r5, r3, r1
 8011718:	00d2      	lsls	r2, r2, #3
 801171a:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801171e:	b2d2      	uxtb	r2, r2
 8011720:	fb11 f109 	smulbb	r1, r1, r9
 8011724:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8011728:	fa1f f888 	uxth.w	r8, r8
 801172c:	fb02 1203 	mla	r2, r2, r3, r1
 8011730:	b292      	uxth	r2, r2
 8011732:	f108 0101 	add.w	r1, r8, #1
 8011736:	b2ad      	uxth	r5, r5
 8011738:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801173c:	1c51      	adds	r1, r2, #1
 801173e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8011742:	1c69      	adds	r1, r5, #1
 8011744:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8011748:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 801174c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8011750:	096d      	lsrs	r5, r5, #5
 8011752:	ea42 0208 	orr.w	r2, r2, r8
 8011756:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801175a:	432a      	orrs	r2, r5
 801175c:	f820 2b02 	strh.w	r2, [r0], #2
 8011760:	e7bd      	b.n	80116de <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 8011762:	4a14      	ldr	r2, [pc, #80]	@ (80117b4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8011764:	42b0      	cmp	r0, r6
 8011766:	d21f      	bcs.n	80117a8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8011768:	eb00 050e 	add.w	r5, r0, lr
 801176c:	42a8      	cmp	r0, r5
 801176e:	4621      	mov	r1, r4
 8011770:	f104 0403 	add.w	r4, r4, #3
 8011774:	d210      	bcs.n	8011798 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 8011776:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801177a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801177e:	00db      	lsls	r3, r3, #3
 8011780:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8011784:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8011788:	430b      	orrs	r3, r1
 801178a:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801178e:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 8011792:	f820 3b02 	strh.w	r3, [r0], #2
 8011796:	e7e9      	b.n	801176c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 8011798:	4438      	add	r0, r7
 801179a:	eb01 040c 	add.w	r4, r1, ip
 801179e:	e7e1      	b.n	8011764 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 80117a0:	4438      	add	r0, r7
 80117a2:	eb01 040c 	add.w	r4, r1, ip
 80117a6:	e796      	b.n	80116d6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 80117a8:	4b03      	ldr	r3, [pc, #12]	@ (80117b8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 80117aa:	6818      	ldr	r0, [r3, #0]
 80117ac:	6803      	ldr	r3, [r0, #0]
 80117ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117b0:	4798      	blx	r3
 80117b2:	e768      	b.n	8011686 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 80117b4:	fffff800 	.word	0xfffff800
 80117b8:	20012658 	.word	0x20012658
 80117bc:	20012652 	.word	0x20012652

080117c0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80117c0:	b4f0      	push	{r4, r5, r6, r7}
 80117c2:	4616      	mov	r6, r2
 80117c4:	2e01      	cmp	r6, #1
 80117c6:	461c      	mov	r4, r3
 80117c8:	460d      	mov	r5, r1
 80117ca:	9a04      	ldr	r2, [sp, #16]
 80117cc:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80117d0:	f89d 7018 	ldrb.w	r7, [sp, #24]
 80117d4:	d012      	beq.n	80117fc <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 80117d6:	d303      	bcc.n	80117e0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 80117d8:	2e02      	cmp	r6, #2
 80117da:	d00a      	beq.n	80117f2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 80117dc:	bcf0      	pop	{r4, r5, r6, r7}
 80117de:	4770      	bx	lr
 80117e0:	6805      	ldr	r5, [r0, #0]
 80117e2:	e9cd 3704 	strd	r3, r7, [sp, #16]
 80117e6:	68ed      	ldr	r5, [r5, #12]
 80117e8:	4613      	mov	r3, r2
 80117ea:	46ac      	mov	ip, r5
 80117ec:	4622      	mov	r2, r4
 80117ee:	bcf0      	pop	{r4, r5, r6, r7}
 80117f0:	4760      	bx	ip
 80117f2:	4621      	mov	r1, r4
 80117f4:	4628      	mov	r0, r5
 80117f6:	bcf0      	pop	{r4, r5, r6, r7}
 80117f8:	f7ff bd94 	b.w	8011324 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80117fc:	4621      	mov	r1, r4
 80117fe:	4628      	mov	r0, r5
 8011800:	bcf0      	pop	{r4, r5, r6, r7}
 8011802:	f7ff bee5 	b.w	80115d0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

08011808 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8011808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801180c:	4681      	mov	r9, r0
 801180e:	b093      	sub	sp, #76	@ 0x4c
 8011810:	6810      	ldr	r0, [r2, #0]
 8011812:	f89d a070 	ldrb.w	sl, [sp, #112]	@ 0x70
 8011816:	4f6d      	ldr	r7, [pc, #436]	@ (80119cc <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8011818:	4688      	mov	r8, r1
 801181a:	6851      	ldr	r1, [r2, #4]
 801181c:	ac0e      	add	r4, sp, #56	@ 0x38
 801181e:	c403      	stmia	r4!, {r0, r1}
 8011820:	6818      	ldr	r0, [r3, #0]
 8011822:	6859      	ldr	r1, [r3, #4]
 8011824:	ac10      	add	r4, sp, #64	@ 0x40
 8011826:	4616      	mov	r6, r2
 8011828:	c403      	stmia	r4!, {r0, r1}
 801182a:	a80e      	add	r0, sp, #56	@ 0x38
 801182c:	f7fb f882 	bl	800c934 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011830:	4631      	mov	r1, r6
 8011832:	a810      	add	r0, sp, #64	@ 0x40
 8011834:	f7fb f8a6 	bl	800c984 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011838:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 801183c:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8011840:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 8011844:	4e62      	ldr	r6, [pc, #392]	@ (80119d0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8011846:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 801184a:	6830      	ldr	r0, [r6, #0]
 801184c:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 8011850:	fb11 2103 	smlabb	r1, r1, r3, r2
 8011854:	4489      	add	r9, r1
 8011856:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 801185a:	440a      	add	r2, r1
 801185c:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8011860:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8011864:	4413      	add	r3, r2
 8011866:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 801186a:	6803      	ldr	r3, [r0, #0]
 801186c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801186e:	4798      	blx	r3
 8011870:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8011874:	6830      	ldr	r0, [r6, #0]
 8011876:	d01d      	beq.n	80118b4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8011878:	2200      	movs	r2, #0
 801187a:	6801      	ldr	r1, [r0, #0]
 801187c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8011880:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8011884:	220b      	movs	r2, #11
 8011886:	9207      	str	r2, [sp, #28]
 8011888:	883a      	ldrh	r2, [r7, #0]
 801188a:	9206      	str	r2, [sp, #24]
 801188c:	2201      	movs	r2, #1
 801188e:	e9cd a204 	strd	sl, r2, [sp, #16]
 8011892:	f8bd 203c 	ldrh.w	r2, [sp, #60]	@ 0x3c
 8011896:	9203      	str	r2, [sp, #12]
 8011898:	b2a4      	uxth	r4, r4
 801189a:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 801189e:	9200      	str	r2, [sp, #0]
 80118a0:	b2ad      	uxth	r5, r5
 80118a2:	9502      	str	r5, [sp, #8]
 80118a4:	9401      	str	r4, [sp, #4]
 80118a6:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 80118a8:	4642      	mov	r2, r8
 80118aa:	4649      	mov	r1, r9
 80118ac:	47a0      	blx	r4
 80118ae:	b013      	add	sp, #76	@ 0x4c
 80118b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118b4:	6803      	ldr	r3, [r0, #0]
 80118b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80118b8:	4798      	blx	r3
 80118ba:	883b      	ldrh	r3, [r7, #0]
 80118bc:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 80118c0:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 80118c4:	fb03 1202 	mla	r2, r3, r2, r1
 80118c8:	435d      	muls	r5, r3
 80118ca:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80118ce:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 80118d2:	920c      	str	r2, [sp, #48]	@ 0x30
 80118d4:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 80118d8:	1b12      	subs	r2, r2, r4
 80118da:	920d      	str	r2, [sp, #52]	@ 0x34
 80118dc:	0062      	lsls	r2, r4, #1
 80118de:	1b1c      	subs	r4, r3, r4
 80118e0:	0063      	lsls	r3, r4, #1
 80118e2:	920a      	str	r2, [sp, #40]	@ 0x28
 80118e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80118e6:	f04f 0e04 	mov.w	lr, #4
 80118ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80118ec:	4298      	cmp	r0, r3
 80118ee:	d266      	bcs.n	80119be <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 80118f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80118f2:	eb00 0b03 	add.w	fp, r0, r3
 80118f6:	4558      	cmp	r0, fp
 80118f8:	d25c      	bcs.n	80119b4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 80118fa:	f819 3b01 	ldrb.w	r3, [r9], #1
 80118fe:	fb1e e303 	smlabb	r3, lr, r3, lr
 8011902:	f858 2003 	ldr.w	r2, [r8, r3]
 8011906:	0e11      	lsrs	r1, r2, #24
 8011908:	d012      	beq.n	8011930 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801190a:	29ff      	cmp	r1, #255	@ 0xff
 801190c:	ea4f 2712 	mov.w	r7, r2, lsr #8
 8011910:	d110      	bne.n	8011934 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8011912:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8011916:	d10d      	bne.n	8011934 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8011918:	0953      	lsrs	r3, r2, #5
 801191a:	f427 67ff 	bic.w	r7, r7, #2040	@ 0x7f8
 801191e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8011922:	f027 0707 	bic.w	r7, r7, #7
 8011926:	431f      	orrs	r7, r3
 8011928:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801192c:	433a      	orrs	r2, r7
 801192e:	8002      	strh	r2, [r0, #0]
 8011930:	3002      	adds	r0, #2
 8011932:	e7e0      	b.n	80118f6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 8011934:	fb0a f101 	mul.w	r1, sl, r1
 8011938:	8806      	ldrh	r6, [r0, #0]
 801193a:	1c4b      	adds	r3, r1, #1
 801193c:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8011940:	1235      	asrs	r5, r6, #8
 8011942:	10f4      	asrs	r4, r6, #3
 8011944:	121b      	asrs	r3, r3, #8
 8011946:	00f6      	lsls	r6, r6, #3
 8011948:	b299      	uxth	r1, r3
 801194a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801194e:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8011952:	b2f6      	uxtb	r6, r6
 8011954:	43db      	mvns	r3, r3
 8011956:	b2d2      	uxtb	r2, r2
 8011958:	b2db      	uxtb	r3, r3
 801195a:	fb1c fc01 	smulbb	ip, ip, r1
 801195e:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8011962:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8011966:	fb12 f201 	smulbb	r2, r2, r1
 801196a:	fb05 c503 	mla	r5, r5, r3, ip
 801196e:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8011972:	b2ff      	uxtb	r7, r7
 8011974:	fb06 2203 	mla	r2, r6, r3, r2
 8011978:	b2ad      	uxth	r5, r5
 801197a:	fb17 f701 	smulbb	r7, r7, r1
 801197e:	b292      	uxth	r2, r2
 8011980:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8011984:	fb04 7403 	mla	r4, r4, r3, r7
 8011988:	f105 0c01 	add.w	ip, r5, #1
 801198c:	1c57      	adds	r7, r2, #1
 801198e:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8011992:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8011996:	b2a4      	uxth	r4, r4
 8011998:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801199c:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 80119a0:	433d      	orrs	r5, r7
 80119a2:	1c67      	adds	r7, r4, #1
 80119a4:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 80119a8:	0964      	lsrs	r4, r4, #5
 80119aa:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 80119ae:	4325      	orrs	r5, r4
 80119b0:	8005      	strh	r5, [r0, #0]
 80119b2:	e7bd      	b.n	8011930 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80119b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80119b6:	4418      	add	r0, r3
 80119b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80119ba:	4499      	add	r9, r3
 80119bc:	e795      	b.n	80118ea <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 80119be:	4b04      	ldr	r3, [pc, #16]	@ (80119d0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 80119c0:	6818      	ldr	r0, [r3, #0]
 80119c2:	6803      	ldr	r3, [r0, #0]
 80119c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119c6:	4798      	blx	r3
 80119c8:	e771      	b.n	80118ae <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 80119ca:	bf00      	nop
 80119cc:	20012652 	.word	0x20012652
 80119d0:	20012658 	.word	0x20012658

080119d4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 80119d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119d8:	b087      	sub	sp, #28
 80119da:	4680      	mov	r8, r0
 80119dc:	f89d 6040 	ldrb.w	r6, [sp, #64]	@ 0x40
 80119e0:	460d      	mov	r5, r1
 80119e2:	4614      	mov	r4, r2
 80119e4:	2e00      	cmp	r6, #0
 80119e6:	f000 80b9 	beq.w	8011b5c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 80119ea:	6810      	ldr	r0, [r2, #0]
 80119ec:	6851      	ldr	r1, [r2, #4]
 80119ee:	af02      	add	r7, sp, #8
 80119f0:	c703      	stmia	r7!, {r0, r1}
 80119f2:	6818      	ldr	r0, [r3, #0]
 80119f4:	6859      	ldr	r1, [r3, #4]
 80119f6:	af04      	add	r7, sp, #16
 80119f8:	c703      	stmia	r7!, {r0, r1}
 80119fa:	a802      	add	r0, sp, #8
 80119fc:	f7fa ff9a 	bl	800c934 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011a00:	4621      	mov	r1, r4
 8011a02:	a804      	add	r0, sp, #16
 8011a04:	f7fa ffbe 	bl	800c984 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011a08:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8011a0c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8011a10:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8011a14:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8011a18:	fb14 2103 	smlabb	r1, r4, r3, r2
 8011a1c:	eb08 0401 	add.w	r4, r8, r1
 8011a20:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8011a24:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8011a28:	440a      	add	r2, r1
 8011a2a:	f8ad 2010 	strh.w	r2, [sp, #16]
 8011a2e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8011a32:	4413      	add	r3, r2
 8011a34:	f8ad 3012 	strh.w	r3, [sp, #18]
 8011a38:	4b4a      	ldr	r3, [pc, #296]	@ (8011b64 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8011a3a:	6818      	ldr	r0, [r3, #0]
 8011a3c:	6803      	ldr	r3, [r0, #0]
 8011a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a40:	4798      	blx	r3
 8011a42:	4b49      	ldr	r3, [pc, #292]	@ (8011b68 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 8011a44:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8011a48:	881a      	ldrh	r2, [r3, #0]
 8011a4a:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8011a4e:	2eff      	cmp	r6, #255	@ 0xff
 8011a50:	fb02 c101 	mla	r1, r2, r1, ip
 8011a54:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8011a58:	fb02 f207 	mul.w	r2, r2, r7
 8011a5c:	f105 0104 	add.w	r1, r5, #4
 8011a60:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 8011a64:	461d      	mov	r5, r3
 8011a66:	d05a      	beq.n	8011b1e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 8011a68:	f1c6 0eff 	rsb	lr, r6, #255	@ 0xff
 8011a6c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8011a70:	b2b6      	uxth	r6, r6
 8011a72:	fa1f fe8e 	uxth.w	lr, lr
 8011a76:	9301      	str	r3, [sp, #4]
 8011a78:	4282      	cmp	r2, r0
 8011a7a:	d96a      	bls.n	8011b52 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8011a7c:	eb00 0b0a 	add.w	fp, r0, sl
 8011a80:	4583      	cmp	fp, r0
 8011a82:	d940      	bls.n	8011b06 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 8011a84:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011a88:	8805      	ldrh	r5, [r0, #0]
 8011a8a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011a8e:	122f      	asrs	r7, r5, #8
 8011a90:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8011a94:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8011a98:	fb17 f70e 	smulbb	r7, r7, lr
 8011a9c:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8011aa0:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8011aa4:	00ed      	lsls	r5, r5, #3
 8011aa6:	fb0c 7c06 	mla	ip, ip, r6, r7
 8011aaa:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 8011aae:	10df      	asrs	r7, r3, #3
 8011ab0:	b2ed      	uxtb	r5, r5
 8011ab2:	00db      	lsls	r3, r3, #3
 8011ab4:	fa1f fc8c 	uxth.w	ip, ip
 8011ab8:	fb19 f90e 	smulbb	r9, r9, lr
 8011abc:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8011ac0:	b2db      	uxtb	r3, r3
 8011ac2:	fb15 f50e 	smulbb	r5, r5, lr
 8011ac6:	fb07 9706 	mla	r7, r7, r6, r9
 8011aca:	fb03 5306 	mla	r3, r3, r6, r5
 8011ace:	f10c 0901 	add.w	r9, ip, #1
 8011ad2:	b29b      	uxth	r3, r3
 8011ad4:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8011ad8:	f40c 4978 	and.w	r9, ip, #63488	@ 0xf800
 8011adc:	f103 0c01 	add.w	ip, r3, #1
 8011ae0:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8011ae4:	b2bf      	uxth	r7, r7
 8011ae6:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8011aea:	ea4c 0c09 	orr.w	ip, ip, r9
 8011aee:	f107 0901 	add.w	r9, r7, #1
 8011af2:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8011af6:	097f      	lsrs	r7, r7, #5
 8011af8:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8011afc:	ea4c 0c07 	orr.w	ip, ip, r7
 8011b00:	f820 cb02 	strh.w	ip, [r0], #2
 8011b04:	e7bc      	b.n	8011a80 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 8011b06:	9b01      	ldr	r3, [sp, #4]
 8011b08:	881b      	ldrh	r3, [r3, #0]
 8011b0a:	eba3 0308 	sub.w	r3, r3, r8
 8011b0e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011b12:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8011b16:	eba3 0308 	sub.w	r3, r3, r8
 8011b1a:	441c      	add	r4, r3
 8011b1c:	e7ac      	b.n	8011a78 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 8011b1e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8011b22:	4282      	cmp	r2, r0
 8011b24:	d915      	bls.n	8011b52 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8011b26:	eb00 060a 	add.w	r6, r0, sl
 8011b2a:	4286      	cmp	r6, r0
 8011b2c:	d906      	bls.n	8011b3c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 8011b2e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011b32:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011b36:	f820 3b02 	strh.w	r3, [r0], #2
 8011b3a:	e7f6      	b.n	8011b2a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 8011b3c:	882b      	ldrh	r3, [r5, #0]
 8011b3e:	eba3 0308 	sub.w	r3, r3, r8
 8011b42:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011b46:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8011b4a:	eba3 0308 	sub.w	r3, r3, r8
 8011b4e:	441c      	add	r4, r3
 8011b50:	e7e7      	b.n	8011b22 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 8011b52:	4b04      	ldr	r3, [pc, #16]	@ (8011b64 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8011b54:	6818      	ldr	r0, [r3, #0]
 8011b56:	6803      	ldr	r3, [r0, #0]
 8011b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b5a:	4798      	blx	r3
 8011b5c:	b007      	add	sp, #28
 8011b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b62:	bf00      	nop
 8011b64:	20012658 	.word	0x20012658
 8011b68:	20012652 	.word	0x20012652

08011b6c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8011b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b70:	b091      	sub	sp, #68	@ 0x44
 8011b72:	4680      	mov	r8, r0
 8011b74:	f89d 5068 	ldrb.w	r5, [sp, #104]	@ 0x68
 8011b78:	460f      	mov	r7, r1
 8011b7a:	4614      	mov	r4, r2
 8011b7c:	2d00      	cmp	r5, #0
 8011b7e:	d051      	beq.n	8011c24 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8011b80:	6810      	ldr	r0, [r2, #0]
 8011b82:	6851      	ldr	r1, [r2, #4]
 8011b84:	f8df 9200 	ldr.w	r9, [pc, #512]	@ 8011d88 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 8011b88:	ae0c      	add	r6, sp, #48	@ 0x30
 8011b8a:	c603      	stmia	r6!, {r0, r1}
 8011b8c:	6818      	ldr	r0, [r3, #0]
 8011b8e:	6859      	ldr	r1, [r3, #4]
 8011b90:	ae0e      	add	r6, sp, #56	@ 0x38
 8011b92:	c603      	stmia	r6!, {r0, r1}
 8011b94:	a80c      	add	r0, sp, #48	@ 0x30
 8011b96:	f7fa fecd 	bl	800c934 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011b9a:	4621      	mov	r1, r4
 8011b9c:	a80e      	add	r0, sp, #56	@ 0x38
 8011b9e:	f7fa fef1 	bl	800c984 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011ba2:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8011ba6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8011baa:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8011bae:	f8d9 0000 	ldr.w	r0, [r9]
 8011bb2:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 8011bb6:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	@ 0x3e
 8011bba:	fb11 2103 	smlabb	r1, r1, r3, r2
 8011bbe:	eb08 0401 	add.w	r4, r8, r1
 8011bc2:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8011bc6:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 8011d8c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 8011bca:	440a      	add	r2, r1
 8011bcc:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8011bd0:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8011bd4:	4413      	add	r3, r2
 8011bd6:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8011bda:	6803      	ldr	r3, [r0, #0]
 8011bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011bde:	4798      	blx	r3
 8011be0:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8011be4:	f8d9 0000 	ldr.w	r0, [r9]
 8011be8:	d01f      	beq.n	8011c2a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 8011bea:	2200      	movs	r2, #0
 8011bec:	6801      	ldr	r1, [r0, #0]
 8011bee:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8011bf2:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8011bf6:	220b      	movs	r2, #11
 8011bf8:	9207      	str	r2, [sp, #28]
 8011bfa:	f8b8 2000 	ldrh.w	r2, [r8]
 8011bfe:	9206      	str	r2, [sp, #24]
 8011c00:	2201      	movs	r2, #1
 8011c02:	e9cd 5204 	strd	r5, r2, [sp, #16]
 8011c06:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 8011c0a:	9203      	str	r2, [sp, #12]
 8011c0c:	fa1f f28a 	uxth.w	r2, sl
 8011c10:	9202      	str	r2, [sp, #8]
 8011c12:	b2b6      	uxth	r6, r6
 8011c14:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8011c18:	9200      	str	r2, [sp, #0]
 8011c1a:	9601      	str	r6, [sp, #4]
 8011c1c:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 8011c1e:	463a      	mov	r2, r7
 8011c20:	4621      	mov	r1, r4
 8011c22:	47a8      	blx	r5
 8011c24:	b011      	add	sp, #68	@ 0x44
 8011c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c2a:	6803      	ldr	r3, [r0, #0]
 8011c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011c2e:	4798      	blx	r3
 8011c30:	f8b8 2000 	ldrh.w	r2, [r8]
 8011c34:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8011c38:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 8011c3c:	2dff      	cmp	r5, #255	@ 0xff
 8011c3e:	fb02 1303 	mla	r3, r2, r3, r1
 8011c42:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011c46:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8011c4a:	fb0a fa02 	mul.w	sl, sl, r2
 8011c4e:	d062      	beq.n	8011d16 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8011c50:	ea6f 0c05 	mvn.w	ip, r5
 8011c54:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 8011c58:	930a      	str	r3, [sp, #40]	@ 0x28
 8011c5a:	b2ad      	uxth	r5, r5
 8011c5c:	fa5f fc8c 	uxtb.w	ip, ip
 8011c60:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 8011c64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011c66:	4298      	cmp	r0, r3
 8011c68:	f080 8085 	bcs.w	8011d76 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8011c6c:	eb00 0b09 	add.w	fp, r0, r9
 8011c70:	4558      	cmp	r0, fp
 8011c72:	d246      	bcs.n	8011d02 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 8011c74:	f814 eb01 	ldrb.w	lr, [r4], #1
 8011c78:	2303      	movs	r3, #3
 8011c7a:	2204      	movs	r2, #4
 8011c7c:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8011c80:	eb07 0a0e 	add.w	sl, r7, lr
 8011c84:	8803      	ldrh	r3, [r0, #0]
 8011c86:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8011c8a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8011c8e:	1219      	asrs	r1, r3, #8
 8011c90:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8011c94:	fb18 f805 	smulbb	r8, r8, r5
 8011c98:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8011c9c:	10da      	asrs	r2, r3, #3
 8011c9e:	fb01 810c 	mla	r1, r1, ip, r8
 8011ca2:	00db      	lsls	r3, r3, #3
 8011ca4:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8011ca8:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8011cac:	b2db      	uxtb	r3, r3
 8011cae:	fb18 f805 	smulbb	r8, r8, r5
 8011cb2:	fb1e fe05 	smulbb	lr, lr, r5
 8011cb6:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8011cba:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8011cbe:	b289      	uxth	r1, r1
 8011cc0:	fb02 820c 	mla	r2, r2, ip, r8
 8011cc4:	fb03 e30c 	mla	r3, r3, ip, lr
 8011cc8:	b292      	uxth	r2, r2
 8011cca:	b29b      	uxth	r3, r3
 8011ccc:	f101 0801 	add.w	r8, r1, #1
 8011cd0:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8011cd4:	f103 0e01 	add.w	lr, r3, #1
 8011cd8:	f102 0801 	add.w	r8, r2, #1
 8011cdc:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8011ce0:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 8011ce4:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8011ce8:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8011cec:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8011cf0:	ea4e 0101 	orr.w	r1, lr, r1
 8011cf4:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8011cf8:	ea41 0108 	orr.w	r1, r1, r8
 8011cfc:	f820 1b02 	strh.w	r1, [r0], #2
 8011d00:	e7b6      	b.n	8011c70 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 8011d02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011d04:	881b      	ldrh	r3, [r3, #0]
 8011d06:	1b9b      	subs	r3, r3, r6
 8011d08:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011d0c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8011d10:	1b9b      	subs	r3, r3, r6
 8011d12:	441c      	add	r4, r3
 8011d14:	e7a6      	b.n	8011c64 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 8011d16:	491b      	ldr	r1, [pc, #108]	@ (8011d84 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 8011d18:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8011d1c:	2203      	movs	r2, #3
 8011d1e:	2504      	movs	r5, #4
 8011d20:	4550      	cmp	r0, sl
 8011d22:	d228      	bcs.n	8011d76 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8011d24:	eb00 0c09 	add.w	ip, r0, r9
 8011d28:	4560      	cmp	r0, ip
 8011d2a:	4623      	mov	r3, r4
 8011d2c:	d219      	bcs.n	8011d62 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 8011d2e:	f893 e000 	ldrb.w	lr, [r3]
 8011d32:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 8011d36:	eb07 0b0e 	add.w	fp, r7, lr
 8011d3a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8011d3e:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8011d42:	f89b b001 	ldrb.w	fp, [fp, #1]
 8011d46:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8011d4a:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8011d4e:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 8011d52:	ea43 030b 	orr.w	r3, r3, fp
 8011d56:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8011d5a:	3401      	adds	r4, #1
 8011d5c:	f820 3b02 	strh.w	r3, [r0], #2
 8011d60:	e7e2      	b.n	8011d28 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 8011d62:	f8b8 3000 	ldrh.w	r3, [r8]
 8011d66:	1b9b      	subs	r3, r3, r6
 8011d68:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011d6c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8011d70:	1b9b      	subs	r3, r3, r6
 8011d72:	441c      	add	r4, r3
 8011d74:	e7d4      	b.n	8011d20 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8011d76:	4b04      	ldr	r3, [pc, #16]	@ (8011d88 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 8011d78:	6818      	ldr	r0, [r3, #0]
 8011d7a:	6803      	ldr	r3, [r0, #0]
 8011d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d7e:	4798      	blx	r3
 8011d80:	e750      	b.n	8011c24 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8011d82:	bf00      	nop
 8011d84:	fffff800 	.word	0xfffff800
 8011d88:	20012658 	.word	0x20012658
 8011d8c:	20012652 	.word	0x20012652

08011d90 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8011d90:	b4f0      	push	{r4, r5, r6, r7}
 8011d92:	460c      	mov	r4, r1
 8011d94:	4611      	mov	r1, r2
 8011d96:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8011d9a:	780f      	ldrb	r7, [r1, #0]
 8011d9c:	784e      	ldrb	r6, [r1, #1]
 8011d9e:	2f01      	cmp	r7, #1
 8011da0:	461a      	mov	r2, r3
 8011da2:	9b04      	ldr	r3, [sp, #16]
 8011da4:	d038      	beq.n	8011e18 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x88>
 8011da6:	d31f      	bcc.n	8011de8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x58>
 8011da8:	2f02      	cmp	r7, #2
 8011daa:	d14d      	bne.n	8011e48 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8011dac:	2e03      	cmp	r6, #3
 8011dae:	d84b      	bhi.n	8011e48 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8011db0:	e8df f006 	tbb	[pc, r6]
 8011db4:	17140702 	.word	0x17140702
 8011db8:	9504      	str	r5, [sp, #16]
 8011dba:	4620      	mov	r0, r4
 8011dbc:	bcf0      	pop	{r4, r5, r6, r7}
 8011dbe:	f7ff be09 	b.w	80119d4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8011dc2:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8011dc4:	2800      	cmp	r0, #0
 8011dc6:	d03f      	beq.n	8011e48 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8011dc8:	6806      	ldr	r6, [r0, #0]
 8011dca:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8011dce:	68b5      	ldr	r5, [r6, #8]
 8011dd0:	4613      	mov	r3, r2
 8011dd2:	46ac      	mov	ip, r5
 8011dd4:	460a      	mov	r2, r1
 8011dd6:	4621      	mov	r1, r4
 8011dd8:	bcf0      	pop	{r4, r5, r6, r7}
 8011dda:	4760      	bx	ip
 8011ddc:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8011de0:	e7f0      	b.n	8011dc4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8011de2:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8011de6:	e7ed      	b.n	8011dc4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8011de8:	2e03      	cmp	r6, #3
 8011dea:	d82d      	bhi.n	8011e48 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8011dec:	e8df f006 	tbb	[pc, r6]
 8011df0:	110e0702 	.word	0x110e0702
 8011df4:	9504      	str	r5, [sp, #16]
 8011df6:	4620      	mov	r0, r4
 8011df8:	bcf0      	pop	{r4, r5, r6, r7}
 8011dfa:	f7ff bd05 	b.w	8011808 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8011dfe:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8011e00:	b310      	cbz	r0, 8011e48 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8011e02:	6806      	ldr	r6, [r0, #0]
 8011e04:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8011e08:	68f5      	ldr	r5, [r6, #12]
 8011e0a:	e7e1      	b.n	8011dd0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8011e0c:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8011e10:	e7f6      	b.n	8011e00 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 8011e12:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8011e16:	e7f3      	b.n	8011e00 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 8011e18:	2e03      	cmp	r6, #3
 8011e1a:	d815      	bhi.n	8011e48 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8011e1c:	e8df f006 	tbb	[pc, r6]
 8011e20:	110e0702 	.word	0x110e0702
 8011e24:	9504      	str	r5, [sp, #16]
 8011e26:	4620      	mov	r0, r4
 8011e28:	bcf0      	pop	{r4, r5, r6, r7}
 8011e2a:	f7ff be9f 	b.w	8011b6c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8011e2e:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8011e30:	b150      	cbz	r0, 8011e48 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8011e32:	6806      	ldr	r6, [r0, #0]
 8011e34:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8011e38:	6935      	ldr	r5, [r6, #16]
 8011e3a:	e7c9      	b.n	8011dd0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8011e3c:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8011e40:	e7f6      	b.n	8011e30 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 8011e42:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8011e46:	e7f3      	b.n	8011e30 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 8011e48:	bcf0      	pop	{r4, r5, r6, r7}
 8011e4a:	4770      	bx	lr

08011e4c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8011e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e50:	4604      	mov	r4, r0
 8011e52:	b087      	sub	sp, #28
 8011e54:	6810      	ldr	r0, [r2, #0]
 8011e56:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
 8011e5a:	f8df 9238 	ldr.w	r9, [pc, #568]	@ 8012094 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 8011e5e:	460e      	mov	r6, r1
 8011e60:	6851      	ldr	r1, [r2, #4]
 8011e62:	ad02      	add	r5, sp, #8
 8011e64:	c503      	stmia	r5!, {r0, r1}
 8011e66:	6818      	ldr	r0, [r3, #0]
 8011e68:	6859      	ldr	r1, [r3, #4]
 8011e6a:	ad04      	add	r5, sp, #16
 8011e6c:	4617      	mov	r7, r2
 8011e6e:	c503      	stmia	r5!, {r0, r1}
 8011e70:	a802      	add	r0, sp, #8
 8011e72:	f7fa fd5f 	bl	800c934 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011e76:	4639      	mov	r1, r7
 8011e78:	a804      	add	r0, sp, #16
 8011e7a:	f7fa fd83 	bl	800c984 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011e7e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8011e82:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8011e86:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8011e8a:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8011e8e:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8011e92:	fb11 2103 	smlabb	r1, r1, r3, r2
 8011e96:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8011e9a:	440e      	add	r6, r1
 8011e9c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8011ea0:	440a      	add	r2, r1
 8011ea2:	f8ad 2010 	strh.w	r2, [sp, #16]
 8011ea6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8011eaa:	4413      	add	r3, r2
 8011eac:	f8ad 3012 	strh.w	r3, [sp, #18]
 8011eb0:	4b77      	ldr	r3, [pc, #476]	@ (8012090 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8011eb2:	6818      	ldr	r0, [r3, #0]
 8011eb4:	6803      	ldr	r3, [r0, #0]
 8011eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011eb8:	4798      	blx	r3
 8011eba:	f8b9 b000 	ldrh.w	fp, [r9]
 8011ebe:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8011ec2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8011ec6:	fb0b 2303 	mla	r3, fp, r3, r2
 8011eca:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011ece:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8011ed2:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8011ed6:	fb05 f50b 	mul.w	r5, r5, fp
 8011eda:	9300      	str	r3, [sp, #0]
 8011edc:	d069      	beq.n	8011fb2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 8011ede:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8011ee2:	4558      	cmp	r0, fp
 8011ee4:	f080 80cc 	bcs.w	8012080 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8011ee8:	9b00      	ldr	r3, [sp, #0]
 8011eea:	18c3      	adds	r3, r0, r3
 8011eec:	9301      	str	r3, [sp, #4]
 8011eee:	4631      	mov	r1, r6
 8011ef0:	9b01      	ldr	r3, [sp, #4]
 8011ef2:	4298      	cmp	r0, r3
 8011ef4:	d24f      	bcs.n	8011f96 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 8011ef6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011efa:	2a00      	cmp	r2, #0
 8011efc:	d048      	beq.n	8011f90 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8011efe:	fb0a f202 	mul.w	r2, sl, r2
 8011f02:	1c53      	adds	r3, r2, #1
 8011f04:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8011f08:	121b      	asrs	r3, r3, #8
 8011f0a:	d041      	beq.n	8011f90 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8011f0c:	8802      	ldrh	r2, [r0, #0]
 8011f0e:	f8b4 c000 	ldrh.w	ip, [r4]
 8011f12:	b29e      	uxth	r6, r3
 8011f14:	1215      	asrs	r5, r2, #8
 8011f16:	43db      	mvns	r3, r3
 8011f18:	b2db      	uxtb	r3, r3
 8011f1a:	ea4f 272c 	mov.w	r7, ip, asr #8
 8011f1e:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8011f22:	fb15 f503 	smulbb	r5, r5, r3
 8011f26:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8011f2a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8011f2e:	00d2      	lsls	r2, r2, #3
 8011f30:	fb07 5706 	mla	r7, r7, r6, r5
 8011f34:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8011f38:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8011f3c:	b2d2      	uxtb	r2, r2
 8011f3e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8011f42:	b2bf      	uxth	r7, r7
 8011f44:	fb1e fe03 	smulbb	lr, lr, r3
 8011f48:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8011f4c:	fa5f fc8c 	uxtb.w	ip, ip
 8011f50:	fb12 f203 	smulbb	r2, r2, r3
 8011f54:	fb05 e506 	mla	r5, r5, r6, lr
 8011f58:	fb0c 2c06 	mla	ip, ip, r6, r2
 8011f5c:	f107 0e01 	add.w	lr, r7, #1
 8011f60:	fa1f fc8c 	uxth.w	ip, ip
 8011f64:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8011f68:	f407 4e78 	and.w	lr, r7, #63488	@ 0xf800
 8011f6c:	f10c 0701 	add.w	r7, ip, #1
 8011f70:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8011f74:	b2ad      	uxth	r5, r5
 8011f76:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8011f7a:	ea47 070e 	orr.w	r7, r7, lr
 8011f7e:	f105 0e01 	add.w	lr, r5, #1
 8011f82:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8011f86:	096d      	lsrs	r5, r5, #5
 8011f88:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8011f8c:	432f      	orrs	r7, r5
 8011f8e:	8007      	strh	r7, [r0, #0]
 8011f90:	3002      	adds	r0, #2
 8011f92:	3402      	adds	r4, #2
 8011f94:	e7ac      	b.n	8011ef0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8011f96:	f8b9 3000 	ldrh.w	r3, [r9]
 8011f9a:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8011f9e:	eba3 0308 	sub.w	r3, r3, r8
 8011fa2:	eba6 0608 	sub.w	r6, r6, r8
 8011fa6:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8011faa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011fae:	440e      	add	r6, r1
 8011fb0:	e797      	b.n	8011ee2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8011fb2:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8011fb6:	42a8      	cmp	r0, r5
 8011fb8:	d262      	bcs.n	8012080 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8011fba:	9b00      	ldr	r3, [sp, #0]
 8011fbc:	4631      	mov	r1, r6
 8011fbe:	eb00 0b03 	add.w	fp, r0, r3
 8011fc2:	4558      	cmp	r0, fp
 8011fc4:	d24e      	bcs.n	8012064 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8011fc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011fca:	b12b      	cbz	r3, 8011fd8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8011fcc:	2bff      	cmp	r3, #255	@ 0xff
 8011fce:	f8b4 e000 	ldrh.w	lr, [r4]
 8011fd2:	d104      	bne.n	8011fde <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8011fd4:	f8a0 e000 	strh.w	lr, [r0]
 8011fd8:	3002      	adds	r0, #2
 8011fda:	3402      	adds	r4, #2
 8011fdc:	e7f1      	b.n	8011fc2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8011fde:	8802      	ldrh	r2, [r0, #0]
 8011fe0:	b29f      	uxth	r7, r3
 8011fe2:	1216      	asrs	r6, r2, #8
 8011fe4:	43db      	mvns	r3, r3
 8011fe6:	b2db      	uxtb	r3, r3
 8011fe8:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8011fec:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8011ff0:	fb16 f603 	smulbb	r6, r6, r3
 8011ff4:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8011ff8:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8011ffc:	00d2      	lsls	r2, r2, #3
 8011ffe:	fb0c 6c07 	mla	ip, ip, r7, r6
 8012002:	b2d2      	uxtb	r2, r2
 8012004:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8012008:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 801200c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8012010:	fb1a fa03 	smulbb	sl, sl, r3
 8012014:	fa1f fc8c 	uxth.w	ip, ip
 8012018:	fb12 f303 	smulbb	r3, r2, r3
 801201c:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8012020:	fa5f fe8e 	uxtb.w	lr, lr
 8012024:	fb06 a607 	mla	r6, r6, r7, sl
 8012028:	f10c 0201 	add.w	r2, ip, #1
 801202c:	fb0e 3307 	mla	r3, lr, r7, r3
 8012030:	b2b6      	uxth	r6, r6
 8012032:	b29b      	uxth	r3, r3
 8012034:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8012038:	f40c 4278 	and.w	r2, ip, #63488	@ 0xf800
 801203c:	f106 0a01 	add.w	sl, r6, #1
 8012040:	f103 0c01 	add.w	ip, r3, #1
 8012044:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8012048:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801204c:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8012050:	0976      	lsrs	r6, r6, #5
 8012052:	ea4c 0c02 	orr.w	ip, ip, r2
 8012056:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801205a:	ea4c 0c06 	orr.w	ip, ip, r6
 801205e:	f8a0 c000 	strh.w	ip, [r0]
 8012062:	e7b9      	b.n	8011fd8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8012064:	f8b9 3000 	ldrh.w	r3, [r9]
 8012068:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801206c:	eba3 0308 	sub.w	r3, r3, r8
 8012070:	eba6 0608 	sub.w	r6, r6, r8
 8012074:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8012078:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801207c:	440e      	add	r6, r1
 801207e:	e79a      	b.n	8011fb6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8012080:	4b03      	ldr	r3, [pc, #12]	@ (8012090 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8012082:	6818      	ldr	r0, [r3, #0]
 8012084:	6803      	ldr	r3, [r0, #0]
 8012086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012088:	4798      	blx	r3
 801208a:	b007      	add	sp, #28
 801208c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012090:	20012658 	.word	0x20012658
 8012094:	20012652 	.word	0x20012652

08012098 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8012098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801209c:	b089      	sub	sp, #36	@ 0x24
 801209e:	4607      	mov	r7, r0
 80120a0:	f89d 604c 	ldrb.w	r6, [sp, #76]	@ 0x4c
 80120a4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80120a6:	4688      	mov	r8, r1
 80120a8:	4692      	mov	sl, r2
 80120aa:	4699      	mov	r9, r3
 80120ac:	2e00      	cmp	r6, #0
 80120ae:	d048      	beq.n	8012142 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 80120b0:	4608      	mov	r0, r1
 80120b2:	f7fe fac3 	bl	801063c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80120b6:	4605      	mov	r5, r0
 80120b8:	4640      	mov	r0, r8
 80120ba:	f7fe faf3 	bl	80106a4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80120be:	f8ad 000e 	strh.w	r0, [sp, #14]
 80120c2:	4640      	mov	r0, r8
 80120c4:	f8ad a008 	strh.w	sl, [sp, #8]
 80120c8:	f8ad 500c 	strh.w	r5, [sp, #12]
 80120cc:	f8ad 900a 	strh.w	r9, [sp, #10]
 80120d0:	f7fe fba6 	bl	8010820 <_ZNK8touchgfx6Bitmap7getDataEv>
 80120d4:	4605      	mov	r5, r0
 80120d6:	4640      	mov	r0, r8
 80120d8:	f7fe fbd2 	bl	8010880 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80120dc:	4682      	mov	sl, r0
 80120de:	4640      	mov	r0, r8
 80120e0:	f7fe fc22 	bl	8010928 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80120e4:	2810      	cmp	r0, #16
 80120e6:	d82c      	bhi.n	8012142 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 80120e8:	e8df f010 	tbh	[pc, r0, lsl #1]
 80120ec:	00ba00ca 	.word	0x00ba00ca
 80120f0:	002b0011 	.word	0x002b0011
 80120f4:	002b002b 	.word	0x002b002b
 80120f8:	002b002b 	.word	0x002b002b
 80120fc:	002b002b 	.word	0x002b002b
 8012100:	00c1002b 	.word	0x00c1002b
 8012104:	002b002b 	.word	0x002b002b
 8012108:	002b0180 	.word	0x002b0180
 801210c:	0173      	.short	0x0173
 801210e:	4bbc      	ldr	r3, [pc, #752]	@ (8012400 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x368>)
 8012110:	6818      	ldr	r0, [r3, #0]
 8012112:	6803      	ldr	r3, [r0, #0]
 8012114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012116:	4798      	blx	r3
 8012118:	2eff      	cmp	r6, #255	@ 0xff
 801211a:	d101      	bne.n	8012120 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 801211c:	0683      	lsls	r3, r0, #26
 801211e:	d506      	bpl.n	801212e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x96>
 8012120:	4633      	mov	r3, r6
 8012122:	4622      	mov	r2, r4
 8012124:	a902      	add	r1, sp, #8
 8012126:	4628      	mov	r0, r5
 8012128:	f7ff f8fc 	bl	8011324 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801212c:	e009      	b.n	8012142 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801212e:	4640      	mov	r0, r8
 8012130:	f7fe fb3e 	bl	80107b0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8012134:	b940      	cbnz	r0, 8012148 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb0>
 8012136:	4623      	mov	r3, r4
 8012138:	aa02      	add	r2, sp, #8
 801213a:	4629      	mov	r1, r5
 801213c:	4638      	mov	r0, r7
 801213e:	f7ff f9d7 	bl	80114f0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8012142:	b009      	add	sp, #36	@ 0x24
 8012144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012148:	f10d 0918 	add.w	r9, sp, #24
 801214c:	4641      	mov	r1, r8
 801214e:	4648      	mov	r0, r9
 8012150:	f7fe fadc 	bl	801070c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8012154:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012158:	f10d 0810 	add.w	r8, sp, #16
 801215c:	e888 0003 	stmia.w	r8, {r0, r1}
 8012160:	4640      	mov	r0, r8
 8012162:	4621      	mov	r1, r4
 8012164:	f7f6 ff0a 	bl	8008f7c <_ZN8touchgfx4RectaNERKS0_>
 8012168:	4640      	mov	r0, r8
 801216a:	f7f6 ff4a 	bl	8009002 <_ZNK8touchgfx4Rect7isEmptyEv>
 801216e:	2800      	cmp	r0, #0
 8012170:	d1d6      	bne.n	8012120 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8012172:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8012176:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801217a:	4293      	cmp	r3, r2
 801217c:	dd12      	ble.n	80121a4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x10c>
 801217e:	1a9b      	subs	r3, r3, r2
 8012180:	f9b4 0000 	ldrsh.w	r0, [r4]
 8012184:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8012188:	f8ad 0018 	strh.w	r0, [sp, #24]
 801218c:	f8ad 201a 	strh.w	r2, [sp, #26]
 8012190:	f8ad 101c 	strh.w	r1, [sp, #28]
 8012194:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012198:	464a      	mov	r2, r9
 801219a:	4633      	mov	r3, r6
 801219c:	a902      	add	r1, sp, #8
 801219e:	4628      	mov	r0, r5
 80121a0:	f7ff f8c0 	bl	8011324 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80121a4:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80121a8:	f9b4 2000 	ldrsh.w	r2, [r4]
 80121ac:	4293      	cmp	r3, r2
 80121ae:	dd12      	ble.n	80121d6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x13e>
 80121b0:	1a9b      	subs	r3, r3, r2
 80121b2:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 80121b6:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 80121ba:	f8ad 2018 	strh.w	r2, [sp, #24]
 80121be:	f8ad 001a 	strh.w	r0, [sp, #26]
 80121c2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80121c6:	f8ad 101e 	strh.w	r1, [sp, #30]
 80121ca:	23ff      	movs	r3, #255	@ 0xff
 80121cc:	464a      	mov	r2, r9
 80121ce:	a902      	add	r1, sp, #8
 80121d0:	4628      	mov	r0, r5
 80121d2:	f7ff f8a7 	bl	8011324 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80121d6:	4643      	mov	r3, r8
 80121d8:	aa02      	add	r2, sp, #8
 80121da:	4629      	mov	r1, r5
 80121dc:	4638      	mov	r0, r7
 80121de:	f7ff f987 	bl	80114f0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 80121e2:	88a2      	ldrh	r2, [r4, #4]
 80121e4:	8823      	ldrh	r3, [r4, #0]
 80121e6:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80121ea:	4413      	add	r3, r2
 80121ec:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80121f0:	440a      	add	r2, r1
 80121f2:	b29b      	uxth	r3, r3
 80121f4:	b292      	uxth	r2, r2
 80121f6:	b211      	sxth	r1, r2
 80121f8:	b218      	sxth	r0, r3
 80121fa:	4288      	cmp	r0, r1
 80121fc:	dd12      	ble.n	8012224 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x18c>
 80121fe:	1a9b      	subs	r3, r3, r2
 8012200:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8012204:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8012208:	f8ad 1018 	strh.w	r1, [sp, #24]
 801220c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012210:	f8ad 001e 	strh.w	r0, [sp, #30]
 8012214:	23ff      	movs	r3, #255	@ 0xff
 8012216:	464a      	mov	r2, r9
 8012218:	a902      	add	r1, sp, #8
 801221a:	4628      	mov	r0, r5
 801221c:	f8ad 601a 	strh.w	r6, [sp, #26]
 8012220:	f7ff f880 	bl	8011324 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8012224:	88e2      	ldrh	r2, [r4, #6]
 8012226:	8863      	ldrh	r3, [r4, #2]
 8012228:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801222c:	4413      	add	r3, r2
 801222e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8012232:	440a      	add	r2, r1
 8012234:	b29b      	uxth	r3, r3
 8012236:	b292      	uxth	r2, r2
 8012238:	b211      	sxth	r1, r2
 801223a:	b218      	sxth	r0, r3
 801223c:	4288      	cmp	r0, r1
 801223e:	dd80      	ble.n	8012142 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8012240:	1a9b      	subs	r3, r3, r2
 8012242:	f9b4 6000 	ldrsh.w	r6, [r4]
 8012246:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801224a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801224e:	f8ad 6018 	strh.w	r6, [sp, #24]
 8012252:	f8ad 101a 	strh.w	r1, [sp, #26]
 8012256:	f8ad 001c 	strh.w	r0, [sp, #28]
 801225a:	23ff      	movs	r3, #255	@ 0xff
 801225c:	464a      	mov	r2, r9
 801225e:	e761      	b.n	8012124 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 8012260:	4633      	mov	r3, r6
 8012262:	4622      	mov	r2, r4
 8012264:	a902      	add	r1, sp, #8
 8012266:	4628      	mov	r0, r5
 8012268:	f7ff f9b2 	bl	80115d0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801226c:	e769      	b.n	8012142 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801226e:	e9cd 4600 	strd	r4, r6, [sp]
 8012272:	ab02      	add	r3, sp, #8
 8012274:	4652      	mov	r2, sl
 8012276:	4629      	mov	r1, r5
 8012278:	4638      	mov	r0, r7
 801227a:	f7ff fd89 	bl	8011d90 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801227e:	e760      	b.n	8012142 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8012280:	4640      	mov	r0, r8
 8012282:	f7fe fa95 	bl	80107b0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8012286:	b948      	cbnz	r0, 801229c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x204>
 8012288:	683b      	ldr	r3, [r7, #0]
 801228a:	e9cd 6000 	strd	r6, r0, [sp]
 801228e:	aa02      	add	r2, sp, #8
 8012290:	68de      	ldr	r6, [r3, #12]
 8012292:	4629      	mov	r1, r5
 8012294:	4623      	mov	r3, r4
 8012296:	4638      	mov	r0, r7
 8012298:	47b0      	blx	r6
 801229a:	e752      	b.n	8012142 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801229c:	f10d 0918 	add.w	r9, sp, #24
 80122a0:	4641      	mov	r1, r8
 80122a2:	4648      	mov	r0, r9
 80122a4:	f7fe fa32 	bl	801070c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80122a8:	e899 0003 	ldmia.w	r9, {r0, r1}
 80122ac:	f10d 0810 	add.w	r8, sp, #16
 80122b0:	e888 0003 	stmia.w	r8, {r0, r1}
 80122b4:	4640      	mov	r0, r8
 80122b6:	4621      	mov	r1, r4
 80122b8:	f7f6 fe60 	bl	8008f7c <_ZN8touchgfx4RectaNERKS0_>
 80122bc:	4640      	mov	r0, r8
 80122be:	f7f6 fea0 	bl	8009002 <_ZNK8touchgfx4Rect7isEmptyEv>
 80122c2:	b138      	cbz	r0, 80122d4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x23c>
 80122c4:	9600      	str	r6, [sp, #0]
 80122c6:	4623      	mov	r3, r4
 80122c8:	aa02      	add	r2, sp, #8
 80122ca:	4651      	mov	r1, sl
 80122cc:	4628      	mov	r0, r5
 80122ce:	f7ff fdbd 	bl	8011e4c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80122d2:	e736      	b.n	8012142 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 80122d4:	683b      	ldr	r3, [r7, #0]
 80122d6:	e9cd 6000 	strd	r6, r0, [sp]
 80122da:	aa02      	add	r2, sp, #8
 80122dc:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 80122e0:	4629      	mov	r1, r5
 80122e2:	4643      	mov	r3, r8
 80122e4:	4638      	mov	r0, r7
 80122e6:	47d8      	blx	fp
 80122e8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80122ec:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80122f0:	4293      	cmp	r3, r2
 80122f2:	dd13      	ble.n	801231c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x284>
 80122f4:	f9b4 0000 	ldrsh.w	r0, [r4]
 80122f8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80122fc:	f8ad 0018 	strh.w	r0, [sp, #24]
 8012300:	1a9b      	subs	r3, r3, r2
 8012302:	f8ad 201a 	strh.w	r2, [sp, #26]
 8012306:	f8ad 101c 	strh.w	r1, [sp, #28]
 801230a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801230e:	9600      	str	r6, [sp, #0]
 8012310:	464b      	mov	r3, r9
 8012312:	aa02      	add	r2, sp, #8
 8012314:	4651      	mov	r1, sl
 8012316:	4628      	mov	r0, r5
 8012318:	f7ff fd98 	bl	8011e4c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801231c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8012320:	f9b4 2000 	ldrsh.w	r2, [r4]
 8012324:	4293      	cmp	r3, r2
 8012326:	dd13      	ble.n	8012350 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2b8>
 8012328:	1a9b      	subs	r3, r3, r2
 801232a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801232e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8012332:	f8ad 2018 	strh.w	r2, [sp, #24]
 8012336:	f8ad 001a 	strh.w	r0, [sp, #26]
 801233a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801233e:	f8ad 101e 	strh.w	r1, [sp, #30]
 8012342:	9600      	str	r6, [sp, #0]
 8012344:	464b      	mov	r3, r9
 8012346:	aa02      	add	r2, sp, #8
 8012348:	4651      	mov	r1, sl
 801234a:	4628      	mov	r0, r5
 801234c:	f7ff fd7e 	bl	8011e4c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8012350:	88a2      	ldrh	r2, [r4, #4]
 8012352:	8823      	ldrh	r3, [r4, #0]
 8012354:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8012358:	4413      	add	r3, r2
 801235a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801235e:	440a      	add	r2, r1
 8012360:	b29b      	uxth	r3, r3
 8012362:	b292      	uxth	r2, r2
 8012364:	b211      	sxth	r1, r2
 8012366:	b218      	sxth	r0, r3
 8012368:	4288      	cmp	r0, r1
 801236a:	dd13      	ble.n	8012394 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2fc>
 801236c:	1a9b      	subs	r3, r3, r2
 801236e:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8012372:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8012376:	f8ad 1018 	strh.w	r1, [sp, #24]
 801237a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801237e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8012382:	9600      	str	r6, [sp, #0]
 8012384:	464b      	mov	r3, r9
 8012386:	aa02      	add	r2, sp, #8
 8012388:	4651      	mov	r1, sl
 801238a:	4628      	mov	r0, r5
 801238c:	f8ad 701a 	strh.w	r7, [sp, #26]
 8012390:	f7ff fd5c 	bl	8011e4c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8012394:	88e2      	ldrh	r2, [r4, #6]
 8012396:	8863      	ldrh	r3, [r4, #2]
 8012398:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801239c:	4413      	add	r3, r2
 801239e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 80123a2:	440a      	add	r2, r1
 80123a4:	b29b      	uxth	r3, r3
 80123a6:	b292      	uxth	r2, r2
 80123a8:	b211      	sxth	r1, r2
 80123aa:	b218      	sxth	r0, r3
 80123ac:	4288      	cmp	r0, r1
 80123ae:	f77f aec8 	ble.w	8012142 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 80123b2:	f9b4 7000 	ldrsh.w	r7, [r4]
 80123b6:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80123ba:	f8ad 7018 	strh.w	r7, [sp, #24]
 80123be:	1a9b      	subs	r3, r3, r2
 80123c0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80123c4:	f8ad 101a 	strh.w	r1, [sp, #26]
 80123c8:	f8ad 001c 	strh.w	r0, [sp, #28]
 80123cc:	9600      	str	r6, [sp, #0]
 80123ce:	464b      	mov	r3, r9
 80123d0:	e77a      	b.n	80122c8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 80123d2:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80123d6:	2800      	cmp	r0, #0
 80123d8:	f43f aeb3 	beq.w	8012142 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 80123dc:	6803      	ldr	r3, [r0, #0]
 80123de:	9600      	str	r6, [sp, #0]
 80123e0:	68de      	ldr	r6, [r3, #12]
 80123e2:	4623      	mov	r3, r4
 80123e4:	aa02      	add	r2, sp, #8
 80123e6:	4629      	mov	r1, r5
 80123e8:	47b0      	blx	r6
 80123ea:	e6aa      	b.n	8012142 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 80123ec:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80123f0:	2800      	cmp	r0, #0
 80123f2:	f43f aea6 	beq.w	8012142 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 80123f6:	6803      	ldr	r3, [r0, #0]
 80123f8:	9600      	str	r6, [sp, #0]
 80123fa:	689e      	ldr	r6, [r3, #8]
 80123fc:	e7f1      	b.n	80123e2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x34a>
 80123fe:	bf00      	nop
 8012400:	20012658 	.word	0x20012658

08012404 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8012404:	b180      	cbz	r0, 8012428 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 8012406:	2903      	cmp	r1, #3
 8012408:	d81c      	bhi.n	8012444 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801240a:	e8df f001 	tbb	[pc, r1]
 801240e:	1d02      	.short	0x1d02
 8012410:	1f08      	.short	0x1f08
 8012412:	4b10      	ldr	r3, [pc, #64]	@ (8012454 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8012414:	8818      	ldrh	r0, [r3, #0]
 8012416:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801241a:	4240      	negs	r0, r0
 801241c:	4770      	bx	lr
 801241e:	4b0d      	ldr	r3, [pc, #52]	@ (8012454 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8012420:	8818      	ldrh	r0, [r3, #0]
 8012422:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8012426:	4770      	bx	lr
 8012428:	2903      	cmp	r1, #3
 801242a:	d80b      	bhi.n	8012444 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801242c:	a301      	add	r3, pc, #4	@ (adr r3, 8012434 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 801242e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8012432:	bf00      	nop
 8012434:	08012449 	.word	0x08012449
 8012438:	0801241f 	.word	0x0801241f
 801243c:	0801244d 	.word	0x0801244d
 8012440:	08012413 	.word	0x08012413
 8012444:	2000      	movs	r0, #0
 8012446:	4770      	bx	lr
 8012448:	2001      	movs	r0, #1
 801244a:	4770      	bx	lr
 801244c:	f04f 30ff 	mov.w	r0, #4294967295
 8012450:	4770      	bx	lr
 8012452:	bf00      	nop
 8012454:	20012652 	.word	0x20012652

08012458 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8012458:	b180      	cbz	r0, 801247c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 801245a:	2903      	cmp	r1, #3
 801245c:	d81c      	bhi.n	8012498 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801245e:	e8df f001 	tbb	[pc, r1]
 8012462:	021d      	.short	0x021d
 8012464:	071f      	.short	0x071f
 8012466:	4b10      	ldr	r3, [pc, #64]	@ (80124a8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8012468:	8818      	ldrh	r0, [r3, #0]
 801246a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801246e:	4770      	bx	lr
 8012470:	4b0d      	ldr	r3, [pc, #52]	@ (80124a8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8012472:	8818      	ldrh	r0, [r3, #0]
 8012474:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8012478:	4240      	negs	r0, r0
 801247a:	4770      	bx	lr
 801247c:	2903      	cmp	r1, #3
 801247e:	d80b      	bhi.n	8012498 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8012480:	a301      	add	r3, pc, #4	@ (adr r3, 8012488 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 8012482:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8012486:	bf00      	nop
 8012488:	08012467 	.word	0x08012467
 801248c:	080124a1 	.word	0x080124a1
 8012490:	08012471 	.word	0x08012471
 8012494:	0801249d 	.word	0x0801249d
 8012498:	2000      	movs	r0, #0
 801249a:	4770      	bx	lr
 801249c:	2001      	movs	r0, #1
 801249e:	4770      	bx	lr
 80124a0:	f04f 30ff 	mov.w	r0, #4294967295
 80124a4:	4770      	bx	lr
 80124a6:	bf00      	nop
 80124a8:	20012652 	.word	0x20012652

080124ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80124ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124b0:	b099      	sub	sp, #100	@ 0x64
 80124b2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80124b4:	a914      	add	r1, sp, #80	@ 0x50
 80124b6:	e881 000c 	stmia.w	r1, {r2, r3}
 80124ba:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	@ 0x98
 80124be:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 80124c2:	f891 900d 	ldrb.w	r9, [r1, #13]
 80124c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80124c8:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 80124cc:	9310      	str	r3, [sp, #64]	@ 0x40
 80124ce:	ea4f 1749 	mov.w	r7, r9, lsl #5
 80124d2:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 80124d6:	930c      	str	r3, [sp, #48]	@ 0x30
 80124d8:	f407 7380 	and.w	r3, r7, #256	@ 0x100
 80124dc:	798f      	ldrb	r7, [r1, #6]
 80124de:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	@ 0x88
 80124e2:	f8bd 5090 	ldrh.w	r5, [sp, #144]	@ 0x90
 80124e6:	f8bd 6094 	ldrh.w	r6, [sp, #148]	@ 0x94
 80124ea:	f89d 80ac 	ldrb.w	r8, [sp, #172]	@ 0xac
 80124ee:	f89d a0b4 	ldrb.w	sl, [sp, #180]	@ 0xb4
 80124f2:	431f      	orrs	r7, r3
 80124f4:	f000 8195 	beq.w	8012822 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80124f8:	ea4f 1909 	mov.w	r9, r9, lsl #4
 80124fc:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 8012500:	f891 9007 	ldrb.w	r9, [r1, #7]
 8012504:	ea59 0903 	orrs.w	r9, r9, r3
 8012508:	f000 818b 	beq.w	8012822 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801250c:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8012510:	b29b      	uxth	r3, r3
 8012512:	2d00      	cmp	r5, #0
 8012514:	f000 812e 	beq.w	8012774 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 8012518:	1aed      	subs	r5, r5, r3
 801251a:	b2ad      	uxth	r5, r5
 801251c:	042b      	lsls	r3, r5, #16
 801251e:	d502      	bpl.n	8012526 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8012520:	1b64      	subs	r4, r4, r5
 8012522:	b224      	sxth	r4, r4
 8012524:	2500      	movs	r5, #0
 8012526:	f9b2 1000 	ldrsh.w	r1, [r2]
 801252a:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 801252e:	428c      	cmp	r4, r1
 8012530:	b28b      	uxth	r3, r1
 8012532:	bfbf      	itttt	lt
 8012534:	18ed      	addlt	r5, r5, r3
 8012536:	1b2c      	sublt	r4, r5, r4
 8012538:	b2a5      	uxthlt	r5, r4
 801253a:	460c      	movlt	r4, r1
 801253c:	8891      	ldrh	r1, [r2, #4]
 801253e:	440b      	add	r3, r1
 8012540:	b21b      	sxth	r3, r3
 8012542:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012544:	88d3      	ldrh	r3, [r2, #6]
 8012546:	8852      	ldrh	r2, [r2, #2]
 8012548:	4413      	add	r3, r2
 801254a:	b21b      	sxth	r3, r3
 801254c:	930d      	str	r3, [sp, #52]	@ 0x34
 801254e:	4bbe      	ldr	r3, [pc, #760]	@ (8012848 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 8012550:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012552:	f893 b000 	ldrb.w	fp, [r3]
 8012556:	f10b 3cff 	add.w	ip, fp, #4294967295
 801255a:	f1dc 0300 	rsbs	r3, ip, #0
 801255e:	eb43 030c 	adc.w	r3, r3, ip
 8012562:	930e      	str	r3, [sp, #56]	@ 0x38
 8012564:	4621      	mov	r1, r4
 8012566:	4653      	mov	r3, sl
 8012568:	a814      	add	r0, sp, #80	@ 0x50
 801256a:	f7fa f858 	bl	800c61e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801256e:	4621      	mov	r1, r4
 8012570:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 8012574:	4653      	mov	r3, sl
 8012576:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012578:	a814      	add	r0, sp, #80	@ 0x50
 801257a:	f7fa f86d 	bl	800c658 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801257e:	a918      	add	r1, sp, #96	@ 0x60
 8012580:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8012584:	a817      	add	r0, sp, #92	@ 0x5c
 8012586:	f7fa f993 	bl	800c8b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801258a:	f1ba 0f00 	cmp.w	sl, #0
 801258e:	f040 80f4 	bne.w	801277a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8012592:	f1bb 0f01 	cmp.w	fp, #1
 8012596:	f040 80f8 	bne.w	801278a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 801259a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801259c:	2b00      	cmp	r3, #0
 801259e:	f040 8145 	bne.w	801282c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 80125a2:	b2ba      	uxth	r2, r7
 80125a4:	b905      	cbnz	r5, 80125a8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 80125a6:	b16e      	cbz	r6, 80125c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 80125a8:	fb06 5302 	mla	r3, r6, r2, r5
 80125ac:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 80125ae:	fb08 f303 	mul.w	r3, r8, r3
 80125b2:	4631      	mov	r1, r6
 80125b4:	f003 0607 	and.w	r6, r3, #7
 80125b8:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 80125bc:	9328      	str	r3, [sp, #160]	@ 0xa0
 80125be:	eba9 0301 	sub.w	r3, r9, r1
 80125c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80125c4:	4651      	mov	r1, sl
 80125c6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80125c8:	f7ff ff1c 	bl	8012404 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 80125cc:	4681      	mov	r9, r0
 80125ce:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80125d0:	f7ff ff42 	bl	8012458 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 80125d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80125d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80125d8:	eba3 0a01 	sub.w	sl, r3, r1
 80125dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80125de:	459a      	cmp	sl, r3
 80125e0:	bfa8      	it	ge
 80125e2:	469a      	movge	sl, r3
 80125e4:	f1ba 0f00 	cmp.w	sl, #0
 80125e8:	4683      	mov	fp, r0
 80125ea:	f340 811a 	ble.w	8012822 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80125ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80125f0:	1b64      	subs	r4, r4, r5
 80125f2:	1b1c      	subs	r4, r3, r4
 80125f4:	42bc      	cmp	r4, r7
 80125f6:	bfd4      	ite	le
 80125f8:	ebc5 0504 	rsble	r5, r5, r4
 80125fc:	ebc5 0507 	rsbgt	r5, r5, r7
 8012600:	2d00      	cmp	r5, #0
 8012602:	f340 810e 	ble.w	8012822 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8012606:	1b52      	subs	r2, r2, r5
 8012608:	fb08 f302 	mul.w	r3, r8, r2
 801260c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801260e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012610:	2b00      	cmp	r3, #0
 8012612:	f040 8116 	bne.w	8012842 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 8012616:	4b8d      	ldr	r3, [pc, #564]	@ (801284c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 8012618:	6818      	ldr	r0, [r3, #0]
 801261a:	6803      	ldr	r3, [r0, #0]
 801261c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801261e:	4798      	blx	r3
 8012620:	2301      	movs	r3, #1
 8012622:	fa03 f308 	lsl.w	r3, r3, r8
 8012626:	4a8a      	ldr	r2, [pc, #552]	@ (8012850 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 8012628:	3b01      	subs	r3, #1
 801262a:	b2db      	uxtb	r3, r3
 801262c:	8811      	ldrh	r1, [r2, #0]
 801262e:	930e      	str	r3, [sp, #56]	@ 0x38
 8012630:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	@ 0x5c
 8012634:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	@ 0x5e
 8012638:	fb01 2303 	mla	r3, r1, r3, r2
 801263c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8012640:	930a      	str	r3, [sp, #40]	@ 0x28
 8012642:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8012644:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8012648:	9313      	str	r3, [sp, #76]	@ 0x4c
 801264a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801264c:	0a19      	lsrs	r1, r3, #8
 801264e:	b2cb      	uxtb	r3, r1
 8012650:	9312      	str	r3, [sp, #72]	@ 0x48
 8012652:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8012654:	b2db      	uxtb	r3, r3
 8012656:	9311      	str	r3, [sp, #68]	@ 0x44
 8012658:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801265a:	095a      	lsrs	r2, r3, #5
 801265c:	4b7d      	ldr	r3, [pc, #500]	@ (8012854 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801265e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8012662:	400b      	ands	r3, r1
 8012664:	4313      	orrs	r3, r2
 8012666:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8012668:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801266c:	4313      	orrs	r3, r2
 801266e:	b29b      	uxth	r3, r3
 8012670:	9310      	str	r3, [sp, #64]	@ 0x40
 8012672:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8012674:	781a      	ldrb	r2, [r3, #0]
 8012676:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801267a:	4132      	asrs	r2, r6
 801267c:	fb05 b919 	mls	r9, r5, r9, fp
 8012680:	fb03 fb05 	mul.w	fp, r3, r5
 8012684:	b2d2      	uxtb	r2, r2
 8012686:	930d      	str	r3, [sp, #52]	@ 0x34
 8012688:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801268c:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8012690:	f0c0 80f5 	bcc.w	801287e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 8012694:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
 8012698:	46ae      	mov	lr, r5
 801269a:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801269e:	f0c0 80dd 	bcc.w	801285c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 80126a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80126a4:	4013      	ands	r3, r2
 80126a6:	d055      	beq.n	8012754 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 80126a8:	20ff      	movs	r0, #255	@ 0xff
 80126aa:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80126ac:	fb90 f1f1 	sdiv	r1, r0, r1
 80126b0:	434b      	muls	r3, r1
 80126b2:	2bfe      	cmp	r3, #254	@ 0xfe
 80126b4:	dd03      	ble.n	80126be <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 80126b6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80126b8:	4281      	cmp	r1, r0
 80126ba:	f000 80cd 	beq.w	8012858 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 80126be:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80126c0:	f8bc 4000 	ldrh.w	r4, [ip]
 80126c4:	fb11 f303 	smulbb	r3, r1, r3
 80126c8:	b29b      	uxth	r3, r3
 80126ca:	1c59      	adds	r1, r3, #1
 80126cc:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80126d0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80126d4:	b29f      	uxth	r7, r3
 80126d6:	43db      	mvns	r3, r3
 80126d8:	b2db      	uxtb	r3, r3
 80126da:	9309      	str	r3, [sp, #36]	@ 0x24
 80126dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80126de:	1220      	asrs	r0, r4, #8
 80126e0:	fb13 f907 	smulbb	r9, r3, r7
 80126e4:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80126e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80126ea:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 80126ee:	fb00 9003 	mla	r0, r0, r3, r9
 80126f2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80126f4:	10e1      	asrs	r1, r4, #3
 80126f6:	fb13 f907 	smulbb	r9, r3, r7
 80126fa:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80126fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012700:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8012704:	fb01 9103 	mla	r1, r1, r3, r9
 8012708:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801270a:	00e4      	lsls	r4, r4, #3
 801270c:	fb13 f707 	smulbb	r7, r3, r7
 8012710:	b2e4      	uxtb	r4, r4
 8012712:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012714:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8012718:	fb04 7403 	mla	r4, r4, r3, r7
 801271c:	b280      	uxth	r0, r0
 801271e:	b2a4      	uxth	r4, r4
 8012720:	1c43      	adds	r3, r0, #1
 8012722:	f104 0901 	add.w	r9, r4, #1
 8012726:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801272a:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801272e:	b289      	uxth	r1, r1
 8012730:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8012734:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8012738:	ea49 0000 	orr.w	r0, r9, r0
 801273c:	f101 0901 	add.w	r9, r1, #1
 8012740:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 8012744:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8012748:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801274c:	ea40 0009 	orr.w	r0, r0, r9
 8012750:	f8ac 0000 	strh.w	r0, [ip]
 8012754:	4446      	add	r6, r8
 8012756:	b2b6      	uxth	r6, r6
 8012758:	2e07      	cmp	r6, #7
 801275a:	bf81      	itttt	hi
 801275c:	9b28      	ldrhi	r3, [sp, #160]	@ 0xa0
 801275e:	785a      	ldrbhi	r2, [r3, #1]
 8012760:	3301      	addhi	r3, #1
 8012762:	9328      	strhi	r3, [sp, #160]	@ 0xa0
 8012764:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012766:	bf9a      	itte	ls
 8012768:	fa42 f208 	asrls.w	r2, r2, r8
 801276c:	b2d2      	uxtbls	r2, r2
 801276e:	2600      	movhi	r6, #0
 8012770:	449c      	add	ip, r3
 8012772:	e792      	b.n	801269a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 8012774:	441c      	add	r4, r3
 8012776:	b224      	sxth	r4, r4
 8012778:	e6d5      	b.n	8012526 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801277a:	f1ba 0f01 	cmp.w	sl, #1
 801277e:	f47f af0c 	bne.w	801259a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8012782:	f1bb 0f01 	cmp.w	fp, #1
 8012786:	f47f af08 	bne.w	801259a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801278a:	f8df b0c0 	ldr.w	fp, [pc, #192]	@ 801284c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 801278e:	f8db 0000 	ldr.w	r0, [fp]
 8012792:	6803      	ldr	r3, [r0, #0]
 8012794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012796:	4798      	blx	r3
 8012798:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 801279c:	465a      	mov	r2, fp
 801279e:	d006      	beq.n	80127ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 80127a0:	f1b8 0f04 	cmp.w	r8, #4
 80127a4:	d140      	bne.n	8012828 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 80127a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80127a8:	3300      	adds	r3, #0
 80127aa:	bf18      	it	ne
 80127ac:	2301      	movne	r3, #1
 80127ae:	0580      	lsls	r0, r0, #22
 80127b0:	d56e      	bpl.n	8012890 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 80127b2:	f1b8 0f08 	cmp.w	r8, #8
 80127b6:	d16b      	bne.n	8012890 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	bf0c      	ite	eq
 80127bc:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 80127c0:	f44f 7180 	movne.w	r1, #256	@ 0x100
 80127c4:	2d00      	cmp	r5, #0
 80127c6:	f47f aee8 	bne.w	801259a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80127ca:	2e00      	cmp	r6, #0
 80127cc:	f47f aee5 	bne.w	801259a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80127d0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80127d2:	19e3      	adds	r3, r4, r7
 80127d4:	4283      	cmp	r3, r0
 80127d6:	f73f aee0 	bgt.w	801259a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80127da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80127dc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80127de:	444b      	add	r3, r9
 80127e0:	4283      	cmp	r3, r0
 80127e2:	f73f aeda 	bgt.w	801259a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80127e6:	6810      	ldr	r0, [r2, #0]
 80127e8:	f8bd 305e 	ldrh.w	r3, [sp, #94]	@ 0x5e
 80127ec:	6804      	ldr	r4, [r0, #0]
 80127ee:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 80127f2:	b2bf      	uxth	r7, r7
 80127f4:	f1b8 0f08 	cmp.w	r8, #8
 80127f8:	f04f 0500 	mov.w	r5, #0
 80127fc:	bf18      	it	ne
 80127fe:	3701      	addne	r7, #1
 8012800:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8012804:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012806:	9104      	str	r1, [sp, #16]
 8012808:	bf18      	it	ne
 801280a:	f027 0701 	bicne.w	r7, r7, #1
 801280e:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8012810:	bf18      	it	ne
 8012812:	b2bf      	uxthne	r7, r7
 8012814:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8012818:	e9cd 7900 	strd	r7, r9, [sp]
 801281c:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801281e:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 8012820:	47a0      	blx	r4
 8012822:	b019      	add	sp, #100	@ 0x64
 8012824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012828:	2300      	movs	r3, #0
 801282a:	e7c0      	b.n	80127ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801282c:	2208      	movs	r2, #8
 801282e:	fb92 f3f8 	sdiv	r3, r2, r8
 8012832:	1e5a      	subs	r2, r3, #1
 8012834:	443a      	add	r2, r7
 8012836:	fb92 f2f3 	sdiv	r2, r2, r3
 801283a:	fb12 f203 	smulbb	r2, r2, r3
 801283e:	b292      	uxth	r2, r2
 8012840:	e6b0      	b.n	80125a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 8012842:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8012844:	e6ec      	b.n	8012620 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 8012846:	bf00      	nop
 8012848:	20012650 	.word	0x20012650
 801284c:	20012658 	.word	0x20012658
 8012850:	20012652 	.word	0x20012652
 8012854:	00fff800 	.word	0x00fff800
 8012858:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801285a:	e779      	b.n	8012750 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 801285c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801285e:	b153      	cbz	r3, 8012876 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 8012860:	441e      	add	r6, r3
 8012862:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8012864:	b2b6      	uxth	r6, r6
 8012866:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 801286a:	f006 0607 	and.w	r6, r6, #7
 801286e:	781a      	ldrb	r2, [r3, #0]
 8012870:	9328      	str	r3, [sp, #160]	@ 0xa0
 8012872:	4132      	asrs	r2, r6
 8012874:	b2d2      	uxtb	r2, r2
 8012876:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012878:	445b      	add	r3, fp
 801287a:	930a      	str	r3, [sp, #40]	@ 0x28
 801287c:	e706      	b.n	801268c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 801287e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012880:	2b00      	cmp	r3, #0
 8012882:	d1ce      	bne.n	8012822 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8012884:	4b05      	ldr	r3, [pc, #20]	@ (801289c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 8012886:	6818      	ldr	r0, [r3, #0]
 8012888:	6803      	ldr	r3, [r0, #0]
 801288a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801288c:	4798      	blx	r3
 801288e:	e7c8      	b.n	8012822 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8012890:	2b00      	cmp	r3, #0
 8012892:	f43f ae82 	beq.w	801259a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8012896:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801289a:	e793      	b.n	80127c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 801289c:	20012658 	.word	0x20012658

080128a0 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
 80128a0:	b538      	push	{r3, r4, r5, lr}
 80128a2:	4c0b      	ldr	r4, [pc, #44]	@ (80128d0 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
 80128a4:	7823      	ldrb	r3, [r4, #0]
 80128a6:	f3bf 8f5b 	dmb	ish
 80128aa:	07db      	lsls	r3, r3, #31
 80128ac:	4605      	mov	r5, r0
 80128ae:	d40b      	bmi.n	80128c8 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 80128b0:	4620      	mov	r0, r4
 80128b2:	f000 fd43 	bl	801333c <__cxa_guard_acquire>
 80128b6:	b138      	cbz	r0, 80128c8 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 80128b8:	4620      	mov	r0, r4
 80128ba:	f000 fd4b 	bl	8013354 <__cxa_guard_release>
 80128be:	4a05      	ldr	r2, [pc, #20]	@ (80128d4 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
 80128c0:	4905      	ldr	r1, [pc, #20]	@ (80128d8 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 80128c2:	4806      	ldr	r0, [pc, #24]	@ (80128dc <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 80128c4:	f000 fd33 	bl	801332e <__aeabi_atexit>
 80128c8:	4b04      	ldr	r3, [pc, #16]	@ (80128dc <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 80128ca:	67eb      	str	r3, [r5, #124]	@ 0x7c
 80128cc:	bd38      	pop	{r3, r4, r5, pc}
 80128ce:	bf00      	nop
 80128d0:	200126e4 	.word	0x200126e4
 80128d4:	20000000 	.word	0x20000000
 80128d8:	08010b59 	.word	0x08010b59
 80128dc:	20000088 	.word	0x20000088

080128e0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
 80128e0:	b570      	push	{r4, r5, r6, lr}
 80128e2:	1208      	asrs	r0, r1, #8
 80128e4:	b29e      	uxth	r6, r3
 80128e6:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80128ea:	1213      	asrs	r3, r2, #8
 80128ec:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80128f0:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80128f4:	fb13 f305 	smulbb	r3, r3, r5
 80128f8:	fb10 f006 	smulbb	r0, r0, r6
 80128fc:	4418      	add	r0, r3
 80128fe:	10cc      	asrs	r4, r1, #3
 8012900:	10d3      	asrs	r3, r2, #3
 8012902:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8012906:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 801290a:	fb13 f305 	smulbb	r3, r3, r5
 801290e:	fb14 f406 	smulbb	r4, r4, r6
 8012912:	00c9      	lsls	r1, r1, #3
 8012914:	00d2      	lsls	r2, r2, #3
 8012916:	441c      	add	r4, r3
 8012918:	b2d2      	uxtb	r2, r2
 801291a:	b2cb      	uxtb	r3, r1
 801291c:	fb12 f205 	smulbb	r2, r2, r5
 8012920:	b280      	uxth	r0, r0
 8012922:	fb13 f306 	smulbb	r3, r3, r6
 8012926:	4413      	add	r3, r2
 8012928:	1c42      	adds	r2, r0, #1
 801292a:	b29b      	uxth	r3, r3
 801292c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8012930:	f400 4278 	and.w	r2, r0, #63488	@ 0xf800
 8012934:	1c58      	adds	r0, r3, #1
 8012936:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801293a:	b2a4      	uxth	r4, r4
 801293c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8012940:	4310      	orrs	r0, r2
 8012942:	1c62      	adds	r2, r4, #1
 8012944:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8012948:	0964      	lsrs	r4, r4, #5
 801294a:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 801294e:	4320      	orrs	r0, r4
 8012950:	bd70      	pop	{r4, r5, r6, pc}
	...

08012954 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 8012954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012958:	b08f      	sub	sp, #60	@ 0x3c
 801295a:	461c      	mov	r4, r3
 801295c:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 8012960:	9004      	str	r0, [sp, #16]
 8012962:	460d      	mov	r5, r1
 8012964:	4616      	mov	r6, r2
 8012966:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8012968:	2f00      	cmp	r7, #0
 801296a:	f000 80f6 	beq.w	8012b5a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 801296e:	6820      	ldr	r0, [r4, #0]
 8012970:	6861      	ldr	r1, [r4, #4]
 8012972:	aa0a      	add	r2, sp, #40	@ 0x28
 8012974:	c203      	stmia	r2!, {r0, r1}
 8012976:	6818      	ldr	r0, [r3, #0]
 8012978:	6859      	ldr	r1, [r3, #4]
 801297a:	aa0c      	add	r2, sp, #48	@ 0x30
 801297c:	c203      	stmia	r2!, {r0, r1}
 801297e:	a80a      	add	r0, sp, #40	@ 0x28
 8012980:	f7f9 ffd8 	bl	800c934 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012984:	4621      	mov	r1, r4
 8012986:	a80c      	add	r0, sp, #48	@ 0x30
 8012988:	f7f9 fffc 	bl	800c984 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801298c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8012990:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 8012994:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8012998:	f002 0301 	and.w	r3, r2, #1
 801299c:	9306      	str	r3, [sp, #24]
 801299e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80129a2:	f003 0101 	and.w	r1, r3, #1
 80129a6:	9105      	str	r1, [sp, #20]
 80129a8:	9805      	ldr	r0, [sp, #20]
 80129aa:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 80129ae:	4403      	add	r3, r0
 80129b0:	fb01 2303 	mla	r3, r1, r3, r2
 80129b4:	f04f 0802 	mov.w	r8, #2
 80129b8:	fb93 f3f8 	sdiv	r3, r3, r8
 80129bc:	441d      	add	r5, r3
 80129be:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80129c2:	441a      	add	r2, r3
 80129c4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 80129c8:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 80129cc:	4419      	add	r1, r3
 80129ce:	4b64      	ldr	r3, [pc, #400]	@ (8012b60 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 80129d0:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 80129d4:	6818      	ldr	r0, [r3, #0]
 80129d6:	6803      	ldr	r3, [r0, #0]
 80129d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80129da:	4798      	blx	r3
 80129dc:	4a61      	ldr	r2, [pc, #388]	@ (8012b64 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
 80129de:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 80129e2:	8813      	ldrh	r3, [r2, #0]
 80129e4:	f9bd a030 	ldrsh.w	sl, [sp, #48]	@ 0x30
 80129e8:	2fff      	cmp	r7, #255	@ 0xff
 80129ea:	fb03 a404 	mla	r4, r3, r4, sl
 80129ee:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80129f2:	f106 0604 	add.w	r6, r6, #4
 80129f6:	4611      	mov	r1, r2
 80129f8:	fb03 fb0b 	mul.w	fp, r3, fp
 80129fc:	d06b      	beq.n	8012ad6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x182>
 80129fe:	f1c7 03ff 	rsb	r3, r7, #255	@ 0xff
 8012a02:	9303      	str	r3, [sp, #12]
 8012a04:	eb04 034b 	add.w	r3, r4, fp, lsl #1
 8012a08:	e9cd 3207 	strd	r3, r2, [sp, #28]
 8012a0c:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8012a10:	9b07      	ldr	r3, [sp, #28]
 8012a12:	42a3      	cmp	r3, r4
 8012a14:	f240 809c 	bls.w	8012b50 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 8012a18:	9b06      	ldr	r3, [sp, #24]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d039      	beq.n	8012a92 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
 8012a1e:	782b      	ldrb	r3, [r5, #0]
 8012a20:	8822      	ldrh	r2, [r4, #0]
 8012a22:	9804      	ldr	r0, [sp, #16]
 8012a24:	f003 030f 	and.w	r3, r3, #15
 8012a28:	f105 0801 	add.w	r8, r5, #1
 8012a2c:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8012a30:	9b03      	ldr	r3, [sp, #12]
 8012a32:	9300      	str	r3, [sp, #0]
 8012a34:	463b      	mov	r3, r7
 8012a36:	f7ff ff53 	bl	80128e0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8012a3a:	f824 0b02 	strh.w	r0, [r4], #2
 8012a3e:	f109 3bff 	add.w	fp, r9, #4294967295
 8012a42:	f1bb 0f01 	cmp.w	fp, #1
 8012a46:	46a2      	mov	sl, r4
 8012a48:	f104 0404 	add.w	r4, r4, #4
 8012a4c:	dd24      	ble.n	8012a98 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x144>
 8012a4e:	f898 3000 	ldrb.w	r3, [r8]
 8012a52:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8012a56:	9804      	ldr	r0, [sp, #16]
 8012a58:	091b      	lsrs	r3, r3, #4
 8012a5a:	f1ab 0b02 	sub.w	fp, fp, #2
 8012a5e:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8012a62:	9b03      	ldr	r3, [sp, #12]
 8012a64:	9300      	str	r3, [sp, #0]
 8012a66:	463b      	mov	r3, r7
 8012a68:	f7ff ff3a 	bl	80128e0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8012a6c:	f824 0c04 	strh.w	r0, [r4, #-4]
 8012a70:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012a74:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 8012a78:	9804      	ldr	r0, [sp, #16]
 8012a7a:	f003 030f 	and.w	r3, r3, #15
 8012a7e:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8012a82:	9b03      	ldr	r3, [sp, #12]
 8012a84:	9300      	str	r3, [sp, #0]
 8012a86:	463b      	mov	r3, r7
 8012a88:	f7ff ff2a 	bl	80128e0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8012a8c:	f824 0c02 	strh.w	r0, [r4, #-2]
 8012a90:	e7d7      	b.n	8012a42 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xee>
 8012a92:	46a8      	mov	r8, r5
 8012a94:	46cb      	mov	fp, r9
 8012a96:	e7d4      	b.n	8012a42 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xee>
 8012a98:	d10e      	bne.n	8012ab8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x164>
 8012a9a:	f898 3000 	ldrb.w	r3, [r8]
 8012a9e:	f8ba 2000 	ldrh.w	r2, [sl]
 8012aa2:	9804      	ldr	r0, [sp, #16]
 8012aa4:	091b      	lsrs	r3, r3, #4
 8012aa6:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8012aaa:	9b03      	ldr	r3, [sp, #12]
 8012aac:	9300      	str	r3, [sp, #0]
 8012aae:	463b      	mov	r3, r7
 8012ab0:	f7ff ff16 	bl	80128e0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8012ab4:	f82a 0b02 	strh.w	r0, [sl], #2
 8012ab8:	9b08      	ldr	r3, [sp, #32]
 8012aba:	9a05      	ldr	r2, [sp, #20]
 8012abc:	881c      	ldrh	r4, [r3, #0]
 8012abe:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8012ac2:	eba4 0409 	sub.w	r4, r4, r9
 8012ac6:	4413      	add	r3, r2
 8012ac8:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 8012acc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012ace:	fb93 f3f2 	sdiv	r3, r3, r2
 8012ad2:	441d      	add	r5, r3
 8012ad4:	e79c      	b.n	8012a10 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xbc>
 8012ad6:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 8012ada:	45a3      	cmp	fp, r4
 8012adc:	d938      	bls.n	8012b50 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 8012ade:	9b06      	ldr	r3, [sp, #24]
 8012ae0:	b1f3      	cbz	r3, 8012b20 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1cc>
 8012ae2:	782b      	ldrb	r3, [r5, #0]
 8012ae4:	f003 030f 	and.w	r3, r3, #15
 8012ae8:	1c6a      	adds	r2, r5, #1
 8012aea:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8012aee:	8023      	strh	r3, [r4, #0]
 8012af0:	f109 30ff 	add.w	r0, r9, #4294967295
 8012af4:	3402      	adds	r4, #2
 8012af6:	2801      	cmp	r0, #1
 8012af8:	4623      	mov	r3, r4
 8012afa:	f104 0404 	add.w	r4, r4, #4
 8012afe:	dd12      	ble.n	8012b26 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d2>
 8012b00:	7813      	ldrb	r3, [r2, #0]
 8012b02:	091b      	lsrs	r3, r3, #4
 8012b04:	3802      	subs	r0, #2
 8012b06:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8012b0a:	f824 3c04 	strh.w	r3, [r4, #-4]
 8012b0e:	f812 3b01 	ldrb.w	r3, [r2], #1
 8012b12:	f003 030f 	and.w	r3, r3, #15
 8012b16:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8012b1a:	f824 3c02 	strh.w	r3, [r4, #-2]
 8012b1e:	e7ea      	b.n	8012af6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 8012b20:	462a      	mov	r2, r5
 8012b22:	4648      	mov	r0, r9
 8012b24:	e7e7      	b.n	8012af6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 8012b26:	d106      	bne.n	8012b36 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e2>
 8012b28:	7812      	ldrb	r2, [r2, #0]
 8012b2a:	0912      	lsrs	r2, r2, #4
 8012b2c:	3302      	adds	r3, #2
 8012b2e:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8012b32:	f823 2c02 	strh.w	r2, [r3, #-2]
 8012b36:	880c      	ldrh	r4, [r1, #0]
 8012b38:	9a05      	ldr	r2, [sp, #20]
 8012b3a:	eba4 0409 	sub.w	r4, r4, r9
 8012b3e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8012b42:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8012b46:	4413      	add	r3, r2
 8012b48:	fb93 f3f8 	sdiv	r3, r3, r8
 8012b4c:	441d      	add	r5, r3
 8012b4e:	e7c4      	b.n	8012ada <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x186>
 8012b50:	4b03      	ldr	r3, [pc, #12]	@ (8012b60 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 8012b52:	6818      	ldr	r0, [r3, #0]
 8012b54:	6803      	ldr	r3, [r0, #0]
 8012b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b58:	4798      	blx	r3
 8012b5a:	b00f      	add	sp, #60	@ 0x3c
 8012b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b60:	20012658 	.word	0x20012658
 8012b64:	20012652 	.word	0x20012652

08012b68 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
 8012b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b6a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8012b6e:	2dff      	cmp	r5, #255	@ 0xff
 8012b70:	ea4f 2711 	mov.w	r7, r1, lsr #8
 8012b74:	d10c      	bne.n	8012b90 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x28>
 8012b76:	2bff      	cmp	r3, #255	@ 0xff
 8012b78:	d10a      	bne.n	8012b90 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x28>
 8012b7a:	4b25      	ldr	r3, [pc, #148]	@ (8012c10 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
 8012b7c:	0948      	lsrs	r0, r1, #5
 8012b7e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8012b82:	403b      	ands	r3, r7
 8012b84:	4318      	orrs	r0, r3
 8012b86:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8012b8a:	4308      	orrs	r0, r1
 8012b8c:	b280      	uxth	r0, r0
 8012b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b90:	fb15 f503 	smulbb	r5, r5, r3
 8012b94:	b2ab      	uxth	r3, r5
 8012b96:	1c5d      	adds	r5, r3, #1
 8012b98:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 8012b9c:	1214      	asrs	r4, r2, #8
 8012b9e:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8012ba2:	fa1f fc85 	uxth.w	ip, r5
 8012ba6:	10d6      	asrs	r6, r2, #3
 8012ba8:	00d0      	lsls	r0, r2, #3
 8012baa:	43ed      	mvns	r5, r5
 8012bac:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8012bb0:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8012bb4:	b2eb      	uxtb	r3, r5
 8012bb6:	b2c0      	uxtb	r0, r0
 8012bb8:	fb12 f20c 	smulbb	r2, r2, ip
 8012bbc:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8012bc0:	fb04 2403 	mla	r4, r4, r3, r2
 8012bc4:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
 8012bc8:	b2c8      	uxtb	r0, r1
 8012bca:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8012bce:	b2fd      	uxtb	r5, r7
 8012bd0:	fb10 f00c 	smulbb	r0, r0, ip
 8012bd4:	b2a4      	uxth	r4, r4
 8012bd6:	fb02 0003 	mla	r0, r2, r3, r0
 8012bda:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8012bde:	fb15 f50c 	smulbb	r5, r5, ip
 8012be2:	fb06 5503 	mla	r5, r6, r3, r5
 8012be6:	b283      	uxth	r3, r0
 8012be8:	1c60      	adds	r0, r4, #1
 8012bea:	b2ad      	uxth	r5, r5
 8012bec:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8012bf0:	1c58      	adds	r0, r3, #1
 8012bf2:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8012bf6:	1c6b      	adds	r3, r5, #1
 8012bf8:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8012bfc:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8012c00:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8012c04:	096d      	lsrs	r5, r5, #5
 8012c06:	4320      	orrs	r0, r4
 8012c08:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8012c0c:	4328      	orrs	r0, r5
 8012c0e:	e7be      	b.n	8012b8e <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 8012c10:	00fff800 	.word	0x00fff800

08012c14 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8012c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c18:	461c      	mov	r4, r3
 8012c1a:	b08d      	sub	sp, #52	@ 0x34
 8012c1c:	460d      	mov	r5, r1
 8012c1e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012c20:	6861      	ldr	r1, [r4, #4]
 8012c22:	f89d 905c 	ldrb.w	r9, [sp, #92]	@ 0x5c
 8012c26:	4680      	mov	r8, r0
 8012c28:	6820      	ldr	r0, [r4, #0]
 8012c2a:	4616      	mov	r6, r2
 8012c2c:	aa08      	add	r2, sp, #32
 8012c2e:	c203      	stmia	r2!, {r0, r1}
 8012c30:	6818      	ldr	r0, [r3, #0]
 8012c32:	6859      	ldr	r1, [r3, #4]
 8012c34:	aa0a      	add	r2, sp, #40	@ 0x28
 8012c36:	c203      	stmia	r2!, {r0, r1}
 8012c38:	a808      	add	r0, sp, #32
 8012c3a:	f7f9 fe7b 	bl	800c934 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012c3e:	4621      	mov	r1, r4
 8012c40:	a80a      	add	r0, sp, #40	@ 0x28
 8012c42:	f7f9 fe9f 	bl	800c984 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012c46:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 8012c4a:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	@ 0x2e
 8012c4e:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	@ 0x2c
 8012c52:	f002 0301 	and.w	r3, r2, #1
 8012c56:	9303      	str	r3, [sp, #12]
 8012c58:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8012c5c:	f003 0101 	and.w	r1, r3, #1
 8012c60:	9102      	str	r1, [sp, #8]
 8012c62:	9802      	ldr	r0, [sp, #8]
 8012c64:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8012c68:	4403      	add	r3, r0
 8012c6a:	fb01 2303 	mla	r3, r1, r3, r2
 8012c6e:	f04f 0a02 	mov.w	sl, #2
 8012c72:	fb93 f3fa 	sdiv	r3, r3, sl
 8012c76:	441d      	add	r5, r3
 8012c78:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8012c7c:	441a      	add	r2, r3
 8012c7e:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8012c82:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8012c86:	4a3f      	ldr	r2, [pc, #252]	@ (8012d84 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
 8012c88:	9205      	str	r2, [sp, #20]
 8012c8a:	4419      	add	r1, r3
 8012c8c:	6810      	ldr	r0, [r2, #0]
 8012c8e:	f8ad 102a 	strh.w	r1, [sp, #42]	@ 0x2a
 8012c92:	6803      	ldr	r3, [r0, #0]
 8012c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012c96:	4798      	blx	r3
 8012c98:	4b3b      	ldr	r3, [pc, #236]	@ (8012d88 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
 8012c9a:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	@ 0x2a
 8012c9e:	8819      	ldrh	r1, [r3, #0]
 8012ca0:	f9bd c028 	ldrsh.w	ip, [sp, #40]	@ 0x28
 8012ca4:	fb01 c404 	mla	r4, r1, r4, ip
 8012ca8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8012cac:	434f      	muls	r7, r1
 8012cae:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 8012cb2:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 8012cb6:	3604      	adds	r6, #4
 8012cb8:	9204      	str	r2, [sp, #16]
 8012cba:	9b04      	ldr	r3, [sp, #16]
 8012cbc:	429c      	cmp	r4, r3
 8012cbe:	d258      	bcs.n	8012d72 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
 8012cc0:	9b03      	ldr	r3, [sp, #12]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d034      	beq.n	8012d30 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 8012cc6:	782b      	ldrb	r3, [r5, #0]
 8012cc8:	f003 030f 	and.w	r3, r3, #15
 8012ccc:	1c6f      	adds	r7, r5, #1
 8012cce:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8012cd2:	0e0b      	lsrs	r3, r1, #24
 8012cd4:	d006      	beq.n	8012ce4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
 8012cd6:	8822      	ldrh	r2, [r4, #0]
 8012cd8:	9300      	str	r3, [sp, #0]
 8012cda:	4640      	mov	r0, r8
 8012cdc:	464b      	mov	r3, r9
 8012cde:	f7ff ff43 	bl	8012b68 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8012ce2:	8020      	strh	r0, [r4, #0]
 8012ce4:	3402      	adds	r4, #2
 8012ce6:	f10b 3aff 	add.w	sl, fp, #4294967295
 8012cea:	f1ba 0f01 	cmp.w	sl, #1
 8012cee:	dd22      	ble.n	8012d36 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 8012cf0:	783b      	ldrb	r3, [r7, #0]
 8012cf2:	091b      	lsrs	r3, r3, #4
 8012cf4:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8012cf8:	0e0b      	lsrs	r3, r1, #24
 8012cfa:	d006      	beq.n	8012d0a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
 8012cfc:	8822      	ldrh	r2, [r4, #0]
 8012cfe:	9300      	str	r3, [sp, #0]
 8012d00:	4640      	mov	r0, r8
 8012d02:	464b      	mov	r3, r9
 8012d04:	f7ff ff30 	bl	8012b68 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8012d08:	8020      	strh	r0, [r4, #0]
 8012d0a:	f817 3b01 	ldrb.w	r3, [r7], #1
 8012d0e:	f003 030f 	and.w	r3, r3, #15
 8012d12:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8012d16:	0e0b      	lsrs	r3, r1, #24
 8012d18:	d006      	beq.n	8012d28 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
 8012d1a:	8862      	ldrh	r2, [r4, #2]
 8012d1c:	9300      	str	r3, [sp, #0]
 8012d1e:	4640      	mov	r0, r8
 8012d20:	464b      	mov	r3, r9
 8012d22:	f7ff ff21 	bl	8012b68 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8012d26:	8060      	strh	r0, [r4, #2]
 8012d28:	3404      	adds	r4, #4
 8012d2a:	f1aa 0a02 	sub.w	sl, sl, #2
 8012d2e:	e7dc      	b.n	8012cea <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 8012d30:	462f      	mov	r7, r5
 8012d32:	46da      	mov	sl, fp
 8012d34:	e7d9      	b.n	8012cea <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 8012d36:	d10d      	bne.n	8012d54 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
 8012d38:	783b      	ldrb	r3, [r7, #0]
 8012d3a:	091b      	lsrs	r3, r3, #4
 8012d3c:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8012d40:	0e0b      	lsrs	r3, r1, #24
 8012d42:	d006      	beq.n	8012d52 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 8012d44:	8822      	ldrh	r2, [r4, #0]
 8012d46:	9300      	str	r3, [sp, #0]
 8012d48:	4640      	mov	r0, r8
 8012d4a:	464b      	mov	r3, r9
 8012d4c:	f7ff ff0c 	bl	8012b68 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8012d50:	8020      	strh	r0, [r4, #0]
 8012d52:	3402      	adds	r4, #2
 8012d54:	9b06      	ldr	r3, [sp, #24]
 8012d56:	9a02      	ldr	r2, [sp, #8]
 8012d58:	881b      	ldrh	r3, [r3, #0]
 8012d5a:	eba3 030b 	sub.w	r3, r3, fp
 8012d5e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8012d62:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8012d66:	4413      	add	r3, r2
 8012d68:	9a07      	ldr	r2, [sp, #28]
 8012d6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8012d6e:	441d      	add	r5, r3
 8012d70:	e7a3      	b.n	8012cba <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 8012d72:	9b05      	ldr	r3, [sp, #20]
 8012d74:	6818      	ldr	r0, [r3, #0]
 8012d76:	6803      	ldr	r3, [r0, #0]
 8012d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012d7a:	4798      	blx	r3
 8012d7c:	b00d      	add	sp, #52	@ 0x34
 8012d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d82:	bf00      	nop
 8012d84:	20012658 	.word	0x20012658
 8012d88:	20012652 	.word	0x20012652

08012d8c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
 8012d8c:	b570      	push	{r4, r5, r6, lr}
 8012d8e:	1214      	asrs	r4, r2, #8
 8012d90:	788d      	ldrb	r5, [r1, #2]
 8012d92:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8012d96:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8012d9a:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8012d9e:	fb15 f503 	smulbb	r5, r5, r3
 8012da2:	fb04 5506 	mla	r5, r4, r6, r5
 8012da6:	10d0      	asrs	r0, r2, #3
 8012da8:	784c      	ldrb	r4, [r1, #1]
 8012daa:	7809      	ldrb	r1, [r1, #0]
 8012dac:	00d2      	lsls	r2, r2, #3
 8012dae:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8012db2:	b2d2      	uxtb	r2, r2
 8012db4:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8012db8:	fb14 f403 	smulbb	r4, r4, r3
 8012dbc:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8012dc0:	fb11 f303 	smulbb	r3, r1, r3
 8012dc4:	fb00 4406 	mla	r4, r0, r6, r4
 8012dc8:	fb02 3306 	mla	r3, r2, r6, r3
 8012dcc:	b2ad      	uxth	r5, r5
 8012dce:	b29b      	uxth	r3, r3
 8012dd0:	b2a4      	uxth	r4, r4
 8012dd2:	1c68      	adds	r0, r5, #1
 8012dd4:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 8012dd8:	1c62      	adds	r2, r4, #1
 8012dda:	1c58      	adds	r0, r3, #1
 8012ddc:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8012de0:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8012de4:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8012de8:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8012dec:	0964      	lsrs	r4, r4, #5
 8012dee:	4328      	orrs	r0, r5
 8012df0:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8012df4:	4320      	orrs	r0, r4
 8012df6:	bd70      	pop	{r4, r5, r6, pc}

08012df8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8012df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dfc:	b08f      	sub	sp, #60	@ 0x3c
 8012dfe:	461c      	mov	r4, r3
 8012e00:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 8012e04:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8012e06:	4682      	mov	sl, r0
 8012e08:	460e      	mov	r6, r1
 8012e0a:	4615      	mov	r5, r2
 8012e0c:	2f00      	cmp	r7, #0
 8012e0e:	f000 8142 	beq.w	8013096 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29e>
 8012e12:	6820      	ldr	r0, [r4, #0]
 8012e14:	6861      	ldr	r1, [r4, #4]
 8012e16:	aa0a      	add	r2, sp, #40	@ 0x28
 8012e18:	c203      	stmia	r2!, {r0, r1}
 8012e1a:	6818      	ldr	r0, [r3, #0]
 8012e1c:	6859      	ldr	r1, [r3, #4]
 8012e1e:	aa0c      	add	r2, sp, #48	@ 0x30
 8012e20:	c203      	stmia	r2!, {r0, r1}
 8012e22:	a80a      	add	r0, sp, #40	@ 0x28
 8012e24:	f7f9 fd86 	bl	800c934 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012e28:	4621      	mov	r1, r4
 8012e2a:	a80c      	add	r0, sp, #48	@ 0x30
 8012e2c:	f7f9 fdaa 	bl	800c984 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012e30:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8012e34:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 8012e38:	f002 0301 	and.w	r3, r2, #1
 8012e3c:	9306      	str	r3, [sp, #24]
 8012e3e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8012e42:	f003 0101 	and.w	r1, r3, #1
 8012e46:	9105      	str	r1, [sp, #20]
 8012e48:	9805      	ldr	r0, [sp, #20]
 8012e4a:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8012e4e:	4403      	add	r3, r0
 8012e50:	fb01 2303 	mla	r3, r1, r3, r2
 8012e54:	f04f 0802 	mov.w	r8, #2
 8012e58:	fb93 f3f8 	sdiv	r3, r3, r8
 8012e5c:	441e      	add	r6, r3
 8012e5e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8012e62:	441a      	add	r2, r3
 8012e64:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8012e68:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8012e6c:	4419      	add	r1, r3
 8012e6e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8012e72:	9303      	str	r3, [sp, #12]
 8012e74:	4b89      	ldr	r3, [pc, #548]	@ (801309c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 8012e76:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8012e7a:	6818      	ldr	r0, [r3, #0]
 8012e7c:	6803      	ldr	r3, [r0, #0]
 8012e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012e80:	4798      	blx	r3
 8012e82:	4a87      	ldr	r2, [pc, #540]	@ (80130a0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
 8012e84:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8012e88:	8813      	ldrh	r3, [r2, #0]
 8012e8a:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 8012e8e:	2fff      	cmp	r7, #255	@ 0xff
 8012e90:	fb03 9404 	mla	r4, r3, r4, r9
 8012e94:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8012e98:	f105 0504 	add.w	r5, r5, #4
 8012e9c:	4694      	mov	ip, r2
 8012e9e:	fb03 f30b 	mul.w	r3, r3, fp
 8012ea2:	d071      	beq.n	8012f88 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x190>
 8012ea4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8012ea8:	43f9      	mvns	r1, r7
 8012eaa:	e9cd 3207 	strd	r3, r2, [sp, #28]
 8012eae:	b2c9      	uxtb	r1, r1
 8012eb0:	9104      	str	r1, [sp, #16]
 8012eb2:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8012eb6:	9b07      	ldr	r3, [sp, #28]
 8012eb8:	42a3      	cmp	r3, r4
 8012eba:	f240 80e7 	bls.w	801308c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x294>
 8012ebe:	9b06      	ldr	r3, [sp, #24]
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d03d      	beq.n	8012f40 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x148>
 8012ec4:	7831      	ldrb	r1, [r6, #0]
 8012ec6:	9b04      	ldr	r3, [sp, #16]
 8012ec8:	8822      	ldrh	r2, [r4, #0]
 8012eca:	9300      	str	r3, [sp, #0]
 8012ecc:	f001 010f 	and.w	r1, r1, #15
 8012ed0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012ed4:	463b      	mov	r3, r7
 8012ed6:	4429      	add	r1, r5
 8012ed8:	4650      	mov	r0, sl
 8012eda:	f7ff ff57 	bl	8012d8c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8012ede:	9b03      	ldr	r3, [sp, #12]
 8012ee0:	f824 0b02 	strh.w	r0, [r4], #2
 8012ee4:	f106 0801 	add.w	r8, r6, #1
 8012ee8:	f103 3bff 	add.w	fp, r3, #4294967295
 8012eec:	f1bb 0f01 	cmp.w	fp, #1
 8012ef0:	46a1      	mov	r9, r4
 8012ef2:	f104 0404 	add.w	r4, r4, #4
 8012ef6:	dd27      	ble.n	8012f48 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x150>
 8012ef8:	f898 1000 	ldrb.w	r1, [r8]
 8012efc:	9b04      	ldr	r3, [sp, #16]
 8012efe:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8012f02:	9300      	str	r3, [sp, #0]
 8012f04:	0909      	lsrs	r1, r1, #4
 8012f06:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012f0a:	463b      	mov	r3, r7
 8012f0c:	4429      	add	r1, r5
 8012f0e:	4650      	mov	r0, sl
 8012f10:	f7ff ff3c 	bl	8012d8c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8012f14:	f824 0c04 	strh.w	r0, [r4, #-4]
 8012f18:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012f1c:	9b04      	ldr	r3, [sp, #16]
 8012f1e:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 8012f22:	9300      	str	r3, [sp, #0]
 8012f24:	f001 010f 	and.w	r1, r1, #15
 8012f28:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012f2c:	463b      	mov	r3, r7
 8012f2e:	4429      	add	r1, r5
 8012f30:	4650      	mov	r0, sl
 8012f32:	f7ff ff2b 	bl	8012d8c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8012f36:	f1ab 0b02 	sub.w	fp, fp, #2
 8012f3a:	f824 0c02 	strh.w	r0, [r4, #-2]
 8012f3e:	e7d5      	b.n	8012eec <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 8012f40:	46b0      	mov	r8, r6
 8012f42:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8012f46:	e7d1      	b.n	8012eec <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 8012f48:	d10f      	bne.n	8012f6a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x172>
 8012f4a:	f898 1000 	ldrb.w	r1, [r8]
 8012f4e:	9b04      	ldr	r3, [sp, #16]
 8012f50:	f8b9 2000 	ldrh.w	r2, [r9]
 8012f54:	9300      	str	r3, [sp, #0]
 8012f56:	0909      	lsrs	r1, r1, #4
 8012f58:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012f5c:	463b      	mov	r3, r7
 8012f5e:	4429      	add	r1, r5
 8012f60:	4650      	mov	r0, sl
 8012f62:	f7ff ff13 	bl	8012d8c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8012f66:	f829 0b02 	strh.w	r0, [r9], #2
 8012f6a:	9b08      	ldr	r3, [sp, #32]
 8012f6c:	9a05      	ldr	r2, [sp, #20]
 8012f6e:	881c      	ldrh	r4, [r3, #0]
 8012f70:	9b03      	ldr	r3, [sp, #12]
 8012f72:	1ae4      	subs	r4, r4, r3
 8012f74:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8012f78:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8012f7c:	4413      	add	r3, r2
 8012f7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012f80:	fb93 f3f2 	sdiv	r3, r3, r2
 8012f84:	441e      	add	r6, r3
 8012f86:	e796      	b.n	8012eb6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbe>
 8012f88:	4f46      	ldr	r7, [pc, #280]	@ (80130a4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
 8012f8a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8012f8e:	42a3      	cmp	r3, r4
 8012f90:	d97c      	bls.n	801308c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x294>
 8012f92:	9a06      	ldr	r2, [sp, #24]
 8012f94:	2a00      	cmp	r2, #0
 8012f96:	d054      	beq.n	8013042 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24a>
 8012f98:	7830      	ldrb	r0, [r6, #0]
 8012f9a:	f000 000f 	and.w	r0, r0, #15
 8012f9e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8012fa2:	eb05 0e00 	add.w	lr, r5, r0
 8012fa6:	5c28      	ldrb	r0, [r5, r0]
 8012fa8:	f89e 2002 	ldrb.w	r2, [lr, #2]
 8012fac:	f89e e001 	ldrb.w	lr, [lr, #1]
 8012fb0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8012fb4:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8012fb8:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 8012fbc:	ea42 020e 	orr.w	r2, r2, lr
 8012fc0:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 8012fc4:	f824 2b02 	strh.w	r2, [r4], #2
 8012fc8:	9a03      	ldr	r2, [sp, #12]
 8012fca:	1c71      	adds	r1, r6, #1
 8012fcc:	f102 3eff 	add.w	lr, r2, #4294967295
 8012fd0:	f1be 0f01 	cmp.w	lr, #1
 8012fd4:	4620      	mov	r0, r4
 8012fd6:	f104 0404 	add.w	r4, r4, #4
 8012fda:	dd36      	ble.n	801304a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x252>
 8012fdc:	7808      	ldrb	r0, [r1, #0]
 8012fde:	0900      	lsrs	r0, r0, #4
 8012fe0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8012fe4:	eb05 0a00 	add.w	sl, r5, r0
 8012fe8:	f1ae 0e02 	sub.w	lr, lr, #2
 8012fec:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8012ff0:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8012ff4:	00d2      	lsls	r2, r2, #3
 8012ff6:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 8012ffa:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8012ffe:	ea49 0202 	orr.w	r2, r9, r2
 8013002:	f815 9000 	ldrb.w	r9, [r5, r0]
 8013006:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 801300a:	f824 2c04 	strh.w	r2, [r4, #-4]
 801300e:	f811 0b01 	ldrb.w	r0, [r1], #1
 8013012:	f000 000f 	and.w	r0, r0, #15
 8013016:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801301a:	eb05 0a00 	add.w	sl, r5, r0
 801301e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8013022:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8013026:	00d2      	lsls	r2, r2, #3
 8013028:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 801302c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8013030:	ea49 0202 	orr.w	r2, r9, r2
 8013034:	f815 9000 	ldrb.w	r9, [r5, r0]
 8013038:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 801303c:	f824 2c02 	strh.w	r2, [r4, #-2]
 8013040:	e7c6      	b.n	8012fd0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d8>
 8013042:	4631      	mov	r1, r6
 8013044:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8013048:	e7c2      	b.n	8012fd0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d8>
 801304a:	d111      	bne.n	8013070 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 801304c:	7809      	ldrb	r1, [r1, #0]
 801304e:	0909      	lsrs	r1, r1, #4
 8013050:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8013054:	186c      	adds	r4, r5, r1
 8013056:	5c69      	ldrb	r1, [r5, r1]
 8013058:	78a2      	ldrb	r2, [r4, #2]
 801305a:	7864      	ldrb	r4, [r4, #1]
 801305c:	00e4      	lsls	r4, r4, #3
 801305e:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 8013062:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8013066:	4322      	orrs	r2, r4
 8013068:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 801306c:	f820 2b02 	strh.w	r2, [r0], #2
 8013070:	9a03      	ldr	r2, [sp, #12]
 8013072:	f8bc 4000 	ldrh.w	r4, [ip]
 8013076:	9905      	ldr	r1, [sp, #20]
 8013078:	1aa4      	subs	r4, r4, r2
 801307a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801307e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8013082:	440a      	add	r2, r1
 8013084:	fb92 f2f8 	sdiv	r2, r2, r8
 8013088:	4416      	add	r6, r2
 801308a:	e780      	b.n	8012f8e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
 801308c:	4b03      	ldr	r3, [pc, #12]	@ (801309c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 801308e:	6818      	ldr	r0, [r3, #0]
 8013090:	6803      	ldr	r3, [r0, #0]
 8013092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013094:	4798      	blx	r3
 8013096:	b00f      	add	sp, #60	@ 0x3c
 8013098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801309c:	20012658 	.word	0x20012658
 80130a0:	20012652 	.word	0x20012652
 80130a4:	fffff800 	.word	0xfffff800

080130a8 <CRC_Lock>:
 80130a8:	b530      	push	{r4, r5, lr}
 80130aa:	4a2d      	ldr	r2, [pc, #180]	@ (8013160 <CRC_Lock+0xb8>)
 80130ac:	6813      	ldr	r3, [r2, #0]
 80130ae:	f023 0301 	bic.w	r3, r3, #1
 80130b2:	6013      	str	r3, [r2, #0]
 80130b4:	4b2b      	ldr	r3, [pc, #172]	@ (8013164 <CRC_Lock+0xbc>)
 80130b6:	681c      	ldr	r4, [r3, #0]
 80130b8:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 80130bc:	4014      	ands	r4, r2
 80130be:	f24c 2540 	movw	r5, #49728	@ 0xc240
 80130c2:	42ac      	cmp	r4, r5
 80130c4:	d005      	beq.n	80130d2 <CRC_Lock+0x2a>
 80130c6:	681c      	ldr	r4, [r3, #0]
 80130c8:	f24c 2570 	movw	r5, #49776	@ 0xc270
 80130cc:	4014      	ands	r4, r2
 80130ce:	42ac      	cmp	r4, r5
 80130d0:	d125      	bne.n	801311e <CRC_Lock+0x76>
 80130d2:	4b25      	ldr	r3, [pc, #148]	@ (8013168 <CRC_Lock+0xc0>)
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d139      	bne.n	801314e <CRC_Lock+0xa6>
 80130da:	4b24      	ldr	r3, [pc, #144]	@ (801316c <CRC_Lock+0xc4>)
 80130dc:	681a      	ldr	r2, [r3, #0]
 80130de:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80130e2:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 80130e6:	d00d      	beq.n	8013104 <CRC_Lock+0x5c>
 80130e8:	681a      	ldr	r2, [r3, #0]
 80130ea:	f240 4483 	movw	r4, #1155	@ 0x483
 80130ee:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80130f2:	42a2      	cmp	r2, r4
 80130f4:	d006      	beq.n	8013104 <CRC_Lock+0x5c>
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	f240 4285 	movw	r2, #1157	@ 0x485
 80130fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013100:	4293      	cmp	r3, r2
 8013102:	d124      	bne.n	801314e <CRC_Lock+0xa6>
 8013104:	4b1a      	ldr	r3, [pc, #104]	@ (8013170 <CRC_Lock+0xc8>)
 8013106:	2201      	movs	r2, #1
 8013108:	601a      	str	r2, [r3, #0]
 801310a:	681a      	ldr	r2, [r3, #0]
 801310c:	2a00      	cmp	r2, #0
 801310e:	d1fc      	bne.n	801310a <CRC_Lock+0x62>
 8013110:	4b18      	ldr	r3, [pc, #96]	@ (8013174 <CRC_Lock+0xcc>)
 8013112:	6018      	str	r0, [r3, #0]
 8013114:	6818      	ldr	r0, [r3, #0]
 8013116:	1a43      	subs	r3, r0, r1
 8013118:	4258      	negs	r0, r3
 801311a:	4158      	adcs	r0, r3
 801311c:	e00e      	b.n	801313c <CRC_Lock+0x94>
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	4013      	ands	r3, r2
 8013122:	f24d 2220 	movw	r2, #53792	@ 0xd220
 8013126:	4293      	cmp	r3, r2
 8013128:	d111      	bne.n	801314e <CRC_Lock+0xa6>
 801312a:	4b13      	ldr	r3, [pc, #76]	@ (8013178 <CRC_Lock+0xd0>)
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	f240 4286 	movw	r2, #1158	@ 0x486
 8013132:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013136:	4293      	cmp	r3, r2
 8013138:	d001      	beq.n	801313e <CRC_Lock+0x96>
 801313a:	2000      	movs	r0, #0
 801313c:	bd30      	pop	{r4, r5, pc}
 801313e:	4b0f      	ldr	r3, [pc, #60]	@ (801317c <CRC_Lock+0xd4>)
 8013140:	2201      	movs	r2, #1
 8013142:	601a      	str	r2, [r3, #0]
 8013144:	681a      	ldr	r2, [r3, #0]
 8013146:	2a00      	cmp	r2, #0
 8013148:	d1fc      	bne.n	8013144 <CRC_Lock+0x9c>
 801314a:	4b0d      	ldr	r3, [pc, #52]	@ (8013180 <CRC_Lock+0xd8>)
 801314c:	e7e1      	b.n	8013112 <CRC_Lock+0x6a>
 801314e:	4b0d      	ldr	r3, [pc, #52]	@ (8013184 <CRC_Lock+0xdc>)
 8013150:	2201      	movs	r2, #1
 8013152:	601a      	str	r2, [r3, #0]
 8013154:	681a      	ldr	r2, [r3, #0]
 8013156:	2a00      	cmp	r2, #0
 8013158:	d1fc      	bne.n	8013154 <CRC_Lock+0xac>
 801315a:	4b0b      	ldr	r3, [pc, #44]	@ (8013188 <CRC_Lock+0xe0>)
 801315c:	e7d9      	b.n	8013112 <CRC_Lock+0x6a>
 801315e:	bf00      	nop
 8013160:	e0002000 	.word	0xe0002000
 8013164:	e000ed00 	.word	0xe000ed00
 8013168:	e0042000 	.word	0xe0042000
 801316c:	5c001000 	.word	0x5c001000
 8013170:	58024c08 	.word	0x58024c08
 8013174:	58024c00 	.word	0x58024c00
 8013178:	46008ff0 	.word	0x46008ff0
 801317c:	46024c08 	.word	0x46024c08
 8013180:	46024c00 	.word	0x46024c00
 8013184:	40023008 	.word	0x40023008
 8013188:	40023000 	.word	0x40023000

0801318c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801318c:	6101      	str	r1, [r0, #16]
 801318e:	4770      	bx	lr

08013190 <_ZN8touchgfx8Gestures4tickEv>:
 8013190:	7b83      	ldrb	r3, [r0, #14]
 8013192:	b14b      	cbz	r3, 80131a8 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8013194:	8903      	ldrh	r3, [r0, #8]
 8013196:	3301      	adds	r3, #1
 8013198:	b29b      	uxth	r3, r3
 801319a:	2b07      	cmp	r3, #7
 801319c:	8103      	strh	r3, [r0, #8]
 801319e:	bf81      	itttt	hi
 80131a0:	2300      	movhi	r3, #0
 80131a2:	8143      	strhhi	r3, [r0, #10]
 80131a4:	8183      	strhhi	r3, [r0, #12]
 80131a6:	7383      	strbhi	r3, [r0, #14]
 80131a8:	4770      	bx	lr
	...

080131ac <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80131ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80131b0:	4698      	mov	r8, r3
 80131b2:	8883      	ldrh	r3, [r0, #4]
 80131b4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80131b8:	eba8 0303 	sub.w	r3, r8, r3
 80131bc:	b21b      	sxth	r3, r3
 80131be:	4604      	mov	r4, r0
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	4617      	mov	r7, r2
 80131c4:	4a18      	ldr	r2, [pc, #96]	@ (8013228 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 80131c6:	9200      	str	r2, [sp, #0]
 80131c8:	bfb8      	it	lt
 80131ca:	425b      	neglt	r3, r3
 80131cc:	8aa2      	ldrh	r2, [r4, #20]
 80131ce:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 80131d2:	f8ad 800a 	strh.w	r8, [sp, #10]
 80131d6:	b21b      	sxth	r3, r3
 80131d8:	460e      	mov	r6, r1
 80131da:	4293      	cmp	r3, r2
 80131dc:	88c1      	ldrh	r1, [r0, #6]
 80131de:	f8ad 1008 	strh.w	r1, [sp, #8]
 80131e2:	f04f 0000 	mov.w	r0, #0
 80131e6:	f88d 0004 	strb.w	r0, [sp, #4]
 80131ea:	f8ad 500c 	strh.w	r5, [sp, #12]
 80131ee:	dc07      	bgt.n	8013200 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x54>
 80131f0:	1a69      	subs	r1, r5, r1
 80131f2:	b209      	sxth	r1, r1
 80131f4:	2900      	cmp	r1, #0
 80131f6:	bfb8      	it	lt
 80131f8:	4249      	neglt	r1, r1
 80131fa:	b209      	sxth	r1, r1
 80131fc:	428a      	cmp	r2, r1
 80131fe:	da10      	bge.n	8013222 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x76>
 8013200:	6920      	ldr	r0, [r4, #16]
 8013202:	6803      	ldr	r3, [r0, #0]
 8013204:	4669      	mov	r1, sp
 8013206:	685b      	ldr	r3, [r3, #4]
 8013208:	4798      	blx	r3
 801320a:	eba8 0606 	sub.w	r6, r8, r6
 801320e:	2300      	movs	r3, #0
 8013210:	1bef      	subs	r7, r5, r7
 8013212:	2001      	movs	r0, #1
 8013214:	8123      	strh	r3, [r4, #8]
 8013216:	8166      	strh	r6, [r4, #10]
 8013218:	81a7      	strh	r7, [r4, #12]
 801321a:	f8a4 8004 	strh.w	r8, [r4, #4]
 801321e:	80e5      	strh	r5, [r4, #6]
 8013220:	73a0      	strb	r0, [r4, #14]
 8013222:	b004      	add	sp, #16
 8013224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013228:	08015c80 	.word	0x08015c80

0801322c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801322c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801322e:	461e      	mov	r6, r3
 8013230:	1e4b      	subs	r3, r1, #1
 8013232:	2b01      	cmp	r3, #1
 8013234:	b085      	sub	sp, #20
 8013236:	4604      	mov	r4, r0
 8013238:	460d      	mov	r5, r1
 801323a:	4617      	mov	r7, r2
 801323c:	d84b      	bhi.n	80132d6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801323e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8013242:	1cd3      	adds	r3, r2, #3
 8013244:	b29b      	uxth	r3, r3
 8013246:	2b06      	cmp	r3, #6
 8013248:	d916      	bls.n	8013278 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801324a:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 80132ec <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801324e:	f8cd c004 	str.w	ip, [sp, #4]
 8013252:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8013256:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801325a:	6900      	ldr	r0, [r0, #16]
 801325c:	f8ad 100c 	strh.w	r1, [sp, #12]
 8013260:	f04f 0c00 	mov.w	ip, #0
 8013264:	f88d c008 	strb.w	ip, [sp, #8]
 8013268:	f8ad 200a 	strh.w	r2, [sp, #10]
 801326c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013270:	6803      	ldr	r3, [r0, #0]
 8013272:	a901      	add	r1, sp, #4
 8013274:	689b      	ldr	r3, [r3, #8]
 8013276:	4798      	blx	r3
 8013278:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801327c:	1cd3      	adds	r3, r2, #3
 801327e:	b29b      	uxth	r3, r3
 8013280:	2b06      	cmp	r3, #6
 8013282:	d916      	bls.n	80132b2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8013284:	f8df c064 	ldr.w	ip, [pc, #100]	@ 80132ec <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8013288:	f8cd c004 	str.w	ip, [sp, #4]
 801328c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8013290:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8013294:	6920      	ldr	r0, [r4, #16]
 8013296:	f8ad 100c 	strh.w	r1, [sp, #12]
 801329a:	f04f 0c01 	mov.w	ip, #1
 801329e:	f88d c008 	strb.w	ip, [sp, #8]
 80132a2:	f8ad 200a 	strh.w	r2, [sp, #10]
 80132a6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80132aa:	6803      	ldr	r3, [r0, #0]
 80132ac:	a901      	add	r1, sp, #4
 80132ae:	689b      	ldr	r3, [r3, #8]
 80132b0:	4798      	blx	r3
 80132b2:	4b0d      	ldr	r3, [pc, #52]	@ (80132e8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80132b4:	9301      	str	r3, [sp, #4]
 80132b6:	6920      	ldr	r0, [r4, #16]
 80132b8:	f88d 5008 	strb.w	r5, [sp, #8]
 80132bc:	2300      	movs	r3, #0
 80132be:	f8ad 700a 	strh.w	r7, [sp, #10]
 80132c2:	f8ad 600c 	strh.w	r6, [sp, #12]
 80132c6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80132ca:	6803      	ldr	r3, [r0, #0]
 80132cc:	a901      	add	r1, sp, #4
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	4798      	blx	r3
 80132d2:	b005      	add	sp, #20
 80132d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80132d6:	2900      	cmp	r1, #0
 80132d8:	d1eb      	bne.n	80132b2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80132da:	80a2      	strh	r2, [r4, #4]
 80132dc:	80c6      	strh	r6, [r0, #6]
 80132de:	60a1      	str	r1, [r4, #8]
 80132e0:	81a1      	strh	r1, [r4, #12]
 80132e2:	73a1      	strb	r1, [r4, #14]
 80132e4:	e7e5      	b.n	80132b2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80132e6:	bf00      	nop
 80132e8:	08015c6c 	.word	0x08015c6c
 80132ec:	08015c94 	.word	0x08015c94

080132f0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 80132f0:	b570      	push	{r4, r5, r6, lr}
 80132f2:	790b      	ldrb	r3, [r1, #4]
 80132f4:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	bf0c      	ite	eq
 80132fc:	2301      	moveq	r3, #1
 80132fe:	2300      	movne	r3, #0
 8013300:	4604      	mov	r4, r0
 8013302:	460e      	mov	r6, r1
 8013304:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8013308:	d109      	bne.n	801331e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 801330a:	b14d      	cbz	r5, 8013320 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 801330c:	7933      	ldrb	r3, [r6, #4]
 801330e:	2b01      	cmp	r3, #1
 8013310:	d10c      	bne.n	801332c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8013312:	6823      	ldr	r3, [r4, #0]
 8013314:	4620      	mov	r0, r4
 8013316:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013318:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801331c:	4718      	bx	r3
 801331e:	b12d      	cbz	r5, 801332c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8013320:	6823      	ldr	r3, [r4, #0]
 8013322:	4620      	mov	r0, r4
 8013324:	695b      	ldr	r3, [r3, #20]
 8013326:	4798      	blx	r3
 8013328:	2d00      	cmp	r5, #0
 801332a:	d1ef      	bne.n	801330c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801332c:	bd70      	pop	{r4, r5, r6, pc}

0801332e <__aeabi_atexit>:
 801332e:	460b      	mov	r3, r1
 8013330:	4601      	mov	r1, r0
 8013332:	4618      	mov	r0, r3
 8013334:	f000 b910 	b.w	8013558 <__cxa_atexit>

08013338 <_ZdlPvj>:
 8013338:	f000 b812 	b.w	8013360 <_ZdlPv>

0801333c <__cxa_guard_acquire>:
 801333c:	6802      	ldr	r2, [r0, #0]
 801333e:	07d2      	lsls	r2, r2, #31
 8013340:	4603      	mov	r3, r0
 8013342:	d405      	bmi.n	8013350 <__cxa_guard_acquire+0x14>
 8013344:	7842      	ldrb	r2, [r0, #1]
 8013346:	b102      	cbz	r2, 801334a <__cxa_guard_acquire+0xe>
 8013348:	deff      	udf	#255	@ 0xff
 801334a:	2001      	movs	r0, #1
 801334c:	7058      	strb	r0, [r3, #1]
 801334e:	4770      	bx	lr
 8013350:	2000      	movs	r0, #0
 8013352:	4770      	bx	lr

08013354 <__cxa_guard_release>:
 8013354:	2301      	movs	r3, #1
 8013356:	6003      	str	r3, [r0, #0]
 8013358:	4770      	bx	lr

0801335a <__cxa_pure_virtual>:
 801335a:	b508      	push	{r3, lr}
 801335c:	f000 f80e 	bl	801337c <_ZSt9terminatev>

08013360 <_ZdlPv>:
 8013360:	f000 b844 	b.w	80133ec <free>

08013364 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8013364:	b508      	push	{r3, lr}
 8013366:	4780      	blx	r0
 8013368:	f000 f80d 	bl	8013386 <abort>

0801336c <_ZSt13get_terminatev>:
 801336c:	4b02      	ldr	r3, [pc, #8]	@ (8013378 <_ZSt13get_terminatev+0xc>)
 801336e:	6818      	ldr	r0, [r3, #0]
 8013370:	f3bf 8f5b 	dmb	ish
 8013374:	4770      	bx	lr
 8013376:	bf00      	nop
 8013378:	2000008c 	.word	0x2000008c

0801337c <_ZSt9terminatev>:
 801337c:	b508      	push	{r3, lr}
 801337e:	f7ff fff5 	bl	801336c <_ZSt13get_terminatev>
 8013382:	f7ff ffef 	bl	8013364 <_ZN10__cxxabiv111__terminateEPFvvE>

08013386 <abort>:
 8013386:	b508      	push	{r3, lr}
 8013388:	2006      	movs	r0, #6
 801338a:	f000 fa3b 	bl	8013804 <raise>
 801338e:	2001      	movs	r0, #1
 8013390:	f7ee fe20 	bl	8001fd4 <_exit>

08013394 <__assert_func>:
 8013394:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013396:	4614      	mov	r4, r2
 8013398:	461a      	mov	r2, r3
 801339a:	4b09      	ldr	r3, [pc, #36]	@ (80133c0 <__assert_func+0x2c>)
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	4605      	mov	r5, r0
 80133a0:	68d8      	ldr	r0, [r3, #12]
 80133a2:	b954      	cbnz	r4, 80133ba <__assert_func+0x26>
 80133a4:	4b07      	ldr	r3, [pc, #28]	@ (80133c4 <__assert_func+0x30>)
 80133a6:	461c      	mov	r4, r3
 80133a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80133ac:	9100      	str	r1, [sp, #0]
 80133ae:	462b      	mov	r3, r5
 80133b0:	4905      	ldr	r1, [pc, #20]	@ (80133c8 <__assert_func+0x34>)
 80133b2:	f000 f983 	bl	80136bc <fiprintf>
 80133b6:	f7ff ffe6 	bl	8013386 <abort>
 80133ba:	4b04      	ldr	r3, [pc, #16]	@ (80133cc <__assert_func+0x38>)
 80133bc:	e7f4      	b.n	80133a8 <__assert_func+0x14>
 80133be:	bf00      	nop
 80133c0:	2000009c 	.word	0x2000009c
 80133c4:	08015d83 	.word	0x08015d83
 80133c8:	08015d55 	.word	0x08015d55
 80133cc:	08015d48 	.word	0x08015d48

080133d0 <atexit>:
 80133d0:	2300      	movs	r3, #0
 80133d2:	4601      	mov	r1, r0
 80133d4:	461a      	mov	r2, r3
 80133d6:	4618      	mov	r0, r3
 80133d8:	f000 bac2 	b.w	8013960 <__register_exitproc>

080133dc <malloc>:
 80133dc:	4b02      	ldr	r3, [pc, #8]	@ (80133e8 <malloc+0xc>)
 80133de:	4601      	mov	r1, r0
 80133e0:	6818      	ldr	r0, [r3, #0]
 80133e2:	f000 b82d 	b.w	8013440 <_malloc_r>
 80133e6:	bf00      	nop
 80133e8:	2000009c 	.word	0x2000009c

080133ec <free>:
 80133ec:	4b02      	ldr	r3, [pc, #8]	@ (80133f8 <free+0xc>)
 80133ee:	4601      	mov	r1, r0
 80133f0:	6818      	ldr	r0, [r3, #0]
 80133f2:	f000 bb11 	b.w	8013a18 <_free_r>
 80133f6:	bf00      	nop
 80133f8:	2000009c 	.word	0x2000009c

080133fc <sbrk_aligned>:
 80133fc:	b570      	push	{r4, r5, r6, lr}
 80133fe:	4e0f      	ldr	r6, [pc, #60]	@ (801343c <sbrk_aligned+0x40>)
 8013400:	460c      	mov	r4, r1
 8013402:	6831      	ldr	r1, [r6, #0]
 8013404:	4605      	mov	r5, r0
 8013406:	b911      	cbnz	r1, 801340e <sbrk_aligned+0x12>
 8013408:	f000 fa4c 	bl	80138a4 <_sbrk_r>
 801340c:	6030      	str	r0, [r6, #0]
 801340e:	4621      	mov	r1, r4
 8013410:	4628      	mov	r0, r5
 8013412:	f000 fa47 	bl	80138a4 <_sbrk_r>
 8013416:	1c43      	adds	r3, r0, #1
 8013418:	d103      	bne.n	8013422 <sbrk_aligned+0x26>
 801341a:	f04f 34ff 	mov.w	r4, #4294967295
 801341e:	4620      	mov	r0, r4
 8013420:	bd70      	pop	{r4, r5, r6, pc}
 8013422:	1cc4      	adds	r4, r0, #3
 8013424:	f024 0403 	bic.w	r4, r4, #3
 8013428:	42a0      	cmp	r0, r4
 801342a:	d0f8      	beq.n	801341e <sbrk_aligned+0x22>
 801342c:	1a21      	subs	r1, r4, r0
 801342e:	4628      	mov	r0, r5
 8013430:	f000 fa38 	bl	80138a4 <_sbrk_r>
 8013434:	3001      	adds	r0, #1
 8013436:	d1f2      	bne.n	801341e <sbrk_aligned+0x22>
 8013438:	e7ef      	b.n	801341a <sbrk_aligned+0x1e>
 801343a:	bf00      	nop
 801343c:	200126e8 	.word	0x200126e8

08013440 <_malloc_r>:
 8013440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013444:	1ccd      	adds	r5, r1, #3
 8013446:	f025 0503 	bic.w	r5, r5, #3
 801344a:	3508      	adds	r5, #8
 801344c:	2d0c      	cmp	r5, #12
 801344e:	bf38      	it	cc
 8013450:	250c      	movcc	r5, #12
 8013452:	2d00      	cmp	r5, #0
 8013454:	4606      	mov	r6, r0
 8013456:	db01      	blt.n	801345c <_malloc_r+0x1c>
 8013458:	42a9      	cmp	r1, r5
 801345a:	d904      	bls.n	8013466 <_malloc_r+0x26>
 801345c:	230c      	movs	r3, #12
 801345e:	6033      	str	r3, [r6, #0]
 8013460:	2000      	movs	r0, #0
 8013462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013466:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801353c <_malloc_r+0xfc>
 801346a:	f000 f869 	bl	8013540 <__malloc_lock>
 801346e:	f8d8 3000 	ldr.w	r3, [r8]
 8013472:	461c      	mov	r4, r3
 8013474:	bb44      	cbnz	r4, 80134c8 <_malloc_r+0x88>
 8013476:	4629      	mov	r1, r5
 8013478:	4630      	mov	r0, r6
 801347a:	f7ff ffbf 	bl	80133fc <sbrk_aligned>
 801347e:	1c43      	adds	r3, r0, #1
 8013480:	4604      	mov	r4, r0
 8013482:	d158      	bne.n	8013536 <_malloc_r+0xf6>
 8013484:	f8d8 4000 	ldr.w	r4, [r8]
 8013488:	4627      	mov	r7, r4
 801348a:	2f00      	cmp	r7, #0
 801348c:	d143      	bne.n	8013516 <_malloc_r+0xd6>
 801348e:	2c00      	cmp	r4, #0
 8013490:	d04b      	beq.n	801352a <_malloc_r+0xea>
 8013492:	6823      	ldr	r3, [r4, #0]
 8013494:	4639      	mov	r1, r7
 8013496:	4630      	mov	r0, r6
 8013498:	eb04 0903 	add.w	r9, r4, r3
 801349c:	f000 fa02 	bl	80138a4 <_sbrk_r>
 80134a0:	4581      	cmp	r9, r0
 80134a2:	d142      	bne.n	801352a <_malloc_r+0xea>
 80134a4:	6821      	ldr	r1, [r4, #0]
 80134a6:	1a6d      	subs	r5, r5, r1
 80134a8:	4629      	mov	r1, r5
 80134aa:	4630      	mov	r0, r6
 80134ac:	f7ff ffa6 	bl	80133fc <sbrk_aligned>
 80134b0:	3001      	adds	r0, #1
 80134b2:	d03a      	beq.n	801352a <_malloc_r+0xea>
 80134b4:	6823      	ldr	r3, [r4, #0]
 80134b6:	442b      	add	r3, r5
 80134b8:	6023      	str	r3, [r4, #0]
 80134ba:	f8d8 3000 	ldr.w	r3, [r8]
 80134be:	685a      	ldr	r2, [r3, #4]
 80134c0:	bb62      	cbnz	r2, 801351c <_malloc_r+0xdc>
 80134c2:	f8c8 7000 	str.w	r7, [r8]
 80134c6:	e00f      	b.n	80134e8 <_malloc_r+0xa8>
 80134c8:	6822      	ldr	r2, [r4, #0]
 80134ca:	1b52      	subs	r2, r2, r5
 80134cc:	d420      	bmi.n	8013510 <_malloc_r+0xd0>
 80134ce:	2a0b      	cmp	r2, #11
 80134d0:	d917      	bls.n	8013502 <_malloc_r+0xc2>
 80134d2:	1961      	adds	r1, r4, r5
 80134d4:	42a3      	cmp	r3, r4
 80134d6:	6025      	str	r5, [r4, #0]
 80134d8:	bf18      	it	ne
 80134da:	6059      	strne	r1, [r3, #4]
 80134dc:	6863      	ldr	r3, [r4, #4]
 80134de:	bf08      	it	eq
 80134e0:	f8c8 1000 	streq.w	r1, [r8]
 80134e4:	5162      	str	r2, [r4, r5]
 80134e6:	604b      	str	r3, [r1, #4]
 80134e8:	4630      	mov	r0, r6
 80134ea:	f000 f82f 	bl	801354c <__malloc_unlock>
 80134ee:	f104 000b 	add.w	r0, r4, #11
 80134f2:	1d23      	adds	r3, r4, #4
 80134f4:	f020 0007 	bic.w	r0, r0, #7
 80134f8:	1ac2      	subs	r2, r0, r3
 80134fa:	bf1c      	itt	ne
 80134fc:	1a1b      	subne	r3, r3, r0
 80134fe:	50a3      	strne	r3, [r4, r2]
 8013500:	e7af      	b.n	8013462 <_malloc_r+0x22>
 8013502:	6862      	ldr	r2, [r4, #4]
 8013504:	42a3      	cmp	r3, r4
 8013506:	bf0c      	ite	eq
 8013508:	f8c8 2000 	streq.w	r2, [r8]
 801350c:	605a      	strne	r2, [r3, #4]
 801350e:	e7eb      	b.n	80134e8 <_malloc_r+0xa8>
 8013510:	4623      	mov	r3, r4
 8013512:	6864      	ldr	r4, [r4, #4]
 8013514:	e7ae      	b.n	8013474 <_malloc_r+0x34>
 8013516:	463c      	mov	r4, r7
 8013518:	687f      	ldr	r7, [r7, #4]
 801351a:	e7b6      	b.n	801348a <_malloc_r+0x4a>
 801351c:	461a      	mov	r2, r3
 801351e:	685b      	ldr	r3, [r3, #4]
 8013520:	42a3      	cmp	r3, r4
 8013522:	d1fb      	bne.n	801351c <_malloc_r+0xdc>
 8013524:	2300      	movs	r3, #0
 8013526:	6053      	str	r3, [r2, #4]
 8013528:	e7de      	b.n	80134e8 <_malloc_r+0xa8>
 801352a:	230c      	movs	r3, #12
 801352c:	6033      	str	r3, [r6, #0]
 801352e:	4630      	mov	r0, r6
 8013530:	f000 f80c 	bl	801354c <__malloc_unlock>
 8013534:	e794      	b.n	8013460 <_malloc_r+0x20>
 8013536:	6005      	str	r5, [r0, #0]
 8013538:	e7d6      	b.n	80134e8 <_malloc_r+0xa8>
 801353a:	bf00      	nop
 801353c:	200126ec 	.word	0x200126ec

08013540 <__malloc_lock>:
 8013540:	4801      	ldr	r0, [pc, #4]	@ (8013548 <__malloc_lock+0x8>)
 8013542:	f000 b9fc 	b.w	801393e <__retarget_lock_acquire_recursive>
 8013546:	bf00      	nop
 8013548:	20012830 	.word	0x20012830

0801354c <__malloc_unlock>:
 801354c:	4801      	ldr	r0, [pc, #4]	@ (8013554 <__malloc_unlock+0x8>)
 801354e:	f000 b9f7 	b.w	8013940 <__retarget_lock_release_recursive>
 8013552:	bf00      	nop
 8013554:	20012830 	.word	0x20012830

08013558 <__cxa_atexit>:
 8013558:	b510      	push	{r4, lr}
 801355a:	4604      	mov	r4, r0
 801355c:	4804      	ldr	r0, [pc, #16]	@ (8013570 <__cxa_atexit+0x18>)
 801355e:	4613      	mov	r3, r2
 8013560:	b120      	cbz	r0, 801356c <__cxa_atexit+0x14>
 8013562:	460a      	mov	r2, r1
 8013564:	2002      	movs	r0, #2
 8013566:	4621      	mov	r1, r4
 8013568:	f000 f9fa 	bl	8013960 <__register_exitproc>
 801356c:	bd10      	pop	{r4, pc}
 801356e:	bf00      	nop
 8013570:	08013961 	.word	0x08013961

08013574 <std>:
 8013574:	2300      	movs	r3, #0
 8013576:	b510      	push	{r4, lr}
 8013578:	4604      	mov	r4, r0
 801357a:	e9c0 3300 	strd	r3, r3, [r0]
 801357e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013582:	6083      	str	r3, [r0, #8]
 8013584:	8181      	strh	r1, [r0, #12]
 8013586:	6643      	str	r3, [r0, #100]	@ 0x64
 8013588:	81c2      	strh	r2, [r0, #14]
 801358a:	6183      	str	r3, [r0, #24]
 801358c:	4619      	mov	r1, r3
 801358e:	2208      	movs	r2, #8
 8013590:	305c      	adds	r0, #92	@ 0x5c
 8013592:	f000 f906 	bl	80137a2 <memset>
 8013596:	4b0d      	ldr	r3, [pc, #52]	@ (80135cc <std+0x58>)
 8013598:	6263      	str	r3, [r4, #36]	@ 0x24
 801359a:	4b0d      	ldr	r3, [pc, #52]	@ (80135d0 <std+0x5c>)
 801359c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801359e:	4b0d      	ldr	r3, [pc, #52]	@ (80135d4 <std+0x60>)
 80135a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80135a2:	4b0d      	ldr	r3, [pc, #52]	@ (80135d8 <std+0x64>)
 80135a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80135a6:	4b0d      	ldr	r3, [pc, #52]	@ (80135dc <std+0x68>)
 80135a8:	6224      	str	r4, [r4, #32]
 80135aa:	429c      	cmp	r4, r3
 80135ac:	d006      	beq.n	80135bc <std+0x48>
 80135ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80135b2:	4294      	cmp	r4, r2
 80135b4:	d002      	beq.n	80135bc <std+0x48>
 80135b6:	33d0      	adds	r3, #208	@ 0xd0
 80135b8:	429c      	cmp	r4, r3
 80135ba:	d105      	bne.n	80135c8 <std+0x54>
 80135bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80135c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80135c4:	f000 b9ba 	b.w	801393c <__retarget_lock_init_recursive>
 80135c8:	bd10      	pop	{r4, pc}
 80135ca:	bf00      	nop
 80135cc:	0801371d 	.word	0x0801371d
 80135d0:	0801373f 	.word	0x0801373f
 80135d4:	08013777 	.word	0x08013777
 80135d8:	0801379b 	.word	0x0801379b
 80135dc:	200126f0 	.word	0x200126f0

080135e0 <stdio_exit_handler>:
 80135e0:	4a02      	ldr	r2, [pc, #8]	@ (80135ec <stdio_exit_handler+0xc>)
 80135e2:	4903      	ldr	r1, [pc, #12]	@ (80135f0 <stdio_exit_handler+0x10>)
 80135e4:	4803      	ldr	r0, [pc, #12]	@ (80135f4 <stdio_exit_handler+0x14>)
 80135e6:	f000 b87b 	b.w	80136e0 <_fwalk_sglue>
 80135ea:	bf00      	nop
 80135ec:	20000090 	.word	0x20000090
 80135f0:	08014155 	.word	0x08014155
 80135f4:	200000a0 	.word	0x200000a0

080135f8 <cleanup_stdio>:
 80135f8:	6841      	ldr	r1, [r0, #4]
 80135fa:	4b0c      	ldr	r3, [pc, #48]	@ (801362c <cleanup_stdio+0x34>)
 80135fc:	4299      	cmp	r1, r3
 80135fe:	b510      	push	{r4, lr}
 8013600:	4604      	mov	r4, r0
 8013602:	d001      	beq.n	8013608 <cleanup_stdio+0x10>
 8013604:	f000 fda6 	bl	8014154 <_fflush_r>
 8013608:	68a1      	ldr	r1, [r4, #8]
 801360a:	4b09      	ldr	r3, [pc, #36]	@ (8013630 <cleanup_stdio+0x38>)
 801360c:	4299      	cmp	r1, r3
 801360e:	d002      	beq.n	8013616 <cleanup_stdio+0x1e>
 8013610:	4620      	mov	r0, r4
 8013612:	f000 fd9f 	bl	8014154 <_fflush_r>
 8013616:	68e1      	ldr	r1, [r4, #12]
 8013618:	4b06      	ldr	r3, [pc, #24]	@ (8013634 <cleanup_stdio+0x3c>)
 801361a:	4299      	cmp	r1, r3
 801361c:	d004      	beq.n	8013628 <cleanup_stdio+0x30>
 801361e:	4620      	mov	r0, r4
 8013620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013624:	f000 bd96 	b.w	8014154 <_fflush_r>
 8013628:	bd10      	pop	{r4, pc}
 801362a:	bf00      	nop
 801362c:	200126f0 	.word	0x200126f0
 8013630:	20012758 	.word	0x20012758
 8013634:	200127c0 	.word	0x200127c0

08013638 <global_stdio_init.part.0>:
 8013638:	b510      	push	{r4, lr}
 801363a:	4b0b      	ldr	r3, [pc, #44]	@ (8013668 <global_stdio_init.part.0+0x30>)
 801363c:	4c0b      	ldr	r4, [pc, #44]	@ (801366c <global_stdio_init.part.0+0x34>)
 801363e:	4a0c      	ldr	r2, [pc, #48]	@ (8013670 <global_stdio_init.part.0+0x38>)
 8013640:	601a      	str	r2, [r3, #0]
 8013642:	4620      	mov	r0, r4
 8013644:	2200      	movs	r2, #0
 8013646:	2104      	movs	r1, #4
 8013648:	f7ff ff94 	bl	8013574 <std>
 801364c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013650:	2201      	movs	r2, #1
 8013652:	2109      	movs	r1, #9
 8013654:	f7ff ff8e 	bl	8013574 <std>
 8013658:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801365c:	2202      	movs	r2, #2
 801365e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013662:	2112      	movs	r1, #18
 8013664:	f7ff bf86 	b.w	8013574 <std>
 8013668:	20012828 	.word	0x20012828
 801366c:	200126f0 	.word	0x200126f0
 8013670:	080135e1 	.word	0x080135e1

08013674 <__sfp_lock_acquire>:
 8013674:	4801      	ldr	r0, [pc, #4]	@ (801367c <__sfp_lock_acquire+0x8>)
 8013676:	f000 b962 	b.w	801393e <__retarget_lock_acquire_recursive>
 801367a:	bf00      	nop
 801367c:	20012832 	.word	0x20012832

08013680 <__sfp_lock_release>:
 8013680:	4801      	ldr	r0, [pc, #4]	@ (8013688 <__sfp_lock_release+0x8>)
 8013682:	f000 b95d 	b.w	8013940 <__retarget_lock_release_recursive>
 8013686:	bf00      	nop
 8013688:	20012832 	.word	0x20012832

0801368c <__sinit>:
 801368c:	b510      	push	{r4, lr}
 801368e:	4604      	mov	r4, r0
 8013690:	f7ff fff0 	bl	8013674 <__sfp_lock_acquire>
 8013694:	6a23      	ldr	r3, [r4, #32]
 8013696:	b11b      	cbz	r3, 80136a0 <__sinit+0x14>
 8013698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801369c:	f7ff bff0 	b.w	8013680 <__sfp_lock_release>
 80136a0:	4b04      	ldr	r3, [pc, #16]	@ (80136b4 <__sinit+0x28>)
 80136a2:	6223      	str	r3, [r4, #32]
 80136a4:	4b04      	ldr	r3, [pc, #16]	@ (80136b8 <__sinit+0x2c>)
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d1f5      	bne.n	8013698 <__sinit+0xc>
 80136ac:	f7ff ffc4 	bl	8013638 <global_stdio_init.part.0>
 80136b0:	e7f2      	b.n	8013698 <__sinit+0xc>
 80136b2:	bf00      	nop
 80136b4:	080135f9 	.word	0x080135f9
 80136b8:	20012828 	.word	0x20012828

080136bc <fiprintf>:
 80136bc:	b40e      	push	{r1, r2, r3}
 80136be:	b503      	push	{r0, r1, lr}
 80136c0:	4601      	mov	r1, r0
 80136c2:	ab03      	add	r3, sp, #12
 80136c4:	4805      	ldr	r0, [pc, #20]	@ (80136dc <fiprintf+0x20>)
 80136c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80136ca:	6800      	ldr	r0, [r0, #0]
 80136cc:	9301      	str	r3, [sp, #4]
 80136ce:	f000 fa17 	bl	8013b00 <_vfiprintf_r>
 80136d2:	b002      	add	sp, #8
 80136d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80136d8:	b003      	add	sp, #12
 80136da:	4770      	bx	lr
 80136dc:	2000009c 	.word	0x2000009c

080136e0 <_fwalk_sglue>:
 80136e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80136e4:	4607      	mov	r7, r0
 80136e6:	4688      	mov	r8, r1
 80136e8:	4614      	mov	r4, r2
 80136ea:	2600      	movs	r6, #0
 80136ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80136f0:	f1b9 0901 	subs.w	r9, r9, #1
 80136f4:	d505      	bpl.n	8013702 <_fwalk_sglue+0x22>
 80136f6:	6824      	ldr	r4, [r4, #0]
 80136f8:	2c00      	cmp	r4, #0
 80136fa:	d1f7      	bne.n	80136ec <_fwalk_sglue+0xc>
 80136fc:	4630      	mov	r0, r6
 80136fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013702:	89ab      	ldrh	r3, [r5, #12]
 8013704:	2b01      	cmp	r3, #1
 8013706:	d907      	bls.n	8013718 <_fwalk_sglue+0x38>
 8013708:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801370c:	3301      	adds	r3, #1
 801370e:	d003      	beq.n	8013718 <_fwalk_sglue+0x38>
 8013710:	4629      	mov	r1, r5
 8013712:	4638      	mov	r0, r7
 8013714:	47c0      	blx	r8
 8013716:	4306      	orrs	r6, r0
 8013718:	3568      	adds	r5, #104	@ 0x68
 801371a:	e7e9      	b.n	80136f0 <_fwalk_sglue+0x10>

0801371c <__sread>:
 801371c:	b510      	push	{r4, lr}
 801371e:	460c      	mov	r4, r1
 8013720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013724:	f000 f898 	bl	8013858 <_read_r>
 8013728:	2800      	cmp	r0, #0
 801372a:	bfab      	itete	ge
 801372c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801372e:	89a3      	ldrhlt	r3, [r4, #12]
 8013730:	181b      	addge	r3, r3, r0
 8013732:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013736:	bfac      	ite	ge
 8013738:	6563      	strge	r3, [r4, #84]	@ 0x54
 801373a:	81a3      	strhlt	r3, [r4, #12]
 801373c:	bd10      	pop	{r4, pc}

0801373e <__swrite>:
 801373e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013742:	461f      	mov	r7, r3
 8013744:	898b      	ldrh	r3, [r1, #12]
 8013746:	05db      	lsls	r3, r3, #23
 8013748:	4605      	mov	r5, r0
 801374a:	460c      	mov	r4, r1
 801374c:	4616      	mov	r6, r2
 801374e:	d505      	bpl.n	801375c <__swrite+0x1e>
 8013750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013754:	2302      	movs	r3, #2
 8013756:	2200      	movs	r2, #0
 8013758:	f000 f86c 	bl	8013834 <_lseek_r>
 801375c:	89a3      	ldrh	r3, [r4, #12]
 801375e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013762:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013766:	81a3      	strh	r3, [r4, #12]
 8013768:	4632      	mov	r2, r6
 801376a:	463b      	mov	r3, r7
 801376c:	4628      	mov	r0, r5
 801376e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013772:	f000 b8a7 	b.w	80138c4 <_write_r>

08013776 <__sseek>:
 8013776:	b510      	push	{r4, lr}
 8013778:	460c      	mov	r4, r1
 801377a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801377e:	f000 f859 	bl	8013834 <_lseek_r>
 8013782:	1c43      	adds	r3, r0, #1
 8013784:	89a3      	ldrh	r3, [r4, #12]
 8013786:	bf15      	itete	ne
 8013788:	6560      	strne	r0, [r4, #84]	@ 0x54
 801378a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801378e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013792:	81a3      	strheq	r3, [r4, #12]
 8013794:	bf18      	it	ne
 8013796:	81a3      	strhne	r3, [r4, #12]
 8013798:	bd10      	pop	{r4, pc}

0801379a <__sclose>:
 801379a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801379e:	f000 b839 	b.w	8013814 <_close_r>

080137a2 <memset>:
 80137a2:	4402      	add	r2, r0
 80137a4:	4603      	mov	r3, r0
 80137a6:	4293      	cmp	r3, r2
 80137a8:	d100      	bne.n	80137ac <memset+0xa>
 80137aa:	4770      	bx	lr
 80137ac:	f803 1b01 	strb.w	r1, [r3], #1
 80137b0:	e7f9      	b.n	80137a6 <memset+0x4>

080137b2 <_raise_r>:
 80137b2:	291f      	cmp	r1, #31
 80137b4:	b538      	push	{r3, r4, r5, lr}
 80137b6:	4605      	mov	r5, r0
 80137b8:	460c      	mov	r4, r1
 80137ba:	d904      	bls.n	80137c6 <_raise_r+0x14>
 80137bc:	2316      	movs	r3, #22
 80137be:	6003      	str	r3, [r0, #0]
 80137c0:	f04f 30ff 	mov.w	r0, #4294967295
 80137c4:	bd38      	pop	{r3, r4, r5, pc}
 80137c6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80137c8:	b112      	cbz	r2, 80137d0 <_raise_r+0x1e>
 80137ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80137ce:	b94b      	cbnz	r3, 80137e4 <_raise_r+0x32>
 80137d0:	4628      	mov	r0, r5
 80137d2:	f000 f865 	bl	80138a0 <_getpid_r>
 80137d6:	4622      	mov	r2, r4
 80137d8:	4601      	mov	r1, r0
 80137da:	4628      	mov	r0, r5
 80137dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80137e0:	f000 b84c 	b.w	801387c <_kill_r>
 80137e4:	2b01      	cmp	r3, #1
 80137e6:	d00a      	beq.n	80137fe <_raise_r+0x4c>
 80137e8:	1c59      	adds	r1, r3, #1
 80137ea:	d103      	bne.n	80137f4 <_raise_r+0x42>
 80137ec:	2316      	movs	r3, #22
 80137ee:	6003      	str	r3, [r0, #0]
 80137f0:	2001      	movs	r0, #1
 80137f2:	e7e7      	b.n	80137c4 <_raise_r+0x12>
 80137f4:	2100      	movs	r1, #0
 80137f6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80137fa:	4620      	mov	r0, r4
 80137fc:	4798      	blx	r3
 80137fe:	2000      	movs	r0, #0
 8013800:	e7e0      	b.n	80137c4 <_raise_r+0x12>
	...

08013804 <raise>:
 8013804:	4b02      	ldr	r3, [pc, #8]	@ (8013810 <raise+0xc>)
 8013806:	4601      	mov	r1, r0
 8013808:	6818      	ldr	r0, [r3, #0]
 801380a:	f7ff bfd2 	b.w	80137b2 <_raise_r>
 801380e:	bf00      	nop
 8013810:	2000009c 	.word	0x2000009c

08013814 <_close_r>:
 8013814:	b538      	push	{r3, r4, r5, lr}
 8013816:	4d06      	ldr	r5, [pc, #24]	@ (8013830 <_close_r+0x1c>)
 8013818:	2300      	movs	r3, #0
 801381a:	4604      	mov	r4, r0
 801381c:	4608      	mov	r0, r1
 801381e:	602b      	str	r3, [r5, #0]
 8013820:	f7ee fbfa 	bl	8002018 <_close>
 8013824:	1c43      	adds	r3, r0, #1
 8013826:	d102      	bne.n	801382e <_close_r+0x1a>
 8013828:	682b      	ldr	r3, [r5, #0]
 801382a:	b103      	cbz	r3, 801382e <_close_r+0x1a>
 801382c:	6023      	str	r3, [r4, #0]
 801382e:	bd38      	pop	{r3, r4, r5, pc}
 8013830:	2001282c 	.word	0x2001282c

08013834 <_lseek_r>:
 8013834:	b538      	push	{r3, r4, r5, lr}
 8013836:	4d07      	ldr	r5, [pc, #28]	@ (8013854 <_lseek_r+0x20>)
 8013838:	4604      	mov	r4, r0
 801383a:	4608      	mov	r0, r1
 801383c:	4611      	mov	r1, r2
 801383e:	2200      	movs	r2, #0
 8013840:	602a      	str	r2, [r5, #0]
 8013842:	461a      	mov	r2, r3
 8013844:	f7ee fbf2 	bl	800202c <_lseek>
 8013848:	1c43      	adds	r3, r0, #1
 801384a:	d102      	bne.n	8013852 <_lseek_r+0x1e>
 801384c:	682b      	ldr	r3, [r5, #0]
 801384e:	b103      	cbz	r3, 8013852 <_lseek_r+0x1e>
 8013850:	6023      	str	r3, [r4, #0]
 8013852:	bd38      	pop	{r3, r4, r5, pc}
 8013854:	2001282c 	.word	0x2001282c

08013858 <_read_r>:
 8013858:	b538      	push	{r3, r4, r5, lr}
 801385a:	4d07      	ldr	r5, [pc, #28]	@ (8013878 <_read_r+0x20>)
 801385c:	4604      	mov	r4, r0
 801385e:	4608      	mov	r0, r1
 8013860:	4611      	mov	r1, r2
 8013862:	2200      	movs	r2, #0
 8013864:	602a      	str	r2, [r5, #0]
 8013866:	461a      	mov	r2, r3
 8013868:	f7ee fbba 	bl	8001fe0 <_read>
 801386c:	1c43      	adds	r3, r0, #1
 801386e:	d102      	bne.n	8013876 <_read_r+0x1e>
 8013870:	682b      	ldr	r3, [r5, #0]
 8013872:	b103      	cbz	r3, 8013876 <_read_r+0x1e>
 8013874:	6023      	str	r3, [r4, #0]
 8013876:	bd38      	pop	{r3, r4, r5, pc}
 8013878:	2001282c 	.word	0x2001282c

0801387c <_kill_r>:
 801387c:	b538      	push	{r3, r4, r5, lr}
 801387e:	4d07      	ldr	r5, [pc, #28]	@ (801389c <_kill_r+0x20>)
 8013880:	2300      	movs	r3, #0
 8013882:	4604      	mov	r4, r0
 8013884:	4608      	mov	r0, r1
 8013886:	4611      	mov	r1, r2
 8013888:	602b      	str	r3, [r5, #0]
 801388a:	f7ee fb9b 	bl	8001fc4 <_kill>
 801388e:	1c43      	adds	r3, r0, #1
 8013890:	d102      	bne.n	8013898 <_kill_r+0x1c>
 8013892:	682b      	ldr	r3, [r5, #0]
 8013894:	b103      	cbz	r3, 8013898 <_kill_r+0x1c>
 8013896:	6023      	str	r3, [r4, #0]
 8013898:	bd38      	pop	{r3, r4, r5, pc}
 801389a:	bf00      	nop
 801389c:	2001282c 	.word	0x2001282c

080138a0 <_getpid_r>:
 80138a0:	f7ee bb8e 	b.w	8001fc0 <_getpid>

080138a4 <_sbrk_r>:
 80138a4:	b538      	push	{r3, r4, r5, lr}
 80138a6:	4d06      	ldr	r5, [pc, #24]	@ (80138c0 <_sbrk_r+0x1c>)
 80138a8:	2300      	movs	r3, #0
 80138aa:	4604      	mov	r4, r0
 80138ac:	4608      	mov	r0, r1
 80138ae:	602b      	str	r3, [r5, #0]
 80138b0:	f7ee fbbe 	bl	8002030 <_sbrk>
 80138b4:	1c43      	adds	r3, r0, #1
 80138b6:	d102      	bne.n	80138be <_sbrk_r+0x1a>
 80138b8:	682b      	ldr	r3, [r5, #0]
 80138ba:	b103      	cbz	r3, 80138be <_sbrk_r+0x1a>
 80138bc:	6023      	str	r3, [r4, #0]
 80138be:	bd38      	pop	{r3, r4, r5, pc}
 80138c0:	2001282c 	.word	0x2001282c

080138c4 <_write_r>:
 80138c4:	b538      	push	{r3, r4, r5, lr}
 80138c6:	4d07      	ldr	r5, [pc, #28]	@ (80138e4 <_write_r+0x20>)
 80138c8:	4604      	mov	r4, r0
 80138ca:	4608      	mov	r0, r1
 80138cc:	4611      	mov	r1, r2
 80138ce:	2200      	movs	r2, #0
 80138d0:	602a      	str	r2, [r5, #0]
 80138d2:	461a      	mov	r2, r3
 80138d4:	f7ee fb92 	bl	8001ffc <_write>
 80138d8:	1c43      	adds	r3, r0, #1
 80138da:	d102      	bne.n	80138e2 <_write_r+0x1e>
 80138dc:	682b      	ldr	r3, [r5, #0]
 80138de:	b103      	cbz	r3, 80138e2 <_write_r+0x1e>
 80138e0:	6023      	str	r3, [r4, #0]
 80138e2:	bd38      	pop	{r3, r4, r5, pc}
 80138e4:	2001282c 	.word	0x2001282c

080138e8 <__errno>:
 80138e8:	4b01      	ldr	r3, [pc, #4]	@ (80138f0 <__errno+0x8>)
 80138ea:	6818      	ldr	r0, [r3, #0]
 80138ec:	4770      	bx	lr
 80138ee:	bf00      	nop
 80138f0:	2000009c 	.word	0x2000009c

080138f4 <__libc_init_array>:
 80138f4:	b570      	push	{r4, r5, r6, lr}
 80138f6:	4d0d      	ldr	r5, [pc, #52]	@ (801392c <__libc_init_array+0x38>)
 80138f8:	4c0d      	ldr	r4, [pc, #52]	@ (8013930 <__libc_init_array+0x3c>)
 80138fa:	1b64      	subs	r4, r4, r5
 80138fc:	10a4      	asrs	r4, r4, #2
 80138fe:	2600      	movs	r6, #0
 8013900:	42a6      	cmp	r6, r4
 8013902:	d109      	bne.n	8013918 <__libc_init_array+0x24>
 8013904:	4d0b      	ldr	r5, [pc, #44]	@ (8013934 <__libc_init_array+0x40>)
 8013906:	4c0c      	ldr	r4, [pc, #48]	@ (8013938 <__libc_init_array+0x44>)
 8013908:	f000 fd64 	bl	80143d4 <_init>
 801390c:	1b64      	subs	r4, r4, r5
 801390e:	10a4      	asrs	r4, r4, #2
 8013910:	2600      	movs	r6, #0
 8013912:	42a6      	cmp	r6, r4
 8013914:	d105      	bne.n	8013922 <__libc_init_array+0x2e>
 8013916:	bd70      	pop	{r4, r5, r6, pc}
 8013918:	f855 3b04 	ldr.w	r3, [r5], #4
 801391c:	4798      	blx	r3
 801391e:	3601      	adds	r6, #1
 8013920:	e7ee      	b.n	8013900 <__libc_init_array+0xc>
 8013922:	f855 3b04 	ldr.w	r3, [r5], #4
 8013926:	4798      	blx	r3
 8013928:	3601      	adds	r6, #1
 801392a:	e7f2      	b.n	8013912 <__libc_init_array+0x1e>
 801392c:	080f878c 	.word	0x080f878c
 8013930:	080f878c 	.word	0x080f878c
 8013934:	080f878c 	.word	0x080f878c
 8013938:	080f87a0 	.word	0x080f87a0

0801393c <__retarget_lock_init_recursive>:
 801393c:	4770      	bx	lr

0801393e <__retarget_lock_acquire_recursive>:
 801393e:	4770      	bx	lr

08013940 <__retarget_lock_release_recursive>:
 8013940:	4770      	bx	lr

08013942 <memcpy>:
 8013942:	440a      	add	r2, r1
 8013944:	4291      	cmp	r1, r2
 8013946:	f100 33ff 	add.w	r3, r0, #4294967295
 801394a:	d100      	bne.n	801394e <memcpy+0xc>
 801394c:	4770      	bx	lr
 801394e:	b510      	push	{r4, lr}
 8013950:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013954:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013958:	4291      	cmp	r1, r2
 801395a:	d1f9      	bne.n	8013950 <memcpy+0xe>
 801395c:	bd10      	pop	{r4, pc}
	...

08013960 <__register_exitproc>:
 8013960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013964:	4d27      	ldr	r5, [pc, #156]	@ (8013a04 <__register_exitproc+0xa4>)
 8013966:	4607      	mov	r7, r0
 8013968:	6828      	ldr	r0, [r5, #0]
 801396a:	4691      	mov	r9, r2
 801396c:	460e      	mov	r6, r1
 801396e:	4698      	mov	r8, r3
 8013970:	f7ff ffe5 	bl	801393e <__retarget_lock_acquire_recursive>
 8013974:	4a24      	ldr	r2, [pc, #144]	@ (8013a08 <__register_exitproc+0xa8>)
 8013976:	6814      	ldr	r4, [r2, #0]
 8013978:	b93c      	cbnz	r4, 801398a <__register_exitproc+0x2a>
 801397a:	4b24      	ldr	r3, [pc, #144]	@ (8013a0c <__register_exitproc+0xac>)
 801397c:	6013      	str	r3, [r2, #0]
 801397e:	4a24      	ldr	r2, [pc, #144]	@ (8013a10 <__register_exitproc+0xb0>)
 8013980:	b112      	cbz	r2, 8013988 <__register_exitproc+0x28>
 8013982:	6812      	ldr	r2, [r2, #0]
 8013984:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8013988:	4c20      	ldr	r4, [pc, #128]	@ (8013a0c <__register_exitproc+0xac>)
 801398a:	6863      	ldr	r3, [r4, #4]
 801398c:	2b1f      	cmp	r3, #31
 801398e:	dd06      	ble.n	801399e <__register_exitproc+0x3e>
 8013990:	6828      	ldr	r0, [r5, #0]
 8013992:	f7ff ffd5 	bl	8013940 <__retarget_lock_release_recursive>
 8013996:	f04f 30ff 	mov.w	r0, #4294967295
 801399a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801399e:	b32f      	cbz	r7, 80139ec <__register_exitproc+0x8c>
 80139a0:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 80139a4:	b968      	cbnz	r0, 80139c2 <__register_exitproc+0x62>
 80139a6:	4b1b      	ldr	r3, [pc, #108]	@ (8013a14 <__register_exitproc+0xb4>)
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d0f1      	beq.n	8013990 <__register_exitproc+0x30>
 80139ac:	f44f 7084 	mov.w	r0, #264	@ 0x108
 80139b0:	f7ff fd14 	bl	80133dc <malloc>
 80139b4:	2800      	cmp	r0, #0
 80139b6:	d0eb      	beq.n	8013990 <__register_exitproc+0x30>
 80139b8:	2300      	movs	r3, #0
 80139ba:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 80139be:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 80139c2:	6863      	ldr	r3, [r4, #4]
 80139c4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80139c8:	2201      	movs	r2, #1
 80139ca:	409a      	lsls	r2, r3
 80139cc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80139d0:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 80139d4:	4313      	orrs	r3, r2
 80139d6:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 80139da:	2f02      	cmp	r7, #2
 80139dc:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 80139e0:	bf02      	ittt	eq
 80139e2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 80139e6:	4313      	orreq	r3, r2
 80139e8:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 80139ec:	6863      	ldr	r3, [r4, #4]
 80139ee:	6828      	ldr	r0, [r5, #0]
 80139f0:	1c5a      	adds	r2, r3, #1
 80139f2:	3302      	adds	r3, #2
 80139f4:	6062      	str	r2, [r4, #4]
 80139f6:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 80139fa:	f7ff ffa1 	bl	8013940 <__retarget_lock_release_recursive>
 80139fe:	2000      	movs	r0, #0
 8013a00:	e7cb      	b.n	801399a <__register_exitproc+0x3a>
 8013a02:	bf00      	nop
 8013a04:	200000ec 	.word	0x200000ec
 8013a08:	200128c0 	.word	0x200128c0
 8013a0c:	20012834 	.word	0x20012834
 8013a10:	08015d84 	.word	0x08015d84
 8013a14:	080133dd 	.word	0x080133dd

08013a18 <_free_r>:
 8013a18:	b538      	push	{r3, r4, r5, lr}
 8013a1a:	4605      	mov	r5, r0
 8013a1c:	2900      	cmp	r1, #0
 8013a1e:	d041      	beq.n	8013aa4 <_free_r+0x8c>
 8013a20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013a24:	1f0c      	subs	r4, r1, #4
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	bfb8      	it	lt
 8013a2a:	18e4      	addlt	r4, r4, r3
 8013a2c:	f7ff fd88 	bl	8013540 <__malloc_lock>
 8013a30:	4a1d      	ldr	r2, [pc, #116]	@ (8013aa8 <_free_r+0x90>)
 8013a32:	6813      	ldr	r3, [r2, #0]
 8013a34:	b933      	cbnz	r3, 8013a44 <_free_r+0x2c>
 8013a36:	6063      	str	r3, [r4, #4]
 8013a38:	6014      	str	r4, [r2, #0]
 8013a3a:	4628      	mov	r0, r5
 8013a3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013a40:	f7ff bd84 	b.w	801354c <__malloc_unlock>
 8013a44:	42a3      	cmp	r3, r4
 8013a46:	d908      	bls.n	8013a5a <_free_r+0x42>
 8013a48:	6820      	ldr	r0, [r4, #0]
 8013a4a:	1821      	adds	r1, r4, r0
 8013a4c:	428b      	cmp	r3, r1
 8013a4e:	bf01      	itttt	eq
 8013a50:	6819      	ldreq	r1, [r3, #0]
 8013a52:	685b      	ldreq	r3, [r3, #4]
 8013a54:	1809      	addeq	r1, r1, r0
 8013a56:	6021      	streq	r1, [r4, #0]
 8013a58:	e7ed      	b.n	8013a36 <_free_r+0x1e>
 8013a5a:	461a      	mov	r2, r3
 8013a5c:	685b      	ldr	r3, [r3, #4]
 8013a5e:	b10b      	cbz	r3, 8013a64 <_free_r+0x4c>
 8013a60:	42a3      	cmp	r3, r4
 8013a62:	d9fa      	bls.n	8013a5a <_free_r+0x42>
 8013a64:	6811      	ldr	r1, [r2, #0]
 8013a66:	1850      	adds	r0, r2, r1
 8013a68:	42a0      	cmp	r0, r4
 8013a6a:	d10b      	bne.n	8013a84 <_free_r+0x6c>
 8013a6c:	6820      	ldr	r0, [r4, #0]
 8013a6e:	4401      	add	r1, r0
 8013a70:	1850      	adds	r0, r2, r1
 8013a72:	4283      	cmp	r3, r0
 8013a74:	6011      	str	r1, [r2, #0]
 8013a76:	d1e0      	bne.n	8013a3a <_free_r+0x22>
 8013a78:	6818      	ldr	r0, [r3, #0]
 8013a7a:	685b      	ldr	r3, [r3, #4]
 8013a7c:	6053      	str	r3, [r2, #4]
 8013a7e:	4408      	add	r0, r1
 8013a80:	6010      	str	r0, [r2, #0]
 8013a82:	e7da      	b.n	8013a3a <_free_r+0x22>
 8013a84:	d902      	bls.n	8013a8c <_free_r+0x74>
 8013a86:	230c      	movs	r3, #12
 8013a88:	602b      	str	r3, [r5, #0]
 8013a8a:	e7d6      	b.n	8013a3a <_free_r+0x22>
 8013a8c:	6820      	ldr	r0, [r4, #0]
 8013a8e:	1821      	adds	r1, r4, r0
 8013a90:	428b      	cmp	r3, r1
 8013a92:	bf04      	itt	eq
 8013a94:	6819      	ldreq	r1, [r3, #0]
 8013a96:	685b      	ldreq	r3, [r3, #4]
 8013a98:	6063      	str	r3, [r4, #4]
 8013a9a:	bf04      	itt	eq
 8013a9c:	1809      	addeq	r1, r1, r0
 8013a9e:	6021      	streq	r1, [r4, #0]
 8013aa0:	6054      	str	r4, [r2, #4]
 8013aa2:	e7ca      	b.n	8013a3a <_free_r+0x22>
 8013aa4:	bd38      	pop	{r3, r4, r5, pc}
 8013aa6:	bf00      	nop
 8013aa8:	200126ec 	.word	0x200126ec

08013aac <__sfputc_r>:
 8013aac:	6893      	ldr	r3, [r2, #8]
 8013aae:	3b01      	subs	r3, #1
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	b410      	push	{r4}
 8013ab4:	6093      	str	r3, [r2, #8]
 8013ab6:	da08      	bge.n	8013aca <__sfputc_r+0x1e>
 8013ab8:	6994      	ldr	r4, [r2, #24]
 8013aba:	42a3      	cmp	r3, r4
 8013abc:	db01      	blt.n	8013ac2 <__sfputc_r+0x16>
 8013abe:	290a      	cmp	r1, #10
 8013ac0:	d103      	bne.n	8013aca <__sfputc_r+0x1e>
 8013ac2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013ac6:	f000 bb6d 	b.w	80141a4 <__swbuf_r>
 8013aca:	6813      	ldr	r3, [r2, #0]
 8013acc:	1c58      	adds	r0, r3, #1
 8013ace:	6010      	str	r0, [r2, #0]
 8013ad0:	7019      	strb	r1, [r3, #0]
 8013ad2:	4608      	mov	r0, r1
 8013ad4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013ad8:	4770      	bx	lr

08013ada <__sfputs_r>:
 8013ada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013adc:	4606      	mov	r6, r0
 8013ade:	460f      	mov	r7, r1
 8013ae0:	4614      	mov	r4, r2
 8013ae2:	18d5      	adds	r5, r2, r3
 8013ae4:	42ac      	cmp	r4, r5
 8013ae6:	d101      	bne.n	8013aec <__sfputs_r+0x12>
 8013ae8:	2000      	movs	r0, #0
 8013aea:	e007      	b.n	8013afc <__sfputs_r+0x22>
 8013aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013af0:	463a      	mov	r2, r7
 8013af2:	4630      	mov	r0, r6
 8013af4:	f7ff ffda 	bl	8013aac <__sfputc_r>
 8013af8:	1c43      	adds	r3, r0, #1
 8013afa:	d1f3      	bne.n	8013ae4 <__sfputs_r+0xa>
 8013afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013b00 <_vfiprintf_r>:
 8013b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b04:	460d      	mov	r5, r1
 8013b06:	b09d      	sub	sp, #116	@ 0x74
 8013b08:	4614      	mov	r4, r2
 8013b0a:	4698      	mov	r8, r3
 8013b0c:	4606      	mov	r6, r0
 8013b0e:	b118      	cbz	r0, 8013b18 <_vfiprintf_r+0x18>
 8013b10:	6a03      	ldr	r3, [r0, #32]
 8013b12:	b90b      	cbnz	r3, 8013b18 <_vfiprintf_r+0x18>
 8013b14:	f7ff fdba 	bl	801368c <__sinit>
 8013b18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013b1a:	07d9      	lsls	r1, r3, #31
 8013b1c:	d405      	bmi.n	8013b2a <_vfiprintf_r+0x2a>
 8013b1e:	89ab      	ldrh	r3, [r5, #12]
 8013b20:	059a      	lsls	r2, r3, #22
 8013b22:	d402      	bmi.n	8013b2a <_vfiprintf_r+0x2a>
 8013b24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013b26:	f7ff ff0a 	bl	801393e <__retarget_lock_acquire_recursive>
 8013b2a:	89ab      	ldrh	r3, [r5, #12]
 8013b2c:	071b      	lsls	r3, r3, #28
 8013b2e:	d501      	bpl.n	8013b34 <_vfiprintf_r+0x34>
 8013b30:	692b      	ldr	r3, [r5, #16]
 8013b32:	b99b      	cbnz	r3, 8013b5c <_vfiprintf_r+0x5c>
 8013b34:	4629      	mov	r1, r5
 8013b36:	4630      	mov	r0, r6
 8013b38:	f000 fb72 	bl	8014220 <__swsetup_r>
 8013b3c:	b170      	cbz	r0, 8013b5c <_vfiprintf_r+0x5c>
 8013b3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013b40:	07dc      	lsls	r4, r3, #31
 8013b42:	d504      	bpl.n	8013b4e <_vfiprintf_r+0x4e>
 8013b44:	f04f 30ff 	mov.w	r0, #4294967295
 8013b48:	b01d      	add	sp, #116	@ 0x74
 8013b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b4e:	89ab      	ldrh	r3, [r5, #12]
 8013b50:	0598      	lsls	r0, r3, #22
 8013b52:	d4f7      	bmi.n	8013b44 <_vfiprintf_r+0x44>
 8013b54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013b56:	f7ff fef3 	bl	8013940 <__retarget_lock_release_recursive>
 8013b5a:	e7f3      	b.n	8013b44 <_vfiprintf_r+0x44>
 8013b5c:	2300      	movs	r3, #0
 8013b5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8013b60:	2320      	movs	r3, #32
 8013b62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013b66:	f8cd 800c 	str.w	r8, [sp, #12]
 8013b6a:	2330      	movs	r3, #48	@ 0x30
 8013b6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013d1c <_vfiprintf_r+0x21c>
 8013b70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013b74:	f04f 0901 	mov.w	r9, #1
 8013b78:	4623      	mov	r3, r4
 8013b7a:	469a      	mov	sl, r3
 8013b7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013b80:	b10a      	cbz	r2, 8013b86 <_vfiprintf_r+0x86>
 8013b82:	2a25      	cmp	r2, #37	@ 0x25
 8013b84:	d1f9      	bne.n	8013b7a <_vfiprintf_r+0x7a>
 8013b86:	ebba 0b04 	subs.w	fp, sl, r4
 8013b8a:	d00b      	beq.n	8013ba4 <_vfiprintf_r+0xa4>
 8013b8c:	465b      	mov	r3, fp
 8013b8e:	4622      	mov	r2, r4
 8013b90:	4629      	mov	r1, r5
 8013b92:	4630      	mov	r0, r6
 8013b94:	f7ff ffa1 	bl	8013ada <__sfputs_r>
 8013b98:	3001      	adds	r0, #1
 8013b9a:	f000 80a7 	beq.w	8013cec <_vfiprintf_r+0x1ec>
 8013b9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013ba0:	445a      	add	r2, fp
 8013ba2:	9209      	str	r2, [sp, #36]	@ 0x24
 8013ba4:	f89a 3000 	ldrb.w	r3, [sl]
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	f000 809f 	beq.w	8013cec <_vfiprintf_r+0x1ec>
 8013bae:	2300      	movs	r3, #0
 8013bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8013bb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013bb8:	f10a 0a01 	add.w	sl, sl, #1
 8013bbc:	9304      	str	r3, [sp, #16]
 8013bbe:	9307      	str	r3, [sp, #28]
 8013bc0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013bc4:	931a      	str	r3, [sp, #104]	@ 0x68
 8013bc6:	4654      	mov	r4, sl
 8013bc8:	2205      	movs	r2, #5
 8013bca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013bce:	4853      	ldr	r0, [pc, #332]	@ (8013d1c <_vfiprintf_r+0x21c>)
 8013bd0:	f7ec fb0e 	bl	80001f0 <memchr>
 8013bd4:	9a04      	ldr	r2, [sp, #16]
 8013bd6:	b9d8      	cbnz	r0, 8013c10 <_vfiprintf_r+0x110>
 8013bd8:	06d1      	lsls	r1, r2, #27
 8013bda:	bf44      	itt	mi
 8013bdc:	2320      	movmi	r3, #32
 8013bde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013be2:	0713      	lsls	r3, r2, #28
 8013be4:	bf44      	itt	mi
 8013be6:	232b      	movmi	r3, #43	@ 0x2b
 8013be8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013bec:	f89a 3000 	ldrb.w	r3, [sl]
 8013bf0:	2b2a      	cmp	r3, #42	@ 0x2a
 8013bf2:	d015      	beq.n	8013c20 <_vfiprintf_r+0x120>
 8013bf4:	9a07      	ldr	r2, [sp, #28]
 8013bf6:	4654      	mov	r4, sl
 8013bf8:	2000      	movs	r0, #0
 8013bfa:	f04f 0c0a 	mov.w	ip, #10
 8013bfe:	4621      	mov	r1, r4
 8013c00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013c04:	3b30      	subs	r3, #48	@ 0x30
 8013c06:	2b09      	cmp	r3, #9
 8013c08:	d94b      	bls.n	8013ca2 <_vfiprintf_r+0x1a2>
 8013c0a:	b1b0      	cbz	r0, 8013c3a <_vfiprintf_r+0x13a>
 8013c0c:	9207      	str	r2, [sp, #28]
 8013c0e:	e014      	b.n	8013c3a <_vfiprintf_r+0x13a>
 8013c10:	eba0 0308 	sub.w	r3, r0, r8
 8013c14:	fa09 f303 	lsl.w	r3, r9, r3
 8013c18:	4313      	orrs	r3, r2
 8013c1a:	9304      	str	r3, [sp, #16]
 8013c1c:	46a2      	mov	sl, r4
 8013c1e:	e7d2      	b.n	8013bc6 <_vfiprintf_r+0xc6>
 8013c20:	9b03      	ldr	r3, [sp, #12]
 8013c22:	1d19      	adds	r1, r3, #4
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	9103      	str	r1, [sp, #12]
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	bfbb      	ittet	lt
 8013c2c:	425b      	neglt	r3, r3
 8013c2e:	f042 0202 	orrlt.w	r2, r2, #2
 8013c32:	9307      	strge	r3, [sp, #28]
 8013c34:	9307      	strlt	r3, [sp, #28]
 8013c36:	bfb8      	it	lt
 8013c38:	9204      	strlt	r2, [sp, #16]
 8013c3a:	7823      	ldrb	r3, [r4, #0]
 8013c3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8013c3e:	d10a      	bne.n	8013c56 <_vfiprintf_r+0x156>
 8013c40:	7863      	ldrb	r3, [r4, #1]
 8013c42:	2b2a      	cmp	r3, #42	@ 0x2a
 8013c44:	d132      	bne.n	8013cac <_vfiprintf_r+0x1ac>
 8013c46:	9b03      	ldr	r3, [sp, #12]
 8013c48:	1d1a      	adds	r2, r3, #4
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	9203      	str	r2, [sp, #12]
 8013c4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013c52:	3402      	adds	r4, #2
 8013c54:	9305      	str	r3, [sp, #20]
 8013c56:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013d2c <_vfiprintf_r+0x22c>
 8013c5a:	7821      	ldrb	r1, [r4, #0]
 8013c5c:	2203      	movs	r2, #3
 8013c5e:	4650      	mov	r0, sl
 8013c60:	f7ec fac6 	bl	80001f0 <memchr>
 8013c64:	b138      	cbz	r0, 8013c76 <_vfiprintf_r+0x176>
 8013c66:	9b04      	ldr	r3, [sp, #16]
 8013c68:	eba0 000a 	sub.w	r0, r0, sl
 8013c6c:	2240      	movs	r2, #64	@ 0x40
 8013c6e:	4082      	lsls	r2, r0
 8013c70:	4313      	orrs	r3, r2
 8013c72:	3401      	adds	r4, #1
 8013c74:	9304      	str	r3, [sp, #16]
 8013c76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c7a:	4829      	ldr	r0, [pc, #164]	@ (8013d20 <_vfiprintf_r+0x220>)
 8013c7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013c80:	2206      	movs	r2, #6
 8013c82:	f7ec fab5 	bl	80001f0 <memchr>
 8013c86:	2800      	cmp	r0, #0
 8013c88:	d03f      	beq.n	8013d0a <_vfiprintf_r+0x20a>
 8013c8a:	4b26      	ldr	r3, [pc, #152]	@ (8013d24 <_vfiprintf_r+0x224>)
 8013c8c:	bb1b      	cbnz	r3, 8013cd6 <_vfiprintf_r+0x1d6>
 8013c8e:	9b03      	ldr	r3, [sp, #12]
 8013c90:	3307      	adds	r3, #7
 8013c92:	f023 0307 	bic.w	r3, r3, #7
 8013c96:	3308      	adds	r3, #8
 8013c98:	9303      	str	r3, [sp, #12]
 8013c9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c9c:	443b      	add	r3, r7
 8013c9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8013ca0:	e76a      	b.n	8013b78 <_vfiprintf_r+0x78>
 8013ca2:	fb0c 3202 	mla	r2, ip, r2, r3
 8013ca6:	460c      	mov	r4, r1
 8013ca8:	2001      	movs	r0, #1
 8013caa:	e7a8      	b.n	8013bfe <_vfiprintf_r+0xfe>
 8013cac:	2300      	movs	r3, #0
 8013cae:	3401      	adds	r4, #1
 8013cb0:	9305      	str	r3, [sp, #20]
 8013cb2:	4619      	mov	r1, r3
 8013cb4:	f04f 0c0a 	mov.w	ip, #10
 8013cb8:	4620      	mov	r0, r4
 8013cba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013cbe:	3a30      	subs	r2, #48	@ 0x30
 8013cc0:	2a09      	cmp	r2, #9
 8013cc2:	d903      	bls.n	8013ccc <_vfiprintf_r+0x1cc>
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d0c6      	beq.n	8013c56 <_vfiprintf_r+0x156>
 8013cc8:	9105      	str	r1, [sp, #20]
 8013cca:	e7c4      	b.n	8013c56 <_vfiprintf_r+0x156>
 8013ccc:	fb0c 2101 	mla	r1, ip, r1, r2
 8013cd0:	4604      	mov	r4, r0
 8013cd2:	2301      	movs	r3, #1
 8013cd4:	e7f0      	b.n	8013cb8 <_vfiprintf_r+0x1b8>
 8013cd6:	ab03      	add	r3, sp, #12
 8013cd8:	9300      	str	r3, [sp, #0]
 8013cda:	462a      	mov	r2, r5
 8013cdc:	4b12      	ldr	r3, [pc, #72]	@ (8013d28 <_vfiprintf_r+0x228>)
 8013cde:	a904      	add	r1, sp, #16
 8013ce0:	4630      	mov	r0, r6
 8013ce2:	f3af 8000 	nop.w
 8013ce6:	4607      	mov	r7, r0
 8013ce8:	1c78      	adds	r0, r7, #1
 8013cea:	d1d6      	bne.n	8013c9a <_vfiprintf_r+0x19a>
 8013cec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013cee:	07d9      	lsls	r1, r3, #31
 8013cf0:	d405      	bmi.n	8013cfe <_vfiprintf_r+0x1fe>
 8013cf2:	89ab      	ldrh	r3, [r5, #12]
 8013cf4:	059a      	lsls	r2, r3, #22
 8013cf6:	d402      	bmi.n	8013cfe <_vfiprintf_r+0x1fe>
 8013cf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013cfa:	f7ff fe21 	bl	8013940 <__retarget_lock_release_recursive>
 8013cfe:	89ab      	ldrh	r3, [r5, #12]
 8013d00:	065b      	lsls	r3, r3, #25
 8013d02:	f53f af1f 	bmi.w	8013b44 <_vfiprintf_r+0x44>
 8013d06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013d08:	e71e      	b.n	8013b48 <_vfiprintf_r+0x48>
 8013d0a:	ab03      	add	r3, sp, #12
 8013d0c:	9300      	str	r3, [sp, #0]
 8013d0e:	462a      	mov	r2, r5
 8013d10:	4b05      	ldr	r3, [pc, #20]	@ (8013d28 <_vfiprintf_r+0x228>)
 8013d12:	a904      	add	r1, sp, #16
 8013d14:	4630      	mov	r0, r6
 8013d16:	f000 f879 	bl	8013e0c <_printf_i>
 8013d1a:	e7e4      	b.n	8013ce6 <_vfiprintf_r+0x1e6>
 8013d1c:	08015d88 	.word	0x08015d88
 8013d20:	08015d92 	.word	0x08015d92
 8013d24:	00000000 	.word	0x00000000
 8013d28:	08013adb 	.word	0x08013adb
 8013d2c:	08015d8e 	.word	0x08015d8e

08013d30 <_printf_common>:
 8013d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d34:	4616      	mov	r6, r2
 8013d36:	4698      	mov	r8, r3
 8013d38:	688a      	ldr	r2, [r1, #8]
 8013d3a:	690b      	ldr	r3, [r1, #16]
 8013d3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013d40:	4293      	cmp	r3, r2
 8013d42:	bfb8      	it	lt
 8013d44:	4613      	movlt	r3, r2
 8013d46:	6033      	str	r3, [r6, #0]
 8013d48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013d4c:	4607      	mov	r7, r0
 8013d4e:	460c      	mov	r4, r1
 8013d50:	b10a      	cbz	r2, 8013d56 <_printf_common+0x26>
 8013d52:	3301      	adds	r3, #1
 8013d54:	6033      	str	r3, [r6, #0]
 8013d56:	6823      	ldr	r3, [r4, #0]
 8013d58:	0699      	lsls	r1, r3, #26
 8013d5a:	bf42      	ittt	mi
 8013d5c:	6833      	ldrmi	r3, [r6, #0]
 8013d5e:	3302      	addmi	r3, #2
 8013d60:	6033      	strmi	r3, [r6, #0]
 8013d62:	6825      	ldr	r5, [r4, #0]
 8013d64:	f015 0506 	ands.w	r5, r5, #6
 8013d68:	d106      	bne.n	8013d78 <_printf_common+0x48>
 8013d6a:	f104 0a19 	add.w	sl, r4, #25
 8013d6e:	68e3      	ldr	r3, [r4, #12]
 8013d70:	6832      	ldr	r2, [r6, #0]
 8013d72:	1a9b      	subs	r3, r3, r2
 8013d74:	42ab      	cmp	r3, r5
 8013d76:	dc26      	bgt.n	8013dc6 <_printf_common+0x96>
 8013d78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013d7c:	6822      	ldr	r2, [r4, #0]
 8013d7e:	3b00      	subs	r3, #0
 8013d80:	bf18      	it	ne
 8013d82:	2301      	movne	r3, #1
 8013d84:	0692      	lsls	r2, r2, #26
 8013d86:	d42b      	bmi.n	8013de0 <_printf_common+0xb0>
 8013d88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013d8c:	4641      	mov	r1, r8
 8013d8e:	4638      	mov	r0, r7
 8013d90:	47c8      	blx	r9
 8013d92:	3001      	adds	r0, #1
 8013d94:	d01e      	beq.n	8013dd4 <_printf_common+0xa4>
 8013d96:	6823      	ldr	r3, [r4, #0]
 8013d98:	6922      	ldr	r2, [r4, #16]
 8013d9a:	f003 0306 	and.w	r3, r3, #6
 8013d9e:	2b04      	cmp	r3, #4
 8013da0:	bf02      	ittt	eq
 8013da2:	68e5      	ldreq	r5, [r4, #12]
 8013da4:	6833      	ldreq	r3, [r6, #0]
 8013da6:	1aed      	subeq	r5, r5, r3
 8013da8:	68a3      	ldr	r3, [r4, #8]
 8013daa:	bf0c      	ite	eq
 8013dac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013db0:	2500      	movne	r5, #0
 8013db2:	4293      	cmp	r3, r2
 8013db4:	bfc4      	itt	gt
 8013db6:	1a9b      	subgt	r3, r3, r2
 8013db8:	18ed      	addgt	r5, r5, r3
 8013dba:	2600      	movs	r6, #0
 8013dbc:	341a      	adds	r4, #26
 8013dbe:	42b5      	cmp	r5, r6
 8013dc0:	d11a      	bne.n	8013df8 <_printf_common+0xc8>
 8013dc2:	2000      	movs	r0, #0
 8013dc4:	e008      	b.n	8013dd8 <_printf_common+0xa8>
 8013dc6:	2301      	movs	r3, #1
 8013dc8:	4652      	mov	r2, sl
 8013dca:	4641      	mov	r1, r8
 8013dcc:	4638      	mov	r0, r7
 8013dce:	47c8      	blx	r9
 8013dd0:	3001      	adds	r0, #1
 8013dd2:	d103      	bne.n	8013ddc <_printf_common+0xac>
 8013dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8013dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ddc:	3501      	adds	r5, #1
 8013dde:	e7c6      	b.n	8013d6e <_printf_common+0x3e>
 8013de0:	18e1      	adds	r1, r4, r3
 8013de2:	1c5a      	adds	r2, r3, #1
 8013de4:	2030      	movs	r0, #48	@ 0x30
 8013de6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013dea:	4422      	add	r2, r4
 8013dec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013df0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013df4:	3302      	adds	r3, #2
 8013df6:	e7c7      	b.n	8013d88 <_printf_common+0x58>
 8013df8:	2301      	movs	r3, #1
 8013dfa:	4622      	mov	r2, r4
 8013dfc:	4641      	mov	r1, r8
 8013dfe:	4638      	mov	r0, r7
 8013e00:	47c8      	blx	r9
 8013e02:	3001      	adds	r0, #1
 8013e04:	d0e6      	beq.n	8013dd4 <_printf_common+0xa4>
 8013e06:	3601      	adds	r6, #1
 8013e08:	e7d9      	b.n	8013dbe <_printf_common+0x8e>
	...

08013e0c <_printf_i>:
 8013e0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013e10:	7e0f      	ldrb	r7, [r1, #24]
 8013e12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013e14:	2f78      	cmp	r7, #120	@ 0x78
 8013e16:	4691      	mov	r9, r2
 8013e18:	4680      	mov	r8, r0
 8013e1a:	460c      	mov	r4, r1
 8013e1c:	469a      	mov	sl, r3
 8013e1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013e22:	d807      	bhi.n	8013e34 <_printf_i+0x28>
 8013e24:	2f62      	cmp	r7, #98	@ 0x62
 8013e26:	d80a      	bhi.n	8013e3e <_printf_i+0x32>
 8013e28:	2f00      	cmp	r7, #0
 8013e2a:	f000 80d2 	beq.w	8013fd2 <_printf_i+0x1c6>
 8013e2e:	2f58      	cmp	r7, #88	@ 0x58
 8013e30:	f000 80b9 	beq.w	8013fa6 <_printf_i+0x19a>
 8013e34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013e38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013e3c:	e03a      	b.n	8013eb4 <_printf_i+0xa8>
 8013e3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013e42:	2b15      	cmp	r3, #21
 8013e44:	d8f6      	bhi.n	8013e34 <_printf_i+0x28>
 8013e46:	a101      	add	r1, pc, #4	@ (adr r1, 8013e4c <_printf_i+0x40>)
 8013e48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013e4c:	08013ea5 	.word	0x08013ea5
 8013e50:	08013eb9 	.word	0x08013eb9
 8013e54:	08013e35 	.word	0x08013e35
 8013e58:	08013e35 	.word	0x08013e35
 8013e5c:	08013e35 	.word	0x08013e35
 8013e60:	08013e35 	.word	0x08013e35
 8013e64:	08013eb9 	.word	0x08013eb9
 8013e68:	08013e35 	.word	0x08013e35
 8013e6c:	08013e35 	.word	0x08013e35
 8013e70:	08013e35 	.word	0x08013e35
 8013e74:	08013e35 	.word	0x08013e35
 8013e78:	08013fb9 	.word	0x08013fb9
 8013e7c:	08013ee3 	.word	0x08013ee3
 8013e80:	08013f73 	.word	0x08013f73
 8013e84:	08013e35 	.word	0x08013e35
 8013e88:	08013e35 	.word	0x08013e35
 8013e8c:	08013fdb 	.word	0x08013fdb
 8013e90:	08013e35 	.word	0x08013e35
 8013e94:	08013ee3 	.word	0x08013ee3
 8013e98:	08013e35 	.word	0x08013e35
 8013e9c:	08013e35 	.word	0x08013e35
 8013ea0:	08013f7b 	.word	0x08013f7b
 8013ea4:	6833      	ldr	r3, [r6, #0]
 8013ea6:	1d1a      	adds	r2, r3, #4
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	6032      	str	r2, [r6, #0]
 8013eac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013eb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013eb4:	2301      	movs	r3, #1
 8013eb6:	e09d      	b.n	8013ff4 <_printf_i+0x1e8>
 8013eb8:	6833      	ldr	r3, [r6, #0]
 8013eba:	6820      	ldr	r0, [r4, #0]
 8013ebc:	1d19      	adds	r1, r3, #4
 8013ebe:	6031      	str	r1, [r6, #0]
 8013ec0:	0606      	lsls	r6, r0, #24
 8013ec2:	d501      	bpl.n	8013ec8 <_printf_i+0xbc>
 8013ec4:	681d      	ldr	r5, [r3, #0]
 8013ec6:	e003      	b.n	8013ed0 <_printf_i+0xc4>
 8013ec8:	0645      	lsls	r5, r0, #25
 8013eca:	d5fb      	bpl.n	8013ec4 <_printf_i+0xb8>
 8013ecc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013ed0:	2d00      	cmp	r5, #0
 8013ed2:	da03      	bge.n	8013edc <_printf_i+0xd0>
 8013ed4:	232d      	movs	r3, #45	@ 0x2d
 8013ed6:	426d      	negs	r5, r5
 8013ed8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013edc:	4859      	ldr	r0, [pc, #356]	@ (8014044 <_printf_i+0x238>)
 8013ede:	230a      	movs	r3, #10
 8013ee0:	e011      	b.n	8013f06 <_printf_i+0xfa>
 8013ee2:	6821      	ldr	r1, [r4, #0]
 8013ee4:	6833      	ldr	r3, [r6, #0]
 8013ee6:	0608      	lsls	r0, r1, #24
 8013ee8:	f853 5b04 	ldr.w	r5, [r3], #4
 8013eec:	d402      	bmi.n	8013ef4 <_printf_i+0xe8>
 8013eee:	0649      	lsls	r1, r1, #25
 8013ef0:	bf48      	it	mi
 8013ef2:	b2ad      	uxthmi	r5, r5
 8013ef4:	2f6f      	cmp	r7, #111	@ 0x6f
 8013ef6:	4853      	ldr	r0, [pc, #332]	@ (8014044 <_printf_i+0x238>)
 8013ef8:	6033      	str	r3, [r6, #0]
 8013efa:	bf14      	ite	ne
 8013efc:	230a      	movne	r3, #10
 8013efe:	2308      	moveq	r3, #8
 8013f00:	2100      	movs	r1, #0
 8013f02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013f06:	6866      	ldr	r6, [r4, #4]
 8013f08:	60a6      	str	r6, [r4, #8]
 8013f0a:	2e00      	cmp	r6, #0
 8013f0c:	bfa2      	ittt	ge
 8013f0e:	6821      	ldrge	r1, [r4, #0]
 8013f10:	f021 0104 	bicge.w	r1, r1, #4
 8013f14:	6021      	strge	r1, [r4, #0]
 8013f16:	b90d      	cbnz	r5, 8013f1c <_printf_i+0x110>
 8013f18:	2e00      	cmp	r6, #0
 8013f1a:	d04b      	beq.n	8013fb4 <_printf_i+0x1a8>
 8013f1c:	4616      	mov	r6, r2
 8013f1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8013f22:	fb03 5711 	mls	r7, r3, r1, r5
 8013f26:	5dc7      	ldrb	r7, [r0, r7]
 8013f28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013f2c:	462f      	mov	r7, r5
 8013f2e:	42bb      	cmp	r3, r7
 8013f30:	460d      	mov	r5, r1
 8013f32:	d9f4      	bls.n	8013f1e <_printf_i+0x112>
 8013f34:	2b08      	cmp	r3, #8
 8013f36:	d10b      	bne.n	8013f50 <_printf_i+0x144>
 8013f38:	6823      	ldr	r3, [r4, #0]
 8013f3a:	07df      	lsls	r7, r3, #31
 8013f3c:	d508      	bpl.n	8013f50 <_printf_i+0x144>
 8013f3e:	6923      	ldr	r3, [r4, #16]
 8013f40:	6861      	ldr	r1, [r4, #4]
 8013f42:	4299      	cmp	r1, r3
 8013f44:	bfde      	ittt	le
 8013f46:	2330      	movle	r3, #48	@ 0x30
 8013f48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013f4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013f50:	1b92      	subs	r2, r2, r6
 8013f52:	6122      	str	r2, [r4, #16]
 8013f54:	f8cd a000 	str.w	sl, [sp]
 8013f58:	464b      	mov	r3, r9
 8013f5a:	aa03      	add	r2, sp, #12
 8013f5c:	4621      	mov	r1, r4
 8013f5e:	4640      	mov	r0, r8
 8013f60:	f7ff fee6 	bl	8013d30 <_printf_common>
 8013f64:	3001      	adds	r0, #1
 8013f66:	d14a      	bne.n	8013ffe <_printf_i+0x1f2>
 8013f68:	f04f 30ff 	mov.w	r0, #4294967295
 8013f6c:	b004      	add	sp, #16
 8013f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f72:	6823      	ldr	r3, [r4, #0]
 8013f74:	f043 0320 	orr.w	r3, r3, #32
 8013f78:	6023      	str	r3, [r4, #0]
 8013f7a:	4833      	ldr	r0, [pc, #204]	@ (8014048 <_printf_i+0x23c>)
 8013f7c:	2778      	movs	r7, #120	@ 0x78
 8013f7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013f82:	6823      	ldr	r3, [r4, #0]
 8013f84:	6831      	ldr	r1, [r6, #0]
 8013f86:	061f      	lsls	r7, r3, #24
 8013f88:	f851 5b04 	ldr.w	r5, [r1], #4
 8013f8c:	d402      	bmi.n	8013f94 <_printf_i+0x188>
 8013f8e:	065f      	lsls	r7, r3, #25
 8013f90:	bf48      	it	mi
 8013f92:	b2ad      	uxthmi	r5, r5
 8013f94:	6031      	str	r1, [r6, #0]
 8013f96:	07d9      	lsls	r1, r3, #31
 8013f98:	bf44      	itt	mi
 8013f9a:	f043 0320 	orrmi.w	r3, r3, #32
 8013f9e:	6023      	strmi	r3, [r4, #0]
 8013fa0:	b11d      	cbz	r5, 8013faa <_printf_i+0x19e>
 8013fa2:	2310      	movs	r3, #16
 8013fa4:	e7ac      	b.n	8013f00 <_printf_i+0xf4>
 8013fa6:	4827      	ldr	r0, [pc, #156]	@ (8014044 <_printf_i+0x238>)
 8013fa8:	e7e9      	b.n	8013f7e <_printf_i+0x172>
 8013faa:	6823      	ldr	r3, [r4, #0]
 8013fac:	f023 0320 	bic.w	r3, r3, #32
 8013fb0:	6023      	str	r3, [r4, #0]
 8013fb2:	e7f6      	b.n	8013fa2 <_printf_i+0x196>
 8013fb4:	4616      	mov	r6, r2
 8013fb6:	e7bd      	b.n	8013f34 <_printf_i+0x128>
 8013fb8:	6833      	ldr	r3, [r6, #0]
 8013fba:	6825      	ldr	r5, [r4, #0]
 8013fbc:	6961      	ldr	r1, [r4, #20]
 8013fbe:	1d18      	adds	r0, r3, #4
 8013fc0:	6030      	str	r0, [r6, #0]
 8013fc2:	062e      	lsls	r6, r5, #24
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	d501      	bpl.n	8013fcc <_printf_i+0x1c0>
 8013fc8:	6019      	str	r1, [r3, #0]
 8013fca:	e002      	b.n	8013fd2 <_printf_i+0x1c6>
 8013fcc:	0668      	lsls	r0, r5, #25
 8013fce:	d5fb      	bpl.n	8013fc8 <_printf_i+0x1bc>
 8013fd0:	8019      	strh	r1, [r3, #0]
 8013fd2:	2300      	movs	r3, #0
 8013fd4:	6123      	str	r3, [r4, #16]
 8013fd6:	4616      	mov	r6, r2
 8013fd8:	e7bc      	b.n	8013f54 <_printf_i+0x148>
 8013fda:	6833      	ldr	r3, [r6, #0]
 8013fdc:	1d1a      	adds	r2, r3, #4
 8013fde:	6032      	str	r2, [r6, #0]
 8013fe0:	681e      	ldr	r6, [r3, #0]
 8013fe2:	6862      	ldr	r2, [r4, #4]
 8013fe4:	2100      	movs	r1, #0
 8013fe6:	4630      	mov	r0, r6
 8013fe8:	f7ec f902 	bl	80001f0 <memchr>
 8013fec:	b108      	cbz	r0, 8013ff2 <_printf_i+0x1e6>
 8013fee:	1b80      	subs	r0, r0, r6
 8013ff0:	6060      	str	r0, [r4, #4]
 8013ff2:	6863      	ldr	r3, [r4, #4]
 8013ff4:	6123      	str	r3, [r4, #16]
 8013ff6:	2300      	movs	r3, #0
 8013ff8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013ffc:	e7aa      	b.n	8013f54 <_printf_i+0x148>
 8013ffe:	6923      	ldr	r3, [r4, #16]
 8014000:	4632      	mov	r2, r6
 8014002:	4649      	mov	r1, r9
 8014004:	4640      	mov	r0, r8
 8014006:	47d0      	blx	sl
 8014008:	3001      	adds	r0, #1
 801400a:	d0ad      	beq.n	8013f68 <_printf_i+0x15c>
 801400c:	6823      	ldr	r3, [r4, #0]
 801400e:	079b      	lsls	r3, r3, #30
 8014010:	d413      	bmi.n	801403a <_printf_i+0x22e>
 8014012:	68e0      	ldr	r0, [r4, #12]
 8014014:	9b03      	ldr	r3, [sp, #12]
 8014016:	4298      	cmp	r0, r3
 8014018:	bfb8      	it	lt
 801401a:	4618      	movlt	r0, r3
 801401c:	e7a6      	b.n	8013f6c <_printf_i+0x160>
 801401e:	2301      	movs	r3, #1
 8014020:	4632      	mov	r2, r6
 8014022:	4649      	mov	r1, r9
 8014024:	4640      	mov	r0, r8
 8014026:	47d0      	blx	sl
 8014028:	3001      	adds	r0, #1
 801402a:	d09d      	beq.n	8013f68 <_printf_i+0x15c>
 801402c:	3501      	adds	r5, #1
 801402e:	68e3      	ldr	r3, [r4, #12]
 8014030:	9903      	ldr	r1, [sp, #12]
 8014032:	1a5b      	subs	r3, r3, r1
 8014034:	42ab      	cmp	r3, r5
 8014036:	dcf2      	bgt.n	801401e <_printf_i+0x212>
 8014038:	e7eb      	b.n	8014012 <_printf_i+0x206>
 801403a:	2500      	movs	r5, #0
 801403c:	f104 0619 	add.w	r6, r4, #25
 8014040:	e7f5      	b.n	801402e <_printf_i+0x222>
 8014042:	bf00      	nop
 8014044:	08015d99 	.word	0x08015d99
 8014048:	08015daa 	.word	0x08015daa

0801404c <__sflush_r>:
 801404c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014054:	0716      	lsls	r6, r2, #28
 8014056:	4605      	mov	r5, r0
 8014058:	460c      	mov	r4, r1
 801405a:	d454      	bmi.n	8014106 <__sflush_r+0xba>
 801405c:	684b      	ldr	r3, [r1, #4]
 801405e:	2b00      	cmp	r3, #0
 8014060:	dc02      	bgt.n	8014068 <__sflush_r+0x1c>
 8014062:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014064:	2b00      	cmp	r3, #0
 8014066:	dd48      	ble.n	80140fa <__sflush_r+0xae>
 8014068:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801406a:	2e00      	cmp	r6, #0
 801406c:	d045      	beq.n	80140fa <__sflush_r+0xae>
 801406e:	2300      	movs	r3, #0
 8014070:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014074:	682f      	ldr	r7, [r5, #0]
 8014076:	6a21      	ldr	r1, [r4, #32]
 8014078:	602b      	str	r3, [r5, #0]
 801407a:	d030      	beq.n	80140de <__sflush_r+0x92>
 801407c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801407e:	89a3      	ldrh	r3, [r4, #12]
 8014080:	0759      	lsls	r1, r3, #29
 8014082:	d505      	bpl.n	8014090 <__sflush_r+0x44>
 8014084:	6863      	ldr	r3, [r4, #4]
 8014086:	1ad2      	subs	r2, r2, r3
 8014088:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801408a:	b10b      	cbz	r3, 8014090 <__sflush_r+0x44>
 801408c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801408e:	1ad2      	subs	r2, r2, r3
 8014090:	2300      	movs	r3, #0
 8014092:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014094:	6a21      	ldr	r1, [r4, #32]
 8014096:	4628      	mov	r0, r5
 8014098:	47b0      	blx	r6
 801409a:	1c43      	adds	r3, r0, #1
 801409c:	89a3      	ldrh	r3, [r4, #12]
 801409e:	d106      	bne.n	80140ae <__sflush_r+0x62>
 80140a0:	6829      	ldr	r1, [r5, #0]
 80140a2:	291d      	cmp	r1, #29
 80140a4:	d82b      	bhi.n	80140fe <__sflush_r+0xb2>
 80140a6:	4a2a      	ldr	r2, [pc, #168]	@ (8014150 <__sflush_r+0x104>)
 80140a8:	410a      	asrs	r2, r1
 80140aa:	07d6      	lsls	r6, r2, #31
 80140ac:	d427      	bmi.n	80140fe <__sflush_r+0xb2>
 80140ae:	2200      	movs	r2, #0
 80140b0:	6062      	str	r2, [r4, #4]
 80140b2:	04d9      	lsls	r1, r3, #19
 80140b4:	6922      	ldr	r2, [r4, #16]
 80140b6:	6022      	str	r2, [r4, #0]
 80140b8:	d504      	bpl.n	80140c4 <__sflush_r+0x78>
 80140ba:	1c42      	adds	r2, r0, #1
 80140bc:	d101      	bne.n	80140c2 <__sflush_r+0x76>
 80140be:	682b      	ldr	r3, [r5, #0]
 80140c0:	b903      	cbnz	r3, 80140c4 <__sflush_r+0x78>
 80140c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80140c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80140c6:	602f      	str	r7, [r5, #0]
 80140c8:	b1b9      	cbz	r1, 80140fa <__sflush_r+0xae>
 80140ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80140ce:	4299      	cmp	r1, r3
 80140d0:	d002      	beq.n	80140d8 <__sflush_r+0x8c>
 80140d2:	4628      	mov	r0, r5
 80140d4:	f7ff fca0 	bl	8013a18 <_free_r>
 80140d8:	2300      	movs	r3, #0
 80140da:	6363      	str	r3, [r4, #52]	@ 0x34
 80140dc:	e00d      	b.n	80140fa <__sflush_r+0xae>
 80140de:	2301      	movs	r3, #1
 80140e0:	4628      	mov	r0, r5
 80140e2:	47b0      	blx	r6
 80140e4:	4602      	mov	r2, r0
 80140e6:	1c50      	adds	r0, r2, #1
 80140e8:	d1c9      	bne.n	801407e <__sflush_r+0x32>
 80140ea:	682b      	ldr	r3, [r5, #0]
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d0c6      	beq.n	801407e <__sflush_r+0x32>
 80140f0:	2b1d      	cmp	r3, #29
 80140f2:	d001      	beq.n	80140f8 <__sflush_r+0xac>
 80140f4:	2b16      	cmp	r3, #22
 80140f6:	d11e      	bne.n	8014136 <__sflush_r+0xea>
 80140f8:	602f      	str	r7, [r5, #0]
 80140fa:	2000      	movs	r0, #0
 80140fc:	e022      	b.n	8014144 <__sflush_r+0xf8>
 80140fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014102:	b21b      	sxth	r3, r3
 8014104:	e01b      	b.n	801413e <__sflush_r+0xf2>
 8014106:	690f      	ldr	r7, [r1, #16]
 8014108:	2f00      	cmp	r7, #0
 801410a:	d0f6      	beq.n	80140fa <__sflush_r+0xae>
 801410c:	0793      	lsls	r3, r2, #30
 801410e:	680e      	ldr	r6, [r1, #0]
 8014110:	bf08      	it	eq
 8014112:	694b      	ldreq	r3, [r1, #20]
 8014114:	600f      	str	r7, [r1, #0]
 8014116:	bf18      	it	ne
 8014118:	2300      	movne	r3, #0
 801411a:	eba6 0807 	sub.w	r8, r6, r7
 801411e:	608b      	str	r3, [r1, #8]
 8014120:	f1b8 0f00 	cmp.w	r8, #0
 8014124:	dde9      	ble.n	80140fa <__sflush_r+0xae>
 8014126:	6a21      	ldr	r1, [r4, #32]
 8014128:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801412a:	4643      	mov	r3, r8
 801412c:	463a      	mov	r2, r7
 801412e:	4628      	mov	r0, r5
 8014130:	47b0      	blx	r6
 8014132:	2800      	cmp	r0, #0
 8014134:	dc08      	bgt.n	8014148 <__sflush_r+0xfc>
 8014136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801413a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801413e:	81a3      	strh	r3, [r4, #12]
 8014140:	f04f 30ff 	mov.w	r0, #4294967295
 8014144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014148:	4407      	add	r7, r0
 801414a:	eba8 0800 	sub.w	r8, r8, r0
 801414e:	e7e7      	b.n	8014120 <__sflush_r+0xd4>
 8014150:	dfbffffe 	.word	0xdfbffffe

08014154 <_fflush_r>:
 8014154:	b538      	push	{r3, r4, r5, lr}
 8014156:	690b      	ldr	r3, [r1, #16]
 8014158:	4605      	mov	r5, r0
 801415a:	460c      	mov	r4, r1
 801415c:	b913      	cbnz	r3, 8014164 <_fflush_r+0x10>
 801415e:	2500      	movs	r5, #0
 8014160:	4628      	mov	r0, r5
 8014162:	bd38      	pop	{r3, r4, r5, pc}
 8014164:	b118      	cbz	r0, 801416e <_fflush_r+0x1a>
 8014166:	6a03      	ldr	r3, [r0, #32]
 8014168:	b90b      	cbnz	r3, 801416e <_fflush_r+0x1a>
 801416a:	f7ff fa8f 	bl	801368c <__sinit>
 801416e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014172:	2b00      	cmp	r3, #0
 8014174:	d0f3      	beq.n	801415e <_fflush_r+0xa>
 8014176:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014178:	07d0      	lsls	r0, r2, #31
 801417a:	d404      	bmi.n	8014186 <_fflush_r+0x32>
 801417c:	0599      	lsls	r1, r3, #22
 801417e:	d402      	bmi.n	8014186 <_fflush_r+0x32>
 8014180:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014182:	f7ff fbdc 	bl	801393e <__retarget_lock_acquire_recursive>
 8014186:	4628      	mov	r0, r5
 8014188:	4621      	mov	r1, r4
 801418a:	f7ff ff5f 	bl	801404c <__sflush_r>
 801418e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014190:	07da      	lsls	r2, r3, #31
 8014192:	4605      	mov	r5, r0
 8014194:	d4e4      	bmi.n	8014160 <_fflush_r+0xc>
 8014196:	89a3      	ldrh	r3, [r4, #12]
 8014198:	059b      	lsls	r3, r3, #22
 801419a:	d4e1      	bmi.n	8014160 <_fflush_r+0xc>
 801419c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801419e:	f7ff fbcf 	bl	8013940 <__retarget_lock_release_recursive>
 80141a2:	e7dd      	b.n	8014160 <_fflush_r+0xc>

080141a4 <__swbuf_r>:
 80141a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141a6:	460e      	mov	r6, r1
 80141a8:	4614      	mov	r4, r2
 80141aa:	4605      	mov	r5, r0
 80141ac:	b118      	cbz	r0, 80141b6 <__swbuf_r+0x12>
 80141ae:	6a03      	ldr	r3, [r0, #32]
 80141b0:	b90b      	cbnz	r3, 80141b6 <__swbuf_r+0x12>
 80141b2:	f7ff fa6b 	bl	801368c <__sinit>
 80141b6:	69a3      	ldr	r3, [r4, #24]
 80141b8:	60a3      	str	r3, [r4, #8]
 80141ba:	89a3      	ldrh	r3, [r4, #12]
 80141bc:	071a      	lsls	r2, r3, #28
 80141be:	d501      	bpl.n	80141c4 <__swbuf_r+0x20>
 80141c0:	6923      	ldr	r3, [r4, #16]
 80141c2:	b943      	cbnz	r3, 80141d6 <__swbuf_r+0x32>
 80141c4:	4621      	mov	r1, r4
 80141c6:	4628      	mov	r0, r5
 80141c8:	f000 f82a 	bl	8014220 <__swsetup_r>
 80141cc:	b118      	cbz	r0, 80141d6 <__swbuf_r+0x32>
 80141ce:	f04f 37ff 	mov.w	r7, #4294967295
 80141d2:	4638      	mov	r0, r7
 80141d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141d6:	6823      	ldr	r3, [r4, #0]
 80141d8:	6922      	ldr	r2, [r4, #16]
 80141da:	1a98      	subs	r0, r3, r2
 80141dc:	6963      	ldr	r3, [r4, #20]
 80141de:	b2f6      	uxtb	r6, r6
 80141e0:	4283      	cmp	r3, r0
 80141e2:	4637      	mov	r7, r6
 80141e4:	dc05      	bgt.n	80141f2 <__swbuf_r+0x4e>
 80141e6:	4621      	mov	r1, r4
 80141e8:	4628      	mov	r0, r5
 80141ea:	f7ff ffb3 	bl	8014154 <_fflush_r>
 80141ee:	2800      	cmp	r0, #0
 80141f0:	d1ed      	bne.n	80141ce <__swbuf_r+0x2a>
 80141f2:	68a3      	ldr	r3, [r4, #8]
 80141f4:	3b01      	subs	r3, #1
 80141f6:	60a3      	str	r3, [r4, #8]
 80141f8:	6823      	ldr	r3, [r4, #0]
 80141fa:	1c5a      	adds	r2, r3, #1
 80141fc:	6022      	str	r2, [r4, #0]
 80141fe:	701e      	strb	r6, [r3, #0]
 8014200:	6962      	ldr	r2, [r4, #20]
 8014202:	1c43      	adds	r3, r0, #1
 8014204:	429a      	cmp	r2, r3
 8014206:	d004      	beq.n	8014212 <__swbuf_r+0x6e>
 8014208:	89a3      	ldrh	r3, [r4, #12]
 801420a:	07db      	lsls	r3, r3, #31
 801420c:	d5e1      	bpl.n	80141d2 <__swbuf_r+0x2e>
 801420e:	2e0a      	cmp	r6, #10
 8014210:	d1df      	bne.n	80141d2 <__swbuf_r+0x2e>
 8014212:	4621      	mov	r1, r4
 8014214:	4628      	mov	r0, r5
 8014216:	f7ff ff9d 	bl	8014154 <_fflush_r>
 801421a:	2800      	cmp	r0, #0
 801421c:	d0d9      	beq.n	80141d2 <__swbuf_r+0x2e>
 801421e:	e7d6      	b.n	80141ce <__swbuf_r+0x2a>

08014220 <__swsetup_r>:
 8014220:	b538      	push	{r3, r4, r5, lr}
 8014222:	4b29      	ldr	r3, [pc, #164]	@ (80142c8 <__swsetup_r+0xa8>)
 8014224:	4605      	mov	r5, r0
 8014226:	6818      	ldr	r0, [r3, #0]
 8014228:	460c      	mov	r4, r1
 801422a:	b118      	cbz	r0, 8014234 <__swsetup_r+0x14>
 801422c:	6a03      	ldr	r3, [r0, #32]
 801422e:	b90b      	cbnz	r3, 8014234 <__swsetup_r+0x14>
 8014230:	f7ff fa2c 	bl	801368c <__sinit>
 8014234:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014238:	0719      	lsls	r1, r3, #28
 801423a:	d422      	bmi.n	8014282 <__swsetup_r+0x62>
 801423c:	06da      	lsls	r2, r3, #27
 801423e:	d407      	bmi.n	8014250 <__swsetup_r+0x30>
 8014240:	2209      	movs	r2, #9
 8014242:	602a      	str	r2, [r5, #0]
 8014244:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014248:	81a3      	strh	r3, [r4, #12]
 801424a:	f04f 30ff 	mov.w	r0, #4294967295
 801424e:	e033      	b.n	80142b8 <__swsetup_r+0x98>
 8014250:	0758      	lsls	r0, r3, #29
 8014252:	d512      	bpl.n	801427a <__swsetup_r+0x5a>
 8014254:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014256:	b141      	cbz	r1, 801426a <__swsetup_r+0x4a>
 8014258:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801425c:	4299      	cmp	r1, r3
 801425e:	d002      	beq.n	8014266 <__swsetup_r+0x46>
 8014260:	4628      	mov	r0, r5
 8014262:	f7ff fbd9 	bl	8013a18 <_free_r>
 8014266:	2300      	movs	r3, #0
 8014268:	6363      	str	r3, [r4, #52]	@ 0x34
 801426a:	89a3      	ldrh	r3, [r4, #12]
 801426c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014270:	81a3      	strh	r3, [r4, #12]
 8014272:	2300      	movs	r3, #0
 8014274:	6063      	str	r3, [r4, #4]
 8014276:	6923      	ldr	r3, [r4, #16]
 8014278:	6023      	str	r3, [r4, #0]
 801427a:	89a3      	ldrh	r3, [r4, #12]
 801427c:	f043 0308 	orr.w	r3, r3, #8
 8014280:	81a3      	strh	r3, [r4, #12]
 8014282:	6923      	ldr	r3, [r4, #16]
 8014284:	b94b      	cbnz	r3, 801429a <__swsetup_r+0x7a>
 8014286:	89a3      	ldrh	r3, [r4, #12]
 8014288:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801428c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014290:	d003      	beq.n	801429a <__swsetup_r+0x7a>
 8014292:	4621      	mov	r1, r4
 8014294:	4628      	mov	r0, r5
 8014296:	f000 f83f 	bl	8014318 <__smakebuf_r>
 801429a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801429e:	f013 0201 	ands.w	r2, r3, #1
 80142a2:	d00a      	beq.n	80142ba <__swsetup_r+0x9a>
 80142a4:	2200      	movs	r2, #0
 80142a6:	60a2      	str	r2, [r4, #8]
 80142a8:	6962      	ldr	r2, [r4, #20]
 80142aa:	4252      	negs	r2, r2
 80142ac:	61a2      	str	r2, [r4, #24]
 80142ae:	6922      	ldr	r2, [r4, #16]
 80142b0:	b942      	cbnz	r2, 80142c4 <__swsetup_r+0xa4>
 80142b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80142b6:	d1c5      	bne.n	8014244 <__swsetup_r+0x24>
 80142b8:	bd38      	pop	{r3, r4, r5, pc}
 80142ba:	0799      	lsls	r1, r3, #30
 80142bc:	bf58      	it	pl
 80142be:	6962      	ldrpl	r2, [r4, #20]
 80142c0:	60a2      	str	r2, [r4, #8]
 80142c2:	e7f4      	b.n	80142ae <__swsetup_r+0x8e>
 80142c4:	2000      	movs	r0, #0
 80142c6:	e7f7      	b.n	80142b8 <__swsetup_r+0x98>
 80142c8:	2000009c 	.word	0x2000009c

080142cc <__swhatbuf_r>:
 80142cc:	b570      	push	{r4, r5, r6, lr}
 80142ce:	460c      	mov	r4, r1
 80142d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80142d4:	2900      	cmp	r1, #0
 80142d6:	b096      	sub	sp, #88	@ 0x58
 80142d8:	4615      	mov	r5, r2
 80142da:	461e      	mov	r6, r3
 80142dc:	da0d      	bge.n	80142fa <__swhatbuf_r+0x2e>
 80142de:	89a3      	ldrh	r3, [r4, #12]
 80142e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80142e4:	f04f 0100 	mov.w	r1, #0
 80142e8:	bf14      	ite	ne
 80142ea:	2340      	movne	r3, #64	@ 0x40
 80142ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80142f0:	2000      	movs	r0, #0
 80142f2:	6031      	str	r1, [r6, #0]
 80142f4:	602b      	str	r3, [r5, #0]
 80142f6:	b016      	add	sp, #88	@ 0x58
 80142f8:	bd70      	pop	{r4, r5, r6, pc}
 80142fa:	466a      	mov	r2, sp
 80142fc:	f000 f848 	bl	8014390 <_fstat_r>
 8014300:	2800      	cmp	r0, #0
 8014302:	dbec      	blt.n	80142de <__swhatbuf_r+0x12>
 8014304:	9901      	ldr	r1, [sp, #4]
 8014306:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801430a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801430e:	4259      	negs	r1, r3
 8014310:	4159      	adcs	r1, r3
 8014312:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014316:	e7eb      	b.n	80142f0 <__swhatbuf_r+0x24>

08014318 <__smakebuf_r>:
 8014318:	898b      	ldrh	r3, [r1, #12]
 801431a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801431c:	079d      	lsls	r5, r3, #30
 801431e:	4606      	mov	r6, r0
 8014320:	460c      	mov	r4, r1
 8014322:	d507      	bpl.n	8014334 <__smakebuf_r+0x1c>
 8014324:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014328:	6023      	str	r3, [r4, #0]
 801432a:	6123      	str	r3, [r4, #16]
 801432c:	2301      	movs	r3, #1
 801432e:	6163      	str	r3, [r4, #20]
 8014330:	b003      	add	sp, #12
 8014332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014334:	ab01      	add	r3, sp, #4
 8014336:	466a      	mov	r2, sp
 8014338:	f7ff ffc8 	bl	80142cc <__swhatbuf_r>
 801433c:	9f00      	ldr	r7, [sp, #0]
 801433e:	4605      	mov	r5, r0
 8014340:	4639      	mov	r1, r7
 8014342:	4630      	mov	r0, r6
 8014344:	f7ff f87c 	bl	8013440 <_malloc_r>
 8014348:	b948      	cbnz	r0, 801435e <__smakebuf_r+0x46>
 801434a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801434e:	059a      	lsls	r2, r3, #22
 8014350:	d4ee      	bmi.n	8014330 <__smakebuf_r+0x18>
 8014352:	f023 0303 	bic.w	r3, r3, #3
 8014356:	f043 0302 	orr.w	r3, r3, #2
 801435a:	81a3      	strh	r3, [r4, #12]
 801435c:	e7e2      	b.n	8014324 <__smakebuf_r+0xc>
 801435e:	89a3      	ldrh	r3, [r4, #12]
 8014360:	6020      	str	r0, [r4, #0]
 8014362:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014366:	81a3      	strh	r3, [r4, #12]
 8014368:	9b01      	ldr	r3, [sp, #4]
 801436a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801436e:	b15b      	cbz	r3, 8014388 <__smakebuf_r+0x70>
 8014370:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014374:	4630      	mov	r0, r6
 8014376:	f000 f81d 	bl	80143b4 <_isatty_r>
 801437a:	b128      	cbz	r0, 8014388 <__smakebuf_r+0x70>
 801437c:	89a3      	ldrh	r3, [r4, #12]
 801437e:	f023 0303 	bic.w	r3, r3, #3
 8014382:	f043 0301 	orr.w	r3, r3, #1
 8014386:	81a3      	strh	r3, [r4, #12]
 8014388:	89a3      	ldrh	r3, [r4, #12]
 801438a:	431d      	orrs	r5, r3
 801438c:	81a5      	strh	r5, [r4, #12]
 801438e:	e7cf      	b.n	8014330 <__smakebuf_r+0x18>

08014390 <_fstat_r>:
 8014390:	b538      	push	{r3, r4, r5, lr}
 8014392:	4d07      	ldr	r5, [pc, #28]	@ (80143b0 <_fstat_r+0x20>)
 8014394:	2300      	movs	r3, #0
 8014396:	4604      	mov	r4, r0
 8014398:	4608      	mov	r0, r1
 801439a:	4611      	mov	r1, r2
 801439c:	602b      	str	r3, [r5, #0]
 801439e:	f7ed fe3e 	bl	800201e <_fstat>
 80143a2:	1c43      	adds	r3, r0, #1
 80143a4:	d102      	bne.n	80143ac <_fstat_r+0x1c>
 80143a6:	682b      	ldr	r3, [r5, #0]
 80143a8:	b103      	cbz	r3, 80143ac <_fstat_r+0x1c>
 80143aa:	6023      	str	r3, [r4, #0]
 80143ac:	bd38      	pop	{r3, r4, r5, pc}
 80143ae:	bf00      	nop
 80143b0:	2001282c 	.word	0x2001282c

080143b4 <_isatty_r>:
 80143b4:	b538      	push	{r3, r4, r5, lr}
 80143b6:	4d06      	ldr	r5, [pc, #24]	@ (80143d0 <_isatty_r+0x1c>)
 80143b8:	2300      	movs	r3, #0
 80143ba:	4604      	mov	r4, r0
 80143bc:	4608      	mov	r0, r1
 80143be:	602b      	str	r3, [r5, #0]
 80143c0:	f7ed fe32 	bl	8002028 <_isatty>
 80143c4:	1c43      	adds	r3, r0, #1
 80143c6:	d102      	bne.n	80143ce <_isatty_r+0x1a>
 80143c8:	682b      	ldr	r3, [r5, #0]
 80143ca:	b103      	cbz	r3, 80143ce <_isatty_r+0x1a>
 80143cc:	6023      	str	r3, [r4, #0]
 80143ce:	bd38      	pop	{r3, r4, r5, pc}
 80143d0:	2001282c 	.word	0x2001282c

080143d4 <_init>:
 80143d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143d6:	bf00      	nop
 80143d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80143da:	bc08      	pop	{r3}
 80143dc:	469e      	mov	lr, r3
 80143de:	4770      	bx	lr

080143e0 <_fini>:
 80143e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143e2:	bf00      	nop
 80143e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80143e6:	bc08      	pop	{r3}
 80143e8:	469e      	mov	lr, r3
 80143ea:	4770      	bx	lr
