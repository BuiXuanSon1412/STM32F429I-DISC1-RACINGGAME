
STM32F429I-DISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001421c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a04  080143cc  080143cc  000153cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000053d2  08015dd0  08015dd0  00016dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000001c0  0801b1a4  0801b1a4  0001c1a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000042  0801b364  0801b364  0001c364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 ExtFlashSection 000de070  0801b3a8  0801b3a8  0001c3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  080f9418  080f9418  000fb0f0  2**0
                  CONTENTS
  8 .ARM          00000008  080f9418  080f9418  000fa418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  080f9420  080f9420  000fb0f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  080f9420  080f9420  000fa420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  080f9434  080f9434  000fa434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         000000f0  20000000  080f943c  000fb000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          000128dc  200000f0  080f952c  000fb0f0  2**2
                  ALLOC
 14 ._user_heap_stack 00001404  200129cc  080f952c  000fb9cc  2**0
                  ALLOC
 15 .ARM.attributes 00000030  00000000  00000000  000fb0f0  2**0
                  CONTENTS, READONLY
 16 TouchGFX_Framebuffer 00070800  d0000000  d0000000  000fc000  2**2
                  ALLOC
 17 .debug_line   0004fca0  00000000  00000000  000fb120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000008d  00000000  00000000  0014adc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_info   000ada1f  00000000  00000000  0014ae4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 00014808  00000000  00000000  001f886c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00003018  00000000  00000000  0020d078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0011b5d5  00000000  00000000  00210090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_rnglists 00003476  00000000  00000000  0032b665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loclists 000186db  00000000  00000000  0032eadb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_macro  00031272  00000000  00000000  003471b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000c2  00000000  00000000  00378428  2**0
                  CONTENTS, READONLY
 27 .debug_frame  000084e0  00000000  00000000  003784ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000f0 	.word	0x200000f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080143b4 	.word	0x080143b4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000f4 	.word	0x200000f4
 80001ec:	080143b4 	.word	0x080143b4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000580:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005b8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000584:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000586:	e003      	b.n	8000590 <LoopCopyDataInit>

08000588 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000588:	4b0c      	ldr	r3, [pc, #48]	@ (80005bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800058a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800058c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800058e:	3104      	adds	r1, #4

08000590 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000590:	480b      	ldr	r0, [pc, #44]	@ (80005c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000592:	4b0c      	ldr	r3, [pc, #48]	@ (80005c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000594:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000596:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000598:	d3f6      	bcc.n	8000588 <CopyDataInit>
  ldr  r2, =_sbss
 800059a:	4a0b      	ldr	r2, [pc, #44]	@ (80005c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800059c:	e002      	b.n	80005a4 <LoopFillZerobss>

0800059e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800059e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005a0:	f842 3b04 	str.w	r3, [r2], #4

080005a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005a4:	4b09      	ldr	r3, [pc, #36]	@ (80005cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005a8:	d3f9      	bcc.n	800059e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005aa:	f003 fde3 	bl	8004174 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ae:	f013 f991 	bl	80138d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005b2:	f000 fedf 	bl	8001374 <main>
  bx  lr    
 80005b6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80005b8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80005bc:	080f943c 	.word	0x080f943c
  ldr  r0, =_sdata
 80005c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80005c4:	200000f0 	.word	0x200000f0
  ldr  r2, =_sbss
 80005c8:	200000f0 	.word	0x200000f0
  ldr  r3, = _ebss
 80005cc:	200129cc 	.word	0x200129cc

080005d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005d0:	e7fe      	b.n	80005d0 <ADC_IRQHandler>

080005d2 <MX_TouchGFX_Init>:
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 80005d2:	f000 bcb9 	b.w	8000f48 <touchgfx_init>

080005d6 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 80005d6:	f000 bd27 	b.w	8001028 <touchgfx_taskEntry>

080005da <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80005da:	4770      	bx	lr

080005dc <_ZN20STM32TouchControllerD0Ev>:
 80005dc:	b510      	push	{r4, lr}
 80005de:	2104      	movs	r1, #4
 80005e0:	4604      	mov	r4, r0
 80005e2:	f012 fe99 	bl	8013318 <_ZdlPvj>
 80005e6:	4620      	mov	r0, r4
 80005e8:	bd10      	pop	{r4, pc}
	...

080005ec <_Z11BSP_TS_Inittt>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 80005ec:	b538      	push	{r3, r4, r5, lr}
    uint8_t ret = TS_ERROR;

    /* Initialize x and y positions boundaries */
    TsXBoundary = XSize;
 80005ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <_Z11BSP_TS_Inittt+0x34>)
    TsYBoundary = YSize;

    /* Read ID and verify if the IO expander is ready */
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80005f0:	4c0c      	ldr	r4, [pc, #48]	@ (8000624 <_Z11BSP_TS_Inittt+0x38>)
    TsXBoundary = XSize;
 80005f2:	8018      	strh	r0, [r3, #0]
    TsYBoundary = YSize;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000628 <_Z11BSP_TS_Inittt+0x3c>)
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80005f6:	2082      	movs	r0, #130	@ 0x82
    TsYBoundary = YSize;
 80005f8:	8019      	strh	r1, [r3, #0]
    if (stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80005fa:	6863      	ldr	r3, [r4, #4]
 80005fc:	4798      	blx	r3
 80005fe:	f640 0311 	movw	r3, #2065	@ 0x811
 8000602:	4298      	cmp	r0, r3
 8000604:	d10a      	bne.n	800061c <_Z11BSP_TS_Inittt+0x30>
    {
        /* Initialize the TS driver structure */
        TsDrv = &stmpe811_ts_drv;
 8000606:	4d09      	ldr	r5, [pc, #36]	@ (800062c <_Z11BSP_TS_Inittt+0x40>)
    }

    if (ret == TS_OK)
    {
        /* Initialize the LL TS Driver */
        TsDrv->Init(TS_I2C_ADDRESS);
 8000608:	6823      	ldr	r3, [r4, #0]
        TsDrv = &stmpe811_ts_drv;
 800060a:	602c      	str	r4, [r5, #0]
        TsDrv->Init(TS_I2C_ADDRESS);
 800060c:	2082      	movs	r0, #130	@ 0x82
 800060e:	4798      	blx	r3
        TsDrv->Start(TS_I2C_ADDRESS);
 8000610:	682b      	ldr	r3, [r5, #0]
 8000612:	2082      	movs	r0, #130	@ 0x82
 8000614:	68db      	ldr	r3, [r3, #12]
 8000616:	4798      	blx	r3
 8000618:	2000      	movs	r0, #0
    }

    return ret;
}
 800061a:	bd38      	pop	{r3, r4, r5, pc}
    uint8_t ret = TS_ERROR;
 800061c:	2001      	movs	r0, #1
 800061e:	e7fc      	b.n	800061a <_Z11BSP_TS_Inittt+0x2e>
 8000620:	20000116 	.word	0x20000116
 8000624:	2000004c 	.word	0x2000004c
 8000628:	20000114 	.word	0x20000114
 800062c:	20000118 	.word	0x20000118

08000630 <_ZN20STM32TouchController4initEv>:
    BSP_TS_Init(240, 320);
 8000630:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8000634:	20f0      	movs	r0, #240	@ 0xf0
 8000636:	f7ff bfd9 	b.w	80005ec <_Z11BSP_TS_Inittt>
	...

0800063c <_Z15BSP_TS_GetStateP15TS_StateTypeDef>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 800063c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    static uint32_t _x = 0, _y = 0;
    uint16_t xDiff, yDiff, x, y, xr, yr;

    TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 800063e:	4d33      	ldr	r5, [pc, #204]	@ (800070c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xd0>)
 8000640:	682b      	ldr	r3, [r5, #0]
{
 8000642:	4604      	mov	r4, r0
    TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8000644:	691b      	ldr	r3, [r3, #16]
 8000646:	2082      	movs	r0, #130	@ 0x82
 8000648:	4798      	blx	r3
 800064a:	8020      	strh	r0, [r4, #0]

    if (TsState->TouchDetected)
 800064c:	2800      	cmp	r0, #0
 800064e:	d04a      	beq.n	80006e6 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xaa>
    {
        TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8000650:	682b      	ldr	r3, [r5, #0]
 8000652:	f10d 0206 	add.w	r2, sp, #6
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	a901      	add	r1, sp, #4
 800065a:	2082      	movs	r0, #130	@ 0x82
 800065c:	4798      	blx	r3

        //Ensures the coordinates is within the screen
        if (y > 3700)
 800065e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000662:	f640 6274 	movw	r2, #3700	@ 0xe74
 8000666:	4293      	cmp	r3, r2
 8000668:	d93f      	bls.n	80006ea <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xae>
        {
            y = 3700;
 800066a:	f8ad 2006 	strh.w	r2, [sp, #6]

        /* Y value first correction */
        y -= 180;

        /* Y value second correction */
        y = 3520 - y;
 800066e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000672:	1ad2      	subs	r2, r2, r3
 8000674:	b292      	uxth	r2, r2

        /* Y value third correction */
        yr = y / 11;

        /* Return y position value */
        if (yr <= 0)
 8000676:	2a0a      	cmp	r2, #10
 8000678:	d93d      	bls.n	80006f6 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xba>
        yr = y / 11;
 800067a:	230b      	movs	r3, #11
 800067c:	fbb2 f2f3 	udiv	r2, r2, r3
        {
            yr = 0;
        }
        else if (yr > TsYBoundary)
 8000680:	4b23      	ldr	r3, [pc, #140]	@ (8000710 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xd4>)
 8000682:	881b      	ldrh	r3, [r3, #0]
 8000684:	429a      	cmp	r2, r3
 8000686:	d901      	bls.n	800068c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x50>
        {
            yr = TsYBoundary - 1;
 8000688:	3b01      	subs	r3, #1
 800068a:	b29a      	uxth	r2, r3
        {
        }
        y = yr;

        /* X value first correction */
        if (x <= 3000)
 800068c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8000690:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8000694:	428b      	cmp	r3, r1
 8000696:	d830      	bhi.n	80006fa <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xbe>
        {
            x = 3870 - x;
 8000698:	f5c3 6371 	rsb	r3, r3, #3856	@ 0xf10
 800069c:	330e      	adds	r3, #14
 800069e:	b29b      	uxth	r3, r3
        {
            x = 3800 - x;
        }

        /* X value second correction */
        xr = x / 15;
 80006a0:	210f      	movs	r1, #15
 80006a2:	fbb3 f3f1 	udiv	r3, r3, r1
        /* Return X position value */
        if (xr <= 0)
        {
            xr = 0;
        }
        else if (xr > TsXBoundary)
 80006a6:	491b      	ldr	r1, [pc, #108]	@ (8000714 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xd8>)
 80006a8:	8809      	ldrh	r1, [r1, #0]
 80006aa:	428b      	cmp	r3, r1
 80006ac:	d901      	bls.n	80006b2 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x76>
        {
            xr = TsXBoundary - 1;
 80006ae:	3901      	subs	r1, #1
 80006b0:	b28b      	uxth	r3, r1
        else
        {
        }

        x = xr;
        xDiff = x > _x ? (x - _x) : (_x - x);
 80006b2:	4e19      	ldr	r6, [pc, #100]	@ (8000718 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xdc>)
        yDiff = y > _y ? (y - _y) : (_y - y);
 80006b4:	4d19      	ldr	r5, [pc, #100]	@ (800071c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0xe0>)
        xDiff = x > _x ? (x - _x) : (_x - x);
 80006b6:	6830      	ldr	r0, [r6, #0]
        yDiff = y > _y ? (y - _y) : (_y - y);
 80006b8:	682f      	ldr	r7, [r5, #0]
        xDiff = x > _x ? (x - _x) : (_x - x);
 80006ba:	4283      	cmp	r3, r0
 80006bc:	b281      	uxth	r1, r0
 80006be:	bf8c      	ite	hi
 80006c0:	1a59      	subhi	r1, r3, r1
 80006c2:	1ac9      	subls	r1, r1, r3
        yDiff = y > _y ? (y - _y) : (_y - y);
 80006c4:	b2b8      	uxth	r0, r7
 80006c6:	42ba      	cmp	r2, r7
 80006c8:	bf8c      	ite	hi
 80006ca:	1a10      	subhi	r0, r2, r0
 80006cc:	1a80      	subls	r0, r0, r2
        xDiff = x > _x ? (x - _x) : (_x - x);
 80006ce:	b289      	uxth	r1, r1
        yDiff = y > _y ? (y - _y) : (_y - y);
 80006d0:	b280      	uxth	r0, r0

        if (xDiff + yDiff > 5)
 80006d2:	4401      	add	r1, r0
 80006d4:	2905      	cmp	r1, #5
        {
            _x = x;
 80006d6:	bfc8      	it	gt
 80006d8:	6033      	strgt	r3, [r6, #0]
            _y = y;
        }

        /* Update the X position */
        TsState->X = _x;
 80006da:	6833      	ldr	r3, [r6, #0]
            _y = y;
 80006dc:	bfc8      	it	gt
 80006de:	602a      	strgt	r2, [r5, #0]
        TsState->X = _x;
 80006e0:	8063      	strh	r3, [r4, #2]

        /* Update the Y position */
        TsState->Y = _y;
 80006e2:	682b      	ldr	r3, [r5, #0]
 80006e4:	80a3      	strh	r3, [r4, #4]
    }
}
 80006e6:	b003      	add	sp, #12
 80006e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if (y < 180)
 80006ea:	2bb3      	cmp	r3, #179	@ 0xb3
            y = 180;
 80006ec:	bf9c      	itt	ls
 80006ee:	23b4      	movls	r3, #180	@ 0xb4
 80006f0:	f8ad 3006 	strhls.w	r3, [sp, #6]
 80006f4:	e7bb      	b.n	800066e <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x32>
            yr = 0;
 80006f6:	2200      	movs	r2, #0
 80006f8:	e7c8      	b.n	800068c <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x50>
            x = 3800 - x;
 80006fa:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 80006fe:	3308      	adds	r3, #8
 8000700:	b29b      	uxth	r3, r3
        if (xr <= 0)
 8000702:	2b0e      	cmp	r3, #14
 8000704:	d8cc      	bhi.n	80006a0 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x64>
            xr = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	e7d3      	b.n	80006b2 <_Z15BSP_TS_GetStateP15TS_StateTypeDef+0x76>
 800070a:	bf00      	nop
 800070c:	20000118 	.word	0x20000118
 8000710:	20000114 	.word	0x20000114
 8000714:	20000116 	.word	0x20000116
 8000718:	20000110 	.word	0x20000110
 800071c:	2000010c 	.word	0x2000010c

08000720 <_ZN20STM32TouchController11sampleTouchERlS0_>:
{
 8000720:	b537      	push	{r0, r1, r2, r4, r5, lr}
    BSP_TS_GetState(&state);
 8000722:	4668      	mov	r0, sp
{
 8000724:	460d      	mov	r5, r1
 8000726:	4614      	mov	r4, r2
    BSP_TS_GetState(&state);
 8000728:	f7ff ff88 	bl	800063c <_Z15BSP_TS_GetStateP15TS_StateTypeDef>
    if (state.TouchDetected)
 800072c:	f8bd 0000 	ldrh.w	r0, [sp]
 8000730:	b130      	cbz	r0, 8000740 <_ZN20STM32TouchController11sampleTouchERlS0_+0x20>
        x = state.X;
 8000732:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8000736:	602b      	str	r3, [r5, #0]
        y = state.Y;
 8000738:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800073c:	6023      	str	r3, [r4, #0]
        return true;
 800073e:	2001      	movs	r0, #1
}
 8000740:	b003      	add	sp, #12
 8000742:	bd30      	pop	{r4, r5, pc}

08000744 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8000744:	2803      	cmp	r0, #3
 8000746:	d821      	bhi.n	800078c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x48>
 8000748:	e8df f000 	tbb	[pc, r0]
 800074c:	19120b02 	.word	0x19120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8000750:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	fab2 f282 	clz	r2, r2
 8000758:	0952      	lsrs	r2, r2, #5
 800075a:	2104      	movs	r1, #4
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800075c:	480d      	ldr	r0, [pc, #52]	@ (8000794 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
 800075e:	f004 b9b5 	b.w	8004acc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8000762:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8000764:	685a      	ldr	r2, [r3, #4]
 8000766:	fab2 f282 	clz	r2, r2
 800076a:	0952      	lsrs	r2, r2, #5
 800076c:	2108      	movs	r1, #8
 800076e:	e7f5      	b.n	800075c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8000770:	4b07      	ldr	r3, [pc, #28]	@ (8000790 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8000772:	689a      	ldr	r2, [r3, #8]
 8000774:	fab2 f282 	clz	r2, r2
 8000778:	0952      	lsrs	r2, r2, #5
 800077a:	2110      	movs	r1, #16
 800077c:	e7ee      	b.n	800075c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800077e:	4b04      	ldr	r3, [pc, #16]	@ (8000790 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
 8000780:	68da      	ldr	r2, [r3, #12]
 8000782:	fab2 f282 	clz	r2, r2
 8000786:	0952      	lsrs	r2, r2, #5
 8000788:	2120      	movs	r1, #32
 800078a:	e7e7      	b.n	800075c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
#endif
        break;
    }
}
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	2000011c 	.word	0x2000011c
 8000794:	40021000 	.word	0x40021000

08000798 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8000798:	2803      	cmp	r0, #3
 800079a:	d821      	bhi.n	80007e0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x48>
 800079c:	e8df f000 	tbb	[pc, r0]
 80007a0:	19120b02 	.word	0x19120b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 80007a4:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	3a00      	subs	r2, #0
 80007aa:	bf18      	it	ne
 80007ac:	2201      	movne	r2, #1
 80007ae:	2104      	movs	r1, #4
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80007b0:	480d      	ldr	r0, [pc, #52]	@ (80007e8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
 80007b2:	f004 b98b 	b.w	8004acc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 80007b6:	4b0b      	ldr	r3, [pc, #44]	@ (80007e4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 80007b8:	685a      	ldr	r2, [r3, #4]
 80007ba:	3a00      	subs	r2, #0
 80007bc:	bf18      	it	ne
 80007be:	2201      	movne	r2, #1
 80007c0:	2108      	movs	r1, #8
 80007c2:	e7f5      	b.n	80007b0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 80007c4:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 80007c6:	689a      	ldr	r2, [r3, #8]
 80007c8:	3a00      	subs	r2, #0
 80007ca:	bf18      	it	ne
 80007cc:	2201      	movne	r2, #1
 80007ce:	2110      	movs	r1, #16
 80007d0:	e7ee      	b.n	80007b0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 80007d2:	4b04      	ldr	r3, [pc, #16]	@ (80007e4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
 80007d4:	68da      	ldr	r2, [r3, #12]
 80007d6:	3a00      	subs	r2, #0
 80007d8:	bf18      	it	ne
 80007da:	2201      	movne	r2, #1
 80007dc:	2120      	movs	r1, #32
 80007de:	e7e7      	b.n	80007b0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
#endif
        break;
    }
}
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	2000011c 	.word	0x2000011c
 80007e8:	40021000 	.word	0x40021000

080007ec <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 80007ec:	2803      	cmp	r0, #3
 80007ee:	d80d      	bhi.n	800080c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x20>
 80007f0:	e8df f000 	tbb	[pc, r0]
 80007f4:	0a080602 	.word	0x0a080602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80007f8:	2104      	movs	r1, #4
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80007fa:	4805      	ldr	r0, [pc, #20]	@ (8000810 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>)
 80007fc:	f004 b96b 	b.w	8004ad6 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000800:	2108      	movs	r1, #8
 8000802:	e7fa      	b.n	80007fa <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8000804:	2110      	movs	r1, #16
 8000806:	e7f8      	b.n	80007fa <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000808:	2120      	movs	r1, #32
 800080a:	e7f6      	b.n	80007fa <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
#endif
        break;
    }
}
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40021000 	.word	0x40021000

08000814 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8000814:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8000816:	2803      	cmp	r0, #3
 8000818:	d811      	bhi.n	800083e <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x2a>
 800081a:	e8df f000 	tbb	[pc, r0]
 800081e:	0a02      	.short	0x0a02
 8000820:	0e0c      	.short	0x0e0c
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8000822:	2104      	movs	r1, #4
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8000824:	4807      	ldr	r0, [pc, #28]	@ (8000844 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x30>)
 8000826:	f004 f94b 	bl	8004ac0 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 800082a:	1e43      	subs	r3, r0, #1
 800082c:	4258      	negs	r0, r3
 800082e:	4158      	adcs	r0, r3
 8000830:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8000832:	2108      	movs	r1, #8
 8000834:	e7f6      	b.n	8000824 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8000836:	2110      	movs	r1, #16
 8000838:	e7f4      	b.n	8000824 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800083a:	2120      	movs	r1, #32
 800083c:	e7f2      	b.n	8000824 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
    switch (id)
 800083e:	2000      	movs	r0, #0
 8000840:	e7f3      	b.n	800082a <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8000842:	bf00      	nop
 8000844:	40021000 	.word	0x40021000

08000848 <_ZN8touchgfx4GPIO4initEv>:
{
 8000848:	b570      	push	{r4, r5, r6, lr}
 800084a:	4d08      	ldr	r5, [pc, #32]	@ (800086c <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 800084c:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 800084e:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8000850:	b2e0      	uxtb	r0, r4
 8000852:	f7ff ffdf 	bl	8000814 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8000856:	b118      	cbz	r0, 8000860 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8000858:	682b      	ldr	r3, [r5, #0]
 800085a:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 800085c:	bf18      	it	ne
 800085e:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8000860:	3401      	adds	r4, #1
 8000862:	2c05      	cmp	r4, #5
 8000864:	f105 0504 	add.w	r5, r5, #4
 8000868:	d1f2      	bne.n	8000850 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	2000011c 	.word	0x2000011c

08000870 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8000870:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8000872:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8000876:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 800087a:	4770      	bx	lr

0800087c <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 800087c:	2000      	movs	r0, #0
 800087e:	4770      	bx	lr

08000880 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8000880:	4b03      	ldr	r3, [pc, #12]	@ (8000890 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8000882:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8000884:	3900      	subs	r1, #0
 8000886:	bf18      	it	ne
 8000888:	2101      	movne	r1, #1
 800088a:	7019      	strb	r1, [r3, #0]
    }
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	20012657 	.word	0x20012657

08000894 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8000894:	2000      	movs	r0, #0
 8000896:	4770      	bx	lr

08000898 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8000898:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800089a:	b10b      	cbz	r3, 80008a0 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 800089c:	4608      	mov	r0, r1
 800089e:	4718      	bx	r3
        }
    }
 80008a0:	4770      	bx	lr

080008a2 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 80008a2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80008a6:	4770      	bx	lr

080008a8 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 80008a8:	6840      	ldr	r0, [r0, #4]
 80008aa:	6803      	ldr	r3, [r0, #0]
 80008ac:	699b      	ldr	r3, [r3, #24]
 80008ae:	4718      	bx	r3

080008b0 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
    {
    }
 80008b0:	4770      	bx	lr

080008b2 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
    {
    }
 80008b2:	4770      	bx	lr

080008b4 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80008b4:	4770      	bx	lr
	...

080008b8 <_ZN11TouchGFXHAL10initializeEv>:

LOCATION_PRAGMA("TouchGFX_Framebuffer")
uint32_t animationStorage[(240 * 320 * 2 + 3) / 4] LOCATION_ATTRIBUTE("TouchGFX_Framebuffer");

void TouchGFXHAL::initialize()
{
 80008b8:	b570      	push	{r4, r5, r6, lr}
 80008ba:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80008bc:	f000 fc54 	bl	8001168 <_ZN20TouchGFXGeneratedHAL10initializeEv>

    // existing frame buffers are re-used. just add animation storage
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationStorage);
 80008c0:	6823      	ldr	r3, [r4, #0]
 80008c2:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 80008c6:	4b04      	ldr	r3, [pc, #16]	@ (80008d8 <_ZN11TouchGFXHAL10initializeEv+0x20>)
 80008c8:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 80008cc:	4620      	mov	r0, r4
 80008ce:	46ac      	mov	ip, r5
}
 80008d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationStorage);
 80008d4:	4760      	bx	ip
 80008d6:	bf00      	nop
 80008d8:	d0000000 	.word	0xd0000000

080008dc <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 80008dc:	b508      	push	{r3, lr}
    enableLCDControllerInterrupt();
 80008de:	6803      	ldr	r3, [r0, #0]
{
 80008e0:	4604      	mov	r4, r0
    enableLCDControllerInterrupt();
 80008e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80008e6:	4798      	blx	r3
    enableInterrupts();
 80008e8:	6823      	ldr	r3, [r4, #0]
 80008ea:	4620      	mov	r0, r4
 80008ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80008ee:	4798      	blx	r3

    OSWrappers::waitForVSync();
 80008f0:	f000 f8ec 	bl	8000acc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 80008f4:	6823      	ldr	r3, [r4, #0]
 80008f6:	4620      	mov	r0, r4
 80008f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80008fa:	4798      	blx	r3

    LCD_IO_WriteReg(0x29);
 80008fc:	2029      	movs	r0, #41	@ 0x29
 80008fe:	f000 fffb 	bl	80018f8 <LCD_IO_WriteReg>

    for (;;)
    {
        OSWrappers::waitForVSync();
 8000902:	f000 f8e3 	bl	8000acc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8000906:	6823      	ldr	r3, [r4, #0]
 8000908:	4620      	mov	r0, r4
 800090a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800090c:	4798      	blx	r3
    for (;;)
 800090e:	e7f8      	b.n	8000902 <_ZN11TouchGFXHAL9taskEntryEv+0x26>

08000910 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8000910:	b510      	push	{r4, lr}
 8000912:	4604      	mov	r4, r0
        swapFrameBuffers();
 8000914:	f009 f9d2 	bl	8009cbc <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8000918:	6823      	ldr	r3, [r4, #0]
 800091a:	4620      	mov	r0, r4
 800091c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
    }
 8000920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8000924:	4718      	bx	r3

08000926 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8000926:	f000 bc11 	b.w	800114c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

0800092a <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800092a:	f000 bc15 	b.w	8001158 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

0800092e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800092e:	f000 bc41 	b.w	80011b4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08000932 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8000932:	f000 bbe7 	b.w	8001104 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08000936 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8000936:	f000 bc41 	b.w	80011bc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

0800093a <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800093a:	f000 bc49 	b.w	80011d0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

0800093e <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800093e:	f000 bbeb 	b.w	8001118 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

08000942 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 8000942:	f008 bc1b 	b.w	800917c <_ZN8touchgfx3HAL16flushFrameBufferEv>

08000946 <_ZN11TouchGFXHALD0Ev>:
 8000946:	b510      	push	{r4, lr}
 8000948:	217c      	movs	r1, #124	@ 0x7c
 800094a:	4604      	mov	r4, r0
 800094c:	f012 fce4 	bl	8013318 <_ZdlPvj>
 8000950:	4620      	mov	r0, r4
 8000952:	bd10      	pop	{r4, pc}

08000954 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void performDisplayOrientationChange()
 8000954:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8000956:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
 800095a:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 800095e:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
        if (requestedOrientation != nativeDisplayOrientation)
 8000960:	428c      	cmp	r4, r1
            if (DISPLAY_ROTATION == rotate0)
 8000962:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8000964:	d009      	beq.n	800097a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8000966:	b93a      	cbnz	r2, 8000978 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000968:	4a0a      	ldr	r2, [pc, #40]	@ (8000994 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 800096a:	490b      	ldr	r1, [pc, #44]	@ (8000998 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800096c:	8814      	ldrh	r4, [r2, #0]
                const uint16_t tmp = DISPLAY_HEIGHT;
 800096e:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_WIDTH = tmp;
 8000970:	8010      	strh	r0, [r2, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000972:	800c      	strh	r4, [r1, #0]
                DISPLAY_ROTATION = rotate90;
 8000974:	2201      	movs	r2, #1
            DISPLAY_ROTATION = rotate0;
 8000976:	701a      	strb	r2, [r3, #0]
    }
 8000978:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 800097a:	2a00      	cmp	r2, #0
 800097c:	d0fc      	beq.n	8000978 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800097e:	4a05      	ldr	r2, [pc, #20]	@ (8000994 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000980:	4905      	ldr	r1, [pc, #20]	@ (8000998 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000982:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8000984:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8000986:	8010      	strh	r0, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8000988:	800c      	strh	r4, [r1, #0]
            DISPLAY_ROTATION = rotate0;
 800098a:	2200      	movs	r2, #0
 800098c:	e7f3      	b.n	8000976 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 800098e:	bf00      	nop
 8000990:	20012650 	.word	0x20012650
 8000994:	2001264c 	.word	0x2001264c
 8000998:	2001264e 	.word	0x2001264e

0800099c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 800099c:	b570      	push	{r4, r5, r6, lr}
 800099e:	460d      	mov	r5, r1
 80009a0:	4619      	mov	r1, r3
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80009a2:	b935      	cbnz	r5, 80009b2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x16>
 80009a4:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 80009a6:	4a0a      	ldr	r2, [pc, #40]	@ (80009d0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 80009a8:	480a      	ldr	r0, [pc, #40]	@ (80009d4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 80009aa:	f240 21d2 	movw	r1, #722	@ 0x2d2
 80009ae:	f012 fce1 	bl	8013374 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80009b2:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80009b6:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 80009b8:	3a00      	subs	r2, #0
 80009ba:	bf18      	it	ne
 80009bc:	2201      	movne	r2, #1
 80009be:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 80009c0:	6803      	ldr	r3, [r0, #0]
    }
 80009c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setAnimationStorage(animationStorage);
 80009c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80009ca:	4718      	bx	r3
 80009cc:	08014424 	.word	0x08014424
 80009d0:	0801445c 	.word	0x0801445c
 80009d4:	080144aa 	.word	0x080144aa
 80009d8:	20012656 	.word	0x20012656

080009dc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 80009dc:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80009de:	4b09      	ldr	r3, [pc, #36]	@ (8000a04 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	428b      	cmp	r3, r1
 80009e4:	d803      	bhi.n	80009ee <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 80009e6:	4b08      	ldr	r3, [pc, #32]	@ (8000a08 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 80009e8:	881b      	ldrh	r3, [r3, #0]
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d905      	bls.n	80009fa <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 80009ee:	4b07      	ldr	r3, [pc, #28]	@ (8000a0c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 80009f0:	4a07      	ldr	r2, [pc, #28]	@ (8000a10 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 80009f2:	4808      	ldr	r0, [pc, #32]	@ (8000a14 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 80009f4:	219e      	movs	r1, #158	@ 0x9e
 80009f6:	f012 fcbd 	bl	8013374 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 80009fa:	4b07      	ldr	r3, [pc, #28]	@ (8000a18 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 80009fc:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 80009fe:	4b07      	ldr	r3, [pc, #28]	@ (8000a1c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8000a00:	801a      	strh	r2, [r3, #0]
    }
 8000a02:	bd08      	pop	{r3, pc}
 8000a04:	2001264c 	.word	0x2001264c
 8000a08:	2001264e 	.word	0x2001264e
 8000a0c:	080144ef 	.word	0x080144ef
 8000a10:	08014552 	.word	0x08014552
 8000a14:	080144aa 	.word	0x080144aa
 8000a18:	20012652 	.word	0x20012652
 8000a1c:	20012654 	.word	0x20012654

08000a20 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8000a20:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 8000a22:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 8000a26:	b118      	cbz	r0, 8000a30 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8000a28:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 8000a2a:	6803      	ldr	r3, [r0, #0]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4718      	bx	r3
    }
 8000a30:	4770      	bx	lr
	...

08000a34 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8000a34:	2101      	movs	r1, #1
{
 8000a36:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8000a38:	2200      	movs	r2, #0
 8000a3a:	4608      	mov	r0, r1
 8000a3c:	f006 f867 	bl	8006b0e <osSemaphoreNew>
 8000a40:	4b0a      	ldr	r3, [pc, #40]	@ (8000a6c <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8000a42:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8000a44:	b928      	cbnz	r0, 8000a52 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8000a46:	4b0a      	ldr	r3, [pc, #40]	@ (8000a70 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8000a48:	4a0a      	ldr	r2, [pc, #40]	@ (8000a74 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8000a4a:	2128      	movs	r1, #40	@ 0x28

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8000a4c:	480a      	ldr	r0, [pc, #40]	@ (8000a78 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8000a4e:	f012 fc91 	bl	8013374 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2104      	movs	r1, #4
 8000a56:	2001      	movs	r0, #1
 8000a58:	f006 f901 	bl	8006c5e <osMessageQueueNew>
 8000a5c:	4b07      	ldr	r3, [pc, #28]	@ (8000a7c <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8000a5e:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8000a60:	b918      	cbnz	r0, 8000a6a <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8000a62:	4b07      	ldr	r3, [pc, #28]	@ (8000a80 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8000a64:	4a03      	ldr	r2, [pc, #12]	@ (8000a74 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8000a66:	212c      	movs	r1, #44	@ 0x2c
 8000a68:	e7f0      	b.n	8000a4c <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8000a6a:	bd08      	pop	{r3, pc}
 8000a6c:	20000130 	.word	0x20000130
 8000a70:	08014670 	.word	0x08014670
 8000a74:	080146b9 	.word	0x080146b9
 8000a78:	080146e8 	.word	0x080146e8
 8000a7c:	2000012c 	.word	0x2000012c
 8000a80:	0801475c 	.word	0x0801475c

08000a84 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8000a84:	4b02      	ldr	r3, [pc, #8]	@ (8000a90 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8000a86:	f04f 31ff 	mov.w	r1, #4294967295
 8000a8a:	6818      	ldr	r0, [r3, #0]
 8000a8c:	f006 b889 	b.w	8006ba2 <osSemaphoreAcquire>
 8000a90:	20000130 	.word	0x20000130

08000a94 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8000a94:	4b01      	ldr	r3, [pc, #4]	@ (8000a9c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8000a96:	6818      	ldr	r0, [r3, #0]
 8000a98:	f006 b8af 	b.w	8006bfa <osSemaphoreRelease>
 8000a9c:	20000130 	.word	0x20000130

08000aa0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8000aa0:	4b02      	ldr	r3, [pc, #8]	@ (8000aac <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	6818      	ldr	r0, [r3, #0]
 8000aa6:	f006 b87c 	b.w	8006ba2 <osSemaphoreAcquire>
 8000aaa:	bf00      	nop
 8000aac:	20000130 	.word	0x20000130

08000ab0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 8000ab0:	f7ff bff0 	b.w	8000a94 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08000ab4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8000ab4:	4803      	ldr	r0, [pc, #12]	@ (8000ac4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8000ab6:	4904      	ldr	r1, [pc, #16]	@ (8000ac8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8000ab8:	6800      	ldr	r0, [r0, #0]
 8000aba:	2300      	movs	r3, #0
 8000abc:	461a      	mov	r2, r3
 8000abe:	f006 b909 	b.w	8006cd4 <osMessageQueuePut>
 8000ac2:	bf00      	nop
 8000ac4:	2000012c 	.word	0x2000012c
 8000ac8:	20000004 	.word	0x20000004

08000acc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8000acc:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8000ace:	4c08      	ldr	r4, [pc, #32]	@ (8000af0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	a901      	add	r1, sp, #4
 8000ad6:	6820      	ldr	r0, [r4, #0]
 8000ad8:	f006 f92d 	bl	8006d36 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8000adc:	6820      	ldr	r0, [r4, #0]
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	a901      	add	r1, sp, #4
 8000ae6:	f006 f926 	bl	8006d36 <osMessageQueueGet>
}
 8000aea:	b002      	add	sp, #8
 8000aec:	bd10      	pop	{r4, pc}
 8000aee:	bf00      	nop
 8000af0:	2000012c 	.word	0x2000012c

08000af4 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8000af4:	6803      	ldr	r3, [r0, #0]
 8000af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af8:	4718      	bx	r3

08000afa <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8000afa:	2001      	movs	r0, #1
 8000afc:	4770      	bx	lr

08000afe <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8000afe:	6803      	ldr	r3, [r0, #0]
 8000b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b02:	4718      	bx	r3

08000b04 <_ZN8STM32DMA10initializeEv>:
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}

void STM32DMA::initialize()
{
 8000b04:	b082      	sub	sp, #8
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	9301      	str	r3, [sp, #4]
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b40 <_ZN8STM32DMA10initializeEv+0x3c>)
 8000b0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b0e:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000b12:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b16:	f402 0200 	and.w	r2, r2, #8388608	@ 0x800000
 8000b1a:	9201      	str	r2, [sp, #4]
 8000b1c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8000b1e:	691a      	ldr	r2, [r3, #16]
 8000b20:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000b24:	611a      	str	r2, [r3, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8000b26:	691a      	ldr	r2, [r3, #16]
 8000b28:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 8000b2c:	611a      	str	r2, [r3, #16]

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8000b2e:	4b05      	ldr	r3, [pc, #20]	@ (8000b44 <_ZN8STM32DMA10initializeEv+0x40>)
 8000b30:	4a05      	ldr	r2, [pc, #20]	@ (8000b48 <_ZN8STM32DMA10initializeEv+0x44>)
 8000b32:	611a      	str	r2, [r3, #16]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b34:	4b05      	ldr	r3, [pc, #20]	@ (8000b4c <_ZN8STM32DMA10initializeEv+0x48>)
 8000b36:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000b3a:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
 8000b3c:	b002      	add	sp, #8
 8000b3e:	4770      	bx	lr
 8000b40:	40023800 	.word	0x40023800
 8000b44:	20001778 	.word	0x20001778
 8000b48:	08000ddd 	.word	0x08000ddd
 8000b4c:	e000e100 	.word	0xe000e100

08000b50 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8000b50:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8000b54:	4770      	bx	lr
	...

08000b58 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8000b58:	4b05      	ldr	r3, [pc, #20]	@ (8000b70 <_ZN8STM32DMAD1Ev+0x18>)
 8000b5a:	6003      	str	r3, [r0, #0]
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b5c:	4b05      	ldr	r3, [pc, #20]	@ (8000b74 <_ZN8STM32DMAD1Ev+0x1c>)
 8000b5e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000b62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b66:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b6a:	f3bf 8f6f 	isb	sy
}
 8000b6e:	4770      	bx	lr
 8000b70:	08014920 	.word	0x08014920
 8000b74:	e000e100 	.word	0xe000e100

08000b78 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8000b78:	b510      	push	{r4, lr}
 8000b7a:	4604      	mov	r4, r0
}
 8000b7c:	f44f 615a 	mov.w	r1, #3488	@ 0xda0
 8000b80:	f7ff ffea 	bl	8000b58 <_ZN8STM32DMAD1Ev>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f012 fbc7 	bl	8013318 <_ZdlPvj>
 8000b8a:	4620      	mov	r0, r4
 8000b8c:	bd10      	pop	{r4, pc}
	...

08000b90 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8000b90:	b508      	push	{r3, lr}
    switch (format)
 8000b92:	280a      	cmp	r0, #10
 8000b94:	d809      	bhi.n	8000baa <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8000b96:	e8df f000 	tbb	[pc, r0]
 8000b9a:	1006      	.short	0x1006
 8000b9c:	0808080e 	.word	0x0808080e
 8000ba0:	10101008 	.word	0x10101008
 8000ba4:	10          	.byte	0x10
 8000ba5:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8000ba6:	2002      	movs	r0, #2
}
 8000ba8:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8000baa:	4b05      	ldr	r3, [pc, #20]	@ (8000bc0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8000bac:	4a05      	ldr	r2, [pc, #20]	@ (8000bc4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8000bae:	4806      	ldr	r0, [pc, #24]	@ (8000bc8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8000bb0:	2187      	movs	r1, #135	@ 0x87
 8000bb2:	f012 fbdf 	bl	8013374 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	e7f6      	b.n	8000ba8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8000bba:	2001      	movs	r0, #1
    return dma2dColorMode;
 8000bbc:	e7f4      	b.n	8000ba8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8000bbe:	bf00      	nop
 8000bc0:	0801479e 	.word	0x0801479e
 8000bc4:	080147b9 	.word	0x080147b9
 8000bc8:	08014804 	.word	0x08014804

08000bcc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8000bcc:	b538      	push	{r3, r4, r5, lr}
 8000bce:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000bd0:	7f88      	ldrb	r0, [r1, #30]
 8000bd2:	f7ff ffdd 	bl	8000b90 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000bd6:	8aa5      	ldrh	r5, [r4, #20]
 8000bd8:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000bda:	4b16      	ldr	r3, [pc, #88]	@ (8000c34 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x68>)

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000bdc:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000bde:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000be0:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8000be4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000be6:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000be8:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000bea:	1b52      	subs	r2, r2, r5
 8000bec:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8000bee:	6825      	ldr	r5, [r4, #0]
 8000bf0:	2d08      	cmp	r5, #8
 8000bf2:	d10e      	bne.n	8000c12 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000bf4:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000bf6:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000bf8:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8000bfa:	7f20      	ldrb	r0, [r4, #28]
 8000bfc:	4a0e      	ldr	r2, [pc, #56]	@ (8000c38 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x6c>)
 8000bfe:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8000c02:	61da      	str	r2, [r3, #28]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8000c04:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000c06:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8000c08:	4a0c      	ldr	r2, [pc, #48]	@ (8000c3c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x70>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000c0a:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000c0c:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8000c0e:	601a      	str	r2, [r3, #0]
    }
}
 8000c10:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8000c12:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8000c14:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8000c16:	611a      	str	r2, [r3, #16]
 8000c18:	68e1      	ldr	r1, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 8000c1a:	0a0a      	lsrs	r2, r1, #8
 8000c1c:	0948      	lsrs	r0, r1, #5
 8000c1e:	f402 4278 	and.w	r2, r2, #63488	@ 0xf800
 8000c22:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8000c26:	4302      	orrs	r2, r0
 8000c28:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8000c30:	4a03      	ldr	r2, [pc, #12]	@ (8000c40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x74>)
 8000c32:	e7ec      	b.n	8000c0e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8000c34:	4002b000 	.word	0x4002b000
 8000c38:	00010009 	.word	0x00010009
 8000c3c:	00020201 	.word	0x00020201
 8000c40:	00030201 	.word	0x00030201

08000c44 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8000c44:	b508      	push	{r3, lr}
    switch (format)
 8000c46:	280b      	cmp	r0, #11
 8000c48:	d80b      	bhi.n	8000c62 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8000c4a:	e8df f000 	tbb	[pc, r0]
 8000c4e:	1206      	.short	0x1206
 8000c50:	0a0a0a10 	.word	0x0a0a0a10
 8000c54:	0808080a 	.word	0x0808080a
 8000c58:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8000c5a:	2002      	movs	r0, #2
}
 8000c5c:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8000c5e:	2005      	movs	r0, #5
        break;
 8000c60:	e7fc      	b.n	8000c5c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8000c62:	4b05      	ldr	r3, [pc, #20]	@ (8000c78 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8000c64:	4a05      	ldr	r2, [pc, #20]	@ (8000c7c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8000c66:	4806      	ldr	r0, [pc, #24]	@ (8000c80 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8000c68:	2166      	movs	r1, #102	@ 0x66
 8000c6a:	f012 fb83 	bl	8013374 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8000c6e:	2000      	movs	r0, #0
 8000c70:	e7f4      	b.n	8000c5c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8000c72:	2001      	movs	r0, #1
    return dma2dColorMode;
 8000c74:	e7f2      	b.n	8000c5c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8000c76:	bf00      	nop
 8000c78:	0801479e 	.word	0x0801479e
 8000c7c:	08014876 	.word	0x08014876
 8000c80:	08014804 	.word	0x08014804

08000c84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8000c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8000c88:	f891 801d 	ldrb.w	r8, [r1, #29]
{
 8000c8c:	460c      	mov	r4, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8000c8e:	4640      	mov	r0, r8
 8000c90:	f7ff ffd8 	bl	8000c44 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000c94:	7fa7      	ldrb	r7, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8000c96:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000c98:	4638      	mov	r0, r7
 8000c9a:	f7ff ffd3 	bl	8000c44 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8000c9e:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8000ca0:	4638      	mov	r0, r7
 8000ca2:	f7ff ff75 	bl	8000b90 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000ca6:	8aa1      	ldrh	r1, [r4, #20]
 8000ca8:	8b62      	ldrh	r2, [r4, #26]
 8000caa:	4b44      	ldr	r3, [pc, #272]	@ (8000dbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8000cac:	1a52      	subs	r2, r2, r1
 8000cae:	641a      	str	r2, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8000cb0:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8000cb2:	8b22      	ldrh	r2, [r4, #24]
 8000cb4:	1a52      	subs	r2, r2, r1
 8000cb6:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000cb8:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8000cba:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8000cbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cc0:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000cc2:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8000cc4:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000cc6:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8000cc8:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8000cca:	6820      	ldr	r0, [r4, #0]
 8000ccc:	2880      	cmp	r0, #128	@ 0x80
 8000cce:	d028      	beq.n	8000d22 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 8000cd0:	7f22      	ldrb	r2, [r4, #28]
 8000cd2:	d80f      	bhi.n	8000cf4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x70>
 8000cd4:	2820      	cmp	r0, #32
 8000cd6:	d067      	beq.n	8000da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x124>
 8000cd8:	2840      	cmp	r0, #64	@ 0x40
 8000cda:	d065      	beq.n	8000da8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x124>
 8000cdc:	2804      	cmp	r0, #4
 8000cde:	d01a      	beq.n	8000d16 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000ce0:	4b36      	ldr	r3, [pc, #216]	@ (8000dbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8000ce2:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 8000ce6:	f445 3500 	orr.w	r5, r5, #131072	@ 0x20000
        if (blitOp.srcFormat != blitOp.dstFormat)
 8000cea:	45b8      	cmp	r8, r7
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000cec:	61dd      	str	r5, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8000cee:	d061      	beq.n	8000db4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x130>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8000cf0:	4a33      	ldr	r2, [pc, #204]	@ (8000dc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 8000cf2:	e044      	b.n	8000d7e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
    switch (blitOp.operation)
 8000cf4:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8000cf8:	d004      	beq.n	8000d04 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 8000cfa:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8000cfe:	d1ef      	bne.n	8000ce0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d00:	4830      	ldr	r0, [pc, #192]	@ (8000dc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 8000d02:	e000      	b.n	8000d06 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x82>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d04:	4830      	ldr	r0, [pc, #192]	@ (8000dc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d06:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 8000d0a:	61da      	str	r2, [r3, #28]
 8000d0c:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8000d0e:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000d10:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000d12:	6159      	str	r1, [r3, #20]
 8000d14:	e032      	b.n	8000d7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf8>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d16:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 8000d1a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d1e:	61da      	str	r2, [r3, #28]
 8000d20:	e7f6      	b.n	8000d10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8000d22:	68a0      	ldr	r0, [r4, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8000d24:	1d02      	adds	r2, r0, #4
 8000d26:	62da      	str	r2, [r3, #44]	@ 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000d28:	7f22      	ldrb	r2, [r4, #28]
 8000d2a:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
 8000d2e:	f445 3500 	orr.w	r5, r5, #131072	@ 0x20000
 8000d32:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8000d34:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8000d36:	6159      	str	r1, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
 8000d38:	7801      	ldrb	r1, [r0, #0]
 8000d3a:	b141      	cbz	r1, 8000d4e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xca>
 8000d3c:	2901      	cmp	r1, #1
 8000d3e:	d021      	beq.n	8000d84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
                assert(0 && "Unsupported format");
 8000d40:	4b22      	ldr	r3, [pc, #136]	@ (8000dcc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8000d42:	4a23      	ldr	r2, [pc, #140]	@ (8000dd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 8000d44:	4823      	ldr	r0, [pc, #140]	@ (8000dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
 8000d46:	f240 1111 	movw	r1, #273	@ 0x111
 8000d4a:	f012 fb13 	bl	8013374 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000d4e:	69da      	ldr	r2, [r3, #28]
 8000d50:	8841      	ldrh	r1, [r0, #2]
 8000d52:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8000d56:	3901      	subs	r1, #1
 8000d58:	f022 0210 	bic.w	r2, r2, #16
 8000d5c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000d60:	61da      	str	r2, [r3, #28]
            bool blend = true;
 8000d62:	2101      	movs	r1, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8000d64:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8000d66:	69da      	ldr	r2, [r3, #28]
 8000d68:	f042 0220 	orr.w	r2, r2, #32
 8000d6c:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8000d6e:	69da      	ldr	r2, [r3, #28]
 8000d70:	0692      	lsls	r2, r2, #26
 8000d72:	d4fc      	bmi.n	8000d6e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xea>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8000d74:	2210      	movs	r2, #16
 8000d76:	609a      	str	r2, [r3, #8]
            if (blend)
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d0b9      	beq.n	8000cf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8000d7c:	4a16      	ldr	r2, [pc, #88]	@ (8000dd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8000d7e:	601a      	str	r2, [r3, #0]
}
 8000d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if (blitOp.alpha == 255)
 8000d84:	f1b2 01ff 	subs.w	r1, r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000d88:	69da      	ldr	r2, [r3, #28]
 8000d8a:	8840      	ldrh	r0, [r0, #2]
 8000d8c:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8000d90:	f100 30ff 	add.w	r0, r0, #4294967295
 8000d94:	f022 0210 	bic.w	r2, r2, #16
 8000d98:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8000d9c:	f042 0210 	orr.w	r2, r2, #16
                if (blitOp.alpha == 255)
 8000da0:	bf18      	it	ne
 8000da2:	2101      	movne	r1, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8000da4:	61da      	str	r2, [r3, #28]
                break;
 8000da6:	e7dd      	b.n	8000d64 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8000da8:	ea45 6202 	orr.w	r2, r5, r2, lsl #24
 8000dac:	4b03      	ldr	r3, [pc, #12]	@ (8000dbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8000dae:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000db2:	e7b4      	b.n	8000d1e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9a>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8000db4:	f240 2201 	movw	r2, #513	@ 0x201
 8000db8:	e7e1      	b.n	8000d7e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
 8000dba:	bf00      	nop
 8000dbc:	4002b000 	.word	0x4002b000
 8000dc0:	00010201 	.word	0x00010201
 8000dc4:	00020009 	.word	0x00020009
 8000dc8:	0002000a 	.word	0x0002000a
 8000dcc:	080148c0 	.word	0x080148c0
 8000dd0:	080148da 	.word	0x080148da
 8000dd4:	08014804 	.word	0x08014804
 8000dd8:	00020201 	.word	0x00020201

08000ddc <DMA2D_XferCpltCallback>:
        return instance;
 8000ddc:	4b02      	ldr	r3, [pc, #8]	@ (8000de8 <DMA2D_XferCpltCallback+0xc>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8000de2:	6803      	ldr	r3, [r0, #0]
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	4718      	bx	r3
 8000de8:	20012658 	.word	0x20012658

08000dec <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8000dec:	b570      	push	{r4, r5, r6, lr}
 8000dee:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8000df0:	4625      	mov	r5, r4
 8000df2:	4b0a      	ldr	r3, [pc, #40]	@ (8000e1c <_ZN8STM32DMAC1Ev+0x30>)
 8000df4:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8000df6:	2600      	movs	r6, #0
 8000df8:	6060      	str	r0, [r4, #4]
 8000dfa:	7226      	strb	r6, [r4, #8]
 8000dfc:	7266      	strb	r6, [r4, #9]
 8000dfe:	f845 3b20 	str.w	r3, [r5], #32
 8000e02:	2260      	movs	r2, #96	@ 0x60
 8000e04:	4629      	mov	r1, r5
 8000e06:	f009 f897 	bl	8009f38 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8000e0a:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 8000e0e:	60ee      	str	r6, [r5, #12]
 8000e10:	3524      	adds	r5, #36	@ 0x24
 8000e12:	429d      	cmp	r5, r3
 8000e14:	d1fb      	bne.n	8000e0e <_ZN8STM32DMAC1Ev+0x22>
}
 8000e16:	4620      	mov	r0, r4
 8000e18:	bd70      	pop	{r4, r5, r6, pc}
 8000e1a:	bf00      	nop
 8000e1c:	08014920 	.word	0x08014920

08000e20 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8000e20:	2001      	movs	r0, #1
 8000e22:	4770      	bx	lr

08000e24 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8000e24:	2038      	movs	r0, #56	@ 0x38
 8000e26:	4770      	bx	lr

08000e28 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8000e28:	2338      	movs	r3, #56	@ 0x38
 8000e2a:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8000e2e:	3008      	adds	r0, #8
 8000e30:	4770      	bx	lr

08000e32 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8000e32:	2338      	movs	r3, #56	@ 0x38
 8000e34:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8000e38:	3008      	adds	r0, #8
 8000e3a:	4770      	bx	lr

08000e3c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	4770      	bx	lr

08000e40 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8000e40:	f44f 705d 	mov.w	r0, #884	@ 0x374
 8000e44:	4770      	bx	lr

08000e46 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000e46:	f44f 735d 	mov.w	r3, #884	@ 0x374
 8000e4a:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8000e4e:	3008      	adds	r0, #8
 8000e50:	4770      	bx	lr

08000e52 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000e52:	f44f 735d 	mov.w	r3, #884	@ 0x374
 8000e56:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8000e5a:	3008      	adds	r0, #8
 8000e5c:	4770      	bx	lr

08000e5e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8000e5e:	2001      	movs	r0, #1
 8000e60:	4770      	bx	lr

08000e62 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8000e62:	2010      	movs	r0, #16
 8000e64:	4770      	bx	lr

08000e66 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000e66:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8000e6a:	3008      	adds	r0, #8
 8000e6c:	4770      	bx	lr

08000e6e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8000e6e:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8000e72:	3008      	adds	r0, #8
 8000e74:	4770      	bx	lr

08000e76 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8000e76:	4608      	mov	r0, r1
 8000e78:	f001 bca0 	b.w	80027bc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

08000e7c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8000e7c:	b510      	push	{r4, lr}
 8000e7e:	4b03      	ldr	r3, [pc, #12]	@ (8000e8c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x10>)
 8000e80:	6003      	str	r3, [r0, #0]
 8000e82:	4604      	mov	r4, r0
 8000e84:	f007 fed1 	bl	8008c2a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8000e88:	4620      	mov	r0, r4
 8000e8a:	bd10      	pop	{r4, pc}
 8000e8c:	080149d8 	.word	0x080149d8

08000e90 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
 8000e90:	b510      	push	{r4, lr}
 8000e92:	4604      	mov	r4, r0
 8000e94:	f7ff fff2 	bl	8000e7c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8000e98:	4620      	mov	r0, r4
 8000e9a:	2140      	movs	r1, #64	@ 0x40
 8000e9c:	f012 fa3c 	bl	8013318 <_ZdlPvj>
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	bd10      	pop	{r4, pc}

08000ea4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8000ea4:	b510      	push	{r4, lr}
 8000ea6:	4b03      	ldr	r3, [pc, #12]	@ (8000eb4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8000ea8:	6003      	str	r3, [r0, #0]
 8000eaa:	4604      	mov	r4, r0
 8000eac:	f007 febd 	bl	8008c2a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8000eb0:	4620      	mov	r0, r4
 8000eb2:	bd10      	pop	{r4, pc}
 8000eb4:	080149a4 	.word	0x080149a4

08000eb8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8000eb8:	b510      	push	{r4, lr}
 8000eba:	4604      	mov	r4, r0
 8000ebc:	f7ff fff2 	bl	8000ea4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8000ec0:	4620      	mov	r0, r4
 8000ec2:	f44f 715f 	mov.w	r1, #892	@ 0x37c
 8000ec6:	f012 fa27 	bl	8013318 <_ZdlPvj>
 8000eca:	4620      	mov	r0, r4
 8000ecc:	bd10      	pop	{r4, pc}
	...

08000ed0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8000ed0:	b510      	push	{r4, lr}
 8000ed2:	4b03      	ldr	r3, [pc, #12]	@ (8000ee0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8000ed4:	6003      	str	r3, [r0, #0]
 8000ed6:	4604      	mov	r4, r0
 8000ed8:	f007 fea7 	bl	8008c2a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8000edc:	4620      	mov	r0, r4
 8000ede:	bd10      	pop	{r4, pc}
 8000ee0:	08014970 	.word	0x08014970

08000ee4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8000ee4:	b510      	push	{r4, lr}
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	f7ff fff2 	bl	8000ed0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8000eec:	4620      	mov	r0, r4
 8000eee:	2118      	movs	r1, #24
 8000ef0:	f012 fa12 	bl	8013318 <_ZdlPvj>
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	bd10      	pop	{r4, pc}

08000ef8 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8000ef8:	b510      	push	{r4, lr}
 8000efa:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <_ZN12FrontendHeapD1Ev+0x24>)
 8000efc:	6003      	str	r3, [r0, #0]
 8000efe:	4604      	mov	r4, r0
 8000f00:	f500 706a 	add.w	r0, r0, #936	@ 0x3a8
 8000f04:	f7ff ffba 	bl	8000e7c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_14WipeTransitionILNS_9DirectionE2EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8000f08:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8000f0c:	f7ff ffca 	bl	8000ea4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen2ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8000f10:	f104 0014 	add.w	r0, r4, #20
 8000f14:	f7ff ffdc 	bl	8000ed0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8000f18:	4620      	mov	r0, r4
 8000f1a:	bd10      	pop	{r4, pc}
 8000f1c:	08014a0c 	.word	0x08014a0c

08000f20 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8000f20:	b508      	push	{r3, lr}
 8000f22:	4802      	ldr	r0, [pc, #8]	@ (8000f2c <__tcf_0+0xc>)
 8000f24:	f7ff ffe8 	bl	8000ef8 <_ZN12FrontendHeapD1Ev>
 8000f28:	bd08      	pop	{r3, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000fe8 	.word	0x20000fe8

08000f30 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8000f30:	b510      	push	{r4, lr}
 8000f32:	4604      	mov	r4, r0
 8000f34:	f7ff ffe0 	bl	8000ef8 <_ZN12FrontendHeapD1Ev>
 8000f38:	4620      	mov	r0, r4
 8000f3a:	f44f 61aa 	mov.w	r1, #1360	@ 0x550
 8000f3e:	f012 f9eb 	bl	8013318 <_ZdlPvj>
 8000f42:	4620      	mov	r0, r4
 8000f44:	bd10      	pop	{r4, pc}
	...

08000f48 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 320);

void touchgfx_init()
{
 8000f48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8000f4c:	f001 f8a0 	bl	8002090 <_ZN14BitmapDatabase11getInstanceEv>
 8000f50:	4605      	mov	r5, r0
 8000f52:	f001 f8a1 	bl	8002098 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8000f56:	2400      	movs	r4, #0
 8000f58:	4601      	mov	r1, r0
 8000f5a:	4623      	mov	r3, r4
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	4622      	mov	r2, r4
 8000f60:	9400      	str	r4, [sp, #0]
 8000f62:	f00f fb47 	bl	80105f4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8000f66:	4b25      	ldr	r3, [pc, #148]	@ (8000ffc <touchgfx_init+0xb4>)
 8000f68:	4a25      	ldr	r2, [pc, #148]	@ (8001000 <touchgfx_init+0xb8>)
        static FrontendHeap instance;
 8000f6a:	4d26      	ldr	r5, [pc, #152]	@ (8001004 <touchgfx_init+0xbc>)
 8000f6c:	601a      	str	r2, [r3, #0]
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8000f6e:	4620      	mov	r0, r4
 8000f70:	f002 fb8c 	bl	800368c <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8000f74:	4824      	ldr	r0, [pc, #144]	@ (8001008 <touchgfx_init+0xc0>)
 8000f76:	f00f faa5 	bl	80104c4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8000f7a:	682b      	ldr	r3, [r5, #0]
 8000f7c:	f3bf 8f5b 	dmb	ish
 8000f80:	07db      	lsls	r3, r3, #31
 8000f82:	d435      	bmi.n	8000ff0 <touchgfx_init+0xa8>
 8000f84:	4628      	mov	r0, r5
 8000f86:	f012 f9c9 	bl	801331c <__cxa_guard_acquire>
 8000f8a:	b388      	cbz	r0, 8000ff0 <touchgfx_init+0xa8>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 8000f8c:	4c1f      	ldr	r4, [pc, #124]	@ (800100c <touchgfx_init+0xc4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8000f8e:	4b20      	ldr	r3, [pc, #128]	@ (8001010 <touchgfx_init+0xc8>)
 8000f90:	6023      	str	r3, [r4, #0]
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8000f92:	f504 767d 	add.w	r6, r4, #1012	@ 0x3f4
        : presenterStorage(pres),
 8000f96:	f104 0014 	add.w	r0, r4, #20
          screenStorage(scr),
 8000f9a:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
          transitionStorage(tra),
 8000f9e:	f504 776a 	add.w	r7, r4, #936	@ 0x3a8
        : presenterStorage(pres),
 8000fa2:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 8000fa4:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 8000fa8:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 8000faa:	6126      	str	r6, [r4, #16]
 8000fac:	f007 fe3e 	bl	8008c2c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8000fb0:	4b18      	ldr	r3, [pc, #96]	@ (8001014 <touchgfx_init+0xcc>)
 8000fb2:	6163      	str	r3, [r4, #20]
 8000fb4:	4640      	mov	r0, r8
 8000fb6:	f007 fe39 	bl	8008c2c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8000fba:	4b17      	ldr	r3, [pc, #92]	@ (8001018 <touchgfx_init+0xd0>)
 8000fbc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000fbe:	4638      	mov	r0, r7
 8000fc0:	f007 fe34 	bl	8008c2c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8000fc4:	4b15      	ldr	r3, [pc, #84]	@ (800101c <touchgfx_init+0xd4>)
 8000fc6:	f8c4 33a8 	str.w	r3, [r4, #936]	@ 0x3a8
 8000fca:	f504 707a 	add.w	r0, r4, #1000	@ 0x3e8
 8000fce:	f002 fbdd 	bl	800378c <_ZN5ModelC1Ev>
 8000fd2:	4622      	mov	r2, r4
 8000fd4:	f504 717a 	add.w	r1, r4, #1000	@ 0x3e8
 8000fd8:	4630      	mov	r0, r6
 8000fda:	f002 fbcd 	bl	8003778 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8000fde:	4630      	mov	r0, r6
 8000fe0:	f001 fbec 	bl	80027bc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 8000fe4:	480e      	ldr	r0, [pc, #56]	@ (8001020 <touchgfx_init+0xd8>)
 8000fe6:	f012 f9e3 	bl	80133b0 <atexit>
 8000fea:	4628      	mov	r0, r5
 8000fec:	f012 f9a2 	bl	8013334 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8000ff0:	480c      	ldr	r0, [pc, #48]	@ (8001024 <touchgfx_init+0xdc>)
}
 8000ff2:	b002      	add	sp, #8
 8000ff4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8000ff8:	f7ff bc5e 	b.w	80008b8 <_ZN11TouchGFXHAL10initializeEv>
 8000ffc:	200126b4 	.word	0x200126b4
 8001000:	200001b0 	.word	0x200001b0
 8001004:	20000fe4 	.word	0x20000fe4
 8001008:	20000008 	.word	0x20000008
 800100c:	20000fe8 	.word	0x20000fe8
 8001010:	08014a0c 	.word	0x08014a0c
 8001014:	08014970 	.word	0x08014970
 8001018:	080149a4 	.word	0x080149a4
 800101c:	080149d8 	.word	0x080149d8
 8001020:	08000f21 	.word	0x08000f21
 8001024:	20000134 	.word	0x20000134

08001028 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8001028:	4801      	ldr	r0, [pc, #4]	@ (8001030 <touchgfx_taskEntry+0x8>)
 800102a:	f7ff bc57 	b.w	80008dc <_ZN11TouchGFXHAL9taskEntryEv>
 800102e:	bf00      	nop
 8001030:	20000134 	.word	0x20000134

08001034 <_GLOBAL__sub_I_touchgfx_init>:
}
 8001034:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 8001036:	4e22      	ldr	r6, [pc, #136]	@ (80010c0 <_GLOBAL__sub_I_touchgfx_init+0x8c>)
{
public:

    STM32TouchController() {}
 8001038:	4c22      	ldr	r4, [pc, #136]	@ (80010c4 <_GLOBAL__sub_I_touchgfx_init+0x90>)
static LCD16bpp display;
 800103a:	4d23      	ldr	r5, [pc, #140]	@ (80010c8 <_GLOBAL__sub_I_touchgfx_init+0x94>)
 800103c:	4b23      	ldr	r3, [pc, #140]	@ (80010cc <_GLOBAL__sub_I_touchgfx_init+0x98>)
 800103e:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 8001040:	4630      	mov	r0, r6
 8001042:	f7ff fed3 	bl	8000dec <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8001046:	4628      	mov	r0, r5
 8001048:	f010 f934 	bl	80112b4 <_ZN8touchgfx8LCD16bppC1Ev>
        : dma(dmaInterface),
 800104c:	4b20      	ldr	r3, [pc, #128]	@ (80010d0 <_GLOBAL__sub_I_touchgfx_init+0x9c>)
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800104e:	4821      	ldr	r0, [pc, #132]	@ (80010d4 <_GLOBAL__sub_I_touchgfx_init+0xa0>)
          touchController(touchCtrl),
 8001050:	60dc      	str	r4, [r3, #12]
          mcuInstrumentation(0),
 8001052:	2200      	movs	r2, #0
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8001054:	f44f 7180 	mov.w	r1, #256	@ 0x100
          auxiliaryLCD(0),
 8001058:	e9c3 1212 	strd	r1, r2, [r3, #72]	@ 0x48
          touchSampleRate(1),
 800105c:	491e      	ldr	r1, [pc, #120]	@ (80010d8 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 800105e:	861a      	strh	r2, [r3, #48]	@ 0x30
          vSyncCompensationEnabled(false),
 8001060:	e9c3 121a 	strd	r1, r2, [r3, #104]	@ 0x68
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8001064:	491d      	ldr	r1, [pc, #116]	@ (80010dc <_GLOBAL__sub_I_touchgfx_init+0xa8>)
 8001066:	6799      	str	r1, [r3, #120]	@ 0x78
        instance = this;
 8001068:	491d      	ldr	r1, [pc, #116]	@ (80010e0 <_GLOBAL__sub_I_touchgfx_init+0xac>)
          useAuxiliaryLCD(false),
 800106a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        instance = this;
 800106e:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001070:	21f0      	movs	r1, #240	@ 0xf0
 8001072:	8001      	strh	r1, [r0, #0]
 8001074:	481b      	ldr	r0, [pc, #108]	@ (80010e4 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
          lastY(0),
 8001076:	665a      	str	r2, [r3, #100]	@ 0x64
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001078:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800107a:	481b      	ldr	r0, [pc, #108]	@ (80010e8 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
          updateMCULoad(0),
 800107c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001080:	f44f 71a0 	mov.w	r1, #320	@ 0x140
          buttonController(0),
 8001084:	e9c3 2204 	strd	r2, r2, [r3, #16]
 8001088:	e9c3 2206 	strd	r2, r2, [r3, #24]
 800108c:	e9c3 2208 	strd	r2, r2, [r3, #32]
 8001090:	e9c3 220a 	strd	r2, r2, [r3, #40]	@ 0x28
          frameBuffer0(0),
 8001094:	e9c3 220e 	strd	r2, r2, [r3, #56]	@ 0x38
          frameBuffer2(0),
 8001098:	e9c3 2210 	strd	r2, r2, [r3, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 800109c:	e9c3 2214 	strd	r2, r2, [r3, #80]	@ 0x50
          lastX(0),
 80010a0:	e9c3 2217 	strd	r2, r2, [r3, #92]	@ 0x5c
          cc_begin(0),
 80010a4:	675a      	str	r2, [r3, #116]	@ 0x74
          lcdRef(display),
 80010a6:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80010aa:	8001      	strh	r1, [r0, #0]
 80010ac:	480f      	ldr	r0, [pc, #60]	@ (80010ec <_GLOBAL__sub_I_touchgfx_init+0xb8>)
 80010ae:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 80010b0:	490f      	ldr	r1, [pc, #60]	@ (80010f0 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
 80010b2:	700a      	strb	r2, [r1, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80010b4:	2201      	movs	r2, #1
 80010b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80010ba:	4a0e      	ldr	r2, [pc, #56]	@ (80010f4 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
 80010bc:	601a      	str	r2, [r3, #0]
}
 80010be:	bd70      	pop	{r4, r5, r6, pc}
 80010c0:	20000240 	.word	0x20000240
 80010c4:	20000fe0 	.word	0x20000fe0
 80010c8:	200001b4 	.word	0x200001b4
 80010cc:	08014414 	.word	0x08014414
 80010d0:	20000134 	.word	0x20000134
 80010d4:	2001264c 	.word	0x2001264c
 80010d8:	01000001 	.word	0x01000001
 80010dc:	01010000 	.word	0x01010000
 80010e0:	20012658 	.word	0x20012658
 80010e4:	20012652 	.word	0x20012652
 80010e8:	2001264e 	.word	0x2001264e
 80010ec:	20012654 	.word	0x20012654
 80010f0:	20012650 	.word	0x20012650
 80010f4:	080145a0 	.word	0x080145a0

080010f8 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 80010f8:	4801      	ldr	r0, [pc, #4]	@ (8001100 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 80010fa:	f7ff bd2d 	b.w	8000b58 <_ZN8STM32DMAD1Ev>
 80010fe:	bf00      	nop
 8001100:	20000240 	.word	0x20000240

08001104 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001104:	4b03      	ldr	r3, [pc, #12]	@ (8001114 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 8001106:	2290      	movs	r2, #144	@ 0x90
 8001108:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
 800110c:	f883 2358 	strb.w	r2, [r3, #856]	@ 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000e100 	.word	0xe000e100

08001118 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8001118:	4a09      	ldr	r2, [pc, #36]	@ (8001140 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 800111a:	490a      	ldr	r1, [pc, #40]	@ (8001144 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 800111c:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800111e:	480a      	ldr	r0, [pc, #40]	@ (8001148 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8001120:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001124:	3b01      	subs	r3, #1
 8001126:	b29b      	uxth	r3, r3
 8001128:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800112a:	6911      	ldr	r1, [r2, #16]
 800112c:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8001130:	3901      	subs	r1, #1
 8001132:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8001134:	6413      	str	r3, [r2, #64]	@ 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8001136:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6353      	str	r3, [r2, #52]	@ 0x34
}
 800113e:	4770      	bx	lr
 8001140:	40016800 	.word	0x40016800
 8001144:	2000153a 	.word	0x2000153a
 8001148:	20001538 	.word	0x20001538

0800114c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    HAL::endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 800114c:	4b01      	ldr	r3, [pc, #4]	@ (8001154 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 800114e:	f8d3 00ac 	ldr.w	r0, [r3, #172]	@ 0xac
}
 8001152:	4770      	bx	lr
 8001154:	40016800 	.word	0x40016800

08001158 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8001158:	4b02      	ldr	r3, [pc, #8]	@ (8001164 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800115a:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800115c:	f8c3 10ac 	str.w	r1, [r3, #172]	@ 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8001160:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001162:	4770      	bx	lr
 8001164:	40016800 	.word	0x40016800

08001168 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8001168:	b570      	push	{r4, r5, r6, lr}
 800116a:	4604      	mov	r4, r0
    HAL::initialize();
 800116c:	f008 f85b 	bl	8009226 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8001170:	6823      	ldr	r3, [r4, #0]
 8001172:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8001174:	f00b fd66 	bl	800cc44 <_ZN8touchgfx11Application11getInstanceEv>
 8001178:	4601      	mov	r1, r0
 800117a:	4620      	mov	r0, r4
 800117c:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 800117e:	6823      	ldr	r3, [r4, #0]
 8001180:	4a05      	ldr	r2, [pc, #20]	@ (8001198 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x30>)
 8001182:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8001186:	4620      	mov	r0, r4
 8001188:	46ac      	mov	ip, r5
 800118a:	2300      	movs	r3, #0
}
 800118c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
 8001190:	f5a2 3116 	sub.w	r1, r2, #153600	@ 0x25800
 8001194:	4760      	bx	ip
 8001196:	bf00      	nop
 8001198:	d004b000 	.word	0xd004b000

0800119c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 800119c:	f008 b82a 	b.w	80091f4 <_ZN8touchgfx3HAL10beginFrameEv>

080011a0 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
 80011a0:	f890 304b 	ldrb.w	r3, [r0, #75]	@ 0x4b
 80011a4:	b113      	cbz	r3, 80011ac <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xc>
        refreshRequested = true;
 80011a6:	4b02      	ldr	r3, [pc, #8]	@ (80011b0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x10>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	701a      	strb	r2, [r3, #0]
    HAL::endFrame();
 80011ac:	f008 b82e 	b.w	800920c <_ZN8touchgfx3HAL8endFrameEv>
 80011b0:	2000153c 	.word	0x2000153c

080011b4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 80011b4:	f007 bfe8 	b.w	8009188 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080011b8 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 80011b8:	f008 b949 	b.w	800944e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

080011bc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011bc:	4b03      	ldr	r3, [pc, #12]	@ (80011cc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 80011be:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80011c8:	609a      	str	r2, [r3, #8]
}
 80011ca:	4770      	bx	lr
 80011cc:	e000e100 	.word	0xe000e100

080011d0 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011d0:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 80011d2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80011d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80011da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80011de:	f3bf 8f6f 	isb	sy
 80011e2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80011e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80011ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80011ee:	f3bf 8f6f 	isb	sy
}
 80011f2:	4770      	bx	lr
 80011f4:	e000e100 	.word	0xe000e100

080011f8 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 80011f8:	b510      	push	{r4, lr}
        return instance;
 80011fa:	4c14      	ldr	r4, [pc, #80]	@ (800124c <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
 80011fc:	6823      	ldr	r3, [r4, #0]
 80011fe:	b323      	cbz	r3, 800124a <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8001200:	4b13      	ldr	r3, [pc, #76]	@ (8001250 <HAL_LTDC_LineEventCallback+0x58>)
 8001202:	4a14      	ldr	r2, [pc, #80]	@ (8001254 <HAL_LTDC_LineEventCallback+0x5c>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001206:	8811      	ldrh	r1, [r2, #0]
 8001208:	428b      	cmp	r3, r1
 800120a:	d113      	bne.n	8001234 <HAL_LTDC_LineEventCallback+0x3c>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 800120c:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <HAL_LTDC_LineEventCallback+0x60>)
 800120e:	8819      	ldrh	r1, [r3, #0]
 8001210:	f004 fa54 	bl	80056bc <HAL_LTDC_ProgramLineEvent>
 8001214:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 8001216:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800121a:	3301      	adds	r3, #1
 800121c:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 8001220:	f7ff fc48 	bl	8000ab4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8001224:	6820      	ldr	r0, [r4, #0]
 8001226:	f008 fd49 	bl	8009cbc <_ZN8touchgfx3HAL16swapFrameBuffersEv>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 800122a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 800122e:	2000      	movs	r0, #0
 8001230:	f7ff ba88 	b.w	8000744 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8001234:	f004 fa42 	bl	80056bc <HAL_LTDC_ProgramLineEvent>
        return instance;
 8001238:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 800123a:	6803      	ldr	r3, [r0, #0]
 800123c:	6a1b      	ldr	r3, [r3, #32]
 800123e:	4798      	blx	r3
    }
 8001240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001244:	2000      	movs	r0, #0
 8001246:	f7ff baa7 	b.w	8000798 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 800124a:	bd10      	pop	{r4, pc}
 800124c:	20012658 	.word	0x20012658
 8001250:	40016800 	.word	0x40016800
 8001254:	2000153a 	.word	0x2000153a
 8001258:	20001538 	.word	0x20001538

0800125c <SPI5_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI5_Write(uint16_t Value)
{
 800125c:	b507      	push	{r0, r1, r2, lr}
  HAL_StatusTypeDef status = HAL_OK;

  status = HAL_SPI_Transmit(&hspi5, (uint8_t*) &Value, 1, Spi5Timeout);
 800125e:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <SPI5_Write+0x1c>)
{
 8001260:	f8ad 0006 	strh.w	r0, [sp, #6]
  status = HAL_SPI_Transmit(&hspi5, (uint8_t*) &Value, 1, Spi5Timeout);
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4805      	ldr	r0, [pc, #20]	@ (800127c <SPI5_Write+0x20>)
 8001268:	2201      	movs	r2, #1
 800126a:	f10d 0106 	add.w	r1, sp, #6
 800126e:	f004 ff73 	bl	8006158 <HAL_SPI_Transmit>
  if(status != HAL_OK)
  {
    /* Re-Initialize the BUS */
    SPI5_Error();
  }
}
 8001272:	b003      	add	sp, #12
 8001274:	f85d fb04 	ldr.w	pc, [sp], #4
 8001278:	2000000c 	.word	0x2000000c
 800127c:	20001624 	.word	0x20001624

08001280 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001280:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	osDelay(1);
 8001282:	2001      	movs	r0, #1
 8001284:	f005 fc37 	bl	8006af6 <osDelay>
  for(;;)
 8001288:	e7fb      	b.n	8001282 <StartDefaultTask+0x2>
	...

0800128c <StartHardwarePollingTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartHardwarePollingTask */
void StartHardwarePollingTask(void *argument)
{
 800128c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartHardwarePollingTask */
  /* Infinite loop */
  for(;;)
  {
     HAL_ADC_Start(&hadc1);
 800128e:	4d0f      	ldr	r5, [pc, #60]	@ (80012cc <StartHardwarePollingTask+0x40>)
     HAL_ADC_Start(&hadc2);
 8001290:	4c0f      	ldr	r4, [pc, #60]	@ (80012d0 <StartHardwarePollingTask+0x44>)
     HAL_ADC_Start(&hadc1);
 8001292:	4628      	mov	r0, r5
 8001294:	f003 f862 	bl	800435c <HAL_ADC_Start>
     HAL_ADC_Start(&hadc2);
 8001298:	4620      	mov	r0, r4
 800129a:	f003 f85f 	bl	800435c <HAL_ADC_Start>
     HAL_ADC_PollForConversion (&hadc1, 1);
 800129e:	2101      	movs	r1, #1
 80012a0:	4628      	mov	r0, r5
 80012a2:	f003 f8d9 	bl	8004458 <HAL_ADC_PollForConversion>
     HAL_ADC_PollForConversion (&hadc2, 1);
 80012a6:	2101      	movs	r1, #1
 80012a8:	4620      	mov	r0, r4
 80012aa:	f003 f8d5 	bl	8004458 <HAL_ADC_PollForConversion>
     JoystickX = HAL_ADC_GetValue(&hadc1);
 80012ae:	4628      	mov	r0, r5
 80012b0:	f003 f925 	bl	80044fe <HAL_ADC_GetValue>
 80012b4:	4b07      	ldr	r3, [pc, #28]	@ (80012d4 <StartHardwarePollingTask+0x48>)
 80012b6:	8018      	strh	r0, [r3, #0]
     JoystickY = HAL_ADC_GetValue(&hadc2);
 80012b8:	4620      	mov	r0, r4
 80012ba:	f003 f920 	bl	80044fe <HAL_ADC_GetValue>
 80012be:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <StartHardwarePollingTask+0x4c>)
 80012c0:	8018      	strh	r0, [r3, #0]
     osDelay(100);
 80012c2:	2064      	movs	r0, #100	@ 0x64
 80012c4:	f005 fc17 	bl	8006af6 <osDelay>
  for(;;)
 80012c8:	e7e3      	b.n	8001292 <StartHardwarePollingTask+0x6>
 80012ca:	bf00      	nop
 80012cc:	200015a8 	.word	0x200015a8
 80012d0:	20001560 	.word	0x20001560
 80012d4:	2000155c 	.word	0x2000155c
 80012d8:	2000155a 	.word	0x2000155a

080012dc <SystemClock_Config>:
{
 80012dc:	b530      	push	{r4, r5, lr}
 80012de:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e0:	2210      	movs	r2, #16
 80012e2:	2100      	movs	r1, #0
 80012e4:	a80a      	add	r0, sp, #40	@ 0x28
 80012e6:	f012 fa4c 	bl	8013782 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ea:	2214      	movs	r2, #20
 80012ec:	2100      	movs	r1, #0
 80012ee:	a803      	add	r0, sp, #12
 80012f0:	f012 fa47 	bl	8013782 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f4:	2400      	movs	r4, #0
 80012f6:	4b1d      	ldr	r3, [pc, #116]	@ (800136c <SystemClock_Config+0x90>)
 80012f8:	9401      	str	r4, [sp, #4]
 80012fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012fc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001300:	641a      	str	r2, [r3, #64]	@ 0x40
 8001302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001304:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001308:	9301      	str	r3, [sp, #4]
 800130a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800130c:	4b18      	ldr	r3, [pc, #96]	@ (8001370 <SystemClock_Config+0x94>)
 800130e:	9402      	str	r4, [sp, #8]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800131e:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001320:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001322:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001324:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001328:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800132c:	2502      	movs	r5, #2
 800132e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001332:	e9cd 530e 	strd	r5, r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001336:	2108      	movs	r1, #8
 8001338:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800133c:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001340:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001342:	2304      	movs	r3, #4
 8001344:	9313      	str	r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001346:	9512      	str	r5, [sp, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001348:	f004 f9d6 	bl	80056f8 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800134c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800134e:	e9cd 3503 	strd	r3, r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001352:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8001356:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800135a:	e9cd 0306 	strd	r0, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800135e:	2105      	movs	r1, #5
 8001360:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001362:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001364:	f004 fba4 	bl	8005ab0 <HAL_RCC_ClockConfig>
}
 8001368:	b015      	add	sp, #84	@ 0x54
 800136a:	bd30      	pop	{r4, r5, pc}
 800136c:	40023800 	.word	0x40023800
 8001370:	40007000 	.word	0x40007000

08001374 <main>:
{
 8001374:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001378:	b09b      	sub	sp, #108	@ 0x6c
  HAL_Init();
 800137a:	f002 ff09 	bl	8004190 <HAL_Init>
  SystemClock_Config();
 800137e:	f7ff ffad 	bl	80012dc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001382:	2214      	movs	r2, #20
 8001384:	2100      	movs	r1, #0
 8001386:	a80d      	add	r0, sp, #52	@ 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001388:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138a:	f012 f9fa 	bl	8013782 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800138e:	4bc6      	ldr	r3, [pc, #792]	@ (80016a8 <main+0x334>)
 8001390:	9400      	str	r4, [sp, #0]
 8001392:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOE, VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8001394:	48c5      	ldr	r0, [pc, #788]	@ (80016ac <main+0x338>)
  hi2c3.Instance = I2C3;
 8001396:	4ec6      	ldr	r6, [pc, #792]	@ (80016b0 <main+0x33c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001398:	f042 0210 	orr.w	r2, r2, #16
 800139c:	631a      	str	r2, [r3, #48]	@ 0x30
 800139e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013a0:	f002 0210 	and.w	r2, r2, #16
 80013a4:	9200      	str	r2, [sp, #0]
 80013a6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013a8:	9401      	str	r4, [sp, #4]
 80013aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013ac:	f042 0220 	orr.w	r2, r2, #32
 80013b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80013b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013b4:	f002 0220 	and.w	r2, r2, #32
 80013b8:	9201      	str	r2, [sp, #4]
 80013ba:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013bc:	9402      	str	r4, [sp, #8]
 80013be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013c0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80013c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80013c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013c8:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80013cc:	9202      	str	r2, [sp, #8]
 80013ce:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d0:	9403      	str	r4, [sp, #12]
 80013d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013d4:	f042 0204 	orr.w	r2, r2, #4
 80013d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80013da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013dc:	f002 0204 	and.w	r2, r2, #4
 80013e0:	9203      	str	r2, [sp, #12]
 80013e2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e4:	9404      	str	r4, [sp, #16]
 80013e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013e8:	f042 0201 	orr.w	r2, r2, #1
 80013ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80013ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013f0:	f002 0201 	and.w	r2, r2, #1
 80013f4:	9204      	str	r2, [sp, #16]
 80013f6:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f8:	9405      	str	r4, [sp, #20]
 80013fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013fc:	f042 0202 	orr.w	r2, r2, #2
 8001400:	631a      	str	r2, [r3, #48]	@ 0x30
 8001402:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001404:	f002 0202 	and.w	r2, r2, #2
 8001408:	9205      	str	r2, [sp, #20]
 800140a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800140c:	9406      	str	r4, [sp, #24]
 800140e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001410:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001414:	631a      	str	r2, [r3, #48]	@ 0x30
 8001416:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001418:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800141c:	9206      	str	r2, [sp, #24]
 800141e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001420:	9407      	str	r4, [sp, #28]
 8001422:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001424:	f042 0208 	orr.w	r2, r2, #8
 8001428:	631a      	str	r2, [r3, #48]	@ 0x30
 800142a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142c:	f003 0308 	and.w	r3, r3, #8
 8001430:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOE, VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8001432:	4622      	mov	r2, r4
 8001434:	213c      	movs	r1, #60	@ 0x3c
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001436:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOE, VSYNC_FREQ_Pin|RENDER_TIME_Pin|FRAME_RATE_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8001438:	f003 fb48 	bl	8004acc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800143c:	489d      	ldr	r0, [pc, #628]	@ (80016b4 <main+0x340>)
 800143e:	4622      	mov	r2, r4
 8001440:	2104      	movs	r1, #4
 8001442:	f003 fb43 	bl	8004acc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8001446:	4622      	mov	r2, r4
 8001448:	489b      	ldr	r0, [pc, #620]	@ (80016b8 <main+0x344>)
 800144a:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144e:	2501      	movs	r5, #1
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8001450:	f003 fb3c 	bl	8004acc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001454:	f04f 0a03 	mov.w	sl, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001458:	233c      	movs	r3, #60	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800145a:	4894      	ldr	r0, [pc, #592]	@ (80016ac <main+0x338>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145c:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001460:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001462:	f04f 0b02 	mov.w	fp, #2
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001466:	2704      	movs	r7, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001468:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800146e:	f003 fa43 	bl	80048f8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001472:	4890      	ldr	r0, [pc, #576]	@ (80016b4 <main+0x340>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001474:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001478:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147a:	e9cd 750d 	strd	r7, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001480:	f003 fa3a 	bl	80048f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001484:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001488:	488b      	ldr	r0, [pc, #556]	@ (80016b8 <main+0x344>)
 800148a:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148c:	e9cd 350d 	strd	r3, r5, [sp, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001490:	e9cd 4b0f 	strd	r4, fp, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001494:	f003 fa30 	bl	80048f8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001498:	4888      	ldr	r0, [pc, #544]	@ (80016bc <main+0x348>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	940f      	str	r4, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149c:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800149e:	e9cd 540d 	strd	r5, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a2:	f003 fa29 	bl	80048f8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014a6:	a90d      	add	r1, sp, #52	@ 0x34
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 80014a8:	230c      	movs	r3, #12
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014aa:	4885      	ldr	r0, [pc, #532]	@ (80016c0 <main+0x34c>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ac:	950f      	str	r5, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ae:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014b2:	f003 fa21 	bl	80048f8 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 80014b6:	4883      	ldr	r0, [pc, #524]	@ (80016c4 <main+0x350>)
 80014b8:	4b83      	ldr	r3, [pc, #524]	@ (80016c8 <main+0x354>)
 80014ba:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80014bc:	f003 f910 	bl	80046e0 <HAL_CRC_Init>
  hi2c3.Init.ClockSpeed = 100000;
 80014c0:	4a82      	ldr	r2, [pc, #520]	@ (80016cc <main+0x358>)
 80014c2:	4b83      	ldr	r3, [pc, #524]	@ (80016d0 <main+0x35c>)
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014c4:	6234      	str	r4, [r6, #32]
  hi2c3.Init.ClockSpeed = 100000;
 80014c6:	e9c6 2300 	strd	r2, r3, [r6]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014ca:	4630      	mov	r0, r6
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014d0:	e9c6 3404 	strd	r3, r4, [r6, #16]
  hi2c3.Init.OwnAddress1 = 0;
 80014d4:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014d8:	e9c6 4406 	strd	r4, r4, [r6, #24]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014dc:	f003 fcf2 	bl	8004ec4 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_DISABLE) != HAL_OK)
 80014e0:	2110      	movs	r1, #16
 80014e2:	4630      	mov	r0, r6
 80014e4:	f003 ff2e 	bl	8005344 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80014e8:	4621      	mov	r1, r4
 80014ea:	4630      	mov	r0, r6
 80014ec:	f003 ff49 	bl	8005382 <HAL_I2CEx_ConfigDigitalFilter>
  hspi5.Instance = SPI5;
 80014f0:	4878      	ldr	r0, [pc, #480]	@ (80016d4 <main+0x360>)
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80014f2:	4979      	ldr	r1, [pc, #484]	@ (80016d8 <main+0x364>)
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014f4:	6284      	str	r4, [r0, #40]	@ 0x28
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80014f6:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80014fa:	e9c0 1300 	strd	r1, r3, [r0]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014fe:	f44f 7600 	mov.w	r6, #512	@ 0x200
 8001502:	2318      	movs	r3, #24
 8001504:	e9c0 6306 	strd	r6, r3, [r0, #24]
  hspi5.Init.CRCPolynomial = 10;
 8001508:	230a      	movs	r3, #10
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800150a:	4e74      	ldr	r6, [pc, #464]	@ (80016dc <main+0x368>)
  hspi5.Init.CRCPolynomial = 10;
 800150c:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800150e:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001512:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001516:	e9c0 4408 	strd	r4, r4, [r0, #32]
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800151a:	f004 fdc1 	bl	80060a0 <HAL_SPI_Init>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800151e:	4b70      	ldr	r3, [pc, #448]	@ (80016e0 <main+0x36c>)
  SdramTiming.LoadToActiveDelay = 2;
 8001520:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001524:	f04f 0910 	mov.w	r9, #16
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001528:	e9c6 3500 	strd	r3, r5, [r6]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800152c:	2340      	movs	r3, #64	@ 0x40
 800152e:	e9c6 9304 	strd	r9, r3, [r6, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001532:	f44f 73c0 	mov.w	r3, #384	@ 0x180
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001536:	e9c6 3406 	strd	r3, r4, [r6, #24]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800153a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800153e:	e9c6 3408 	strd	r3, r4, [r6, #32]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8001542:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001546:	62b3      	str	r3, [r6, #40]	@ 0x28
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001548:	a90d      	add	r1, sp, #52	@ 0x34
  SdramTiming.ExitSelfRefreshDelay = 7;
 800154a:	2307      	movs	r3, #7
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800154c:	4630      	mov	r0, r6
  SdramTiming.WriteRecoveryTime = 3;
 800154e:	e9cd 3a10 	strd	r3, sl, [sp, #64]	@ 0x40
  SdramTiming.SelfRefreshTime = 4;
 8001552:	e9cd 370e 	strd	r3, r7, [sp, #56]	@ 0x38
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001556:	f04f 0808 	mov.w	r8, #8
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800155a:	e9c6 4702 	strd	r4, r7, [r6, #8]
  SdramTiming.RCDDelay = 2;
 800155e:	e9cd bb12 	strd	fp, fp, [sp, #72]	@ 0x48
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001562:	f004 fc99 	bl	8005e98 <HAL_SDRAM_Init>
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001566:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800156a:	a909      	add	r1, sp, #36	@ 0x24
 800156c:	4630      	mov	r0, r6
  Command->AutoRefreshNumber       = 1;
 800156e:	e9cd 850a 	strd	r8, r5, [sp, #40]	@ 0x28
 __IO uint32_t tmpmrd =0;
 8001572:	9408      	str	r4, [sp, #32]
  Command->CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8001574:	9509      	str	r5, [sp, #36]	@ 0x24
  Command->ModeRegisterDefinition  = 0;
 8001576:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001578:	f004 fcae 	bl	8005ed8 <HAL_SDRAM_SendCommand>
  HAL_Delay(1);
 800157c:	4628      	mov	r0, r5
 800157e:	f002 fe33 	bl	80041e8 <HAL_Delay>
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001582:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001586:	a909      	add	r1, sp, #36	@ 0x24
 8001588:	4630      	mov	r0, r6
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800158a:	e9cd b809 	strd	fp, r8, [sp, #36]	@ 0x24
  Command->ModeRegisterDefinition  = 0;
 800158e:	e9cd 540b 	strd	r5, r4, [sp, #44]	@ 0x2c
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001592:	f004 fca1 	bl	8005ed8 <HAL_SDRAM_SendCommand>
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8001596:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800159a:	a909      	add	r1, sp, #36	@ 0x24
 800159c:	4630      	mov	r0, r6
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800159e:	e9cd a809 	strd	sl, r8, [sp, #36]	@ 0x24
  Command->ModeRegisterDefinition  = 0;
 80015a2:	e9cd 740b 	strd	r7, r4, [sp, #44]	@ 0x2c
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80015a6:	f004 fc97 	bl	8005ed8 <HAL_SDRAM_SendCommand>
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80015aa:	f44f 730c 	mov.w	r3, #560	@ 0x230
 80015ae:	9308      	str	r3, [sp, #32]
  Command->ModeRegisterDefinition  = tmpmrd;
 80015b0:	9b08      	ldr	r3, [sp, #32]
 80015b2:	930c      	str	r3, [sp, #48]	@ 0x30
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80015b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015b8:	a909      	add	r1, sp, #36	@ 0x24
 80015ba:	4630      	mov	r0, r6
  Command->CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80015bc:	e9cd 7809 	strd	r7, r8, [sp, #36]	@ 0x24
  Command->AutoRefreshNumber       = 1;
 80015c0:	950b      	str	r5, [sp, #44]	@ 0x2c
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 80015c2:	f004 fc89 	bl	8005ed8 <HAL_SDRAM_SendCommand>
  HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 80015c6:	f240 516a 	movw	r1, #1386	@ 0x56a
 80015ca:	4630      	mov	r0, r6
 80015cc:	f004 fca2 	bl	8005f14 <HAL_SDRAM_ProgramRefreshRate>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80015d0:	2234      	movs	r2, #52	@ 0x34
 80015d2:	4621      	mov	r1, r4
 80015d4:	eb0d 0002 	add.w	r0, sp, r2
 80015d8:	f012 f8d3 	bl	8013782 <memset>
  hltdc.Instance = LTDC;
 80015dc:	4e41      	ldr	r6, [pc, #260]	@ (80016e4 <main+0x370>)
 80015de:	4b42      	ldr	r3, [pc, #264]	@ (80016e8 <main+0x374>)
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80015e0:	6134      	str	r4, [r6, #16]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80015e2:	e9c6 3400 	strd	r3, r4, [r6]
  hltdc.Init.HorizontalSync = 9;
 80015e6:	2309      	movs	r3, #9
  hltdc.Init.VerticalSync = 1;
 80015e8:	e9c6 3505 	strd	r3, r5, [r6, #20]
  hltdc.Init.AccumulatedHBP = 29;
 80015ec:	231d      	movs	r3, #29
  hltdc.Init.AccumulatedActiveH = 323;
 80015ee:	f240 1c0d 	movw	ip, #269	@ 0x10d
  hltdc.Init.AccumulatedVBP = 3;
 80015f2:	e9c6 3a07 	strd	r3, sl, [r6, #28]
  hltdc.Init.AccumulatedActiveH = 323;
 80015f6:	f240 1343 	movw	r3, #323	@ 0x143
 80015fa:	e9c6 c309 	strd	ip, r3, [r6, #36]	@ 0x24
  hltdc.Init.TotalHeigh = 327;
 80015fe:	f240 1e17 	movw	lr, #279	@ 0x117
 8001602:	f240 1347 	movw	r3, #327	@ 0x147
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001606:	4630      	mov	r0, r6
  hltdc.Init.TotalHeigh = 327;
 8001608:	e9c6 e30b 	strd	lr, r3, [r6, #44]	@ 0x2c
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800160c:	e9c6 4402 	strd	r4, r4, [r6, #8]
  hltdc.Init.Backcolor.Blue = 0;
 8001610:	86b4      	strh	r4, [r6, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 8001612:	f886 4036 	strb.w	r4, [r6, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001616:	f003 ff59 	bl	80054cc <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 800161a:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.WindowX1 = 240;
 800161c:	22f0      	movs	r2, #240	@ 0xf0
  pLayerCfg.Alpha0 = 0;
 800161e:	e9cd 1412 	strd	r1, r4, [sp, #72]	@ 0x48
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001622:	f04f 0a05 	mov.w	sl, #5
 8001626:	f44f 6180 	mov.w	r1, #1024	@ 0x400
  pLayerCfg.WindowY1 = 320;
 800162a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
  pLayerCfg.WindowY0 = 0;
 800162e:	e9cd 240e 	strd	r2, r4, [sp, #56]	@ 0x38
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001632:	e9cd 1a14 	strd	r1, sl, [sp, #80]	@ 0x50
  pLayerCfg.ImageWidth = 240;
 8001636:	e9cd 4216 	strd	r4, r2, [sp, #88]	@ 0x58
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800163a:	a90d      	add	r1, sp, #52	@ 0x34
 800163c:	4622      	mov	r2, r4
 800163e:	4630      	mov	r0, r6
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001640:	e9cd 3b10 	strd	r3, fp, [sp, #64]	@ 0x40
  LcdDrv = &ili9341_drv;
 8001644:	4e29      	ldr	r6, [pc, #164]	@ (80016ec <main+0x378>)
  pLayerCfg.ImageHeight = 320;
 8001646:	9318      	str	r3, [sp, #96]	@ 0x60
  pLayerCfg.WindowX0 = 0;
 8001648:	940d      	str	r4, [sp, #52]	@ 0x34
  pLayerCfg.Backcolor.Blue = 0;
 800164a:	f8ad 4064 	strh.w	r4, [sp, #100]	@ 0x64
  pLayerCfg.Backcolor.Red = 0;
 800164e:	f88d 4066 	strb.w	r4, [sp, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001652:	f004 f806 	bl	8005662 <HAL_LTDC_ConfigLayer>
  LcdDrv = &ili9341_drv;
 8001656:	4b26      	ldr	r3, [pc, #152]	@ (80016f0 <main+0x37c>)
 8001658:	6033      	str	r3, [r6, #0]
  LcdDrv->Init();
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4798      	blx	r3
  LcdDrv->DisplayOff();
 800165e:	6833      	ldr	r3, [r6, #0]
  hdma2d.Instance = DMA2D;
 8001660:	4e24      	ldr	r6, [pc, #144]	@ (80016f4 <main+0x380>)
  LcdDrv->DisplayOff();
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	4798      	blx	r3
  hdma2d.Instance = DMA2D;
 8001666:	4b24      	ldr	r3, [pc, #144]	@ (80016f8 <main+0x384>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001668:	4630      	mov	r0, r6
  hdma2d.Init.Mode = DMA2D_M2M;
 800166a:	e9c6 3400 	strd	r3, r4, [r6]
  hdma2d.Init.OutputOffset = 0;
 800166e:	e9c6 b402 	strd	fp, r4, [r6, #8]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8001672:	e9c6 4b0a 	strd	r4, fp, [r6, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001676:	e9c6 440c 	strd	r4, r4, [r6, #48]	@ 0x30
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800167a:	f003 f841 	bl	8004700 <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800167e:	4629      	mov	r1, r5
 8001680:	4630      	mov	r0, r6
 8001682:	f003 f8f5 	bl	8004870 <HAL_DMA2D_ConfigLayer>
  MX_TouchGFX_Init();
 8001686:	f7fe ffa4 	bl	80005d2 <MX_TouchGFX_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 800168a:	464a      	mov	r2, r9
 800168c:	4621      	mov	r1, r4
 800168e:	a80d      	add	r0, sp, #52	@ 0x34
 8001690:	f012 f877 	bl	8013782 <memset>
  hadc1.Instance = ADC1;
 8001694:	4e19      	ldr	r6, [pc, #100]	@ (80016fc <main+0x388>)
 8001696:	4b1a      	ldr	r3, [pc, #104]	@ (8001700 <main+0x38c>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001698:	f8df b068 	ldr.w	fp, [pc, #104]	@ 8001704 <main+0x390>
  hadc1.Init.ScanConvMode = DISABLE;
 800169c:	6134      	str	r4, [r6, #16]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800169e:	e9c6 3400 	strd	r3, r4, [r6]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016a2:	4630      	mov	r0, r6
 80016a4:	e030      	b.n	8001708 <main+0x394>
 80016a6:	bf00      	nop
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40021000 	.word	0x40021000
 80016b0:	20001724 	.word	0x20001724
 80016b4:	40020800 	.word	0x40020800
 80016b8:	40020c00 	.word	0x40020c00
 80016bc:	40020000 	.word	0x40020000
 80016c0:	40021800 	.word	0x40021800
 80016c4:	200017b8 	.word	0x200017b8
 80016c8:	40023000 	.word	0x40023000
 80016cc:	40005c00 	.word	0x40005c00
 80016d0:	000186a0 	.word	0x000186a0
 80016d4:	20001624 	.word	0x20001624
 80016d8:	40015000 	.word	0x40015000
 80016dc:	200015f0 	.word	0x200015f0
 80016e0:	a0000140 	.word	0xa0000140
 80016e4:	2000167c 	.word	0x2000167c
 80016e8:	40016800 	.word	0x40016800
 80016ec:	20001540 	.word	0x20001540
 80016f0:	20000014 	.word	0x20000014
 80016f4:	20001778 	.word	0x20001778
 80016f8:	4002b000 	.word	0x4002b000
 80016fc:	200015a8 	.word	0x200015a8
 8001700:	40012000 	.word	0x40012000
 8001704:	0f000001 	.word	0x0f000001
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001708:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800170c:	60b3      	str	r3, [r6, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800170e:	7634      	strb	r4, [r6, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001710:	f886 4020 	strb.w	r4, [r6, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001714:	62f4      	str	r4, [r6, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001716:	f8c6 b028 	str.w	fp, [r6, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800171a:	60f4      	str	r4, [r6, #12]
  hadc1.Init.NbrOfConversion = 1;
 800171c:	61f5      	str	r5, [r6, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800171e:	f886 4030 	strb.w	r4, [r6, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001722:	6175      	str	r5, [r6, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001724:	f002 fd74 	bl	8004210 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_13;
 8001728:	220d      	movs	r2, #13
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800172a:	a90d      	add	r1, sp, #52	@ 0x34
 800172c:	4630      	mov	r0, r6
  sConfig.Rank = 1;
 800172e:	e9cd 250d 	strd	r2, r5, [sp, #52]	@ 0x34
  hadc2.Instance = ADC2;
 8001732:	4e26      	ldr	r6, [pc, #152]	@ (80017cc <main+0x458>)
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001734:	940f      	str	r4, [sp, #60]	@ 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001736:	f002 fee5 	bl	8004504 <HAL_ADC_ConfigChannel>
  ADC_ChannelConfTypeDef sConfig = {0};
 800173a:	4621      	mov	r1, r4
 800173c:	464a      	mov	r2, r9
 800173e:	a80d      	add	r0, sp, #52	@ 0x34
 8001740:	f012 f81f 	bl	8013782 <memset>
  hadc2.Instance = ADC2;
 8001744:	4a22      	ldr	r2, [pc, #136]	@ (80017d0 <main+0x45c>)
  hadc2.Init.ScanConvMode = DISABLE;
 8001746:	6134      	str	r4, [r6, #16]
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 8001748:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800174c:	4630      	mov	r0, r6
  hadc2.Init.Resolution = ADC_RESOLUTION_8B;
 800174e:	60b3      	str	r3, [r6, #8]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001750:	e9c6 2400 	strd	r2, r4, [r6]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001754:	e9c6 b40a 	strd	fp, r4, [r6, #40]	@ 0x28
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001758:	7634      	strb	r4, [r6, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800175a:	f886 4020 	strb.w	r4, [r6, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800175e:	60f4      	str	r4, [r6, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001760:	61f5      	str	r5, [r6, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001762:	f886 4030 	strb.w	r4, [r6, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001766:	6175      	str	r5, [r6, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001768:	f002 fd52 	bl	8004210 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800176c:	a90d      	add	r1, sp, #52	@ 0x34
 800176e:	4630      	mov	r0, r6
  sConfig.Rank = 1;
 8001770:	e9cd a50d 	strd	sl, r5, [sp, #52]	@ 0x34
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001774:	940f      	str	r4, [sp, #60]	@ 0x3c
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001776:	f002 fec5 	bl	8004504 <HAL_ADC_ConfigChannel>
  osKernelInitialize();
 800177a:	f005 f949 	bl	8006a10 <osKernelInitialize>
  Queue1Handle = osMessageQueueNew (8, sizeof(uint8_t), &Queue1_attributes);
 800177e:	4a15      	ldr	r2, [pc, #84]	@ (80017d4 <main+0x460>)
 8001780:	4629      	mov	r1, r5
 8001782:	4640      	mov	r0, r8
 8001784:	f005 fa6b 	bl	8006c5e <osMessageQueueNew>
 8001788:	4b13      	ldr	r3, [pc, #76]	@ (80017d8 <main+0x464>)
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint32_t), &myQueue01_attributes);
 800178a:	4a14      	ldr	r2, [pc, #80]	@ (80017dc <main+0x468>)
  Queue1Handle = osMessageQueueNew (8, sizeof(uint8_t), &Queue1_attributes);
 800178c:	6018      	str	r0, [r3, #0]
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint32_t), &myQueue01_attributes);
 800178e:	4639      	mov	r1, r7
 8001790:	4648      	mov	r0, r9
 8001792:	f005 fa64 	bl	8006c5e <osMessageQueueNew>
 8001796:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <main+0x46c>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001798:	4a12      	ldr	r2, [pc, #72]	@ (80017e4 <main+0x470>)
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint32_t), &myQueue01_attributes);
 800179a:	6018      	str	r0, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800179c:	4621      	mov	r1, r4
 800179e:	4812      	ldr	r0, [pc, #72]	@ (80017e8 <main+0x474>)
 80017a0:	f005 f962 	bl	8006a68 <osThreadNew>
 80017a4:	4b11      	ldr	r3, [pc, #68]	@ (80017ec <main+0x478>)
  polling_taskHandle = osThreadNew(StartHardwarePollingTask, NULL, &polling_task_attributes);
 80017a6:	4a12      	ldr	r2, [pc, #72]	@ (80017f0 <main+0x47c>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80017a8:	6018      	str	r0, [r3, #0]
  polling_taskHandle = osThreadNew(StartHardwarePollingTask, NULL, &polling_task_attributes);
 80017aa:	4621      	mov	r1, r4
 80017ac:	4811      	ldr	r0, [pc, #68]	@ (80017f4 <main+0x480>)
 80017ae:	f005 f95b 	bl	8006a68 <osThreadNew>
 80017b2:	4b11      	ldr	r3, [pc, #68]	@ (80017f8 <main+0x484>)
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 80017b4:	4a11      	ldr	r2, [pc, #68]	@ (80017fc <main+0x488>)
  polling_taskHandle = osThreadNew(StartHardwarePollingTask, NULL, &polling_task_attributes);
 80017b6:	6018      	str	r0, [r3, #0]
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 80017b8:	4621      	mov	r1, r4
 80017ba:	4811      	ldr	r0, [pc, #68]	@ (8001800 <main+0x48c>)
 80017bc:	f005 f954 	bl	8006a68 <osThreadNew>
 80017c0:	4b10      	ldr	r3, [pc, #64]	@ (8001804 <main+0x490>)
 80017c2:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80017c4:	f005 f936 	bl	8006a34 <osKernelStart>
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <main+0x454>
 80017ca:	bf00      	nop
 80017cc:	20001560 	.word	0x20001560
 80017d0:	40012100 	.word	0x40012100
 80017d4:	08014a64 	.word	0x08014a64
 80017d8:	20001548 	.word	0x20001548
 80017dc:	08014a4c 	.word	0x08014a4c
 80017e0:	20001544 	.word	0x20001544
 80017e4:	08014ac4 	.word	0x08014ac4
 80017e8:	08001281 	.word	0x08001281
 80017ec:	20001554 	.word	0x20001554
 80017f0:	08014a7c 	.word	0x08014a7c
 80017f4:	0800128d 	.word	0x0800128d
 80017f8:	2000154c 	.word	0x2000154c
 80017fc:	08014aa0 	.word	0x08014aa0
 8001800:	080005d7 	.word	0x080005d7
 8001804:	20001550 	.word	0x20001550

08001808 <IOE_Init>:
void IOE_Init(void)
 8001808:	4770      	bx	lr

0800180a <IOE_ITConfig>:
void IOE_ITConfig(void)
 800180a:	4770      	bx	lr

0800180c <IOE_Write>:
{
 800180c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  status = HAL_I2C_Mem_Write(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2c3Timeout);
 800180e:	4b09      	ldr	r3, [pc, #36]	@ (8001834 <IOE_Write+0x28>)
 8001810:	f88d 2017 	strb.w	r2, [sp, #23]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	9302      	str	r3, [sp, #8]
 8001818:	f10d 0217 	add.w	r2, sp, #23
 800181c:	2301      	movs	r3, #1
 800181e:	9200      	str	r2, [sp, #0]
 8001820:	9301      	str	r3, [sp, #4]
 8001822:	460a      	mov	r2, r1
 8001824:	4601      	mov	r1, r0
 8001826:	4804      	ldr	r0, [pc, #16]	@ (8001838 <IOE_Write+0x2c>)
 8001828:	f003 fbf4 	bl	8005014 <HAL_I2C_Mem_Write>
}
 800182c:	b007      	add	sp, #28
 800182e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001832:	bf00      	nop
 8001834:	20000010 	.word	0x20000010
 8001838:	20001724 	.word	0x20001724

0800183c <IOE_Read>:
{
 800183c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t value = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2c3Timeout);
 8001844:	4b08      	ldr	r3, [pc, #32]	@ (8001868 <IOE_Read+0x2c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	9302      	str	r3, [sp, #8]
{
 800184a:	460a      	mov	r2, r1
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2c3Timeout);
 800184c:	2301      	movs	r3, #1
 800184e:	f10d 0117 	add.w	r1, sp, #23
 8001852:	9100      	str	r1, [sp, #0]
 8001854:	9301      	str	r3, [sp, #4]
 8001856:	4601      	mov	r1, r0
 8001858:	4804      	ldr	r0, [pc, #16]	@ (800186c <IOE_Read+0x30>)
 800185a:	f003 fc6b 	bl	8005134 <HAL_I2C_Mem_Read>
}
 800185e:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001862:	b007      	add	sp, #28
 8001864:	f85d fb04 	ldr.w	pc, [sp], #4
 8001868:	20000010 	.word	0x20000010
 800186c:	20001724 	.word	0x20001724

08001870 <IOE_ReadMultiple>:
{
 8001870:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(&hi2c3, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2c3Timeout);
 8001872:	4c08      	ldr	r4, [pc, #32]	@ (8001894 <IOE_ReadMultiple+0x24>)
 8001874:	6824      	ldr	r4, [r4, #0]
 8001876:	9200      	str	r2, [sp, #0]
 8001878:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800187c:	460a      	mov	r2, r1
 800187e:	2301      	movs	r3, #1
 8001880:	4601      	mov	r1, r0
 8001882:	4805      	ldr	r0, [pc, #20]	@ (8001898 <IOE_ReadMultiple+0x28>)
 8001884:	f003 fc56 	bl	8005134 <HAL_I2C_Mem_Read>
}
 8001888:	3800      	subs	r0, #0
 800188a:	bf18      	it	ne
 800188c:	2001      	movne	r0, #1
 800188e:	b004      	add	sp, #16
 8001890:	bd10      	pop	{r4, pc}
 8001892:	bf00      	nop
 8001894:	20000010 	.word	0x20000010
 8001898:	20001724 	.word	0x20001724

0800189c <IOE_Delay>:
void IOE_Delay(uint32_t Delay)
 800189c:	f002 bca4 	b.w	80041e8 <HAL_Delay>

080018a0 <LCD_IO_Init>:
{
 80018a0:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80018a2:	4c06      	ldr	r4, [pc, #24]	@ (80018bc <LCD_IO_Init+0x1c>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	4620      	mov	r0, r4
 80018a8:	2104      	movs	r1, #4
 80018aa:	f003 f90f 	bl	8004acc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80018ae:	4620      	mov	r0, r4
 80018b0:	2201      	movs	r2, #1
}
 80018b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80018b6:	2104      	movs	r1, #4
 80018b8:	f003 b908 	b.w	8004acc <HAL_GPIO_WritePin>
 80018bc:	40020800 	.word	0x40020800

080018c0 <LCD_IO_WriteData>:
{
 80018c0:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80018c2:	4d0b      	ldr	r5, [pc, #44]	@ (80018f0 <LCD_IO_WriteData+0x30>)
{
 80018c4:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80018c6:	2201      	movs	r2, #1
 80018c8:	480a      	ldr	r0, [pc, #40]	@ (80018f4 <LCD_IO_WriteData+0x34>)
 80018ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018ce:	f003 f8fd 	bl	8004acc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80018d2:	2200      	movs	r2, #0
 80018d4:	2104      	movs	r1, #4
 80018d6:	4628      	mov	r0, r5
 80018d8:	f003 f8f8 	bl	8004acc <HAL_GPIO_WritePin>
  SPI5_Write(RegValue);
 80018dc:	4620      	mov	r0, r4
 80018de:	f7ff fcbd 	bl	800125c <SPI5_Write>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80018e2:	4628      	mov	r0, r5
 80018e4:	2201      	movs	r2, #1
}
 80018e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80018ea:	2104      	movs	r1, #4
 80018ec:	f003 b8ee 	b.w	8004acc <HAL_GPIO_WritePin>
 80018f0:	40020800 	.word	0x40020800
 80018f4:	40020c00 	.word	0x40020c00

080018f8 <LCD_IO_WriteReg>:
{
 80018f8:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80018fa:	4d0b      	ldr	r5, [pc, #44]	@ (8001928 <LCD_IO_WriteReg+0x30>)
{
 80018fc:	4604      	mov	r4, r0
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80018fe:	2200      	movs	r2, #0
 8001900:	480a      	ldr	r0, [pc, #40]	@ (800192c <LCD_IO_WriteReg+0x34>)
 8001902:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001906:	f003 f8e1 	bl	8004acc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800190a:	2200      	movs	r2, #0
 800190c:	2104      	movs	r1, #4
 800190e:	4628      	mov	r0, r5
 8001910:	f003 f8dc 	bl	8004acc <HAL_GPIO_WritePin>
  SPI5_Write(Reg);
 8001914:	4620      	mov	r0, r4
 8001916:	f7ff fca1 	bl	800125c <SPI5_Write>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800191a:	4628      	mov	r0, r5
 800191c:	2201      	movs	r2, #1
}
 800191e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001922:	2104      	movs	r1, #4
 8001924:	f003 b8d2 	b.w	8004acc <HAL_GPIO_WritePin>
 8001928:	40020800 	.word	0x40020800
 800192c:	40020c00 	.word	0x40020c00

08001930 <LCD_IO_ReadData>:
{
 8001930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001932:	4e14      	ldr	r6, [pc, #80]	@ (8001984 <LCD_IO_ReadData+0x54>)
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001934:	4f14      	ldr	r7, [pc, #80]	@ (8001988 <LCD_IO_ReadData+0x58>)
{
 8001936:	4605      	mov	r5, r0
 8001938:	460c      	mov	r4, r1
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800193a:	4630      	mov	r0, r6
 800193c:	2200      	movs	r2, #0
 800193e:	2104      	movs	r1, #4
 8001940:	f003 f8c4 	bl	8004acc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001944:	2200      	movs	r2, #0
 8001946:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800194a:	4638      	mov	r0, r7
 800194c:	f003 f8be 	bl	8004acc <HAL_GPIO_WritePin>
  SPI5_Write(RegValue);
 8001950:	4628      	mov	r0, r5
 8001952:	f7ff fc83 	bl	800125c <SPI5_Write>
  status = HAL_SPI_Receive(&hspi5, (uint8_t*) &readvalue, ReadSize, Spi5Timeout);
 8001956:	4b0d      	ldr	r3, [pc, #52]	@ (800198c <LCD_IO_ReadData+0x5c>)
 8001958:	480d      	ldr	r0, [pc, #52]	@ (8001990 <LCD_IO_ReadData+0x60>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4622      	mov	r2, r4
 800195e:	a901      	add	r1, sp, #4
 8001960:	f004 fd99 	bl	8006496 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001964:	4638      	mov	r0, r7
 8001966:	2201      	movs	r2, #1
 8001968:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  return readvalue;
 800196c:	9c01      	ldr	r4, [sp, #4]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800196e:	f003 f8ad 	bl	8004acc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001972:	4630      	mov	r0, r6
 8001974:	2201      	movs	r2, #1
 8001976:	2104      	movs	r1, #4
 8001978:	f003 f8a8 	bl	8004acc <HAL_GPIO_WritePin>
}
 800197c:	4620      	mov	r0, r4
 800197e:	b003      	add	sp, #12
 8001980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001982:	bf00      	nop
 8001984:	40020800 	.word	0x40020800
 8001988:	40020c00 	.word	0x40020c00
 800198c:	2000000c 	.word	0x2000000c
 8001990:	20001624 	.word	0x20001624

08001994 <LCD_Delay>:
  HAL_Delay(Delay);
 8001994:	f002 bc28 	b.w	80041e8 <HAL_Delay>

08001998 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001998:	6802      	ldr	r2, [r0, #0]
 800199a:	4b03      	ldr	r3, [pc, #12]	@ (80019a8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800199c:	429a      	cmp	r2, r3
 800199e:	d101      	bne.n	80019a4 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80019a0:	f002 bc10 	b.w	80041c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40001000 	.word	0x40001000

080019ac <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80019ac:	4770      	bx	lr
	...

080019b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b2:	4b0e      	ldr	r3, [pc, #56]	@ (80019ec <HAL_MspInit+0x3c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	9200      	str	r2, [sp, #0]
 80019b8:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80019ba:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 80019be:	6459      	str	r1, [r3, #68]	@ 0x44
 80019c0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80019c2:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 80019c6:	9100      	str	r1, [sp, #0]
 80019c8:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ca:	9201      	str	r2, [sp, #4]
 80019cc:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80019ce:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80019d2:	6419      	str	r1, [r3, #64]	@ 0x40
 80019d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019de:	210f      	movs	r1, #15
 80019e0:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e4:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019e6:	f002 be3b 	b.w	8004660 <HAL_NVIC_SetPriority>
 80019ea:	bf00      	nop
 80019ec:	40023800 	.word	0x40023800

080019f0 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80019f0:	6802      	ldr	r2, [r0, #0]
 80019f2:	4b09      	ldr	r3, [pc, #36]	@ (8001a18 <HAL_CRC_MspInit+0x28>)
 80019f4:	429a      	cmp	r2, r3
{
 80019f6:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 80019f8:	d10b      	bne.n	8001a12 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	9301      	str	r3, [sp, #4]
 80019fe:	4b07      	ldr	r3, [pc, #28]	@ (8001a1c <HAL_CRC_MspInit+0x2c>)
 8001a00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a02:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001a06:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a0e:	9301      	str	r3, [sp, #4]
 8001a10:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001a12:	b002      	add	sp, #8
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40023000 	.word	0x40023000
 8001a1c:	40023800 	.word	0x40023800

08001a20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a20:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a22:	2214      	movs	r2, #20
{
 8001a24:	b08a      	sub	sp, #40	@ 0x28
 8001a26:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	2100      	movs	r1, #0
 8001a2a:	eb0d 0002 	add.w	r0, sp, r2
 8001a2e:	f011 fea8 	bl	8013782 <memset>
  if(hadc->Instance==ADC1)
 8001a32:	6823      	ldr	r3, [r4, #0]
 8001a34:	4a21      	ldr	r2, [pc, #132]	@ (8001abc <HAL_ADC_MspInit+0x9c>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d11f      	bne.n	8001a7a <HAL_ADC_MspInit+0x5a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a3a:	4b21      	ldr	r3, [pc, #132]	@ (8001ac0 <HAL_ADC_MspInit+0xa0>)
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a3c:	4821      	ldr	r0, [pc, #132]	@ (8001ac4 <HAL_ADC_MspInit+0xa4>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a3e:	2100      	movs	r1, #0
 8001a40:	9101      	str	r1, [sp, #4]
 8001a42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001a44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a48:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a4a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001a4c:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8001a50:	9201      	str	r2, [sp, #4]
 8001a52:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a54:	9102      	str	r1, [sp, #8]
 8001a56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a58:	f042 0204 	orr.w	r2, r2, #4
 8001a5c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a66:	2108      	movs	r1, #8
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a68:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e9cd 1305 	strd	r1, r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a70:	a905      	add	r1, sp, #20
    PA5     ------> ADC2_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a72:	f002 ff41 	bl	80048f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001a76:	b00a      	add	sp, #40	@ 0x28
 8001a78:	bd10      	pop	{r4, pc}
  else if(hadc->Instance==ADC2)
 8001a7a:	4a13      	ldr	r2, [pc, #76]	@ (8001ac8 <HAL_ADC_MspInit+0xa8>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d1fa      	bne.n	8001a76 <HAL_ADC_MspInit+0x56>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001a80:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac0 <HAL_ADC_MspInit+0xa0>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a82:	4812      	ldr	r0, [pc, #72]	@ (8001acc <HAL_ADC_MspInit+0xac>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001a84:	2100      	movs	r1, #0
 8001a86:	9103      	str	r1, [sp, #12]
 8001a88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001a8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a8e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001a92:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8001a96:	9203      	str	r2, [sp, #12]
 8001a98:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9a:	9104      	str	r1, [sp, #16]
 8001a9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a9e:	f042 0201 	orr.w	r2, r2, #1
 8001aa2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	9304      	str	r3, [sp, #16]
 8001aac:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aae:	2220      	movs	r2, #32
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e9cd 2305 	strd	r2, r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab6:	a905      	add	r1, sp, #20
 8001ab8:	e7db      	b.n	8001a72 <HAL_ADC_MspInit+0x52>
 8001aba:	bf00      	nop
 8001abc:	40012000 	.word	0x40012000
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40020800 	.word	0x40020800
 8001ac8:	40012100 	.word	0x40012100
 8001acc:	40020000 	.word	0x40020000

08001ad0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001ad0:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8001ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b10 <HAL_DMA2D_MspInit+0x40>)
 8001ad4:	6802      	ldr	r2, [r0, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d116      	bne.n	8001b08 <HAL_DMA2D_MspInit+0x38>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001ada:	2200      	movs	r2, #0
 8001adc:	f5a3 43f0 	sub.w	r3, r3, #30720	@ 0x7800
 8001ae0:	9201      	str	r2, [sp, #4]
 8001ae2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ae4:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8001ae8:	6319      	str	r1, [r3, #48]	@ 0x30
 8001aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001af0:	9301      	str	r3, [sp, #4]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001af2:	2105      	movs	r1, #5
 8001af4:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001af6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001af8:	f002 fdb2 	bl	8004660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001afc:	205a      	movs	r0, #90	@ 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001afe:	b003      	add	sp, #12
 8001b00:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001b04:	f002 bdde 	b.w	80046c4 <HAL_NVIC_EnableIRQ>
}
 8001b08:	b003      	add	sp, #12
 8001b0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b0e:	bf00      	nop
 8001b10:	4002b000 	.word	0x4002b000

08001b14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b18:	4604      	mov	r4, r0
 8001b1a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	2214      	movs	r2, #20
 8001b1e:	2100      	movs	r1, #0
 8001b20:	a803      	add	r0, sp, #12
 8001b22:	f011 fe2e 	bl	8013782 <memset>
  if(hi2c->Instance==I2C3)
 8001b26:	6822      	ldr	r2, [r4, #0]
 8001b28:	4b24      	ldr	r3, [pc, #144]	@ (8001bbc <HAL_I2C_MspInit+0xa8>)
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d143      	bne.n	8001bb6 <HAL_I2C_MspInit+0xa2>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b2e:	4c24      	ldr	r4, [pc, #144]	@ (8001bc0 <HAL_I2C_MspInit+0xac>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b30:	4824      	ldr	r0, [pc, #144]	@ (8001bc4 <HAL_I2C_MspInit+0xb0>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b32:	2500      	movs	r5, #0
 8001b34:	9500      	str	r5, [sp, #0]
 8001b36:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001b38:	f043 0304 	orr.w	r3, r3, #4
 8001b3c:	6323      	str	r3, [r4, #48]	@ 0x30
 8001b3e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b48:	9501      	str	r5, [sp, #4]
 8001b4a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	6323      	str	r3, [r4, #48]	@ 0x30
 8001b52:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	9301      	str	r3, [sp, #4]
 8001b5a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b5c:	f04f 0912 	mov.w	r9, #18
 8001b60:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b64:	f04f 0801 	mov.w	r8, #1
 8001b68:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b6a:	2604      	movs	r6, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b6c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b6e:	e9cd 3903 	strd	r3, r9, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b72:	e9cd 8705 	strd	r8, r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b76:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b78:	f002 febe 	bl	80048f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b80:	4811      	ldr	r0, [pc, #68]	@ (8001bc8 <HAL_I2C_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b82:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b84:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b86:	e9cd 3903 	strd	r3, r9, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8a:	e9cd 8705 	strd	r8, r7, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8e:	f002 feb3 	bl	80048f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001b92:	9502      	str	r5, [sp, #8]
 8001b94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001b96:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b9a:	6423      	str	r3, [r4, #64]	@ 0x40
 8001b9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001b9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001ba2:	9302      	str	r3, [sp, #8]
 8001ba4:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */
  /* Force the I2C Peripheral Clock Reset */  
    __HAL_RCC_I2C3_FORCE_RESET();
 8001ba6:	6a23      	ldr	r3, [r4, #32]
 8001ba8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001bac:	6223      	str	r3, [r4, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    __HAL_RCC_I2C3_RELEASE_RESET(); 
 8001bae:	6a23      	ldr	r3, [r4, #32]
 8001bb0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001bb4:	6223      	str	r3, [r4, #32]
  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001bb6:	b009      	add	sp, #36	@ 0x24
 8001bb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001bbc:	40005c00 	.word	0x40005c00
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40020800 	.word	0x40020800
 8001bc8:	40020000 	.word	0x40020000

08001bcc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bce:	b099      	sub	sp, #100	@ 0x64
 8001bd0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd2:	2214      	movs	r2, #20
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	a807      	add	r0, sp, #28
 8001bd8:	f011 fdd3 	bl	8013782 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bdc:	2230      	movs	r2, #48	@ 0x30
 8001bde:	eb0d 0002 	add.w	r0, sp, r2
 8001be2:	2100      	movs	r1, #0
 8001be4:	f011 fdcd 	bl	8013782 <memset>
  if(hltdc->Instance==LTDC)
 8001be8:	6822      	ldr	r2, [r4, #0]
 8001bea:	4b5e      	ldr	r3, [pc, #376]	@ (8001d64 <HAL_LTDC_MspInit+0x198>)
 8001bec:	429a      	cmp	r2, r3
 8001bee:	f040 80b7 	bne.w	8001d60 <HAL_LTDC_MspInit+0x194>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001bf2:	2308      	movs	r3, #8
 8001bf4:	930c      	str	r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001bf6:	23c0      	movs	r3, #192	@ 0xc0
 8001bf8:	9310      	str	r3, [sp, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	9312      	str	r3, [sp, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bfe:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001c00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c04:	9315      	str	r3, [sp, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c06:	f004 f81b 	bl	8005c40 <HAL_RCCEx_PeriphCLKConfig>
 8001c0a:	b108      	cbz	r0, 8001c10 <HAL_LTDC_MspInit+0x44>
    {
      Error_Handler();
 8001c0c:	f7ff fece 	bl	80019ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001c10:	4b55      	ldr	r3, [pc, #340]	@ (8001d68 <HAL_LTDC_MspInit+0x19c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c12:	4856      	ldr	r0, [pc, #344]	@ (8001d6c <HAL_LTDC_MspInit+0x1a0>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001c14:	2400      	movs	r4, #0
 8001c16:	9400      	str	r4, [sp, #0]
 8001c18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c1a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001c1e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001c20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c22:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 8001c26:	9200      	str	r2, [sp, #0]
 8001c28:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c2a:	9401      	str	r4, [sp, #4]
 8001c2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c2e:	f042 0220 	orr.w	r2, r2, #32
 8001c32:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c36:	f002 0220 	and.w	r2, r2, #32
 8001c3a:	9201      	str	r2, [sp, #4]
 8001c3c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3e:	9402      	str	r4, [sp, #8]
 8001c40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c42:	f042 0201 	orr.w	r2, r2, #1
 8001c46:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c4a:	f002 0201 	and.w	r2, r2, #1
 8001c4e:	9202      	str	r2, [sp, #8]
 8001c50:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c52:	9403      	str	r4, [sp, #12]
 8001c54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c56:	f042 0202 	orr.w	r2, r2, #2
 8001c5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c5e:	f002 0202 	and.w	r2, r2, #2
 8001c62:	9203      	str	r2, [sp, #12]
 8001c64:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c66:	9404      	str	r4, [sp, #16]
 8001c68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c6e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c72:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001c76:	9204      	str	r2, [sp, #16]
 8001c78:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c7a:	9405      	str	r4, [sp, #20]
 8001c7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c7e:	f042 0204 	orr.w	r2, r2, #4
 8001c82:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c86:	f002 0204 	and.w	r2, r2, #4
 8001c8a:	9205      	str	r2, [sp, #20]
 8001c8c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c8e:	9406      	str	r4, [sp, #24]
 8001c90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c92:	f042 0208 	orr.w	r2, r2, #8
 8001c96:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca0:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ca2:	260e      	movs	r6, #14
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ca4:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ca6:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cac:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cb2:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cb6:	f002 fe1f 	bl	80048f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 8001cba:	f641 0358 	movw	r3, #6232	@ 0x1858
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbe:	482c      	ldr	r0, [pc, #176]	@ (8001d70 <HAL_LTDC_MspInit+0x1a4>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cc0:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc2:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	e9cd 3507 	strd	r3, r5, [sp, #28]

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001cc8:	2709      	movs	r7, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cca:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cce:	f002 fe13 	bl	80048f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cd2:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd4:	4827      	ldr	r0, [pc, #156]	@ (8001d74 <HAL_LTDC_MspInit+0x1a8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001cd6:	970b      	str	r7, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd8:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cda:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cde:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce2:	f002 fe09 	bl	80048f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8001ce6:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cea:	4822      	ldr	r0, [pc, #136]	@ (8001d74 <HAL_LTDC_MspInit+0x1a8>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cec:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cee:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf0:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cf4:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf8:	f002 fdfe 	bl	80048f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8001cfc:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d00:	481d      	ldr	r0, [pc, #116]	@ (8001d78 <HAL_LTDC_MspInit+0x1ac>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d02:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d04:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d06:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d0a:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d0e:	f002 fdf3 	bl	80048f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d12:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d14:	4819      	ldr	r0, [pc, #100]	@ (8001d7c <HAL_LTDC_MspInit+0x1b0>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d16:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d18:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d1e:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d22:	f002 fde9 	bl	80048f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d26:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d28:	4815      	ldr	r0, [pc, #84]	@ (8001d80 <HAL_LTDC_MspInit+0x1b4>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d2a:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d2c:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d32:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d36:	f002 fddf 	bl	80048f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001d3a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d3e:	480e      	ldr	r0, [pc, #56]	@ (8001d78 <HAL_LTDC_MspInit+0x1ac>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001d40:	970b      	str	r7, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d42:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d48:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d4c:	f002 fdd4 	bl	80048f8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001d50:	2058      	movs	r0, #88	@ 0x58
 8001d52:	4622      	mov	r2, r4
 8001d54:	2105      	movs	r1, #5
 8001d56:	f002 fc83 	bl	8004660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001d5a:	2058      	movs	r0, #88	@ 0x58
 8001d5c:	f002 fcb2 	bl	80046c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001d60:	b019      	add	sp, #100	@ 0x64
 8001d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d64:	40016800 	.word	0x40016800
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40021400 	.word	0x40021400
 8001d70:	40020000 	.word	0x40020000
 8001d74:	40020400 	.word	0x40020400
 8001d78:	40021800 	.word	0x40021800
 8001d7c:	40020800 	.word	0x40020800
 8001d80:	40020c00 	.word	0x40020c00

08001d84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d84:	b510      	push	{r4, lr}
 8001d86:	4604      	mov	r4, r0
 8001d88:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8a:	2214      	movs	r2, #20
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	a803      	add	r0, sp, #12
 8001d90:	f011 fcf7 	bl	8013782 <memset>
  if(hspi->Instance==SPI5)
 8001d94:	6822      	ldr	r2, [r4, #0]
 8001d96:	4b14      	ldr	r3, [pc, #80]	@ (8001de8 <HAL_SPI_MspInit+0x64>)
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d123      	bne.n	8001de4 <HAL_SPI_MspInit+0x60>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001d9c:	f503 4368 	add.w	r3, r3, #59392	@ 0xe800
 8001da0:	2100      	movs	r1, #0
 8001da2:	9101      	str	r1, [sp, #4]
 8001da4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001da6:	4811      	ldr	r0, [pc, #68]	@ (8001dec <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001da8:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001dac:	645a      	str	r2, [r3, #68]	@ 0x44
 8001dae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001db0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001db4:	9201      	str	r2, [sp, #4]
 8001db6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001db8:	9102      	str	r1, [sp, #8]
 8001dba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001dbc:	f042 0220 	orr.w	r2, r2, #32
 8001dc0:	631a      	str	r2, [r3, #48]	@ 0x30
 8001dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc4:	f003 0320 	and.w	r3, r3, #32
 8001dc8:	9302      	str	r3, [sp, #8]
 8001dca:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dcc:	f44f 7260 	mov.w	r2, #896	@ 0x380
 8001dd0:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001dd2:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001dd8:	2305      	movs	r3, #5
 8001dda:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dde:	a903      	add	r1, sp, #12
 8001de0:	f002 fd8a 	bl	80048f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001de4:	b008      	add	sp, #32
 8001de6:	bd10      	pop	{r4, pc}
 8001de8:	40015000 	.word	0x40015000
 8001dec:	40021400 	.word	0x40021400

08001df0 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001df4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001df6:	2300      	movs	r3, #0
 8001df8:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 8001dfa:	4b2b      	ldr	r3, [pc, #172]	@ (8001ea8 <HAL_SDRAM_MspInit+0xb8>)
 8001dfc:	681c      	ldr	r4, [r3, #0]
 8001dfe:	2c00      	cmp	r4, #0
 8001e00:	d14f      	bne.n	8001ea2 <HAL_SDRAM_MspInit+0xb2>
  FMC_Initialized = 1;
 8001e02:	f04f 0801 	mov.w	r8, #1
 8001e06:	f8c3 8000 	str.w	r8, [r3]
  __HAL_RCC_FMC_CLK_ENABLE();
 8001e0a:	4b28      	ldr	r3, [pc, #160]	@ (8001eac <HAL_SDRAM_MspInit+0xbc>)
 8001e0c:	9400      	str	r4, [sp, #0]
 8001e0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e10:	4827      	ldr	r0, [pc, #156]	@ (8001eb0 <HAL_SDRAM_MspInit+0xc0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001e12:	ea42 0208 	orr.w	r2, r2, r8
 8001e16:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e1a:	ea03 0308 	and.w	r3, r3, r8
 8001e1e:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e20:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e22:	2603      	movs	r6, #3
 8001e24:	250c      	movs	r5, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8001e26:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e28:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001e2e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e32:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e36:	f002 fd5f 	bl	80048f8 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e3a:	481e      	ldr	r0, [pc, #120]	@ (8001eb4 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e3c:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e3e:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e40:	e9cd 8701 	strd	r8, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e44:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e48:	f002 fd56 	bl	80048f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001e4c:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e50:	4819      	ldr	r0, [pc, #100]	@ (8001eb8 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e52:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e54:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e56:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5a:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e5e:	f002 fd4b 	bl	80048f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001e62:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e66:	4815      	ldr	r0, [pc, #84]	@ (8001ebc <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e68:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e6a:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e70:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e74:	f002 fd40 	bl	80048f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001e78:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e7c:	4810      	ldr	r0, [pc, #64]	@ (8001ec0 <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e7e:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e80:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e82:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e86:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e8a:	f002 fd35 	bl	80048f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001e8e:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e90:	480c      	ldr	r0, [pc, #48]	@ (8001ec4 <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e92:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e94:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e96:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9a:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9e:	f002 fd2b 	bl	80048f8 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001ea2:	b006      	add	sp, #24
 8001ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ea8:	200017c0 	.word	0x200017c0
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40021400 	.word	0x40021400
 8001eb4:	40020800 	.word	0x40020800
 8001eb8:	40021800 	.word	0x40021800
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40020c00 	.word	0x40020c00
 8001ec4:	40020400 	.word	0x40020400

08001ec8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec8:	b530      	push	{r4, r5, lr}
 8001eca:	4601      	mov	r1, r0
 8001ecc:	b089      	sub	sp, #36	@ 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2036      	movs	r0, #54	@ 0x36
 8001ed2:	f002 fbc5 	bl	8004660 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ed6:	2036      	movs	r0, #54	@ 0x36
 8001ed8:	f002 fbf4 	bl	80046c4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001edc:	2500      	movs	r5, #0
 8001ede:	4b15      	ldr	r3, [pc, #84]	@ (8001f34 <HAL_InitTick+0x6c>)
 8001ee0:	9502      	str	r5, [sp, #8]
 8001ee2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001ee4:	4c14      	ldr	r4, [pc, #80]	@ (8001f38 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001ee6:	f042 0210 	orr.w	r2, r2, #16
 8001eea:	641a      	str	r2, [r3, #64]	@ 0x40
 8001eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eee:	f003 0310 	and.w	r3, r3, #16
 8001ef2:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ef4:	a901      	add	r1, sp, #4
 8001ef6:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001ef8:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001efa:	f003 fe83 	bl	8005c04 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001efe:	f003 fe71 	bl	8005be4 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8001f02:	4b0e      	ldr	r3, [pc, #56]	@ (8001f3c <HAL_InitTick+0x74>)
 8001f04:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001f06:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001f0a:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001f0c:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f40 <HAL_InitTick+0x78>)
 8001f10:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f14:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 8001f16:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001f18:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001f1a:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f1c:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001f1e:	f004 fc9f 	bl	8006860 <HAL_TIM_Base_Init>
 8001f22:	b920      	cbnz	r0, 8001f2e <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001f24:	4620      	mov	r0, r4
 8001f26:	f004 fb55 	bl	80065d4 <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001f2a:	b009      	add	sp, #36	@ 0x24
 8001f2c:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8001f2e:	2001      	movs	r0, #1
 8001f30:	e7fb      	b.n	8001f2a <HAL_InitTick+0x62>
 8001f32:	bf00      	nop
 8001f34:	40023800 	.word	0x40023800
 8001f38:	200017c4 	.word	0x200017c4
 8001f3c:	40001000 	.word	0x40001000
 8001f40:	000f4240 	.word	0x000f4240

08001f44 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f44:	4770      	bx	lr

08001f46 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f46:	e7fe      	b.n	8001f46 <HardFault_Handler>

08001f48 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f48:	e7fe      	b.n	8001f48 <MemManage_Handler>

08001f4a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f4a:	e7fe      	b.n	8001f4a <BusFault_Handler>

08001f4c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f4c:	e7fe      	b.n	8001f4c <UsageFault_Handler>

08001f4e <DebugMon_Handler>:
}

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001f4e:	4770      	bx	lr

08001f50 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f50:	4801      	ldr	r0, [pc, #4]	@ (8001f58 <TIM6_DAC_IRQHandler+0x8>)
 8001f52:	f004 bb7d 	b.w	8006650 <HAL_TIM_IRQHandler>
 8001f56:	bf00      	nop
 8001f58:	200017c4 	.word	0x200017c4

08001f5c <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001f5c:	4801      	ldr	r0, [pc, #4]	@ (8001f64 <LTDC_IRQHandler+0x8>)
 8001f5e:	f003 bb23 	b.w	80055a8 <HAL_LTDC_IRQHandler>
 8001f62:	bf00      	nop
 8001f64:	2000167c 	.word	0x2000167c

08001f68 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001f68:	4801      	ldr	r0, [pc, #4]	@ (8001f70 <DMA2D_IRQHandler+0x8>)
 8001f6a:	f002 bbf7 	b.w	800475c <HAL_DMA2D_IRQHandler>
 8001f6e:	bf00      	nop
 8001f70:	20001778 	.word	0x20001778

08001f74 <EXTI0_IRQHandler>:
  /* USER CODE END DMA2D_IRQn 1 */
}

/* USER CODE BEGIN 1 */
void EXTI0_IRQHandler(void)
{
 8001f74:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	uint32_t count = osMessageQueueGetCount(Queue1Handle);
 8001f76:	4c0b      	ldr	r4, [pc, #44]	@ (8001fa4 <EXTI0_IRQHandler+0x30>)
 8001f78:	6820      	ldr	r0, [r4, #0]
 8001f7a:	f004 ff0c 	bl	8006d96 <osMessageQueueGetCount>
	if (count < 2)
 8001f7e:	2801      	cmp	r0, #1
 8001f80:	d809      	bhi.n	8001f96 <EXTI0_IRQHandler+0x22>
	{
		uint8_t x = 'A';
 8001f82:	2341      	movs	r3, #65	@ 0x41
 8001f84:	f88d 3007 	strb.w	r3, [sp, #7]
		osMessageQueuePut(Queue1Handle, &x, 0, 200);
 8001f88:	6820      	ldr	r0, [r4, #0]
 8001f8a:	23c8      	movs	r3, #200	@ 0xc8
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f10d 0107 	add.w	r1, sp, #7
 8001f92:	f004 fe9f 	bl	8006cd4 <osMessageQueuePut>
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001f96:	2001      	movs	r0, #1
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  /* USER CODE END EXTI0_IRQn 1 */
}
 8001f98:	b002      	add	sp, #8
 8001f9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001f9e:	f002 bda5 	b.w	8004aec <HAL_GPIO_EXTI_IRQHandler>
 8001fa2:	bf00      	nop
 8001fa4:	20001548 	.word	0x20001548

08001fa8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001fa8:	2001      	movs	r0, #1
 8001faa:	4770      	bx	lr

08001fac <_kill>:

int _kill(int pid, int sig)
{
 8001fac:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001fae:	f011 fc8b 	bl	80138c8 <__errno>
 8001fb2:	2316      	movs	r3, #22
 8001fb4:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8001fba:	bd08      	pop	{r3, pc}

08001fbc <_exit>:

void _exit (int status)
{
 8001fbc:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001fbe:	f011 fc83 	bl	80138c8 <__errno>
 8001fc2:	2316      	movs	r3, #22
 8001fc4:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001fc6:	e7fe      	b.n	8001fc6 <_exit+0xa>

08001fc8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fc8:	b570      	push	{r4, r5, r6, lr}
 8001fca:	460d      	mov	r5, r1
 8001fcc:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fce:	460e      	mov	r6, r1
 8001fd0:	1b73      	subs	r3, r6, r5
 8001fd2:	429c      	cmp	r4, r3
 8001fd4:	dc01      	bgt.n	8001fda <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001fda:	f3af 8000 	nop.w
 8001fde:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe2:	e7f5      	b.n	8001fd0 <_read+0x8>

08001fe4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fe4:	b570      	push	{r4, r5, r6, lr}
 8001fe6:	460d      	mov	r5, r1
 8001fe8:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fea:	460e      	mov	r6, r1
 8001fec:	1b73      	subs	r3, r6, r5
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	dc01      	bgt.n	8001ff6 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001ff2:	4620      	mov	r0, r4
 8001ff4:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001ff6:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001ffa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ffe:	e7f5      	b.n	8001fec <_write+0x8>

08002000 <_close>:

int _close(int file)
{
	return -1;
}
 8002000:	f04f 30ff 	mov.w	r0, #4294967295
 8002004:	4770      	bx	lr

08002006 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002006:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800200a:	604b      	str	r3, [r1, #4]
	return 0;
}
 800200c:	2000      	movs	r0, #0
 800200e:	4770      	bx	lr

08002010 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002010:	2001      	movs	r0, #1
 8002012:	4770      	bx	lr

08002014 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002014:	2000      	movs	r0, #0
 8002016:	4770      	bx	lr

08002018 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002018:	4a0a      	ldr	r2, [pc, #40]	@ (8002044 <_sbrk+0x2c>)
 800201a:	6811      	ldr	r1, [r2, #0]
{
 800201c:	b508      	push	{r3, lr}
 800201e:	4603      	mov	r3, r0
	if (heap_end == 0)
 8002020:	b909      	cbnz	r1, 8002026 <_sbrk+0xe>
		heap_end = &end;
 8002022:	4909      	ldr	r1, [pc, #36]	@ (8002048 <_sbrk+0x30>)
 8002024:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 8002026:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8002028:	4669      	mov	r1, sp
 800202a:	4403      	add	r3, r0
 800202c:	428b      	cmp	r3, r1
 800202e:	d906      	bls.n	800203e <_sbrk+0x26>
	{
		errno = ENOMEM;
 8002030:	f011 fc4a 	bl	80138c8 <__errno>
 8002034:	230c      	movs	r3, #12
 8002036:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002038:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 800203c:	bd08      	pop	{r3, pc}
	heap_end += incr;
 800203e:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8002040:	e7fc      	b.n	800203c <_sbrk+0x24>
 8002042:	bf00      	nop
 8002044:	2000180c 	.word	0x2000180c
 8002048:	200129d0 	.word	0x200129d0

0800204c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const touchgfx::FontId MEDIUM = 3;  // verdanaz_22_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800204c:	4770      	bx	lr

0800204e <_ZN23ApplicationFontProviderD0Ev>:
 800204e:	b510      	push	{r4, lr}
 8002050:	2104      	movs	r1, #4
 8002052:	4604      	mov	r4, r0
 8002054:	f011 f960 	bl	8013318 <_ZdlPvj>
 8002058:	4620      	mov	r0, r4
 800205a:	bd10      	pop	{r4, pc}

0800205c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800205c:	b508      	push	{r3, lr}
    switch (typography)
 800205e:	2903      	cmp	r1, #3
 8002060:	d813      	bhi.n	800208a <_ZN23ApplicationFontProvider7getFontEt+0x2e>
 8002062:	e8df f001 	tbb	[pc, r1]
 8002066:	0602      	.short	0x0602
 8002068:	0e0a      	.short	0x0e0a
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800206a:	f001 fb5b 	bl	8003724 <_ZN17TypedTextDatabase8getFontsEv>
 800206e:	6800      	ldr	r0, [r0, #0]
        // verdanaz_22_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
    default:
        return 0;
    }
}
 8002070:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8002072:	f001 fb57 	bl	8003724 <_ZN17TypedTextDatabase8getFontsEv>
 8002076:	6840      	ldr	r0, [r0, #4]
 8002078:	e7fa      	b.n	8002070 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800207a:	f001 fb53 	bl	8003724 <_ZN17TypedTextDatabase8getFontsEv>
 800207e:	6880      	ldr	r0, [r0, #8]
 8002080:	e7f6      	b.n	8002070 <_ZN23ApplicationFontProvider7getFontEt+0x14>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 8002082:	f001 fb4f 	bl	8003724 <_ZN17TypedTextDatabase8getFontsEv>
 8002086:	68c0      	ldr	r0, [r0, #12]
 8002088:	e7f2      	b.n	8002070 <_ZN23ApplicationFontProvider7getFontEt+0x14>
    switch (typography)
 800208a:	2000      	movs	r0, #0
 800208c:	e7f0      	b.n	8002070 <_ZN23ApplicationFontProvider7getFontEt+0x14>
	...

08002090 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8002090:	4800      	ldr	r0, [pc, #0]	@ (8002094 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8002092:	4770      	bx	lr
 8002094:	08014afc 	.word	0x08014afc

08002098 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8002098:	200d      	movs	r0, #13
 800209a:	4770      	bx	lr

0800209c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800209c:	b513      	push	{r0, r1, r4, lr}
 800209e:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 80020a0:	b151      	cbz	r1, 80020b8 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80020a2:	6803      	ldr	r3, [r0, #0]
        const uint8_t* dummyPixelDataPointer = 0;
 80020a4:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 80020a6:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80020aa:	aa01      	add	r2, sp, #4
 80020ac:	689c      	ldr	r4, [r3, #8]
 80020ae:	f10d 0303 	add.w	r3, sp, #3
 80020b2:	47a0      	blx	r4
        return glyph;
    }
 80020b4:	b002      	add	sp, #8
 80020b6:	bd10      	pop	{r4, pc}
            return 0;
 80020b8:	4608      	mov	r0, r1
 80020ba:	e7fb      	b.n	80020b4 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

080020bc <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 80020bc:	89c0      	ldrh	r0, [r0, #14]
 80020be:	4770      	bx	lr

080020c0 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 80020c0:	8a00      	ldrh	r0, [r0, #16]
 80020c2:	4770      	bx	lr

080020c4 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 80020c4:	88c0      	ldrh	r0, [r0, #6]
 80020c6:	4770      	bx	lr

080020c8 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 80020c8:	8880      	ldrh	r0, [r0, #4]
 80020ca:	4770      	bx	lr

080020cc <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 80020cc:	7a80      	ldrb	r0, [r0, #10]
    }
 80020ce:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 80020d2:	4770      	bx	lr

080020d4 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 80020d4:	7a80      	ldrb	r0, [r0, #10]
    }
 80020d6:	09c0      	lsrs	r0, r0, #7
 80020d8:	4770      	bx	lr

080020da <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 80020da:	2000      	movs	r0, #0
 80020dc:	4770      	bx	lr
	...

080020e0 <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 80020e0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80020e8 <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	00000000 	.word	0x00000000

080020ec <_ZN8touchgfx9TypedTextD1Ev>:
    }
 80020ec:	4770      	bx	lr

080020ee <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 80020ee:	b510      	push	{r4, lr}
    }
 80020f0:	2108      	movs	r1, #8
    virtual ~TypedText()
 80020f2:	4604      	mov	r4, r0
    }
 80020f4:	f011 f910 	bl	8013318 <_ZdlPvj>
 80020f8:	4620      	mov	r0, r4
 80020fa:	bd10      	pop	{r4, pc}

080020fc <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 80020fc:	2000      	movs	r0, #0
 80020fe:	4770      	bx	lr

08002100 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8002100:	8081      	strh	r1, [r0, #4]
    }
 8002102:	4770      	bx	lr

08002104 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8002104:	80c1      	strh	r1, [r0, #6]
    }
 8002106:	4770      	bx	lr

08002108 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8002108:	8101      	strh	r1, [r0, #8]
    }
 800210a:	4770      	bx	lr

0800210c <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 800210c:	8141      	strh	r1, [r0, #10]
    }
 800210e:	4770      	bx	lr

08002110 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8002110:	4770      	bx	lr

08002112 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8002112:	4770      	bx	lr

08002114 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8002114:	4770      	bx	lr

08002116 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8002116:	4770      	bx	lr

08002118 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002118:	4770      	bx	lr

0800211a <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800211a:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 800211c:	88c4      	ldrh	r4, [r0, #6]
 800211e:	6803      	ldr	r3, [r0, #0]
 8002120:	1b12      	subs	r2, r2, r4
 8002122:	8884      	ldrh	r4, [r0, #4]
 8002124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002126:	1b09      	subs	r1, r1, r4
 8002128:	b212      	sxth	r2, r2
    }
 800212a:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 800212e:	b209      	sxth	r1, r1
 8002130:	4718      	bx	r3

08002132 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8002132:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002136:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8002138:	f04f 33ff 	mov.w	r3, #4294967295
 800213c:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 800213e:	6813      	ldr	r3, [r2, #0]
 8002140:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8002142:	6010      	str	r0, [r2, #0]
    }
 8002144:	4770      	bx	lr

08002146 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8002146:	4770      	bx	lr

08002148 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8002148:	4770      	bx	lr

0800214a <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 800214a:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 800214e:	6808      	ldr	r0, [r1, #0]
 8002150:	6849      	ldr	r1, [r1, #4]
 8002152:	c303      	stmia	r3!, {r0, r1}
    }
 8002154:	4770      	bx	lr

08002156 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8002156:	4770      	bx	lr

08002158 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8002158:	4770      	bx	lr

0800215a <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 800215a:	6041      	str	r1, [r0, #4]
    }
 800215c:	4770      	bx	lr

0800215e <_ZNK8touchgfx10Transition13FullSolidRect12getSolidRectEv>:
     * A Widget that reports solid and but does not draw anything.
     */
    class FullSolidRect : public Widget
    {
    public:
        virtual Rect getSolidRect() const
 800215e:	b510      	push	{r4, lr}
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8002160:	2200      	movs	r2, #0
        {
            return Rect(0, 0, rect.width, rect.height);
 8002162:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8002166:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 800216a:	8002      	strh	r2, [r0, #0]
 800216c:	8042      	strh	r2, [r0, #2]
 800216e:	8084      	strh	r4, [r0, #4]
 8002170:	80c1      	strh	r1, [r0, #6]
        }
 8002172:	bd10      	pop	{r4, pc}

08002174 <_ZNK8touchgfx10Transition13FullSolidRect4drawERKNS_4RectE>:

        virtual void draw(const Rect& area) const
        {
        }
 8002174:	4770      	bx	lr

08002176 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8002176:	4770      	bx	lr

08002178 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002178:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 800217a:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 800217e:	2300      	movs	r3, #0
 8002180:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8002184:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8002188:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 800218c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	08002611 	.word	0x08002611

08002198 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8002198:	2301      	movs	r3, #1
 800219a:	7203      	strb	r3, [r0, #8]
    }
 800219c:	4770      	bx	lr

0800219e <_ZN8touchgfx10Transition13FullSolidRectD1Ev>:
    class FullSolidRect : public Widget
 800219e:	4770      	bx	lr

080021a0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED1Ev>:
 * the given direction.  This transition only draws the pixels in the
 * framebuffer once, and never moves any pixels. It is therefore very
 * useful on MCUs with limited performance.
 */
template <Direction templateDirection>
class WipeTransition : public Transition
 80021a0:	4770      	bx	lr

080021a2 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 80021a2:	4770      	bx	lr

080021a4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 80021a4:	4770      	bx	lr

080021a6 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE8tearDownEv>:
            // Synchronize framebuffers
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
        }
    }

    virtual void tearDown()
 80021a6:	4601      	mov	r1, r0
    {
        screenContainer->remove(solid);
 80021a8:	6840      	ldr	r0, [r0, #4]
 80021aa:	6803      	ldr	r3, [r0, #0]
 80021ac:	3110      	adds	r1, #16
 80021ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80021b0:	4718      	bx	r3

080021b2 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE4initEv>:
    }

    virtual void init()
 80021b2:	4601      	mov	r1, r0
    {
        Transition::init();
        // Add the solid (and not-drawing-anything) widget on top to cover the other widgets
        screenContainer->add(solid);
 80021b4:	6840      	ldr	r0, [r0, #4]
 80021b6:	6803      	ldr	r3, [r0, #0]
 80021b8:	3110      	adds	r1, #16
 80021ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021bc:	4718      	bx	r3

080021be <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE10invalidateEv>:
     * Wipe transition does not require an invalidation. Invalidation
     * is handled by the class. Do no invalidation initially.
     */
    virtual void invalidate()
    {
    }
 80021be:	4770      	bx	lr

080021c0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80021c0:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 80021c2:	68c2      	ldr	r2, [r0, #12]
 80021c4:	6841      	ldr	r1, [r0, #4]
 80021c6:	1054      	asrs	r4, r2, #1
    virtual void execute()
 80021c8:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 80021ca:	eb01 0062 	add.w	r0, r1, r2, asr #1
 80021ce:	07d2      	lsls	r2, r2, #31
 80021d0:	bf48      	it	mi
 80021d2:	590a      	ldrmi	r2, [r1, r4]
 80021d4:	689b      	ldr	r3, [r3, #8]
    }
 80021d6:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 80021da:	bf48      	it	mi
 80021dc:	58d3      	ldrmi	r3, [r2, r3]
 80021de:	4718      	bx	r3

080021e0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 80021e0:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 80021e2:	6840      	ldr	r0, [r0, #4]
 80021e4:	b130      	cbz	r0, 80021f4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	b91a      	cbnz	r2, 80021f2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 80021ea:	68d8      	ldr	r0, [r3, #12]
 80021ec:	f000 0001 	and.w	r0, r0, #1
 80021f0:	4770      	bx	lr
 80021f2:	2001      	movs	r0, #1
    }
 80021f4:	4770      	bx	lr

080021f6 <_ZN8touchgfx12NoTransitionD0Ev>:
 80021f6:	b510      	push	{r4, lr}
 80021f8:	210c      	movs	r1, #12
 80021fa:	4604      	mov	r4, r0
 80021fc:	f011 f88c 	bl	8013318 <_ZdlPvj>
 8002200:	4620      	mov	r0, r4
 8002202:	bd10      	pop	{r4, pc}

08002204 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002204:	b510      	push	{r4, lr}
 8002206:	2110      	movs	r1, #16
 8002208:	4604      	mov	r4, r0
 800220a:	f011 f885 	bl	8013318 <_ZdlPvj>
 800220e:	4620      	mov	r0, r4
 8002210:	bd10      	pop	{r4, pc}

08002212 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8002212:	b510      	push	{r4, lr}
 8002214:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8002218:	4604      	mov	r4, r0
 800221a:	f011 f87d 	bl	8013318 <_ZdlPvj>
 800221e:	4620      	mov	r0, r4
 8002220:	bd10      	pop	{r4, pc}

08002222 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EED0Ev>:
class WipeTransition : public Transition
 8002222:	b510      	push	{r4, lr}
 8002224:	2138      	movs	r1, #56	@ 0x38
 8002226:	4604      	mov	r4, r0
 8002228:	f011 f876 	bl	8013318 <_ZdlPvj>
 800222c:	4620      	mov	r0, r4
 800222e:	bd10      	pop	{r4, pc}

08002230 <_ZN8touchgfx10Transition13FullSolidRectD0Ev>:
 8002230:	b510      	push	{r4, lr}
 8002232:	2128      	movs	r1, #40	@ 0x28
 8002234:	4604      	mov	r4, r0
 8002236:	f011 f86f 	bl	8013318 <_ZdlPvj>
 800223a:	4620      	mov	r0, r4
 800223c:	bd10      	pop	{r4, pc}

0800223e <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 800223e:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 8002240:	f00a fd00 	bl	800cc44 <_ZN8touchgfx11Application11getInstanceEv>
 8002244:	6803      	ldr	r3, [r0, #0]
    }
 8002246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 800224a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800224c:	4718      	bx	r3

0800224e <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 800224e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8002252:	b112      	cbz	r2, 800225a <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 8002254:	6803      	ldr	r3, [r0, #0]
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	4718      	bx	r3
    }
 800225a:	4770      	bx	lr

0800225c <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv>:
    virtual void handleTickEvent()
 800225c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800225e:	4604      	mov	r4, r0
        animationCounter++;
 8002260:	7a80      	ldrb	r0, [r0, #10]
        if (animationCounter > animationSteps)
 8002262:	7a63      	ldrb	r3, [r4, #9]
        animationCounter++;
 8002264:	3001      	adds	r0, #1
 8002266:	b2c0      	uxtb	r0, r0
        if (animationCounter > animationSteps)
 8002268:	4298      	cmp	r0, r3
        animationCounter++;
 800226a:	72a0      	strb	r0, [r4, #10]
        if (animationCounter > animationSteps)
 800226c:	d905      	bls.n	800227a <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1e>
            done = true;
 800226e:	2301      	movs	r3, #1
 8002270:	7223      	strb	r3, [r4, #8]
            animationCounter = 0;
 8002272:	2300      	movs	r3, #0
 8002274:	72a3      	strb	r3, [r4, #10]
    }
 8002276:	b003      	add	sp, #12
 8002278:	bd30      	pop	{r4, r5, pc}
        calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 800227a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800227e:	2100      	movs	r1, #0
 8002280:	f00c f9b4 	bl	800e5ec <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
        if ((calculatedValue % 2) != 0)
 8002284:	07c3      	lsls	r3, r0, #31
 8002286:	d506      	bpl.n	8002296 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x3a>
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8002288:	2800      	cmp	r0, #0
 800228a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800228e:	bfc8      	it	gt
 8002290:	2301      	movgt	r3, #1
 8002292:	4418      	add	r0, r3
 8002294:	b200      	sxth	r0, r0
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 8002296:	4b14      	ldr	r3, [pc, #80]	@ (80022e8 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x8c>)
            calculatedValue += (calculatedValue > 0 ? 1 : -1);
 8002298:	81e0      	strh	r0, [r4, #14]
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 800229a:	8819      	ldrh	r1, [r3, #0]
                const uint16_t prevSolidWidth = solid.getWidth();
 800229c:	8b25      	ldrh	r5, [r4, #24]
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 800229e:	b283      	uxth	r3, r0
                Rect r(solid.getWidth(), 0, delta, HAL::DISPLAY_HEIGHT);
 80022a0:	4812      	ldr	r0, [pc, #72]	@ (80022ec <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x90>)
 80022a2:	f9b0 0000 	ldrsh.w	r0, [r0]
 80022a6:	f8ad 0006 	strh.w	r0, [sp, #6]
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 80022aa:	1aca      	subs	r2, r1, r3
                screenContainer->invalidateRect(r);
 80022ac:	6860      	ldr	r0, [r4, #4]
                const uint16_t delta = prevSolidWidth - solid.getWidth();
 80022ae:	442b      	add	r3, r5
 80022b0:	1a5b      	subs	r3, r3, r1
                solid.setWidth(HAL::DISPLAY_WIDTH - calculatedValue);
 80022b2:	b212      	sxth	r2, r2
 80022b4:	f8ad 3004 	strh.w	r3, [sp, #4]
                screenContainer->invalidateRect(r);
 80022b8:	6803      	ldr	r3, [r0, #0]
        rect.width = width;
 80022ba:	8322      	strh	r2, [r4, #24]
 80022bc:	f8ad 2000 	strh.w	r2, [sp]
 80022c0:	2200      	movs	r2, #0
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	f8ad 2002 	strh.w	r2, [sp, #2]
 80022c8:	4669      	mov	r1, sp
 80022ca:	4798      	blx	r3
        if (animationCounter == 1 && HAL::USE_DOUBLE_BUFFERING)
 80022cc:	7aa3      	ldrb	r3, [r4, #10]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d1d1      	bne.n	8002276 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a>
 80022d2:	4b07      	ldr	r3, [pc, #28]	@ (80022f0 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x94>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0cd      	beq.n	8002276 <_ZN8touchgfx14WipeTransitionILNS_9DirectionE2EE15handleTickEventEv+0x1a>
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 80022da:	f00a fcb3 	bl	800cc44 <_ZN8touchgfx11Application11getInstanceEv>
    }
 80022de:	b003      	add	sp, #12
 80022e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            Application::getInstance()->copyInvalidatedAreasFromTFTToClientBuffer();
 80022e4:	f00a bcb4 	b.w	800cc50 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>
 80022e8:	2001264c 	.word	0x2001264c
 80022ec:	2001264e 	.word	0x2001264e
 80022f0:	20012656 	.word	0x20012656

080022f4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 80022f4:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80022f8:	b11a      	cbz	r2, 8002302 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 80022fa:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 80022fe:	b102      	cbz	r2, 8002302 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8002300:	6018      	str	r0, [r3, #0]
        }
    }
 8002302:	4770      	bx	lr

08002304 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8002304:	b510      	push	{r4, lr}
 8002306:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002308:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 800230c:	b158      	cbz	r0, 8002326 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 800230e:	6803      	ldr	r3, [r0, #0]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	4798      	blx	r3
 8002314:	b138      	cbz	r0, 8002326 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8002316:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 800231a:	6803      	ldr	r3, [r0, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002320:	2300      	movs	r3, #0
 8002322:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 8002326:	bd10      	pop	{r4, pc}

08002328 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv>:
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen2ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
}

void FrontendApplicationBase::gotoScreen2ScreenNoTransitionImpl()
{
 8002328:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800232c:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8002330:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8002332:	68b0      	ldr	r0, [r6, #8]
 8002334:	6803      	ldr	r3, [r0, #0]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	4798      	blx	r3
 800233a:	f5b0 7f5d 	cmp.w	r0, #884	@ 0x374
 800233e:	d205      	bcs.n	800234c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x24>
 8002340:	4b44      	ldr	r3, [pc, #272]	@ (8002454 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x12c>)
 8002342:	4a45      	ldr	r2, [pc, #276]	@ (8002458 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x130>)
 8002344:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002346:	4845      	ldr	r0, [pc, #276]	@ (800245c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x134>)
 8002348:	f011 f814 	bl	8013374 <__assert_func>
 800234c:	6870      	ldr	r0, [r6, #4]
 800234e:	6803      	ldr	r3, [r0, #0]
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	4798      	blx	r3
 8002354:	280f      	cmp	r0, #15
 8002356:	d803      	bhi.n	8002360 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x38>
 8002358:	4b41      	ldr	r3, [pc, #260]	@ (8002460 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x138>)
 800235a:	4a3f      	ldr	r2, [pc, #252]	@ (8002458 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x130>)
 800235c:	21a4      	movs	r1, #164	@ 0xa4
 800235e:	e7f2      	b.n	8002346 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002360:	68f0      	ldr	r0, [r6, #12]
 8002362:	6803      	ldr	r3, [r0, #0]
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	4798      	blx	r3
 8002368:	280b      	cmp	r0, #11
 800236a:	d803      	bhi.n	8002374 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x4c>
 800236c:	4b3d      	ldr	r3, [pc, #244]	@ (8002464 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x13c>)
 800236e:	4a3a      	ldr	r2, [pc, #232]	@ (8002458 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x130>)
 8002370:	21a5      	movs	r1, #165	@ 0xa5
 8002372:	e7e8      	b.n	8002346 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x1e>
    Application::getInstance()->clearAllTimerWidgets();
 8002374:	f00a fc66 	bl	800cc44 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 8002378:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 800246c <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x144>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 800237c:	3004      	adds	r0, #4
 800237e:	f00a fcae 	bl	800ccde <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8002382:	f8d9 0000 	ldr.w	r0, [r9]
 8002386:	b110      	cbz	r0, 800238e <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 8002388:	6803      	ldr	r3, [r0, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	4798      	blx	r3
    if (*currentTrans)
 800238e:	f8d9 0000 	ldr.w	r0, [r9]
 8002392:	b110      	cbz	r0, 800239a <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 8002394:	6803      	ldr	r3, [r0, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4798      	blx	r3
    if (*currentScreen)
 800239a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002470 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x148>
 800239e:	f8d8 0000 	ldr.w	r0, [r8]
 80023a2:	b110      	cbz	r0, 80023aa <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 80023a4:	6803      	ldr	r3, [r0, #0]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	4798      	blx	r3
    if (*currentPresenter)
 80023aa:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80023ae:	b110      	cbz	r0, 80023b6 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 80023b0:	6803      	ldr	r3, [r0, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	4798      	blx	r3
    if (*currentScreen)
 80023b6:	f8d8 0000 	ldr.w	r0, [r8]
 80023ba:	b110      	cbz	r0, 80023c2 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 80023bc:	6803      	ldr	r3, [r0, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4798      	blx	r3
    if (*currentPresenter)
 80023c2:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80023c6:	b110      	cbz	r0, 80023ce <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 80023c8:	6803      	ldr	r3, [r0, #0]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80023ce:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 80023d0:	6803      	ldr	r3, [r0, #0]
 80023d2:	2100      	movs	r1, #0
 80023d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d6:	4798      	blx	r3
        : screenContainer(0), done(false)
 80023d8:	f04f 0b00 	mov.w	fp, #0
 80023dc:	4b22      	ldr	r3, [pc, #136]	@ (8002468 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x140>)
 80023de:	f8c0 b004 	str.w	fp, [r0, #4]
 80023e2:	4604      	mov	r4, r0
 80023e4:	f880 b008 	strb.w	fp, [r0, #8]
 80023e8:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80023ea:	68b0      	ldr	r0, [r6, #8]
 80023ec:	6803      	ldr	r3, [r0, #0]
 80023ee:	4659      	mov	r1, fp
 80023f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f2:	4798      	blx	r3
 80023f4:	4605      	mov	r5, r0
 80023f6:	f001 fabf 	bl	8003978 <_ZN11Screen2ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80023fa:	6870      	ldr	r0, [r6, #4]
 80023fc:	6803      	ldr	r3, [r0, #0]
 80023fe:	4659      	mov	r1, fp
 8002400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002402:	4798      	blx	r3
 8002404:	4629      	mov	r1, r5
 8002406:	4606      	mov	r6, r0
 8002408:	f001 fa42 	bl	8003890 <_ZN16Screen2PresenterC1ER11Screen2View>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 800240c:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 800240e:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
public:
    Model();
    long modelTickCount = 0;
    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8002412:	f8ca 3008 	str.w	r3, [sl, #8]
    newScreen->setupScreen();
 8002416:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8002418:	f8c6 a008 	str.w	sl, [r6, #8]
 800241c:	4628      	mov	r0, r5
 800241e:	68db      	ldr	r3, [r3, #12]
    *currentTrans = newTransition;
 8002420:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8002424:	f8c8 5000 	str.w	r5, [r8]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8002428:	63ee      	str	r6, [r5, #60]	@ 0x3c
    newScreen->setupScreen();
 800242a:	4798      	blx	r3
    newPresenter->activate();
 800242c:	6833      	ldr	r3, [r6, #0]
 800242e:	4630      	mov	r0, r6
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8002434:	4621      	mov	r1, r4
 8002436:	4628      	mov	r0, r5
 8002438:	f00c f8d2 	bl	800e5e0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800243c:	6823      	ldr	r3, [r4, #0]
 800243e:	4620      	mov	r0, r4
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	4798      	blx	r3
    newTransition->invalidate();
 8002444:	6823      	ldr	r3, [r4, #0]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	4620      	mov	r0, r4
}
 800244a:	b001      	add	sp, #4
 800244c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002450:	4718      	bx	r3
 8002452:	bf00      	nop
 8002454:	08014c10 	.word	0x08014c10
 8002458:	08014c9e 	.word	0x08014c9e
 800245c:	08014d70 	.word	0x08014d70
 8002460:	08014db7 	.word	0x08014db7
 8002464:	08014e5a 	.word	0x08014e5a
 8002468:	08015190 	.word	0x08015190
 800246c:	20012698 	.word	0x20012698
 8002470:	20012694 	.word	0x20012694

08002474 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv>:
{
 8002474:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::WipeTransition<EAST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002478:	e9d0 ba55 	ldrd	fp, sl, [r0, #340]	@ 0x154
{
 800247c:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800247e:	f8db 0008 	ldr.w	r0, [fp, #8]
 8002482:	6803      	ldr	r3, [r0, #0]
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	4798      	blx	r3
 8002488:	f5b0 7fc4 	cmp.w	r0, #392	@ 0x188
 800248c:	d205      	bcs.n	800249a <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x26>
 800248e:	4b55      	ldr	r3, [pc, #340]	@ (80025e4 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x170>)
 8002490:	4a55      	ldr	r2, [pc, #340]	@ (80025e8 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x174>)
 8002492:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8002494:	4855      	ldr	r0, [pc, #340]	@ (80025ec <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x178>)
 8002496:	f010 ff6d 	bl	8013374 <__assert_func>
 800249a:	f8db 0004 	ldr.w	r0, [fp, #4]
 800249e:	6803      	ldr	r3, [r0, #0]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	4798      	blx	r3
 80024a4:	280f      	cmp	r0, #15
 80024a6:	d803      	bhi.n	80024b0 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x3c>
 80024a8:	4b51      	ldr	r3, [pc, #324]	@ (80025f0 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x17c>)
 80024aa:	4a4f      	ldr	r2, [pc, #316]	@ (80025e8 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x174>)
 80024ac:	21a4      	movs	r1, #164	@ 0xa4
 80024ae:	e7f1      	b.n	8002494 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80024b0:	f8db 000c 	ldr.w	r0, [fp, #12]
 80024b4:	6803      	ldr	r3, [r0, #0]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	4798      	blx	r3
 80024ba:	2837      	cmp	r0, #55	@ 0x37
 80024bc:	d803      	bhi.n	80024c6 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x52>
 80024be:	4b4d      	ldr	r3, [pc, #308]	@ (80025f4 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x180>)
 80024c0:	4a49      	ldr	r2, [pc, #292]	@ (80025e8 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x174>)
 80024c2:	21a5      	movs	r1, #165	@ 0xa5
 80024c4:	e7e6      	b.n	8002494 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x20>
    Application::getInstance()->clearAllTimerWidgets();
 80024c6:	f00a fbbd 	bl	800cc44 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 80024ca:	f8df 913c 	ldr.w	r9, [pc, #316]	@ 8002608 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x194>
 80024ce:	3004      	adds	r0, #4
 80024d0:	f00a fc05 	bl	800ccde <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80024d4:	f8d9 0000 	ldr.w	r0, [r9]
 80024d8:	b110      	cbz	r0, 80024e0 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x6c>
        (*currentTrans)->tearDown();
 80024da:	6803      	ldr	r3, [r0, #0]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	4798      	blx	r3
    if (*currentTrans)
 80024e0:	f8d9 0000 	ldr.w	r0, [r9]
 80024e4:	b110      	cbz	r0, 80024ec <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x78>
        (*currentTrans)->~Transition();
 80024e6:	6803      	ldr	r3, [r0, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4798      	blx	r3
    if (*currentScreen)
 80024ec:	f8df 811c 	ldr.w	r8, [pc, #284]	@ 800260c <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x198>
 80024f0:	f8d8 0000 	ldr.w	r0, [r8]
 80024f4:	b110      	cbz	r0, 80024fc <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x88>
        (*currentScreen)->tearDownScreen();
 80024f6:	6803      	ldr	r3, [r0, #0]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	4798      	blx	r3
    if (*currentPresenter)
 80024fc:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002500:	b110      	cbz	r0, 8002508 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x94>
        (*currentPresenter)->deactivate();
 8002502:	6803      	ldr	r3, [r0, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	4798      	blx	r3
    if (*currentScreen)
 8002508:	f8d8 0000 	ldr.w	r0, [r8]
 800250c:	b110      	cbz	r0, 8002514 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0xa0>
        (*currentScreen)->~Screen();
 800250e:	6803      	ldr	r3, [r0, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4798      	blx	r3
    if (*currentPresenter)
 8002514:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002518:	b110      	cbz	r0, 8002520 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0xac>
        (*currentPresenter)->~Presenter();
 800251a:	6803      	ldr	r3, [r0, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002520:	f8db 000c 	ldr.w	r0, [fp, #12]
 8002524:	6803      	ldr	r3, [r0, #0]
 8002526:	2100      	movs	r1, #0
 8002528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252a:	4798      	blx	r3
          solid()
 800252c:	4b32      	ldr	r3, [pc, #200]	@ (80025f8 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x184>)
 800252e:	6003      	str	r3, [r0, #0]
 8002530:	4604      	mov	r4, r0
 8002532:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002536:	8103      	strh	r3, [r0, #8]
 8002538:	2500      	movs	r5, #0
 800253a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800253e:	6045      	str	r5, [r0, #4]
          animationCounter(0),
 8002540:	7285      	strb	r5, [r0, #10]
          solid()
 8002542:	6363      	str	r3, [r4, #52]	@ 0x34
    class FullSolidRect : public Widget
 8002544:	4b2d      	ldr	r3, [pc, #180]	@ (80025fc <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x188>)
 8002546:	6123      	str	r3, [r4, #16]
            targetValue = HAL::DISPLAY_WIDTH;
 8002548:	4b2d      	ldr	r3, [pc, #180]	@ (8002600 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x18c>)
          calculatedValue(0),
 800254a:	81e5      	strh	r5, [r4, #14]
            targetValue = HAL::DISPLAY_WIDTH;
 800254c:	f9b3 1000 	ldrsh.w	r1, [r3]
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8002550:	4b2c      	ldr	r3, [pc, #176]	@ (8002604 <_ZN23FrontendApplicationBase39gotoScreen1ScreenWipeTransitionEastImplEv+0x190>)
            targetValue = HAL::DISPLAY_WIDTH;
 8002552:	81a1      	strh	r1, [r4, #12]
        solid.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 8002554:	f9b3 6000 	ldrsh.w	r6, [r3]
          solid()
 8002558:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800255c:	e9c4 5507 	strd	r5, r5, [r4, #28]
 8002560:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
 8002564:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
 8002568:	3010      	adds	r0, #16
        setWidth(width);
 800256a:	9001      	str	r0, [sp, #4]
 800256c:	f7ff fdcc 	bl	8002108 <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 8002570:	9801      	ldr	r0, [sp, #4]
 8002572:	4631      	mov	r1, r6
 8002574:	f7ff fdca 	bl	800210c <_ZN8touchgfx8Drawable9setHeightEs>
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002578:	f8db 0008 	ldr.w	r0, [fp, #8]
 800257c:	6803      	ldr	r3, [r0, #0]
 800257e:	4629      	mov	r1, r5
 8002580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002582:	4798      	blx	r3
 8002584:	4606      	mov	r6, r0
 8002586:	f001 f951 	bl	800382c <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800258a:	f8db 0004 	ldr.w	r0, [fp, #4]
 800258e:	6803      	ldr	r3, [r0, #0]
 8002590:	4629      	mov	r1, r5
 8002592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002594:	4798      	blx	r3
 8002596:	4631      	mov	r1, r6
 8002598:	4605      	mov	r5, r0
 800259a:	f001 f919 	bl	80037d0 <_ZN16Screen1PresenterC1ER11Screen1View>
    model->bind(newPresenter);
 800259e:	1d2b      	adds	r3, r5, #4
    *currentPresenter = newPresenter;
 80025a0:	f8c7 513c 	str.w	r5, [r7, #316]	@ 0x13c
 80025a4:	f8ca 3008 	str.w	r3, [sl, #8]
    newScreen->setupScreen();
 80025a8:	6833      	ldr	r3, [r6, #0]
 80025aa:	f8c5 a008 	str.w	sl, [r5, #8]
 80025ae:	4630      	mov	r0, r6
 80025b0:	68db      	ldr	r3, [r3, #12]
    *currentTrans = newTransition;
 80025b2:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 80025b6:	f8c8 6000 	str.w	r6, [r8]
 80025ba:	63f5      	str	r5, [r6, #60]	@ 0x3c
    newScreen->setupScreen();
 80025bc:	4798      	blx	r3
    newPresenter->activate();
 80025be:	682b      	ldr	r3, [r5, #0]
 80025c0:	4628      	mov	r0, r5
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80025c6:	4621      	mov	r1, r4
 80025c8:	4630      	mov	r0, r6
 80025ca:	f00c f809 	bl	800e5e0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80025ce:	6823      	ldr	r3, [r4, #0]
 80025d0:	4620      	mov	r0, r4
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	4798      	blx	r3
    newTransition->invalidate();
 80025d6:	6823      	ldr	r3, [r4, #0]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	4620      	mov	r0, r4
}
 80025dc:	b003      	add	sp, #12
 80025de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025e2:	4718      	bx	r3
 80025e4:	08014c10 	.word	0x08014c10
 80025e8:	08014efd 	.word	0x08014efd
 80025ec:	08014d70 	.word	0x08014d70
 80025f0:	08014db7 	.word	0x08014db7
 80025f4:	08014e5a 	.word	0x08014e5a
 80025f8:	080151b4 	.word	0x080151b4
 80025fc:	080150bc 	.word	0x080150bc
 8002600:	2001264c 	.word	0x2001264c
 8002604:	2001264e 	.word	0x2001264e
 8002608:	20012698 	.word	0x20012698
 800260c:	20012694 	.word	0x20012694

08002610 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
{
 8002610:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002614:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8002618:	4607      	mov	r7, r0
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800261a:	68b0      	ldr	r0, [r6, #8]
 800261c:	6803      	ldr	r3, [r0, #0]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	4798      	blx	r3
 8002622:	f5b0 7fc4 	cmp.w	r0, #392	@ 0x188
 8002626:	d205      	bcs.n	8002634 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x24>
 8002628:	4b44      	ldr	r3, [pc, #272]	@ (800273c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 800262a:	4a45      	ldr	r2, [pc, #276]	@ (8002740 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 800262c:	21a3      	movs	r1, #163	@ 0xa3
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800262e:	4845      	ldr	r0, [pc, #276]	@ (8002744 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8002630:	f010 fea0 	bl	8013374 <__assert_func>
 8002634:	6870      	ldr	r0, [r6, #4]
 8002636:	6803      	ldr	r3, [r0, #0]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	4798      	blx	r3
 800263c:	280f      	cmp	r0, #15
 800263e:	d803      	bhi.n	8002648 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x38>
 8002640:	4b41      	ldr	r3, [pc, #260]	@ (8002748 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8002642:	4a3f      	ldr	r2, [pc, #252]	@ (8002740 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8002644:	21a4      	movs	r1, #164	@ 0xa4
 8002646:	e7f2      	b.n	800262e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8002648:	68f0      	ldr	r0, [r6, #12]
 800264a:	6803      	ldr	r3, [r0, #0]
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	4798      	blx	r3
 8002650:	280b      	cmp	r0, #11
 8002652:	d803      	bhi.n	800265c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4c>
 8002654:	4b3d      	ldr	r3, [pc, #244]	@ (800274c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 8002656:	4a3a      	ldr	r2, [pc, #232]	@ (8002740 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8002658:	21a5      	movs	r1, #165	@ 0xa5
 800265a:	e7e8      	b.n	800262e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    Application::getInstance()->clearAllTimerWidgets();
 800265c:	f00a faf2 	bl	800cc44 <_ZN8touchgfx11Application11getInstanceEv>
    if (*currentTrans)
 8002660:	f8df 90f0 	ldr.w	r9, [pc, #240]	@ 8002754 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>
 8002664:	3004      	adds	r0, #4
 8002666:	f00a fb3a 	bl	800ccde <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800266a:	f8d9 0000 	ldr.w	r0, [r9]
 800266e:	b110      	cbz	r0, 8002676 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 8002670:	6803      	ldr	r3, [r0, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	4798      	blx	r3
    if (*currentTrans)
 8002676:	f8d9 0000 	ldr.w	r0, [r9]
 800267a:	b110      	cbz	r0, 8002682 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 800267c:	6803      	ldr	r3, [r0, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4798      	blx	r3
    if (*currentScreen)
 8002682:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002758 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
 8002686:	f8d8 0000 	ldr.w	r0, [r8]
 800268a:	b110      	cbz	r0, 8002692 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 800268c:	6803      	ldr	r3, [r0, #0]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	4798      	blx	r3
    if (*currentPresenter)
 8002692:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8002696:	b110      	cbz	r0, 800269e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8002698:	6803      	ldr	r3, [r0, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	4798      	blx	r3
    if (*currentScreen)
 800269e:	f8d8 0000 	ldr.w	r0, [r8]
 80026a2:	b110      	cbz	r0, 80026aa <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 80026a4:	6803      	ldr	r3, [r0, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4798      	blx	r3
    if (*currentPresenter)
 80026aa:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 80026ae:	b110      	cbz	r0, 80026b6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 80026b0:	6803      	ldr	r3, [r0, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	4798      	blx	r3
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80026b6:	68f0      	ldr	r0, [r6, #12]
 80026b8:	6803      	ldr	r3, [r0, #0]
 80026ba:	2100      	movs	r1, #0
 80026bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026be:	4798      	blx	r3
        : screenContainer(0), done(false)
 80026c0:	f04f 0b00 	mov.w	fp, #0
 80026c4:	4b22      	ldr	r3, [pc, #136]	@ (8002750 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 80026c6:	f8c0 b004 	str.w	fp, [r0, #4]
 80026ca:	4604      	mov	r4, r0
 80026cc:	f880 b008 	strb.w	fp, [r0, #8]
 80026d0:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 80026d2:	68b0      	ldr	r0, [r6, #8]
 80026d4:	6803      	ldr	r3, [r0, #0]
 80026d6:	4659      	mov	r1, fp
 80026d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026da:	4798      	blx	r3
 80026dc:	4605      	mov	r5, r0
 80026de:	f001 f8a5 	bl	800382c <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 80026e2:	6870      	ldr	r0, [r6, #4]
 80026e4:	6803      	ldr	r3, [r0, #0]
 80026e6:	4659      	mov	r1, fp
 80026e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ea:	4798      	blx	r3
 80026ec:	4629      	mov	r1, r5
 80026ee:	4606      	mov	r6, r0
 80026f0:	f001 f86e 	bl	80037d0 <_ZN16Screen1PresenterC1ER11Screen1View>
    model->bind(newPresenter);
 80026f4:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 80026f6:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
 80026fa:	f8ca 3008 	str.w	r3, [sl, #8]
    newScreen->setupScreen();
 80026fe:	682b      	ldr	r3, [r5, #0]
 8002700:	f8c6 a008 	str.w	sl, [r6, #8]
 8002704:	4628      	mov	r0, r5
 8002706:	68db      	ldr	r3, [r3, #12]
    *currentTrans = newTransition;
 8002708:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 800270c:	f8c8 5000 	str.w	r5, [r8]
 8002710:	63ee      	str	r6, [r5, #60]	@ 0x3c
    newScreen->setupScreen();
 8002712:	4798      	blx	r3
    newPresenter->activate();
 8002714:	6833      	ldr	r3, [r6, #0]
 8002716:	4630      	mov	r0, r6
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800271c:	4621      	mov	r1, r4
 800271e:	4628      	mov	r0, r5
 8002720:	f00b ff5e 	bl	800e5e0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8002724:	6823      	ldr	r3, [r4, #0]
 8002726:	4620      	mov	r0, r4
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	4798      	blx	r3
    newTransition->invalidate();
 800272c:	6823      	ldr	r3, [r4, #0]
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	4620      	mov	r0, r4
}
 8002732:	b001      	add	sp, #4
 8002734:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002738:	4718      	bx	r3
 800273a:	bf00      	nop
 800273c:	08014c10 	.word	0x08014c10
 8002740:	08014fe1 	.word	0x08014fe1
 8002744:	08014d70 	.word	0x08014d70
 8002748:	08014db7 	.word	0x08014db7
 800274c:	08014e5a 	.word	0x08014e5a
 8002750:	08015190 	.word	0x08015190
 8002754:	20012698 	.word	0x20012698
 8002758:	20012694 	.word	0x20012694

0800275c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800275c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800275e:	4604      	mov	r4, r0
 8002760:	4617      	mov	r7, r2
 8002762:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8002764:	f00a fb58 	bl	800ce18 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8002768:	4b10      	ldr	r3, [pc, #64]	@ (80027ac <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
        : currentPresenter(0),
 800276a:	2500      	movs	r5, #0
      model(m)
 800276c:	e9c4 7655 	strd	r7, r6, [r4, #340]	@ 0x154
        return instance;
 8002770:	4e0f      	ldr	r6, [pc, #60]	@ (80027b0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
        instance = this;
 8002772:	601c      	str	r4, [r3, #0]
        : pobject(0), pmemfun(0)
 8002774:	e9c4 5553 	strd	r5, r5, [r4, #332]	@ 0x14c
 8002778:	4b0e      	ldr	r3, [pc, #56]	@ (80027b4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 800277a:	6830      	ldr	r0, [r6, #0]
 800277c:	6023      	str	r3, [r4, #0]
 800277e:	4b0e      	ldr	r3, [pc, #56]	@ (80027b8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8002780:	e9c4 3551 	strd	r3, r5, [r4, #324]	@ 0x144
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_PORTRAIT);
 8002784:	6803      	ldr	r3, [r0, #0]
 8002786:	2101      	movs	r1, #1
 8002788:	689b      	ldr	r3, [r3, #8]
          pendingScreenTransitionCallback(0)
 800278a:	e9c4 554f 	strd	r5, r5, [r4, #316]	@ 0x13c
 800278e:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8002790:	4628      	mov	r0, r5
 8002792:	f000 ff7b 	bl	800368c <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002796:	6833      	ldr	r3, [r6, #0]
 8002798:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800279c:	b10a      	cbz	r2, 80027a2 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 800279e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80027a0:	b900      	cbnz	r0, 80027a4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 80027a2:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_L4();
 80027a4:	f010 f86c 	bl	8012880 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>
}
 80027a8:	4620      	mov	r0, r4
 80027aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027ac:	200126a4 	.word	0x200126a4
 80027b0:	20012658 	.word	0x20012658
 80027b4:	0801513c 	.word	0x0801513c
 80027b8:	08015124 	.word	0x08015124

080027bc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80027bc:	4b06      	ldr	r3, [pc, #24]	@ (80027d8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 80027be:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 80027c2:	2300      	movs	r3, #0
 80027c4:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 80027c8:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 80027cc:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 80027d0:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	08002611 	.word	0x08002611

080027dc <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionEastEv>:
 80027dc:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionEastEv+0x1c>)
 80027de:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 80027e2:	2300      	movs	r3, #0
 80027e4:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 80027e8:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 80027ec:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 80027f0:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	08002475 	.word	0x08002475

080027fc <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>:
 80027fc:	4b06      	ldr	r3, [pc, #24]	@ (8002818 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv+0x1c>)
 80027fe:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8002802:	2300      	movs	r3, #0
 8002804:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8002808:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 800280c:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8002810:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	08002329 	.word	0x08002329

0800281c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 800281c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800281e:	4770      	bx	lr

08002820 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8002820:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8002822:	4770      	bx	lr

08002824 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8002824:	4770      	bx	lr

08002826 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8002826:	888b      	ldrh	r3, [r1, #4]
 8002828:	69c0      	ldr	r0, [r0, #28]
 800282a:	680a      	ldr	r2, [r1, #0]
 800282c:	0adb      	lsrs	r3, r3, #11
 800282e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8002832:	4410      	add	r0, r2
 8002834:	4770      	bx	lr

08002836 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8002836:	b510      	push	{r4, lr}
 8002838:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 800283a:	b1ba      	cbz	r2, 800286c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 800283c:	7b10      	ldrb	r0, [r2, #12]
 800283e:	b168      	cbz	r0, 800285c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8002840:	7b53      	ldrb	r3, [r2, #13]
 8002842:	7ad2      	ldrb	r2, [r2, #11]
 8002844:	021b      	lsls	r3, r3, #8
 8002846:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800284a:	431a      	orrs	r2, r3
 800284c:	6a23      	ldr	r3, [r4, #32]
 800284e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 8002852:	881a      	ldrh	r2, [r3, #0]
 8002854:	428a      	cmp	r2, r1
 8002856:	d102      	bne.n	800285e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8002858:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 800285c:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 800285e:	d805      	bhi.n	800286c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8002860:	3801      	subs	r0, #1
 8002862:	b280      	uxth	r0, r0
 8002864:	3304      	adds	r3, #4
 8002866:	2800      	cmp	r0, #0
 8002868:	d1f3      	bne.n	8002852 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800286a:	e7f7      	b.n	800285c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 800286c:	2000      	movs	r0, #0
 800286e:	e7f5      	b.n	800285c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08002870 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8002870:	b510      	push	{r4, lr}
 8002872:	212c      	movs	r1, #44	@ 0x2c
 8002874:	4604      	mov	r4, r0
 8002876:	f010 fd4f 	bl	8013318 <_ZdlPvj>
 800287a:	4620      	mov	r0, r4
 800287c:	bd10      	pop	{r4, pc}
	...

08002880 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8002880:	b530      	push	{r4, r5, lr}
 8002882:	b08b      	sub	sp, #44	@ 0x2c
 8002884:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8002886:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 800288a:	9508      	str	r5, [sp, #32]
 800288c:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 8002890:	9507      	str	r5, [sp, #28]
 8002892:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8002896:	9506      	str	r5, [sp, #24]
 8002898:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 800289c:	9505      	str	r5, [sp, #20]
 800289e:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 80028a2:	9504      	str	r5, [sp, #16]
 80028a4:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 80028a8:	9503      	str	r5, [sp, #12]
 80028aa:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 80028ae:	9502      	str	r5, [sp, #8]
 80028b0:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 80028b4:	9501      	str	r5, [sp, #4]
 80028b6:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 80028ba:	9500      	str	r5, [sp, #0]
 80028bc:	f00b faea 	bl	800de94 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 80028c0:	4b06      	ldr	r3, [pc, #24]	@ (80028dc <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
 80028c2:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 80028c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80028c6:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 80028c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80028ca:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 80028cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80028ce:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 80028d0:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80028d2:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 80028d4:	4620      	mov	r0, r4
 80028d6:	b00b      	add	sp, #44	@ 0x2c
 80028d8:	bd30      	pop	{r4, r5, pc}
 80028da:	bf00      	nop
 80028dc:	080151d8 	.word	0x080151d8

080028e0 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 80028e0:	4770      	bx	lr

080028e2 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 80028e2:	4770      	bx	lr

080028e4 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 80028e4:	4770      	bx	lr

080028e6 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 80028e6:	4770      	bx	lr

080028e8 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 80028e8:	4770      	bx	lr

080028ea <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 80028ea:	b530      	push	{r4, r5, lr}
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 80028ec:	6803      	ldr	r3, [r0, #0]
        rect.width = width;
 80028ee:	8101      	strh	r1, [r0, #8]
    virtual void setWidth(int16_t width)
 80028f0:	b085      	sub	sp, #20
        boundingArea = calculateBoundingArea();
 80028f2:	466d      	mov	r5, sp
 80028f4:	4601      	mov	r1, r0
 80028f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
    virtual void setWidth(int16_t width)
 80028fa:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
 80028fc:	4628      	mov	r0, r5
 80028fe:	4798      	blx	r3
 8002900:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002904:	343c      	adds	r4, #60	@ 0x3c
 8002906:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 800290a:	b005      	add	sp, #20
 800290c:	bd30      	pop	{r4, r5, pc}

0800290e <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 800290e:	b530      	push	{r4, r5, lr}
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 8002910:	6803      	ldr	r3, [r0, #0]
        rect.height = height;
 8002912:	8141      	strh	r1, [r0, #10]
    virtual void setHeight(int16_t height)
 8002914:	b085      	sub	sp, #20
        boundingArea = calculateBoundingArea();
 8002916:	466d      	mov	r5, sp
 8002918:	4601      	mov	r1, r0
 800291a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
    virtual void setHeight(int16_t height)
 800291e:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
 8002920:	4628      	mov	r0, r5
 8002922:	4798      	blx	r3
 8002924:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002928:	343c      	adds	r4, #60	@ 0x3c
 800292a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 800292e:	b005      	add	sp, #20
 8002930:	bd30      	pop	{r4, r5, pc}

08002932 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 8002932:	2200      	movs	r2, #0
 8002934:	8002      	strh	r2, [r0, #0]
 8002936:	8042      	strh	r2, [r0, #2]
 8002938:	8082      	strh	r2, [r0, #4]
 800293a:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 800293c:	4770      	bx	lr

0800293e <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 800293e:	f880 1036 	strb.w	r1, [r0, #54]	@ 0x36
    }
 8002942:	4770      	bx	lr

08002944 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8002944:	b570      	push	{r4, r5, r6, lr}
    {
        setX(x);
 8002946:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8002948:	4604      	mov	r4, r0
        setX(x);
 800294a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800294c:	4615      	mov	r5, r2
        setX(x);
 800294e:	4798      	blx	r3
        setBaselineY(baselineY);
 8002950:	6823      	ldr	r3, [r4, #0]
 8002952:	4629      	mov	r1, r5
 8002954:	4620      	mov	r0, r4
 8002956:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    }
 8002958:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 800295c:	4718      	bx	r3

0800295e <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 800295e:	2000      	movs	r0, #0
 8002960:	4770      	bx	lr

08002962 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 8002962:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8002964:	4770      	bx	lr

08002966 <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 8002966:	4770      	bx	lr

08002968 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 8002968:	4770      	bx	lr

0800296a <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800296a:	4770      	bx	lr

0800296c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800296c:	4770      	bx	lr

0800296e <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800296e:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8002970:	68c2      	ldr	r2, [r0, #12]
 8002972:	6844      	ldr	r4, [r0, #4]
 8002974:	1055      	asrs	r5, r2, #1
    virtual void execute(T1 t1)
 8002976:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8002978:	eb04 0062 	add.w	r0, r4, r2, asr #1
 800297c:	07d2      	lsls	r2, r2, #31
 800297e:	bf48      	it	mi
 8002980:	5962      	ldrmi	r2, [r4, r5]
 8002982:	689b      	ldr	r3, [r3, #8]
    }
 8002984:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8002986:	bf48      	it	mi
 8002988:	58d3      	ldrmi	r3, [r2, r3]
 800298a:	4718      	bx	r3

0800298c <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800298c:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 800298e:	6840      	ldr	r0, [r0, #4]
 8002990:	b130      	cbz	r0, 80029a0 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	b91a      	cbnz	r2, 800299e <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 8002996:	68d8      	ldr	r0, [r3, #12]
 8002998:	f000 0001 	and.w	r0, r0, #1
 800299c:	4770      	bx	lr
 800299e:	2001      	movs	r0, #1
    }
 80029a0:	4770      	bx	lr

080029a2 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 80029a2:	b510      	push	{r4, lr}
 80029a4:	214c      	movs	r1, #76	@ 0x4c
 80029a6:	4604      	mov	r4, r0
 80029a8:	f010 fcb6 	bl	8013318 <_ZdlPvj>
 80029ac:	4620      	mov	r0, r4
 80029ae:	bd10      	pop	{r4, pc}

080029b0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80029b0:	b510      	push	{r4, lr}
 80029b2:	2110      	movs	r1, #16
 80029b4:	4604      	mov	r4, r0
 80029b6:	f010 fcaf 	bl	8013318 <_ZdlPvj>
 80029ba:	4620      	mov	r0, r4
 80029bc:	bd10      	pop	{r4, pc}

080029be <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 80029be:	b510      	push	{r4, lr}
}
 80029c0:	f44f 71c2 	mov.w	r1, #388	@ 0x184
Screen1ViewBase::~Screen1ViewBase()
 80029c4:	4604      	mov	r4, r0
}
 80029c6:	f010 fca7 	bl	8013318 <_ZdlPvj>
 80029ca:	4620      	mov	r0, r4
 80029cc:	bd10      	pop	{r4, pc}

080029ce <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    virtual void invalidateContent() const
 80029ce:	b508      	push	{r3, lr}
        Widget::invalidateContent();
 80029d0:	f7ff fc3d 	bl	800224e <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 80029d4:	bd08      	pop	{r3, pc}
	...

080029d8 <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80029d8:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 80029da:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80029dc:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80029de:	4b12      	ldr	r3, [pc, #72]	@ (8002a28 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
 80029e0:	681b      	ldr	r3, [r3, #0]
    virtual void setBaselineY(int16_t baselineY)
 80029e2:	4604      	mov	r4, r0
        setY(baselineY - getTypedText().getFont()->getBaseline());
 80029e4:	b28d      	uxth	r5, r1
 80029e6:	b92b      	cbnz	r3, 80029f4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 80029e8:	4b10      	ldr	r3, [pc, #64]	@ (8002a2c <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 80029ea:	4a11      	ldr	r2, [pc, #68]	@ (8002a30 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 80029ec:	216c      	movs	r1, #108	@ 0x6c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80029ee:	4811      	ldr	r0, [pc, #68]	@ (8002a34 <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 80029f0:	f010 fcc0 	bl	8013374 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 80029f4:	4910      	ldr	r1, [pc, #64]	@ (8002a38 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 80029f6:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80029f8:	8809      	ldrh	r1, [r1, #0]
 80029fa:	4291      	cmp	r1, r2
 80029fc:	d803      	bhi.n	8002a06 <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 80029fe:	4b0f      	ldr	r3, [pc, #60]	@ (8002a3c <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8002a00:	4a0b      	ldr	r2, [pc, #44]	@ (8002a30 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 8002a02:	216d      	movs	r1, #109	@ 0x6d
 8002a04:	e7f3      	b.n	80029ee <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 8002a06:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8002a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a40 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002a12:	6803      	ldr	r3, [r0, #0]
 8002a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a16:	4798      	blx	r3
 8002a18:	1a29      	subs	r1, r5, r0
 8002a1a:	4633      	mov	r3, r6
 8002a1c:	4620      	mov	r0, r4
 8002a1e:	b209      	sxth	r1, r1
    }
 8002a20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8002a24:	4718      	bx	r3
 8002a26:	bf00      	nop
 8002a28:	200126a8 	.word	0x200126a8
 8002a2c:	08015238 	.word	0x08015238
 8002a30:	0801527a 	.word	0x0801527a
 8002a34:	080152b5 	.word	0x080152b5
 8002a38:	200126ac 	.word	0x200126ac
 8002a3c:	080152fc 	.word	0x080152fc
 8002a40:	200126b0 	.word	0x200126b0

08002a44 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &button1)
 8002a44:	306c      	adds	r0, #108	@ 0x6c
 8002a46:	4288      	cmp	r0, r1
{
 8002a48:	b508      	push	{r3, lr}
    if (&src == &button1)
 8002a4a:	d105      	bne.n	8002a58 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x14>
    virtual ~Screen1ViewBase();
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8002a4c:	f00a f8fa 	bl	800cc44 <_ZN8touchgfx11Application11getInstanceEv>
        //Interaction1
        //When button1 clicked change screen to Screen2
        //Go to Screen2 with no screen transition
        application().gotoScreen2ScreenNoTransition();
    }
}
 8002a50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        application().gotoScreen2ScreenNoTransition();
 8002a54:	f7ff bed2 	b.w	80027fc <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>
}
 8002a58:	bd08      	pop	{r3, pc}

08002a5a <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a60:	e9c0 2100 	strd	r2, r1, [r0]
              text(0)
 8002a64:	6082      	str	r2, [r0, #8]
    }
 8002a66:	4770      	bx	lr

08002a68 <_ZN8touchgfx8Drawable5setXYEss>:
    void setXY(int16_t x, int16_t y)
 8002a68:	b570      	push	{r4, r5, r6, lr}
        setX(x);
 8002a6a:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8002a6c:	4604      	mov	r4, r0
        setX(x);
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setXY(int16_t x, int16_t y)
 8002a70:	4615      	mov	r5, r2
        setX(x);
 8002a72:	4798      	blx	r3
        setY(y);
 8002a74:	6823      	ldr	r3, [r4, #0]
 8002a76:	4629      	mov	r1, r5
 8002a78:	4620      	mov	r0, r4
 8002a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 8002a7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8002a80:	4718      	bx	r3
	...

08002a84 <_ZN8touchgfx6WidgetC1Ev>:
 8002a84:	2200      	movs	r2, #0
 8002a86:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8002a8a:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 8002a8e:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 8002a92:	e9c0 2207 	strd	r2, r2, [r0, #28]
          touchable(false),
 8002a96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a9a:	8482      	strh	r2, [r0, #36]	@ 0x24
class Widget : public Drawable
 8002a9c:	4a01      	ldr	r2, [pc, #4]	@ (8002aa4 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8002a9e:	6002      	str	r2, [r0, #0]
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	08015390 	.word	0x08015390

08002aa8 <_ZN8touchgfx8TextAreaC1Ev>:
    TextArea()
 8002aa8:	b510      	push	{r4, lr}
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8002aaa:	2226      	movs	r2, #38	@ 0x26
    TextArea()
 8002aac:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8002aae:	2100      	movs	r1, #0
 8002ab0:	f010 fe67 	bl	8013782 <memset>
 8002ab4:	4620      	mov	r0, r4
 8002ab6:	f7ff ffe5 	bl	8002a84 <_ZN8touchgfx6WidgetC1Ev>
 8002aba:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae4 <_ZN8touchgfx8TextAreaC1Ev+0x3c>)
 8002abc:	6023      	str	r3, [r4, #0]
        : typedTextId(id)
 8002abe:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae8 <_ZN8touchgfx8TextAreaC1Ev+0x40>)
 8002ac0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002ac2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ac6:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8002ac8:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 8002acc:	2300      	movs	r3, #0
 8002ace:	e9c4 320c 	strd	r3, r2, [r4, #48]	@ 0x30
 8002ad2:	8723      	strh	r3, [r4, #56]	@ 0x38
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8002ad4:	f04f 32ff 	mov.w	r2, #4294967295
              text(0)
 8002ad8:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
 8002adc:	63e3      	str	r3, [r4, #60]	@ 0x3c
    }
 8002ade:	4620      	mov	r0, r4
 8002ae0:	bd10      	pop	{r4, pc}
 8002ae2:	bf00      	nop
 8002ae4:	080159ec 	.word	0x080159ec
 8002ae8:	08014c08 	.word	0x08014c08

08002aec <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
 8002aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002af0:	4604      	mov	r4, r0
 8002af2:	b089      	sub	sp, #36	@ 0x24
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 8002af4:	4626      	mov	r6, r4
        : presenter(0)
 8002af6:	2500      	movs	r5, #0
 8002af8:	f00b fbc6 	bl	800e288 <_ZN8touchgfx6ScreenC1Ev>
 8002afc:	4b83      	ldr	r3, [pc, #524]	@ (8002d0c <_ZN15Screen1ViewBaseC1Ev+0x220>)
 8002afe:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8002b00:	f846 3b40 	str.w	r3, [r6], #64
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8002b04:	4629      	mov	r1, r5
 8002b06:	2226      	movs	r2, #38	@ 0x26
 8002b08:	4630      	mov	r0, r6
 8002b0a:	f010 fe3a 	bl	8013782 <memset>
 8002b0e:	4630      	mov	r0, r6
 8002b10:	f7ff ffb8 	bl	8002a84 <_ZN8touchgfx6WidgetC1Ev>
 8002b14:	f104 0b6c 	add.w	fp, r4, #108	@ 0x6c
 8002b18:	4b7d      	ldr	r3, [pc, #500]	@ (8002d10 <_ZN15Screen1ViewBaseC1Ev+0x224>)
 8002b1a:	6423      	str	r3, [r4, #64]	@ 0x40
 8002b1c:	27ff      	movs	r7, #255	@ 0xff
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
        : Widget(), action(), pressed(false)
 8002b1e:	4629      	mov	r1, r5
 8002b20:	2226      	movs	r2, #38	@ 0x26
 8002b22:	f884 7066 	strb.w	r7, [r4, #102]	@ 0x66
        : color(col)
 8002b26:	66a5      	str	r5, [r4, #104]	@ 0x68
 8002b28:	4658      	mov	r0, fp
 8002b2a:	f010 fe2a 	bl	8013782 <memset>
 8002b2e:	4658      	mov	r0, fp
 8002b30:	f7ff ffa8 	bl	8002a84 <_ZN8touchgfx6WidgetC1Ev>
 */
class Button : public AbstractButton
{
public:
    Button()
        : AbstractButton(), up(), down(), alpha(255)
 8002b34:	4a77      	ldr	r2, [pc, #476]	@ (8002d14 <_ZN15Screen1ViewBaseC1Ev+0x228>)
 8002b36:	66e2      	str	r2, [r4, #108]	@ 0x6c
        touchable = touch;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	f104 08a0 	add.w	r8, r4, #160	@ 0xa0
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8002b3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b42:	f884 3090 	strb.w	r3, [r4, #144]	@ 0x90
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
 8002b46:	4629      	mov	r1, r5
 8002b48:	f8c4 5094 	str.w	r5, [r4, #148]	@ 0x94
 8002b4c:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
 8002b50:	f8a4 209a 	strh.w	r2, [r4, #154]	@ 0x9a
 8002b54:	f8a4 209c 	strh.w	r2, [r4, #156]	@ 0x9c
 8002b58:	f884 209e 	strb.w	r2, [r4, #158]	@ 0x9e
 8002b5c:	f8ad 2018 	strh.w	r2, [sp, #24]
 8002b60:	4640      	mov	r0, r8
 8002b62:	2226      	movs	r2, #38	@ 0x26
 8002b64:	f010 fe0d 	bl	8013782 <memset>
 8002b68:	4640      	mov	r0, r8
 8002b6a:	f7ff ff8b 	bl	8002a84 <_ZN8touchgfx6WidgetC1Ev>
 8002b6e:	4a6a      	ldr	r2, [pc, #424]	@ (8002d18 <_ZN15Screen1ViewBaseC1Ev+0x22c>)
 8002b70:	f8c4 20a0 	str.w	r2, [r4, #160]	@ 0xa0
 8002b74:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8002b78:	f8a4 20c6 	strh.w	r2, [r4, #198]	@ 0xc6
 8002b7c:	f104 0acc 	add.w	sl, r4, #204	@ 0xcc
    {
        Image::setBitmap(bmp);
 8002b80:	a906      	add	r1, sp, #24
 8002b82:	4640      	mov	r0, r8
        : Widget(), bitmap(bmp), alpha(255)
 8002b84:	f884 70c8 	strb.w	r7, [r4, #200]	@ 0xc8
        Image::setBitmap(bmp);
 8002b88:	f007 ff07 	bl	800a99a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002b8c:	f504 778a 	add.w	r7, r4, #276	@ 0x114
 8002b90:	4650      	mov	r0, sl
 8002b92:	f7ff ff89 	bl	8002aa8 <_ZN8touchgfx8TextAreaC1Ev>
        : TextArea()
 8002b96:	4638      	mov	r0, r7
 8002b98:	f7ff ff86 	bl	8002aa8 <_ZN8touchgfx8TextAreaC1Ev>
        : TextAreaWithWildcardBase(), wc1(0)
 8002b9c:	4a5f      	ldr	r2, [pc, #380]	@ (8002d1c <_ZN15Screen1ViewBaseC1Ev+0x230>)
 8002b9e:	f8c4 2114 	str.w	r2, [r4, #276]	@ 0x114
        : pobject(pObject), pmemfun(pmemfun_1)
 8002ba2:	4a5f      	ldr	r2, [pc, #380]	@ (8002d20 <_ZN15Screen1ViewBaseC1Ev+0x234>)
 8002ba4:	f8c4 515c 	str.w	r5, [r4, #348]	@ 0x15c
 8002ba8:	e9c4 245d 	strd	r2, r4, [r4, #372]	@ 0x174
 8002bac:	4a5d      	ldr	r2, [pc, #372]	@ (8002d24 <_ZN15Screen1ViewBaseC1Ev+0x238>)
        setXY(x, y);
 8002bae:	4629      	mov	r1, r5
 8002bb0:	e9c4 255f 	strd	r2, r5, [r4, #380]	@ 0x17c
 8002bb4:	4630      	mov	r0, r6
 8002bb6:	462a      	mov	r2, r5
 8002bb8:	f7ff ff56 	bl	8002a68 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8002bbc:	4630      	mov	r0, r6
 8002bbe:	21f0      	movs	r1, #240	@ 0xf0
 8002bc0:	f7ff faa2 	bl	8002108 <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 8002bc4:	4630      	mov	r0, r6
 8002bc6:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8002bca:	f7ff fa9f 	bl	800210c <_ZN8touchgfx8Drawable9setHeightEs>
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8002bce:	f104 0904 	add.w	r9, r4, #4
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8002bd2:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8002bd6:	4631      	mov	r1, r6
 8002bd8:	66a2      	str	r2, [r4, #104]	@ 0x68
 8002bda:	4648      	mov	r0, r9
 8002bdc:	f006 f838 	bl	8008c50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    button1.setXY(20, 171);
 8002be0:	22ab      	movs	r2, #171	@ 0xab
 8002be2:	2114      	movs	r1, #20
 8002be4:	4658      	mov	r0, fp
 8002be6:	f7ff ff3f 	bl	8002a68 <_ZN8touchgfx8Drawable5setXYEss>
 8002bea:	2207      	movs	r2, #7
 8002bec:	f8ad 2014 	strh.w	r2, [sp, #20]
 8002bf0:	f8ad 2018 	strh.w	r2, [sp, #24]
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_START_BUTTON_VECTOR_ID), touchgfx::Bitmap(BITMAP_START_BUTTON_VECTOR_ID));
 8002bf4:	a905      	add	r1, sp, #20
 8002bf6:	aa06      	add	r2, sp, #24
 8002bf8:	4658      	mov	r0, fp
 8002bfa:	f007 fd95 	bl	800a728 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 8002bfe:	f504 72ba 	add.w	r2, r4, #372	@ 0x174
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 8002c02:	f8c4 2094 	str.w	r2, [r4, #148]	@ 0x94
 8002c06:	4659      	mov	r1, fp
 8002c08:	4648      	mov	r0, r9
 8002c0a:	f006 f821 	bl	8008c50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    background.setXY(28, 113);
 8002c0e:	2271      	movs	r2, #113	@ 0x71
 8002c10:	4640      	mov	r0, r8
 8002c12:	211c      	movs	r1, #28
 8002c14:	f7ff ff28 	bl	8002a68 <_ZN8touchgfx8Drawable5setXYEss>
    background.setBitmap(touchgfx::Bitmap(BITMAP_BACKGROUND_ID));
 8002c18:	4640      	mov	r0, r8
 8002c1a:	a906      	add	r1, sp, #24
 8002c1c:	f8ad 5018 	strh.w	r5, [sp, #24]
 8002c20:	f007 febb 	bl	800a99a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002c24:	4641      	mov	r1, r8
 8002c26:	4648      	mov	r0, r9
 8002c28:	f006 f812 	bl	8008c50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textArea1.setXY(34, 125);
 8002c2c:	227d      	movs	r2, #125	@ 0x7d
 8002c2e:	2122      	movs	r1, #34	@ 0x22
 8002c30:	4650      	mov	r0, sl
 8002c32:	f7ff ff19 	bl	8002a68 <_ZN8touchgfx8Drawable5setXYEss>
        boundingArea = calculateBoundingArea();
 8002c36:	466e      	mov	r6, sp
        color = newColor;
 8002c38:	4a3b      	ldr	r2, [pc, #236]	@ (8002d28 <_ZN15Screen1ViewBaseC1Ev+0x23c>)
 8002c3a:	f8c4 20fc 	str.w	r2, [r4, #252]	@ 0xfc
        linespace = space;
 8002c3e:	f8a4 5100 	strh.w	r5, [r4, #256]	@ 0x100
        boundingArea = calculateBoundingArea();
 8002c42:	4651      	mov	r1, sl
 8002c44:	4630      	mov	r0, r6
 8002c46:	f007 fa69 	bl	800a11c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8002c4a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8002c4e:	f504 7c84 	add.w	ip, r4, #264	@ 0x108
 8002c52:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8002c56:	f8df 80f8 	ldr.w	r8, [pc, #248]	@ 8002d50 <_ZN15Screen1ViewBaseC1Ev+0x264>
 8002c5a:	f8ad 501c 	strh.w	r5, [sp, #28]
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_BJAD));
 8002c5e:	a906      	add	r1, sp, #24
 8002c60:	4650      	mov	r0, sl
 8002c62:	f8cd 8018 	str.w	r8, [sp, #24]
 8002c66:	f007 fd01 	bl	800a66c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8002c6a:	4651      	mov	r1, sl
 8002c6c:	4648      	mov	r0, r9
 8002c6e:	f005 ffef 	bl	8008c50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    screen1point.setXY(133, 125);
 8002c72:	227d      	movs	r2, #125	@ 0x7d
 8002c74:	2185      	movs	r1, #133	@ 0x85
 8002c76:	4638      	mov	r0, r7
 8002c78:	f7ff fef6 	bl	8002a68 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8002c7c:	4a2b      	ldr	r2, [pc, #172]	@ (8002d2c <_ZN15Screen1ViewBaseC1Ev+0x240>)
 8002c7e:	f8c4 2144 	str.w	r2, [r4, #324]	@ 0x144
        boundingArea = calculateBoundingArea();
 8002c82:	f8d4 2114 	ldr.w	r2, [r4, #276]	@ 0x114
        linespace = space;
 8002c86:	f8a4 5148 	strh.w	r5, [r4, #328]	@ 0x148
        boundingArea = calculateBoundingArea();
 8002c8a:	f8d2 2084 	ldr.w	r2, [r2, #132]	@ 0x84
 8002c8e:	4639      	mov	r1, r7
 8002c90:	4630      	mov	r0, r6
 8002c92:	4790      	blx	r2
 8002c94:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8002c98:	f504 75a8 	add.w	r5, r4, #336	@ 0x150
 8002c9c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8002ca0:	4a23      	ldr	r2, [pc, #140]	@ (8002d30 <_ZN15Screen1ViewBaseC1Ev+0x244>)
 8002ca2:	6812      	ldr	r2, [r2, #0]
    Unicode::snprintf(screen1pointBuffer, SCREEN1POINT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_PAAG).getText());
 8002ca4:	f504 75b0 	add.w	r5, r4, #352	@ 0x160
 8002ca8:	2301      	movs	r3, #1
 8002caa:	b92a      	cbnz	r2, 8002cb8 <_ZN15Screen1ViewBaseC1Ev+0x1cc>
 8002cac:	4b21      	ldr	r3, [pc, #132]	@ (8002d34 <_ZN15Screen1ViewBaseC1Ev+0x248>)
 8002cae:	4a22      	ldr	r2, [pc, #136]	@ (8002d38 <_ZN15Screen1ViewBaseC1Ev+0x24c>)
 8002cb0:	2160      	movs	r1, #96	@ 0x60
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8002cb2:	4822      	ldr	r0, [pc, #136]	@ (8002d3c <_ZN15Screen1ViewBaseC1Ev+0x250>)
 8002cb4:	f010 fb5e 	bl	8013374 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8002cb8:	4a21      	ldr	r2, [pc, #132]	@ (8002d40 <_ZN15Screen1ViewBaseC1Ev+0x254>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8002cba:	8812      	ldrh	r2, [r2, #0]
 8002cbc:	2a01      	cmp	r2, #1
 8002cbe:	d803      	bhi.n	8002cc8 <_ZN15Screen1ViewBaseC1Ev+0x1dc>
 8002cc0:	4b20      	ldr	r3, [pc, #128]	@ (8002d44 <_ZN15Screen1ViewBaseC1Ev+0x258>)
 8002cc2:	4a1d      	ldr	r2, [pc, #116]	@ (8002d38 <_ZN15Screen1ViewBaseC1Ev+0x24c>)
 8002cc4:	2161      	movs	r1, #97	@ 0x61
 8002cc6:	e7f4      	b.n	8002cb2 <_ZN15Screen1ViewBaseC1Ev+0x1c6>
        return texts->getText(typedTextId);
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4b1f      	ldr	r3, [pc, #124]	@ (8002d48 <_ZN15Screen1ViewBaseC1Ev+0x25c>)
 8002ccc:	6818      	ldr	r0, [r3, #0]
 8002cce:	f000 fd19 	bl	8003704 <_ZNK8touchgfx5Texts7getTextEt>
 8002cd2:	4a1e      	ldr	r2, [pc, #120]	@ (8002d4c <_ZN15Screen1ViewBaseC1Ev+0x260>)
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	210a      	movs	r1, #10
 8002cd8:	4628      	mov	r0, r5
 8002cda:	f00d fbe5 	bl	80104a8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    screen1point.resizeToCurrentText();
 8002cde:	4638      	mov	r0, r7
        wc1 = value;
 8002ce0:	f8c4 515c 	str.w	r5, [r4, #348]	@ 0x15c
 8002ce4:	f007 fca2 	bl	800a62c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
 8002ce8:	2302      	movs	r3, #2
    screen1point.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9WWM));
 8002cea:	a906      	add	r1, sp, #24
 8002cec:	4638      	mov	r0, r7
 8002cee:	f8ad 301c 	strh.w	r3, [sp, #28]
 8002cf2:	f8cd 8018 	str.w	r8, [sp, #24]
 8002cf6:	f007 fcb9 	bl	800a66c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8002cfa:	4648      	mov	r0, r9
 8002cfc:	4639      	mov	r1, r7
 8002cfe:	f005 ffa7 	bl	8008c50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8002d02:	4620      	mov	r0, r4
 8002d04:	b009      	add	sp, #36	@ 0x24
 8002d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d0a:	bf00      	nop
 8002d0c:	080154a0 	.word	0x080154a0
 8002d10:	08015a7c 	.word	0x08015a7c
 8002d14:	08015ae4 	.word	0x08015ae4
 8002d18:	08015b58 	.word	0x08015b58
 8002d1c:	080153f8 	.word	0x080153f8
 8002d20:	08015488 	.word	0x08015488
 8002d24:	08002a45 	.word	0x08002a45
 8002d28:	ffeb1313 	.word	0xffeb1313
 8002d2c:	ffe62525 	.word	0xffe62525
 8002d30:	200126a8 	.word	0x200126a8
 8002d34:	08015238 	.word	0x08015238
 8002d38:	0801533a 	.word	0x0801533a
 8002d3c:	080152b5 	.word	0x080152b5
 8002d40:	200126ac 	.word	0x200126ac
 8002d44:	080152fc 	.word	0x080152fc
 8002d48:	200126b4 	.word	0x200126b4
 8002d4c:	08015385 	.word	0x08015385
 8002d50:	08014c08 	.word	0x08014c08

08002d54 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 8002d54:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8002d56:	4770      	bx	lr

08002d58 <_ZN15Screen2ViewBase15ExitFromScreen2Ev>:
     * Virtual Action Handlers
     */
    virtual void ExitFromScreen2()
    {
        // Override and implement this function in Screen2
    }
 8002d58:	4770      	bx	lr

08002d5a <_ZN15Screen2ViewBaseD1Ev>:
}

Screen2ViewBase::~Screen2ViewBase()
{

}
 8002d5a:	4770      	bx	lr

08002d5c <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{

}
 8002d5c:	4770      	bx	lr

08002d5e <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8002d5e:	4770      	bx	lr

08002d60 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEED1Ev>:
 * The position of the icon can be adjusted with setIconXY.
 *
 * @see AbstractButtonContainer
 */
template <class T>
class IconButtonStyle : public T
 8002d60:	4770      	bx	lr

08002d62 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8002d62:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8002d64:	68c2      	ldr	r2, [r0, #12]
 8002d66:	6844      	ldr	r4, [r0, #4]
 8002d68:	1055      	asrs	r5, r2, #1
    virtual void execute(T1 t1)
 8002d6a:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 8002d6c:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8002d70:	07d2      	lsls	r2, r2, #31
 8002d72:	bf48      	it	mi
 8002d74:	5962      	ldrmi	r2, [r4, r5]
 8002d76:	689b      	ldr	r3, [r3, #8]
    }
 8002d78:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 8002d7a:	bf48      	it	mi
 8002d7c:	58d3      	ldrmi	r3, [r2, r3]
 8002d7e:	4718      	bx	r3

08002d80 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 8002d80:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8002d82:	6840      	ldr	r0, [r0, #4]
 8002d84:	b130      	cbz	r0, 8002d94 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x14>
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	b91a      	cbnz	r2, 8002d92 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x12>
 8002d8a:	68d8      	ldr	r0, [r3, #12]
 8002d8c:	f000 0001 	and.w	r0, r0, #1
 8002d90:	4770      	bx	lr
 8002d92:	2001      	movs	r0, #1
    }
 8002d94:	4770      	bx	lr

08002d96 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:
     *
     * @note The user code must call invalidate() in order to update the display.
     */
    void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8002d96:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8002d9a:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
    {
        iconImage.setAlpha(T::getAlpha());
        T::handleAlphaUpdated();
    }
 8002d9e:	4770      	bx	lr

08002da0 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    virtual void handlePressedUpdated()
 8002da0:	4601      	mov	r1, r0
        iconImage.setBitmap(T::getPressed() ? iconPressed : iconReleased);
 8002da2:	3038      	adds	r0, #56	@ 0x38
 8002da4:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 8002da8:	b113      	cbz	r3, 8002db0 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x10>
 8002daa:	3136      	adds	r1, #54	@ 0x36
 8002dac:	f007 bdf5 	b.w	800a99a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8002db0:	3134      	adds	r1, #52	@ 0x34
 8002db2:	e7fb      	b.n	8002dac <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0xc>

08002db4 <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEED0Ev>:
class IconButtonStyle : public T
 8002db4:	b510      	push	{r4, lr}
 8002db6:	2164      	movs	r1, #100	@ 0x64
 8002db8:	4604      	mov	r4, r0
 8002dba:	f010 faad 	bl	8013318 <_ZdlPvj>
 8002dbe:	4620      	mov	r0, r4
 8002dc0:	bd10      	pop	{r4, pc}

08002dc2 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8002dc2:	b510      	push	{r4, lr}
 8002dc4:	2110      	movs	r1, #16
 8002dc6:	4604      	mov	r4, r0
 8002dc8:	f010 faa6 	bl	8013318 <_ZdlPvj>
 8002dcc:	4620      	mov	r0, r4
 8002dce:	bd10      	pop	{r4, pc}

08002dd0 <_ZN15Screen2ViewBaseD0Ev>:
Screen2ViewBase::~Screen2ViewBase()
 8002dd0:	b510      	push	{r4, lr}
}
 8002dd2:	f44f 7154 	mov.w	r1, #848	@ 0x350
Screen2ViewBase::~Screen2ViewBase()
 8002dd6:	4604      	mov	r4, r0
}
 8002dd8:	f010 fa9e 	bl	8013318 <_ZdlPvj>
 8002ddc:	4620      	mov	r0, r4
 8002dde:	bd10      	pop	{r4, pc}

08002de0 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
    /**
     * Executes the previously set action.
     *
     * @see setAction
     */
    virtual void executeAction()
 8002de0:	b510      	push	{r4, lr}
 8002de2:	4604      	mov	r4, r0
    {
        if (action && action->isValid())
 8002de4:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8002de6:	b150      	cbz	r0, 8002dfe <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1e>
 8002de8:	6803      	ldr	r3, [r0, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	4798      	blx	r3
 8002dee:	b130      	cbz	r0, 8002dfe <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1e>
        {
            action->execute(*this);
 8002df0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8002df2:	6803      	ldr	r3, [r0, #0]
 8002df4:	4621      	mov	r1, r4
 8002df6:	689b      	ldr	r3, [r3, #8]
        }
    }
 8002df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            action->execute(*this);
 8002dfc:	4718      	bx	r3
    }
 8002dfe:	bd10      	pop	{r4, pc}

08002e00 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
    {
        return clickEventType;
 8002e00:	790b      	ldrb	r3, [r1, #4]
     *
     * @param  event The click event.
     *
     * @see setAction, setPressed, getPressed
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8002e02:	b570      	push	{r4, r5, r6, lr}
        return pressed;
 8002e04:	f890 602c 	ldrb.w	r6, [r0, #44]	@ 0x2c
 8002e08:	4604      	mov	r4, r0
 8002e0a:	460d      	mov	r5, r1
    {
        bool wasPressed = getPressed();
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8002e0c:	b90b      	cbnz	r3, 8002e12 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x12>
 8002e0e:	b116      	cbz	r6, 8002e16 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x16>
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
        {
            executeAction();
        }
    }
 8002e10:	bd70      	pop	{r4, r5, r6, pc}
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8002e12:	2e00      	cmp	r6, #0
 8002e14:	d0fc      	beq.n	8002e10 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 8002e16:	fab3 f383 	clz	r3, r3
 8002e1a:	095b      	lsrs	r3, r3, #5
 8002e1c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
        handlePressedUpdated();
 8002e20:	6823      	ldr	r3, [r4, #0]
 8002e22:	4620      	mov	r0, r4
 8002e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e28:	4798      	blx	r3
            invalidate();
 8002e2a:	6823      	ldr	r3, [r4, #0]
 8002e2c:	4620      	mov	r0, r4
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	4798      	blx	r3
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
 8002e32:	2e00      	cmp	r6, #0
 8002e34:	d0ec      	beq.n	8002e10 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
 8002e36:	792b      	ldrb	r3, [r5, #4]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d1e9      	bne.n	8002e10 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
            executeAction();
 8002e3c:	6823      	ldr	r3, [r4, #0]
 8002e3e:	4620      	mov	r0, r4
 8002e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
    }
 8002e44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            executeAction();
 8002e48:	4718      	bx	r3

08002e4a <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void Screen2ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &flexButton1)
 8002e4a:	f500 73ba 	add.w	r3, r0, #372	@ 0x174
 8002e4e:	428b      	cmp	r3, r1
{
 8002e50:	b510      	push	{r4, lr}
 8002e52:	4604      	mov	r4, r0
    if (&src == &flexButton1)
 8002e54:	d109      	bne.n	8002e6a <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x20>

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8002e56:	f009 fef5 	bl	800cc44 <_ZN8touchgfx11Application11getInstanceEv>
    {
        //Interaction1
        //When flexButton1 clicked change screen to Screen1
        //Go to Screen1 with screen transition towards East
        application().gotoScreen1ScreenWipeTransitionEast();
 8002e5a:	f7ff fcbf 	bl	80027dc <_ZN23FrontendApplicationBase35gotoScreen1ScreenWipeTransitionEastEv>
    
        //Interaction2
        //When Interaction1 completed call virtual function
        //Call ExitFromScreen2
        ExitFromScreen2();
 8002e5e:	6823      	ldr	r3, [r4, #0]
 8002e60:	4620      	mov	r0, r4
 8002e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    }
}
 8002e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        ExitFromScreen2();
 8002e68:	4718      	bx	r3
}
 8002e6a:	bd10      	pop	{r4, pc}

08002e6c <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE14setIconBitmapsERKNS_6BitmapES5_>:
        iconReleased = newIconReleased;
 8002e6c:	880b      	ldrh	r3, [r1, #0]
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 8002e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        iconReleased = newIconReleased;
 8002e72:	8683      	strh	r3, [r0, #52]	@ 0x34
        iconPressed = newIconPressed;
 8002e74:	8813      	ldrh	r3, [r2, #0]
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 8002e76:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
        iconPressed = newIconPressed;
 8002e7a:	86c3      	strh	r3, [r0, #54]	@ 0x36
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 8002e7c:	4604      	mov	r4, r0
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 8002e7e:	4610      	mov	r0, r2
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 8002e80:	4690      	mov	r8, r2
        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 8002e82:	f00d fbcb 	bl	801061c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8002e86:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8002e8a:	4607      	mov	r7, r0
 8002e8c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8002e90:	4640      	mov	r0, r8
 8002e92:	f3c3 064f 	ubfx	r6, r3, #1, #16
 8002e96:	f00d fbf5 	bl	8010684 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8002e9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e9e:	f3c5 054f 	ubfx	r5, r5, #1, #16
 8002ea2:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8002ea6:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8002eaa:	eba6 0260 	sub.w	r2, r6, r0, asr #1
 8002eae:	eba5 0167 	sub.w	r1, r5, r7, asr #1
 8002eb2:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8002eb6:	b212      	sxth	r2, r2
 8002eb8:	b209      	sxth	r1, r1
 8002eba:	f7ff fdd5 	bl	8002a68 <_ZN8touchgfx8Drawable5setXYEss>
        handlePressedUpdated();
 8002ebe:	6823      	ldr	r3, [r4, #0]
 8002ec0:	4620      	mov	r0, r4
 8002ec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
    }
 8002ec6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        handlePressedUpdated();
 8002eca:	4718      	bx	r3

08002ecc <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8002ecc:	b570      	push	{r4, r5, r6, lr}
 8002ece:	4604      	mov	r4, r0
 8002ed0:	461d      	mov	r5, r3
 8002ed2:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 8002ed6:	f7ff fdc7 	bl	8002a68 <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8002eda:	6823      	ldr	r3, [r4, #0]
 8002edc:	4629      	mov	r1, r5
 8002ede:	4620      	mov	r0, r4
 8002ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee2:	4798      	blx	r3
        setHeight(height);
 8002ee4:	6823      	ldr	r3, [r4, #0]
 8002ee6:	4631      	mov	r1, r6
 8002ee8:	4620      	mov	r0, r4
 8002eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 8002eec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 8002ef0:	4718      	bx	r3
	...

08002ef4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
    Image(const Bitmap& bmp = Bitmap())
 8002ef4:	b538      	push	{r3, r4, r5, lr}
        : Widget(), bitmap(bmp), alpha(255)
 8002ef6:	2226      	movs	r2, #38	@ 0x26
    Image(const Bitmap& bmp = Bitmap())
 8002ef8:	4604      	mov	r4, r0
 8002efa:	460d      	mov	r5, r1
        : Widget(), bitmap(bmp), alpha(255)
 8002efc:	2100      	movs	r1, #0
 8002efe:	f010 fc40 	bl	8013782 <memset>
 8002f02:	4620      	mov	r0, r4
 8002f04:	f7ff fdbe 	bl	8002a84 <_ZN8touchgfx6WidgetC1Ev>
 8002f08:	4b06      	ldr	r3, [pc, #24]	@ (8002f24 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
 8002f0a:	6023      	str	r3, [r4, #0]
 8002f0c:	882b      	ldrh	r3, [r5, #0]
 8002f0e:	84e3      	strh	r3, [r4, #38]	@ 0x26
 8002f10:	23ff      	movs	r3, #255	@ 0xff
        Image::setBitmap(bmp);
 8002f12:	4620      	mov	r0, r4
        : Widget(), bitmap(bmp), alpha(255)
 8002f14:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
        Image::setBitmap(bmp);
 8002f18:	4629      	mov	r1, r5
 8002f1a:	f007 fd3e 	bl	800a99a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 8002f1e:	4620      	mov	r0, r4
 8002f20:	bd38      	pop	{r3, r4, r5, pc}
 8002f22:	bf00      	nop
 8002f24:	08015b58 	.word	0x08015b58

08002f28 <_ZN15Screen2ViewBaseC1Ev>:
Screen2ViewBase::Screen2ViewBase() :
 8002f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f2c:	4604      	mov	r4, r0
 8002f2e:	b095      	sub	sp, #84	@ 0x54
    flexButtonCallback(this, &Screen2ViewBase::flexButtonCallbackHandler)
 8002f30:	46a0      	mov	r8, r4
 8002f32:	2500      	movs	r5, #0
 8002f34:	f00b f9a8 	bl	800e288 <_ZN8touchgfx6ScreenC1Ev>
 8002f38:	4bd3      	ldr	r3, [pc, #844]	@ (8003288 <_ZN15Screen2ViewBaseC1Ev+0x360>)
 8002f3a:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8002f3c:	f848 3b40 	str.w	r3, [r8], #64
        : Widget(), alpha(255), color(0)
 8002f40:	2226      	movs	r2, #38	@ 0x26
 8002f42:	4629      	mov	r1, r5
 8002f44:	4640      	mov	r0, r8
 8002f46:	f010 fc1c 	bl	8013782 <memset>
 8002f4a:	4640      	mov	r0, r8
 8002f4c:	f7ff fd9a 	bl	8002a84 <_ZN8touchgfx6WidgetC1Ev>
 8002f50:	4bce      	ldr	r3, [pc, #824]	@ (800328c <_ZN15Screen2ViewBaseC1Ev+0x364>)
 8002f52:	6423      	str	r3, [r4, #64]	@ 0x40
 8002f54:	f104 0b6c 	add.w	fp, r4, #108	@ 0x6c
 8002f58:	23ff      	movs	r3, #255	@ 0xff
 8002f5a:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8002f5e:	f104 0a98 	add.w	sl, r4, #152	@ 0x98
 8002f62:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
 8002f66:	a912      	add	r1, sp, #72	@ 0x48
 8002f68:	66a5      	str	r5, [r4, #104]	@ 0x68
 8002f6a:	4658      	mov	r0, fp
 8002f6c:	f104 09c4 	add.w	r9, r4, #196	@ 0xc4
 8002f70:	f8ad 6048 	strh.w	r6, [sp, #72]	@ 0x48
 8002f74:	f7ff ffbe 	bl	8002ef4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8002f78:	a912      	add	r1, sp, #72	@ 0x48
 8002f7a:	4650      	mov	r0, sl
 8002f7c:	f8ad 6048 	strh.w	r6, [sp, #72]	@ 0x48
 8002f80:	f7ff ffb8 	bl	8002ef4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8002f84:	a912      	add	r1, sp, #72	@ 0x48
 8002f86:	4648      	mov	r0, r9
 8002f88:	f8ad 6048 	strh.w	r6, [sp, #72]	@ 0x48
 8002f8c:	f7ff ffb2 	bl	8002ef4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8002f90:	f104 03f0 	add.w	r3, r4, #240	@ 0xf0
 8002f94:	a912      	add	r1, sp, #72	@ 0x48
 8002f96:	4618      	mov	r0, r3
 8002f98:	9302      	str	r3, [sp, #8]
 8002f9a:	f8ad 6048 	strh.w	r6, [sp, #72]	@ 0x48
 8002f9e:	f7ff ffa9 	bl	8002ef4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8002fa2:	f504 738e 	add.w	r3, r4, #284	@ 0x11c
 8002fa6:	a912      	add	r1, sp, #72	@ 0x48
 8002fa8:	4618      	mov	r0, r3
 8002faa:	9303      	str	r3, [sp, #12]
 8002fac:	f8ad 6048 	strh.w	r6, [sp, #72]	@ 0x48
 8002fb0:	f7ff ffa0 	bl	8002ef4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8002fb4:	f504 73a4 	add.w	r3, r4, #328	@ 0x148
 8002fb8:	a912      	add	r1, sp, #72	@ 0x48
 8002fba:	4618      	mov	r0, r3
 8002fbc:	9304      	str	r3, [sp, #16]
 8002fbe:	f8ad 6048 	strh.w	r6, [sp, #72]	@ 0x48
 8002fc2:	f7ff ff97 	bl	8002ef4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8002fc6:	f504 73ba 	add.w	r3, r4, #372	@ 0x174
 8002fca:	9305      	str	r3, [sp, #20]
        : pressed(false), alpha(255), action(0)
 8002fcc:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8002fd0:	f8a4 31a0 	strh.w	r3, [r4, #416]	@ 0x1a0
        touchable = touch;
 8002fd4:	f240 1301 	movw	r3, #257	@ 0x101
 8002fd8:	f8a4 3198 	strh.w	r3, [r4, #408]	@ 0x198
        : T()
 8002fdc:	4bac      	ldr	r3, [pc, #688]	@ (8003290 <_ZN15Screen2ViewBaseC1Ev+0x368>)
 8002fde:	f8c4 3174 	str.w	r3, [r4, #372]	@ 0x174
 8002fe2:	f504 77d6 	add.w	r7, r4, #428	@ 0x1ac
 8002fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fea:	f8c4 31a8 	str.w	r3, [r4, #424]	@ 0x1a8
 8002fee:	a912      	add	r1, sp, #72	@ 0x48
 8002ff0:	4638      	mov	r0, r7
        : x(0), y(0), width(0), height(0)
 8002ff2:	e9c4 555e 	strd	r5, r5, [r4, #376]	@ 0x178
 8002ff6:	e9c4 5560 	strd	r5, r5, [r4, #384]	@ 0x180
          nextSibling(0),
 8002ffa:	e9c4 5562 	strd	r5, r5, [r4, #392]	@ 0x188
          cachedAbsX(0),
 8002ffe:	e9c4 5564 	strd	r5, r5, [r4, #400]	@ 0x190
          firstChild(0)
 8003002:	f8c4 519c 	str.w	r5, [r4, #412]	@ 0x19c
 8003006:	f8c4 51a4 	str.w	r5, [r4, #420]	@ 0x1a4
 800300a:	f8ad 3048 	strh.w	r3, [sp, #72]	@ 0x48
 800300e:	f7ff ff71 	bl	8002ef4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        T::add(iconImage);
 8003012:	4639      	mov	r1, r7
 8003014:	9805      	ldr	r0, [sp, #20]
 8003016:	f005 fe1b 	bl	8008c50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800301a:	f504 73ec 	add.w	r3, r4, #472	@ 0x1d8
 800301e:	4618      	mov	r0, r3
 8003020:	f504 7701 	add.w	r7, r4, #516	@ 0x204
 8003024:	a912      	add	r1, sp, #72	@ 0x48
 8003026:	9306      	str	r3, [sp, #24]
 8003028:	f8ad 6048 	strh.w	r6, [sp, #72]	@ 0x48
 800302c:	f7ff ff62 	bl	8002ef4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8003030:	2226      	movs	r2, #38	@ 0x26
 8003032:	4629      	mov	r1, r5
 8003034:	4638      	mov	r0, r7
 8003036:	f010 fba4 	bl	8013782 <memset>
 800303a:	4638      	mov	r0, r7
 800303c:	f7ff fd22 	bl	8002a84 <_ZN8touchgfx6WidgetC1Ev>
 8003040:	4b94      	ldr	r3, [pc, #592]	@ (8003294 <_ZN15Screen2ViewBaseC1Ev+0x36c>)
 8003042:	f8c4 322c 	str.w	r3, [r4, #556]	@ 0x22c
 8003046:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800304a:	f04f 33ff 	mov.w	r3, #4294967295
              text(0)
 800304e:	e9c4 3591 	strd	r3, r5, [r4, #580]	@ 0x244
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8003052:	f8c4 2238 	str.w	r2, [r4, #568]	@ 0x238
 8003056:	f504 7314 	add.w	r3, r4, #592	@ 0x250
        : TextAreaWithWildcardBase(), wc1(0)
 800305a:	4a8f      	ldr	r2, [pc, #572]	@ (8003298 <_ZN15Screen2ViewBaseC1Ev+0x370>)
 800305c:	f8c4 2204 	str.w	r2, [r4, #516]	@ 0x204
 8003060:	f8a4 6230 	strh.w	r6, [r4, #560]	@ 0x230
 8003064:	a912      	add	r1, sp, #72	@ 0x48
 8003066:	4618      	mov	r0, r3
        : color(col)
 8003068:	f8c4 5234 	str.w	r5, [r4, #564]	@ 0x234
 800306c:	f8a4 523c 	strh.w	r5, [r4, #572]	@ 0x23c
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003070:	f8c4 5240 	str.w	r5, [r4, #576]	@ 0x240
 8003074:	f8c4 524c 	str.w	r5, [r4, #588]	@ 0x24c
 8003078:	9307      	str	r3, [sp, #28]
 800307a:	f8ad 6048 	strh.w	r6, [sp, #72]	@ 0x48
 800307e:	f7ff ff39 	bl	8002ef4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003082:	f504 731f 	add.w	r3, r4, #636	@ 0x27c
 8003086:	a912      	add	r1, sp, #72	@ 0x48
 8003088:	4618      	mov	r0, r3
 800308a:	9308      	str	r3, [sp, #32]
 800308c:	f8ad 6048 	strh.w	r6, [sp, #72]	@ 0x48
 8003090:	f7ff ff30 	bl	8002ef4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8003094:	f504 732a 	add.w	r3, r4, #680	@ 0x2a8
 8003098:	a912      	add	r1, sp, #72	@ 0x48
 800309a:	4618      	mov	r0, r3
 800309c:	9309      	str	r3, [sp, #36]	@ 0x24
 800309e:	f8ad 6048 	strh.w	r6, [sp, #72]	@ 0x48
 80030a2:	f7ff ff27 	bl	8002ef4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80030a6:	f504 7335 	add.w	r3, r4, #724	@ 0x2d4
 80030aa:	a912      	add	r1, sp, #72	@ 0x48
 80030ac:	4618      	mov	r0, r3
 80030ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80030b0:	f8ad 6048 	strh.w	r6, [sp, #72]	@ 0x48
 80030b4:	f7ff ff1e 	bl	8002ef4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 80030b8:	f504 7340 	add.w	r3, r4, #768	@ 0x300
 80030bc:	a912      	add	r1, sp, #72	@ 0x48
 80030be:	4618      	mov	r0, r3
 80030c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80030c2:	f8ad 6048 	strh.w	r6, [sp, #72]	@ 0x48
 80030c6:	f7ff ff15 	bl	8002ef4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        : pobject(pObject), pmemfun(pmemfun_1)
 80030ca:	4b74      	ldr	r3, [pc, #464]	@ (800329c <_ZN15Screen2ViewBaseC1Ev+0x374>)
 80030cc:	e9c4 34d0 	strd	r3, r4, [r4, #832]	@ 0x340
 80030d0:	4b73      	ldr	r3, [pc, #460]	@ (80032a0 <_ZN15Screen2ViewBaseC1Ev+0x378>)
 80030d2:	e9c4 35d2 	strd	r3, r5, [r4, #840]	@ 0x348
    __background.setPosition(0, 0, 240, 320);
 80030d6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80030da:	462a      	mov	r2, r5
 80030dc:	4640      	mov	r0, r8
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	4629      	mov	r1, r5
 80030e2:	23f0      	movs	r3, #240	@ 0xf0
 80030e4:	1d26      	adds	r6, r4, #4
 80030e6:	f7ff fef1 	bl	8002ecc <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 80030ea:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 80030ee:	66a3      	str	r3, [r4, #104]	@ 0x68
 80030f0:	4641      	mov	r1, r8
 80030f2:	4630      	mov	r0, r6
 80030f4:	f005 fdac 	bl	8008c50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track4.setXY(0, 0);
 80030f8:	462a      	mov	r2, r5
 80030fa:	4629      	mov	r1, r5
 80030fc:	4658      	mov	r0, fp
 80030fe:	f7ff fcb3 	bl	8002a68 <_ZN8touchgfx8Drawable5setXYEss>
 8003102:	230c      	movs	r3, #12
    track4.setBitmap(touchgfx::Bitmap(BITMAP_TRACK4_ID));
 8003104:	a912      	add	r1, sp, #72	@ 0x48
 8003106:	4658      	mov	r0, fp
 8003108:	f8ad 3048 	strh.w	r3, [sp, #72]	@ 0x48
 800310c:	f007 fc45 	bl	800a99a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003110:	4659      	mov	r1, fp
 8003112:	4630      	mov	r0, r6
        visible = vis;
 8003114:	f884 5091 	strb.w	r5, [r4, #145]	@ 0x91
 8003118:	f005 fd9a 	bl	8008c50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track3.setXY(0, 0);
 800311c:	462a      	mov	r2, r5
 800311e:	4650      	mov	r0, sl
 8003120:	4629      	mov	r1, r5
 8003122:	f7ff fca1 	bl	8002a68 <_ZN8touchgfx8Drawable5setXYEss>
 8003126:	230b      	movs	r3, #11
    track3.setBitmap(touchgfx::Bitmap(BITMAP_TRACK3_ID));
 8003128:	4650      	mov	r0, sl
 800312a:	a912      	add	r1, sp, #72	@ 0x48
 800312c:	f8ad 3048 	strh.w	r3, [sp, #72]	@ 0x48
 8003130:	f007 fc33 	bl	800a99a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003134:	4651      	mov	r1, sl
 8003136:	4630      	mov	r0, r6
 8003138:	f884 50bd 	strb.w	r5, [r4, #189]	@ 0xbd
 800313c:	f005 fd88 	bl	8008c50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track2.setXY(0, 0);
 8003140:	462a      	mov	r2, r5
 8003142:	4648      	mov	r0, r9
 8003144:	4629      	mov	r1, r5
 8003146:	f7ff fc8f 	bl	8002a68 <_ZN8touchgfx8Drawable5setXYEss>
 800314a:	f04f 080a 	mov.w	r8, #10
    track2.setBitmap(touchgfx::Bitmap(BITMAP_TRACK2_ID));
 800314e:	4648      	mov	r0, r9
 8003150:	a912      	add	r1, sp, #72	@ 0x48
 8003152:	f8ad 8048 	strh.w	r8, [sp, #72]	@ 0x48
 8003156:	f007 fc20 	bl	800a99a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800315a:	4649      	mov	r1, r9
 800315c:	4630      	mov	r0, r6
 800315e:	f884 50e9 	strb.w	r5, [r4, #233]	@ 0xe9
 8003162:	f005 fd75 	bl	8008c50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track1.setXY(0, 0);
 8003166:	462a      	mov	r2, r5
 8003168:	9802      	ldr	r0, [sp, #8]
 800316a:	4629      	mov	r1, r5
 800316c:	f7ff fc7c 	bl	8002a68 <_ZN8touchgfx8Drawable5setXYEss>
 8003170:	2309      	movs	r3, #9
    track1.setBitmap(touchgfx::Bitmap(BITMAP_TRACK1_ID));
 8003172:	9802      	ldr	r0, [sp, #8]
 8003174:	f8ad 3048 	strh.w	r3, [sp, #72]	@ 0x48
 8003178:	a912      	add	r1, sp, #72	@ 0x48
 800317a:	f007 fc0e 	bl	800a99a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800317e:	9902      	ldr	r1, [sp, #8]
 8003180:	f884 5115 	strb.w	r5, [r4, #277]	@ 0x115
 8003184:	4630      	mov	r0, r6
 8003186:	f005 fd63 	bl	8008c50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    track0.setXY(0, 0);
 800318a:	462a      	mov	r2, r5
 800318c:	9803      	ldr	r0, [sp, #12]
 800318e:	4629      	mov	r1, r5
 8003190:	f7ff fc6a 	bl	8002a68 <_ZN8touchgfx8Drawable5setXYEss>
 8003194:	2308      	movs	r3, #8
    track0.setBitmap(touchgfx::Bitmap(BITMAP_TRACK0_ID));
 8003196:	9803      	ldr	r0, [sp, #12]
 8003198:	f8ad 3048 	strh.w	r3, [sp, #72]	@ 0x48
 800319c:	a912      	add	r1, sp, #72	@ 0x48
 800319e:	f007 fbfc 	bl	800a99a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80031a2:	9903      	ldr	r1, [sp, #12]
 80031a4:	f884 5141 	strb.w	r5, [r4, #321]	@ 0x141
 80031a8:	4630      	mov	r0, r6
 80031aa:	f005 fd51 	bl	8008c50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    car.setXY(126, 126);
 80031ae:	227e      	movs	r2, #126	@ 0x7e
 80031b0:	4611      	mov	r1, r2
 80031b2:	9804      	ldr	r0, [sp, #16]
 80031b4:	f7ff fc58 	bl	8002a68 <_ZN8touchgfx8Drawable5setXYEss>
 80031b8:	2305      	movs	r3, #5
    car.setBitmap(touchgfx::Bitmap(BITMAP_REDCAR_ID));
 80031ba:	9804      	ldr	r0, [sp, #16]
 80031bc:	f8ad 3048 	strh.w	r3, [sp, #72]	@ 0x48
 80031c0:	a912      	add	r1, sp, #72	@ 0x48
 80031c2:	f007 fbea 	bl	800a99a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80031c6:	9904      	ldr	r1, [sp, #16]
 80031c8:	4630      	mov	r0, r6
 80031ca:	f005 fd41 	bl	8008c50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80031ce:	2301      	movs	r3, #1
    flexButton1.setIconBitmaps(Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID), Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID));
 80031d0:	9805      	ldr	r0, [sp, #20]
 80031d2:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 80031d6:	aa12      	add	r2, sp, #72	@ 0x48
 80031d8:	a911      	add	r1, sp, #68	@ 0x44
 80031da:	f8ad 3048 	strh.w	r3, [sp, #72]	@ 0x48
 80031de:	f7ff fe45 	bl	8002e6c <_ZN8touchgfx15IconButtonStyleINS_18ClickButtonTriggerEE14setIconBitmapsERKNS_6BitmapES5_>
    flexButton1.setAction(flexButtonCallback);
 80031e2:	f504 7350 	add.w	r3, r4, #832	@ 0x340
        action = &callback;
 80031e6:	f8c4 31a4 	str.w	r3, [r4, #420]	@ 0x1a4
    flexButton1.setPosition(204, 282, 32, 32);
 80031ea:	2320      	movs	r3, #32
 80031ec:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 80031f0:	9805      	ldr	r0, [sp, #20]
        rect.x = x;
 80031f2:	f8c4 51b0 	str.w	r5, [r4, #432]	@ 0x1b0
 80031f6:	21cc      	movs	r1, #204	@ 0xcc
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	f7ff fe67 	bl	8002ecc <_ZN8touchgfx8Drawable11setPositionEssss>
 80031fe:	9905      	ldr	r1, [sp, #20]
 8003200:	4630      	mov	r0, r6
 8003202:	f005 fd25 	bl	8008c50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    lamb.setXY(63, 56);
 8003206:	2238      	movs	r2, #56	@ 0x38
 8003208:	9806      	ldr	r0, [sp, #24]
 800320a:	213f      	movs	r1, #63	@ 0x3f
 800320c:	f7ff fc2c 	bl	8002a68 <_ZN8touchgfx8Drawable5setXYEss>
 8003210:	f04f 0a03 	mov.w	sl, #3
    lamb.setBitmap(touchgfx::Bitmap(BITMAP_LAMB_ID));
 8003214:	9806      	ldr	r0, [sp, #24]
 8003216:	f8ad a048 	strh.w	sl, [sp, #72]	@ 0x48
 800321a:	a912      	add	r1, sp, #72	@ 0x48
 800321c:	f007 fbbd 	bl	800a99a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003220:	9906      	ldr	r1, [sp, #24]
 8003222:	4630      	mov	r0, r6
 8003224:	f005 fd14 	bl	8008c50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    point.setPosition(173, 0, 67, 20);
 8003228:	2314      	movs	r3, #20
 800322a:	462a      	mov	r2, r5
 800322c:	9300      	str	r3, [sp, #0]
 800322e:	21ad      	movs	r1, #173	@ 0xad
 8003230:	2343      	movs	r3, #67	@ 0x43
 8003232:	4638      	mov	r0, r7
 8003234:	f7ff fe4a 	bl	8002ecc <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8003238:	4b1a      	ldr	r3, [pc, #104]	@ (80032a4 <_ZN15Screen2ViewBaseC1Ev+0x37c>)
 800323a:	f8c4 3234 	str.w	r3, [r4, #564]	@ 0x234
        boundingArea = calculateBoundingArea();
 800323e:	f8d4 3204 	ldr.w	r3, [r4, #516]	@ 0x204
        linespace = space;
 8003242:	f8a4 5238 	strh.w	r5, [r4, #568]	@ 0x238
        boundingArea = calculateBoundingArea();
 8003246:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800324a:	4648      	mov	r0, r9
 800324c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003250:	4639      	mov	r1, r7
 8003252:	4798      	blx	r3
 8003254:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8003258:	f504 7310 	add.w	r3, r4, #576	@ 0x240
 800325c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8003260:	4b11      	ldr	r3, [pc, #68]	@ (80032a8 <_ZN15Screen2ViewBaseC1Ev+0x380>)
 8003262:	681b      	ldr	r3, [r3, #0]
    Unicode::snprintf(pointBuffer, POINT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_NDHN).getText());
 8003264:	f504 794b 	add.w	r9, r4, #812	@ 0x32c
 8003268:	b92b      	cbnz	r3, 8003276 <_ZN15Screen2ViewBaseC1Ev+0x34e>
 800326a:	4b10      	ldr	r3, [pc, #64]	@ (80032ac <_ZN15Screen2ViewBaseC1Ev+0x384>)
 800326c:	4a10      	ldr	r2, [pc, #64]	@ (80032b0 <_ZN15Screen2ViewBaseC1Ev+0x388>)
 800326e:	2160      	movs	r1, #96	@ 0x60
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003270:	4810      	ldr	r0, [pc, #64]	@ (80032b4 <_ZN15Screen2ViewBaseC1Ev+0x38c>)
 8003272:	f010 f87f 	bl	8013374 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8003276:	4b10      	ldr	r3, [pc, #64]	@ (80032b8 <_ZN15Screen2ViewBaseC1Ev+0x390>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8003278:	881b      	ldrh	r3, [r3, #0]
 800327a:	2b03      	cmp	r3, #3
 800327c:	d820      	bhi.n	80032c0 <_ZN15Screen2ViewBaseC1Ev+0x398>
 800327e:	4b0f      	ldr	r3, [pc, #60]	@ (80032bc <_ZN15Screen2ViewBaseC1Ev+0x394>)
 8003280:	4a0b      	ldr	r2, [pc, #44]	@ (80032b0 <_ZN15Screen2ViewBaseC1Ev+0x388>)
 8003282:	2161      	movs	r1, #97	@ 0x61
 8003284:	e7f4      	b.n	8003270 <_ZN15Screen2ViewBaseC1Ev+0x348>
 8003286:	bf00      	nop
 8003288:	0801558c 	.word	0x0801558c
 800328c:	08015a7c 	.word	0x08015a7c
 8003290:	080154d4 	.word	0x080154d4
 8003294:	08014c08 	.word	0x08014c08
 8003298:	080153f8 	.word	0x080153f8
 800329c:	08015574 	.word	0x08015574
 80032a0:	08002e4b 	.word	0x08002e4b
 80032a4:	fff50a0a 	.word	0xfff50a0a
 80032a8:	200126a8 	.word	0x200126a8
 80032ac:	08015238 	.word	0x08015238
 80032b0:	0801533a 	.word	0x0801533a
 80032b4:	080152b5 	.word	0x080152b5
 80032b8:	200126ac 	.word	0x200126ac
 80032bc:	080152fc 	.word	0x080152fc
        return texts->getText(typedTextId);
 80032c0:	4b35      	ldr	r3, [pc, #212]	@ (8003398 <_ZN15Screen2ViewBaseC1Ev+0x470>)
 80032c2:	4651      	mov	r1, sl
 80032c4:	6818      	ldr	r0, [r3, #0]
 80032c6:	f000 fa1d 	bl	8003704 <_ZNK8touchgfx5Texts7getTextEt>
 80032ca:	4a34      	ldr	r2, [pc, #208]	@ (800339c <_ZN15Screen2ViewBaseC1Ev+0x474>)
 80032cc:	4603      	mov	r3, r0
 80032ce:	4641      	mov	r1, r8
 80032d0:	4648      	mov	r0, r9
 80032d2:	f00d f8e9 	bl	80104a8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 80032d6:	f04f 0804 	mov.w	r8, #4
 80032da:	4b31      	ldr	r3, [pc, #196]	@ (80033a0 <_ZN15Screen2ViewBaseC1Ev+0x478>)
        wc1 = value;
 80032dc:	f8c4 924c 	str.w	r9, [r4, #588]	@ 0x24c
    point.setTypedText(touchgfx::TypedText(T___SINGLEUSE_PQ4Q));
 80032e0:	a912      	add	r1, sp, #72	@ 0x48
 80032e2:	4638      	mov	r0, r7
 80032e4:	9312      	str	r3, [sp, #72]	@ 0x48
 80032e6:	f8ad 804c 	strh.w	r8, [sp, #76]	@ 0x4c
 80032ea:	f007 f9bf 	bl	800a66c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80032ee:	4639      	mov	r1, r7
 80032f0:	4630      	mov	r0, r6
 80032f2:	f005 fcad 	bl	8008c50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    heart1.setXY(0, 0);
 80032f6:	462a      	mov	r2, r5
 80032f8:	9807      	ldr	r0, [sp, #28]
 80032fa:	4629      	mov	r1, r5
 80032fc:	f7ff fbb4 	bl	8002a68 <_ZN8touchgfx8Drawable5setXYEss>
 8003300:	2702      	movs	r7, #2
    heart1.setBitmap(touchgfx::Bitmap(BITMAP_HEART_ID));
 8003302:	9807      	ldr	r0, [sp, #28]
 8003304:	f8ad 7048 	strh.w	r7, [sp, #72]	@ 0x48
 8003308:	a912      	add	r1, sp, #72	@ 0x48
 800330a:	f007 fb46 	bl	800a99a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800330e:	9907      	ldr	r1, [sp, #28]
 8003310:	4630      	mov	r0, r6
 8003312:	f005 fc9d 	bl	8008c50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    heart2.setXY(18, 0);
 8003316:	462a      	mov	r2, r5
 8003318:	9808      	ldr	r0, [sp, #32]
 800331a:	2112      	movs	r1, #18
 800331c:	f7ff fba4 	bl	8002a68 <_ZN8touchgfx8Drawable5setXYEss>
    heart2.setBitmap(touchgfx::Bitmap(BITMAP_HEART_ID));
 8003320:	9808      	ldr	r0, [sp, #32]
 8003322:	f8ad 7048 	strh.w	r7, [sp, #72]	@ 0x48
 8003326:	a912      	add	r1, sp, #72	@ 0x48
 8003328:	f007 fb37 	bl	800a99a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800332c:	9908      	ldr	r1, [sp, #32]
 800332e:	4630      	mov	r0, r6
 8003330:	f005 fc8e 	bl	8008c50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    heart3.setXY(36, 0);
 8003334:	462a      	mov	r2, r5
 8003336:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003338:	2124      	movs	r1, #36	@ 0x24
 800333a:	f7ff fb95 	bl	8002a68 <_ZN8touchgfx8Drawable5setXYEss>
    heart3.setBitmap(touchgfx::Bitmap(BITMAP_HEART_ID));
 800333e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003340:	f8ad 7048 	strh.w	r7, [sp, #72]	@ 0x48
 8003344:	a912      	add	r1, sp, #72	@ 0x48
 8003346:	f007 fb28 	bl	800a99a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800334a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800334c:	4630      	mov	r0, r6
 800334e:	f005 fc7f 	bl	8008c50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    rock.setXY(0, 120);
 8003352:	2278      	movs	r2, #120	@ 0x78
 8003354:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8003356:	4629      	mov	r1, r5
 8003358:	f7ff fb86 	bl	8002a68 <_ZN8touchgfx8Drawable5setXYEss>
 800335c:	2306      	movs	r3, #6
    rock.setBitmap(touchgfx::Bitmap(BITMAP_ROCK_ID));
 800335e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8003360:	f8ad 3048 	strh.w	r3, [sp, #72]	@ 0x48
 8003364:	a912      	add	r1, sp, #72	@ 0x48
 8003366:	f007 fb18 	bl	800a99a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800336a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800336c:	4630      	mov	r0, r6
 800336e:	f005 fc6f 	bl	8008c50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    monster.setXY(164, 250);
 8003372:	22fa      	movs	r2, #250	@ 0xfa
 8003374:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8003376:	21a4      	movs	r1, #164	@ 0xa4
 8003378:	f7ff fb76 	bl	8002a68 <_ZN8touchgfx8Drawable5setXYEss>
    monster.setBitmap(touchgfx::Bitmap(BITMAP_MONSTER_ID));
 800337c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800337e:	f8ad 8048 	strh.w	r8, [sp, #72]	@ 0x48
 8003382:	a912      	add	r1, sp, #72	@ 0x48
 8003384:	f007 fb09 	bl	800a99a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8003388:	4630      	mov	r0, r6
 800338a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800338c:	f005 fc60 	bl	8008c50 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003390:	4620      	mov	r0, r4
 8003392:	b015      	add	sp, #84	@ 0x54
 8003394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003398:	200126b4 	.word	0x200126b4
 800339c:	08015385 	.word	0x08015385
 80033a0:	08014c08 	.word	0x08014c08

080033a4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80033a4:	4770      	bx	lr
	...

080033a8 <_Z23getFont_verdana_10_4bppv>:
{
 80033a8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80033aa:	4d16      	ldr	r5, [pc, #88]	@ (8003404 <_Z23getFont_verdana_10_4bppv+0x5c>)
 80033ac:	682c      	ldr	r4, [r5, #0]
 80033ae:	f3bf 8f5b 	dmb	ish
 80033b2:	f014 0401 	ands.w	r4, r4, #1
{
 80033b6:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80033b8:	d120      	bne.n	80033fc <_Z23getFont_verdana_10_4bppv+0x54>
 80033ba:	4628      	mov	r0, r5
 80033bc:	f00f ffae 	bl	801331c <__cxa_guard_acquire>
 80033c0:	b1e0      	cbz	r0, 80033fc <_Z23getFont_verdana_10_4bppv+0x54>
 80033c2:	233f      	movs	r3, #63	@ 0x3f
 80033c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80033c6:	4b10      	ldr	r3, [pc, #64]	@ (8003408 <_Z23getFont_verdana_10_4bppv+0x60>)
 80033c8:	9308      	str	r3, [sp, #32]
 80033ca:	4b10      	ldr	r3, [pc, #64]	@ (800340c <_Z23getFont_verdana_10_4bppv+0x64>)
 80033cc:	4910      	ldr	r1, [pc, #64]	@ (8003410 <_Z23getFont_verdana_10_4bppv+0x68>)
 80033ce:	4811      	ldr	r0, [pc, #68]	@ (8003414 <_Z23getFont_verdana_10_4bppv+0x6c>)
 80033d0:	940a      	str	r4, [sp, #40]	@ 0x28
 80033d2:	2201      	movs	r2, #1
 80033d4:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80033d8:	2304      	movs	r3, #4
 80033da:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80033de:	230a      	movs	r3, #10
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80033e6:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80033ea:	9405      	str	r4, [sp, #20]
 80033ec:	f7ff fa48 	bl	8002880 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80033f0:	4809      	ldr	r0, [pc, #36]	@ (8003418 <_Z23getFont_verdana_10_4bppv+0x70>)
 80033f2:	f00f ffdd 	bl	80133b0 <atexit>
 80033f6:	4628      	mov	r0, r5
 80033f8:	f00f ff9c 	bl	8013334 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 80033fc:	4805      	ldr	r0, [pc, #20]	@ (8003414 <_Z23getFont_verdana_10_4bppv+0x6c>)
 80033fe:	b00f      	add	sp, #60	@ 0x3c
 8003400:	bd30      	pop	{r4, r5, pc}
 8003402:	bf00      	nop
 8003404:	20001810 	.word	0x20001810
 8003408:	0801b1a4 	.word	0x0801b1a4
 800340c:	0801b354 	.word	0x0801b354
 8003410:	0801a71c 	.word	0x0801a71c
 8003414:	20001814 	.word	0x20001814
 8003418:	080033a5 	.word	0x080033a5

0800341c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800341c:	4770      	bx	lr
	...

08003420 <_Z23getFont_verdana_20_4bppv>:
{
 8003420:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003422:	4d17      	ldr	r5, [pc, #92]	@ (8003480 <_Z23getFont_verdana_20_4bppv+0x60>)
 8003424:	682c      	ldr	r4, [r5, #0]
 8003426:	f3bf 8f5b 	dmb	ish
 800342a:	f014 0401 	ands.w	r4, r4, #1
{
 800342e:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003430:	d122      	bne.n	8003478 <_Z23getFont_verdana_20_4bppv+0x58>
 8003432:	4628      	mov	r0, r5
 8003434:	f00f ff72 	bl	801331c <__cxa_guard_acquire>
 8003438:	b1f0      	cbz	r0, 8003478 <_Z23getFont_verdana_20_4bppv+0x58>
 800343a:	233f      	movs	r3, #63	@ 0x3f
 800343c:	9309      	str	r3, [sp, #36]	@ 0x24
 800343e:	4b11      	ldr	r3, [pc, #68]	@ (8003484 <_Z23getFont_verdana_20_4bppv+0x64>)
 8003440:	9308      	str	r3, [sp, #32]
 8003442:	4b11      	ldr	r3, [pc, #68]	@ (8003488 <_Z23getFont_verdana_20_4bppv+0x68>)
 8003444:	9307      	str	r3, [sp, #28]
 8003446:	2301      	movs	r3, #1
 8003448:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800344c:	9304      	str	r3, [sp, #16]
 800344e:	2304      	movs	r3, #4
 8003450:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8003454:	2314      	movs	r3, #20
 8003456:	490d      	ldr	r1, [pc, #52]	@ (800348c <_Z23getFont_verdana_20_4bppv+0x6c>)
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	225f      	movs	r2, #95	@ 0x5f
 800345c:	2318      	movs	r3, #24
 800345e:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8003462:	480b      	ldr	r0, [pc, #44]	@ (8003490 <_Z23getFont_verdana_20_4bppv+0x70>)
 8003464:	940a      	str	r4, [sp, #40]	@ 0x28
 8003466:	9401      	str	r4, [sp, #4]
 8003468:	f7ff fa0a 	bl	8002880 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800346c:	4809      	ldr	r0, [pc, #36]	@ (8003494 <_Z23getFont_verdana_20_4bppv+0x74>)
 800346e:	f00f ff9f 	bl	80133b0 <atexit>
 8003472:	4628      	mov	r0, r5
 8003474:	f00f ff5e 	bl	8013334 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8003478:	4805      	ldr	r0, [pc, #20]	@ (8003490 <_Z23getFont_verdana_20_4bppv+0x70>)
 800347a:	b00f      	add	sp, #60	@ 0x3c
 800347c:	bd30      	pop	{r4, r5, pc}
 800347e:	bf00      	nop
 8003480:	20001840 	.word	0x20001840
 8003484:	0801b1a8 	.word	0x0801b1a8
 8003488:	0801b358 	.word	0x0801b358
 800348c:	0801a72c 	.word	0x0801a72c
 8003490:	20001844 	.word	0x20001844
 8003494:	0800341d 	.word	0x0800341d

08003498 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003498:	4770      	bx	lr
	...

0800349c <_Z23getFont_verdana_40_4bppv>:
{
 800349c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800349e:	4d16      	ldr	r5, [pc, #88]	@ (80034f8 <_Z23getFont_verdana_40_4bppv+0x5c>)
 80034a0:	682c      	ldr	r4, [r5, #0]
 80034a2:	f3bf 8f5b 	dmb	ish
 80034a6:	f014 0401 	ands.w	r4, r4, #1
{
 80034aa:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80034ac:	d120      	bne.n	80034f0 <_Z23getFont_verdana_40_4bppv+0x54>
 80034ae:	4628      	mov	r0, r5
 80034b0:	f00f ff34 	bl	801331c <__cxa_guard_acquire>
 80034b4:	b1e0      	cbz	r0, 80034f0 <_Z23getFont_verdana_40_4bppv+0x54>
 80034b6:	233f      	movs	r3, #63	@ 0x3f
 80034b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80034ba:	4b10      	ldr	r3, [pc, #64]	@ (80034fc <_Z23getFont_verdana_40_4bppv+0x60>)
 80034bc:	9308      	str	r3, [sp, #32]
 80034be:	4b10      	ldr	r3, [pc, #64]	@ (8003500 <_Z23getFont_verdana_40_4bppv+0x64>)
 80034c0:	4910      	ldr	r1, [pc, #64]	@ (8003504 <_Z23getFont_verdana_40_4bppv+0x68>)
 80034c2:	4811      	ldr	r0, [pc, #68]	@ (8003508 <_Z23getFont_verdana_40_4bppv+0x6c>)
 80034c4:	940a      	str	r4, [sp, #40]	@ 0x28
 80034c6:	2201      	movs	r2, #1
 80034c8:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80034cc:	2304      	movs	r3, #4
 80034ce:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80034d2:	2328      	movs	r3, #40	@ 0x28
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80034da:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80034de:	9405      	str	r4, [sp, #20]
 80034e0:	f7ff f9ce 	bl	8002880 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80034e4:	4809      	ldr	r0, [pc, #36]	@ (800350c <_Z23getFont_verdana_40_4bppv+0x70>)
 80034e6:	f00f ff63 	bl	80133b0 <atexit>
 80034ea:	4628      	mov	r0, r5
 80034ec:	f00f ff22 	bl	8013334 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 80034f0:	4805      	ldr	r0, [pc, #20]	@ (8003508 <_Z23getFont_verdana_40_4bppv+0x6c>)
 80034f2:	b00f      	add	sp, #60	@ 0x3c
 80034f4:	bd30      	pop	{r4, r5, pc}
 80034f6:	bf00      	nop
 80034f8:	20001870 	.word	0x20001870
 80034fc:	0801b34c 	.word	0x0801b34c
 8003500:	0801b35c 	.word	0x0801b35c
 8003504:	0801ac60 	.word	0x0801ac60
 8003508:	20001874 	.word	0x20001874
 800350c:	08003499 	.word	0x08003499

08003510 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdanaz_22_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdanaz_22_4bpp();

touchgfx::GeneratedFont& getFont_verdanaz_22_4bpp()
{
    static touchgfx::GeneratedFont verdanaz_22_4bpp(glyphs_verdanaz_22_4bpp, 95, 27, 22, 0, 0, 4, 1, 3, 3, unicodes_verdanaz_22_4bpp, kerning_verdanaz_22_4bpp, 63, 0, 0, 0);
 8003510:	4770      	bx	lr
	...

08003514 <_Z24getFont_verdanaz_22_4bppv>:
{
 8003514:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdanaz_22_4bpp(glyphs_verdanaz_22_4bpp, 95, 27, 22, 0, 0, 4, 1, 3, 3, unicodes_verdanaz_22_4bpp, kerning_verdanaz_22_4bpp, 63, 0, 0, 0);
 8003516:	4d17      	ldr	r5, [pc, #92]	@ (8003574 <_Z24getFont_verdanaz_22_4bppv+0x60>)
 8003518:	682c      	ldr	r4, [r5, #0]
 800351a:	f3bf 8f5b 	dmb	ish
 800351e:	f014 0401 	ands.w	r4, r4, #1
{
 8003522:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdanaz_22_4bpp(glyphs_verdanaz_22_4bpp, 95, 27, 22, 0, 0, 4, 1, 3, 3, unicodes_verdanaz_22_4bpp, kerning_verdanaz_22_4bpp, 63, 0, 0, 0);
 8003524:	d123      	bne.n	800356e <_Z24getFont_verdanaz_22_4bppv+0x5a>
 8003526:	4628      	mov	r0, r5
 8003528:	f00f fef8 	bl	801331c <__cxa_guard_acquire>
 800352c:	b1f8      	cbz	r0, 800356e <_Z24getFont_verdanaz_22_4bppv+0x5a>
 800352e:	233f      	movs	r3, #63	@ 0x3f
 8003530:	9309      	str	r3, [sp, #36]	@ 0x24
 8003532:	4b11      	ldr	r3, [pc, #68]	@ (8003578 <_Z24getFont_verdanaz_22_4bppv+0x64>)
 8003534:	9308      	str	r3, [sp, #32]
 8003536:	4b11      	ldr	r3, [pc, #68]	@ (800357c <_Z24getFont_verdanaz_22_4bppv+0x68>)
 8003538:	9307      	str	r3, [sp, #28]
 800353a:	2303      	movs	r3, #3
 800353c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003540:	2201      	movs	r2, #1
 8003542:	2304      	movs	r3, #4
 8003544:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003548:	2316      	movs	r3, #22
 800354a:	490d      	ldr	r1, [pc, #52]	@ (8003580 <_Z24getFont_verdanaz_22_4bppv+0x6c>)
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	225f      	movs	r2, #95	@ 0x5f
 8003550:	231b      	movs	r3, #27
 8003552:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8003556:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800355a:	480a      	ldr	r0, [pc, #40]	@ (8003584 <_Z24getFont_verdanaz_22_4bppv+0x70>)
 800355c:	940a      	str	r4, [sp, #40]	@ 0x28
 800355e:	f7ff f98f 	bl	8002880 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003562:	4809      	ldr	r0, [pc, #36]	@ (8003588 <_Z24getFont_verdanaz_22_4bppv+0x74>)
 8003564:	f00f ff24 	bl	80133b0 <atexit>
 8003568:	4628      	mov	r0, r5
 800356a:	f00f fee3 	bl	8013334 <__cxa_guard_release>
    return verdanaz_22_4bpp;
}
 800356e:	4805      	ldr	r0, [pc, #20]	@ (8003584 <_Z24getFont_verdanaz_22_4bppv+0x70>)
 8003570:	b00f      	add	sp, #60	@ 0x3c
 8003572:	bd30      	pop	{r4, r5, pc}
 8003574:	200018a0 	.word	0x200018a0
 8003578:	0801b350 	.word	0x0801b350
 800357c:	0801b360 	.word	0x0801b360
 8003580:	0801ac70 	.word	0x0801ac70
 8003584:	200018a4 	.word	0x200018a4
 8003588:	08003511 	.word	0x08003511

0800358c <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 800358c:	2000      	movs	r0, #0
 800358e:	4770      	bx	lr

08003590 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 8003590:	2000      	movs	r0, #0
 8003592:	4770      	bx	lr

08003594 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003594:	b40e      	push	{r1, r2, r3}
 8003596:	b503      	push	{r0, r1, lr}
 8003598:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthRTL(TEXT_DIRECTION_LTR, text, pArg);
 800359a:	2100      	movs	r1, #0
{
 800359c:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 80035a0:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthRTL(TEXT_DIRECTION_LTR, text, pArg);
 80035a2:	f00a fac3 	bl	800db2c <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80035a6:	b002      	add	sp, #8
 80035a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80035ac:	b003      	add	sp, #12
 80035ae:	4770      	bx	lr

080035b0 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80035b0:	b40c      	push	{r2, r3}
 80035b2:	b507      	push	{r0, r1, r2, lr}
 80035b4:	ab04      	add	r3, sp, #16
 80035b6:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 80035ba:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthRTL(textDirection, text, pArg);
 80035bc:	f00a fab6 	bl	800db2c <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 80035c0:	b003      	add	sp, #12
 80035c2:	f85d eb04 	ldr.w	lr, [sp], #4
 80035c6:	b002      	add	sp, #8
 80035c8:	4770      	bx	lr
	...

080035cc <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 80035cc:	b510      	push	{r4, lr}
 80035ce:	4604      	mov	r4, r0
    nextCharacters.replaceAt0(unicodeConverter(direction));
 80035d0:	f00b f8c4 	bl	800e75c <_ZN8touchgfx12TextProvider16unicodeConverterEh>
            replaceAt(++used - 1, newChar);
        }

        FORCE_INLINE_FUNCTION void replaceAt0(Unicode::UnicodeChar newChar)
        {
            buffer[pos] = newChar;
 80035d4:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80035d6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80035da:	8458      	strh	r0, [r3, #34]	@ 0x22
    if (fontGsubTable && nextCharacters.peekChar())
 80035dc:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80035de:	b35b      	cbz	r3, 8003638 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6c>
            assert(used > 0);
 80035e0:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80035e2:	b92b      	cbnz	r3, 80035f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x24>
 80035e4:	4b17      	ldr	r3, [pc, #92]	@ (8003644 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 80035e6:	4a18      	ldr	r2, [pc, #96]	@ (8003648 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 80035e8:	21c5      	movs	r1, #197	@ 0xc5
            assert(offset < used);
 80035ea:	4818      	ldr	r0, [pc, #96]	@ (800364c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 80035ec:	f00f fec2 	bl	8013374 <__assert_func>
 80035f0:	b310      	cbz	r0, 8003638 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6c>
    {
        substituteGlyphs();
 80035f2:	4620      	mov	r0, r4
 80035f4:	f00c f9af 	bl	800f956 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
 80035f8:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d803      	bhi.n	8003606 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x3a>
 80035fe:	4b14      	ldr	r3, [pc, #80]	@ (8003650 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x84>)
 8003600:	4a14      	ldr	r2, [pc, #80]	@ (8003654 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x88>)
 8003602:	21cb      	movs	r1, #203	@ 0xcb
 8003604:	e7f1      	b.n	80035ea <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x1e>
            const uint16_t index = pos + offset;
 8003606:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8003608:	1c53      	adds	r3, r2, #1
 800360a:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 800360c:	2b09      	cmp	r3, #9
 800360e:	4619      	mov	r1, r3
 8003610:	bf88      	it	hi
 8003612:	f1a3 010a 	subhi.w	r1, r3, #10
 8003616:	eb04 0141 	add.w	r1, r4, r1, lsl #1
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800361a:	f640 103f 	movw	r0, #2367	@ 0x93f
 800361e:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 8003620:	4281      	cmp	r1, r0
 8003622:	d109      	bne.n	8003638 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6c>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8003624:	2b0a      	cmp	r3, #10
 8003626:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800362a:	bf28      	it	cs
 800362c:	2300      	movcs	r3, #0

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 800362e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
            return buffer[pos];
 8003632:	8c50      	ldrh	r0, [r2, #34]	@ 0x22
            buffer[index < size ? index : 0] = newChar;
 8003634:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 8003636:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8003638:	4620      	mov	r0, r4
}
 800363a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 800363e:	f00c b88d 	b.w	800f75c <_ZN8touchgfx12TextProvider11getNextCharEv>
 8003642:	bf00      	nop
 8003644:	080155bc 	.word	0x080155bc
 8003648:	080155c5 	.word	0x080155c5
 800364c:	08015670 	.word	0x08015670
 8003650:	080156ba 	.word	0x080156ba
 8003654:	080156c8 	.word	0x080156c8

08003658 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8003658:	b510      	push	{r4, lr}
 800365a:	4604      	mov	r4, r0
    fillInputBuffer();
 800365c:	f00c f845 	bl	800f6ea <_ZN8touchgfx12TextProvider15fillInputBufferEv>
    unicodeConverterInit();
 8003660:	4620      	mov	r0, r4
}
 8003662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    unicodeConverterInit();
 8003666:	f00b b875 	b.w	800e754 <_ZN8touchgfx12TextProvider20unicodeConverterInitEv>

0800366a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 800366a:	b510      	push	{r4, lr}
 800366c:	b086      	sub	sp, #24
 800366e:	ac02      	add	r4, sp, #8
 8003670:	e884 0006 	stmia.w	r4, {r1, r2}
 8003674:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8003676:	ab0a      	add	r3, sp, #40	@ 0x28
 8003678:	9305      	str	r3, [sp, #20]
    drawStringRTL(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800367a:	9301      	str	r3, [sp, #4]
 800367c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	4621      	mov	r1, r4
 8003682:	9b08      	ldr	r3, [sp, #32]
 8003684:	f008 fe64 	bl	800c350 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8003688:	b006      	add	sp, #24
 800368a:	bd10      	pop	{r4, pc}

0800368c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800368c:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 800368e:	bb18      	cbnz	r0, 80036d8 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8003690:	4b12      	ldr	r3, [pc, #72]	@ (80036dc <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8003692:	4813      	ldr	r0, [pc, #76]	@ (80036e0 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8003694:	681c      	ldr	r4, [r3, #0]
 8003696:	4913      	ldr	r1, [pc, #76]	@ (80036e4 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8003698:	b1b4      	cbz	r4, 80036c8 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800369a:	6822      	ldr	r2, [r4, #0]
 800369c:	4422      	add	r2, r4
 800369e:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80036a0:	6862      	ldr	r2, [r4, #4]
 80036a2:	4422      	add	r2, r4
 80036a4:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80036a6:	68a2      	ldr	r2, [r4, #8]
 80036a8:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 80036aa:	4b0f      	ldr	r3, [pc, #60]	@ (80036e8 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80036b0:	f000 f838 	bl	8003724 <_ZN17TypedTextDatabase8getFontsEv>
 80036b4:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80036b6:	f000 f833 	bl	8003720 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 80036ba:	4b0c      	ldr	r3, [pc, #48]	@ (80036ec <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 80036bc:	601c      	str	r4, [r3, #0]
        fonts = f;
 80036be:	4b0c      	ldr	r3, [pc, #48]	@ (80036f0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 80036c0:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 80036c2:	4b0c      	ldr	r3, [pc, #48]	@ (80036f4 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 80036c4:	8018      	strh	r0, [r3, #0]
    }
}
 80036c6:	e007      	b.n	80036d8 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 80036c8:	4b0b      	ldr	r3, [pc, #44]	@ (80036f8 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 80036ca:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80036cc:	4b0b      	ldr	r3, [pc, #44]	@ (80036fc <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 80036ce:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80036d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003700 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 80036d2:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 80036d4:	2c00      	cmp	r4, #0
 80036d6:	d1e8      	bne.n	80036aa <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 80036d8:	bd38      	pop	{r3, r4, r5, pc}
 80036da:	bf00      	nop
 80036dc:	200018dc 	.word	0x200018dc
 80036e0:	200018d4 	.word	0x200018d4
 80036e4:	200018d0 	.word	0x200018d0
 80036e8:	200018d8 	.word	0x200018d8
 80036ec:	200126a8 	.word	0x200126a8
 80036f0:	200126b0 	.word	0x200126b0
 80036f4:	200126ac 	.word	0x200126ac
 80036f8:	0801b378 	.word	0x0801b378
 80036fc:	0801b364 	.word	0x0801b364
 8003700:	0801b398 	.word	0x0801b398

08003704 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8003704:	4b04      	ldr	r3, [pc, #16]	@ (8003718 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 800370c:	4b03      	ldr	r3, [pc, #12]	@ (800371c <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 800370e:	681b      	ldr	r3, [r3, #0]
}
 8003710:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	200018d0 	.word	0x200018d0
 800371c:	200018d4 	.word	0x200018d4

08003720 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8003720:	2005      	movs	r0, #5
 8003722:	4770      	bx	lr

08003724 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8003724:	4800      	ldr	r0, [pc, #0]	@ (8003728 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8003726:	4770      	bx	lr
 8003728:	200018e0 	.word	0x200018e0

0800372c <_GLOBAL__sub_I_touchgfx_fonts>:
    case 3:
        touchgfx_fonts[3] = &(getFont_verdanaz_22_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800372c:	b510      	push	{r4, lr}
    &(getFont_verdana_20_4bpp()),
 800372e:	f7ff fe77 	bl	8003420 <_Z23getFont_verdana_20_4bppv>
};
 8003732:	4c06      	ldr	r4, [pc, #24]	@ (800374c <_GLOBAL__sub_I_touchgfx_fonts+0x20>)
 8003734:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8003736:	f7ff feb1 	bl	800349c <_Z23getFont_verdana_40_4bppv>
};
 800373a:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp()),
 800373c:	f7ff fe34 	bl	80033a8 <_Z23getFont_verdana_10_4bppv>
};
 8003740:	60a0      	str	r0, [r4, #8]
    &(getFont_verdanaz_22_4bpp())
 8003742:	f7ff fee7 	bl	8003514 <_Z24getFont_verdanaz_22_4bppv>
};
 8003746:	60e0      	str	r0, [r4, #12]
} // namespace TypedTextDatabase
 8003748:	bd10      	pop	{r4, pc}
 800374a:	bf00      	nop
 800374c:	200018e0 	.word	0x200018e0

08003750 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8003750:	4770      	bx	lr

08003752 <_ZN19FrontendApplicationD0Ev>:
 8003752:	b510      	push	{r4, lr}
 8003754:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8003758:	4604      	mov	r4, r0
 800375a:	f00f fddd 	bl	8013318 <_ZdlPvj>
 800375e:	4620      	mov	r0, r4
 8003760:	bd10      	pop	{r4, pc}

08003762 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8003762:	b510      	push	{r4, lr}
 8003764:	4604      	mov	r4, r0
    {
        model.tick();
 8003766:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 800376a:	f000 f817 	bl	800379c <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800376e:	4620      	mov	r0, r4
    }
 8003770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8003774:	f009 bb10 	b.w	800cd98 <_ZN8touchgfx11Application15handleTickEventEv>

08003778 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8003778:	b510      	push	{r4, lr}
 800377a:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 800377c:	f7fe ffee 	bl	800275c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8003780:	4b01      	ldr	r3, [pc, #4]	@ (8003788 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
 8003782:	6023      	str	r3, [r4, #0]
{

}
 8003784:	4620      	mov	r0, r4
 8003786:	bd10      	pop	{r4, pc}
 8003788:	080157a4 	.word	0x080157a4

0800378c <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : ImageX(95),ImageY(160), modelListener(0)
 800378c:	4902      	ldr	r1, [pc, #8]	@ (8003798 <_ZN5ModelC1Ev+0xc>)
 800378e:	2200      	movs	r2, #0
 8003790:	e9c0 2100 	strd	r2, r1, [r0]
 8003794:	6082      	str	r2, [r0, #8]
{
	modelTickCount = 0;
}
 8003796:	4770      	bx	lr
 8003798:	00a0005f 	.word	0x00a0005f

0800379c <_ZN5Model4tickEv>:

void Model::tick()
{
	modelTickCount++;
 800379c:	6803      	ldr	r3, [r0, #0]
 800379e:	3301      	adds	r3, #1
 80037a0:	6003      	str	r3, [r0, #0]
}
 80037a2:	4770      	bx	lr

080037a4 <_ZN5Model7updateXEs>:

void Model::updateX(int16_t x)
{
	ImageX = x;
 80037a4:	8081      	strh	r1, [r0, #4]
}
 80037a6:	4770      	bx	lr

080037a8 <_ZN5Model9GetImageXEv>:
}

int16_t Model::GetImageX()
{
	return ImageX;
}
 80037a8:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80037ac:	4770      	bx	lr

080037ae <_ZN5Model9GetImageYEv>:

int16_t Model::GetImageY()
{
	return ImageY;
}
 80037ae:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80037b2:	4770      	bx	lr

080037b4 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 80037b4:	4770      	bx	lr

080037b6 <_ZThn4_N16Screen1PresenterD1Ev>:
 80037b6:	3804      	subs	r0, #4
 80037b8:	4770      	bx	lr

080037ba <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 80037ba:	4770      	bx	lr

080037bc <_ZN16Screen1PresenterD0Ev>:
 80037bc:	b510      	push	{r4, lr}
 80037be:	2110      	movs	r1, #16
 80037c0:	4604      	mov	r4, r0
 80037c2:	f00f fda9 	bl	8013318 <_ZdlPvj>
 80037c6:	4620      	mov	r0, r4
 80037c8:	bd10      	pop	{r4, pc}

080037ca <_ZThn4_N16Screen1PresenterD0Ev>:
 80037ca:	f1a0 0004 	sub.w	r0, r0, #4
 80037ce:	e7f5      	b.n	80037bc <_ZN16Screen1PresenterD0Ev>

080037d0 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 80037d0:	2200      	movs	r2, #0
 80037d2:	6082      	str	r2, [r0, #8]
    : view(v)
 80037d4:	4a02      	ldr	r2, [pc, #8]	@ (80037e0 <_ZN16Screen1PresenterC1ER11Screen1View+0x10>)
 80037d6:	6002      	str	r2, [r0, #0]
 80037d8:	3218      	adds	r2, #24
 80037da:	6042      	str	r2, [r0, #4]
 80037dc:	60c1      	str	r1, [r0, #12]
}
 80037de:	4770      	bx	lr
 80037e0:	080157f8 	.word	0x080157f8

080037e4 <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 80037e4:	4770      	bx	lr
	...

080037e8 <_ZN11Screen1View15handleTickEventEv>:

void Screen1View::handleTickEvent()
{
	tickCounter += 1;
 80037e8:	f8d0 2184 	ldr.w	r2, [r0, #388]	@ 0x184
	updatePoint(scores);
 80037ec:	6803      	ldr	r3, [r0, #0]
	tickCounter += 1;
 80037ee:	3201      	adds	r2, #1
 80037f0:	f8c0 2184 	str.w	r2, [r0, #388]	@ 0x184
	updatePoint(scores);
 80037f4:	4a01      	ldr	r2, [pc, #4]	@ (80037fc <_ZN11Screen1View15handleTickEventEv+0x14>)
 80037f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f8:	8811      	ldrh	r1, [r2, #0]
 80037fa:	4718      	bx	r3
 80037fc:	20001558 	.word	0x20001558

08003800 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8003800:	b510      	push	{r4, lr}
 8003802:	4b03      	ldr	r3, [pc, #12]	@ (8003810 <_ZN11Screen1ViewD1Ev+0x10>)
 8003804:	6003      	str	r3, [r0, #0]
 8003806:	4604      	mov	r4, r0
 8003808:	f7ff f8ad 	bl	8002966 <_ZN15Screen1ViewBaseD1Ev>
 800380c:	4620      	mov	r0, r4
 800380e:	bd10      	pop	{r4, pc}
 8003810:	08015824 	.word	0x08015824

08003814 <_ZN11Screen1ViewD0Ev>:
 8003814:	b510      	push	{r4, lr}
 8003816:	4604      	mov	r4, r0
 8003818:	f7ff fff2 	bl	8003800 <_ZN11Screen1ViewD1Ev>
 800381c:	4620      	mov	r0, r4
 800381e:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8003822:	f00f fd79 	bl	8013318 <_ZdlPvj>
 8003826:	4620      	mov	r0, r4
 8003828:	bd10      	pop	{r4, pc}
	...

0800382c <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 800382c:	b510      	push	{r4, lr}
 800382e:	4604      	mov	r4, r0
 8003830:	f7ff f95c 	bl	8002aec <_ZN15Screen1ViewBaseC1Ev>
 8003834:	4b03      	ldr	r3, [pc, #12]	@ (8003844 <_ZN11Screen1ViewC1Ev+0x18>)
 8003836:	6023      	str	r3, [r4, #0]
 8003838:	2300      	movs	r3, #0
 800383a:	f8c4 3184 	str.w	r3, [r4, #388]	@ 0x184
}
 800383e:	4620      	mov	r0, r4
 8003840:	bd10      	pop	{r4, pc}
 8003842:	bf00      	nop
 8003844:	08015824 	.word	0x08015824

08003848 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8003848:	f7ff b88e 	b.w	8002968 <_ZN15Screen1ViewBase11setupScreenEv>

0800384c <_ZN11Screen1View11updatePointEi>:

}
void Screen1View::updatePoint(int newValue)
{
 800384c:	b538      	push	{r3, r4, r5, lr}
 800384e:	4604      	mov	r4, r0
    Unicode::snprintf(screen1pointBuffer, SCREEN1POINT_SIZE, "%d", newValue);
 8003850:	f500 75b0 	add.w	r5, r0, #352	@ 0x160
{
 8003854:	460b      	mov	r3, r1
    Unicode::snprintf(screen1pointBuffer, SCREEN1POINT_SIZE, "%d", newValue);
 8003856:	4628      	mov	r0, r5
 8003858:	4a05      	ldr	r2, [pc, #20]	@ (8003870 <_ZN11Screen1View11updatePointEi+0x24>)
 800385a:	210a      	movs	r1, #10
 800385c:	f00c fe24 	bl	80104a8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8003860:	f8c4 515c 	str.w	r5, [r4, #348]	@ 0x15c
    screen1point.setWildcard(screen1pointBuffer);
    screen1point.invalidate();
 8003864:	f504 708a 	add.w	r0, r4, #276	@ 0x114
}
 8003868:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    screen1point.invalidate();
 800386c:	f00a ba65 	b.w	800dd3a <_ZNK8touchgfx8Drawable10invalidateEv>
 8003870:	08015818 	.word	0x08015818

08003874 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 8003874:	4770      	bx	lr

08003876 <_ZThn4_N16Screen2PresenterD1Ev>:
 8003876:	3804      	subs	r0, #4
 8003878:	4770      	bx	lr

0800387a <_ZN16Screen2Presenter10deactivateEv>:
}

void Screen2Presenter::activate()
{

}
 800387a:	4770      	bx	lr

0800387c <_ZN16Screen2PresenterD0Ev>:
 800387c:	b510      	push	{r4, lr}
 800387e:	2110      	movs	r1, #16
 8003880:	4604      	mov	r4, r0
 8003882:	f00f fd49 	bl	8013318 <_ZdlPvj>
 8003886:	4620      	mov	r0, r4
 8003888:	bd10      	pop	{r4, pc}

0800388a <_ZThn4_N16Screen2PresenterD0Ev>:
 800388a:	f1a0 0004 	sub.w	r0, r0, #4
 800388e:	e7f5      	b.n	800387c <_ZN16Screen2PresenterD0Ev>

08003890 <_ZN16Screen2PresenterC1ER11Screen2View>:
 8003890:	2200      	movs	r2, #0
 8003892:	6082      	str	r2, [r0, #8]
    : view(v)
 8003894:	4a02      	ldr	r2, [pc, #8]	@ (80038a0 <_ZN16Screen2PresenterC1ER11Screen2View+0x10>)
 8003896:	6002      	str	r2, [r0, #0]
 8003898:	3218      	adds	r2, #24
 800389a:	6042      	str	r2, [r0, #4]
 800389c:	60c1      	str	r1, [r0, #12]
}
 800389e:	4770      	bx	lr
 80038a0:	0801585c 	.word	0x0801585c

080038a4 <_ZN16Screen2Presenter12UpdateImageXEs>:

}

void Screen2Presenter::UpdateImageX(int16_t x)
{
	model->updateX(x);
 80038a4:	6880      	ldr	r0, [r0, #8]
 80038a6:	f7ff bf7d 	b.w	80037a4 <_ZN5Model7updateXEs>

080038aa <_ZN16Screen2Presenter9GetImageXEv>:
}

int16_t Screen2Presenter::GetImageX()
{
	return model->GetImageX();
 80038aa:	6880      	ldr	r0, [r0, #8]
 80038ac:	f7ff bf7c 	b.w	80037a8 <_ZN5Model9GetImageXEv>

080038b0 <_ZN16Screen2Presenter9GetImageYEv>:
	model->updateY(y);
}

int16_t Screen2Presenter::GetImageY()
{
	return model->GetImageY();
 80038b0:	6880      	ldr	r0, [r0, #8]
 80038b2:	f7ff bf7c 	b.w	80037ae <_ZN5Model9GetImageYEv>
	...

080038b8 <_ZN11Screen2View9resetGameEv>:
    heart2.invalidate();
    heart3.invalidate();
}

void Screen2View::resetGame()
{   scores = tickCount/20;
 80038b8:	f8d0 3368 	ldr.w	r3, [r0, #872]	@ 0x368
 80038bc:	2214      	movs	r2, #20
 80038be:	fbb3 f3f2 	udiv	r3, r3, r2
 80038c2:	4a0d      	ldr	r2, [pc, #52]	@ (80038f8 <_ZN11Screen2View9resetGameEv+0x40>)
 80038c4:	b510      	push	{r4, lr}
 80038c6:	8013      	strh	r3, [r2, #0]
    tickCount = 0;
    flickerCount = 0;
    flickering = false;
 80038c8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80038cc:	f8a0 3370 	strh.w	r3, [r0, #880]	@ 0x370
 80038d0:	230e      	movs	r3, #14
 80038d2:	f8c0 31dc 	str.w	r3, [r0, #476]	@ 0x1dc
    localImageY = 0;
    car.setX(localImageX);
    car.setY(localImageY);
    lamb.setX(14);
    lamb.setY(0);
    updatePoint(0);
 80038d6:	6803      	ldr	r3, [r0, #0]
{   scores = tickCount/20;
 80038d8:	4604      	mov	r4, r0
    localImageX = 0;
 80038da:	2100      	movs	r1, #0
    tickCount = 0;
 80038dc:	e9c0 11d9 	strd	r1, r1, [r0, #868]	@ 0x364
    updatePoint(0);
 80038e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    flickerCount = 0;
 80038e2:	f8c0 136c 	str.w	r1, [r0, #876]	@ 0x36c
 80038e6:	f8c0 114c 	str.w	r1, [r0, #332]	@ 0x14c
    updatePoint(0);
 80038ea:	4798      	blx	r3
    updateHearts();
 80038ec:	6823      	ldr	r3, [r4, #0]
 80038ee:	4620      	mov	r0, r4
 80038f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
}
 80038f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    updateHearts();
 80038f6:	4718      	bx	r3
 80038f8:	20001558 	.word	0x20001558

080038fc <_ZN11Screen2View14checkCollisionERKN8touchgfx5ImageES3_>:

bool Screen2View::checkCollision(const Image& img1, const Image& img2)
{
    return (img1.getX() < img2.getX() + img2.getWidth() &&
 80038fc:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
 8003900:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
{
 8003904:	b510      	push	{r4, lr}
    return (img1.getX() < img2.getX() + img2.getWidth() &&
 8003906:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 800390a:	4403      	add	r3, r0
            img1.getX() + img1.getWidth() > img2.getX() &&
            img1.getY() < img2.getY() + img2.getHeight() &&
 800390c:	429c      	cmp	r4, r3
 800390e:	da15      	bge.n	800393c <_ZN11Screen2View14checkCollisionERKN8touchgfx5ImageES3_+0x40>
            img1.getX() + img1.getWidth() > img2.getX() &&
 8003910:	f9b1 3008 	ldrsh.w	r3, [r1, #8]
 8003914:	4423      	add	r3, r4
    return (img1.getX() < img2.getX() + img2.getWidth() &&
 8003916:	4298      	cmp	r0, r3
 8003918:	da10      	bge.n	800393c <_ZN11Screen2View14checkCollisionERKN8touchgfx5ImageES3_+0x40>
            img1.getY() < img2.getY() + img2.getHeight() &&
 800391a:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 800391e:	f9b2 300a 	ldrsh.w	r3, [r2, #10]
 8003922:	f9b1 4006 	ldrsh.w	r4, [r1, #6]
 8003926:	4403      	add	r3, r0
            img1.getX() + img1.getWidth() > img2.getX() &&
 8003928:	429c      	cmp	r4, r3
 800392a:	da07      	bge.n	800393c <_ZN11Screen2View14checkCollisionERKN8touchgfx5ImageES3_+0x40>
            img1.getY() + img1.getHeight() > img2.getY());
 800392c:	f9b1 300a 	ldrsh.w	r3, [r1, #10]
 8003930:	4423      	add	r3, r4
            img1.getY() < img2.getY() + img2.getHeight() &&
 8003932:	4298      	cmp	r0, r3
 8003934:	bfac      	ite	ge
 8003936:	2000      	movge	r0, #0
 8003938:	2001      	movlt	r0, #1
}
 800393a:	bd10      	pop	{r4, pc}
            img1.getY() < img2.getY() + img2.getHeight() &&
 800393c:	2000      	movs	r0, #0
 800393e:	e7fc      	b.n	800393a <_ZN11Screen2View14checkCollisionERKN8touchgfx5ImageES3_+0x3e>

08003940 <_ZN11Screen2View14tearDownScreenEv>:
    presenter->UpdateImageX(localImageX);
 8003940:	f9b0 1364 	ldrsh.w	r1, [r0, #868]	@ 0x364
 8003944:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8003946:	f7ff bfad 	b.w	80038a4 <_ZN16Screen2Presenter12UpdateImageXEs>
	...

0800394c <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 800394c:	b510      	push	{r4, lr}
 800394e:	4b03      	ldr	r3, [pc, #12]	@ (800395c <_ZN11Screen2ViewD1Ev+0x10>)
 8003950:	6003      	str	r3, [r0, #0]
 8003952:	4604      	mov	r4, r0
 8003954:	f7ff fa01 	bl	8002d5a <_ZN15Screen2ViewBaseD1Ev>
 8003958:	4620      	mov	r0, r4
 800395a:	bd10      	pop	{r4, pc}
 800395c:	08015884 	.word	0x08015884

08003960 <_ZN11Screen2ViewD0Ev>:
 8003960:	b510      	push	{r4, lr}
 8003962:	4604      	mov	r4, r0
 8003964:	f7ff fff2 	bl	800394c <_ZN11Screen2ViewD1Ev>
 8003968:	4620      	mov	r0, r4
 800396a:	f44f 715d 	mov.w	r1, #884	@ 0x374
 800396e:	f00f fcd3 	bl	8013318 <_ZdlPvj>
 8003972:	4620      	mov	r0, r4
 8003974:	bd10      	pop	{r4, pc}
	...

08003978 <_ZN11Screen2ViewC1Ev>:
Screen2View::Screen2View() : tickCount(0), flickerCount(0), flickering(false), lives(3)
 8003978:	b510      	push	{r4, lr}
 800397a:	4604      	mov	r4, r0
 800397c:	f7ff fad4 	bl	8002f28 <_ZN15Screen2ViewBaseC1Ev>
 8003980:	4b05      	ldr	r3, [pc, #20]	@ (8003998 <_ZN11Screen2ViewC1Ev+0x20>)
 8003982:	6023      	str	r3, [r4, #0]
 8003984:	2300      	movs	r3, #0
 8003986:	e9c4 33da 	strd	r3, r3, [r4, #872]	@ 0x368
 800398a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800398e:	f8a4 3370 	strh.w	r3, [r4, #880]	@ 0x370
}
 8003992:	4620      	mov	r0, r4
 8003994:	bd10      	pop	{r4, pc}
 8003996:	bf00      	nop
 8003998:	08015884 	.word	0x08015884

0800399c <_ZN11Screen2View11setupScreenEv>:
{
 800399c:	b510      	push	{r4, lr}
 800399e:	4604      	mov	r4, r0
    localImageX = presenter->GetImageX();
 80039a0:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 80039a2:	f7ff ff82 	bl	80038aa <_ZN16Screen2Presenter9GetImageXEv>
 80039a6:	f8a4 0364 	strh.w	r0, [r4, #868]	@ 0x364
    localImageY = presenter->GetImageY();
 80039aa:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80039ac:	f7ff ff80 	bl	80038b0 <_ZN16Screen2Presenter9GetImageYEv>
 80039b0:	f8a4 0366 	strh.w	r0, [r4, #870]	@ 0x366
    Screen2ViewBase::setupScreen();
 80039b4:	4620      	mov	r0, r4
 80039b6:	f7ff f9d1 	bl	8002d5c <_ZN15Screen2ViewBase11setupScreenEv>
 80039ba:	f8d4 3364 	ldr.w	r3, [r4, #868]	@ 0x364
 80039be:	f8c4 314c 	str.w	r3, [r4, #332]	@ 0x14c
 80039c2:	230e      	movs	r3, #14
 80039c4:	f8c4 31dc 	str.w	r3, [r4, #476]	@ 0x1dc
 80039c8:	f44f 03f0 	mov.w	r3, #7864320	@ 0x780000
 80039cc:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8
 80039d0:	4b07      	ldr	r3, [pc, #28]	@ (80039f0 <_ZN11Screen2View11setupScreenEv+0x54>)
 80039d2:	f8c4 3304 	str.w	r3, [r4, #772]	@ 0x304
    updatePoint(scores);
 80039d6:	4a07      	ldr	r2, [pc, #28]	@ (80039f4 <_ZN11Screen2View11setupScreenEv+0x58>)
 80039d8:	6823      	ldr	r3, [r4, #0]
 80039da:	8811      	ldrh	r1, [r2, #0]
 80039dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039de:	4620      	mov	r0, r4
 80039e0:	4798      	blx	r3
    updateHearts();
 80039e2:	6823      	ldr	r3, [r4, #0]
 80039e4:	4620      	mov	r0, r4
 80039e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
}
 80039e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    updateHearts();
 80039ec:	4718      	bx	r3
 80039ee:	bf00      	nop
 80039f0:	00fa00a0 	.word	0x00fa00a0
 80039f4:	20001558 	.word	0x20001558

080039f8 <_ZN11Screen2View15handleTickEventEv>:
{
 80039f8:	b538      	push	{r3, r4, r5, lr}
    tickCount++;
 80039fa:	f8d0 3368 	ldr.w	r3, [r0, #872]	@ 0x368
    switch (tickCount % 5)
 80039fe:	2205      	movs	r2, #5
    tickCount++;
 8003a00:	3301      	adds	r3, #1
    switch (tickCount % 5)
 8003a02:	fbb3 f2f2 	udiv	r2, r3, r2
 8003a06:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003a0a:	1a9a      	subs	r2, r3, r2
 8003a0c:	3a01      	subs	r2, #1
{
 8003a0e:	4604      	mov	r4, r0
    tickCount++;
 8003a10:	f8c0 3368 	str.w	r3, [r0, #872]	@ 0x368
    switch (tickCount % 5)
 8003a14:	2100      	movs	r1, #0
 8003a16:	2001      	movs	r0, #1
 8003a18:	2a03      	cmp	r2, #3
 8003a1a:	d803      	bhi.n	8003a24 <_ZN11Screen2View15handleTickEventEv+0x2c>
 8003a1c:	e8df f002 	tbb	[pc, r2]
 8003a20:	87827d78 	.word	0x87827d78
        visible = vis;
 8003a24:	f884 0141 	strb.w	r0, [r4, #321]	@ 0x141
 8003a28:	f884 1091 	strb.w	r1, [r4, #145]	@ 0x91
    lamb.setY(tickCount * 2 % 320);
 8003a2c:	f44f 71a0 	mov.w	r1, #320	@ 0x140
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	fbb3 f2f1 	udiv	r2, r3, r1
 8003a36:	fb01 3312 	mls	r3, r1, r2, r3
    lamb.setX((tickCount * 2 / 320 % 4) * 60 + 15);
 8003a3a:	f002 0203 	and.w	r2, r2, #3
 8003a3e:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8003a42:	0091      	lsls	r1, r2, #2
 8003a44:	b289      	uxth	r1, r1
 8003a46:	f101 000f 	add.w	r0, r1, #15
    lamb.setY(tickCount * 2 % 320);
 8003a4a:	f8a4 31de 	strh.w	r3, [r4, #478]	@ 0x1de
    rock.setX(tickCount * 2 % 320-20);
 8003a4e:	b29b      	uxth	r3, r3
        rect.x = x;
 8003a50:	f8a4 01dc 	strh.w	r0, [r4, #476]	@ 0x1dc
 8003a54:	f1a3 0014 	sub.w	r0, r3, #20
    monster.setY(310-(tickCount * 2 % 320));
 8003a58:	f5c3 739b 	rsb	r3, r3, #310	@ 0x136
        rect.y = y;
 8003a5c:	f8a4 3306 	strh.w	r3, [r4, #774]	@ 0x306
    if (JoystickX > 150 && localImageX > -6)
 8003a60:	4b4f      	ldr	r3, [pc, #316]	@ (8003ba0 <_ZN11Screen2View15handleTickEventEv+0x1a8>)
        rect.x = x;
 8003a62:	f8a4 02d8 	strh.w	r0, [r4, #728]	@ 0x2d8
 8003a66:	881b      	ldrh	r3, [r3, #0]
    rock.setY((tickCount * 2 / 320 % 4) * 30 + 15);
 8003a68:	0052      	lsls	r2, r2, #1
 8003a6a:	320f      	adds	r2, #15
    monster.setX((tickCount * 2 / 320 % 4) * 60 + 80);
 8003a6c:	3150      	adds	r1, #80	@ 0x50
    if (JoystickX > 150 && localImageX > -6)
 8003a6e:	2b96      	cmp	r3, #150	@ 0x96
        rect.y = y;
 8003a70:	f8a4 22da 	strh.w	r2, [r4, #730]	@ 0x2da
        rect.x = x;
 8003a74:	f8a4 1304 	strh.w	r1, [r4, #772]	@ 0x304
 8003a78:	d95e      	bls.n	8003b38 <_ZN11Screen2View15handleTickEventEv+0x140>
 8003a7a:	f9b4 3364 	ldrsh.w	r3, [r4, #868]	@ 0x364
 8003a7e:	1d59      	adds	r1, r3, #5
 8003a80:	db05      	blt.n	8003a8e <_ZN11Screen2View15handleTickEventEv+0x96>
        localImageX -= 3;
 8003a82:	3b03      	subs	r3, #3
        localImageX += 3;
 8003a84:	b21b      	sxth	r3, r3
 8003a86:	f8a4 3364 	strh.w	r3, [r4, #868]	@ 0x364
 8003a8a:	f8a4 314c 	strh.w	r3, [r4, #332]	@ 0x14c
    if (JoystickY > 150 && localImageY < 234)
 8003a8e:	4b45      	ldr	r3, [pc, #276]	@ (8003ba4 <_ZN11Screen2View15handleTickEventEv+0x1ac>)
 8003a90:	881b      	ldrh	r3, [r3, #0]
 8003a92:	2b96      	cmp	r3, #150	@ 0x96
 8003a94:	d958      	bls.n	8003b48 <_ZN11Screen2View15handleTickEventEv+0x150>
 8003a96:	f9b4 3366 	ldrsh.w	r3, [r4, #870]	@ 0x366
 8003a9a:	2be9      	cmp	r3, #233	@ 0xe9
 8003a9c:	dc05      	bgt.n	8003aaa <_ZN11Screen2View15handleTickEventEv+0xb2>
        localImageY += 3;
 8003a9e:	3303      	adds	r3, #3
        localImageY -= 3;
 8003aa0:	b21b      	sxth	r3, r3
 8003aa2:	f8a4 3366 	strh.w	r3, [r4, #870]	@ 0x366
        rect.y = y;
 8003aa6:	f8a4 314e 	strh.w	r3, [r4, #334]	@ 0x14e
    if (!flickering && (checkCollision(car, lamb) || checkCollision(car, monster) || checkCollision(car, rock)))
 8003aaa:	f894 2370 	ldrb.w	r2, [r4, #880]	@ 0x370
 8003aae:	6823      	ldr	r3, [r4, #0]
 8003ab0:	b9c2      	cbnz	r2, 8003ae4 <_ZN11Screen2View15handleTickEventEv+0xec>
 8003ab2:	f504 75a4 	add.w	r5, r4, #328	@ 0x148
 8003ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ab8:	f504 72ec 	add.w	r2, r4, #472	@ 0x1d8
 8003abc:	4629      	mov	r1, r5
 8003abe:	4620      	mov	r0, r4
 8003ac0:	4798      	blx	r3
 8003ac2:	2800      	cmp	r0, #0
 8003ac4:	d048      	beq.n	8003b58 <_ZN11Screen2View15handleTickEventEv+0x160>
        lives--;
 8003ac6:	f894 3371 	ldrb.w	r3, [r4, #881]	@ 0x371
 8003aca:	3b01      	subs	r3, #1
 8003acc:	f884 3371 	strb.w	r3, [r4, #881]	@ 0x371
        updateHearts();
 8003ad0:	6823      	ldr	r3, [r4, #0]
 8003ad2:	4620      	mov	r0, r4
 8003ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ad6:	4798      	blx	r3
        flickering = true;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	f884 3370 	strb.w	r3, [r4, #880]	@ 0x370
        flickerCount = 0;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	f8c4 336c 	str.w	r3, [r4, #876]	@ 0x36c
        flickerCount++;
 8003ae4:	f8d4 336c 	ldr.w	r3, [r4, #876]	@ 0x36c
 8003ae8:	3301      	adds	r3, #1
        if (flickerCount % 2 == 0)
 8003aea:	07da      	lsls	r2, r3, #31
        flickerCount++;
 8003aec:	f8c4 336c 	str.w	r3, [r4, #876]	@ 0x36c
        if (flickerCount % 2 == 0)
 8003af0:	d405      	bmi.n	8003afe <_ZN11Screen2View15handleTickEventEv+0x106>
            car.setVisible(!car.isVisible());
 8003af2:	f894 216d 	ldrb.w	r2, [r4, #365]	@ 0x16d
 8003af6:	f082 0201 	eor.w	r2, r2, #1
        visible = vis;
 8003afa:	f884 216d 	strb.w	r2, [r4, #365]	@ 0x16d
        if (flickerCount >= 60)
 8003afe:	2b3b      	cmp	r3, #59	@ 0x3b
            flickering = false;
 8003b00:	bf81      	itttt	hi
 8003b02:	2300      	movhi	r3, #0
 8003b04:	f884 3370 	strbhi.w	r3, [r4, #880]	@ 0x370
 8003b08:	2301      	movhi	r3, #1
 8003b0a:	f884 316d 	strbhi.w	r3, [r4, #365]	@ 0x16d
    }
 8003b0e:	e039      	b.n	8003b84 <_ZN11Screen2View15handleTickEventEv+0x18c>
        visible = vis;
 8003b10:	f884 0115 	strb.w	r0, [r4, #277]	@ 0x115
 8003b14:	f884 1141 	strb.w	r1, [r4, #321]	@ 0x141
    }
 8003b18:	e788      	b.n	8003a2c <_ZN11Screen2View15handleTickEventEv+0x34>
        visible = vis;
 8003b1a:	f884 00e9 	strb.w	r0, [r4, #233]	@ 0xe9
 8003b1e:	f884 1115 	strb.w	r1, [r4, #277]	@ 0x115
    }
 8003b22:	e783      	b.n	8003a2c <_ZN11Screen2View15handleTickEventEv+0x34>
        visible = vis;
 8003b24:	f884 00bd 	strb.w	r0, [r4, #189]	@ 0xbd
 8003b28:	f884 10e9 	strb.w	r1, [r4, #233]	@ 0xe9
    }
 8003b2c:	e77e      	b.n	8003a2c <_ZN11Screen2View15handleTickEventEv+0x34>
        visible = vis;
 8003b2e:	f884 0091 	strb.w	r0, [r4, #145]	@ 0x91
 8003b32:	f884 10bd 	strb.w	r1, [r4, #189]	@ 0xbd
    }
 8003b36:	e779      	b.n	8003a2c <_ZN11Screen2View15handleTickEventEv+0x34>
    if (JoystickX < 90 && localImageX < 197)
 8003b38:	2b59      	cmp	r3, #89	@ 0x59
 8003b3a:	d8a8      	bhi.n	8003a8e <_ZN11Screen2View15handleTickEventEv+0x96>
 8003b3c:	f9b4 3364 	ldrsh.w	r3, [r4, #868]	@ 0x364
 8003b40:	2bc4      	cmp	r3, #196	@ 0xc4
 8003b42:	dca4      	bgt.n	8003a8e <_ZN11Screen2View15handleTickEventEv+0x96>
        localImageX += 3;
 8003b44:	3303      	adds	r3, #3
 8003b46:	e79d      	b.n	8003a84 <_ZN11Screen2View15handleTickEventEv+0x8c>
    if (JoystickY < 90 && localImageY > 0)
 8003b48:	2b59      	cmp	r3, #89	@ 0x59
 8003b4a:	d8ae      	bhi.n	8003aaa <_ZN11Screen2View15handleTickEventEv+0xb2>
 8003b4c:	f9b4 3366 	ldrsh.w	r3, [r4, #870]	@ 0x366
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	ddaa      	ble.n	8003aaa <_ZN11Screen2View15handleTickEventEv+0xb2>
        localImageY -= 3;
 8003b54:	3b03      	subs	r3, #3
 8003b56:	e7a3      	b.n	8003aa0 <_ZN11Screen2View15handleTickEventEv+0xa8>
    if (!flickering && (checkCollision(car, lamb) || checkCollision(car, monster) || checkCollision(car, rock)))
 8003b58:	6823      	ldr	r3, [r4, #0]
 8003b5a:	f504 7240 	add.w	r2, r4, #768	@ 0x300
 8003b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b60:	4629      	mov	r1, r5
 8003b62:	4620      	mov	r0, r4
 8003b64:	4798      	blx	r3
 8003b66:	2800      	cmp	r0, #0
 8003b68:	d1ad      	bne.n	8003ac6 <_ZN11Screen2View15handleTickEventEv+0xce>
 8003b6a:	6823      	ldr	r3, [r4, #0]
 8003b6c:	f504 7235 	add.w	r2, r4, #724	@ 0x2d4
 8003b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b72:	4629      	mov	r1, r5
 8003b74:	4620      	mov	r0, r4
 8003b76:	4798      	blx	r3
 8003b78:	2800      	cmp	r0, #0
 8003b7a:	d1a4      	bne.n	8003ac6 <_ZN11Screen2View15handleTickEventEv+0xce>
    if (flickering)
 8003b7c:	f894 3370 	ldrb.w	r3, [r4, #880]	@ 0x370
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1af      	bne.n	8003ae4 <_ZN11Screen2View15handleTickEventEv+0xec>
    updatePoint(tickCount/20);
 8003b84:	6823      	ldr	r3, [r4, #0]
 8003b86:	f8d4 1368 	ldr.w	r1, [r4, #872]	@ 0x368
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	2214      	movs	r2, #20
 8003b90:	fbb1 f1f2 	udiv	r1, r1, r2
 8003b94:	4798      	blx	r3
     *
     * @see Container::invalidate
     */
    void invalidate() const
    {
        container.invalidate();
 8003b96:	1d20      	adds	r0, r4, #4
}
 8003b98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b9c:	f00a b8cd 	b.w	800dd3a <_ZNK8touchgfx8Drawable10invalidateEv>
 8003ba0:	2000155c 	.word	0x2000155c
 8003ba4:	2000155a 	.word	0x2000155a

08003ba8 <_ZN11Screen2View11updatePointEi>:
{
 8003ba8:	b538      	push	{r3, r4, r5, lr}
 8003baa:	4604      	mov	r4, r0
    Unicode::snprintf(txtBuffer, POINT_SIZE, "%d", newValue);
 8003bac:	f500 7554 	add.w	r5, r0, #848	@ 0x350
{
 8003bb0:	460b      	mov	r3, r1
    Unicode::snprintf(txtBuffer, POINT_SIZE, "%d", newValue);
 8003bb2:	4628      	mov	r0, r5
 8003bb4:	4a05      	ldr	r2, [pc, #20]	@ (8003bcc <_ZN11Screen2View11updatePointEi+0x24>)
 8003bb6:	210a      	movs	r1, #10
 8003bb8:	f00c fc76 	bl	80104a8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8003bbc:	f8c4 524c 	str.w	r5, [r4, #588]	@ 0x24c
    point.invalidate();
 8003bc0:	f504 7001 	add.w	r0, r4, #516	@ 0x204
}
 8003bc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    point.invalidate();
 8003bc8:	f00a b8b7 	b.w	800dd3a <_ZNK8touchgfx8Drawable10invalidateEv>
 8003bcc:	08015818 	.word	0x08015818

08003bd0 <_ZN11Screen2View12updateHeartsEv>:
{
 8003bd0:	b510      	push	{r4, lr}
    switch (lives)
 8003bd2:	f890 3371 	ldrb.w	r3, [r0, #881]	@ 0x371
{
 8003bd6:	4604      	mov	r4, r0
    switch (lives)
 8003bd8:	2b03      	cmp	r3, #3
 8003bda:	d80a      	bhi.n	8003bf2 <_ZN11Screen2View12updateHeartsEv+0x22>
 8003bdc:	e8df f003 	tbb	[pc, r3]
 8003be0:	271e1702 	.word	0x271e1702
        	resetGame();
 8003be4:	6803      	ldr	r3, [r0, #0]
 8003be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be8:	4798      	blx	r3
 8003bea:	f009 f82b 	bl	800cc44 <_ZN8touchgfx11Application11getInstanceEv>
            application().gotoScreen1ScreenNoTransition();
 8003bee:	f7fe fde5 	bl	80027bc <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    heart1.invalidate();
 8003bf2:	f504 7014 	add.w	r0, r4, #592	@ 0x250
 8003bf6:	f00a f8a0 	bl	800dd3a <_ZNK8touchgfx8Drawable10invalidateEv>
    heart2.invalidate();
 8003bfa:	f504 701f 	add.w	r0, r4, #636	@ 0x27c
 8003bfe:	f00a f89c 	bl	800dd3a <_ZNK8touchgfx8Drawable10invalidateEv>
    heart3.invalidate();
 8003c02:	f504 702a 	add.w	r0, r4, #680	@ 0x2a8
}
 8003c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    heart3.invalidate();
 8003c0a:	f00a b896 	b.w	800dd3a <_ZNK8touchgfx8Drawable10invalidateEv>
        visible = vis;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	f880 3275 	strb.w	r3, [r0, #629]	@ 0x275
 8003c14:	2300      	movs	r3, #0
 8003c16:	f884 32a1 	strb.w	r3, [r4, #673]	@ 0x2a1
 8003c1a:	e005      	b.n	8003c28 <_ZN11Screen2View12updateHeartsEv+0x58>
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	f880 3275 	strb.w	r3, [r0, #629]	@ 0x275
 8003c22:	f880 32a1 	strb.w	r3, [r0, #673]	@ 0x2a1
 8003c26:	2300      	movs	r3, #0
 8003c28:	f884 32cd 	strb.w	r3, [r4, #717]	@ 0x2cd
    }
 8003c2c:	e7e1      	b.n	8003bf2 <_ZN11Screen2View12updateHeartsEv+0x22>
        visible = vis;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	f880 3275 	strb.w	r3, [r0, #629]	@ 0x275
 8003c34:	e7ef      	b.n	8003c16 <_ZN11Screen2View12updateHeartsEv+0x46>

08003c36 <ili9341_GetLcdPixelWidth>:
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
}
 8003c36:	20f0      	movs	r0, #240	@ 0xf0
 8003c38:	4770      	bx	lr

08003c3a <ili9341_GetLcdPixelHeight>:
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
}
 8003c3a:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8003c3e:	4770      	bx	lr

08003c40 <ili9341_DisplayOn>:
  LCD_IO_WriteReg(LCD_Reg);
 8003c40:	2029      	movs	r0, #41	@ 0x29
 8003c42:	f7fd be59 	b.w	80018f8 <LCD_IO_WriteReg>

08003c46 <ili9341_DisplayOff>:
 8003c46:	2028      	movs	r0, #40	@ 0x28
 8003c48:	f7fd be56 	b.w	80018f8 <LCD_IO_WriteReg>

08003c4c <ili9341_Init>:
{
 8003c4c:	b508      	push	{r3, lr}
  LCD_IO_Init();
 8003c4e:	f7fd fe27 	bl	80018a0 <LCD_IO_Init>
  LCD_IO_WriteReg(LCD_Reg);
 8003c52:	20ca      	movs	r0, #202	@ 0xca
 8003c54:	f7fd fe50 	bl	80018f8 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003c58:	20c3      	movs	r0, #195	@ 0xc3
 8003c5a:	f7fd fe31 	bl	80018c0 <LCD_IO_WriteData>
 8003c5e:	2008      	movs	r0, #8
 8003c60:	f7fd fe2e 	bl	80018c0 <LCD_IO_WriteData>
 8003c64:	2050      	movs	r0, #80	@ 0x50
 8003c66:	f7fd fe2b 	bl	80018c0 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003c6a:	20cf      	movs	r0, #207	@ 0xcf
 8003c6c:	f7fd fe44 	bl	80018f8 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003c70:	2000      	movs	r0, #0
 8003c72:	f7fd fe25 	bl	80018c0 <LCD_IO_WriteData>
 8003c76:	20c1      	movs	r0, #193	@ 0xc1
 8003c78:	f7fd fe22 	bl	80018c0 <LCD_IO_WriteData>
 8003c7c:	2030      	movs	r0, #48	@ 0x30
 8003c7e:	f7fd fe1f 	bl	80018c0 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003c82:	20ed      	movs	r0, #237	@ 0xed
 8003c84:	f7fd fe38 	bl	80018f8 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003c88:	2064      	movs	r0, #100	@ 0x64
 8003c8a:	f7fd fe19 	bl	80018c0 <LCD_IO_WriteData>
 8003c8e:	2003      	movs	r0, #3
 8003c90:	f7fd fe16 	bl	80018c0 <LCD_IO_WriteData>
 8003c94:	2012      	movs	r0, #18
 8003c96:	f7fd fe13 	bl	80018c0 <LCD_IO_WriteData>
 8003c9a:	2081      	movs	r0, #129	@ 0x81
 8003c9c:	f7fd fe10 	bl	80018c0 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003ca0:	20e8      	movs	r0, #232	@ 0xe8
 8003ca2:	f7fd fe29 	bl	80018f8 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003ca6:	2085      	movs	r0, #133	@ 0x85
 8003ca8:	f7fd fe0a 	bl	80018c0 <LCD_IO_WriteData>
 8003cac:	2000      	movs	r0, #0
 8003cae:	f7fd fe07 	bl	80018c0 <LCD_IO_WriteData>
 8003cb2:	2078      	movs	r0, #120	@ 0x78
 8003cb4:	f7fd fe04 	bl	80018c0 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003cb8:	20cb      	movs	r0, #203	@ 0xcb
 8003cba:	f7fd fe1d 	bl	80018f8 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003cbe:	2039      	movs	r0, #57	@ 0x39
 8003cc0:	f7fd fdfe 	bl	80018c0 <LCD_IO_WriteData>
 8003cc4:	202c      	movs	r0, #44	@ 0x2c
 8003cc6:	f7fd fdfb 	bl	80018c0 <LCD_IO_WriteData>
 8003cca:	2000      	movs	r0, #0
 8003ccc:	f7fd fdf8 	bl	80018c0 <LCD_IO_WriteData>
 8003cd0:	2034      	movs	r0, #52	@ 0x34
 8003cd2:	f7fd fdf5 	bl	80018c0 <LCD_IO_WriteData>
 8003cd6:	2002      	movs	r0, #2
 8003cd8:	f7fd fdf2 	bl	80018c0 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003cdc:	20f7      	movs	r0, #247	@ 0xf7
 8003cde:	f7fd fe0b 	bl	80018f8 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003ce2:	2020      	movs	r0, #32
 8003ce4:	f7fd fdec 	bl	80018c0 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003ce8:	20ea      	movs	r0, #234	@ 0xea
 8003cea:	f7fd fe05 	bl	80018f8 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003cee:	2000      	movs	r0, #0
 8003cf0:	f7fd fde6 	bl	80018c0 <LCD_IO_WriteData>
 8003cf4:	2000      	movs	r0, #0
 8003cf6:	f7fd fde3 	bl	80018c0 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003cfa:	20b1      	movs	r0, #177	@ 0xb1
 8003cfc:	f7fd fdfc 	bl	80018f8 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003d00:	2000      	movs	r0, #0
 8003d02:	f7fd fddd 	bl	80018c0 <LCD_IO_WriteData>
 8003d06:	201b      	movs	r0, #27
 8003d08:	f7fd fdda 	bl	80018c0 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003d0c:	20b6      	movs	r0, #182	@ 0xb6
 8003d0e:	f7fd fdf3 	bl	80018f8 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003d12:	200a      	movs	r0, #10
 8003d14:	f7fd fdd4 	bl	80018c0 <LCD_IO_WriteData>
 8003d18:	20a2      	movs	r0, #162	@ 0xa2
 8003d1a:	f7fd fdd1 	bl	80018c0 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003d1e:	20c0      	movs	r0, #192	@ 0xc0
 8003d20:	f7fd fdea 	bl	80018f8 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003d24:	2010      	movs	r0, #16
 8003d26:	f7fd fdcb 	bl	80018c0 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003d2a:	20c1      	movs	r0, #193	@ 0xc1
 8003d2c:	f7fd fde4 	bl	80018f8 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003d30:	2010      	movs	r0, #16
 8003d32:	f7fd fdc5 	bl	80018c0 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003d36:	20c5      	movs	r0, #197	@ 0xc5
 8003d38:	f7fd fdde 	bl	80018f8 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003d3c:	2045      	movs	r0, #69	@ 0x45
 8003d3e:	f7fd fdbf 	bl	80018c0 <LCD_IO_WriteData>
 8003d42:	2015      	movs	r0, #21
 8003d44:	f7fd fdbc 	bl	80018c0 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003d48:	20c7      	movs	r0, #199	@ 0xc7
 8003d4a:	f7fd fdd5 	bl	80018f8 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003d4e:	2090      	movs	r0, #144	@ 0x90
 8003d50:	f7fd fdb6 	bl	80018c0 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003d54:	2036      	movs	r0, #54	@ 0x36
 8003d56:	f7fd fdcf 	bl	80018f8 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003d5a:	20c8      	movs	r0, #200	@ 0xc8
 8003d5c:	f7fd fdb0 	bl	80018c0 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003d60:	20f2      	movs	r0, #242	@ 0xf2
 8003d62:	f7fd fdc9 	bl	80018f8 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003d66:	2000      	movs	r0, #0
 8003d68:	f7fd fdaa 	bl	80018c0 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003d6c:	20b0      	movs	r0, #176	@ 0xb0
 8003d6e:	f7fd fdc3 	bl	80018f8 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003d72:	20c2      	movs	r0, #194	@ 0xc2
 8003d74:	f7fd fda4 	bl	80018c0 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003d78:	20b6      	movs	r0, #182	@ 0xb6
 8003d7a:	f7fd fdbd 	bl	80018f8 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003d7e:	200a      	movs	r0, #10
 8003d80:	f7fd fd9e 	bl	80018c0 <LCD_IO_WriteData>
 8003d84:	20a7      	movs	r0, #167	@ 0xa7
 8003d86:	f7fd fd9b 	bl	80018c0 <LCD_IO_WriteData>
 8003d8a:	2027      	movs	r0, #39	@ 0x27
 8003d8c:	f7fd fd98 	bl	80018c0 <LCD_IO_WriteData>
 8003d90:	2004      	movs	r0, #4
 8003d92:	f7fd fd95 	bl	80018c0 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003d96:	202a      	movs	r0, #42	@ 0x2a
 8003d98:	f7fd fdae 	bl	80018f8 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003d9c:	2000      	movs	r0, #0
 8003d9e:	f7fd fd8f 	bl	80018c0 <LCD_IO_WriteData>
 8003da2:	2000      	movs	r0, #0
 8003da4:	f7fd fd8c 	bl	80018c0 <LCD_IO_WriteData>
 8003da8:	2000      	movs	r0, #0
 8003daa:	f7fd fd89 	bl	80018c0 <LCD_IO_WriteData>
 8003dae:	20ef      	movs	r0, #239	@ 0xef
 8003db0:	f7fd fd86 	bl	80018c0 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003db4:	202b      	movs	r0, #43	@ 0x2b
 8003db6:	f7fd fd9f 	bl	80018f8 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003dba:	2000      	movs	r0, #0
 8003dbc:	f7fd fd80 	bl	80018c0 <LCD_IO_WriteData>
 8003dc0:	2000      	movs	r0, #0
 8003dc2:	f7fd fd7d 	bl	80018c0 <LCD_IO_WriteData>
 8003dc6:	2001      	movs	r0, #1
 8003dc8:	f7fd fd7a 	bl	80018c0 <LCD_IO_WriteData>
 8003dcc:	203f      	movs	r0, #63	@ 0x3f
 8003dce:	f7fd fd77 	bl	80018c0 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003dd2:	20f6      	movs	r0, #246	@ 0xf6
 8003dd4:	f7fd fd90 	bl	80018f8 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003dd8:	2001      	movs	r0, #1
 8003dda:	f7fd fd71 	bl	80018c0 <LCD_IO_WriteData>
 8003dde:	2000      	movs	r0, #0
 8003de0:	f7fd fd6e 	bl	80018c0 <LCD_IO_WriteData>
 8003de4:	2006      	movs	r0, #6
 8003de6:	f7fd fd6b 	bl	80018c0 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003dea:	202c      	movs	r0, #44	@ 0x2c
 8003dec:	f7fd fd84 	bl	80018f8 <LCD_IO_WriteReg>
  LCD_Delay(200);
 8003df0:	20c8      	movs	r0, #200	@ 0xc8
 8003df2:	f7fd fdcf 	bl	8001994 <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 8003df6:	2026      	movs	r0, #38	@ 0x26
 8003df8:	f7fd fd7e 	bl	80018f8 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003dfc:	2001      	movs	r0, #1
 8003dfe:	f7fd fd5f 	bl	80018c0 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003e02:	20e0      	movs	r0, #224	@ 0xe0
 8003e04:	f7fd fd78 	bl	80018f8 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003e08:	200f      	movs	r0, #15
 8003e0a:	f7fd fd59 	bl	80018c0 <LCD_IO_WriteData>
 8003e0e:	2029      	movs	r0, #41	@ 0x29
 8003e10:	f7fd fd56 	bl	80018c0 <LCD_IO_WriteData>
 8003e14:	2024      	movs	r0, #36	@ 0x24
 8003e16:	f7fd fd53 	bl	80018c0 <LCD_IO_WriteData>
 8003e1a:	200c      	movs	r0, #12
 8003e1c:	f7fd fd50 	bl	80018c0 <LCD_IO_WriteData>
 8003e20:	200e      	movs	r0, #14
 8003e22:	f7fd fd4d 	bl	80018c0 <LCD_IO_WriteData>
 8003e26:	2009      	movs	r0, #9
 8003e28:	f7fd fd4a 	bl	80018c0 <LCD_IO_WriteData>
 8003e2c:	204e      	movs	r0, #78	@ 0x4e
 8003e2e:	f7fd fd47 	bl	80018c0 <LCD_IO_WriteData>
 8003e32:	2078      	movs	r0, #120	@ 0x78
 8003e34:	f7fd fd44 	bl	80018c0 <LCD_IO_WriteData>
 8003e38:	203c      	movs	r0, #60	@ 0x3c
 8003e3a:	f7fd fd41 	bl	80018c0 <LCD_IO_WriteData>
 8003e3e:	2009      	movs	r0, #9
 8003e40:	f7fd fd3e 	bl	80018c0 <LCD_IO_WriteData>
 8003e44:	2013      	movs	r0, #19
 8003e46:	f7fd fd3b 	bl	80018c0 <LCD_IO_WriteData>
 8003e4a:	2005      	movs	r0, #5
 8003e4c:	f7fd fd38 	bl	80018c0 <LCD_IO_WriteData>
 8003e50:	2017      	movs	r0, #23
 8003e52:	f7fd fd35 	bl	80018c0 <LCD_IO_WriteData>
 8003e56:	2011      	movs	r0, #17
 8003e58:	f7fd fd32 	bl	80018c0 <LCD_IO_WriteData>
 8003e5c:	2000      	movs	r0, #0
 8003e5e:	f7fd fd2f 	bl	80018c0 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003e62:	20e1      	movs	r0, #225	@ 0xe1
 8003e64:	f7fd fd48 	bl	80018f8 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003e68:	2000      	movs	r0, #0
 8003e6a:	f7fd fd29 	bl	80018c0 <LCD_IO_WriteData>
 8003e6e:	2016      	movs	r0, #22
 8003e70:	f7fd fd26 	bl	80018c0 <LCD_IO_WriteData>
 8003e74:	201b      	movs	r0, #27
 8003e76:	f7fd fd23 	bl	80018c0 <LCD_IO_WriteData>
 8003e7a:	2004      	movs	r0, #4
 8003e7c:	f7fd fd20 	bl	80018c0 <LCD_IO_WriteData>
 8003e80:	2011      	movs	r0, #17
 8003e82:	f7fd fd1d 	bl	80018c0 <LCD_IO_WriteData>
 8003e86:	2007      	movs	r0, #7
 8003e88:	f7fd fd1a 	bl	80018c0 <LCD_IO_WriteData>
 8003e8c:	2031      	movs	r0, #49	@ 0x31
 8003e8e:	f7fd fd17 	bl	80018c0 <LCD_IO_WriteData>
 8003e92:	2033      	movs	r0, #51	@ 0x33
 8003e94:	f7fd fd14 	bl	80018c0 <LCD_IO_WriteData>
 8003e98:	2042      	movs	r0, #66	@ 0x42
 8003e9a:	f7fd fd11 	bl	80018c0 <LCD_IO_WriteData>
 8003e9e:	2005      	movs	r0, #5
 8003ea0:	f7fd fd0e 	bl	80018c0 <LCD_IO_WriteData>
 8003ea4:	200c      	movs	r0, #12
 8003ea6:	f7fd fd0b 	bl	80018c0 <LCD_IO_WriteData>
 8003eaa:	200a      	movs	r0, #10
 8003eac:	f7fd fd08 	bl	80018c0 <LCD_IO_WriteData>
 8003eb0:	2028      	movs	r0, #40	@ 0x28
 8003eb2:	f7fd fd05 	bl	80018c0 <LCD_IO_WriteData>
 8003eb6:	202f      	movs	r0, #47	@ 0x2f
 8003eb8:	f7fd fd02 	bl	80018c0 <LCD_IO_WriteData>
 8003ebc:	200f      	movs	r0, #15
 8003ebe:	f7fd fcff 	bl	80018c0 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003ec2:	2011      	movs	r0, #17
 8003ec4:	f7fd fd18 	bl	80018f8 <LCD_IO_WriteReg>
  LCD_Delay(200);
 8003ec8:	20c8      	movs	r0, #200	@ 0xc8
 8003eca:	f7fd fd63 	bl	8001994 <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 8003ece:	2029      	movs	r0, #41	@ 0x29
 8003ed0:	f7fd fd12 	bl	80018f8 <LCD_IO_WriteReg>
}
 8003ed4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LCD_IO_WriteReg(LCD_Reg);
 8003ed8:	202c      	movs	r0, #44	@ 0x2c
 8003eda:	f7fd bd0d 	b.w	80018f8 <LCD_IO_WriteReg>

08003ede <ili9341_ReadID>:
{
 8003ede:	b508      	push	{r3, lr}
  LCD_IO_Init();
 8003ee0:	f7fd fcde 	bl	80018a0 <LCD_IO_Init>
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8003ee4:	2103      	movs	r1, #3
 8003ee6:	20d3      	movs	r0, #211	@ 0xd3
 8003ee8:	f7fd fd22 	bl	8001930 <LCD_IO_ReadData>
}
 8003eec:	b280      	uxth	r0, r0
 8003eee:	bd08      	pop	{r3, pc}

08003ef0 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8003ef0:	b510      	push	{r4, lr}
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8003ef2:	b2c4      	uxtb	r4, r0
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	2103      	movs	r1, #3
 8003ef8:	4620      	mov	r0, r4
 8003efa:	f7fd fc87 	bl	800180c <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8003efe:	200a      	movs	r0, #10
 8003f00:	f7fd fccc 	bl	800189c <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8003f04:	4620      	mov	r0, r4
 8003f06:	2200      	movs	r2, #0
 8003f08:	2103      	movs	r1, #3
 8003f0a:	f7fd fc7f 	bl	800180c <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
}
 8003f0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Delay(2); 
 8003f12:	2002      	movs	r0, #2
 8003f14:	f7fd bcc2 	b.w	800189c <IOE_Delay>

08003f18 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8003f18:	b538      	push	{r3, r4, r5, lr}
 8003f1a:	4604      	mov	r4, r0
  /* Initialize IO BUS layer */
  IOE_Init(); 
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8003f1c:	b2e4      	uxtb	r4, r4
  IOE_Init(); 
 8003f1e:	f7fd fc73 	bl	8001808 <IOE_Init>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8003f22:	2100      	movs	r1, #0
 8003f24:	4620      	mov	r0, r4
 8003f26:	f7fd fc89 	bl	800183c <IOE_Read>
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8003f2a:	2101      	movs	r1, #1
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8003f2c:	4605      	mov	r5, r0
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8003f2e:	4620      	mov	r0, r4
 8003f30:	f7fd fc84 	bl	800183c <IOE_Read>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8003f34:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
}
 8003f38:	b280      	uxth	r0, r0
 8003f3a:	bd38      	pop	{r3, r4, r5, pc}

08003f3c <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8003f3c:	b510      	push	{r4, lr}
  uint8_t state;
  uint8_t ret = 0;
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8003f3e:	b2c4      	uxtb	r4, r0
 8003f40:	2140      	movs	r1, #64	@ 0x40
 8003f42:	4620      	mov	r0, r4
 8003f44:	f7fd fc7a 	bl	800183c <IOE_Read>
  
  if(state > 0)
 8003f48:	0603      	lsls	r3, r0, #24
 8003f4a:	d507      	bpl.n	8003f5c <stmpe811_TS_DetectTouch+0x20>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8003f4c:	214c      	movs	r1, #76	@ 0x4c
 8003f4e:	4620      	mov	r0, r4
 8003f50:	f7fd fc74 	bl	800183c <IOE_Read>
 8003f54:	3800      	subs	r0, #0
 8003f56:	bf18      	it	ne
 8003f58:	2001      	movne	r0, #1
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
  }
  
  return ret;
}
 8003f5a:	bd10      	pop	{r4, pc}
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	214b      	movs	r1, #75	@ 0x4b
 8003f60:	4620      	mov	r0, r4
 8003f62:	f7fd fc53 	bl	800180c <IOE_Write>
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003f66:	4620      	mov	r0, r4
 8003f68:	2200      	movs	r2, #0
 8003f6a:	214b      	movs	r1, #75	@ 0x4b
 8003f6c:	f7fd fc4e 	bl	800180c <IOE_Write>
  uint8_t ret = 0;
 8003f70:	2000      	movs	r0, #0
 8003f72:	e7f2      	b.n	8003f5a <stmpe811_TS_DetectTouch+0x1e>

08003f74 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8003f74:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8003f76:	2304      	movs	r3, #4
 8003f78:	b2c4      	uxtb	r4, r0
{
 8003f7a:	460e      	mov	r6, r1
 8003f7c:	4615      	mov	r5, r2
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8003f7e:	21d7      	movs	r1, #215	@ 0xd7
 8003f80:	eb0d 0203 	add.w	r2, sp, r3
 8003f84:	4620      	mov	r0, r4
 8003f86:	f7fd fc73 	bl	8001870 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8003f8a:	9b01      	ldr	r3, [sp, #4]
 8003f8c:	ba1b      	rev	r3, r3
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8003f8e:	0d1a      	lsrs	r2, r3, #20
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8003f90:	f3c3 230b 	ubfx	r3, r3, #8, #12
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8003f94:	8032      	strh	r2, [r6, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003f96:	4620      	mov	r0, r4
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8003f98:	802b      	strh	r3, [r5, #0]
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	214b      	movs	r1, #75	@ 0x4b
 8003f9e:	f7fd fc35 	bl	800180c <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	214b      	movs	r1, #75	@ 0x4b
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	f7fd fc30 	bl	800180c <IOE_Write>
}
 8003fac:	b002      	add	sp, #8
 8003fae:	bd70      	pop	{r4, r5, r6, pc}

08003fb0 <stmpe811_Init>:
{
 8003fb0:	b510      	push	{r4, lr}
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
  {
    if(stmpe811[idx] == DeviceAddr)
 8003fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8003fdc <stmpe811_Init+0x2c>)
 8003fb4:	7813      	ldrb	r3, [r2, #0]
 8003fb6:	4298      	cmp	r0, r3
{
 8003fb8:	4604      	mov	r4, r0
    if(stmpe811[idx] == DeviceAddr)
 8003fba:	d00d      	beq.n	8003fd8 <stmpe811_Init+0x28>
 8003fbc:	7851      	ldrb	r1, [r2, #1]
 8003fbe:	4288      	cmp	r0, r1
 8003fc0:	d00a      	beq.n	8003fd8 <stmpe811_Init+0x28>
 8003fc2:	b10b      	cbz	r3, 8003fc8 <stmpe811_Init+0x18>
 8003fc4:	b941      	cbnz	r1, 8003fd8 <stmpe811_Init+0x28>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8003fc6:	2301      	movs	r3, #1
      stmpe811[empty] = DeviceAddr;
 8003fc8:	54d4      	strb	r4, [r2, r3]
      IOE_Init(); 
 8003fca:	f7fd fc1d 	bl	8001808 <IOE_Init>
      stmpe811_Reset(DeviceAddr);
 8003fce:	4620      	mov	r0, r4
}
 8003fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      stmpe811_Reset(DeviceAddr);
 8003fd4:	f7ff bf8c 	b.w	8003ef0 <stmpe811_Reset>
}
 8003fd8:	bd10      	pop	{r4, pc}
 8003fda:	bf00      	nop
 8003fdc:	200018f0 	.word	0x200018f0

08003fe0 <stmpe811_EnableGlobalIT>:
{
 8003fe0:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8003fe2:	b2c4      	uxtb	r4, r0
 8003fe4:	2109      	movs	r1, #9
 8003fe6:	4620      	mov	r0, r4
 8003fe8:	f7fd fc28 	bl	800183c <IOE_Read>
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8003fec:	f040 0201 	orr.w	r2, r0, #1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8003ff0:	b2d2      	uxtb	r2, r2
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	2109      	movs	r1, #9
}
 8003ff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8003ffa:	f7fd bc07 	b.w	800180c <IOE_Write>

08003ffe <stmpe811_DisableGlobalIT>:
{
 8003ffe:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8004000:	b2c4      	uxtb	r4, r0
 8004002:	2109      	movs	r1, #9
 8004004:	4620      	mov	r0, r4
 8004006:	f7fd fc19 	bl	800183c <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 800400a:	2109      	movs	r1, #9
 800400c:	f000 02fe 	and.w	r2, r0, #254	@ 0xfe
 8004010:	4620      	mov	r0, r4
}
 8004012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8004016:	f7fd bbf9 	b.w	800180c <IOE_Write>

0800401a <stmpe811_EnableITSource>:
{
 800401a:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800401c:	b2c4      	uxtb	r4, r0
{
 800401e:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8004020:	4620      	mov	r0, r4
 8004022:	210a      	movs	r1, #10
 8004024:	f7fd fc0a 	bl	800183c <IOE_Read>
  tmp |= Source; 
 8004028:	ea40 0205 	orr.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	4620      	mov	r0, r4
 8004030:	210a      	movs	r1, #10
}
 8004032:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8004036:	f7fd bbe9 	b.w	800180c <IOE_Write>

0800403a <stmpe811_TS_EnableIT>:
{
 800403a:	b510      	push	{r4, lr}
 800403c:	4604      	mov	r4, r0
  IOE_ITConfig();
 800403e:	f7fd fbe4 	bl	800180a <IOE_ITConfig>
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8004042:	4620      	mov	r0, r4
 8004044:	211f      	movs	r1, #31
 8004046:	f7ff ffe8 	bl	800401a <stmpe811_EnableITSource>
  stmpe811_EnableGlobalIT(DeviceAddr);
 800404a:	4620      	mov	r0, r4
}
 800404c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_EnableGlobalIT(DeviceAddr);
 8004050:	f7ff bfc6 	b.w	8003fe0 <stmpe811_EnableGlobalIT>

08004054 <stmpe811_DisableITSource>:
{
 8004054:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8004056:	b2c4      	uxtb	r4, r0
{
 8004058:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800405a:	4620      	mov	r0, r4
 800405c:	210a      	movs	r1, #10
 800405e:	f7fd fbed 	bl	800183c <IOE_Read>
  tmp &= ~Source; 
 8004062:	ea20 0205 	bic.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	4620      	mov	r0, r4
 800406a:	210a      	movs	r1, #10
}
 800406c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8004070:	f7fd bbcc 	b.w	800180c <IOE_Write>

08004074 <stmpe811_TS_DisableIT>:
{
 8004074:	b510      	push	{r4, lr}
 8004076:	4604      	mov	r4, r0
  stmpe811_DisableGlobalIT(DeviceAddr);
 8004078:	f7ff ffc1 	bl	8003ffe <stmpe811_DisableGlobalIT>
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 800407c:	4620      	mov	r0, r4
 800407e:	211f      	movs	r1, #31
}
 8004080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8004084:	f7ff bfe6 	b.w	8004054 <stmpe811_DisableITSource>

08004088 <stmpe811_ReadGITStatus>:
{
 8004088:	b510      	push	{r4, lr}
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 800408a:	b2c0      	uxtb	r0, r0
{
 800408c:	460c      	mov	r4, r1
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 800408e:	210b      	movs	r1, #11
 8004090:	f7fd fbd4 	bl	800183c <IOE_Read>
}
 8004094:	4020      	ands	r0, r4
 8004096:	bd10      	pop	{r4, pc}

08004098 <stmpe811_TS_ITStatus>:
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8004098:	211f      	movs	r1, #31
 800409a:	f7ff bff5 	b.w	8004088 <stmpe811_ReadGITStatus>

0800409e <stmpe811_ClearGlobalIT>:
{
 800409e:	460a      	mov	r2, r1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 80040a0:	b2c0      	uxtb	r0, r0
 80040a2:	210b      	movs	r1, #11
 80040a4:	f7fd bbb2 	b.w	800180c <IOE_Write>

080040a8 <stmpe811_TS_ClearIT>:
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 80040a8:	211f      	movs	r1, #31
 80040aa:	f7ff bff8 	b.w	800409e <stmpe811_ClearGlobalIT>

080040ae <stmpe811_IO_EnableAF>:
{
 80040ae:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 80040b0:	b2c4      	uxtb	r4, r0
{
 80040b2:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 80040b4:	4620      	mov	r0, r4
 80040b6:	2117      	movs	r1, #23
 80040b8:	f7fd fbc0 	bl	800183c <IOE_Read>
  tmp &= ~(uint8_t)IO_Pin;   
 80040bc:	ea20 0205 	bic.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 80040c0:	b2d2      	uxtb	r2, r2
 80040c2:	4620      	mov	r0, r4
 80040c4:	2117      	movs	r1, #23
}
 80040c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 80040ca:	f7fd bb9f 	b.w	800180c <IOE_Write>

080040ce <stmpe811_TS_Start>:
{
 80040ce:	b570      	push	{r4, r5, r6, lr}
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80040d0:	b2c4      	uxtb	r4, r0
{
 80040d2:	4606      	mov	r6, r0
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80040d4:	2104      	movs	r1, #4
 80040d6:	4620      	mov	r0, r4
 80040d8:	f7fd fbb0 	bl	800183c <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80040dc:	2104      	movs	r1, #4
 80040de:	f000 02fb 	and.w	r2, r0, #251	@ 0xfb
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80040e2:	4605      	mov	r5, r0
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80040e4:	4620      	mov	r0, r4
 80040e6:	f7fd fb91 	bl	800180c <IOE_Write>
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 80040ea:	4630      	mov	r0, r6
 80040ec:	21f0      	movs	r1, #240	@ 0xf0
 80040ee:	f7ff ffde 	bl	80040ae <stmpe811_IO_EnableAF>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80040f2:	f005 02f8 	and.w	r2, r5, #248	@ 0xf8
 80040f6:	4620      	mov	r0, r4
 80040f8:	2104      	movs	r1, #4
 80040fa:	f7fd fb87 	bl	800180c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 80040fe:	2249      	movs	r2, #73	@ 0x49
 8004100:	2120      	movs	r1, #32
 8004102:	4620      	mov	r0, r4
 8004104:	f7fd fb82 	bl	800180c <IOE_Write>
  IOE_Delay(2); 
 8004108:	2002      	movs	r0, #2
 800410a:	f7fd fbc7 	bl	800189c <IOE_Delay>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 800410e:	4620      	mov	r0, r4
 8004110:	2201      	movs	r2, #1
 8004112:	2121      	movs	r1, #33	@ 0x21
 8004114:	f7fd fb7a 	bl	800180c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8004118:	4620      	mov	r0, r4
 800411a:	229a      	movs	r2, #154	@ 0x9a
 800411c:	2141      	movs	r1, #65	@ 0x41
 800411e:	f7fd fb75 	bl	800180c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8004122:	4620      	mov	r0, r4
 8004124:	2201      	movs	r2, #1
 8004126:	214a      	movs	r1, #74	@ 0x4a
 8004128:	f7fd fb70 	bl	800180c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800412c:	4620      	mov	r0, r4
 800412e:	2201      	movs	r2, #1
 8004130:	214b      	movs	r1, #75	@ 0x4b
 8004132:	f7fd fb6b 	bl	800180c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8004136:	4620      	mov	r0, r4
 8004138:	2200      	movs	r2, #0
 800413a:	214b      	movs	r1, #75	@ 0x4b
 800413c:	f7fd fb66 	bl	800180c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8004140:	4620      	mov	r0, r4
 8004142:	2201      	movs	r2, #1
 8004144:	2156      	movs	r1, #86	@ 0x56
 8004146:	f7fd fb61 	bl	800180c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 800414a:	4620      	mov	r0, r4
 800414c:	2201      	movs	r2, #1
 800414e:	2158      	movs	r1, #88	@ 0x58
 8004150:	f7fd fb5c 	bl	800180c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8004154:	4620      	mov	r0, r4
 8004156:	2201      	movs	r2, #1
 8004158:	2140      	movs	r1, #64	@ 0x40
 800415a:	f7fd fb57 	bl	800180c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 800415e:	4620      	mov	r0, r4
 8004160:	22ff      	movs	r2, #255	@ 0xff
 8004162:	210b      	movs	r1, #11
 8004164:	f7fd fb52 	bl	800180c <IOE_Write>
}
 8004168:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  IOE_Delay(2); 
 800416c:	2002      	movs	r0, #2
 800416e:	f7fd bb95 	b.w	800189c <IOE_Delay>
	...

08004174 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004174:	4b05      	ldr	r3, [pc, #20]	@ (800418c <SystemInit+0x18>)
 8004176:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800417a:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800417e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004182:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004186:	609a      	str	r2, [r3, #8]
#endif
}
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	e000ed00 	.word	0xe000ed00

08004190 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004190:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004192:	4b0b      	ldr	r3, [pc, #44]	@ (80041c0 <HAL_Init+0x30>)
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800419a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80041a2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041ac:	2003      	movs	r0, #3
 80041ae:	f000 fa45 	bl	800463c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041b2:	2000      	movs	r0, #0
 80041b4:	f7fd fe88 	bl	8001ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041b8:	f7fd fbfa 	bl	80019b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80041bc:	2000      	movs	r0, #0
 80041be:	bd08      	pop	{r3, pc}
 80041c0:	40023c00 	.word	0x40023c00

080041c4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80041c4:	4a03      	ldr	r2, [pc, #12]	@ (80041d4 <HAL_IncTick+0x10>)
 80041c6:	4b04      	ldr	r3, [pc, #16]	@ (80041d8 <HAL_IncTick+0x14>)
 80041c8:	6811      	ldr	r1, [r2, #0]
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	440b      	add	r3, r1
 80041ce:	6013      	str	r3, [r2, #0]
}
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	200018f4 	.word	0x200018f4
 80041d8:	20000078 	.word	0x20000078

080041dc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80041dc:	4b01      	ldr	r3, [pc, #4]	@ (80041e4 <HAL_GetTick+0x8>)
 80041de:	6818      	ldr	r0, [r3, #0]
}
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	200018f4 	.word	0x200018f4

080041e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041e8:	b538      	push	{r3, r4, r5, lr}
 80041ea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80041ec:	f7ff fff6 	bl	80041dc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041f0:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80041f2:	bf1c      	itt	ne
 80041f4:	4b05      	ldrne	r3, [pc, #20]	@ (800420c <HAL_Delay+0x24>)
 80041f6:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80041f8:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80041fa:	bf18      	it	ne
 80041fc:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80041fe:	f7ff ffed 	bl	80041dc <HAL_GetTick>
 8004202:	1b43      	subs	r3, r0, r5
 8004204:	42a3      	cmp	r3, r4
 8004206:	d3fa      	bcc.n	80041fe <HAL_Delay+0x16>
  {
  }
}
 8004208:	bd38      	pop	{r3, r4, r5, pc}
 800420a:	bf00      	nop
 800420c:	20000078 	.word	0x20000078

08004210 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004210:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;

  /* Check ADC handle */
  if (hadc == NULL)
 8004212:	4604      	mov	r4, r0
 8004214:	2800      	cmp	r0, #0
 8004216:	f000 809b 	beq.w	8004350 <HAL_ADC_Init+0x140>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800421a:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800421c:	b925      	cbnz	r5, 8004228 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800421e:	f7fd fbff 	bl	8001a20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004222:	6465      	str	r5, [r4, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004224:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004228:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800422a:	06db      	lsls	r3, r3, #27
 800422c:	f100 808e 	bmi.w	800434c <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004230:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004232:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004236:	f023 0302 	bic.w	r3, r3, #2
 800423a:	f043 0302 	orr.w	r3, r3, #2
 800423e:	6423      	str	r3, [r4, #64]	@ 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004240:	4b44      	ldr	r3, [pc, #272]	@ (8004354 <HAL_ADC_Init+0x144>)
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8004248:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	6861      	ldr	r1, [r4, #4]
 800424e:	430a      	orrs	r2, r1
 8004250:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004252:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004254:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800425c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004264:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004266:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004268:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800426a:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800426e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	430a      	orrs	r2, r1
 8004274:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004276:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004278:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800427a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800427e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004280:	689a      	ldr	r2, [r3, #8]
 8004282:	430a      	orrs	r2, r1
 8004284:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004286:	4934      	ldr	r1, [pc, #208]	@ (8004358 <HAL_ADC_Init+0x148>)
 8004288:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800428a:	428a      	cmp	r2, r1
 800428c:	d052      	beq.n	8004334 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800428e:	6899      	ldr	r1, [r3, #8]
 8004290:	f021 6170 	bic.w	r1, r1, #251658240	@ 0xf000000
 8004294:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004296:	6899      	ldr	r1, [r3, #8]
 8004298:	430a      	orrs	r2, r1
 800429a:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800429c:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800429e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80042a0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80042a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80042aa:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80042ac:	689a      	ldr	r2, [r3, #8]
 80042ae:	f022 0202 	bic.w	r2, r2, #2
 80042b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80042b4:	689a      	ldr	r2, [r3, #8]
 80042b6:	7e21      	ldrb	r1, [r4, #24]
 80042b8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80042bc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80042be:	f894 2020 	ldrb.w	r2, [r4, #32]
 80042c2:	2a00      	cmp	r2, #0
 80042c4:	d03e      	beq.n	8004344 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80042c6:	685a      	ldr	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80042c8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80042ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80042d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	3901      	subs	r1, #1
 80042dc:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80042e0:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80042e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80042e4:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80042e6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80042ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80042ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042ee:	3901      	subs	r1, #1
 80042f0:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80042f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80042fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 8004304:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8004308:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800430a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800430c:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800430e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004312:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004314:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8004316:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004318:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 800431c:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800431e:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8004320:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004322:	f023 0303 	bic.w	r3, r3, #3
 8004326:	f043 0301 	orr.w	r3, r3, #1
 800432a:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_UNLOCK(hadc);
 800432c:	2300      	movs	r3, #0
 800432e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8004332:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004334:	689a      	ldr	r2, [r3, #8]
 8004336:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800433a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800433c:	689a      	ldr	r2, [r3, #8]
 800433e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004342:	e7b2      	b.n	80042aa <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800434a:	e7c9      	b.n	80042e0 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 800434c:	2001      	movs	r0, #1
 800434e:	e7ed      	b.n	800432c <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8004350:	2001      	movs	r0, #1
 8004352:	e7ee      	b.n	8004332 <HAL_ADC_Init+0x122>
 8004354:	40012300 	.word	0x40012300
 8004358:	0f000001 	.word	0x0f000001

0800435c <HAL_ADC_Start>:
{
 800435c:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 800435e:	2300      	movs	r3, #0
 8004360:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8004362:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004366:	2b01      	cmp	r3, #1
 8004368:	d069      	beq.n	800443e <HAL_ADC_Start+0xe2>
 800436a:	2301      	movs	r3, #1
 800436c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004370:	6803      	ldr	r3, [r0, #0]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	07d2      	lsls	r2, r2, #31
 8004376:	d50b      	bpl.n	8004390 <HAL_ADC_Start+0x34>
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004378:	689a      	ldr	r2, [r3, #8]
 800437a:	07d1      	lsls	r1, r2, #31
 800437c:	d41a      	bmi.n	80043b4 <HAL_ADC_Start+0x58>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800437e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8004380:	f043 0310 	orr.w	r3, r3, #16
 8004384:	6403      	str	r3, [r0, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004386:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8004388:	f043 0301 	orr.w	r3, r3, #1
 800438c:	6443      	str	r3, [r0, #68]	@ 0x44
 800438e:	e04c      	b.n	800442a <HAL_ADC_Start+0xce>
    __HAL_ADC_ENABLE(hadc);
 8004390:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004392:	492c      	ldr	r1, [pc, #176]	@ (8004444 <HAL_ADC_Start+0xe8>)
    __HAL_ADC_ENABLE(hadc);
 8004394:	f042 0201 	orr.w	r2, r2, #1
 8004398:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800439a:	4a2b      	ldr	r2, [pc, #172]	@ (8004448 <HAL_ADC_Start+0xec>)
 800439c:	6812      	ldr	r2, [r2, #0]
 800439e:	fbb2 f2f1 	udiv	r2, r2, r1
 80043a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 80043a6:	9201      	str	r2, [sp, #4]
    while (counter != 0U)
 80043a8:	9a01      	ldr	r2, [sp, #4]
 80043aa:	2a00      	cmp	r2, #0
 80043ac:	d0e4      	beq.n	8004378 <HAL_ADC_Start+0x1c>
      counter--;
 80043ae:	9a01      	ldr	r2, [sp, #4]
 80043b0:	3a01      	subs	r2, #1
 80043b2:	e7f8      	b.n	80043a6 <HAL_ADC_Start+0x4a>
    ADC_STATE_CLR_SET(hadc->State,
 80043b4:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80043b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80043ba:	f022 0201 	bic.w	r2, r2, #1
 80043be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043c2:	6402      	str	r2, [r0, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	0552      	lsls	r2, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80043c8:	bf41      	itttt	mi
 80043ca:	6c02      	ldrmi	r2, [r0, #64]	@ 0x40
 80043cc:	f422 5240 	bicmi.w	r2, r2, #12288	@ 0x3000
 80043d0:	f442 5280 	orrmi.w	r2, r2, #4096	@ 0x1000
 80043d4:	6402      	strmi	r2, [r0, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043d6:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80043d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80043dc:	bf1c      	itt	ne
 80043de:	6c42      	ldrne	r2, [r0, #68]	@ 0x44
 80043e0:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80043e4:	6442      	str	r2, [r0, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 80043e6:	2200      	movs	r2, #0
 80043e8:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80043ec:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80043f0:	601a      	str	r2, [r3, #0]
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80043f2:	4a16      	ldr	r2, [pc, #88]	@ (800444c <HAL_ADC_Start+0xf0>)
 80043f4:	6851      	ldr	r1, [r2, #4]
 80043f6:	f011 0f1f 	tst.w	r1, #31
 80043fa:	4915      	ldr	r1, [pc, #84]	@ (8004450 <HAL_ADC_Start+0xf4>)
 80043fc:	d11c      	bne.n	8004438 <HAL_ADC_Start+0xdc>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80043fe:	428b      	cmp	r3, r1
 8004400:	d007      	beq.n	8004412 <HAL_ADC_Start+0xb6>
 8004402:	f501 7180 	add.w	r1, r1, #256	@ 0x100
 8004406:	428b      	cmp	r3, r1
 8004408:	d10c      	bne.n	8004424 <HAL_ADC_Start+0xc8>
 800440a:	6852      	ldr	r2, [r2, #4]
 800440c:	f012 0f1f 	tst.w	r2, #31
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004410:	d10b      	bne.n	800442a <HAL_ADC_Start+0xce>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8004418:	d107      	bne.n	800442a <HAL_ADC_Start+0xce>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004420:	609a      	str	r2, [r3, #8]
 8004422:	e002      	b.n	800442a <HAL_ADC_Start+0xce>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004424:	490b      	ldr	r1, [pc, #44]	@ (8004454 <HAL_ADC_Start+0xf8>)
 8004426:	428b      	cmp	r3, r1
 8004428:	d002      	beq.n	8004430 <HAL_ADC_Start+0xd4>
  return HAL_OK;
 800442a:	2000      	movs	r0, #0
}
 800442c:	b002      	add	sp, #8
 800442e:	4770      	bx	lr
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004430:	6852      	ldr	r2, [r2, #4]
 8004432:	f012 0f10 	tst.w	r2, #16
 8004436:	e7eb      	b.n	8004410 <HAL_ADC_Start+0xb4>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004438:	428b      	cmp	r3, r1
 800443a:	d1f6      	bne.n	800442a <HAL_ADC_Start+0xce>
 800443c:	e7e9      	b.n	8004412 <HAL_ADC_Start+0xb6>
  __HAL_LOCK(hadc);
 800443e:	2002      	movs	r0, #2
 8004440:	e7f4      	b.n	800442c <HAL_ADC_Start+0xd0>
 8004442:	bf00      	nop
 8004444:	000f4240 	.word	0x000f4240
 8004448:	20000074 	.word	0x20000074
 800444c:	40012300 	.word	0x40012300
 8004450:	40012000 	.word	0x40012000
 8004454:	40012200 	.word	0x40012200

08004458 <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004458:	6803      	ldr	r3, [r0, #0]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	0552      	lsls	r2, r2, #21
{
 800445e:	b570      	push	{r4, r5, r6, lr}
 8004460:	4604      	mov	r4, r0
 8004462:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004464:	d50b      	bpl.n	800447e <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004466:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004468:	05de      	lsls	r6, r3, #23
 800446a:	d508      	bpl.n	800447e <HAL_ADC_PollForConversion+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800446c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800446e:	f043 0320 	orr.w	r3, r3, #32
 8004472:	6403      	str	r3, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hadc);
 8004474:	2300      	movs	r3, #0
 8004476:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 800447a:	2001      	movs	r0, #1
}
 800447c:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 800447e:	f7ff fead 	bl	80041dc <HAL_GetTick>
 8004482:	4606      	mov	r6, r0
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004484:	6823      	ldr	r3, [r4, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	0791      	lsls	r1, r2, #30
 800448a:	d50c      	bpl.n	80044a6 <HAL_ADC_PollForConversion+0x4e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800448c:	f06f 0212 	mvn.w	r2, #18
 8004490:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004492:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004494:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004498:	6422      	str	r2, [r4, #64]	@ 0x40
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800449a:	689a      	ldr	r2, [r3, #8]
 800449c:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 80044a0:	d017      	beq.n	80044d2 <HAL_ADC_PollForConversion+0x7a>
  return HAL_OK;
 80044a2:	2000      	movs	r0, #0
 80044a4:	e7ea      	b.n	800447c <HAL_ADC_PollForConversion+0x24>
    if (Timeout != HAL_MAX_DELAY)
 80044a6:	1c68      	adds	r0, r5, #1
 80044a8:	d0ed      	beq.n	8004486 <HAL_ADC_PollForConversion+0x2e>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80044aa:	b965      	cbnz	r5, 80044c6 <HAL_ADC_PollForConversion+0x6e>
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80044ac:	6823      	ldr	r3, [r4, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f013 0302 	ands.w	r3, r3, #2
 80044b4:	d1e6      	bne.n	8004484 <HAL_ADC_PollForConversion+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80044b6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hadc);
 80044b8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80044bc:	f042 0204 	orr.w	r2, r2, #4
 80044c0:	6422      	str	r2, [r4, #64]	@ 0x40
          return HAL_TIMEOUT;
 80044c2:	2003      	movs	r0, #3
 80044c4:	e7da      	b.n	800447c <HAL_ADC_PollForConversion+0x24>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80044c6:	f7ff fe89 	bl	80041dc <HAL_GetTick>
 80044ca:	1b80      	subs	r0, r0, r6
 80044cc:	42a8      	cmp	r0, r5
 80044ce:	d8ed      	bhi.n	80044ac <HAL_ADC_PollForConversion+0x54>
 80044d0:	e7d8      	b.n	8004484 <HAL_ADC_PollForConversion+0x2c>
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80044d2:	7e22      	ldrb	r2, [r4, #24]
 80044d4:	2a00      	cmp	r2, #0
 80044d6:	d1e4      	bne.n	80044a2 <HAL_ADC_PollForConversion+0x4a>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80044d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80044da:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 80044de:	d002      	beq.n	80044e6 <HAL_ADC_PollForConversion+0x8e>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80044e0:	689b      	ldr	r3, [r3, #8]
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80044e2:	055a      	lsls	r2, r3, #21
 80044e4:	d4dd      	bmi.n	80044a2 <HAL_ADC_PollForConversion+0x4a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80044e6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80044e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044ec:	6423      	str	r3, [r4, #64]	@ 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80044f0:	04db      	lsls	r3, r3, #19
 80044f2:	d4d6      	bmi.n	80044a2 <HAL_ADC_PollForConversion+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80044f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80044f6:	f043 0301 	orr.w	r3, r3, #1
 80044fa:	6423      	str	r3, [r4, #64]	@ 0x40
 80044fc:	e7d1      	b.n	80044a2 <HAL_ADC_PollForConversion+0x4a>

080044fe <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80044fe:	6803      	ldr	r3, [r0, #0]
 8004500:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
}
 8004502:	4770      	bx	lr

08004504 <HAL_ADC_ConfigChannel>:
{
 8004504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8004506:	2300      	movs	r3, #0
 8004508:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800450a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800450e:	2b01      	cmp	r3, #1
{
 8004510:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8004512:	f000 8086 	beq.w	8004622 <HAL_ADC_ConfigChannel+0x11e>
 8004516:	2301      	movs	r3, #1
 8004518:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 800451c:	6808      	ldr	r0, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800451e:	682b      	ldr	r3, [r5, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004520:	688e      	ldr	r6, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004522:	2809      	cmp	r0, #9
 8004524:	b284      	uxth	r4, r0
 8004526:	d933      	bls.n	8004590 <HAL_ADC_ConfigChannel+0x8c>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004528:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800452c:	68df      	ldr	r7, [r3, #12]
 800452e:	3a1e      	subs	r2, #30
 8004530:	f04f 0c07 	mov.w	ip, #7
 8004534:	fa0c fc02 	lsl.w	ip, ip, r2
 8004538:	ea27 070c 	bic.w	r7, r7, ip
 800453c:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800453e:	68df      	ldr	r7, [r3, #12]
 8004540:	fa06 f202 	lsl.w	r2, r6, r2
 8004544:	433a      	orrs	r2, r7
 8004546:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8004548:	6849      	ldr	r1, [r1, #4]
 800454a:	2906      	cmp	r1, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800454c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  if (sConfig->Rank < 7U)
 8004550:	d82d      	bhi.n	80045ae <HAL_ADC_ConfigChannel+0xaa>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004552:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004554:	3a05      	subs	r2, #5
 8004556:	261f      	movs	r6, #31
 8004558:	4096      	lsls	r6, r2
 800455a:	ea21 0106 	bic.w	r1, r1, r6
 800455e:	6359      	str	r1, [r3, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004560:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004562:	fa04 f202 	lsl.w	r2, r4, r2
 8004566:	430a      	orrs	r2, r1
 8004568:	635a      	str	r2, [r3, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800456a:	4a2f      	ldr	r2, [pc, #188]	@ (8004628 <HAL_ADC_ConfigChannel+0x124>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d10a      	bne.n	8004586 <HAL_ADC_ConfigChannel+0x82>
 8004570:	2812      	cmp	r0, #18
 8004572:	d137      	bne.n	80045e4 <HAL_ADC_ConfigChannel+0xe0>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004574:	4b2d      	ldr	r3, [pc, #180]	@ (800462c <HAL_ADC_ConfigChannel+0x128>)
 8004576:	685a      	ldr	r2, [r3, #4]
 8004578:	f422 0200 	bic.w	r2, r2, #8388608	@ 0x800000
 800457c:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8004584:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hadc);
 8004586:	2000      	movs	r0, #0
 8004588:	f885 003c 	strb.w	r0, [r5, #60]	@ 0x3c
}
 800458c:	b003      	add	sp, #12
 800458e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004590:	691a      	ldr	r2, [r3, #16]
 8004592:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 8004596:	2707      	movs	r7, #7
 8004598:	fa07 f70c 	lsl.w	r7, r7, ip
 800459c:	ea22 0207 	bic.w	r2, r2, r7
 80045a0:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80045a2:	691a      	ldr	r2, [r3, #16]
 80045a4:	fa06 f60c 	lsl.w	r6, r6, ip
 80045a8:	4316      	orrs	r6, r2
 80045aa:	611e      	str	r6, [r3, #16]
 80045ac:	e7cc      	b.n	8004548 <HAL_ADC_ConfigChannel+0x44>
  else if (sConfig->Rank < 13U)
 80045ae:	290c      	cmp	r1, #12
 80045b0:	f04f 011f 	mov.w	r1, #31
 80045b4:	d80b      	bhi.n	80045ce <HAL_ADC_ConfigChannel+0xca>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80045b6:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
 80045b8:	3a23      	subs	r2, #35	@ 0x23
 80045ba:	4091      	lsls	r1, r2
 80045bc:	ea26 0101 	bic.w	r1, r6, r1
 80045c0:	6319      	str	r1, [r3, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80045c2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80045c4:	fa04 f202 	lsl.w	r2, r4, r2
 80045c8:	430a      	orrs	r2, r1
 80045ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80045cc:	e7cd      	b.n	800456a <HAL_ADC_ConfigChannel+0x66>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80045ce:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
 80045d0:	3a41      	subs	r2, #65	@ 0x41
 80045d2:	4091      	lsls	r1, r2
 80045d4:	ea26 0101 	bic.w	r1, r6, r1
 80045d8:	62d9      	str	r1, [r3, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80045da:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80045dc:	4094      	lsls	r4, r2
 80045de:	430c      	orrs	r4, r1
 80045e0:	62dc      	str	r4, [r3, #44]	@ 0x2c
 80045e2:	e7c2      	b.n	800456a <HAL_ADC_ConfigChannel+0x66>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80045e4:	4b12      	ldr	r3, [pc, #72]	@ (8004630 <HAL_ADC_ConfigChannel+0x12c>)
 80045e6:	4298      	cmp	r0, r3
 80045e8:	d001      	beq.n	80045ee <HAL_ADC_ConfigChannel+0xea>
 80045ea:	2811      	cmp	r0, #17
 80045ec:	d1cb      	bne.n	8004586 <HAL_ADC_ConfigChannel+0x82>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80045ee:	4b0f      	ldr	r3, [pc, #60]	@ (800462c <HAL_ADC_ConfigChannel+0x128>)
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 80045f6:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80045fe:	605a      	str	r2, [r3, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004600:	4b0b      	ldr	r3, [pc, #44]	@ (8004630 <HAL_ADC_ConfigChannel+0x12c>)
 8004602:	4298      	cmp	r0, r3
 8004604:	d1bf      	bne.n	8004586 <HAL_ADC_ConfigChannel+0x82>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004606:	4b0b      	ldr	r3, [pc, #44]	@ (8004634 <HAL_ADC_ConfigChannel+0x130>)
 8004608:	4a0b      	ldr	r2, [pc, #44]	@ (8004638 <HAL_ADC_ConfigChannel+0x134>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004610:	220a      	movs	r2, #10
 8004612:	4353      	muls	r3, r2
        counter--;
 8004614:	9301      	str	r3, [sp, #4]
      while (counter != 0U)
 8004616:	9b01      	ldr	r3, [sp, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0b4      	beq.n	8004586 <HAL_ADC_ConfigChannel+0x82>
        counter--;
 800461c:	9b01      	ldr	r3, [sp, #4]
 800461e:	3b01      	subs	r3, #1
 8004620:	e7f8      	b.n	8004614 <HAL_ADC_ConfigChannel+0x110>
  __HAL_LOCK(hadc);
 8004622:	2002      	movs	r0, #2
 8004624:	e7b2      	b.n	800458c <HAL_ADC_ConfigChannel+0x88>
 8004626:	bf00      	nop
 8004628:	40012000 	.word	0x40012000
 800462c:	40012300 	.word	0x40012300
 8004630:	10000012 	.word	0x10000012
 8004634:	20000074 	.word	0x20000074
 8004638:	000f4240 	.word	0x000f4240

0800463c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800463c:	4907      	ldr	r1, [pc, #28]	@ (800465c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800463e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004640:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004644:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004646:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004648:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800464c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800464e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004650:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004654:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8004658:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800465a:	4770      	bx	lr
 800465c:	e000ed00 	.word	0xe000ed00

08004660 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004660:	4b16      	ldr	r3, [pc, #88]	@ (80046bc <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004662:	b530      	push	{r4, r5, lr}
 8004664:	68dc      	ldr	r4, [r3, #12]
 8004666:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800466a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800466e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004670:	2b04      	cmp	r3, #4
 8004672:	bf28      	it	cs
 8004674:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004676:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004678:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800467c:	bf8c      	ite	hi
 800467e:	3c03      	subhi	r4, #3
 8004680:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004682:	fa05 f303 	lsl.w	r3, r5, r3
 8004686:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800468a:	40a5      	lsls	r5, r4
 800468c:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004690:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8004692:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004694:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004698:	bfac      	ite	ge
 800469a:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800469e:	4a08      	ldrlt	r2, [pc, #32]	@ (80046c0 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046a0:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046a4:	bfb8      	it	lt
 80046a6:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	bfaa      	itet	ge
 80046ae:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046b2:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046b4:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80046b8:	bd30      	pop	{r4, r5, pc}
 80046ba:	bf00      	nop
 80046bc:	e000ed00 	.word	0xe000ed00
 80046c0:	e000ed14 	.word	0xe000ed14

080046c4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80046c4:	2800      	cmp	r0, #0
 80046c6:	db07      	blt.n	80046d8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046c8:	0941      	lsrs	r1, r0, #5
 80046ca:	4a04      	ldr	r2, [pc, #16]	@ (80046dc <HAL_NVIC_EnableIRQ+0x18>)
 80046cc:	f000 001f 	and.w	r0, r0, #31
 80046d0:	2301      	movs	r3, #1
 80046d2:	4083      	lsls	r3, r0
 80046d4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	e000e100 	.word	0xe000e100

080046e0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80046e0:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80046e2:	4604      	mov	r4, r0
 80046e4:	b150      	cbz	r0, 80046fc <HAL_CRC_Init+0x1c>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80046e6:	7943      	ldrb	r3, [r0, #5]
 80046e8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80046ec:	b913      	cbnz	r3, 80046f4 <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80046ee:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80046f0:	f7fd f97e 	bl	80019f0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80046f4:	2301      	movs	r3, #1
 80046f6:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 80046f8:	2000      	movs	r0, #0
}
 80046fa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80046fc:	2001      	movs	r0, #1
 80046fe:	e7fc      	b.n	80046fa <HAL_CRC_Init+0x1a>

08004700 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004700:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004702:	4604      	mov	r4, r0
 8004704:	b330      	cbz	r0, 8004754 <HAL_DMA2D_Init+0x54>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004706:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800470a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800470e:	b91b      	cbnz	r3, 8004718 <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004710:	f880 2038 	strb.w	r2, [r0, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004714:	f7fd f9dc 	bl	8001ad0 <HAL_DMA2D_MspInit>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004718:	6822      	ldr	r2, [r4, #0]
 800471a:	6861      	ldr	r1, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800471c:	2302      	movs	r3, #2
 800471e:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004722:	6813      	ldr	r3, [r2, #0]
 8004724:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8004728:	430b      	orrs	r3, r1
 800472a:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800472c:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800472e:	68a1      	ldr	r1, [r4, #8]
 8004730:	f023 0307 	bic.w	r3, r3, #7
 8004734:	430b      	orrs	r3, r1
 8004736:	6353      	str	r3, [r2, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004738:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800473a:	68e1      	ldr	r1, [r4, #12]
 800473c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004740:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004744:	430b      	orrs	r3, r1
 8004746:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004748:	2000      	movs	r0, #0

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800474a:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800474c:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800474e:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39

  return HAL_OK;
}
 8004752:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004754:	2001      	movs	r0, #1
 8004756:	e7fc      	b.n	8004752 <HAL_DMA2D_Init+0x52>

08004758 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 8004758:	4770      	bx	lr

0800475a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 800475a:	4770      	bx	lr

0800475c <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800475c:	6803      	ldr	r3, [r0, #0]
{
 800475e:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004760:	685e      	ldr	r6, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004762:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004764:	07f2      	lsls	r2, r6, #31
{
 8004766:	4604      	mov	r4, r0
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004768:	d514      	bpl.n	8004794 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 800476a:	05e9      	lsls	r1, r5, #23
 800476c:	d512      	bpl.n	8004794 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004774:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004776:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004778:	f042 0201 	orr.w	r2, r2, #1
 800477c:	63c2      	str	r2, [r0, #60]	@ 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800477e:	2201      	movs	r2, #1
 8004780:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004782:	2304      	movs	r3, #4
 8004784:	f880 3039 	strb.w	r3, [r0, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8004788:	2300      	movs	r3, #0
 800478a:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 800478e:	6943      	ldr	r3, [r0, #20]
 8004790:	b103      	cbz	r3, 8004794 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8004792:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004794:	06b2      	lsls	r2, r6, #26
 8004796:	d516      	bpl.n	80047c6 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004798:	04ab      	lsls	r3, r5, #18
 800479a:	d514      	bpl.n	80047c6 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800479c:	6823      	ldr	r3, [r4, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80047a4:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80047a6:	2220      	movs	r2, #32
 80047a8:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80047aa:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80047ac:	f043 0302 	orr.w	r3, r3, #2
 80047b0:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80047b2:	2304      	movs	r3, #4
 80047b4:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 80047b8:	2300      	movs	r3, #0
 80047ba:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 80047be:	6963      	ldr	r3, [r4, #20]
 80047c0:	b10b      	cbz	r3, 80047c6 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 80047c2:	4620      	mov	r0, r4
 80047c4:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80047c6:	0730      	lsls	r0, r6, #28
 80047c8:	d516      	bpl.n	80047f8 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80047ca:	0529      	lsls	r1, r5, #20
 80047cc:	d514      	bpl.n	80047f8 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80047ce:	6823      	ldr	r3, [r4, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80047d8:	2208      	movs	r2, #8
 80047da:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80047dc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80047de:	f043 0304 	orr.w	r3, r3, #4
 80047e2:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80047e4:	2304      	movs	r3, #4
 80047e6:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 80047ea:	2300      	movs	r3, #0
 80047ec:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferErrorCallback != NULL)
 80047f0:	6963      	ldr	r3, [r4, #20]
 80047f2:	b10b      	cbz	r3, 80047f8 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 80047f4:	4620      	mov	r0, r4
 80047f6:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80047f8:	0772      	lsls	r2, r6, #29
 80047fa:	d50b      	bpl.n	8004814 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 80047fc:	056b      	lsls	r3, r5, #21
 80047fe:	d509      	bpl.n	8004814 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004800:	6823      	ldr	r3, [r4, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004808:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800480a:	2204      	movs	r2, #4
 800480c:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800480e:	4620      	mov	r0, r4
 8004810:	f7ff ffa2 	bl	8004758 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004814:	07b0      	lsls	r0, r6, #30
 8004816:	d514      	bpl.n	8004842 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004818:	05a9      	lsls	r1, r5, #22
 800481a:	d512      	bpl.n	8004842 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800481c:	6823      	ldr	r3, [r4, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004824:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004826:	2202      	movs	r2, #2
 8004828:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800482a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800482c:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800482e:	2301      	movs	r3, #1
 8004830:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8004834:	2300      	movs	r3, #0
 8004836:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      if (hdma2d->XferCpltCallback != NULL)
 800483a:	6923      	ldr	r3, [r4, #16]
 800483c:	b10b      	cbz	r3, 8004842 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 800483e:	4620      	mov	r0, r4
 8004840:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004842:	06f2      	lsls	r2, r6, #27
 8004844:	d513      	bpl.n	800486e <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004846:	04eb      	lsls	r3, r5, #19
 8004848:	d511      	bpl.n	800486e <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800484a:	6823      	ldr	r3, [r4, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004852:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004854:	2210      	movs	r2, #16
 8004856:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004858:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800485a:	63e3      	str	r3, [r4, #60]	@ 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800485c:	2301      	movs	r3, #1
 800485e:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
      __HAL_UNLOCK(hdma2d);
 8004862:	2300      	movs	r3, #0
 8004864:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004868:	4620      	mov	r0, r4
 800486a:	f7ff ff76 	bl	800475a <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 800486e:	bd70      	pop	{r4, r5, r6, pc}

08004870 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004870:	b5f0      	push	{r4, r5, r6, r7, lr}
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004872:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8004876:	2a01      	cmp	r2, #1
{
 8004878:	4603      	mov	r3, r0
 800487a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hdma2d);
 800487e:	d02b      	beq.n	80048d8 <HAL_DMA2D_ConfigLayer+0x68>
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004886:	f883 0039 	strb.w	r0, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800488a:	eb03 1201 	add.w	r2, r3, r1, lsl #4
 800488e:	e9d2 4007 	ldrd	r4, r0, [r2, #28]
 8004892:	6a55      	ldr	r5, [r2, #36]	@ 0x24
 8004894:	4f17      	ldr	r7, [pc, #92]	@ (80048f4 <HAL_DMA2D_ConfigLayer+0x84>)
 8004896:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800489a:	3c09      	subs	r4, #9
 800489c:	2c01      	cmp	r4, #1
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800489e:	bf9c      	itt	ls
 80048a0:	f005 427f 	andls.w	r2, r5, #4278190080	@ 0xff000000
 80048a4:	4310      	orrls	r0, r2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80048a6:	ea4f 1601 	mov.w	r6, r1, lsl #4

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80048aa:	681a      	ldr	r2, [r3, #0]
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80048ac:	bf88      	it	hi
 80048ae:	ea40 6005 	orrhi.w	r0, r0, r5, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80048b2:	b991      	cbnz	r1, 80048da <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80048b4:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 80048b6:	4039      	ands	r1, r7
 80048b8:	4301      	orrs	r1, r0
 80048ba:	6251      	str	r1, [r2, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80048bc:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80048be:	6999      	ldr	r1, [r3, #24]
 80048c0:	6191      	str	r1, [r2, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80048c2:	d803      	bhi.n	80048cc <HAL_DMA2D_ConfigLayer+0x5c>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80048c4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80048c6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80048ca:	6291      	str	r1, [r2, #40]	@ 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80048cc:	2201      	movs	r2, #1

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80048ce:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80048d0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  __HAL_UNLOCK(hdma2d);
 80048d4:	f883 0038 	strb.w	r0, [r3, #56]	@ 0x38

  return HAL_OK;
}
 80048d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80048da:	69d1      	ldr	r1, [r2, #28]
 80048dc:	4039      	ands	r1, r7
 80048de:	4301      	orrs	r1, r0
 80048e0:	61d1      	str	r1, [r2, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80048e2:	1999      	adds	r1, r3, r6
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80048e4:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80048e6:	6989      	ldr	r1, [r1, #24]
 80048e8:	6111      	str	r1, [r2, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80048ea:	bf9c      	itt	ls
 80048ec:	f025 457f 	bicls.w	r5, r5, #4278190080	@ 0xff000000
 80048f0:	6215      	strls	r5, [r2, #32]
 80048f2:	e7eb      	b.n	80048cc <HAL_DMA2D_ConfigLayer+0x5c>
 80048f4:	00fcfff0 	.word	0x00fcfff0

080048f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048fc:	f8df 91bc 	ldr.w	r9, [pc, #444]	@ 8004abc <HAL_GPIO_Init+0x1c4>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004900:	4a6c      	ldr	r2, [pc, #432]	@ (8004ab4 <HAL_GPIO_Init+0x1bc>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004902:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004904:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8004906:	2401      	movs	r4, #1
 8004908:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800490a:	ea04 0605 	and.w	r6, r4, r5
    if(iocurrent == ioposition)
 800490e:	43ac      	bics	r4, r5
 8004910:	f040 80b7 	bne.w	8004a82 <HAL_GPIO_Init+0x18a>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004914:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004916:	2703      	movs	r7, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004918:	f005 0403 	and.w	r4, r5, #3
 800491c:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004920:	fa07 fc08 	lsl.w	ip, r7, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004924:	1e67      	subs	r7, r4, #1
 8004926:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004928:	ea6f 0c0c 	mvn.w	ip, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800492c:	d834      	bhi.n	8004998 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 800492e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004930:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004934:	68cf      	ldr	r7, [r1, #12]
 8004936:	fa07 f708 	lsl.w	r7, r7, r8
 800493a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800493e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004940:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004942:	ea27 0e06 	bic.w	lr, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004946:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800494a:	409f      	lsls	r7, r3
 800494c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8004950:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8004952:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004954:	ea07 0e0c 	and.w	lr, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004958:	688f      	ldr	r7, [r1, #8]
 800495a:	fa07 f708 	lsl.w	r7, r7, r8
 800495e:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004962:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8004964:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004966:	d119      	bne.n	800499c <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8004968:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800496c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004970:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8004974:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004978:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800497c:	f04f 0e0f 	mov.w	lr, #15
 8004980:	fa0e fe0b 	lsl.w	lr, lr, fp
 8004984:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004988:	690f      	ldr	r7, [r1, #16]
 800498a:	fa07 f70b 	lsl.w	r7, r7, fp
 800498e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8004992:	f8ca 7020 	str.w	r7, [sl, #32]
 8004996:	e001      	b.n	800499c <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004998:	2c03      	cmp	r4, #3
 800499a:	d1da      	bne.n	8004952 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 800499c:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800499e:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049a2:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049a6:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049a8:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80049ac:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049ae:	d068      	beq.n	8004a82 <HAL_GPIO_Init+0x18a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049b0:	2400      	movs	r4, #0
 80049b2:	9401      	str	r4, [sp, #4]
 80049b4:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 80049b8:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 80049bc:	f8c9 4044 	str.w	r4, [r9, #68]	@ 0x44
 80049c0:	f8d9 4044 	ldr.w	r4, [r9, #68]	@ 0x44
 80049c4:	f023 0703 	bic.w	r7, r3, #3
 80049c8:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 80049cc:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 80049d0:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 80049d4:	9401      	str	r4, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049d6:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049da:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80049dc:	f8d7 e008 	ldr.w	lr, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049e0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80049e4:	240f      	movs	r4, #15
 80049e6:	fa04 f40c 	lsl.w	r4, r4, ip
 80049ea:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049ee:	4c32      	ldr	r4, [pc, #200]	@ (8004ab8 <HAL_GPIO_Init+0x1c0>)
 80049f0:	42a0      	cmp	r0, r4
 80049f2:	d04d      	beq.n	8004a90 <HAL_GPIO_Init+0x198>
 80049f4:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80049f8:	42a0      	cmp	r0, r4
 80049fa:	d04b      	beq.n	8004a94 <HAL_GPIO_Init+0x19c>
 80049fc:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004a00:	42a0      	cmp	r0, r4
 8004a02:	d049      	beq.n	8004a98 <HAL_GPIO_Init+0x1a0>
 8004a04:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004a08:	42a0      	cmp	r0, r4
 8004a0a:	d047      	beq.n	8004a9c <HAL_GPIO_Init+0x1a4>
 8004a0c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004a10:	42a0      	cmp	r0, r4
 8004a12:	d045      	beq.n	8004aa0 <HAL_GPIO_Init+0x1a8>
 8004a14:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004a18:	42a0      	cmp	r0, r4
 8004a1a:	d043      	beq.n	8004aa4 <HAL_GPIO_Init+0x1ac>
 8004a1c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004a20:	42a0      	cmp	r0, r4
 8004a22:	d041      	beq.n	8004aa8 <HAL_GPIO_Init+0x1b0>
 8004a24:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004a28:	42a0      	cmp	r0, r4
 8004a2a:	d03f      	beq.n	8004aac <HAL_GPIO_Init+0x1b4>
 8004a2c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004a30:	42a0      	cmp	r0, r4
 8004a32:	d03d      	beq.n	8004ab0 <HAL_GPIO_Init+0x1b8>
 8004a34:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8004a38:	42a0      	cmp	r0, r4
 8004a3a:	bf14      	ite	ne
 8004a3c:	240a      	movne	r4, #10
 8004a3e:	2409      	moveq	r4, #9
 8004a40:	fa04 f40c 	lsl.w	r4, r4, ip
 8004a44:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a48:	60bc      	str	r4, [r7, #8]
        temp = EXTI->RTSR;
 8004a4a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8004a4c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a4e:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 8004a52:	bf0c      	ite	eq
 8004a54:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8004a56:	4334      	orrne	r4, r6
        }
        EXTI->RTSR = temp;
 8004a58:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8004a5a:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a5c:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        temp &= ~((uint32_t)iocurrent);
 8004a60:	bf0c      	ite	eq
 8004a62:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8004a64:	4334      	orrne	r4, r6
        }
        EXTI->FTSR = temp;
 8004a66:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8004a68:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a6a:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 8004a6e:	bf0c      	ite	eq
 8004a70:	403c      	andeq	r4, r7
        {
          temp |= iocurrent;
 8004a72:	4334      	orrne	r4, r6
        }
        EXTI->EMR = temp;
 8004a74:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a76:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a78:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8004a7a:	bf54      	ite	pl
 8004a7c:	403c      	andpl	r4, r7
        {
          temp |= iocurrent;
 8004a7e:	4334      	orrmi	r4, r6
        }
        EXTI->IMR = temp;
 8004a80:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a82:	3301      	adds	r3, #1
 8004a84:	2b10      	cmp	r3, #16
 8004a86:	f47f af3d 	bne.w	8004904 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8004a8a:	b003      	add	sp, #12
 8004a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a90:	2400      	movs	r4, #0
 8004a92:	e7d5      	b.n	8004a40 <HAL_GPIO_Init+0x148>
 8004a94:	2401      	movs	r4, #1
 8004a96:	e7d3      	b.n	8004a40 <HAL_GPIO_Init+0x148>
 8004a98:	2402      	movs	r4, #2
 8004a9a:	e7d1      	b.n	8004a40 <HAL_GPIO_Init+0x148>
 8004a9c:	2403      	movs	r4, #3
 8004a9e:	e7cf      	b.n	8004a40 <HAL_GPIO_Init+0x148>
 8004aa0:	2404      	movs	r4, #4
 8004aa2:	e7cd      	b.n	8004a40 <HAL_GPIO_Init+0x148>
 8004aa4:	2405      	movs	r4, #5
 8004aa6:	e7cb      	b.n	8004a40 <HAL_GPIO_Init+0x148>
 8004aa8:	2406      	movs	r4, #6
 8004aaa:	e7c9      	b.n	8004a40 <HAL_GPIO_Init+0x148>
 8004aac:	2407      	movs	r4, #7
 8004aae:	e7c7      	b.n	8004a40 <HAL_GPIO_Init+0x148>
 8004ab0:	2408      	movs	r4, #8
 8004ab2:	e7c5      	b.n	8004a40 <HAL_GPIO_Init+0x148>
 8004ab4:	40013c00 	.word	0x40013c00
 8004ab8:	40020000 	.word	0x40020000
 8004abc:	40023800 	.word	0x40023800

08004ac0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ac0:	6903      	ldr	r3, [r0, #16]
 8004ac2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004ac4:	bf14      	ite	ne
 8004ac6:	2001      	movne	r0, #1
 8004ac8:	2000      	moveq	r0, #0
 8004aca:	4770      	bx	lr

08004acc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004acc:	b10a      	cbz	r2, 8004ad2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ace:	6181      	str	r1, [r0, #24]
  }
}
 8004ad0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ad2:	0409      	lsls	r1, r1, #16
 8004ad4:	e7fb      	b.n	8004ace <HAL_GPIO_WritePin+0x2>

08004ad6 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ad6:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ad8:	ea01 0203 	and.w	r2, r1, r3
 8004adc:	ea21 0103 	bic.w	r1, r1, r3
 8004ae0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004ae4:	6181      	str	r1, [r0, #24]
}
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004ae8:	4770      	bx	lr
	...

08004aec <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004aec:	4a04      	ldr	r2, [pc, #16]	@ (8004b00 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8004aee:	6951      	ldr	r1, [r2, #20]
 8004af0:	4201      	tst	r1, r0
{
 8004af2:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004af4:	d002      	beq.n	8004afc <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004af6:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004af8:	f7ff fff6 	bl	8004ae8 <HAL_GPIO_EXTI_Callback>
}
 8004afc:	bd08      	pop	{r3, pc}
 8004afe:	bf00      	nop
 8004b00:	40013c00 	.word	0x40013c00

08004b04 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b04:	6801      	ldr	r1, [r0, #0]
 8004b06:	694b      	ldr	r3, [r1, #20]
 8004b08:	f413 6380 	ands.w	r3, r3, #1024	@ 0x400
 8004b0c:	f04f 0200 	mov.w	r2, #0
 8004b10:	d010      	beq.n	8004b34 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b12:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8004b16:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b18:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b1a:	6302      	str	r2, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b1c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b20:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b24:	6c03      	ldr	r3, [r0, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b26:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b2a:	f043 0304 	orr.w	r3, r3, #4
 8004b2e:	6403      	str	r3, [r0, #64]	@ 0x40

    return HAL_ERROR;
 8004b30:	2001      	movs	r0, #1
 8004b32:	4770      	bx	lr
  }
  return HAL_OK;
 8004b34:	4618      	mov	r0, r3
}
 8004b36:	4770      	bx	lr

08004b38 <I2C_WaitOnFlagUntilTimeout>:
{
 8004b38:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8004b3c:	4606      	mov	r6, r0
 8004b3e:	460f      	mov	r7, r1
 8004b40:	4691      	mov	r9, r2
 8004b42:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b44:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004b48:	6833      	ldr	r3, [r6, #0]
 8004b4a:	f1ba 0f01 	cmp.w	sl, #1
 8004b4e:	bf0c      	ite	eq
 8004b50:	695c      	ldreq	r4, [r3, #20]
 8004b52:	699c      	ldrne	r4, [r3, #24]
 8004b54:	ea27 0404 	bic.w	r4, r7, r4
 8004b58:	b2a4      	uxth	r4, r4
 8004b5a:	fab4 f484 	clz	r4, r4
 8004b5e:	0964      	lsrs	r4, r4, #5
 8004b60:	45a1      	cmp	r9, r4
 8004b62:	d001      	beq.n	8004b68 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8004b64:	2000      	movs	r0, #0
 8004b66:	e017      	b.n	8004b98 <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8004b68:	1c6a      	adds	r2, r5, #1
 8004b6a:	d0ee      	beq.n	8004b4a <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b6c:	f7ff fb36 	bl	80041dc <HAL_GetTick>
 8004b70:	9b08      	ldr	r3, [sp, #32]
 8004b72:	1ac0      	subs	r0, r0, r3
 8004b74:	42a8      	cmp	r0, r5
 8004b76:	d801      	bhi.n	8004b7c <I2C_WaitOnFlagUntilTimeout+0x44>
 8004b78:	2d00      	cmp	r5, #0
 8004b7a:	d1e5      	bne.n	8004b48 <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b7c:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b7e:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b80:	6333      	str	r3, [r6, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b82:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b86:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b8a:	6c32      	ldr	r2, [r6, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004b8c:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b90:	f042 0220 	orr.w	r2, r2, #32
 8004b94:	6432      	str	r2, [r6, #64]	@ 0x40
        return HAL_ERROR;
 8004b96:	2001      	movs	r0, #1
}
 8004b98:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08004b9c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8004b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ba0:	4604      	mov	r4, r0
 8004ba2:	460f      	mov	r7, r1
 8004ba4:	4616      	mov	r6, r2
 8004ba6:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ba8:	6825      	ldr	r5, [r4, #0]
 8004baa:	6968      	ldr	r0, [r5, #20]
 8004bac:	ea27 0000 	bic.w	r0, r7, r0
 8004bb0:	b280      	uxth	r0, r0
 8004bb2:	b1c0      	cbz	r0, 8004be6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bb4:	696b      	ldr	r3, [r5, #20]
 8004bb6:	055a      	lsls	r2, r3, #21
 8004bb8:	d517      	bpl.n	8004bea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bba:	682b      	ldr	r3, [r5, #0]
 8004bbc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004bc0:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bc2:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8004bc6:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bc8:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bce:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bd2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bd6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004bd8:	f043 0304 	orr.w	r3, r3, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bdc:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004bde:	2300      	movs	r3, #0
 8004be0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8004be4:	2001      	movs	r0, #1
}
 8004be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8004bea:	1c73      	adds	r3, r6, #1
 8004bec:	d0dd      	beq.n	8004baa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bee:	f7ff faf5 	bl	80041dc <HAL_GetTick>
 8004bf2:	eba0 0008 	sub.w	r0, r0, r8
 8004bf6:	42b0      	cmp	r0, r6
 8004bf8:	d801      	bhi.n	8004bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
 8004bfa:	2e00      	cmp	r6, #0
 8004bfc:	d1d4      	bne.n	8004ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bfe:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c00:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c02:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c04:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c08:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	e7e4      	b.n	8004bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08004c12 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8004c12:	b570      	push	{r4, r5, r6, lr}
 8004c14:	4604      	mov	r4, r0
 8004c16:	460d      	mov	r5, r1
 8004c18:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c1a:	6823      	ldr	r3, [r4, #0]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	061b      	lsls	r3, r3, #24
 8004c20:	d501      	bpl.n	8004c26 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8004c22:	2000      	movs	r0, #0
 8004c24:	e01a      	b.n	8004c5c <I2C_WaitOnTXEFlagUntilTimeout+0x4a>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c26:	4620      	mov	r0, r4
 8004c28:	f7ff ff6c 	bl	8004b04 <I2C_IsAcknowledgeFailed>
 8004c2c:	b9a8      	cbnz	r0, 8004c5a <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8004c2e:	1c6a      	adds	r2, r5, #1
 8004c30:	d0f3      	beq.n	8004c1a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c32:	f7ff fad3 	bl	80041dc <HAL_GetTick>
 8004c36:	1b80      	subs	r0, r0, r6
 8004c38:	42a8      	cmp	r0, r5
 8004c3a:	d801      	bhi.n	8004c40 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8004c3c:	2d00      	cmp	r5, #0
 8004c3e:	d1ec      	bne.n	8004c1a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c40:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c42:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c44:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c46:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c4a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c4e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004c50:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c54:	f042 0220 	orr.w	r2, r2, #32
 8004c58:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8004c5a:	2001      	movs	r0, #1
}
 8004c5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004c60 <I2C_RequestMemoryWrite>:
{
 8004c60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c64:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c66:	6802      	ldr	r2, [r0, #0]
{
 8004c68:	b085      	sub	sp, #20
 8004c6a:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
 8004c6e:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c70:	6813      	ldr	r3, [r2, #0]
 8004c72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c76:	6013      	str	r3, [r2, #0]
{
 8004c78:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c7a:	463b      	mov	r3, r7
 8004c7c:	f8cd 8000 	str.w	r8, [sp]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
{
 8004c86:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c88:	f7ff ff56 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 8004c8c:	6823      	ldr	r3, [r4, #0]
 8004c8e:	b138      	cbz	r0, 8004ca0 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	05db      	lsls	r3, r3, #23
 8004c94:	d502      	bpl.n	8004c9c <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c9a:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8004c9c:	2603      	movs	r6, #3
 8004c9e:	e020      	b.n	8004ce2 <I2C_RequestMemoryWrite+0x82>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ca0:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 8004ca4:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ca6:	491a      	ldr	r1, [pc, #104]	@ (8004d10 <I2C_RequestMemoryWrite+0xb0>)
 8004ca8:	4643      	mov	r3, r8
 8004caa:	463a      	mov	r2, r7
 8004cac:	4620      	mov	r0, r4
 8004cae:	f7ff ff75 	bl	8004b9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cb2:	b9a8      	cbnz	r0, 8004ce0 <I2C_RequestMemoryWrite+0x80>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cb4:	6823      	ldr	r3, [r4, #0]
 8004cb6:	9003      	str	r0, [sp, #12]
 8004cb8:	695a      	ldr	r2, [r3, #20]
 8004cba:	9203      	str	r2, [sp, #12]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cc0:	4642      	mov	r2, r8
 8004cc2:	4639      	mov	r1, r7
 8004cc4:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cc6:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cc8:	f7ff ffa3 	bl	8004c12 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ccc:	4606      	mov	r6, r0
 8004cce:	b160      	cbz	r0, 8004cea <I2C_RequestMemoryWrite+0x8a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cd0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004cd2:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cd4:	bf01      	itttt	eq
 8004cd6:	6822      	ldreq	r2, [r4, #0]
 8004cd8:	6813      	ldreq	r3, [r2, #0]
 8004cda:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8004cde:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 8004ce0:	2601      	movs	r6, #1
}
 8004ce2:	4630      	mov	r0, r6
 8004ce4:	b005      	add	sp, #20
 8004ce6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cea:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cee:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cf0:	d102      	bne.n	8004cf8 <I2C_RequestMemoryWrite+0x98>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cf2:	b2ed      	uxtb	r5, r5
 8004cf4:	611d      	str	r5, [r3, #16]
 8004cf6:	e7f4      	b.n	8004ce2 <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004cf8:	0a2a      	lsrs	r2, r5, #8
 8004cfa:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cfc:	4639      	mov	r1, r7
 8004cfe:	4642      	mov	r2, r8
 8004d00:	4620      	mov	r0, r4
 8004d02:	f7ff ff86 	bl	8004c12 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d06:	2800      	cmp	r0, #0
 8004d08:	d1e2      	bne.n	8004cd0 <I2C_RequestMemoryWrite+0x70>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d0a:	6823      	ldr	r3, [r4, #0]
 8004d0c:	e7f1      	b.n	8004cf2 <I2C_RequestMemoryWrite+0x92>
 8004d0e:	bf00      	nop
 8004d10:	00010002 	.word	0x00010002

08004d14 <I2C_RequestMemoryRead>:
{
 8004d14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d18:	469a      	mov	sl, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d1a:	6803      	ldr	r3, [r0, #0]
{
 8004d1c:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004d24:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d26:	681a      	ldr	r2, [r3, #0]
{
 8004d28:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d30:	601a      	str	r2, [r3, #0]
{
 8004d32:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d34:	463b      	mov	r3, r7
 8004d36:	f8cd 8000 	str.w	r8, [sp]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
{
 8004d40:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d42:	f7ff fef9 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 8004d46:	6823      	ldr	r3, [r4, #0]
 8004d48:	b138      	cbz	r0, 8004d5a <I2C_RequestMemoryRead+0x46>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d4a:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d4c:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d4e:	bf44      	itt	mi
 8004d50:	f44f 7300 	movmi.w	r3, #512	@ 0x200
 8004d54:	6423      	strmi	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8004d56:	2003      	movs	r0, #3
 8004d58:	e021      	b.n	8004d9e <I2C_RequestMemoryRead+0x8a>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d5a:	fa5f f986 	uxtb.w	r9, r6
 8004d5e:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 8004d62:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d64:	492b      	ldr	r1, [pc, #172]	@ (8004e14 <I2C_RequestMemoryRead+0x100>)
 8004d66:	4643      	mov	r3, r8
 8004d68:	463a      	mov	r2, r7
 8004d6a:	4620      	mov	r0, r4
 8004d6c:	f7ff ff16 	bl	8004b9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d70:	b9a0      	cbnz	r0, 8004d9c <I2C_RequestMemoryRead+0x88>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d72:	6823      	ldr	r3, [r4, #0]
 8004d74:	9003      	str	r0, [sp, #12]
 8004d76:	695a      	ldr	r2, [r3, #20]
 8004d78:	9203      	str	r2, [sp, #12]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d7e:	4642      	mov	r2, r8
 8004d80:	4639      	mov	r1, r7
 8004d82:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d84:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d86:	f7ff ff44 	bl	8004c12 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d8a:	b158      	cbz	r0, 8004da4 <I2C_RequestMemoryRead+0x90>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004d8e:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d90:	bf01      	itttt	eq
 8004d92:	6822      	ldreq	r2, [r4, #0]
 8004d94:	6813      	ldreq	r3, [r2, #0]
 8004d96:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8004d9a:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 8004d9c:	2001      	movs	r0, #1
}
 8004d9e:	b004      	add	sp, #16
 8004da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004da4:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da8:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004daa:	d11a      	bne.n	8004de2 <I2C_RequestMemoryRead+0xce>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dac:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dae:	4642      	mov	r2, r8
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004db0:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004db2:	4639      	mov	r1, r7
 8004db4:	4620      	mov	r0, r4
 8004db6:	f7ff ff2c 	bl	8004c12 <I2C_WaitOnTXEFlagUntilTimeout>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	2800      	cmp	r0, #0
 8004dbe:	d1e5      	bne.n	8004d8c <I2C_RequestMemoryRead+0x78>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dc0:	6821      	ldr	r1, [r4, #0]
 8004dc2:	680b      	ldr	r3, [r1, #0]
 8004dc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dc8:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004dca:	4620      	mov	r0, r4
 8004dcc:	f8cd 8000 	str.w	r8, [sp]
 8004dd0:	463b      	mov	r3, r7
 8004dd2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004dd6:	f7ff feaf 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 8004dda:	6822      	ldr	r2, [r4, #0]
 8004ddc:	b160      	cbz	r0, 8004df8 <I2C_RequestMemoryRead+0xe4>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dde:	6813      	ldr	r3, [r2, #0]
 8004de0:	e7b4      	b.n	8004d4c <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004de2:	0a2a      	lsrs	r2, r5, #8
 8004de4:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004de6:	4639      	mov	r1, r7
 8004de8:	4642      	mov	r2, r8
 8004dea:	4620      	mov	r0, r4
 8004dec:	f7ff ff11 	bl	8004c12 <I2C_WaitOnTXEFlagUntilTimeout>
 8004df0:	2800      	cmp	r0, #0
 8004df2:	d1cb      	bne.n	8004d8c <I2C_RequestMemoryRead+0x78>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004df4:	6823      	ldr	r3, [r4, #0]
 8004df6:	e7d9      	b.n	8004dac <I2C_RequestMemoryRead+0x98>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004df8:	f049 0301 	orr.w	r3, r9, #1
 8004dfc:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dfe:	4905      	ldr	r1, [pc, #20]	@ (8004e14 <I2C_RequestMemoryRead+0x100>)
 8004e00:	4643      	mov	r3, r8
 8004e02:	463a      	mov	r2, r7
 8004e04:	4620      	mov	r0, r4
 8004e06:	f7ff fec9 	bl	8004b9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e0a:	3800      	subs	r0, #0
 8004e0c:	bf18      	it	ne
 8004e0e:	2001      	movne	r0, #1
 8004e10:	e7c5      	b.n	8004d9e <I2C_RequestMemoryRead+0x8a>
 8004e12:	bf00      	nop
 8004e14:	00010002 	.word	0x00010002

08004e18 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8004e18:	b570      	push	{r4, r5, r6, lr}
 8004e1a:	4604      	mov	r4, r0
 8004e1c:	460d      	mov	r5, r1
 8004e1e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e20:	6823      	ldr	r3, [r4, #0]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	075b      	lsls	r3, r3, #29
 8004e26:	d501      	bpl.n	8004e2c <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8004e28:	2000      	movs	r0, #0
 8004e2a:	e01a      	b.n	8004e62 <I2C_WaitOnBTFFlagUntilTimeout+0x4a>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	f7ff fe69 	bl	8004b04 <I2C_IsAcknowledgeFailed>
 8004e32:	b9a8      	cbnz	r0, 8004e60 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8004e34:	1c6a      	adds	r2, r5, #1
 8004e36:	d0f3      	beq.n	8004e20 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e38:	f7ff f9d0 	bl	80041dc <HAL_GetTick>
 8004e3c:	1b80      	subs	r0, r0, r6
 8004e3e:	42a8      	cmp	r0, r5
 8004e40:	d801      	bhi.n	8004e46 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8004e42:	2d00      	cmp	r5, #0
 8004e44:	d1ec      	bne.n	8004e20 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e46:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e48:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e4a:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e4c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e50:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e54:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004e56:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e5a:	f042 0220 	orr.w	r2, r2, #32
 8004e5e:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8004e60:	2001      	movs	r0, #1
}
 8004e62:	bd70      	pop	{r4, r5, r6, pc}

08004e64 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8004e64:	b570      	push	{r4, r5, r6, lr}
 8004e66:	4604      	mov	r4, r0
 8004e68:	460d      	mov	r5, r1
 8004e6a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e6c:	6821      	ldr	r1, [r4, #0]
 8004e6e:	694b      	ldr	r3, [r1, #20]
 8004e70:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 8004e74:	d001      	beq.n	8004e7a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8004e76:	2000      	movs	r0, #0
 8004e78:	e011      	b.n	8004e9e <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e7a:	694a      	ldr	r2, [r1, #20]
 8004e7c:	06d2      	lsls	r2, r2, #27
 8004e7e:	d50f      	bpl.n	8004ea0 <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e80:	f06f 0210 	mvn.w	r2, #16
 8004e84:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e86:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e88:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e8a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e8e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004e92:	6c23      	ldr	r3, [r4, #64]	@ 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e94:	6423      	str	r3, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8004e96:	2300      	movs	r3, #0
 8004e98:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8004e9c:	2001      	movs	r0, #1
}
 8004e9e:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea0:	f7ff f99c 	bl	80041dc <HAL_GetTick>
 8004ea4:	1b80      	subs	r0, r0, r6
 8004ea6:	42a8      	cmp	r0, r5
 8004ea8:	d801      	bhi.n	8004eae <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004eaa:	2d00      	cmp	r5, #0
 8004eac:	d1de      	bne.n	8004e6c <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004eae:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8004eb0:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004eb2:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004eb4:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eb8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ebc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	e7e8      	b.n	8004e94 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
	...

08004ec4 <HAL_I2C_Init>:
{
 8004ec4:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8004ec6:	4604      	mov	r4, r0
 8004ec8:	b908      	cbnz	r0, 8004ece <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8004eca:	2001      	movs	r0, #1
}
 8004ecc:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ece:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004ed2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004ed6:	b91b      	cbnz	r3, 8004ee0 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8004ed8:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8004edc:	f7fc fe1a 	bl	8001b14 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ee0:	2324      	movs	r3, #36	@ 0x24
 8004ee2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8004ee6:	6823      	ldr	r3, [r4, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	f022 0201 	bic.w	r2, r2, #1
 8004eee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ef6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004efe:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f00:	f000 fe70 	bl	8005be4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f04:	4b3f      	ldr	r3, [pc, #252]	@ (8005004 <HAL_I2C_Init+0x140>)
 8004f06:	6865      	ldr	r5, [r4, #4]
 8004f08:	429d      	cmp	r5, r3
 8004f0a:	bf94      	ite	ls
 8004f0c:	4b3e      	ldrls	r3, [pc, #248]	@ (8005008 <HAL_I2C_Init+0x144>)
 8004f0e:	4b3f      	ldrhi	r3, [pc, #252]	@ (800500c <HAL_I2C_Init+0x148>)
 8004f10:	4298      	cmp	r0, r3
 8004f12:	bf8c      	ite	hi
 8004f14:	2300      	movhi	r3, #0
 8004f16:	2301      	movls	r3, #1
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1d6      	bne.n	8004eca <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f1c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f1e:	4e39      	ldr	r6, [pc, #228]	@ (8005004 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f20:	6851      	ldr	r1, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8004f22:	4b3b      	ldr	r3, [pc, #236]	@ (8005010 <HAL_I2C_Init+0x14c>)
 8004f24:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f28:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8004f2c:	4319      	orrs	r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f2e:	42b5      	cmp	r5, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f30:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f32:	bf88      	it	hi
 8004f34:	f44f 7696 	movhi.w	r6, #300	@ 0x12c
 8004f38:	6a11      	ldr	r1, [r2, #32]
 8004f3a:	bf88      	it	hi
 8004f3c:	4373      	mulhi	r3, r6
 8004f3e:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8004f42:	bf84      	itt	hi
 8004f44:	f44f 767a 	movhi.w	r6, #1000	@ 0x3e8
 8004f48:	fbb3 f3f6 	udivhi	r3, r3, r6
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	430b      	orrs	r3, r1
 8004f50:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f52:	69d1      	ldr	r1, [r2, #28]
 8004f54:	1e43      	subs	r3, r0, #1
 8004f56:	482b      	ldr	r0, [pc, #172]	@ (8005004 <HAL_I2C_Init+0x140>)
 8004f58:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8004f5c:	4285      	cmp	r5, r0
 8004f5e:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8004f62:	d832      	bhi.n	8004fca <HAL_I2C_Init+0x106>
 8004f64:	006d      	lsls	r5, r5, #1
 8004f66:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8004f6a:	fbb3 f3f5 	udiv	r3, r3, r5
 8004f6e:	3301      	adds	r3, #1
 8004f70:	4203      	tst	r3, r0
 8004f72:	d042      	beq.n	8004ffa <HAL_I2C_Init+0x136>
 8004f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f78:	4319      	orrs	r1, r3
 8004f7a:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004f7c:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8004f80:	6811      	ldr	r1, [r2, #0]
 8004f82:	4303      	orrs	r3, r0
 8004f84:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 8004f88:	430b      	orrs	r3, r1
 8004f8a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f8c:	6891      	ldr	r1, [r2, #8]
 8004f8e:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8004f92:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 8004f96:	4303      	orrs	r3, r0
 8004f98:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8004f9c:	430b      	orrs	r3, r1
 8004f9e:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004fa0:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8004fa4:	68d1      	ldr	r1, [r2, #12]
 8004fa6:	4303      	orrs	r3, r0
 8004fa8:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8004fac:	430b      	orrs	r3, r1
 8004fae:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8004fb0:	6813      	ldr	r3, [r2, #0]
 8004fb2:	f043 0301 	orr.w	r3, r3, #1
 8004fb6:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fb8:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8004fba:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fbc:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004fbe:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fc2:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc4:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  return HAL_OK;
 8004fc8:	e780      	b.n	8004ecc <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004fca:	68a0      	ldr	r0, [r4, #8]
 8004fcc:	b950      	cbnz	r0, 8004fe4 <HAL_I2C_Init+0x120>
 8004fce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004fd2:	fbb3 f3f5 	udiv	r3, r3, r5
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fdc:	b17b      	cbz	r3, 8004ffe <HAL_I2C_Init+0x13a>
 8004fde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fe2:	e7c9      	b.n	8004f78 <HAL_I2C_Init+0xb4>
 8004fe4:	2019      	movs	r0, #25
 8004fe6:	4368      	muls	r0, r5
 8004fe8:	fbb3 f3f0 	udiv	r3, r3, r0
 8004fec:	3301      	adds	r3, #1
 8004fee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ff2:	b123      	cbz	r3, 8004ffe <HAL_I2C_Init+0x13a>
 8004ff4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ff8:	e7be      	b.n	8004f78 <HAL_I2C_Init+0xb4>
 8004ffa:	2304      	movs	r3, #4
 8004ffc:	e7bc      	b.n	8004f78 <HAL_I2C_Init+0xb4>
 8004ffe:	2301      	movs	r3, #1
 8005000:	e7ba      	b.n	8004f78 <HAL_I2C_Init+0xb4>
 8005002:	bf00      	nop
 8005004:	000186a0 	.word	0x000186a0
 8005008:	001e847f 	.word	0x001e847f
 800500c:	003d08ff 	.word	0x003d08ff
 8005010:	000f4240 	.word	0x000f4240

08005014 <HAL_I2C_Mem_Write>:
{
 8005014:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005018:	4604      	mov	r4, r0
 800501a:	4699      	mov	r9, r3
 800501c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800501e:	460f      	mov	r7, r1
 8005020:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8005022:	f7ff f8db 	bl	80041dc <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005026:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 800502a:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 800502c:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800502e:	d003      	beq.n	8005038 <HAL_I2C_Mem_Write+0x24>
      return HAL_BUSY;
 8005030:	2002      	movs	r0, #2
}
 8005032:	b003      	add	sp, #12
 8005034:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005038:	9000      	str	r0, [sp, #0]
 800503a:	493c      	ldr	r1, [pc, #240]	@ (800512c <HAL_I2C_Mem_Write+0x118>)
 800503c:	2319      	movs	r3, #25
 800503e:	2201      	movs	r2, #1
 8005040:	4620      	mov	r0, r4
 8005042:	f7ff fd79 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 8005046:	2800      	cmp	r0, #0
 8005048:	d1f2      	bne.n	8005030 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 800504a:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 800504e:	2b01      	cmp	r3, #1
 8005050:	d0ee      	beq.n	8005030 <HAL_I2C_Mem_Write+0x1c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005052:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8005054:	2301      	movs	r3, #1
 8005056:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800505a:	6803      	ldr	r3, [r0, #0]
 800505c:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800505e:	bf5e      	ittt	pl
 8005060:	6803      	ldrpl	r3, [r0, #0]
 8005062:	f043 0301 	orrpl.w	r3, r3, #1
 8005066:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005068:	6803      	ldr	r3, [r0, #0]
 800506a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800506e:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005070:	2321      	movs	r3, #33	@ 0x21
 8005072:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005076:	2340      	movs	r3, #64	@ 0x40
 8005078:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800507c:	2300      	movs	r3, #0
 800507e:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8005080:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005082:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005084:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8005088:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800508a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800508c:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800508e:	4b28      	ldr	r3, [pc, #160]	@ (8005130 <HAL_I2C_Mem_Write+0x11c>)
 8005090:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005092:	4642      	mov	r2, r8
 8005094:	e9cd 6500 	strd	r6, r5, [sp]
 8005098:	464b      	mov	r3, r9
 800509a:	4639      	mov	r1, r7
 800509c:	4620      	mov	r0, r4
 800509e:	f7ff fddf 	bl	8004c60 <I2C_RequestMemoryWrite>
 80050a2:	2800      	cmp	r0, #0
 80050a4:	d02a      	beq.n	80050fc <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 80050a6:	2001      	movs	r0, #1
 80050a8:	e7c3      	b.n	8005032 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050aa:	f7ff fdb2 	bl	8004c12 <I2C_WaitOnTXEFlagUntilTimeout>
 80050ae:	b140      	cbz	r0, 80050c2 <HAL_I2C_Mem_Write+0xae>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80050b2:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050b4:	bf01      	itttt	eq
 80050b6:	6822      	ldreq	r2, [r4, #0]
 80050b8:	6813      	ldreq	r3, [r2, #0]
 80050ba:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 80050be:	6013      	streq	r3, [r2, #0]
 80050c0:	e7f1      	b.n	80050a6 <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050c2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80050c4:	6827      	ldr	r7, [r4, #0]
 80050c6:	461a      	mov	r2, r3
 80050c8:	f812 1b01 	ldrb.w	r1, [r2], #1
 80050cc:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 80050ce:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80050d0:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80050d2:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80050d4:	3a01      	subs	r2, #1
 80050d6:	b292      	uxth	r2, r2
 80050d8:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80050da:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 80050dc:	1e48      	subs	r0, r1, #1
 80050de:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80050e0:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 80050e2:	8520      	strh	r0, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80050e4:	d50a      	bpl.n	80050fc <HAL_I2C_Mem_Write+0xe8>
 80050e6:	b148      	cbz	r0, 80050fc <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050e8:	785a      	ldrb	r2, [r3, #1]
 80050ea:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 80050ec:	3302      	adds	r3, #2
 80050ee:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 80050f0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80050f2:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 80050f4:	3902      	subs	r1, #2
        hi2c->XferCount--;
 80050f6:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80050f8:	8521      	strh	r1, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 80050fa:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80050fc:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050fe:	462a      	mov	r2, r5
 8005100:	4631      	mov	r1, r6
 8005102:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1d0      	bne.n	80050aa <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005108:	f7ff fe86 	bl	8004e18 <I2C_WaitOnBTFFlagUntilTimeout>
 800510c:	2800      	cmp	r0, #0
 800510e:	d1cf      	bne.n	80050b0 <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005110:	6822      	ldr	r2, [r4, #0]
 8005112:	6813      	ldr	r3, [r2, #0]
 8005114:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005118:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800511a:	2320      	movs	r3, #32
 800511c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 8005120:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005124:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
    return HAL_OK;
 8005128:	e783      	b.n	8005032 <HAL_I2C_Mem_Write+0x1e>
 800512a:	bf00      	nop
 800512c:	00100002 	.word	0x00100002
 8005130:	ffff0000 	.word	0xffff0000

08005134 <HAL_I2C_Mem_Read>:
{
 8005134:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005138:	4604      	mov	r4, r0
 800513a:	b087      	sub	sp, #28
 800513c:	4699      	mov	r9, r3
 800513e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8005140:	460d      	mov	r5, r1
 8005142:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8005144:	f7ff f84a 	bl	80041dc <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005148:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 800514c:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 800514e:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005150:	d004      	beq.n	800515c <HAL_I2C_Mem_Read+0x28>
      return HAL_BUSY;
 8005152:	2502      	movs	r5, #2
}
 8005154:	4628      	mov	r0, r5
 8005156:	b007      	add	sp, #28
 8005158:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800515c:	9000      	str	r0, [sp, #0]
 800515e:	4976      	ldr	r1, [pc, #472]	@ (8005338 <HAL_I2C_Mem_Read+0x204>)
 8005160:	2319      	movs	r3, #25
 8005162:	2201      	movs	r2, #1
 8005164:	4620      	mov	r0, r4
 8005166:	f7ff fce7 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 800516a:	2800      	cmp	r0, #0
 800516c:	d1f1      	bne.n	8005152 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 800516e:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8005172:	2b01      	cmp	r3, #1
 8005174:	d0ed      	beq.n	8005152 <HAL_I2C_Mem_Read+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005176:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8005178:	2301      	movs	r3, #1
 800517a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800517e:	6803      	ldr	r3, [r0, #0]
 8005180:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8005182:	bf5e      	ittt	pl
 8005184:	6803      	ldrpl	r3, [r0, #0]
 8005186:	f043 0301 	orrpl.w	r3, r3, #1
 800518a:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800518c:	6803      	ldr	r3, [r0, #0]
 800518e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005192:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005194:	2322      	movs	r3, #34	@ 0x22
 8005196:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800519a:	2340      	movs	r3, #64	@ 0x40
 800519c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051a0:	2300      	movs	r3, #0
 80051a2:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 80051a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80051a6:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80051a8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 80051ac:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80051ae:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80051b0:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051b2:	4b62      	ldr	r3, [pc, #392]	@ (800533c <HAL_I2C_Mem_Read+0x208>)
 80051b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80051b6:	4629      	mov	r1, r5
 80051b8:	e9cd 7600 	strd	r7, r6, [sp]
 80051bc:	464b      	mov	r3, r9
 80051be:	4642      	mov	r2, r8
 80051c0:	4620      	mov	r0, r4
 80051c2:	f7ff fda7 	bl	8004d14 <I2C_RequestMemoryRead>
 80051c6:	4605      	mov	r5, r0
 80051c8:	b108      	cbz	r0, 80051ce <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 80051ca:	2501      	movs	r5, #1
 80051cc:	e7c2      	b.n	8005154 <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 80051ce:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051d0:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 80051d2:	b9b2      	cbnz	r2, 8005202 <HAL_I2C_Mem_Read+0xce>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051d4:	9002      	str	r0, [sp, #8]
 80051d6:	695a      	ldr	r2, [r3, #20]
 80051d8:	9202      	str	r2, [sp, #8]
 80051da:	699a      	ldr	r2, [r3, #24]
 80051dc:	9202      	str	r2, [sp, #8]
 80051de:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051e6:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051e8:	f8df 8154 	ldr.w	r8, [pc, #340]	@ 8005340 <HAL_I2C_Mem_Read+0x20c>
    while (hi2c->XferSize > 0U)
 80051ec:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d12c      	bne.n	800524c <HAL_I2C_Mem_Read+0x118>
    hi2c->State = HAL_I2C_STATE_READY;
 80051f2:	2220      	movs	r2, #32
 80051f4:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 80051f8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051fc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 8005200:	e7a8      	b.n	8005154 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 8005202:	2a01      	cmp	r2, #1
 8005204:	d10a      	bne.n	800521c <HAL_I2C_Mem_Read+0xe8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800520c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800520e:	9003      	str	r0, [sp, #12]
 8005210:	695a      	ldr	r2, [r3, #20]
 8005212:	9203      	str	r2, [sp, #12]
 8005214:	699a      	ldr	r2, [r3, #24]
 8005216:	9203      	str	r2, [sp, #12]
 8005218:	9a03      	ldr	r2, [sp, #12]
 800521a:	e7e1      	b.n	80051e0 <HAL_I2C_Mem_Read+0xac>
    else if (hi2c->XferSize == 2U)
 800521c:	2a02      	cmp	r2, #2
 800521e:	d10e      	bne.n	800523e <HAL_I2C_Mem_Read+0x10a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005226:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800522e:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005230:	9004      	str	r0, [sp, #16]
 8005232:	695a      	ldr	r2, [r3, #20]
 8005234:	9204      	str	r2, [sp, #16]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	9304      	str	r3, [sp, #16]
 800523a:	9b04      	ldr	r3, [sp, #16]
 800523c:	e7d4      	b.n	80051e8 <HAL_I2C_Mem_Read+0xb4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800523e:	9005      	str	r0, [sp, #20]
 8005240:	695a      	ldr	r2, [r3, #20]
 8005242:	9205      	str	r2, [sp, #20]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	9305      	str	r3, [sp, #20]
 8005248:	9b05      	ldr	r3, [sp, #20]
 800524a:	e7cd      	b.n	80051e8 <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 800524c:	2b03      	cmp	r3, #3
 800524e:	d856      	bhi.n	80052fe <HAL_I2C_Mem_Read+0x1ca>
        if (hi2c->XferSize == 1U)
 8005250:	2b01      	cmp	r3, #1
 8005252:	d115      	bne.n	8005280 <HAL_I2C_Mem_Read+0x14c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005254:	4632      	mov	r2, r6
 8005256:	4639      	mov	r1, r7
 8005258:	4620      	mov	r0, r4
 800525a:	f7ff fe03 	bl	8004e64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800525e:	2800      	cmp	r0, #0
 8005260:	d1b3      	bne.n	80051ca <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005262:	6823      	ldr	r3, [r4, #0]
 8005264:	691a      	ldr	r2, [r3, #16]
 8005266:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005268:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800526a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800526c:	3301      	adds	r3, #1
 800526e:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8005270:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8005272:	3b01      	subs	r3, #1
 8005274:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8005276:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005278:	3b01      	subs	r3, #1
 800527a:	b29b      	uxth	r3, r3
 800527c:	8563      	strh	r3, [r4, #42]	@ 0x2a
 800527e:	e7b5      	b.n	80051ec <HAL_I2C_Mem_Read+0xb8>
        else if (hi2c->XferSize == 2U)
 8005280:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005282:	9600      	str	r6, [sp, #0]
 8005284:	463b      	mov	r3, r7
 8005286:	f04f 0200 	mov.w	r2, #0
 800528a:	4641      	mov	r1, r8
 800528c:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 800528e:	d119      	bne.n	80052c4 <HAL_I2C_Mem_Read+0x190>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005290:	f7ff fc52 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 8005294:	2800      	cmp	r0, #0
 8005296:	d198      	bne.n	80051ca <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005298:	6823      	ldr	r3, [r4, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052a0:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052a2:	691a      	ldr	r2, [r3, #16]
 80052a4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80052a6:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80052a8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80052aa:	1c53      	adds	r3, r2, #1
 80052ac:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80052ae:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80052b0:	3b01      	subs	r3, #1
 80052b2:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80052b4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80052b6:	3b01      	subs	r3, #1
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052bc:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	7053      	strb	r3, [r2, #1]
 80052c2:	e7d2      	b.n	800526a <HAL_I2C_Mem_Read+0x136>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052c4:	f7ff fc38 	bl	8004b38 <I2C_WaitOnFlagUntilTimeout>
 80052c8:	4602      	mov	r2, r0
 80052ca:	2800      	cmp	r0, #0
 80052cc:	f47f af7d 	bne.w	80051ca <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052d0:	6823      	ldr	r3, [r4, #0]
 80052d2:	6819      	ldr	r1, [r3, #0]
 80052d4:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 80052d8:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052da:	6919      	ldr	r1, [r3, #16]
 80052dc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80052de:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 80052e0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80052e2:	3301      	adds	r3, #1
 80052e4:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80052e6:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 80052e8:	3b01      	subs	r3, #1
 80052ea:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80052ec:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80052ee:	3b01      	subs	r3, #1
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	8563      	strh	r3, [r4, #42]	@ 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052f4:	4641      	mov	r1, r8
 80052f6:	9600      	str	r6, [sp, #0]
 80052f8:	463b      	mov	r3, r7
 80052fa:	4620      	mov	r0, r4
 80052fc:	e7c8      	b.n	8005290 <HAL_I2C_Mem_Read+0x15c>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052fe:	4632      	mov	r2, r6
 8005300:	4639      	mov	r1, r7
 8005302:	4620      	mov	r0, r4
 8005304:	f7ff fdae 	bl	8004e64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005308:	2800      	cmp	r0, #0
 800530a:	f47f af5e 	bne.w	80051ca <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800530e:	6823      	ldr	r3, [r4, #0]
 8005310:	691a      	ldr	r2, [r3, #16]
 8005312:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005314:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005316:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005318:	1c53      	adds	r3, r2, #1
 800531a:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 800531c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800531e:	3b01      	subs	r3, #1
 8005320:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8005322:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005324:	3b01      	subs	r3, #1
 8005326:	b29b      	uxth	r3, r3
 8005328:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800532a:	6823      	ldr	r3, [r4, #0]
 800532c:	6959      	ldr	r1, [r3, #20]
 800532e:	0749      	lsls	r1, r1, #29
 8005330:	f57f af5c 	bpl.w	80051ec <HAL_I2C_Mem_Read+0xb8>
 8005334:	e7c3      	b.n	80052be <HAL_I2C_Mem_Read+0x18a>
 8005336:	bf00      	nop
 8005338:	00100002 	.word	0x00100002
 800533c:	ffff0000 	.word	0xffff0000
 8005340:	00010004 	.word	0x00010004

08005344 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005344:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005346:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800534a:	2b20      	cmp	r3, #32
 800534c:	b2dc      	uxtb	r4, r3
 800534e:	d116      	bne.n	800537e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005350:	2324      	movs	r3, #36	@ 0x24
 8005352:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005356:	6803      	ldr	r3, [r0, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	f022 0201 	bic.w	r2, r2, #1
 800535e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005360:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005362:	f022 0210 	bic.w	r2, r2, #16
 8005366:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005368:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800536a:	4311      	orrs	r1, r2
 800536c:	6259      	str	r1, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	f042 0201 	orr.w	r2, r2, #1
 8005374:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005376:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d

    return HAL_OK;
 800537a:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 800537c:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800537e:	2002      	movs	r0, #2
 8005380:	e7fc      	b.n	800537c <HAL_I2CEx_ConfigAnalogFilter+0x38>

08005382 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005382:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005384:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005388:	2b20      	cmp	r3, #32
 800538a:	b2dc      	uxtb	r4, r3
 800538c:	d116      	bne.n	80053bc <HAL_I2CEx_ConfigDigitalFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800538e:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005390:	2324      	movs	r3, #36	@ 0x24
 8005392:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    __HAL_I2C_DISABLE(hi2c);
 8005396:	6813      	ldr	r3, [r2, #0]
 8005398:	f023 0301 	bic.w	r3, r3, #1
 800539c:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800539e:	6a55      	ldr	r5, [r2, #36]	@ 0x24

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80053a0:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80053a4:	402b      	ands	r3, r5

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80053a6:	430b      	orrs	r3, r1

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	6253      	str	r3, [r2, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80053ac:	6813      	ldr	r3, [r2, #0]
 80053ae:	f043 0301 	orr.w	r3, r3, #1
 80053b2:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053b4:	f880 403d 	strb.w	r4, [r0, #61]	@ 0x3d

    return HAL_OK;
 80053b8:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80053ba:	bd30      	pop	{r4, r5, pc}
    return HAL_BUSY;
 80053bc:	2002      	movs	r0, #2
 80053be:	e7fc      	b.n	80053ba <HAL_I2CEx_ConfigDigitalFilter+0x38>

080053c0 <LTDC_SetConfig>:
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80053c0:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80053c2:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80053c6:	01d2      	lsls	r2, r2, #7
 80053c8:	3284      	adds	r2, #132	@ 0x84
 80053ca:	1883      	adds	r3, r0, r2
{
 80053cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80053d0:	68c6      	ldr	r6, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80053d2:	685d      	ldr	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80053d4:	684c      	ldr	r4, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80053d6:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80053da:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 80053de:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80053e0:	68c5      	ldr	r5, [r0, #12]
 80053e2:	f10c 0701 	add.w	r7, ip, #1
 80053e6:	f3c5 450b 	ubfx	r5, r5, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80053ea:	f3c6 460b 	ubfx	r6, r6, #16, #12
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80053ee:	443d      	add	r5, r7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80053f0:	4426      	add	r6, r4
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80053f2:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80053f6:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80053f8:	68c6      	ldr	r6, [r0, #12]
 80053fa:	68cd      	ldr	r5, [r1, #12]
 80053fc:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8005400:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005402:	689d      	ldr	r5, [r3, #8]
 8005404:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 8005408:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800540a:	68c7      	ldr	r7, [r0, #12]
 800540c:	688d      	ldr	r5, [r1, #8]
 800540e:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8005412:	3501      	adds	r5, #1
 8005414:	443d      	add	r5, r7
 8005416:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 800541a:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800541c:	691d      	ldr	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800541e:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005420:	f025 0507 	bic.w	r5, r5, #7
 8005424:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005426:	f04f 0e00 	mov.w	lr, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800542a:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800542c:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800542e:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005432:	f891 8031 	ldrb.w	r8, [r1, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005436:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800543a:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 800543e:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8005442:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8005446:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 800544a:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800544c:	695d      	ldr	r5, [r3, #20]
 800544e:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 8005452:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005454:	694d      	ldr	r5, [r1, #20]
 8005456:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005458:	69dd      	ldr	r5, [r3, #28]
 800545a:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 800545e:	f025 0507 	bic.w	r5, r5, #7
 8005462:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005464:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8005468:	433d      	orrs	r5, r7
 800546a:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800546c:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800546e:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005470:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005474:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005476:	b31e      	cbz	r6, 80054c0 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005478:	2e01      	cmp	r6, #1
 800547a:	d023      	beq.n	80054c4 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800547c:	1eb5      	subs	r5, r6, #2
 800547e:	2d02      	cmp	r5, #2
 8005480:	d922      	bls.n	80054c8 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 8005482:	2e07      	cmp	r6, #7
 8005484:	bf14      	ite	ne
 8005486:	2501      	movne	r5, #1
 8005488:	2502      	moveq	r5, #2
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800548a:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
 800548c:	f006 26e0 	and.w	r6, r6, #3758153728	@ 0xe000e000
 8005490:	62de      	str	r6, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005492:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005496:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005498:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800549a:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800549c:	436e      	muls	r6, r5
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800549e:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80054a0:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80054a4:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80054a6:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80054a8:	f424 64ff 	bic.w	r4, r4, #2040	@ 0x7f8
 80054ac:	f024 0407 	bic.w	r4, r4, #7
 80054b0:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80054b2:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80054b4:	5883      	ldr	r3, [r0, r2]
 80054b6:	f043 0301 	orr.w	r3, r3, #1
 80054ba:	5083      	str	r3, [r0, r2]
}
 80054bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 80054c0:	2504      	movs	r5, #4
 80054c2:	e7e2      	b.n	800548a <LTDC_SetConfig+0xca>
    tmp = 3U;
 80054c4:	2503      	movs	r5, #3
 80054c6:	e7e0      	b.n	800548a <LTDC_SetConfig+0xca>
    tmp = 2U;
 80054c8:	2502      	movs	r5, #2
 80054ca:	e7de      	b.n	800548a <LTDC_SetConfig+0xca>

080054cc <HAL_LTDC_Init>:
{
 80054cc:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 80054ce:	4604      	mov	r4, r0
 80054d0:	2800      	cmp	r0, #0
 80054d2:	d063      	beq.n	800559c <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80054d4:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 80054d8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80054dc:	b91b      	cbnz	r3, 80054e6 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 80054de:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 80054e2:	f7fc fb73 	bl	8001bcc <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80054e6:	2302      	movs	r3, #2
 80054e8:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80054ec:	6823      	ldr	r3, [r4, #0]
 80054ee:	699a      	ldr	r2, [r3, #24]
 80054f0:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80054f4:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80054f6:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80054fa:	4302      	orrs	r2, r0
 80054fc:	68e0      	ldr	r0, [r4, #12]
 80054fe:	6999      	ldr	r1, [r3, #24]
 8005500:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005502:	6920      	ldr	r0, [r4, #16]
 8005504:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005506:	430a      	orrs	r2, r1
 8005508:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	4924      	ldr	r1, [pc, #144]	@ (80055a0 <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800550e:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005510:	400a      	ands	r2, r1
 8005512:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005514:	689a      	ldr	r2, [r3, #8]
 8005516:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800551a:	69a0      	ldr	r0, [r4, #24]
 800551c:	4302      	orrs	r2, r0
 800551e:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005520:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005522:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005524:	400a      	ands	r2, r1
 8005526:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005528:	68da      	ldr	r2, [r3, #12]
 800552a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800552e:	6a20      	ldr	r0, [r4, #32]
 8005530:	4302      	orrs	r2, r0
 8005532:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005534:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005536:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005538:	400a      	ands	r2, r1
 800553a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800553c:	691a      	ldr	r2, [r3, #16]
 800553e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005542:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8005544:	4302      	orrs	r2, r0
 8005546:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005548:	695a      	ldr	r2, [r3, #20]
 800554a:	400a      	ands	r2, r1
 800554c:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800554e:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005550:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005552:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005556:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005558:	430a      	orrs	r2, r1
 800555a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800555c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800555e:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005562:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005566:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800556a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800556c:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 800556e:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 8005572:	432a      	orrs	r2, r5
 8005574:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800557c:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800557e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005580:	f042 0206 	orr.w	r2, r2, #6
 8005584:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8005586:	699a      	ldr	r2, [r3, #24]
 8005588:	f042 0201 	orr.w	r2, r2, #1
 800558c:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800558e:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8005590:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005592:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8005596:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 800559a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800559c:	2001      	movs	r0, #1
 800559e:	e7fc      	b.n	800559a <HAL_LTDC_Init+0xce>
 80055a0:	f000f800 	.word	0xf000f800

080055a4 <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 80055a4:	4770      	bx	lr

080055a6 <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 80055a6:	4770      	bx	lr

080055a8 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80055a8:	6803      	ldr	r3, [r0, #0]
{
 80055aa:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80055ac:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80055ae:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80055b0:	0772      	lsls	r2, r6, #29
{
 80055b2:	4604      	mov	r4, r0
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80055b4:	d514      	bpl.n	80055e0 <HAL_LTDC_IRQHandler+0x38>
 80055b6:	0769      	lsls	r1, r5, #29
 80055b8:	d512      	bpl.n	80055e0 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80055ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055bc:	f022 0204 	bic.w	r2, r2, #4
 80055c0:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80055c2:	2204      	movs	r2, #4
 80055c4:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80055c6:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 80055ca:	f043 0301 	orr.w	r3, r3, #1
 80055ce:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 80055d2:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80055d4:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 80055d8:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80055dc:	f7ff ffe2 	bl	80055a4 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80055e0:	07b2      	lsls	r2, r6, #30
 80055e2:	d516      	bpl.n	8005612 <HAL_LTDC_IRQHandler+0x6a>
 80055e4:	07ab      	lsls	r3, r5, #30
 80055e6:	d514      	bpl.n	8005612 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80055e8:	6823      	ldr	r3, [r4, #0]
 80055ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055ec:	f022 0202 	bic.w	r2, r2, #2
 80055f0:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80055f2:	2202      	movs	r2, #2
 80055f4:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80055f6:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 80055fa:	4313      	orrs	r3, r2
 80055fc:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005600:	2304      	movs	r3, #4
 8005602:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8005606:	2300      	movs	r3, #0
 8005608:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800560c:	4620      	mov	r0, r4
 800560e:	f7ff ffc9 	bl	80055a4 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005612:	07f0      	lsls	r0, r6, #31
 8005614:	d510      	bpl.n	8005638 <HAL_LTDC_IRQHandler+0x90>
 8005616:	07e9      	lsls	r1, r5, #31
 8005618:	d50e      	bpl.n	8005638 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800561a:	6823      	ldr	r3, [r4, #0]
 800561c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800561e:	f022 0201 	bic.w	r2, r2, #1
 8005622:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005624:	2201      	movs	r2, #1
 8005626:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 8005628:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800562a:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800562e:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8005632:	4620      	mov	r0, r4
 8005634:	f7fb fde0 	bl	80011f8 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005638:	0732      	lsls	r2, r6, #28
 800563a:	d511      	bpl.n	8005660 <HAL_LTDC_IRQHandler+0xb8>
 800563c:	072b      	lsls	r3, r5, #28
 800563e:	d50f      	bpl.n	8005660 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005640:	6823      	ldr	r3, [r4, #0]
 8005642:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005644:	f022 0208 	bic.w	r2, r2, #8
 8005648:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800564a:	2208      	movs	r2, #8
 800564c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800564e:	2301      	movs	r3, #1
 8005650:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8005654:	2300      	movs	r3, #0
 8005656:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800565a:	4620      	mov	r0, r4
 800565c:	f7ff ffa3 	bl	80055a6 <HAL_LTDC_ReloadEventCallback>
}
 8005660:	bd70      	pop	{r4, r5, r6, pc}

08005662 <HAL_LTDC_ConfigLayer>:
{
 8005662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8005666:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 800566a:	2b01      	cmp	r3, #1
{
 800566c:	4606      	mov	r6, r0
 800566e:	460f      	mov	r7, r1
 8005670:	4694      	mov	ip, r2
 8005672:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 8005676:	d01f      	beq.n	80056b8 <HAL_LTDC_ConfigLayer+0x56>
 8005678:	f04f 0801 	mov.w	r8, #1
 800567c:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005680:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005684:	2434      	movs	r4, #52	@ 0x34
 8005686:	460d      	mov	r5, r1
 8005688:	fb04 6402 	mla	r4, r4, r2, r6
 800568c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800568e:	3438      	adds	r4, #56	@ 0x38
 8005690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005692:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005694:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005696:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005698:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800569a:	682b      	ldr	r3, [r5, #0]
 800569c:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800569e:	4630      	mov	r0, r6
 80056a0:	4662      	mov	r2, ip
 80056a2:	4639      	mov	r1, r7
 80056a4:	f7ff fe8c 	bl	80053c0 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80056a8:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 80056aa:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80056ac:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80056b0:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 80056b4:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 80056b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080056bc <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 80056bc:	f890 20a0 	ldrb.w	r2, [r0, #160]	@ 0xa0
 80056c0:	2a01      	cmp	r2, #1
{
 80056c2:	4603      	mov	r3, r0
 80056c4:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 80056c8:	d012      	beq.n	80056f0 <HAL_LTDC_ProgramLineEvent+0x34>
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80056ca:	681a      	ldr	r2, [r3, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80056cc:	f883 00a1 	strb.w	r0, [r3, #161]	@ 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80056d0:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 80056d2:	f020 0001 	bic.w	r0, r0, #1
 80056d6:	6350      	str	r0, [r2, #52]	@ 0x34
  LTDC->LIPCR = (uint32_t)Line;
 80056d8:	4806      	ldr	r0, [pc, #24]	@ (80056f4 <HAL_LTDC_ProgramLineEvent+0x38>)
 80056da:	6401      	str	r1, [r0, #64]	@ 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80056dc:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 80056de:	f041 0101 	orr.w	r1, r1, #1
 80056e2:	6351      	str	r1, [r2, #52]	@ 0x34
  __HAL_UNLOCK(hltdc);
 80056e4:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 80056ec:	f883 00a0 	strb.w	r0, [r3, #160]	@ 0xa0
}
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	40016800 	.word	0x40016800

080056f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056fc:	4604      	mov	r4, r0
 80056fe:	b340      	cbz	r0, 8005752 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005700:	6803      	ldr	r3, [r0, #0]
 8005702:	07de      	lsls	r6, r3, #31
 8005704:	d410      	bmi.n	8005728 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005706:	6823      	ldr	r3, [r4, #0]
 8005708:	079d      	lsls	r5, r3, #30
 800570a:	d45b      	bmi.n	80057c4 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800570c:	6823      	ldr	r3, [r4, #0]
 800570e:	0719      	lsls	r1, r3, #28
 8005710:	f100 809d 	bmi.w	800584e <HAL_RCC_OscConfig+0x156>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005714:	6823      	ldr	r3, [r4, #0]
 8005716:	075a      	lsls	r2, r3, #29
 8005718:	f100 80bd 	bmi.w	8005896 <HAL_RCC_OscConfig+0x19e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800571c:	69a3      	ldr	r3, [r4, #24]
 800571e:	2b00      	cmp	r3, #0
 8005720:	f040 8124 	bne.w	800596c <HAL_RCC_OscConfig+0x274>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8005724:	2000      	movs	r0, #0
 8005726:	e02c      	b.n	8005782 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005728:	4b8d      	ldr	r3, [pc, #564]	@ (8005960 <HAL_RCC_OscConfig+0x268>)
 800572a:	689a      	ldr	r2, [r3, #8]
 800572c:	f002 020c 	and.w	r2, r2, #12
 8005730:	2a04      	cmp	r2, #4
 8005732:	d007      	beq.n	8005744 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005734:	689a      	ldr	r2, [r3, #8]
 8005736:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800573a:	2a08      	cmp	r2, #8
 800573c:	d10b      	bne.n	8005756 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	0259      	lsls	r1, r3, #9
 8005742:	d508      	bpl.n	8005756 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005744:	4b86      	ldr	r3, [pc, #536]	@ (8005960 <HAL_RCC_OscConfig+0x268>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	039a      	lsls	r2, r3, #14
 800574a:	d5dc      	bpl.n	8005706 <HAL_RCC_OscConfig+0xe>
 800574c:	6863      	ldr	r3, [r4, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1d9      	bne.n	8005706 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8005752:	2001      	movs	r0, #1
 8005754:	e015      	b.n	8005782 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005756:	6863      	ldr	r3, [r4, #4]
 8005758:	4d81      	ldr	r5, [pc, #516]	@ (8005960 <HAL_RCC_OscConfig+0x268>)
 800575a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800575e:	d113      	bne.n	8005788 <HAL_RCC_OscConfig+0x90>
 8005760:	682b      	ldr	r3, [r5, #0]
 8005762:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005766:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005768:	f7fe fd38 	bl	80041dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800576c:	4e7c      	ldr	r6, [pc, #496]	@ (8005960 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 800576e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005770:	6833      	ldr	r3, [r6, #0]
 8005772:	039b      	lsls	r3, r3, #14
 8005774:	d4c7      	bmi.n	8005706 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005776:	f7fe fd31 	bl	80041dc <HAL_GetTick>
 800577a:	1b40      	subs	r0, r0, r5
 800577c:	2864      	cmp	r0, #100	@ 0x64
 800577e:	d9f7      	bls.n	8005770 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8005780:	2003      	movs	r0, #3
}
 8005782:	b002      	add	sp, #8
 8005784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005788:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800578c:	d104      	bne.n	8005798 <HAL_RCC_OscConfig+0xa0>
 800578e:	682b      	ldr	r3, [r5, #0]
 8005790:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005794:	602b      	str	r3, [r5, #0]
 8005796:	e7e3      	b.n	8005760 <HAL_RCC_OscConfig+0x68>
 8005798:	682a      	ldr	r2, [r5, #0]
 800579a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800579e:	602a      	str	r2, [r5, #0]
 80057a0:	682a      	ldr	r2, [r5, #0]
 80057a2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80057a6:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1dd      	bne.n	8005768 <HAL_RCC_OscConfig+0x70>
        tickstart = HAL_GetTick();
 80057ac:	f7fe fd16 	bl	80041dc <HAL_GetTick>
 80057b0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057b2:	682b      	ldr	r3, [r5, #0]
 80057b4:	039f      	lsls	r7, r3, #14
 80057b6:	d5a6      	bpl.n	8005706 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057b8:	f7fe fd10 	bl	80041dc <HAL_GetTick>
 80057bc:	1b80      	subs	r0, r0, r6
 80057be:	2864      	cmp	r0, #100	@ 0x64
 80057c0:	d9f7      	bls.n	80057b2 <HAL_RCC_OscConfig+0xba>
 80057c2:	e7dd      	b.n	8005780 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057c4:	4b66      	ldr	r3, [pc, #408]	@ (8005960 <HAL_RCC_OscConfig+0x268>)
 80057c6:	689a      	ldr	r2, [r3, #8]
 80057c8:	f012 0f0c 	tst.w	r2, #12
 80057cc:	d007      	beq.n	80057de <HAL_RCC_OscConfig+0xe6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057d4:	2a08      	cmp	r2, #8
 80057d6:	d111      	bne.n	80057fc <HAL_RCC_OscConfig+0x104>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	025d      	lsls	r5, r3, #9
 80057dc:	d40e      	bmi.n	80057fc <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057de:	4a60      	ldr	r2, [pc, #384]	@ (8005960 <HAL_RCC_OscConfig+0x268>)
 80057e0:	6813      	ldr	r3, [r2, #0]
 80057e2:	0799      	lsls	r1, r3, #30
 80057e4:	d502      	bpl.n	80057ec <HAL_RCC_OscConfig+0xf4>
 80057e6:	68e3      	ldr	r3, [r4, #12]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d1b2      	bne.n	8005752 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057ec:	6813      	ldr	r3, [r2, #0]
 80057ee:	6921      	ldr	r1, [r4, #16]
 80057f0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80057f4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80057f8:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057fa:	e787      	b.n	800570c <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057fc:	68e2      	ldr	r2, [r4, #12]
 80057fe:	4b59      	ldr	r3, [pc, #356]	@ (8005964 <HAL_RCC_OscConfig+0x26c>)
 8005800:	b1b2      	cbz	r2, 8005830 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_ENABLE();
 8005802:	2201      	movs	r2, #1
 8005804:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005806:	f7fe fce9 	bl	80041dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800580a:	4d55      	ldr	r5, [pc, #340]	@ (8005960 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 800580c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800580e:	682b      	ldr	r3, [r5, #0]
 8005810:	079b      	lsls	r3, r3, #30
 8005812:	d507      	bpl.n	8005824 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005814:	682b      	ldr	r3, [r5, #0]
 8005816:	6922      	ldr	r2, [r4, #16]
 8005818:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800581c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005820:	602b      	str	r3, [r5, #0]
 8005822:	e773      	b.n	800570c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005824:	f7fe fcda 	bl	80041dc <HAL_GetTick>
 8005828:	1b80      	subs	r0, r0, r6
 800582a:	2802      	cmp	r0, #2
 800582c:	d9ef      	bls.n	800580e <HAL_RCC_OscConfig+0x116>
 800582e:	e7a7      	b.n	8005780 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8005830:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005832:	f7fe fcd3 	bl	80041dc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005836:	4e4a      	ldr	r6, [pc, #296]	@ (8005960 <HAL_RCC_OscConfig+0x268>)
        tickstart = HAL_GetTick();
 8005838:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800583a:	6833      	ldr	r3, [r6, #0]
 800583c:	079f      	lsls	r7, r3, #30
 800583e:	f57f af65 	bpl.w	800570c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005842:	f7fe fccb 	bl	80041dc <HAL_GetTick>
 8005846:	1b40      	subs	r0, r0, r5
 8005848:	2802      	cmp	r0, #2
 800584a:	d9f6      	bls.n	800583a <HAL_RCC_OscConfig+0x142>
 800584c:	e798      	b.n	8005780 <HAL_RCC_OscConfig+0x88>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800584e:	6962      	ldr	r2, [r4, #20]
 8005850:	4b44      	ldr	r3, [pc, #272]	@ (8005964 <HAL_RCC_OscConfig+0x26c>)
 8005852:	b182      	cbz	r2, 8005876 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8005854:	2201      	movs	r2, #1
 8005856:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 800585a:	f7fe fcbf 	bl	80041dc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800585e:	4e40      	ldr	r6, [pc, #256]	@ (8005960 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8005860:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005862:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8005864:	079b      	lsls	r3, r3, #30
 8005866:	f53f af55 	bmi.w	8005714 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800586a:	f7fe fcb7 	bl	80041dc <HAL_GetTick>
 800586e:	1b40      	subs	r0, r0, r5
 8005870:	2802      	cmp	r0, #2
 8005872:	d9f6      	bls.n	8005862 <HAL_RCC_OscConfig+0x16a>
 8005874:	e784      	b.n	8005780 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 8005876:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 800587a:	f7fe fcaf 	bl	80041dc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800587e:	4e38      	ldr	r6, [pc, #224]	@ (8005960 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 8005880:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005882:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8005884:	079f      	lsls	r7, r3, #30
 8005886:	f57f af45 	bpl.w	8005714 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800588a:	f7fe fca7 	bl	80041dc <HAL_GetTick>
 800588e:	1b40      	subs	r0, r0, r5
 8005890:	2802      	cmp	r0, #2
 8005892:	d9f6      	bls.n	8005882 <HAL_RCC_OscConfig+0x18a>
 8005894:	e774      	b.n	8005780 <HAL_RCC_OscConfig+0x88>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005896:	4b32      	ldr	r3, [pc, #200]	@ (8005960 <HAL_RCC_OscConfig+0x268>)
 8005898:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800589a:	f012 5280 	ands.w	r2, r2, #268435456	@ 0x10000000
 800589e:	d128      	bne.n	80058f2 <HAL_RCC_OscConfig+0x1fa>
      __HAL_RCC_PWR_CLK_ENABLE();
 80058a0:	9201      	str	r2, [sp, #4]
 80058a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058a4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80058a8:	641a      	str	r2, [r3, #64]	@ 0x40
 80058aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058b0:	9301      	str	r3, [sp, #4]
 80058b2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80058b4:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058b6:	4d2c      	ldr	r5, [pc, #176]	@ (8005968 <HAL_RCC_OscConfig+0x270>)
 80058b8:	682b      	ldr	r3, [r5, #0]
 80058ba:	05d8      	lsls	r0, r3, #23
 80058bc:	d51b      	bpl.n	80058f6 <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058be:	68a3      	ldr	r3, [r4, #8]
 80058c0:	4d27      	ldr	r5, [pc, #156]	@ (8005960 <HAL_RCC_OscConfig+0x268>)
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d127      	bne.n	8005916 <HAL_RCC_OscConfig+0x21e>
 80058c6:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80058c8:	f043 0301 	orr.w	r3, r3, #1
 80058cc:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80058ce:	f7fe fc85 	bl	80041dc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058d2:	4e23      	ldr	r6, [pc, #140]	@ (8005960 <HAL_RCC_OscConfig+0x268>)
      tickstart = HAL_GetTick();
 80058d4:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058d6:	f241 3888 	movw	r8, #5000	@ 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058da:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80058dc:	079a      	lsls	r2, r3, #30
 80058de:	d539      	bpl.n	8005954 <HAL_RCC_OscConfig+0x25c>
    if(pwrclkchanged == SET)
 80058e0:	2f00      	cmp	r7, #0
 80058e2:	f43f af1b 	beq.w	800571c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80058e6:	4a1e      	ldr	r2, [pc, #120]	@ (8005960 <HAL_RCC_OscConfig+0x268>)
 80058e8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80058ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80058f0:	e714      	b.n	800571c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80058f2:	2700      	movs	r7, #0
 80058f4:	e7df      	b.n	80058b6 <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058f6:	682b      	ldr	r3, [r5, #0]
 80058f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058fc:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80058fe:	f7fe fc6d 	bl	80041dc <HAL_GetTick>
 8005902:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005904:	682b      	ldr	r3, [r5, #0]
 8005906:	05d9      	lsls	r1, r3, #23
 8005908:	d4d9      	bmi.n	80058be <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800590a:	f7fe fc67 	bl	80041dc <HAL_GetTick>
 800590e:	1b80      	subs	r0, r0, r6
 8005910:	2802      	cmp	r0, #2
 8005912:	d9f7      	bls.n	8005904 <HAL_RCC_OscConfig+0x20c>
 8005914:	e734      	b.n	8005780 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005916:	2b05      	cmp	r3, #5
 8005918:	d104      	bne.n	8005924 <HAL_RCC_OscConfig+0x22c>
 800591a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800591c:	f043 0304 	orr.w	r3, r3, #4
 8005920:	672b      	str	r3, [r5, #112]	@ 0x70
 8005922:	e7d0      	b.n	80058c6 <HAL_RCC_OscConfig+0x1ce>
 8005924:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 8005926:	f022 0201 	bic.w	r2, r2, #1
 800592a:	672a      	str	r2, [r5, #112]	@ 0x70
 800592c:	6f2a      	ldr	r2, [r5, #112]	@ 0x70
 800592e:	f022 0204 	bic.w	r2, r2, #4
 8005932:	672a      	str	r2, [r5, #112]	@ 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1ca      	bne.n	80058ce <HAL_RCC_OscConfig+0x1d6>
      tickstart = HAL_GetTick();
 8005938:	f7fe fc50 	bl	80041dc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800593c:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8005940:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005942:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005944:	079b      	lsls	r3, r3, #30
 8005946:	d5cb      	bpl.n	80058e0 <HAL_RCC_OscConfig+0x1e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005948:	f7fe fc48 	bl	80041dc <HAL_GetTick>
 800594c:	1b80      	subs	r0, r0, r6
 800594e:	4540      	cmp	r0, r8
 8005950:	d9f7      	bls.n	8005942 <HAL_RCC_OscConfig+0x24a>
 8005952:	e715      	b.n	8005780 <HAL_RCC_OscConfig+0x88>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005954:	f7fe fc42 	bl	80041dc <HAL_GetTick>
 8005958:	1b40      	subs	r0, r0, r5
 800595a:	4540      	cmp	r0, r8
 800595c:	d9bd      	bls.n	80058da <HAL_RCC_OscConfig+0x1e2>
 800595e:	e70f      	b.n	8005780 <HAL_RCC_OscConfig+0x88>
 8005960:	40023800 	.word	0x40023800
 8005964:	42470000 	.word	0x42470000
 8005968:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800596c:	4d37      	ldr	r5, [pc, #220]	@ (8005a4c <HAL_RCC_OscConfig+0x354>)
 800596e:	68aa      	ldr	r2, [r5, #8]
 8005970:	f002 020c 	and.w	r2, r2, #12
 8005974:	2a08      	cmp	r2, #8
 8005976:	d03e      	beq.n	80059f6 <HAL_RCC_OscConfig+0x2fe>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005978:	2b02      	cmp	r3, #2
 800597a:	4b35      	ldr	r3, [pc, #212]	@ (8005a50 <HAL_RCC_OscConfig+0x358>)
 800597c:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 8005980:	661a      	str	r2, [r3, #96]	@ 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005982:	d12b      	bne.n	80059dc <HAL_RCC_OscConfig+0x2e4>
        tickstart = HAL_GetTick();
 8005984:	f7fe fc2a 	bl	80041dc <HAL_GetTick>
 8005988:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800598a:	682b      	ldr	r3, [r5, #0]
 800598c:	0199      	lsls	r1, r3, #6
 800598e:	d41f      	bmi.n	80059d0 <HAL_RCC_OscConfig+0x2d8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005990:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8005994:	4313      	orrs	r3, r2
 8005996:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005998:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800599c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800599e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80059a2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80059a4:	0852      	lsrs	r2, r2, #1
 80059a6:	3a01      	subs	r2, #1
 80059a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059ac:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80059ae:	4b28      	ldr	r3, [pc, #160]	@ (8005a50 <HAL_RCC_OscConfig+0x358>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059b0:	4d26      	ldr	r5, [pc, #152]	@ (8005a4c <HAL_RCC_OscConfig+0x354>)
        __HAL_RCC_PLL_ENABLE();
 80059b2:	2201      	movs	r2, #1
 80059b4:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80059b6:	f7fe fc11 	bl	80041dc <HAL_GetTick>
 80059ba:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059bc:	682b      	ldr	r3, [r5, #0]
 80059be:	019a      	lsls	r2, r3, #6
 80059c0:	f53f aeb0 	bmi.w	8005724 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059c4:	f7fe fc0a 	bl	80041dc <HAL_GetTick>
 80059c8:	1b00      	subs	r0, r0, r4
 80059ca:	2802      	cmp	r0, #2
 80059cc:	d9f6      	bls.n	80059bc <HAL_RCC_OscConfig+0x2c4>
 80059ce:	e6d7      	b.n	8005780 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059d0:	f7fe fc04 	bl	80041dc <HAL_GetTick>
 80059d4:	1b80      	subs	r0, r0, r6
 80059d6:	2802      	cmp	r0, #2
 80059d8:	d9d7      	bls.n	800598a <HAL_RCC_OscConfig+0x292>
 80059da:	e6d1      	b.n	8005780 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 80059dc:	f7fe fbfe 	bl	80041dc <HAL_GetTick>
 80059e0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059e2:	682b      	ldr	r3, [r5, #0]
 80059e4:	019b      	lsls	r3, r3, #6
 80059e6:	f57f ae9d 	bpl.w	8005724 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059ea:	f7fe fbf7 	bl	80041dc <HAL_GetTick>
 80059ee:	1b00      	subs	r0, r0, r4
 80059f0:	2802      	cmp	r0, #2
 80059f2:	d9f6      	bls.n	80059e2 <HAL_RCC_OscConfig+0x2ea>
 80059f4:	e6c4      	b.n	8005780 <HAL_RCC_OscConfig+0x88>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	f43f aeab 	beq.w	8005752 <HAL_RCC_OscConfig+0x5a>
        pll_config = RCC->PLLCFGR;
 80059fc:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059fe:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a00:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a04:	4291      	cmp	r1, r2
 8005a06:	f47f aea4 	bne.w	8005752 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a0a:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a0c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a10:	428a      	cmp	r2, r1
 8005a12:	f47f ae9e 	bne.w	8005752 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a16:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a18:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8005a1c:	401a      	ands	r2, r3
 8005a1e:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8005a22:	f47f ae96 	bne.w	8005752 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a26:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8005a28:	0852      	lsrs	r2, r2, #1
 8005a2a:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8005a2e:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a30:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8005a34:	f47f ae8d 	bne.w	8005752 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a38:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005a3a:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a3e:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8005a42:	bf14      	ite	ne
 8005a44:	2001      	movne	r0, #1
 8005a46:	2000      	moveq	r0, #0
 8005a48:	e69b      	b.n	8005782 <HAL_RCC_OscConfig+0x8a>
 8005a4a:	bf00      	nop
 8005a4c:	40023800 	.word	0x40023800
 8005a50:	42470000 	.word	0x42470000

08005a54 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a54:	4913      	ldr	r1, [pc, #76]	@ (8005aa4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8005a56:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a58:	688b      	ldr	r3, [r1, #8]
 8005a5a:	f003 030c 	and.w	r3, r3, #12
 8005a5e:	2b04      	cmp	r3, #4
 8005a60:	d01c      	beq.n	8005a9c <HAL_RCC_GetSysClockFreq+0x48>
 8005a62:	2b08      	cmp	r3, #8
 8005a64:	d11c      	bne.n	8005aa0 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a66:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a68:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a6a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a6c:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a70:	bf14      	ite	ne
 8005a72:	480d      	ldrne	r0, [pc, #52]	@ (8005aa8 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a74:	480d      	ldreq	r0, [pc, #52]	@ (8005aac <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a76:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005a7a:	bf18      	it	ne
 8005a7c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a7e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a82:	fba1 0100 	umull	r0, r1, r1, r0
 8005a86:	f7fa fc03 	bl	8000290 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a8a:	4b06      	ldr	r3, [pc, #24]	@ (8005aa4 <HAL_RCC_GetSysClockFreq+0x50>)
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8005a92:	3301      	adds	r3, #1
 8005a94:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8005a96:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8005a9a:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a9c:	4802      	ldr	r0, [pc, #8]	@ (8005aa8 <HAL_RCC_GetSysClockFreq+0x54>)
 8005a9e:	e7fc      	b.n	8005a9a <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8005aa0:	4802      	ldr	r0, [pc, #8]	@ (8005aac <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8005aa2:	e7fa      	b.n	8005a9a <HAL_RCC_GetSysClockFreq+0x46>
 8005aa4:	40023800 	.word	0x40023800
 8005aa8:	007a1200 	.word	0x007a1200
 8005aac:	00f42400 	.word	0x00f42400

08005ab0 <HAL_RCC_ClockConfig>:
{
 8005ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ab4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8005ab6:	4604      	mov	r4, r0
 8005ab8:	b910      	cbnz	r0, 8005ac0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8005aba:	2001      	movs	r0, #1
}
 8005abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ac0:	4b43      	ldr	r3, [pc, #268]	@ (8005bd0 <HAL_RCC_ClockConfig+0x120>)
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	f002 020f 	and.w	r2, r2, #15
 8005ac8:	428a      	cmp	r2, r1
 8005aca:	d328      	bcc.n	8005b1e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005acc:	6821      	ldr	r1, [r4, #0]
 8005ace:	078f      	lsls	r7, r1, #30
 8005ad0:	d42d      	bmi.n	8005b2e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ad2:	07c8      	lsls	r0, r1, #31
 8005ad4:	d440      	bmi.n	8005b58 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ad6:	4b3e      	ldr	r3, [pc, #248]	@ (8005bd0 <HAL_RCC_ClockConfig+0x120>)
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	f002 020f 	and.w	r2, r2, #15
 8005ade:	42aa      	cmp	r2, r5
 8005ae0:	d865      	bhi.n	8005bae <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ae2:	6822      	ldr	r2, [r4, #0]
 8005ae4:	0751      	lsls	r1, r2, #29
 8005ae6:	d46b      	bmi.n	8005bc0 <HAL_RCC_ClockConfig+0x110>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ae8:	0713      	lsls	r3, r2, #28
 8005aea:	d507      	bpl.n	8005afc <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005aec:	4a39      	ldr	r2, [pc, #228]	@ (8005bd4 <HAL_RCC_ClockConfig+0x124>)
 8005aee:	6921      	ldr	r1, [r4, #16]
 8005af0:	6893      	ldr	r3, [r2, #8]
 8005af2:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005af6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005afa:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005afc:	f7ff ffaa 	bl	8005a54 <HAL_RCC_GetSysClockFreq>
 8005b00:	4b34      	ldr	r3, [pc, #208]	@ (8005bd4 <HAL_RCC_ClockConfig+0x124>)
 8005b02:	4a35      	ldr	r2, [pc, #212]	@ (8005bd8 <HAL_RCC_ClockConfig+0x128>)
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005b0a:	5cd3      	ldrb	r3, [r2, r3]
 8005b0c:	40d8      	lsrs	r0, r3
 8005b0e:	4b33      	ldr	r3, [pc, #204]	@ (8005bdc <HAL_RCC_ClockConfig+0x12c>)
 8005b10:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8005b12:	4b33      	ldr	r3, [pc, #204]	@ (8005be0 <HAL_RCC_ClockConfig+0x130>)
 8005b14:	6818      	ldr	r0, [r3, #0]
 8005b16:	f7fc f9d7 	bl	8001ec8 <HAL_InitTick>
  return HAL_OK;
 8005b1a:	2000      	movs	r0, #0
 8005b1c:	e7ce      	b.n	8005abc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b1e:	b2ca      	uxtb	r2, r1
 8005b20:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 030f 	and.w	r3, r3, #15
 8005b28:	428b      	cmp	r3, r1
 8005b2a:	d1c6      	bne.n	8005aba <HAL_RCC_ClockConfig+0xa>
 8005b2c:	e7ce      	b.n	8005acc <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b2e:	4b29      	ldr	r3, [pc, #164]	@ (8005bd4 <HAL_RCC_ClockConfig+0x124>)
 8005b30:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b34:	bf1e      	ittt	ne
 8005b36:	689a      	ldrne	r2, [r3, #8]
 8005b38:	f442 52e0 	orrne.w	r2, r2, #7168	@ 0x1c00
 8005b3c:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b3e:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b40:	bf42      	ittt	mi
 8005b42:	689a      	ldrmi	r2, [r3, #8]
 8005b44:	f442 4260 	orrmi.w	r2, r2, #57344	@ 0xe000
 8005b48:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b4a:	689a      	ldr	r2, [r3, #8]
 8005b4c:	68a0      	ldr	r0, [r4, #8]
 8005b4e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8005b52:	4302      	orrs	r2, r0
 8005b54:	609a      	str	r2, [r3, #8]
 8005b56:	e7bc      	b.n	8005ad2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b58:	6862      	ldr	r2, [r4, #4]
 8005b5a:	4b1e      	ldr	r3, [pc, #120]	@ (8005bd4 <HAL_RCC_ClockConfig+0x124>)
 8005b5c:	2a01      	cmp	r2, #1
 8005b5e:	d11c      	bne.n	8005b9a <HAL_RCC_ClockConfig+0xea>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b66:	d0a8      	beq.n	8005aba <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b68:	4e1a      	ldr	r6, [pc, #104]	@ (8005bd4 <HAL_RCC_ClockConfig+0x124>)
 8005b6a:	68b3      	ldr	r3, [r6, #8]
 8005b6c:	f023 0303 	bic.w	r3, r3, #3
 8005b70:	4313      	orrs	r3, r2
 8005b72:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8005b74:	f7fe fb32 	bl	80041dc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b78:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8005b7c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b7e:	68b3      	ldr	r3, [r6, #8]
 8005b80:	6862      	ldr	r2, [r4, #4]
 8005b82:	f003 030c 	and.w	r3, r3, #12
 8005b86:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005b8a:	d0a4      	beq.n	8005ad6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b8c:	f7fe fb26 	bl	80041dc <HAL_GetTick>
 8005b90:	1bc0      	subs	r0, r0, r7
 8005b92:	4540      	cmp	r0, r8
 8005b94:	d9f3      	bls.n	8005b7e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8005b96:	2003      	movs	r0, #3
 8005b98:	e790      	b.n	8005abc <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b9a:	1e91      	subs	r1, r2, #2
 8005b9c:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b9e:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ba0:	d802      	bhi.n	8005ba8 <HAL_RCC_ClockConfig+0xf8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ba2:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005ba6:	e7de      	b.n	8005b66 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ba8:	f013 0f02 	tst.w	r3, #2
 8005bac:	e7db      	b.n	8005b66 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bae:	b2ea      	uxtb	r2, r5
 8005bb0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 030f 	and.w	r3, r3, #15
 8005bb8:	42ab      	cmp	r3, r5
 8005bba:	f47f af7e 	bne.w	8005aba <HAL_RCC_ClockConfig+0xa>
 8005bbe:	e790      	b.n	8005ae2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bc0:	4904      	ldr	r1, [pc, #16]	@ (8005bd4 <HAL_RCC_ClockConfig+0x124>)
 8005bc2:	68e0      	ldr	r0, [r4, #12]
 8005bc4:	688b      	ldr	r3, [r1, #8]
 8005bc6:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8005bca:	4303      	orrs	r3, r0
 8005bcc:	608b      	str	r3, [r1, #8]
 8005bce:	e78b      	b.n	8005ae8 <HAL_RCC_ClockConfig+0x38>
 8005bd0:	40023c00 	.word	0x40023c00
 8005bd4:	40023800 	.word	0x40023800
 8005bd8:	080158cc 	.word	0x080158cc
 8005bdc:	20000074 	.word	0x20000074
 8005be0:	2000007c 	.word	0x2000007c

08005be4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005be4:	4b04      	ldr	r3, [pc, #16]	@ (8005bf8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8005be6:	4a05      	ldr	r2, [pc, #20]	@ (8005bfc <HAL_RCC_GetPCLK1Freq+0x18>)
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8005bee:	5cd3      	ldrb	r3, [r2, r3]
 8005bf0:	4a03      	ldr	r2, [pc, #12]	@ (8005c00 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005bf2:	6810      	ldr	r0, [r2, #0]
}
 8005bf4:	40d8      	lsrs	r0, r3
 8005bf6:	4770      	bx	lr
 8005bf8:	40023800 	.word	0x40023800
 8005bfc:	080158c4 	.word	0x080158c4
 8005c00:	20000074 	.word	0x20000074

08005c04 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005c04:	230f      	movs	r3, #15
 8005c06:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005c08:	4b0b      	ldr	r3, [pc, #44]	@ (8005c38 <HAL_RCC_GetClockConfig+0x34>)
 8005c0a:	689a      	ldr	r2, [r3, #8]
 8005c0c:	f002 0203 	and.w	r2, r2, #3
 8005c10:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8005c18:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005c1a:	689a      	ldr	r2, [r3, #8]
 8005c1c:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 8005c20:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	08db      	lsrs	r3, r3, #3
 8005c26:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8005c2a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005c2c:	4b03      	ldr	r3, [pc, #12]	@ (8005c3c <HAL_RCC_GetClockConfig+0x38>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 030f 	and.w	r3, r3, #15
 8005c34:	600b      	str	r3, [r1, #0]
}
 8005c36:	4770      	bx	lr
 8005c38:	40023800 	.word	0x40023800
 8005c3c:	40023c00 	.word	0x40023c00

08005c40 <HAL_RCCEx_PeriphCLKConfig>:
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005c40:	6803      	ldr	r3, [r0, #0]
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c42:	f013 0f43 	tst.w	r3, #67	@ 0x43
{
 8005c46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c48:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c4a:	f040 8088 	bne.w	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x11e>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005c4e:	6823      	ldr	r3, [r4, #0]
 8005c50:	f013 0f0c 	tst.w	r3, #12
 8005c54:	d045      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005c56:	4b8c      	ldr	r3, [pc, #560]	@ (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c58:	4d8c      	ldr	r5, [pc, #560]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLSAI_DISABLE();
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	671a      	str	r2, [r3, #112]	@ 0x70
    tickstart = HAL_GetTick();
 8005c5e:	f7fe fabd 	bl	80041dc <HAL_GetTick>
 8005c62:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c64:	682b      	ldr	r3, [r5, #0]
 8005c66:	0099      	lsls	r1, r3, #2
 8005c68:	f100 80cb 	bmi.w	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005c6c:	6821      	ldr	r1, [r4, #0]
 8005c6e:	074a      	lsls	r2, r1, #29
 8005c70:	d515      	bpl.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005c72:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005c76:	f8d5 2088 	ldr.w	r2, [r5, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005c7a:	061b      	lsls	r3, r3, #24
 8005c7c:	f002 42e0 	and.w	r2, r2, #1879048192	@ 0x70000000
 8005c80:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005c84:	4313      	orrs	r3, r2
 8005c86:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005c8a:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 8005c8e:	6a22      	ldr	r2, [r4, #32]
 8005c90:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8005c94:	3a01      	subs	r2, #1
 8005c96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005c9a:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005c9e:	070b      	lsls	r3, r1, #28
 8005ca0:	d514      	bpl.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ca2:	4a7a      	ldr	r2, [pc, #488]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005ca4:	69a3      	ldr	r3, [r4, #24]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ca6:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005caa:	6920      	ldr	r0, [r4, #16]
 8005cac:	071b      	lsls	r3, r3, #28
 8005cae:	f001 6170 	and.w	r1, r1, #251658240	@ 0xf000000
 8005cb2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005cb6:	430b      	orrs	r3, r1
 8005cb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005cbc:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 8005cc0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005cc2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8005cc6:	430b      	orrs	r3, r1
 8005cc8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005ccc:	4b6e      	ldr	r3, [pc, #440]	@ (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005cce:	4e6f      	ldr	r6, [pc, #444]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLSAI_ENABLE();
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	671a      	str	r2, [r3, #112]	@ 0x70
    tickstart = HAL_GetTick();
 8005cd4:	f7fe fa82 	bl	80041dc <HAL_GetTick>
 8005cd8:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005cda:	6833      	ldr	r3, [r6, #0]
 8005cdc:	009f      	lsls	r7, r3, #2
 8005cde:	f140 8097 	bpl.w	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	0698      	lsls	r0, r3, #26
 8005ce6:	d534      	bpl.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ce8:	2300      	movs	r3, #0
 8005cea:	9301      	str	r3, [sp, #4]
 8005cec:	4b67      	ldr	r3, [pc, #412]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005cee:	4d68      	ldr	r5, [pc, #416]	@ (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x250>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8005cf0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005cf2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005cf6:	641a      	str	r2, [r3, #64]	@ 0x40
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cfe:	9301      	str	r3, [sp, #4]
 8005d00:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8005d02:	682b      	ldr	r3, [r5, #0]
 8005d04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d08:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d0a:	f7fe fa67 	bl	80041dc <HAL_GetTick>
 8005d0e:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005d10:	682b      	ldr	r3, [r5, #0]
 8005d12:	05d8      	lsls	r0, r3, #23
 8005d14:	f140 8083 	bpl.w	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d18:	4d5c      	ldr	r5, [pc, #368]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d1a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d1c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d1e:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8005d22:	f040 8083 	bne.w	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d26:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005d28:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8005d2c:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8005d30:	4a56      	ldr	r2, [pc, #344]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005d32:	f040 809e 	bne.w	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8005d36:	6891      	ldr	r1, [r2, #8]
 8005d38:	f023 4070 	bic.w	r0, r3, #4026531840	@ 0xf0000000
 8005d3c:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 8005d40:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 8005d44:	4301      	orrs	r1, r0
 8005d46:	6091      	str	r1, [r2, #8]
 8005d48:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 8005d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d4e:	430b      	orrs	r3, r1
 8005d50:	6713      	str	r3, [r2, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005d52:	6823      	ldr	r3, [r4, #0]
 8005d54:	06db      	lsls	r3, r3, #27
 8005d56:	f100 8090 	bmi.w	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
  return HAL_OK;
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	e04f      	b.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x1be>
    __HAL_RCC_PLLI2S_DISABLE();
 8005d5e:	4b4a      	ldr	r3, [pc, #296]	@ (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d60:	4e4a      	ldr	r6, [pc, #296]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLI2S_DISABLE();
 8005d62:	2200      	movs	r2, #0
 8005d64:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8005d66:	f7fe fa39 	bl	80041dc <HAL_GetTick>
 8005d6a:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d6c:	6833      	ldr	r3, [r6, #0]
 8005d6e:	011f      	lsls	r7, r3, #4
 8005d70:	d43f      	bmi.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005d72:	6821      	ldr	r1, [r4, #0]
 8005d74:	07c8      	lsls	r0, r1, #31
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005d76:	bf41      	itttt	mi
 8005d78:	e9d4 2301 	ldrdmi	r2, r3, [r4, #4]
 8005d7c:	071b      	lslmi	r3, r3, #28
 8005d7e:	ea43 1382 	orrmi.w	r3, r3, r2, lsl #6
 8005d82:	f8c6 3084 	strmi.w	r3, [r6, #132]	@ 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005d86:	078a      	lsls	r2, r1, #30
 8005d88:	d515      	bpl.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d8a:	4a40      	ldr	r2, [pc, #256]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005d8c:	68e3      	ldr	r3, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d8e:	f8d2 0084 	ldr.w	r0, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005d92:	6865      	ldr	r5, [r4, #4]
 8005d94:	061b      	lsls	r3, r3, #24
 8005d96:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
 8005d9a:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8005d9e:	4303      	orrs	r3, r0
 8005da0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005da4:	f8d2 008c 	ldr.w	r0, [r2, #140]	@ 0x8c
 8005da8:	69e3      	ldr	r3, [r4, #28]
 8005daa:	f020 001f 	bic.w	r0, r0, #31
 8005dae:	3b01      	subs	r3, #1
 8005db0:	4303      	orrs	r3, r0
 8005db2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005db6:	064b      	lsls	r3, r1, #25
 8005db8:	d50a      	bpl.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x190>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005dba:	68e3      	ldr	r3, [r4, #12]
 8005dbc:	6862      	ldr	r2, [r4, #4]
 8005dbe:	061b      	lsls	r3, r3, #24
 8005dc0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005dc4:	68a2      	ldr	r2, [r4, #8]
 8005dc6:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8005dca:	4a30      	ldr	r2, [pc, #192]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005dcc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8005dd0:	4b2d      	ldr	r3, [pc, #180]	@ (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005dd2:	4e2e      	ldr	r6, [pc, #184]	@ (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PLLI2S_ENABLE();
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	669a      	str	r2, [r3, #104]	@ 0x68
    tickstart = HAL_GetTick();
 8005dd8:	f7fe fa00 	bl	80041dc <HAL_GetTick>
 8005ddc:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005dde:	6833      	ldr	r3, [r6, #0]
 8005de0:	011f      	lsls	r7, r3, #4
 8005de2:	f53f af34 	bmi.w	8005c4e <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005de6:	f7fe f9f9 	bl	80041dc <HAL_GetTick>
 8005dea:	1b40      	subs	r0, r0, r5
 8005dec:	2802      	cmp	r0, #2
 8005dee:	d9f6      	bls.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8005df0:	e004      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005df2:	f7fe f9f3 	bl	80041dc <HAL_GetTick>
 8005df6:	1b40      	subs	r0, r0, r5
 8005df8:	2802      	cmp	r0, #2
 8005dfa:	d9b7      	bls.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        return HAL_TIMEOUT;
 8005dfc:	2003      	movs	r0, #3
}
 8005dfe:	b003      	add	sp, #12
 8005e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005e02:	f7fe f9eb 	bl	80041dc <HAL_GetTick>
 8005e06:	1b80      	subs	r0, r0, r6
 8005e08:	2802      	cmp	r0, #2
 8005e0a:	f67f af2b 	bls.w	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8005e0e:	e7f5      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005e10:	f7fe f9e4 	bl	80041dc <HAL_GetTick>
 8005e14:	1b40      	subs	r0, r0, r5
 8005e16:	2802      	cmp	r0, #2
 8005e18:	f67f af5f 	bls.w	8005cda <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8005e1c:	e7ee      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005e1e:	f7fe f9dd 	bl	80041dc <HAL_GetTick>
 8005e22:	1b80      	subs	r0, r0, r6
 8005e24:	2802      	cmp	r0, #2
 8005e26:	f67f af73 	bls.w	8005d10 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8005e2a:	e7e7      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e2c:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8005e30:	4293      	cmp	r3, r2
 8005e32:	f43f af78 	beq.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e36:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e38:	4a13      	ldr	r2, [pc, #76]	@ (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005e3a:	2101      	movs	r1, #1
 8005e3c:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e44:	2100      	movs	r1, #0
 8005e46:	f8c2 1e40 	str.w	r1, [r2, #3648]	@ 0xe40
      RCC->BDCR = tmpreg1;
 8005e4a:	672b      	str	r3, [r5, #112]	@ 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e4c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005e4e:	07d9      	lsls	r1, r3, #31
 8005e50:	f57f af69 	bpl.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0xe6>
        tickstart = HAL_GetTick();
 8005e54:	f7fe f9c2 	bl	80041dc <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e58:	f241 3788 	movw	r7, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8005e5c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e5e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005e60:	079a      	lsls	r2, r3, #30
 8005e62:	f53f af60 	bmi.w	8005d26 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e66:	f7fe f9b9 	bl	80041dc <HAL_GetTick>
 8005e6a:	1b80      	subs	r0, r0, r6
 8005e6c:	42b8      	cmp	r0, r7
 8005e6e:	d9f6      	bls.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005e70:	e7c4      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e72:	6891      	ldr	r1, [r2, #8]
 8005e74:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
 8005e78:	e765      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x106>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005e7a:	4b06      	ldr	r3, [pc, #24]	@ (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005e7c:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8005e80:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
 8005e84:	e769      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x11a>
 8005e86:	bf00      	nop
 8005e88:	42470000 	.word	0x42470000
 8005e8c:	40023800 	.word	0x40023800
 8005e90:	40007000 	.word	0x40007000
 8005e94:	42471000 	.word	0x42471000

08005e98 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005e98:	b538      	push	{r3, r4, r5, lr}
 8005e9a:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005e9c:	4604      	mov	r4, r0
 8005e9e:	b1c8      	cbz	r0, 8005ed4 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005ea0:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8005ea4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005ea8:	b91b      	cbnz	r3, 8005eb2 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005eaa:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005eae:	f7fb ff9f 	bl	8001df0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005eb2:	2302      	movs	r3, #2
 8005eb4:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005eb8:	1d21      	adds	r1, r4, #4
 8005eba:	6820      	ldr	r0, [r4, #0]
 8005ebc:	f000 fcfe 	bl	80068bc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005ec0:	6862      	ldr	r2, [r4, #4]
 8005ec2:	6820      	ldr	r0, [r4, #0]
 8005ec4:	4629      	mov	r1, r5
 8005ec6:	f000 fd31 	bl	800692c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c

  return HAL_OK;
 8005ed0:	2000      	movs	r0, #0
}
 8005ed2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005ed4:	2001      	movs	r0, #1
 8005ed6:	e7fc      	b.n	8005ed2 <HAL_SDRAM_Init+0x3a>

08005ed8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8005ed8:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005eda:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8005ede:	2b02      	cmp	r3, #2
{
 8005ee0:	4605      	mov	r5, r0
 8005ee2:	460e      	mov	r6, r1
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005ee4:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8005ee6:	d012      	beq.n	8005f0e <HAL_SDRAM_SendCommand+0x36>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8005ee8:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 8005eec:	2c01      	cmp	r4, #1
 8005eee:	d10f      	bne.n	8005f10 <HAL_SDRAM_SendCommand+0x38>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005ef6:	6828      	ldr	r0, [r5, #0]
 8005ef8:	f000 fd4e 	bl	8006998 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005efc:	6833      	ldr	r3, [r6, #0]
 8005efe:	2b02      	cmp	r3, #2
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005f00:	bf06      	itte	eq
 8005f02:	2305      	moveq	r3, #5
 8005f04:	f885 302c 	strbeq.w	r3, [r5, #44]	@ 0x2c
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8005f08:	f885 402c 	strbne.w	r4, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005f0c:	2000      	movs	r0, #0
}
 8005f0e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005f10:	2001      	movs	r0, #1
 8005f12:	e7fc      	b.n	8005f0e <HAL_SDRAM_SendCommand+0x36>

08005f14 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005f14:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005f16:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8005f1a:	2b02      	cmp	r3, #2
{
 8005f1c:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005f1e:	b2d8      	uxtb	r0, r3
 8005f20:	d00d      	beq.n	8005f3e <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8005f22:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	b2dd      	uxtb	r5, r3
 8005f2a:	d109      	bne.n	8005f40 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005f2c:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005f2e:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005f30:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005f34:	f000 fd54 	bl	80069e0 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005f38:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8005f3c:	2000      	movs	r0, #0
}
 8005f3e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005f40:	2001      	movs	r0, #1
 8005f42:	e7fc      	b.n	8005f3e <HAL_SDRAM_ProgramRefreshRate+0x2a>

08005f44 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8005f44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005f48:	461c      	mov	r4, r3
 8005f4a:	4616      	mov	r6, r2
 8005f4c:	460f      	mov	r7, r1
 8005f4e:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f50:	f7fe f944 	bl	80041dc <HAL_GetTick>
 8005f54:	4434      	add	r4, r6
 8005f56:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8005f58:	f7fe f940 	bl	80041dc <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f5c:	4b24      	ldr	r3, [pc, #144]	@ (8005ff0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xac>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8005f64:	4363      	muls	r3, r4
  tmp_tickstart = HAL_GetTick();
 8005f66:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f68:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f6a:	682a      	ldr	r2, [r5, #0]
 8005f6c:	6893      	ldr	r3, [r2, #8]
 8005f6e:	ea37 0303 	bics.w	r3, r7, r3
 8005f72:	d001      	beq.n	8005f78 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
      }
      count--;
    }
  }

  return HAL_OK;
 8005f74:	2000      	movs	r0, #0
 8005f76:	e02e      	b.n	8005fd6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8005f78:	1c73      	adds	r3, r6, #1
 8005f7a:	d0f7      	beq.n	8005f6c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f7c:	f7fe f92e 	bl	80041dc <HAL_GetTick>
 8005f80:	eba0 0008 	sub.w	r0, r0, r8
 8005f84:	42a0      	cmp	r0, r4
 8005f86:	d329      	bcc.n	8005fdc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f88:	682b      	ldr	r3, [r5, #0]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005f90:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f92:	686a      	ldr	r2, [r5, #4]
 8005f94:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8005f98:	d10a      	bne.n	8005fb0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 8005f9a:	68aa      	ldr	r2, [r5, #8]
 8005f9c:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8005fa0:	d002      	beq.n	8005fa8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fa2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8005fa6:	d103      	bne.n	8005fb0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fae:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fb0:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8005fb2:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8005fb6:	d107      	bne.n	8005fc8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005fbe:	601a      	str	r2, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005fc6:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	f885 3051 	strb.w	r3, [r5, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005fce:	2300      	movs	r3, #0
 8005fd0:	f885 3050 	strb.w	r3, [r5, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005fd4:	2003      	movs	r0, #3
}
 8005fd6:	b002      	add	sp, #8
 8005fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (count == 0U)
 8005fdc:	9a01      	ldr	r2, [sp, #4]
      count--;
 8005fde:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8005fe0:	2a00      	cmp	r2, #0
      count--;
 8005fe2:	f103 33ff 	add.w	r3, r3, #4294967295
 8005fe6:	9301      	str	r3, [sp, #4]
 8005fe8:	bf08      	it	eq
 8005fea:	4614      	moveq	r4, r2
 8005fec:	e7bd      	b.n	8005f6a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
 8005fee:	bf00      	nop
 8005ff0:	20000074 	.word	0x20000074

08005ff4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005ff4:	b538      	push	{r3, r4, r5, lr}
 8005ff6:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ff8:	6842      	ldr	r2, [r0, #4]
 8005ffa:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
{
 8005ffe:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006000:	d006      	beq.n	8006010 <SPI_EndRxTransaction+0x1c>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006002:	460a      	mov	r2, r1
 8006004:	2101      	movs	r1, #1
 8006006:	f7ff ff9d 	bl	8005f44 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800600a:	b9b8      	cbnz	r0, 800603c <SPI_EndRxTransaction+0x48>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 800600c:	2000      	movs	r0, #0
}
 800600e:	bd38      	pop	{r3, r4, r5, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006010:	6882      	ldr	r2, [r0, #8]
 8006012:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8006016:	d002      	beq.n	800601e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006018:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800601c:	d107      	bne.n	800602e <SPI_EndRxTransaction+0x3a>
    __HAL_SPI_DISABLE(hspi);
 800601e:	6825      	ldr	r5, [r4, #0]
 8006020:	6828      	ldr	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006022:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
    __HAL_SPI_DISABLE(hspi);
 8006026:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 800602a:	6028      	str	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800602c:	d003      	beq.n	8006036 <SPI_EndRxTransaction+0x42>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800602e:	460a      	mov	r2, r1
 8006030:	2180      	movs	r1, #128	@ 0x80
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006032:	4620      	mov	r0, r4
 8006034:	e7e7      	b.n	8006006 <SPI_EndRxTransaction+0x12>
 8006036:	460a      	mov	r2, r1
 8006038:	2101      	movs	r1, #1
 800603a:	e7fa      	b.n	8006032 <SPI_EndRxTransaction+0x3e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800603c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800603e:	f043 0320 	orr.w	r3, r3, #32
 8006042:	6563      	str	r3, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006044:	2003      	movs	r0, #3
 8006046:	e7e2      	b.n	800600e <SPI_EndRxTransaction+0x1a>

08006048 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006048:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800604a:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800604c:	4a12      	ldr	r2, [pc, #72]	@ (8006098 <SPI_EndRxTxTransaction+0x50>)
 800604e:	6815      	ldr	r5, [r2, #0]
 8006050:	4a12      	ldr	r2, [pc, #72]	@ (800609c <SPI_EndRxTxTransaction+0x54>)
 8006052:	fbb5 f5f2 	udiv	r5, r5, r2
 8006056:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800605a:	4355      	muls	r5, r2
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800605c:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800605e:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006060:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
{
 8006064:	4604      	mov	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006066:	d10b      	bne.n	8006080 <SPI_EndRxTxTransaction+0x38>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006068:	460a      	mov	r2, r1
 800606a:	2180      	movs	r1, #128	@ 0x80
 800606c:	f7ff ff6a 	bl	8005f44 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8006070:	b178      	cbz	r0, 8006092 <SPI_EndRxTxTransaction+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006072:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006074:	f043 0320 	orr.w	r3, r3, #32
 8006078:	6563      	str	r3, [r4, #84]	@ 0x54
      return HAL_TIMEOUT;
 800607a:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 800607c:	b003      	add	sp, #12
 800607e:	bd30      	pop	{r4, r5, pc}
      if (count == 0U)
 8006080:	9b01      	ldr	r3, [sp, #4]
 8006082:	b133      	cbz	r3, 8006092 <SPI_EndRxTxTransaction+0x4a>
      count--;
 8006084:	9b01      	ldr	r3, [sp, #4]
 8006086:	3b01      	subs	r3, #1
 8006088:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800608a:	6823      	ldr	r3, [r4, #0]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	061b      	lsls	r3, r3, #24
 8006090:	d4f6      	bmi.n	8006080 <SPI_EndRxTxTransaction+0x38>
  return HAL_OK;
 8006092:	2000      	movs	r0, #0
 8006094:	e7f2      	b.n	800607c <SPI_EndRxTxTransaction+0x34>
 8006096:	bf00      	nop
 8006098:	20000074 	.word	0x20000074
 800609c:	016e3600 	.word	0x016e3600

080060a0 <HAL_SPI_Init>:
{
 80060a0:	b510      	push	{r4, lr}
  if (hspi == NULL)
 80060a2:	4604      	mov	r4, r0
 80060a4:	2800      	cmp	r0, #0
 80060a6:	d055      	beq.n	8006154 <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060a8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d14e      	bne.n	800614c <HAL_SPI_Init+0xac>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060ae:	6842      	ldr	r2, [r0, #4]
 80060b0:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80060b4:	d000      	beq.n	80060b8 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80060b6:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060b8:	2300      	movs	r3, #0
 80060ba:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80060bc:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80060c0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80060c4:	b923      	cbnz	r3, 80060d0 <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 80060c6:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 80060ca:	4620      	mov	r0, r4
 80060cc:	f7fb fe5a 	bl	8001d84 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80060d0:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060d2:	68a0      	ldr	r0, [r4, #8]
 80060d4:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 80060d6:	2302      	movs	r3, #2
 80060d8:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 80060dc:	680b      	ldr	r3, [r1, #0]
 80060de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060e2:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060e4:	6863      	ldr	r3, [r4, #4]
 80060e6:	f400 4004 	and.w	r0, r0, #33792	@ 0x8400
 80060ea:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 80060ee:	4303      	orrs	r3, r0
 80060f0:	68e0      	ldr	r0, [r4, #12]
 80060f2:	f400 6000 	and.w	r0, r0, #2048	@ 0x800
 80060f6:	4303      	orrs	r3, r0
 80060f8:	6920      	ldr	r0, [r4, #16]
 80060fa:	f000 0002 	and.w	r0, r0, #2
 80060fe:	4303      	orrs	r3, r0
 8006100:	6960      	ldr	r0, [r4, #20]
 8006102:	f000 0001 	and.w	r0, r0, #1
 8006106:	4303      	orrs	r3, r0
 8006108:	f402 7000 	and.w	r0, r2, #512	@ 0x200
 800610c:	4303      	orrs	r3, r0
 800610e:	69e0      	ldr	r0, [r4, #28]
 8006110:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 8006114:	4303      	orrs	r3, r0
 8006116:	6a20      	ldr	r0, [r4, #32]
 8006118:	f000 0080 	and.w	r0, r0, #128	@ 0x80
 800611c:	4303      	orrs	r3, r0
 800611e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8006120:	f400 5000 	and.w	r0, r0, #8192	@ 0x2000
 8006124:	4303      	orrs	r3, r0
 8006126:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006128:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800612a:	0c12      	lsrs	r2, r2, #16
 800612c:	f003 0310 	and.w	r3, r3, #16
 8006130:	f002 0204 	and.w	r2, r2, #4
 8006134:	431a      	orrs	r2, r3
 8006136:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006138:	69cb      	ldr	r3, [r1, #28]
 800613a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800613e:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006140:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8006142:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006144:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006146:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 800614a:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800614c:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800614e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006152:	e7b1      	b.n	80060b8 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8006154:	2001      	movs	r0, #1
 8006156:	e7f8      	b.n	800614a <HAL_SPI_Init+0xaa>

08006158 <HAL_SPI_Transmit>:
{
 8006158:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800615c:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 800615e:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8006162:	2b01      	cmp	r3, #1
{
 8006164:	4604      	mov	r4, r0
 8006166:	460d      	mov	r5, r1
 8006168:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 800616a:	f000 80a0 	beq.w	80062ae <HAL_SPI_Transmit+0x156>
 800616e:	2301      	movs	r3, #1
 8006170:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tickstart = HAL_GetTick();
 8006174:	f7fe f832 	bl	80041dc <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8006178:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 800617c:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800617e:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8006180:	b2d8      	uxtb	r0, r3
 8006182:	f040 8092 	bne.w	80062aa <HAL_SPI_Transmit+0x152>
  if ((pData == NULL) || (Size == 0U))
 8006186:	2d00      	cmp	r5, #0
 8006188:	d061      	beq.n	800624e <HAL_SPI_Transmit+0xf6>
 800618a:	f1b8 0f00 	cmp.w	r8, #0
 800618e:	d05e      	beq.n	800624e <HAL_SPI_Transmit+0xf6>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006190:	2303      	movs	r3, #3
 8006192:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006196:	2300      	movs	r3, #0
 8006198:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->RxISR       = NULL;
 800619a:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  hspi->TxXferCount = Size;
 800619e:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80061a2:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80061a4:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80061a6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061a8:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 80061aa:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80061ac:	6325      	str	r5, [r4, #48]	@ 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  hspi->TxXferSize  = Size;
 80061b2:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061b6:	d107      	bne.n	80061c8 <HAL_SPI_Transmit+0x70>
    __HAL_SPI_DISABLE(hspi);
 80061b8:	6833      	ldr	r3, [r6, #0]
 80061ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061be:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 80061c0:	6833      	ldr	r3, [r6, #0]
 80061c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80061c6:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061c8:	6833      	ldr	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061ca:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061cc:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80061ce:	bf5e      	ittt	pl
 80061d0:	6833      	ldrpl	r3, [r6, #0]
 80061d2:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 80061d6:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061d8:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061dc:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061de:	d13f      	bne.n	8006260 <HAL_SPI_Transmit+0x108>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061e0:	b113      	cbz	r3, 80061e8 <HAL_SPI_Transmit+0x90>
 80061e2:	f1b8 0f01 	cmp.w	r8, #1
 80061e6:	d107      	bne.n	80061f8 <HAL_SPI_Transmit+0xa0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061e8:	f835 3b02 	ldrh.w	r3, [r5], #2
 80061ec:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061ee:	6325      	str	r5, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80061f0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80061f2:	3b01      	subs	r3, #1
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 80061f8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	b9a3      	cbnz	r3, 8006228 <HAL_SPI_Transmit+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061fe:	464a      	mov	r2, r9
 8006200:	4639      	mov	r1, r7
 8006202:	4620      	mov	r0, r4
 8006204:	f7ff ff20 	bl	8006048 <SPI_EndRxTxTransaction>
 8006208:	2800      	cmp	r0, #0
 800620a:	d14b      	bne.n	80062a4 <HAL_SPI_Transmit+0x14c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800620c:	68a3      	ldr	r3, [r4, #8]
 800620e:	b933      	cbnz	r3, 800621e <HAL_SPI_Transmit+0xc6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006210:	9301      	str	r3, [sp, #4]
 8006212:	6823      	ldr	r3, [r4, #0]
 8006214:	68da      	ldr	r2, [r3, #12]
 8006216:	9201      	str	r2, [sp, #4]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	9301      	str	r3, [sp, #4]
 800621c:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800621e:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8006220:	3800      	subs	r0, #0
 8006222:	bf18      	it	ne
 8006224:	2001      	movne	r0, #1
error:
 8006226:	e012      	b.n	800624e <HAL_SPI_Transmit+0xf6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006228:	6822      	ldr	r2, [r4, #0]
 800622a:	6893      	ldr	r3, [r2, #8]
 800622c:	0798      	lsls	r0, r3, #30
 800622e:	d505      	bpl.n	800623c <HAL_SPI_Transmit+0xe4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006230:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006232:	f833 1b02 	ldrh.w	r1, [r3], #2
 8006236:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006238:	6323      	str	r3, [r4, #48]	@ 0x30
 800623a:	e7d9      	b.n	80061f0 <HAL_SPI_Transmit+0x98>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800623c:	f7fd ffce 	bl	80041dc <HAL_GetTick>
 8006240:	eba0 0009 	sub.w	r0, r0, r9
 8006244:	42b8      	cmp	r0, r7
 8006246:	d3d7      	bcc.n	80061f8 <HAL_SPI_Transmit+0xa0>
 8006248:	1c79      	adds	r1, r7, #1
 800624a:	d0d5      	beq.n	80061f8 <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 800624c:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800624e:	2301      	movs	r3, #1
 8006250:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8006254:	2300      	movs	r3, #0
 8006256:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 800625a:	b003      	add	sp, #12
 800625c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006260:	b113      	cbz	r3, 8006268 <HAL_SPI_Transmit+0x110>
 8006262:	f1b8 0f01 	cmp.w	r8, #1
 8006266:	d108      	bne.n	800627a <HAL_SPI_Transmit+0x122>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006268:	782b      	ldrb	r3, [r5, #0]
 800626a:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800626c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800626e:	3301      	adds	r3, #1
 8006270:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8006272:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006274:	3b01      	subs	r3, #1
 8006276:	b29b      	uxth	r3, r3
 8006278:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 800627a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800627c:	b29b      	uxth	r3, r3
 800627e:	2b00      	cmp	r3, #0
 8006280:	d0bd      	beq.n	80061fe <HAL_SPI_Transmit+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006282:	6823      	ldr	r3, [r4, #0]
 8006284:	689a      	ldr	r2, [r3, #8]
 8006286:	0792      	lsls	r2, r2, #30
 8006288:	d503      	bpl.n	8006292 <HAL_SPI_Transmit+0x13a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800628a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800628c:	7812      	ldrb	r2, [r2, #0]
 800628e:	731a      	strb	r2, [r3, #12]
 8006290:	e7ec      	b.n	800626c <HAL_SPI_Transmit+0x114>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006292:	f7fd ffa3 	bl	80041dc <HAL_GetTick>
 8006296:	eba0 0009 	sub.w	r0, r0, r9
 800629a:	42b8      	cmp	r0, r7
 800629c:	d3ed      	bcc.n	800627a <HAL_SPI_Transmit+0x122>
 800629e:	1c7b      	adds	r3, r7, #1
 80062a0:	d0eb      	beq.n	800627a <HAL_SPI_Transmit+0x122>
 80062a2:	e7d3      	b.n	800624c <HAL_SPI_Transmit+0xf4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062a4:	2320      	movs	r3, #32
 80062a6:	6563      	str	r3, [r4, #84]	@ 0x54
 80062a8:	e7b0      	b.n	800620c <HAL_SPI_Transmit+0xb4>
    errorcode = HAL_BUSY;
 80062aa:	2002      	movs	r0, #2
 80062ac:	e7cf      	b.n	800624e <HAL_SPI_Transmit+0xf6>
  __HAL_LOCK(hspi);
 80062ae:	2002      	movs	r0, #2
 80062b0:	e7d3      	b.n	800625a <HAL_SPI_Transmit+0x102>

080062b2 <HAL_SPI_TransmitReceive>:
{
 80062b2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80062b6:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80062b8:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
{
 80062bc:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hspi);
 80062c0:	2b01      	cmp	r3, #1
{
 80062c2:	4604      	mov	r4, r0
 80062c4:	460d      	mov	r5, r1
 80062c6:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 80062c8:	f000 80e3 	beq.w	8006492 <HAL_SPI_TransmitReceive+0x1e0>
 80062cc:	2301      	movs	r3, #1
 80062ce:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
  tickstart = HAL_GetTick();
 80062d2:	f7fd ff83 	bl	80041dc <HAL_GetTick>
  tmp_state           = hspi->State;
 80062d6:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tmp_mode            = hspi->Init.Mode;
 80062da:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80062dc:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80062de:	4607      	mov	r7, r0
  tmp_state           = hspi->State;
 80062e0:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80062e2:	d00a      	beq.n	80062fa <HAL_SPI_TransmitReceive+0x48>
 80062e4:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 80062e8:	f040 80d1 	bne.w	800648e <HAL_SPI_TransmitReceive+0x1dc>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80062ec:	68a3      	ldr	r3, [r4, #8]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f040 80cd 	bne.w	800648e <HAL_SPI_TransmitReceive+0x1dc>
 80062f4:	2904      	cmp	r1, #4
 80062f6:	f040 80ca 	bne.w	800648e <HAL_SPI_TransmitReceive+0x1dc>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80062fa:	b115      	cbz	r5, 8006302 <HAL_SPI_TransmitReceive+0x50>
 80062fc:	f1b9 0f00 	cmp.w	r9, #0
 8006300:	d109      	bne.n	8006316 <HAL_SPI_TransmitReceive+0x64>
    errorcode = HAL_ERROR;
 8006302:	2001      	movs	r0, #1
  hspi->State = HAL_SPI_STATE_READY;
 8006304:	2301      	movs	r3, #1
 8006306:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 800630a:	2300      	movs	r3, #0
 800630c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8006310:	b003      	add	sp, #12
 8006312:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006316:	2e00      	cmp	r6, #0
 8006318:	d0f3      	beq.n	8006302 <HAL_SPI_TransmitReceive+0x50>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800631a:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800631e:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006322:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006324:	bf1c      	itt	ne
 8006326:	2305      	movne	r3, #5
 8006328:	f884 3051 	strbne.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800632c:	2300      	movs	r3, #0
 800632e:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->TxISR       = NULL;
 8006330:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006334:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8006336:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxXferCount = Size;
 8006338:	86e6      	strh	r6, [r4, #54]	@ 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800633a:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 800633c:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800633e:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 8006340:	bf58      	it	pl
 8006342:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006344:	6325      	str	r5, [r4, #48]	@ 0x30
    __HAL_SPI_ENABLE(hspi);
 8006346:	bf58      	it	pl
 8006348:	f041 0140 	orrpl.w	r1, r1, #64	@ 0x40
  hspi->TxXferSize  = Size;
 800634c:	86a6      	strh	r6, [r4, #52]	@ 0x34
    __HAL_SPI_ENABLE(hspi);
 800634e:	bf58      	it	pl
 8006350:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006352:	68e1      	ldr	r1, [r4, #12]
 8006354:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8006358:	d148      	bne.n	80063ec <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800635a:	b10a      	cbz	r2, 8006360 <HAL_SPI_TransmitReceive+0xae>
 800635c:	2e01      	cmp	r6, #1
 800635e:	d107      	bne.n	8006370 <HAL_SPI_TransmitReceive+0xbe>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006360:	f835 2b02 	ldrh.w	r2, [r5], #2
 8006364:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8006366:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006368:	6325      	str	r5, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 800636a:	3b01      	subs	r3, #1
 800636c:	b29b      	uxth	r3, r3
 800636e:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8006370:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006372:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006374:	b29b      	uxth	r3, r3
 8006376:	b963      	cbnz	r3, 8006392 <HAL_SPI_TransmitReceive+0xe0>
 8006378:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800637a:	b29b      	uxth	r3, r3
 800637c:	b94b      	cbnz	r3, 8006392 <HAL_SPI_TransmitReceive+0xe0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800637e:	463a      	mov	r2, r7
 8006380:	4641      	mov	r1, r8
 8006382:	4620      	mov	r0, r4
 8006384:	f7ff fe60 	bl	8006048 <SPI_EndRxTxTransaction>
 8006388:	2800      	cmp	r0, #0
 800638a:	d074      	beq.n	8006476 <HAL_SPI_TransmitReceive+0x1c4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800638c:	2320      	movs	r3, #32
 800638e:	6563      	str	r3, [r4, #84]	@ 0x54
    goto error;
 8006390:	e7b7      	b.n	8006302 <HAL_SPI_TransmitReceive+0x50>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006392:	6821      	ldr	r1, [r4, #0]
 8006394:	688b      	ldr	r3, [r1, #8]
 8006396:	079a      	lsls	r2, r3, #30
 8006398:	d50d      	bpl.n	80063b6 <HAL_SPI_TransmitReceive+0x104>
 800639a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800639c:	b29b      	uxth	r3, r3
 800639e:	b153      	cbz	r3, 80063b6 <HAL_SPI_TransmitReceive+0x104>
 80063a0:	b145      	cbz	r5, 80063b4 <HAL_SPI_TransmitReceive+0x102>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063a2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80063a4:	f833 2b02 	ldrh.w	r2, [r3], #2
 80063a8:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063aa:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80063ac:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80063ae:	3b01      	subs	r3, #1
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 80063b4:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063b6:	688a      	ldr	r2, [r1, #8]
 80063b8:	f012 0201 	ands.w	r2, r2, #1
 80063bc:	d00c      	beq.n	80063d8 <HAL_SPI_TransmitReceive+0x126>
 80063be:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	b14b      	cbz	r3, 80063d8 <HAL_SPI_TransmitReceive+0x126>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063c4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80063c6:	68c9      	ldr	r1, [r1, #12]
 80063c8:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063cc:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 80063ce:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80063d0:	3b01      	subs	r3, #1
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80063d6:	4615      	mov	r5, r2
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80063d8:	f7fd ff00 	bl	80041dc <HAL_GetTick>
 80063dc:	1bc0      	subs	r0, r0, r7
 80063de:	4540      	cmp	r0, r8
 80063e0:	d3c7      	bcc.n	8006372 <HAL_SPI_TransmitReceive+0xc0>
 80063e2:	f1b8 3fff 	cmp.w	r8, #4294967295
 80063e6:	d0c4      	beq.n	8006372 <HAL_SPI_TransmitReceive+0xc0>
        errorcode = HAL_TIMEOUT;
 80063e8:	2003      	movs	r0, #3
 80063ea:	e78b      	b.n	8006304 <HAL_SPI_TransmitReceive+0x52>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063ec:	b10a      	cbz	r2, 80063f2 <HAL_SPI_TransmitReceive+0x140>
 80063ee:	2e01      	cmp	r6, #1
 80063f0:	d108      	bne.n	8006404 <HAL_SPI_TransmitReceive+0x152>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063f2:	782a      	ldrb	r2, [r5, #0]
 80063f4:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80063f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80063f8:	3301      	adds	r3, #1
 80063fa:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80063fc:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80063fe:	3b01      	subs	r3, #1
 8006400:	b29b      	uxth	r3, r3
 8006402:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8006404:	2501      	movs	r5, #1
 8006406:	e02d      	b.n	8006464 <HAL_SPI_TransmitReceive+0x1b2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006408:	6822      	ldr	r2, [r4, #0]
 800640a:	6893      	ldr	r3, [r2, #8]
 800640c:	079b      	lsls	r3, r3, #30
 800640e:	d50e      	bpl.n	800642e <HAL_SPI_TransmitReceive+0x17c>
 8006410:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006412:	b29b      	uxth	r3, r3
 8006414:	b15b      	cbz	r3, 800642e <HAL_SPI_TransmitReceive+0x17c>
 8006416:	b14d      	cbz	r5, 800642c <HAL_SPI_TransmitReceive+0x17a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006418:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 800641e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006420:	3301      	adds	r3, #1
 8006422:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8006424:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006426:	3b01      	subs	r3, #1
 8006428:	b29b      	uxth	r3, r3
 800642a:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 800642c:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800642e:	6822      	ldr	r2, [r4, #0]
 8006430:	6891      	ldr	r1, [r2, #8]
 8006432:	f011 0101 	ands.w	r1, r1, #1
 8006436:	d00d      	beq.n	8006454 <HAL_SPI_TransmitReceive+0x1a2>
 8006438:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800643a:	b29b      	uxth	r3, r3
 800643c:	b153      	cbz	r3, 8006454 <HAL_SPI_TransmitReceive+0x1a2>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800643e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006440:	68d2      	ldr	r2, [r2, #12]
 8006442:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006444:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006446:	3301      	adds	r3, #1
 8006448:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 800644a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800644c:	3b01      	subs	r3, #1
 800644e:	b29b      	uxth	r3, r3
 8006450:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8006452:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006454:	f7fd fec2 	bl	80041dc <HAL_GetTick>
 8006458:	1bc0      	subs	r0, r0, r7
 800645a:	4540      	cmp	r0, r8
 800645c:	d302      	bcc.n	8006464 <HAL_SPI_TransmitReceive+0x1b2>
 800645e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006462:	d1c1      	bne.n	80063e8 <HAL_SPI_TransmitReceive+0x136>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006464:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8006466:	b29b      	uxth	r3, r3
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1cd      	bne.n	8006408 <HAL_SPI_TransmitReceive+0x156>
 800646c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800646e:	b29b      	uxth	r3, r3
 8006470:	2b00      	cmp	r3, #0
 8006472:	d1c9      	bne.n	8006408 <HAL_SPI_TransmitReceive+0x156>
 8006474:	e783      	b.n	800637e <HAL_SPI_TransmitReceive+0xcc>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006476:	68a3      	ldr	r3, [r4, #8]
 8006478:	2b00      	cmp	r3, #0
 800647a:	f47f af43 	bne.w	8006304 <HAL_SPI_TransmitReceive+0x52>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800647e:	6823      	ldr	r3, [r4, #0]
 8006480:	9001      	str	r0, [sp, #4]
 8006482:	68da      	ldr	r2, [r3, #12]
 8006484:	9201      	str	r2, [sp, #4]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	9301      	str	r3, [sp, #4]
 800648a:	9b01      	ldr	r3, [sp, #4]
 800648c:	e73a      	b.n	8006304 <HAL_SPI_TransmitReceive+0x52>
    errorcode = HAL_BUSY;
 800648e:	2002      	movs	r0, #2
 8006490:	e738      	b.n	8006304 <HAL_SPI_TransmitReceive+0x52>
  __HAL_LOCK(hspi);
 8006492:	2002      	movs	r0, #2
 8006494:	e73c      	b.n	8006310 <HAL_SPI_TransmitReceive+0x5e>

08006496 <HAL_SPI_Receive>:
{
 8006496:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800649a:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800649c:	6843      	ldr	r3, [r0, #4]
 800649e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
{
 80064a2:	4604      	mov	r4, r0
 80064a4:	4689      	mov	r9, r1
 80064a6:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80064a8:	d10c      	bne.n	80064c4 <HAL_SPI_Receive+0x2e>
 80064aa:	6883      	ldr	r3, [r0, #8]
 80064ac:	b953      	cbnz	r3, 80064c4 <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80064ae:	2304      	movs	r3, #4
 80064b0:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80064b4:	4613      	mov	r3, r2
 80064b6:	9500      	str	r5, [sp, #0]
 80064b8:	460a      	mov	r2, r1
 80064ba:	f7ff fefa 	bl	80062b2 <HAL_SPI_TransmitReceive>
}
 80064be:	b003      	add	sp, #12
 80064c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 80064c4:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d07f      	beq.n	80065cc <HAL_SPI_Receive+0x136>
 80064cc:	2301      	movs	r3, #1
 80064ce:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  tickstart = HAL_GetTick();
 80064d2:	f7fd fe83 	bl	80041dc <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80064d6:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80064da:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80064dc:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80064de:	b2d8      	uxtb	r0, r3
 80064e0:	d172      	bne.n	80065c8 <HAL_SPI_Receive+0x132>
  if ((pData == NULL) || (Size == 0U))
 80064e2:	f1b9 0f00 	cmp.w	r9, #0
 80064e6:	d05c      	beq.n	80065a2 <HAL_SPI_Receive+0x10c>
 80064e8:	2f00      	cmp	r7, #0
 80064ea:	d05a      	beq.n	80065a2 <HAL_SPI_Receive+0x10c>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064ec:	68a2      	ldr	r2, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80064ee:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064f2:	2600      	movs	r6, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80064f4:	2304      	movs	r3, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064f6:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80064fa:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->TxISR       = NULL;
 80064fe:	e9c4 6610 	strd	r6, r6, [r4, #64]	@ 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006502:	6566      	str	r6, [r4, #84]	@ 0x54
    __HAL_SPI_DISABLE(hspi);
 8006504:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8006506:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006508:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800650a:	6326      	str	r6, [r4, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800650c:	86a6      	strh	r6, [r4, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800650e:	86e6      	strh	r6, [r4, #54]	@ 0x36
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006510:	d107      	bne.n	8006522 <HAL_SPI_Receive+0x8c>
    __HAL_SPI_DISABLE(hspi);
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006518:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006520:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	0656      	lsls	r6, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8006526:	bf5e      	ittt	pl
 8006528:	681a      	ldrpl	r2, [r3, #0]
 800652a:	f042 0240 	orrpl.w	r2, r2, #64	@ 0x40
 800652e:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006530:	68e3      	ldr	r3, [r4, #12]
 8006532:	b1f3      	cbz	r3, 8006572 <HAL_SPI_Receive+0xdc>
    while (hspi->RxXferCount > 0U)
 8006534:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006536:	b29b      	uxth	r3, r3
 8006538:	b1fb      	cbz	r3, 800657a <HAL_SPI_Receive+0xe4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800653a:	6823      	ldr	r3, [r4, #0]
 800653c:	689a      	ldr	r2, [r3, #8]
 800653e:	07d2      	lsls	r2, r2, #31
 8006540:	d536      	bpl.n	80065b0 <HAL_SPI_Receive+0x11a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006542:	68da      	ldr	r2, [r3, #12]
 8006544:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006546:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800654a:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 800654c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800654e:	3b01      	subs	r3, #1
 8006550:	b29b      	uxth	r3, r3
 8006552:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8006554:	e7ee      	b.n	8006534 <HAL_SPI_Receive+0x9e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006556:	6823      	ldr	r3, [r4, #0]
 8006558:	689a      	ldr	r2, [r3, #8]
 800655a:	07d0      	lsls	r0, r2, #31
 800655c:	d518      	bpl.n	8006590 <HAL_SPI_Receive+0xfa>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800655e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006560:	7b1b      	ldrb	r3, [r3, #12]
 8006562:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006564:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006566:	3301      	adds	r3, #1
 8006568:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 800656a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800656c:	3b01      	subs	r3, #1
 800656e:	b29b      	uxth	r3, r3
 8006570:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->RxXferCount > 0U)
 8006572:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006574:	b29b      	uxth	r3, r3
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1ed      	bne.n	8006556 <HAL_SPI_Receive+0xc0>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800657a:	4642      	mov	r2, r8
 800657c:	4629      	mov	r1, r5
 800657e:	4620      	mov	r0, r4
 8006580:	f7ff fd38 	bl	8005ff4 <SPI_EndRxTransaction>
 8006584:	b9e8      	cbnz	r0, 80065c2 <HAL_SPI_Receive+0x12c>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006586:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8006588:	3800      	subs	r0, #0
 800658a:	bf18      	it	ne
 800658c:	2001      	movne	r0, #1
error :
 800658e:	e008      	b.n	80065a2 <HAL_SPI_Receive+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006590:	f7fd fe24 	bl	80041dc <HAL_GetTick>
 8006594:	eba0 0008 	sub.w	r0, r0, r8
 8006598:	42a8      	cmp	r0, r5
 800659a:	d3ea      	bcc.n	8006572 <HAL_SPI_Receive+0xdc>
 800659c:	1c69      	adds	r1, r5, #1
 800659e:	d0e8      	beq.n	8006572 <HAL_SPI_Receive+0xdc>
          errorcode = HAL_TIMEOUT;
 80065a0:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80065a2:	2301      	movs	r3, #1
 80065a4:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80065a8:	2300      	movs	r3, #0
 80065aa:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  return errorcode;
 80065ae:	e786      	b.n	80064be <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065b0:	f7fd fe14 	bl	80041dc <HAL_GetTick>
 80065b4:	eba0 0008 	sub.w	r0, r0, r8
 80065b8:	42a8      	cmp	r0, r5
 80065ba:	d3bb      	bcc.n	8006534 <HAL_SPI_Receive+0x9e>
 80065bc:	1c6b      	adds	r3, r5, #1
 80065be:	d0b9      	beq.n	8006534 <HAL_SPI_Receive+0x9e>
 80065c0:	e7ee      	b.n	80065a0 <HAL_SPI_Receive+0x10a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065c2:	2320      	movs	r3, #32
 80065c4:	6563      	str	r3, [r4, #84]	@ 0x54
 80065c6:	e7de      	b.n	8006586 <HAL_SPI_Receive+0xf0>
    errorcode = HAL_BUSY;
 80065c8:	2002      	movs	r0, #2
 80065ca:	e7ea      	b.n	80065a2 <HAL_SPI_Receive+0x10c>
  __HAL_LOCK(hspi);
 80065cc:	2002      	movs	r0, #2
 80065ce:	e776      	b.n	80064be <HAL_SPI_Receive+0x28>

080065d0 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80065d0:	4770      	bx	lr
	...

080065d4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065d4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d130      	bne.n	800663e <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065dc:	2302      	movs	r3, #2
 80065de:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065e2:	6803      	ldr	r3, [r0, #0]
 80065e4:	68da      	ldr	r2, [r3, #12]
 80065e6:	f042 0201 	orr.w	r2, r2, #1
 80065ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065ec:	4a15      	ldr	r2, [pc, #84]	@ (8006644 <HAL_TIM_Base_Start_IT+0x70>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d01a      	beq.n	8006628 <HAL_TIM_Base_Start_IT+0x54>
 80065f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065f6:	d017      	beq.n	8006628 <HAL_TIM_Base_Start_IT+0x54>
 80065f8:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d013      	beq.n	8006628 <HAL_TIM_Base_Start_IT+0x54>
 8006600:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006604:	4293      	cmp	r3, r2
 8006606:	d00f      	beq.n	8006628 <HAL_TIM_Base_Start_IT+0x54>
 8006608:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800660c:	4293      	cmp	r3, r2
 800660e:	d00b      	beq.n	8006628 <HAL_TIM_Base_Start_IT+0x54>
 8006610:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8006614:	4293      	cmp	r3, r2
 8006616:	d007      	beq.n	8006628 <HAL_TIM_Base_Start_IT+0x54>
 8006618:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800661c:	4293      	cmp	r3, r2
 800661e:	d003      	beq.n	8006628 <HAL_TIM_Base_Start_IT+0x54>
 8006620:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8006624:	4293      	cmp	r3, r2
 8006626:	d104      	bne.n	8006632 <HAL_TIM_Base_Start_IT+0x5e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006628:	689a      	ldr	r2, [r3, #8]
 800662a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800662e:	2a06      	cmp	r2, #6
 8006630:	d003      	beq.n	800663a <HAL_TIM_Base_Start_IT+0x66>
    {
      __HAL_TIM_ENABLE(htim);
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	f042 0201 	orr.w	r2, r2, #1
 8006638:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800663a:	2000      	movs	r0, #0
 800663c:	4770      	bx	lr
    return HAL_ERROR;
 800663e:	2001      	movs	r0, #1
}
 8006640:	4770      	bx	lr
 8006642:	bf00      	nop
 8006644:	40010000 	.word	0x40010000

08006648 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8006648:	4770      	bx	lr

0800664a <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800664a:	4770      	bx	lr

0800664c <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800664c:	4770      	bx	lr

0800664e <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800664e:	4770      	bx	lr

08006650 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006650:	6803      	ldr	r3, [r0, #0]
 8006652:	691a      	ldr	r2, [r3, #16]
 8006654:	0791      	lsls	r1, r2, #30
{
 8006656:	b510      	push	{r4, lr}
 8006658:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800665a:	d50e      	bpl.n	800667a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800665c:	68da      	ldr	r2, [r3, #12]
 800665e:	0792      	lsls	r2, r2, #30
 8006660:	d50b      	bpl.n	800667a <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006662:	f06f 0202 	mvn.w	r2, #2
 8006666:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006668:	2201      	movs	r2, #1
 800666a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	079b      	lsls	r3, r3, #30
 8006670:	d077      	beq.n	8006762 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8006672:	f7ff ffea 	bl	800664a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006676:	2300      	movs	r3, #0
 8006678:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800667a:	6823      	ldr	r3, [r4, #0]
 800667c:	691a      	ldr	r2, [r3, #16]
 800667e:	0750      	lsls	r0, r2, #29
 8006680:	d510      	bpl.n	80066a4 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006682:	68da      	ldr	r2, [r3, #12]
 8006684:	0751      	lsls	r1, r2, #29
 8006686:	d50d      	bpl.n	80066a4 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006688:	f06f 0204 	mvn.w	r2, #4
 800668c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800668e:	2202      	movs	r2, #2
 8006690:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8006698:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800669a:	d068      	beq.n	800676e <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800669c:	f7ff ffd5 	bl	800664a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066a0:	2300      	movs	r3, #0
 80066a2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066a4:	6823      	ldr	r3, [r4, #0]
 80066a6:	691a      	ldr	r2, [r3, #16]
 80066a8:	0712      	lsls	r2, r2, #28
 80066aa:	d50f      	bpl.n	80066cc <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066ac:	68da      	ldr	r2, [r3, #12]
 80066ae:	0710      	lsls	r0, r2, #28
 80066b0:	d50c      	bpl.n	80066cc <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066b2:	f06f 0208 	mvn.w	r2, #8
 80066b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066b8:	2204      	movs	r2, #4
 80066ba:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066bc:	69db      	ldr	r3, [r3, #28]
 80066be:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80066c0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066c2:	d05a      	beq.n	800677a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80066c4:	f7ff ffc1 	bl	800664a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066c8:	2300      	movs	r3, #0
 80066ca:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80066cc:	6823      	ldr	r3, [r4, #0]
 80066ce:	691a      	ldr	r2, [r3, #16]
 80066d0:	06d2      	lsls	r2, r2, #27
 80066d2:	d510      	bpl.n	80066f6 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80066d4:	68da      	ldr	r2, [r3, #12]
 80066d6:	06d0      	lsls	r0, r2, #27
 80066d8:	d50d      	bpl.n	80066f6 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066da:	f06f 0210 	mvn.w	r2, #16
 80066de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066e0:	2208      	movs	r2, #8
 80066e2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80066ea:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066ec:	d04b      	beq.n	8006786 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80066ee:	f7ff ffac 	bl	800664a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066f2:	2300      	movs	r3, #0
 80066f4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80066f6:	6823      	ldr	r3, [r4, #0]
 80066f8:	691a      	ldr	r2, [r3, #16]
 80066fa:	07d1      	lsls	r1, r2, #31
 80066fc:	d508      	bpl.n	8006710 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066fe:	68da      	ldr	r2, [r3, #12]
 8006700:	07d2      	lsls	r2, r2, #31
 8006702:	d505      	bpl.n	8006710 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006704:	f06f 0201 	mvn.w	r2, #1
 8006708:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800670a:	4620      	mov	r0, r4
 800670c:	f7fb f944 	bl	8001998 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006710:	6823      	ldr	r3, [r4, #0]
 8006712:	691a      	ldr	r2, [r3, #16]
 8006714:	0610      	lsls	r0, r2, #24
 8006716:	d508      	bpl.n	800672a <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006718:	68da      	ldr	r2, [r3, #12]
 800671a:	0611      	lsls	r1, r2, #24
 800671c:	d505      	bpl.n	800672a <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800671e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006722:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006724:	4620      	mov	r0, r4
 8006726:	f000 f8c8 	bl	80068ba <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800672a:	6823      	ldr	r3, [r4, #0]
 800672c:	691a      	ldr	r2, [r3, #16]
 800672e:	0652      	lsls	r2, r2, #25
 8006730:	d508      	bpl.n	8006744 <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006732:	68da      	ldr	r2, [r3, #12]
 8006734:	0650      	lsls	r0, r2, #25
 8006736:	d505      	bpl.n	8006744 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006738:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800673c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800673e:	4620      	mov	r0, r4
 8006740:	f7ff ff85 	bl	800664e <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006744:	6823      	ldr	r3, [r4, #0]
 8006746:	691a      	ldr	r2, [r3, #16]
 8006748:	0691      	lsls	r1, r2, #26
 800674a:	d522      	bpl.n	8006792 <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800674c:	68da      	ldr	r2, [r3, #12]
 800674e:	0692      	lsls	r2, r2, #26
 8006750:	d51f      	bpl.n	8006792 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006752:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8006756:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006758:	611a      	str	r2, [r3, #16]
}
 800675a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800675e:	f000 b8ab 	b.w	80068b8 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006762:	f7ff ff71 	bl	8006648 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006766:	4620      	mov	r0, r4
 8006768:	f7ff ff70 	bl	800664c <HAL_TIM_PWM_PulseFinishedCallback>
 800676c:	e783      	b.n	8006676 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800676e:	f7ff ff6b 	bl	8006648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006772:	4620      	mov	r0, r4
 8006774:	f7ff ff6a 	bl	800664c <HAL_TIM_PWM_PulseFinishedCallback>
 8006778:	e792      	b.n	80066a0 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800677a:	f7ff ff65 	bl	8006648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800677e:	4620      	mov	r0, r4
 8006780:	f7ff ff64 	bl	800664c <HAL_TIM_PWM_PulseFinishedCallback>
 8006784:	e7a0      	b.n	80066c8 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006786:	f7ff ff5f 	bl	8006648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800678a:	4620      	mov	r0, r4
 800678c:	f7ff ff5e 	bl	800664c <HAL_TIM_PWM_PulseFinishedCallback>
 8006790:	e7af      	b.n	80066f2 <HAL_TIM_IRQHandler+0xa2>
}
 8006792:	bd10      	pop	{r4, pc}

08006794 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006794:	4a30      	ldr	r2, [pc, #192]	@ (8006858 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8006796:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006798:	4290      	cmp	r0, r2
 800679a:	d012      	beq.n	80067c2 <TIM_Base_SetConfig+0x2e>
 800679c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80067a0:	d00f      	beq.n	80067c2 <TIM_Base_SetConfig+0x2e>
 80067a2:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80067a6:	4290      	cmp	r0, r2
 80067a8:	d00b      	beq.n	80067c2 <TIM_Base_SetConfig+0x2e>
 80067aa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80067ae:	4290      	cmp	r0, r2
 80067b0:	d007      	beq.n	80067c2 <TIM_Base_SetConfig+0x2e>
 80067b2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80067b6:	4290      	cmp	r0, r2
 80067b8:	d003      	beq.n	80067c2 <TIM_Base_SetConfig+0x2e>
 80067ba:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80067be:	4290      	cmp	r0, r2
 80067c0:	d119      	bne.n	80067f6 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80067c2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80067c8:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067ca:	4a23      	ldr	r2, [pc, #140]	@ (8006858 <TIM_Base_SetConfig+0xc4>)
 80067cc:	4290      	cmp	r0, r2
 80067ce:	d029      	beq.n	8006824 <TIM_Base_SetConfig+0x90>
 80067d0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80067d4:	d026      	beq.n	8006824 <TIM_Base_SetConfig+0x90>
 80067d6:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80067da:	4290      	cmp	r0, r2
 80067dc:	d022      	beq.n	8006824 <TIM_Base_SetConfig+0x90>
 80067de:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80067e2:	4290      	cmp	r0, r2
 80067e4:	d01e      	beq.n	8006824 <TIM_Base_SetConfig+0x90>
 80067e6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80067ea:	4290      	cmp	r0, r2
 80067ec:	d01a      	beq.n	8006824 <TIM_Base_SetConfig+0x90>
 80067ee:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80067f2:	4290      	cmp	r0, r2
 80067f4:	d016      	beq.n	8006824 <TIM_Base_SetConfig+0x90>
 80067f6:	4a19      	ldr	r2, [pc, #100]	@ (800685c <TIM_Base_SetConfig+0xc8>)
 80067f8:	4290      	cmp	r0, r2
 80067fa:	d013      	beq.n	8006824 <TIM_Base_SetConfig+0x90>
 80067fc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006800:	4290      	cmp	r0, r2
 8006802:	d00f      	beq.n	8006824 <TIM_Base_SetConfig+0x90>
 8006804:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006808:	4290      	cmp	r0, r2
 800680a:	d00b      	beq.n	8006824 <TIM_Base_SetConfig+0x90>
 800680c:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8006810:	4290      	cmp	r0, r2
 8006812:	d007      	beq.n	8006824 <TIM_Base_SetConfig+0x90>
 8006814:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006818:	4290      	cmp	r0, r2
 800681a:	d003      	beq.n	8006824 <TIM_Base_SetConfig+0x90>
 800681c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006820:	4290      	cmp	r0, r2
 8006822:	d103      	bne.n	800682c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006824:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006826:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800682a:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800682c:	694a      	ldr	r2, [r1, #20]
 800682e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006832:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8006834:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006836:	688b      	ldr	r3, [r1, #8]
 8006838:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800683a:	680b      	ldr	r3, [r1, #0]
 800683c:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800683e:	4b06      	ldr	r3, [pc, #24]	@ (8006858 <TIM_Base_SetConfig+0xc4>)
 8006840:	4298      	cmp	r0, r3
 8006842:	d003      	beq.n	800684c <TIM_Base_SetConfig+0xb8>
 8006844:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006848:	4298      	cmp	r0, r3
 800684a:	d101      	bne.n	8006850 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800684c:	690b      	ldr	r3, [r1, #16]
 800684e:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006850:	2301      	movs	r3, #1
 8006852:	6143      	str	r3, [r0, #20]
}
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	40010000 	.word	0x40010000
 800685c:	40014000 	.word	0x40014000

08006860 <HAL_TIM_Base_Init>:
{
 8006860:	b510      	push	{r4, lr}
  if (htim == NULL)
 8006862:	4604      	mov	r4, r0
 8006864:	b330      	cbz	r0, 80068b4 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8006866:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800686a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800686e:	b91b      	cbnz	r3, 8006878 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8006870:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006874:	f7ff feac 	bl	80065d0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006878:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800687a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800687c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006880:	1d21      	adds	r1, r4, #4
 8006882:	f7ff ff87 	bl	8006794 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006886:	2301      	movs	r3, #1
 8006888:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  return HAL_OK;
 800688c:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800688e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8006892:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8006896:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800689a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800689e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80068a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068a6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80068aa:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80068ae:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 80068b2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80068b4:	2001      	movs	r0, #1
 80068b6:	e7fc      	b.n	80068b2 <HAL_TIM_Base_Init+0x52>

080068b8 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 80068b8:	4770      	bx	lr

080068ba <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 80068ba:	4770      	bx	lr

080068bc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80068bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80068c0:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 80068c4:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 80068c8:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 80068cc:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
 80068d0:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80068d4:	6809      	ldr	r1, [r1, #0]
 80068d6:	ea43 0308 	orr.w	r3, r3, r8
 80068da:	b991      	cbnz	r1, 8006902 <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80068dc:	ea43 030e 	orr.w	r3, r3, lr
 80068e0:	4313      	orrs	r3, r2
 80068e2:	ea43 030c 	orr.w	r3, r3, ip
 80068e6:	6801      	ldr	r1, [r0, #0]
 80068e8:	433b      	orrs	r3, r7
 80068ea:	4333      	orrs	r3, r6
 80068ec:	432b      	orrs	r3, r5
 80068ee:	f421 41ff 	bic.w	r1, r1, #32640	@ 0x7f80
 80068f2:	4323      	orrs	r3, r4
 80068f4:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 80068f8:	430b      	orrs	r3, r1
 80068fa:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 80068fc:	2000      	movs	r0, #0
 80068fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006902:	6801      	ldr	r1, [r0, #0]
 8006904:	ea43 030e 	orr.w	r3, r3, lr
 8006908:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 800690c:	430b      	orrs	r3, r1
 800690e:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006910:	ea42 030c 	orr.w	r3, r2, ip
 8006914:	6841      	ldr	r1, [r0, #4]
 8006916:	433b      	orrs	r3, r7
 8006918:	4333      	orrs	r3, r6
 800691a:	432b      	orrs	r3, r5
 800691c:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 8006920:	4323      	orrs	r3, r4
 8006922:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8006926:	4313      	orrs	r3, r2
 8006928:	6043      	str	r3, [r0, #4]
 800692a:	e7e7      	b.n	80068fc <FMC_SDRAM_Init+0x40>

0800692c <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800692c:	68cb      	ldr	r3, [r1, #12]
 800692e:	f103 3cff 	add.w	ip, r3, #4294967295
 8006932:	694b      	ldr	r3, [r1, #20]
{
 8006934:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006936:	680f      	ldr	r7, [r1, #0]
 8006938:	684c      	ldr	r4, [r1, #4]
 800693a:	688e      	ldr	r6, [r1, #8]
 800693c:	690d      	ldr	r5, [r1, #16]
 800693e:	6989      	ldr	r1, [r1, #24]
 8006940:	3b01      	subs	r3, #1
 8006942:	051b      	lsls	r3, r3, #20
 8006944:	3c01      	subs	r4, #1
 8006946:	3e01      	subs	r6, #1
 8006948:	3d01      	subs	r5, #1
 800694a:	3901      	subs	r1, #1
 800694c:	3f01      	subs	r7, #1
 800694e:	0124      	lsls	r4, r4, #4
 8006950:	0236      	lsls	r6, r6, #8
 8006952:	042d      	lsls	r5, r5, #16
 8006954:	0609      	lsls	r1, r1, #24
 8006956:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800695a:	b95a      	cbnz	r2, 8006974 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800695c:	433b      	orrs	r3, r7
 800695e:	4323      	orrs	r3, r4
 8006960:	6882      	ldr	r2, [r0, #8]
 8006962:	4333      	orrs	r3, r6
 8006964:	432b      	orrs	r3, r5
 8006966:	430b      	orrs	r3, r1
 8006968:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800696c:	4313      	orrs	r3, r2
 800696e:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8006970:	2000      	movs	r0, #0
 8006972:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006974:	6882      	ldr	r2, [r0, #8]
 8006976:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800697a:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 800697e:	431a      	orrs	r2, r3
 8006980:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006982:	ea44 0306 	orr.w	r3, r4, r6
 8006986:	68c2      	ldr	r2, [r0, #12]
 8006988:	433b      	orrs	r3, r7
 800698a:	432b      	orrs	r3, r5
 800698c:	430b      	orrs	r3, r1
 800698e:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 8006992:	4313      	orrs	r3, r2
 8006994:	60c3      	str	r3, [r0, #12]
 8006996:	e7eb      	b.n	8006970 <FMC_SDRAM_Timing_Init+0x44>

08006998 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006998:	b570      	push	{r4, r5, r6, lr}
 800699a:	4604      	mov	r4, r0
 800699c:	4615      	mov	r5, r2
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800699e:	6902      	ldr	r2, [r0, #16]
 80069a0:	e9d1 3000 	ldrd	r3, r0, [r1]
 80069a4:	4303      	orrs	r3, r0
 80069a6:	68c8      	ldr	r0, [r1, #12]
 80069a8:	0d92      	lsrs	r2, r2, #22
 80069aa:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
 80069ae:	0592      	lsls	r2, r2, #22
 80069b0:	4313      	orrs	r3, r2
 80069b2:	688a      	ldr	r2, [r1, #8]
 80069b4:	3a01      	subs	r2, #1
 80069b6:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80069ba:	6123      	str	r3, [r4, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 80069bc:	f7fd fc0e 	bl	80041dc <HAL_GetTick>
 80069c0:	4606      	mov	r6, r0

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80069c2:	69a0      	ldr	r0, [r4, #24]
 80069c4:	f010 0020 	ands.w	r0, r0, #32
 80069c8:	d003      	beq.n	80069d2 <FMC_SDRAM_SendCommand+0x3a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ca:	1c6b      	adds	r3, r5, #1
 80069cc:	d0f9      	beq.n	80069c2 <FMC_SDRAM_SendCommand+0x2a>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80069ce:	b90d      	cbnz	r5, 80069d4 <FMC_SDRAM_SendCommand+0x3c>
      {
        return HAL_TIMEOUT;
 80069d0:	2003      	movs	r0, #3
      }
    }
  }
  return HAL_OK;
}
 80069d2:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80069d4:	f7fd fc02 	bl	80041dc <HAL_GetTick>
 80069d8:	1b80      	subs	r0, r0, r6
 80069da:	42a8      	cmp	r0, r5
 80069dc:	d9f1      	bls.n	80069c2 <FMC_SDRAM_SendCommand+0x2a>
 80069de:	e7f7      	b.n	80069d0 <FMC_SDRAM_SendCommand+0x38>

080069e0 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80069e0:	6943      	ldr	r3, [r0, #20]
 80069e2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80069e6:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 80069ea:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80069ee:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 80069f0:	2000      	movs	r0, #0
 80069f2:	4770      	bx	lr

080069f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80069f4:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 80069f6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80069fa:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80069fc:	f001 fe20 	bl	8008640 <xTaskGetSchedulerState>
 8006a00:	2801      	cmp	r0, #1
 8006a02:	d003      	beq.n	8006a0c <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8006a04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8006a08:	f000 bbec 	b.w	80071e4 <xPortSysTickHandler>
}
 8006a0c:	bd08      	pop	{r3, pc}
	...

08006a10 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a10:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a14:	b92b      	cbnz	r3, 8006a22 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8006a16:	4b06      	ldr	r3, [pc, #24]	@ (8006a30 <osKernelInitialize+0x20>)
 8006a18:	6818      	ldr	r0, [r3, #0]
 8006a1a:	b928      	cbnz	r0, 8006a28 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006a20:	4770      	bx	lr
    stat = osErrorISR;
 8006a22:	f06f 0005 	mvn.w	r0, #5
 8006a26:	4770      	bx	lr
    } else {
      stat = osError;
 8006a28:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	20001fb8 	.word	0x20001fb8

08006a34 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006a34:	b510      	push	{r4, lr}
 8006a36:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a3a:	b95c      	cbnz	r4, 8006a54 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8006a3c:	4b08      	ldr	r3, [pc, #32]	@ (8006a60 <osKernelStart+0x2c>)
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	2a01      	cmp	r2, #1
 8006a42:	d10a      	bne.n	8006a5a <osKernelStart+0x26>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a44:	4a07      	ldr	r2, [pc, #28]	@ (8006a64 <osKernelStart+0x30>)
 8006a46:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006a48:	2202      	movs	r2, #2
 8006a4a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006a4c:	f001 fb76 	bl	800813c <vTaskStartScheduler>
      stat = osOK;
 8006a50:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 8006a52:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8006a54:	f06f 0005 	mvn.w	r0, #5
 8006a58:	e7fb      	b.n	8006a52 <osKernelStart+0x1e>
      stat = osError;
 8006a5a:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8006a5e:	e7f8      	b.n	8006a52 <osKernelStart+0x1e>
 8006a60:	20001fb8 	.word	0x20001fb8
 8006a64:	e000ed00 	.word	0xe000ed00

08006a68 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a6a:	b087      	sub	sp, #28
 8006a6c:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006a6e:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006a70:	460b      	mov	r3, r1
  hTask = NULL;
 8006a72:	9205      	str	r2, [sp, #20]
 8006a74:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8006a78:	b9ca      	cbnz	r2, 8006aae <osThreadNew+0x46>
 8006a7a:	b1c0      	cbz	r0, 8006aae <osThreadNew+0x46>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8006a7c:	b36c      	cbz	r4, 8006ada <osThreadNew+0x72>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8006a7e:	69a5      	ldr	r5, [r4, #24]
 8006a80:	2d00      	cmp	r5, #0
 8006a82:	bf08      	it	eq
 8006a84:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006a86:	1e69      	subs	r1, r5, #1
 8006a88:	2937      	cmp	r1, #55	@ 0x37
 8006a8a:	46ac      	mov	ip, r5
 8006a8c:	d82a      	bhi.n	8006ae4 <osThreadNew+0x7c>
 8006a8e:	6861      	ldr	r1, [r4, #4]
 8006a90:	07c9      	lsls	r1, r1, #31
 8006a92:	d427      	bmi.n	8006ae4 <osThreadNew+0x7c>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8006a94:	6966      	ldr	r6, [r4, #20]
 8006a96:	b16e      	cbz	r6, 8006ab4 <osThreadNew+0x4c>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006a98:	08b2      	lsrs	r2, r6, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006a9a:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
      if (attr->name != NULL) {
 8006a9e:	6821      	ldr	r1, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006aa0:	b157      	cbz	r7, 8006ab8 <osThreadNew+0x50>
 8006aa2:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8006aa6:	d902      	bls.n	8006aae <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006aa8:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006aaa:	b104      	cbz	r4, 8006aae <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006aac:	b9e6      	cbnz	r6, 8006ae8 <osThreadNew+0x80>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006aae:	9805      	ldr	r0, [sp, #20]
}
 8006ab0:	b007      	add	sp, #28
 8006ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8006ab4:	2280      	movs	r2, #128	@ 0x80
 8006ab6:	e7f0      	b.n	8006a9a <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006ab8:	f1be 0f00 	cmp.w	lr, #0
 8006abc:	d1f7      	bne.n	8006aae <osThreadNew+0x46>
      if (mem == 0) {
 8006abe:	6924      	ldr	r4, [r4, #16]
 8006ac0:	2c00      	cmp	r4, #0
 8006ac2:	d1f4      	bne.n	8006aae <osThreadNew+0x46>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006ac4:	ac05      	add	r4, sp, #20
 8006ac6:	e9cd c400 	strd	ip, r4, [sp]
 8006aca:	b292      	uxth	r2, r2
 8006acc:	f001 fb07 	bl	80080de <xTaskCreate>
 8006ad0:	2801      	cmp	r0, #1
            hTask = NULL;
 8006ad2:	bf1c      	itt	ne
 8006ad4:	2300      	movne	r3, #0
 8006ad6:	9305      	strne	r3, [sp, #20]
 8006ad8:	e7e9      	b.n	8006aae <osThreadNew+0x46>
    name = NULL;
 8006ada:	4621      	mov	r1, r4
    prio  = (UBaseType_t)osPriorityNormal;
 8006adc:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 8006ae0:	2280      	movs	r2, #128	@ 0x80
 8006ae2:	e7ef      	b.n	8006ac4 <osThreadNew+0x5c>
        return (NULL);
 8006ae4:	4610      	mov	r0, r2
 8006ae6:	e7e3      	b.n	8006ab0 <osThreadNew+0x48>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006ae8:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8006aec:	9500      	str	r5, [sp, #0]
 8006aee:	f001 fabe 	bl	800806e <xTaskCreateStatic>
 8006af2:	9005      	str	r0, [sp, #20]
 8006af4:	e7db      	b.n	8006aae <osThreadNew+0x46>

08006af6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006af6:	b508      	push	{r3, lr}
 8006af8:	f3ef 8205 	mrs	r2, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8006afc:	b922      	cbnz	r2, 8006b08 <osDelay+0x12>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8006afe:	b108      	cbz	r0, 8006b04 <osDelay+0xe>
      vTaskDelay(ticks);
 8006b00:	f001 fc7a 	bl	80083f8 <vTaskDelay>
    stat = osOK;
 8006b04:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 8006b06:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8006b08:	f06f 0005 	mvn.w	r0, #5
  return (stat);
 8006b0c:	e7fb      	b.n	8006b06 <osDelay+0x10>

08006b0e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006b0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b10:	4604      	mov	r4, r0
 8006b12:	460e      	mov	r6, r1
 8006b14:	4615      	mov	r5, r2
 8006b16:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006b1a:	b942      	cbnz	r2, 8006b2e <osSemaphoreNew+0x20>
 8006b1c:	b138      	cbz	r0, 8006b2e <osSemaphoreNew+0x20>
 8006b1e:	4288      	cmp	r0, r1
 8006b20:	d305      	bcc.n	8006b2e <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 8006b22:	b155      	cbz	r5, 8006b3a <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006b24:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 8006b28:	b12b      	cbz	r3, 8006b36 <osSemaphoreNew+0x28>
 8006b2a:	2f4f      	cmp	r7, #79	@ 0x4f
 8006b2c:	d822      	bhi.n	8006b74 <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 8006b2e:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8006b30:	4620      	mov	r0, r4
 8006b32:	b003      	add	sp, #12
 8006b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006b36:	2f00      	cmp	r7, #0
 8006b38:	d1f9      	bne.n	8006b2e <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 8006b3a:	2c01      	cmp	r4, #1
 8006b3c:	d00c      	beq.n	8006b58 <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006b3e:	4620      	mov	r0, r4
 8006b40:	4631      	mov	r1, r6
 8006b42:	f000 fd89 	bl	8007658 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8006b46:	4604      	mov	r4, r0
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	d0f0      	beq.n	8006b2e <osSemaphoreNew+0x20>
        if (attr != NULL) {
 8006b4c:	b985      	cbnz	r5, 8006b70 <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 8006b4e:	4629      	mov	r1, r5
 8006b50:	4620      	mov	r0, r4
 8006b52:	f001 f8c7 	bl	8007ce4 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 8006b56:	e7eb      	b.n	8006b30 <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 8006b58:	2203      	movs	r2, #3
 8006b5a:	2100      	movs	r1, #0
 8006b5c:	2001      	movs	r0, #1
 8006b5e:	f000 fd32 	bl	80075c6 <xQueueGenericCreate>
 8006b62:	e00e      	b.n	8006b82 <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006b64:	461a      	mov	r2, r3
 8006b66:	f000 fd55 	bl	8007614 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	2800      	cmp	r0, #0
 8006b6e:	d0de      	beq.n	8006b2e <osSemaphoreNew+0x20>
          name = attr->name;
 8006b70:	682d      	ldr	r5, [r5, #0]
 8006b72:	e7ec      	b.n	8006b4e <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 8006b74:	2801      	cmp	r0, #1
 8006b76:	d1f5      	bne.n	8006b64 <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006b78:	2103      	movs	r1, #3
 8006b7a:	9100      	str	r1, [sp, #0]
 8006b7c:	4611      	mov	r1, r2
 8006b7e:	f000 fcd4 	bl	800752a <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 8006b82:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006b84:	2800      	cmp	r0, #0
 8006b86:	d0d2      	beq.n	8006b2e <osSemaphoreNew+0x20>
 8006b88:	2e00      	cmp	r6, #0
 8006b8a:	d0df      	beq.n	8006b4c <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	461a      	mov	r2, r3
 8006b90:	4619      	mov	r1, r3
 8006b92:	f000 fd7f 	bl	8007694 <xQueueGenericSend>
 8006b96:	2801      	cmp	r0, #1
 8006b98:	d0d8      	beq.n	8006b4c <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	f001 f8cc 	bl	8007d38 <vQueueDelete>
      if (hSemaphore != NULL) {
 8006ba0:	e7c5      	b.n	8006b2e <osSemaphoreNew+0x20>

08006ba2 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006ba2:	b513      	push	{r0, r1, r4, lr}
 8006ba4:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8006ba6:	b328      	cbz	r0, 8006bf4 <osSemaphoreAcquire+0x52>
 8006ba8:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8006bac:	b1cb      	cbz	r3, 8006be2 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 8006bae:	bb09      	cbnz	r1, 8006bf4 <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006bb0:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8006bb2:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006bb4:	f001 f829 	bl	8007c0a <xQueueReceiveFromISR>
 8006bb8:	2801      	cmp	r0, #1
 8006bba:	d003      	beq.n	8006bc4 <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 8006bbc:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 8006bc0:	b002      	add	sp, #8
 8006bc2:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 8006bc4:	9b01      	ldr	r3, [sp, #4]
 8006bc6:	b90b      	cbnz	r3, 8006bcc <osSemaphoreAcquire+0x2a>
  stat = osOK;
 8006bc8:	2000      	movs	r0, #0
 8006bca:	e7f9      	b.n	8006bc0 <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 8006bcc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006bd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bd4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006bd8:	f3bf 8f4f 	dsb	sy
 8006bdc:	f3bf 8f6f 	isb	sy
 8006be0:	e7f2      	b.n	8006bc8 <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006be2:	f000 ff55 	bl	8007a90 <xQueueSemaphoreTake>
 8006be6:	2801      	cmp	r0, #1
 8006be8:	d0ee      	beq.n	8006bc8 <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 8006bea:	2c00      	cmp	r4, #0
 8006bec:	d0e6      	beq.n	8006bbc <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 8006bee:	f06f 0001 	mvn.w	r0, #1
 8006bf2:	e7e5      	b.n	8006bc0 <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 8006bf4:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8006bf8:	e7e2      	b.n	8006bc0 <osSemaphoreAcquire+0x1e>

08006bfa <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006bfa:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8006bfc:	b318      	cbz	r0, 8006c46 <osSemaphoreRelease+0x4c>
 8006bfe:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8006c02:	b1cb      	cbz	r3, 8006c38 <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 8006c04:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006c06:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 8006c08:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006c0a:	f000 fe52 	bl	80078b2 <xQueueGiveFromISR>
 8006c0e:	2801      	cmp	r0, #1
 8006c10:	d004      	beq.n	8006c1c <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 8006c12:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 8006c16:	b003      	add	sp, #12
 8006c18:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 8006c1c:	9b01      	ldr	r3, [sp, #4]
 8006c1e:	b14b      	cbz	r3, 8006c34 <osSemaphoreRelease+0x3a>
 8006c20:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006c24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c28:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006c2c:	f3bf 8f4f 	dsb	sy
 8006c30:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8006c34:	2000      	movs	r0, #0
 8006c36:	e7ee      	b.n	8006c16 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006c38:	461a      	mov	r2, r3
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	f000 fd2a 	bl	8007694 <xQueueGenericSend>
 8006c40:	2801      	cmp	r0, #1
 8006c42:	d0f7      	beq.n	8006c34 <osSemaphoreRelease+0x3a>
 8006c44:	e7e5      	b.n	8006c12 <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 8006c46:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8006c4a:	e7e4      	b.n	8006c16 <osSemaphoreRelease+0x1c>

08006c4c <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  uint32_t count;

  if (hSemaphore == NULL) {
 8006c4c:	b130      	cbz	r0, 8006c5c <osSemaphoreGetCount+0x10>
 8006c4e:	f3ef 8305 	mrs	r3, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 8006c52:	b10b      	cbz	r3, 8006c58 <osSemaphoreGetCount+0xc>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 8006c54:	f001 b839 	b.w	8007cca <uxQueueMessagesWaitingFromISR>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 8006c58:	f001 b824 	b.w	8007ca4 <uxQueueMessagesWaiting>
  }

  return (count);
}
 8006c5c:	4770      	bx	lr

08006c5e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006c5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c60:	4605      	mov	r5, r0
 8006c62:	460e      	mov	r6, r1
 8006c64:	4614      	mov	r4, r2
 8006c66:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006c6a:	b11f      	cbz	r7, 8006c74 <osMessageQueueNew+0x16>
  hQueue = NULL;
 8006c6c:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8006c6e:	4628      	mov	r0, r5
 8006c70:	b003      	add	sp, #12
 8006c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006c74:	2800      	cmp	r0, #0
 8006c76:	d0f9      	beq.n	8006c6c <osMessageQueueNew+0xe>
 8006c78:	2900      	cmp	r1, #0
 8006c7a:	d0f7      	beq.n	8006c6c <osMessageQueueNew+0xe>
    if (attr != NULL) {
 8006c7c:	b1da      	cbz	r2, 8006cb6 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006c7e:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 8006c82:	b183      	cbz	r3, 8006ca6 <osMessageQueueNew+0x48>
 8006c84:	2a4f      	cmp	r2, #79	@ 0x4f
 8006c86:	d9f1      	bls.n	8006c6c <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006c88:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006c8a:	2a00      	cmp	r2, #0
 8006c8c:	d0ee      	beq.n	8006c6c <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006c8e:	6966      	ldr	r6, [r4, #20]
 8006c90:	434d      	muls	r5, r1
 8006c92:	42ae      	cmp	r6, r5
 8006c94:	d3ea      	bcc.n	8006c6c <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006c96:	9700      	str	r7, [sp, #0]
 8006c98:	f000 fc47 	bl	800752a <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8006c9c:	4605      	mov	r5, r0
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	d0e4      	beq.n	8006c6c <osMessageQueueNew+0xe>
        name = attr->name;
 8006ca2:	6824      	ldr	r4, [r4, #0]
 8006ca4:	e011      	b.n	8006cca <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006ca6:	2a00      	cmp	r2, #0
 8006ca8:	d1e0      	bne.n	8006c6c <osMessageQueueNew+0xe>
 8006caa:	6923      	ldr	r3, [r4, #16]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1dd      	bne.n	8006c6c <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006cb0:	6963      	ldr	r3, [r4, #20]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1da      	bne.n	8006c6c <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 8006cb6:	4628      	mov	r0, r5
 8006cb8:	2200      	movs	r2, #0
 8006cba:	4631      	mov	r1, r6
 8006cbc:	f000 fc83 	bl	80075c6 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8006cc0:	4605      	mov	r5, r0
 8006cc2:	2800      	cmp	r0, #0
 8006cc4:	d0d2      	beq.n	8006c6c <osMessageQueueNew+0xe>
      if (attr != NULL) {
 8006cc6:	2c00      	cmp	r4, #0
 8006cc8:	d1eb      	bne.n	8006ca2 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 8006cca:	4621      	mov	r1, r4
 8006ccc:	4628      	mov	r0, r5
 8006cce:	f001 f809 	bl	8007ce4 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8006cd2:	e7cc      	b.n	8006c6e <osMessageQueueNew+0x10>

08006cd4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006cd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006cd6:	461c      	mov	r4, r3
 8006cd8:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8006cdc:	b1de      	cbz	r6, 8006d16 <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006cde:	b338      	cbz	r0, 8006d30 <osMessageQueuePut+0x5c>
 8006ce0:	b331      	cbz	r1, 8006d30 <osMessageQueuePut+0x5c>
 8006ce2:	bb2b      	cbnz	r3, 8006d30 <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006ce4:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8006ce6:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006ce8:	f000 fd86 	bl	80077f8 <xQueueGenericSendFromISR>
 8006cec:	2801      	cmp	r0, #1
 8006cee:	d003      	beq.n	8006cf8 <osMessageQueuePut+0x24>
        stat = osErrorResource;
 8006cf0:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 8006cf4:	b002      	add	sp, #8
 8006cf6:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 8006cf8:	9b01      	ldr	r3, [sp, #4]
 8006cfa:	b90b      	cbnz	r3, 8006d00 <osMessageQueuePut+0x2c>
  stat = osOK;
 8006cfc:	2000      	movs	r0, #0
 8006cfe:	e7f9      	b.n	8006cf4 <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 8006d00:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006d04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d08:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	f3bf 8f6f 	isb	sy
 8006d14:	e7f2      	b.n	8006cfc <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006d16:	b158      	cbz	r0, 8006d30 <osMessageQueuePut+0x5c>
 8006d18:	b151      	cbz	r1, 8006d30 <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006d1a:	4633      	mov	r3, r6
 8006d1c:	4622      	mov	r2, r4
 8006d1e:	f000 fcb9 	bl	8007694 <xQueueGenericSend>
 8006d22:	2801      	cmp	r0, #1
 8006d24:	d0ea      	beq.n	8006cfc <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 8006d26:	2c00      	cmp	r4, #0
 8006d28:	d0e2      	beq.n	8006cf0 <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 8006d2a:	f06f 0001 	mvn.w	r0, #1
 8006d2e:	e7e1      	b.n	8006cf4 <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 8006d30:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8006d34:	e7de      	b.n	8006cf4 <osMessageQueuePut+0x20>

08006d36 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006d36:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d38:	461c      	mov	r4, r3
 8006d3a:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8006d3e:	b1db      	cbz	r3, 8006d78 <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006d40:	b330      	cbz	r0, 8006d90 <osMessageQueueGet+0x5a>
 8006d42:	b329      	cbz	r1, 8006d90 <osMessageQueueGet+0x5a>
 8006d44:	bb24      	cbnz	r4, 8006d90 <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006d46:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8006d48:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006d4a:	f000 ff5e 	bl	8007c0a <xQueueReceiveFromISR>
 8006d4e:	2801      	cmp	r0, #1
 8006d50:	d003      	beq.n	8006d5a <osMessageQueueGet+0x24>
        stat = osErrorResource;
 8006d52:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 8006d56:	b003      	add	sp, #12
 8006d58:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 8006d5a:	9b01      	ldr	r3, [sp, #4]
 8006d5c:	b90b      	cbnz	r3, 8006d62 <osMessageQueueGet+0x2c>
  stat = osOK;
 8006d5e:	2000      	movs	r0, #0
 8006d60:	e7f9      	b.n	8006d56 <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 8006d62:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006d66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d6a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	f3bf 8f6f 	isb	sy
 8006d76:	e7f2      	b.n	8006d5e <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006d78:	b150      	cbz	r0, 8006d90 <osMessageQueueGet+0x5a>
 8006d7a:	b149      	cbz	r1, 8006d90 <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006d7c:	4622      	mov	r2, r4
 8006d7e:	f000 fde9 	bl	8007954 <xQueueReceive>
 8006d82:	2801      	cmp	r0, #1
 8006d84:	d0eb      	beq.n	8006d5e <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 8006d86:	2c00      	cmp	r4, #0
 8006d88:	d0e3      	beq.n	8006d52 <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 8006d8a:	f06f 0001 	mvn.w	r0, #1
 8006d8e:	e7e2      	b.n	8006d56 <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 8006d90:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8006d94:	e7df      	b.n	8006d56 <osMessageQueueGet+0x20>

08006d96 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8006d96:	f7ff bf59 	b.w	8006c4c <osSemaphoreGetCount>
	...

08006d9c <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006d9c:	4b03      	ldr	r3, [pc, #12]	@ (8006dac <vApplicationGetIdleTaskMemory+0x10>)
 8006d9e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006da0:	4b03      	ldr	r3, [pc, #12]	@ (8006db0 <vApplicationGetIdleTaskMemory+0x14>)
 8006da2:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006da4:	2380      	movs	r3, #128	@ 0x80
 8006da6:	6013      	str	r3, [r2, #0]
}
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	20001f58 	.word	0x20001f58
 8006db0:	20001d58 	.word	0x20001d58

08006db4 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006db4:	4b03      	ldr	r3, [pc, #12]	@ (8006dc4 <vApplicationGetTimerTaskMemory+0x10>)
 8006db6:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006db8:	4b03      	ldr	r3, [pc, #12]	@ (8006dc8 <vApplicationGetTimerTaskMemory+0x14>)
 8006dba:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006dbc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006dc0:	6013      	str	r3, [r2, #0]
}
 8006dc2:	4770      	bx	lr
 8006dc4:	20001cf8 	.word	0x20001cf8
 8006dc8:	200018f8 	.word	0x200018f8

08006dcc <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006dcc:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006dce:	4b10      	ldr	r3, [pc, #64]	@ (8006e10 <prvInsertBlockIntoFreeList+0x44>)
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4283      	cmp	r3, r0
 8006dd6:	d3fb      	bcc.n	8006dd0 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006dd8:	6854      	ldr	r4, [r2, #4]
 8006dda:	1911      	adds	r1, r2, r4
 8006ddc:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006dde:	bf01      	itttt	eq
 8006de0:	6841      	ldreq	r1, [r0, #4]
 8006de2:	4610      	moveq	r0, r2
 8006de4:	1909      	addeq	r1, r1, r4
 8006de6:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006de8:	6844      	ldr	r4, [r0, #4]
 8006dea:	1901      	adds	r1, r0, r4
 8006dec:	428b      	cmp	r3, r1
 8006dee:	d10c      	bne.n	8006e0a <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006df0:	4908      	ldr	r1, [pc, #32]	@ (8006e14 <prvInsertBlockIntoFreeList+0x48>)
 8006df2:	6809      	ldr	r1, [r1, #0]
 8006df4:	428b      	cmp	r3, r1
 8006df6:	d003      	beq.n	8006e00 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006df8:	6859      	ldr	r1, [r3, #4]
 8006dfa:	4421      	add	r1, r4
 8006dfc:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006dfe:	6819      	ldr	r1, [r3, #0]
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e00:	6001      	str	r1, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e02:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e04:	bf18      	it	ne
 8006e06:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e08:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	e7f8      	b.n	8006e00 <prvInsertBlockIntoFreeList+0x34>
 8006e0e:	bf00      	nop
 8006e10:	20001fd4 	.word	0x20001fd4
 8006e14:	20001fd0 	.word	0x20001fd0

08006e18 <pvPortMalloc>:
{
 8006e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e1c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006e1e:	f001 f9d3 	bl	80081c8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006e22:	4942      	ldr	r1, [pc, #264]	@ (8006f2c <pvPortMalloc+0x114>)
 8006e24:	4d42      	ldr	r5, [pc, #264]	@ (8006f30 <pvPortMalloc+0x118>)
 8006e26:	680b      	ldr	r3, [r1, #0]
 8006e28:	bb0b      	cbnz	r3, 8006e6e <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8006e2a:	4a42      	ldr	r2, [pc, #264]	@ (8006f34 <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e2c:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e2e:	bf1f      	itttt	ne
 8006e30:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e32:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e36:	f502 3280 	addne.w	r2, r2, #65536	@ 0x10000
 8006e3a:	1a13      	subne	r3, r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e3c:	bf0c      	ite	eq
 8006e3e:	f44f 3380 	moveq.w	r3, #65536	@ 0x10000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e42:	4602      	movne	r2, r0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e44:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e46:	4e3c      	ldr	r6, [pc, #240]	@ (8006f38 <pvPortMalloc+0x120>)
	uxAddress -= xHeapStructSize;
 8006e48:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e4a:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8006e4e:	2000      	movs	r0, #0
 8006e50:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e52:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8006e54:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e58:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e5a:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 8006e5e:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e60:	4b36      	ldr	r3, [pc, #216]	@ (8006f3c <pvPortMalloc+0x124>)
 8006e62:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e64:	4b36      	ldr	r3, [pc, #216]	@ (8006f40 <pvPortMalloc+0x128>)
 8006e66:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e68:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006e6c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e6e:	682e      	ldr	r6, [r5, #0]
 8006e70:	4226      	tst	r6, r4
 8006e72:	d155      	bne.n	8006f20 <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 8006e74:	2c00      	cmp	r4, #0
 8006e76:	d046      	beq.n	8006f06 <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 8006e78:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e7c:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e7e:	bf1c      	itt	ne
 8006e80:	f023 0307 	bicne.w	r3, r3, #7
 8006e84:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d04a      	beq.n	8006f20 <pvPortMalloc+0x108>
 8006e8a:	4f2d      	ldr	r7, [pc, #180]	@ (8006f40 <pvPortMalloc+0x128>)
 8006e8c:	683c      	ldr	r4, [r7, #0]
 8006e8e:	429c      	cmp	r4, r3
 8006e90:	d346      	bcc.n	8006f20 <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 8006e92:	4a29      	ldr	r2, [pc, #164]	@ (8006f38 <pvPortMalloc+0x120>)
 8006e94:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e96:	6868      	ldr	r0, [r5, #4]
 8006e98:	4298      	cmp	r0, r3
 8006e9a:	d204      	bcs.n	8006ea6 <pvPortMalloc+0x8e>
 8006e9c:	f8d5 c000 	ldr.w	ip, [r5]
 8006ea0:	f1bc 0f00 	cmp.w	ip, #0
 8006ea4:	d115      	bne.n	8006ed2 <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 8006ea6:	6809      	ldr	r1, [r1, #0]
 8006ea8:	42a9      	cmp	r1, r5
 8006eaa:	d039      	beq.n	8006f20 <pvPortMalloc+0x108>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006eac:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006eae:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006eb2:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006eb4:	1ac2      	subs	r2, r0, r3
 8006eb6:	2a10      	cmp	r2, #16
 8006eb8:	d912      	bls.n	8006ee0 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006eba:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ebc:	0741      	lsls	r1, r0, #29
 8006ebe:	d00b      	beq.n	8006ed8 <pvPortMalloc+0xc0>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec4:	f383 8811 	msr	BASEPRI, r3
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	e7fe      	b.n	8006ed0 <pvPortMalloc+0xb8>
 8006ed2:	462a      	mov	r2, r5
 8006ed4:	4665      	mov	r5, ip
 8006ed6:	e7de      	b.n	8006e96 <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ed8:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006eda:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006edc:	f7ff ff76 	bl	8006dcc <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ee0:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006ee2:	4916      	ldr	r1, [pc, #88]	@ (8006f3c <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ee4:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006ee6:	4316      	orrs	r6, r2
					xNumberOfSuccessfulAllocations++;
 8006ee8:	4a16      	ldr	r2, [pc, #88]	@ (8006f44 <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006eea:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006eec:	603c      	str	r4, [r7, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 8006ef2:	6813      	ldr	r3, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006ef4:	606e      	str	r6, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006ef6:	4284      	cmp	r4, r0
					xNumberOfSuccessfulAllocations++;
 8006ef8:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006efc:	bf38      	it	cc
 8006efe:	600c      	strcc	r4, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 8006f00:	6013      	str	r3, [r2, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f02:	f108 0408 	add.w	r4, r8, #8
	( void ) xTaskResumeAll();
 8006f06:	f001 fa03 	bl	8008310 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f0a:	0763      	lsls	r3, r4, #29
 8006f0c:	d00a      	beq.n	8006f24 <pvPortMalloc+0x10c>
 8006f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f12:	f383 8811 	msr	BASEPRI, r3
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	e7fe      	b.n	8006f1e <pvPortMalloc+0x106>
void *pvReturn = NULL;
 8006f20:	2400      	movs	r4, #0
 8006f22:	e7f0      	b.n	8006f06 <pvPortMalloc+0xee>
}
 8006f24:	4620      	mov	r0, r4
 8006f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f2a:	bf00      	nop
 8006f2c:	20001fd0 	.word	0x20001fd0
 8006f30:	20001fbc 	.word	0x20001fbc
 8006f34:	20001fdc 	.word	0x20001fdc
 8006f38:	20001fd4 	.word	0x20001fd4
 8006f3c:	20001fc8 	.word	0x20001fc8
 8006f40:	20001fcc 	.word	0x20001fcc
 8006f44:	20001fc4 	.word	0x20001fc4

08006f48 <vPortFree>:
{
 8006f48:	b510      	push	{r4, lr}
	if( pv != NULL )
 8006f4a:	4604      	mov	r4, r0
 8006f4c:	b390      	cbz	r0, 8006fb4 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f4e:	4a1a      	ldr	r2, [pc, #104]	@ (8006fb8 <vPortFree+0x70>)
 8006f50:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006f54:	6812      	ldr	r2, [r2, #0]
 8006f56:	4213      	tst	r3, r2
 8006f58:	d108      	bne.n	8006f6c <vPortFree+0x24>
 8006f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f5e:	f383 8811 	msr	BASEPRI, r3
 8006f62:	f3bf 8f6f 	isb	sy
 8006f66:	f3bf 8f4f 	dsb	sy
 8006f6a:	e7fe      	b.n	8006f6a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f6c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8006f70:	b141      	cbz	r1, 8006f84 <vPortFree+0x3c>
 8006f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f76:	f383 8811 	msr	BASEPRI, r3
 8006f7a:	f3bf 8f6f 	isb	sy
 8006f7e:	f3bf 8f4f 	dsb	sy
 8006f82:	e7fe      	b.n	8006f82 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f84:	ea23 0302 	bic.w	r3, r3, r2
 8006f88:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8006f8c:	f001 f91c 	bl	80081c8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006f90:	4a0a      	ldr	r2, [pc, #40]	@ (8006fbc <vPortFree+0x74>)
 8006f92:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006f96:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f98:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006f9c:	440b      	add	r3, r1
 8006f9e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006fa0:	f7ff ff14 	bl	8006dcc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006fa4:	4a06      	ldr	r2, [pc, #24]	@ (8006fc0 <vPortFree+0x78>)
 8006fa6:	6813      	ldr	r3, [r2, #0]
}
 8006fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 8006fac:	3301      	adds	r3, #1
 8006fae:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8006fb0:	f001 b9ae 	b.w	8008310 <xTaskResumeAll>
}
 8006fb4:	bd10      	pop	{r4, pc}
 8006fb6:	bf00      	nop
 8006fb8:	20001fbc 	.word	0x20001fbc
 8006fbc:	20001fcc 	.word	0x20001fcc
 8006fc0:	20001fc0 	.word	0x20001fc0

08006fc4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006fc4:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006fc8:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006fcc:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006fd0:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006fd2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006fd8:	4770      	bx	lr

08006fda <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006fde:	4770      	bx	lr

08006fe0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8006fe0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006fe2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006fe4:	689a      	ldr	r2, [r3, #8]
 8006fe6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006fe8:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006fea:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8006fec:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8006fee:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	6003      	str	r3, [r0, #0]
}
 8006ff4:	4770      	bx	lr

08006ff6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ff6:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006ff8:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006ffa:	1c63      	adds	r3, r4, #1
 8006ffc:	d10a      	bne.n	8007014 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006ffe:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007000:	685a      	ldr	r2, [r3, #4]
 8007002:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007004:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007006:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8007008:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800700a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800700c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800700e:	3301      	adds	r3, #1
 8007010:	6003      	str	r3, [r0, #0]
}
 8007012:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007014:	f100 0208 	add.w	r2, r0, #8
 8007018:	4613      	mov	r3, r2
 800701a:	6852      	ldr	r2, [r2, #4]
 800701c:	6815      	ldr	r5, [r2, #0]
 800701e:	42a5      	cmp	r5, r4
 8007020:	d9fa      	bls.n	8007018 <vListInsert+0x22>
 8007022:	e7ed      	b.n	8007000 <vListInsert+0xa>

08007024 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007024:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
List_t * const pxList = pxItemToRemove->pxContainer;
 8007028:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800702a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800702c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800702e:	6859      	ldr	r1, [r3, #4]
 8007030:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007032:	bf08      	it	eq
 8007034:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007036:	2200      	movs	r2, #0
 8007038:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	3a01      	subs	r2, #1
 800703e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007040:	6818      	ldr	r0, [r3, #0]
}
 8007042:	4770      	bx	lr

08007044 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007044:	4808      	ldr	r0, [pc, #32]	@ (8007068 <prvPortStartFirstTask+0x24>)
 8007046:	6800      	ldr	r0, [r0, #0]
 8007048:	6800      	ldr	r0, [r0, #0]
 800704a:	f380 8808 	msr	MSP, r0
 800704e:	f04f 0000 	mov.w	r0, #0
 8007052:	f380 8814 	msr	CONTROL, r0
 8007056:	b662      	cpsie	i
 8007058:	b661      	cpsie	f
 800705a:	f3bf 8f4f 	dsb	sy
 800705e:	f3bf 8f6f 	isb	sy
 8007062:	df00      	svc	0
 8007064:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007066:	0000      	.short	0x0000
 8007068:	e000ed08 	.word	0xe000ed08

0800706c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800706c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800707c <vPortEnableVFP+0x10>
 8007070:	6801      	ldr	r1, [r0, #0]
 8007072:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007076:	6001      	str	r1, [r0, #0]
 8007078:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800707a:	0000      	.short	0x0000
 800707c:	e000ed88 	.word	0xe000ed88

08007080 <prvTaskExitError>:
{
 8007080:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8007082:	2300      	movs	r3, #0
 8007084:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8007086:	4b0d      	ldr	r3, [pc, #52]	@ (80070bc <prvTaskExitError+0x3c>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	3301      	adds	r3, #1
 800708c:	d008      	beq.n	80070a0 <prvTaskExitError+0x20>
 800708e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007092:	f383 8811 	msr	BASEPRI, r3
 8007096:	f3bf 8f6f 	isb	sy
 800709a:	f3bf 8f4f 	dsb	sy
 800709e:	e7fe      	b.n	800709e <prvTaskExitError+0x1e>
 80070a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a4:	f383 8811 	msr	BASEPRI, r3
 80070a8:	f3bf 8f6f 	isb	sy
 80070ac:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80070b0:	9b01      	ldr	r3, [sp, #4]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d0fc      	beq.n	80070b0 <prvTaskExitError+0x30>
}
 80070b6:	b002      	add	sp, #8
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	20000080 	.word	0x20000080

080070c0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80070c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80070c4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80070c8:	4b07      	ldr	r3, [pc, #28]	@ (80070e8 <pxPortInitialiseStack+0x28>)
 80070ca:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80070ce:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80070d2:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80070d6:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80070da:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80070de:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80070e2:	3844      	subs	r0, #68	@ 0x44
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	08007081 	.word	0x08007081
 80070ec:	00000000 	.word	0x00000000

080070f0 <SVC_Handler>:
	__asm volatile (
 80070f0:	4b07      	ldr	r3, [pc, #28]	@ (8007110 <pxCurrentTCBConst2>)
 80070f2:	6819      	ldr	r1, [r3, #0]
 80070f4:	6808      	ldr	r0, [r1, #0]
 80070f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070fa:	f380 8809 	msr	PSP, r0
 80070fe:	f3bf 8f6f 	isb	sy
 8007102:	f04f 0000 	mov.w	r0, #0
 8007106:	f380 8811 	msr	BASEPRI, r0
 800710a:	4770      	bx	lr
 800710c:	f3af 8000 	nop.w

08007110 <pxCurrentTCBConst2>:
 8007110:	2001251c 	.word	0x2001251c

08007114 <vPortEnterCritical>:
 8007114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007118:	f383 8811 	msr	BASEPRI, r3
 800711c:	f3bf 8f6f 	isb	sy
 8007120:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8007124:	4a0a      	ldr	r2, [pc, #40]	@ (8007150 <vPortEnterCritical+0x3c>)
 8007126:	6813      	ldr	r3, [r2, #0]
 8007128:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800712a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800712c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800712e:	d10e      	bne.n	800714e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007130:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007134:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8007138:	b2db      	uxtb	r3, r3
 800713a:	b143      	cbz	r3, 800714e <vPortEnterCritical+0x3a>
 800713c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007140:	f383 8811 	msr	BASEPRI, r3
 8007144:	f3bf 8f6f 	isb	sy
 8007148:	f3bf 8f4f 	dsb	sy
 800714c:	e7fe      	b.n	800714c <vPortEnterCritical+0x38>
}
 800714e:	4770      	bx	lr
 8007150:	20000080 	.word	0x20000080

08007154 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8007154:	4a08      	ldr	r2, [pc, #32]	@ (8007178 <vPortExitCritical+0x24>)
 8007156:	6813      	ldr	r3, [r2, #0]
 8007158:	b943      	cbnz	r3, 800716c <vPortExitCritical+0x18>
 800715a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800715e:	f383 8811 	msr	BASEPRI, r3
 8007162:	f3bf 8f6f 	isb	sy
 8007166:	f3bf 8f4f 	dsb	sy
 800716a:	e7fe      	b.n	800716a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800716c:	3b01      	subs	r3, #1
 800716e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007170:	b90b      	cbnz	r3, 8007176 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007172:	f383 8811 	msr	BASEPRI, r3
}
 8007176:	4770      	bx	lr
 8007178:	20000080 	.word	0x20000080
 800717c:	00000000 	.word	0x00000000

08007180 <PendSV_Handler>:
	__asm volatile
 8007180:	f3ef 8009 	mrs	r0, PSP
 8007184:	f3bf 8f6f 	isb	sy
 8007188:	4b15      	ldr	r3, [pc, #84]	@ (80071e0 <pxCurrentTCBConst>)
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	f01e 0f10 	tst.w	lr, #16
 8007190:	bf08      	it	eq
 8007192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800719a:	6010      	str	r0, [r2, #0]
 800719c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80071a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80071a4:	f380 8811 	msr	BASEPRI, r0
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	f3bf 8f6f 	isb	sy
 80071b0:	f001 f946 	bl	8008440 <vTaskSwitchContext>
 80071b4:	f04f 0000 	mov.w	r0, #0
 80071b8:	f380 8811 	msr	BASEPRI, r0
 80071bc:	bc09      	pop	{r0, r3}
 80071be:	6819      	ldr	r1, [r3, #0]
 80071c0:	6808      	ldr	r0, [r1, #0]
 80071c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c6:	f01e 0f10 	tst.w	lr, #16
 80071ca:	bf08      	it	eq
 80071cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80071d0:	f380 8809 	msr	PSP, r0
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	f3af 8000 	nop.w

080071e0 <pxCurrentTCBConst>:
 80071e0:	2001251c 	.word	0x2001251c

080071e4 <xPortSysTickHandler>:
{
 80071e4:	b508      	push	{r3, lr}
	__asm volatile
 80071e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ea:	f383 8811 	msr	BASEPRI, r3
 80071ee:	f3bf 8f6f 	isb	sy
 80071f2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80071f6:	f000 fff5 	bl	80081e4 <xTaskIncrementTick>
 80071fa:	b128      	cbz	r0, 8007208 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80071fc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007200:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007204:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8007208:	2300      	movs	r3, #0
 800720a:	f383 8811 	msr	BASEPRI, r3
}
 800720e:	bd08      	pop	{r3, pc}

08007210 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007210:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8007214:	2300      	movs	r3, #0
 8007216:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007218:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800721a:	4b05      	ldr	r3, [pc, #20]	@ (8007230 <vPortSetupTimerInterrupt+0x20>)
 800721c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	fbb3 f3f1 	udiv	r3, r3, r1
 8007226:	3b01      	subs	r3, #1
 8007228:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800722a:	2307      	movs	r3, #7
 800722c:	6113      	str	r3, [r2, #16]
}
 800722e:	4770      	bx	lr
 8007230:	20000074 	.word	0x20000074

08007234 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007234:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 8007238:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800723a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800723e:	4a38      	ldr	r2, [pc, #224]	@ (8007320 <xPortStartScheduler+0xec>)
 8007240:	4291      	cmp	r1, r2
 8007242:	d108      	bne.n	8007256 <xPortStartScheduler+0x22>
	__asm volatile
 8007244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007248:	f383 8811 	msr	BASEPRI, r3
 800724c:	f3bf 8f6f 	isb	sy
 8007250:	f3bf 8f4f 	dsb	sy
 8007254:	e7fe      	b.n	8007254 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007256:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800725a:	4b32      	ldr	r3, [pc, #200]	@ (8007324 <xPortStartScheduler+0xf0>)
 800725c:	429a      	cmp	r2, r3
 800725e:	d108      	bne.n	8007272 <xPortStartScheduler+0x3e>
 8007260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007264:	f383 8811 	msr	BASEPRI, r3
 8007268:	f3bf 8f6f 	isb	sy
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	e7fe      	b.n	8007270 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007272:	4b2d      	ldr	r3, [pc, #180]	@ (8007328 <xPortStartScheduler+0xf4>)
 8007274:	781a      	ldrb	r2, [r3, #0]
 8007276:	b2d2      	uxtb	r2, r2
 8007278:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800727a:	22ff      	movs	r2, #255	@ 0xff
 800727c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800727e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007280:	4a2a      	ldr	r2, [pc, #168]	@ (800732c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007282:	b2db      	uxtb	r3, r3
 8007284:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007288:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800728c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007290:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007292:	4a27      	ldr	r2, [pc, #156]	@ (8007330 <xPortStartScheduler+0xfc>)
 8007294:	2307      	movs	r3, #7
 8007296:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007298:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800729c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800729e:	0609      	lsls	r1, r1, #24
 80072a0:	d40a      	bmi.n	80072b8 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80072a2:	2b03      	cmp	r3, #3
 80072a4:	d011      	beq.n	80072ca <xPortStartScheduler+0x96>
 80072a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072aa:	f383 8811 	msr	BASEPRI, r3
 80072ae:	f3bf 8f6f 	isb	sy
 80072b2:	f3bf 8f4f 	dsb	sy
 80072b6:	e7fe      	b.n	80072b6 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 80072b8:	3b01      	subs	r3, #1
 80072ba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80072bc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80072c0:	005b      	lsls	r3, r3, #1
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	f88d 3003 	strb.w	r3, [sp, #3]
 80072c8:	e7e6      	b.n	8007298 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80072ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80072ce:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80072d0:	9b01      	ldr	r3, [sp, #4]
 80072d2:	4a15      	ldr	r2, [pc, #84]	@ (8007328 <xPortStartScheduler+0xf4>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80072d4:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80072dc:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80072e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80072e4:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80072e8:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80072ec:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80072f0:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 80072f4:	f7ff ff8c 	bl	8007210 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80072f8:	4b0e      	ldr	r3, [pc, #56]	@ (8007334 <xPortStartScheduler+0x100>)
 80072fa:	2500      	movs	r5, #0
 80072fc:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 80072fe:	f7ff feb5 	bl	800706c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007302:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8007306:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800730a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800730e:	f7ff fe99 	bl	8007044 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007312:	f001 f895 	bl	8008440 <vTaskSwitchContext>
	prvTaskExitError();
 8007316:	f7ff feb3 	bl	8007080 <prvTaskExitError>
}
 800731a:	4628      	mov	r0, r5
 800731c:	b003      	add	sp, #12
 800731e:	bd30      	pop	{r4, r5, pc}
 8007320:	410fc271 	.word	0x410fc271
 8007324:	410fc270 	.word	0x410fc270
 8007328:	e000e400 	.word	0xe000e400
 800732c:	20011fe0 	.word	0x20011fe0
 8007330:	20011fdc 	.word	0x20011fdc
 8007334:	20000080 	.word	0x20000080

08007338 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007338:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800733c:	2b0f      	cmp	r3, #15
 800733e:	d90e      	bls.n	800735e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007340:	4a11      	ldr	r2, [pc, #68]	@ (8007388 <vPortValidateInterruptPriority+0x50>)
 8007342:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007344:	4a11      	ldr	r2, [pc, #68]	@ (800738c <vPortValidateInterruptPriority+0x54>)
 8007346:	7812      	ldrb	r2, [r2, #0]
 8007348:	429a      	cmp	r2, r3
 800734a:	d908      	bls.n	800735e <vPortValidateInterruptPriority+0x26>
 800734c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007350:	f383 8811 	msr	BASEPRI, r3
 8007354:	f3bf 8f6f 	isb	sy
 8007358:	f3bf 8f4f 	dsb	sy
 800735c:	e7fe      	b.n	800735c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800735e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007362:	4a0b      	ldr	r2, [pc, #44]	@ (8007390 <vPortValidateInterruptPriority+0x58>)
 8007364:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8007368:	6812      	ldr	r2, [r2, #0]
 800736a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800736e:	4293      	cmp	r3, r2
 8007370:	d908      	bls.n	8007384 <vPortValidateInterruptPriority+0x4c>
 8007372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007376:	f383 8811 	msr	BASEPRI, r3
 800737a:	f3bf 8f6f 	isb	sy
 800737e:	f3bf 8f4f 	dsb	sy
 8007382:	e7fe      	b.n	8007382 <vPortValidateInterruptPriority+0x4a>
	}
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	e000e3f0 	.word	0xe000e3f0
 800738c:	20011fe0 	.word	0x20011fe0
 8007390:	20011fdc 	.word	0x20011fdc

08007394 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007394:	b510      	push	{r4, lr}
 8007396:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007398:	f7ff febc 	bl	8007114 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800739c:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800739e:	f7ff fed9 	bl	8007154 <vPortExitCritical>

	return xReturn;
}
 80073a2:	fab4 f084 	clz	r0, r4
 80073a6:	0940      	lsrs	r0, r0, #5
 80073a8:	bd10      	pop	{r4, pc}

080073aa <prvCopyDataToQueue>:
{
 80073aa:	b570      	push	{r4, r5, r6, lr}
 80073ac:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80073ae:	6c02      	ldr	r2, [r0, #64]	@ 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073b0:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 80073b2:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80073b4:	b942      	cbnz	r2, 80073c8 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073b6:	6806      	ldr	r6, [r0, #0]
 80073b8:	b99e      	cbnz	r6, 80073e2 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80073ba:	6880      	ldr	r0, [r0, #8]
 80073bc:	f001 f98e 	bl	80086dc <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80073c0:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80073c2:	3501      	adds	r5, #1
 80073c4:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 80073c6:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80073c8:	b96e      	cbnz	r6, 80073e6 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80073ca:	6840      	ldr	r0, [r0, #4]
 80073cc:	f00c faa9 	bl	8013922 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80073d0:	6863      	ldr	r3, [r4, #4]
 80073d2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80073d4:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073d6:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80073d8:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073da:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80073dc:	bf24      	itt	cs
 80073de:	6823      	ldrcs	r3, [r4, #0]
 80073e0:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80073e2:	2000      	movs	r0, #0
 80073e4:	e7ed      	b.n	80073c2 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80073e6:	68c0      	ldr	r0, [r0, #12]
 80073e8:	f00c fa9b 	bl	8013922 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80073ec:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80073ee:	68e3      	ldr	r3, [r4, #12]
 80073f0:	4251      	negs	r1, r2
 80073f2:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073f4:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80073f6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073f8:	4293      	cmp	r3, r2
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80073fa:	bf3e      	ittt	cc
 80073fc:	68a3      	ldrcc	r3, [r4, #8]
 80073fe:	185b      	addcc	r3, r3, r1
 8007400:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8007402:	2e02      	cmp	r6, #2
 8007404:	d1ed      	bne.n	80073e2 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007406:	b10d      	cbz	r5, 800740c <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8007408:	3d01      	subs	r5, #1
 800740a:	e7ea      	b.n	80073e2 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800740c:	4628      	mov	r0, r5
 800740e:	e7d8      	b.n	80073c2 <prvCopyDataToQueue+0x18>

08007410 <prvCopyDataFromQueue>:
{
 8007410:	4603      	mov	r3, r0
 8007412:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007414:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8007416:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007418:	b16a      	cbz	r2, 8007436 <prvCopyDataFromQueue+0x26>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800741a:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800741c:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800741e:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007420:	428c      	cmp	r4, r1
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007422:	bf28      	it	cs
 8007424:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007426:	60dc      	str	r4, [r3, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007428:	bf28      	it	cs
 800742a:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800742c:	68d9      	ldr	r1, [r3, #12]
}
 800742e:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007432:	f00c ba76 	b.w	8013922 <memcpy>
}
 8007436:	f85d 4b04 	ldr.w	r4, [sp], #4
 800743a:	4770      	bx	lr

0800743c <prvUnlockQueue>:
{
 800743c:	b570      	push	{r4, r5, r6, lr}
 800743e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8007440:	f7ff fe68 	bl	8007114 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8007444:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007448:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800744c:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800744e:	2d00      	cmp	r5, #0
 8007450:	dc14      	bgt.n	800747c <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8007452:	23ff      	movs	r3, #255	@ 0xff
 8007454:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8007458:	f7ff fe7c 	bl	8007154 <vPortExitCritical>
	taskENTER_CRITICAL();
 800745c:	f7ff fe5a 	bl	8007114 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8007460:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007464:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8007468:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800746a:	2d00      	cmp	r5, #0
 800746c:	dc12      	bgt.n	8007494 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800746e:	23ff      	movs	r3, #255	@ 0xff
 8007470:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 8007474:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8007478:	f7ff be6c 	b.w	8007154 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800747c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800747e:	2b00      	cmp	r3, #0
 8007480:	d0e7      	beq.n	8007452 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007482:	4630      	mov	r0, r6
 8007484:	f001 f84e 	bl	8008524 <xTaskRemoveFromEventList>
 8007488:	b108      	cbz	r0, 800748e <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800748a:	f001 f8d3 	bl	8008634 <vTaskMissedYield>
			--cTxLock;
 800748e:	3d01      	subs	r5, #1
 8007490:	b26d      	sxtb	r5, r5
 8007492:	e7dc      	b.n	800744e <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007494:	6923      	ldr	r3, [r4, #16]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d0e9      	beq.n	800746e <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800749a:	4630      	mov	r0, r6
 800749c:	f001 f842 	bl	8008524 <xTaskRemoveFromEventList>
 80074a0:	b108      	cbz	r0, 80074a6 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80074a2:	f001 f8c7 	bl	8008634 <vTaskMissedYield>
				--cRxLock;
 80074a6:	3d01      	subs	r5, #1
 80074a8:	b26d      	sxtb	r5, r5
 80074aa:	e7de      	b.n	800746a <prvUnlockQueue+0x2e>

080074ac <xQueueGenericReset>:
{
 80074ac:	b538      	push	{r3, r4, r5, lr}
 80074ae:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80074b0:	4604      	mov	r4, r0
 80074b2:	b940      	cbnz	r0, 80074c6 <xQueueGenericReset+0x1a>
 80074b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b8:	f383 8811 	msr	BASEPRI, r3
 80074bc:	f3bf 8f6f 	isb	sy
 80074c0:	f3bf 8f4f 	dsb	sy
 80074c4:	e7fe      	b.n	80074c4 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 80074c6:	f7ff fe25 	bl	8007114 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80074ca:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 80074ce:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80074d0:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80074d2:	434b      	muls	r3, r1
 80074d4:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80074d6:	1a5b      	subs	r3, r3, r1
 80074d8:	441a      	add	r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80074da:	60a0      	str	r0, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 80074dc:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80074de:	2000      	movs	r0, #0
 80074e0:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80074e2:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80074e4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80074e8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 80074ec:	b9a5      	cbnz	r5, 8007518 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074ee:	6923      	ldr	r3, [r4, #16]
 80074f0:	b173      	cbz	r3, 8007510 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074f2:	f104 0010 	add.w	r0, r4, #16
 80074f6:	f001 f815 	bl	8008524 <xTaskRemoveFromEventList>
 80074fa:	b148      	cbz	r0, 8007510 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 80074fc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007500:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007504:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007508:	f3bf 8f4f 	dsb	sy
 800750c:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8007510:	f7ff fe20 	bl	8007154 <vPortExitCritical>
}
 8007514:	2001      	movs	r0, #1
 8007516:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007518:	f104 0010 	add.w	r0, r4, #16
 800751c:	f7ff fd52 	bl	8006fc4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007520:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007524:	f7ff fd4e 	bl	8006fc4 <vListInitialise>
 8007528:	e7f2      	b.n	8007510 <xQueueGenericReset+0x64>

0800752a <xQueueGenericCreateStatic>:
	{
 800752a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800752c:	460d      	mov	r5, r1
 800752e:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007530:	b940      	cbnz	r0, 8007544 <xQueueGenericCreateStatic+0x1a>
 8007532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007536:	f383 8811 	msr	BASEPRI, r3
 800753a:	f3bf 8f6f 	isb	sy
 800753e:	f3bf 8f4f 	dsb	sy
 8007542:	e7fe      	b.n	8007542 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 8007544:	b943      	cbnz	r3, 8007558 <xQueueGenericCreateStatic+0x2e>
 8007546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800754a:	f383 8811 	msr	BASEPRI, r3
 800754e:	f3bf 8f6f 	isb	sy
 8007552:	f3bf 8f4f 	dsb	sy
 8007556:	e7fe      	b.n	8007556 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007558:	b14a      	cbz	r2, 800756e <xQueueGenericCreateStatic+0x44>
 800755a:	b991      	cbnz	r1, 8007582 <xQueueGenericCreateStatic+0x58>
 800755c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007560:	f383 8811 	msr	BASEPRI, r3
 8007564:	f3bf 8f6f 	isb	sy
 8007568:	f3bf 8f4f 	dsb	sy
 800756c:	e7fe      	b.n	800756c <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800756e:	b141      	cbz	r1, 8007582 <xQueueGenericCreateStatic+0x58>
 8007570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007574:	f383 8811 	msr	BASEPRI, r3
 8007578:	f3bf 8f6f 	isb	sy
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	e7fe      	b.n	8007580 <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007582:	2350      	movs	r3, #80	@ 0x50
 8007584:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007586:	9b01      	ldr	r3, [sp, #4]
 8007588:	2b50      	cmp	r3, #80	@ 0x50
 800758a:	d008      	beq.n	800759e <xQueueGenericCreateStatic+0x74>
 800758c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007590:	f383 8811 	msr	BASEPRI, r3
 8007594:	f3bf 8f6f 	isb	sy
 8007598:	f3bf 8f4f 	dsb	sy
 800759c:	e7fe      	b.n	800759c <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800759e:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80075a0:	2d00      	cmp	r5, #0
 80075a2:	bf08      	it	eq
 80075a4:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 80075a6:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80075aa:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
 80075ae:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80075b0:	4620      	mov	r0, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80075b2:	9b01      	ldr	r3, [sp, #4]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80075b4:	f7ff ff7a 	bl	80074ac <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80075b8:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80075bc:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 80075c0:	4620      	mov	r0, r4
 80075c2:	b003      	add	sp, #12
 80075c4:	bd30      	pop	{r4, r5, pc}

080075c6 <xQueueGenericCreate>:
	{
 80075c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075c8:	460d      	mov	r5, r1
 80075ca:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80075cc:	4606      	mov	r6, r0
 80075ce:	b940      	cbnz	r0, 80075e2 <xQueueGenericCreate+0x1c>
 80075d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d4:	f383 8811 	msr	BASEPRI, r3
 80075d8:	f3bf 8f6f 	isb	sy
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	e7fe      	b.n	80075e0 <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075e2:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80075e4:	3050      	adds	r0, #80	@ 0x50
 80075e6:	f7ff fc17 	bl	8006e18 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80075ea:	4604      	mov	r4, r0
 80075ec:	b170      	cbz	r0, 800760c <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80075ee:	2300      	movs	r3, #0
 80075f0:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80075f4:	b165      	cbz	r5, 8007610 <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80075f6:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	pxNewQueue->uxItemSize = uxItemSize;
 80075fa:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
 80075fe:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007600:	2101      	movs	r1, #1
 8007602:	4620      	mov	r0, r4
 8007604:	f7ff ff52 	bl	80074ac <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8007608:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 800760c:	4620      	mov	r0, r4
 800760e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007610:	4603      	mov	r3, r0
 8007612:	e7f2      	b.n	80075fa <xQueueGenericCreate+0x34>

08007614 <xQueueCreateCountingSemaphoreStatic>:
	{
 8007614:	b513      	push	{r0, r1, r4, lr}
 8007616:	4613      	mov	r3, r2
 8007618:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800761a:	b940      	cbnz	r0, 800762e <xQueueCreateCountingSemaphoreStatic+0x1a>
 800761c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007620:	f383 8811 	msr	BASEPRI, r3
 8007624:	f3bf 8f6f 	isb	sy
 8007628:	f3bf 8f4f 	dsb	sy
 800762c:	e7fe      	b.n	800762c <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800762e:	4288      	cmp	r0, r1
 8007630:	d208      	bcs.n	8007644 <xQueueCreateCountingSemaphoreStatic+0x30>
 8007632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007636:	f383 8811 	msr	BASEPRI, r3
 800763a:	f3bf 8f6f 	isb	sy
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	e7fe      	b.n	8007642 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007644:	2202      	movs	r2, #2
 8007646:	9200      	str	r2, [sp, #0]
 8007648:	2200      	movs	r2, #0
 800764a:	4611      	mov	r1, r2
 800764c:	f7ff ff6d 	bl	800752a <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8007650:	b100      	cbz	r0, 8007654 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007652:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8007654:	b002      	add	sp, #8
 8007656:	bd10      	pop	{r4, pc}

08007658 <xQueueCreateCountingSemaphore>:
	{
 8007658:	b510      	push	{r4, lr}
 800765a:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800765c:	b940      	cbnz	r0, 8007670 <xQueueCreateCountingSemaphore+0x18>
 800765e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007662:	f383 8811 	msr	BASEPRI, r3
 8007666:	f3bf 8f6f 	isb	sy
 800766a:	f3bf 8f4f 	dsb	sy
 800766e:	e7fe      	b.n	800766e <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007670:	4288      	cmp	r0, r1
 8007672:	d208      	bcs.n	8007686 <xQueueCreateCountingSemaphore+0x2e>
 8007674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007678:	f383 8811 	msr	BASEPRI, r3
 800767c:	f3bf 8f6f 	isb	sy
 8007680:	f3bf 8f4f 	dsb	sy
 8007684:	e7fe      	b.n	8007684 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007686:	2202      	movs	r2, #2
 8007688:	2100      	movs	r1, #0
 800768a:	f7ff ff9c 	bl	80075c6 <xQueueGenericCreate>
		if( xHandle != NULL )
 800768e:	b100      	cbz	r0, 8007692 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007690:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 8007692:	bd10      	pop	{r4, pc}

08007694 <xQueueGenericSend>:
{
 8007694:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007698:	460f      	mov	r7, r1
 800769a:	9201      	str	r2, [sp, #4]
 800769c:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800769e:	4604      	mov	r4, r0
 80076a0:	b940      	cbnz	r0, 80076b4 <xQueueGenericSend+0x20>
 80076a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a6:	f383 8811 	msr	BASEPRI, r3
 80076aa:	f3bf 8f6f 	isb	sy
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	e7fe      	b.n	80076b2 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076b4:	b951      	cbnz	r1, 80076cc <xQueueGenericSend+0x38>
 80076b6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80076b8:	b143      	cbz	r3, 80076cc <xQueueGenericSend+0x38>
 80076ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076be:	f383 8811 	msr	BASEPRI, r3
 80076c2:	f3bf 8f6f 	isb	sy
 80076c6:	f3bf 8f4f 	dsb	sy
 80076ca:	e7fe      	b.n	80076ca <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80076cc:	2e02      	cmp	r6, #2
 80076ce:	d10b      	bne.n	80076e8 <xQueueGenericSend+0x54>
 80076d0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d008      	beq.n	80076e8 <xQueueGenericSend+0x54>
 80076d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076da:	f383 8811 	msr	BASEPRI, r3
 80076de:	f3bf 8f6f 	isb	sy
 80076e2:	f3bf 8f4f 	dsb	sy
 80076e6:	e7fe      	b.n	80076e6 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80076e8:	f000 ffaa 	bl	8008640 <xTaskGetSchedulerState>
 80076ec:	4605      	mov	r5, r0
 80076ee:	b330      	cbz	r0, 800773e <xQueueGenericSend+0xaa>
 80076f0:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 80076f2:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 80076f6:	f7ff fd0d 	bl	8007114 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80076fa:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80076fc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80076fe:	429a      	cmp	r2, r3
 8007700:	d301      	bcc.n	8007706 <xQueueGenericSend+0x72>
 8007702:	2e02      	cmp	r6, #2
 8007704:	d127      	bne.n	8007756 <xQueueGenericSend+0xc2>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007706:	4632      	mov	r2, r6
 8007708:	4639      	mov	r1, r7
 800770a:	4620      	mov	r0, r4
 800770c:	f7ff fe4d 	bl	80073aa <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007710:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007712:	b11b      	cbz	r3, 800771c <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007714:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007718:	f000 ff04 	bl	8008524 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800771c:	b148      	cbz	r0, 8007732 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800771e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007722:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007726:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007732:	f7ff fd0f 	bl	8007154 <vPortExitCritical>
				return pdPASS;
 8007736:	2001      	movs	r0, #1
}
 8007738:	b004      	add	sp, #16
 800773a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800773e:	9b01      	ldr	r3, [sp, #4]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d0d6      	beq.n	80076f2 <xQueueGenericSend+0x5e>
 8007744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007748:	f383 8811 	msr	BASEPRI, r3
 800774c:	f3bf 8f6f 	isb	sy
 8007750:	f3bf 8f4f 	dsb	sy
 8007754:	e7fe      	b.n	8007754 <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007756:	9b01      	ldr	r3, [sp, #4]
 8007758:	b91b      	cbnz	r3, 8007762 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 800775a:	f7ff fcfb 	bl	8007154 <vPortExitCritical>
					return errQUEUE_FULL;
 800775e:	2000      	movs	r0, #0
 8007760:	e7ea      	b.n	8007738 <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 8007762:	b915      	cbnz	r5, 800776a <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007764:	a802      	add	r0, sp, #8
 8007766:	f000 ff1d 	bl	80085a4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800776a:	f7ff fcf3 	bl	8007154 <vPortExitCritical>
		vTaskSuspendAll();
 800776e:	f000 fd2b 	bl	80081c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007772:	f7ff fccf 	bl	8007114 <vPortEnterCritical>
 8007776:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800777a:	2bff      	cmp	r3, #255	@ 0xff
 800777c:	bf08      	it	eq
 800777e:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8007782:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007786:	2bff      	cmp	r3, #255	@ 0xff
 8007788:	bf08      	it	eq
 800778a:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 800778e:	f7ff fce1 	bl	8007154 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007792:	a901      	add	r1, sp, #4
 8007794:	a802      	add	r0, sp, #8
 8007796:	f000 ff11 	bl	80085bc <xTaskCheckForTimeOut>
 800779a:	bb38      	cbnz	r0, 80077ec <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800779c:	f7ff fcba 	bl	8007114 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80077a0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80077a2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d10e      	bne.n	80077c6 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80077a8:	f7ff fcd4 	bl	8007154 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80077ac:	9901      	ldr	r1, [sp, #4]
 80077ae:	f104 0010 	add.w	r0, r4, #16
 80077b2:	f000 fe7f 	bl	80084b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80077b6:	4620      	mov	r0, r4
 80077b8:	f7ff fe40 	bl	800743c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80077bc:	f000 fda8 	bl	8008310 <xTaskResumeAll>
 80077c0:	b148      	cbz	r0, 80077d6 <xQueueGenericSend+0x142>
 80077c2:	2501      	movs	r5, #1
 80077c4:	e797      	b.n	80076f6 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 80077c6:	f7ff fcc5 	bl	8007154 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80077ca:	4620      	mov	r0, r4
 80077cc:	f7ff fe36 	bl	800743c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80077d0:	f000 fd9e 	bl	8008310 <xTaskResumeAll>
 80077d4:	e7f5      	b.n	80077c2 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 80077d6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80077da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077de:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80077e2:	f3bf 8f4f 	dsb	sy
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	e7ea      	b.n	80077c2 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 80077ec:	4620      	mov	r0, r4
 80077ee:	f7ff fe25 	bl	800743c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077f2:	f000 fd8d 	bl	8008310 <xTaskResumeAll>
			return errQUEUE_FULL;
 80077f6:	e7b2      	b.n	800775e <xQueueGenericSend+0xca>

080077f8 <xQueueGenericSendFromISR>:
{
 80077f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077fc:	4689      	mov	r9, r1
 80077fe:	4617      	mov	r7, r2
 8007800:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8007802:	4604      	mov	r4, r0
 8007804:	b940      	cbnz	r0, 8007818 <xQueueGenericSendFromISR+0x20>
 8007806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800780a:	f383 8811 	msr	BASEPRI, r3
 800780e:	f3bf 8f6f 	isb	sy
 8007812:	f3bf 8f4f 	dsb	sy
 8007816:	e7fe      	b.n	8007816 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007818:	b951      	cbnz	r1, 8007830 <xQueueGenericSendFromISR+0x38>
 800781a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800781c:	b143      	cbz	r3, 8007830 <xQueueGenericSendFromISR+0x38>
 800781e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	e7fe      	b.n	800782e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007830:	2e02      	cmp	r6, #2
 8007832:	d10b      	bne.n	800784c <xQueueGenericSendFromISR+0x54>
 8007834:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007836:	2b01      	cmp	r3, #1
 8007838:	d008      	beq.n	800784c <xQueueGenericSendFromISR+0x54>
 800783a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800783e:	f383 8811 	msr	BASEPRI, r3
 8007842:	f3bf 8f6f 	isb	sy
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	e7fe      	b.n	800784a <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800784c:	f7ff fd74 	bl	8007338 <vPortValidateInterruptPriority>
	__asm volatile
 8007850:	f3ef 8811 	mrs	r8, BASEPRI
 8007854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007858:	f383 8811 	msr	BASEPRI, r3
 800785c:	f3bf 8f6f 	isb	sy
 8007860:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007864:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007866:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007868:	429a      	cmp	r2, r3
 800786a:	d301      	bcc.n	8007870 <xQueueGenericSendFromISR+0x78>
 800786c:	2e02      	cmp	r6, #2
 800786e:	d11e      	bne.n	80078ae <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 8007870:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007874:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8007876:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007878:	4632      	mov	r2, r6
 800787a:	4649      	mov	r1, r9
 800787c:	4620      	mov	r0, r4
 800787e:	f7ff fd94 	bl	80073aa <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8007882:	1c6b      	adds	r3, r5, #1
 8007884:	d10e      	bne.n	80078a4 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007886:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007888:	b13b      	cbz	r3, 800789a <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800788a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800788e:	f000 fe49 	bl	8008524 <xTaskRemoveFromEventList>
 8007892:	b110      	cbz	r0, 800789a <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 8007894:	b10f      	cbz	r7, 800789a <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007896:	2301      	movs	r3, #1
 8007898:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 800789a:	2001      	movs	r0, #1
	__asm volatile
 800789c:	f388 8811 	msr	BASEPRI, r8
}
 80078a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80078a4:	3501      	adds	r5, #1
 80078a6:	b26d      	sxtb	r5, r5
 80078a8:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 80078ac:	e7f5      	b.n	800789a <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 80078ae:	2000      	movs	r0, #0
 80078b0:	e7f4      	b.n	800789c <xQueueGenericSendFromISR+0xa4>

080078b2 <xQueueGiveFromISR>:
{
 80078b2:	b570      	push	{r4, r5, r6, lr}
 80078b4:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80078b6:	4604      	mov	r4, r0
 80078b8:	b940      	cbnz	r0, 80078cc <xQueueGiveFromISR+0x1a>
	__asm volatile
 80078ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078be:	f383 8811 	msr	BASEPRI, r3
 80078c2:	f3bf 8f6f 	isb	sy
 80078c6:	f3bf 8f4f 	dsb	sy
 80078ca:	e7fe      	b.n	80078ca <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 80078cc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80078ce:	b143      	cbz	r3, 80078e2 <xQueueGiveFromISR+0x30>
 80078d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d4:	f383 8811 	msr	BASEPRI, r3
 80078d8:	f3bf 8f6f 	isb	sy
 80078dc:	f3bf 8f4f 	dsb	sy
 80078e0:	e7fe      	b.n	80078e0 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80078e2:	6803      	ldr	r3, [r0, #0]
 80078e4:	b953      	cbnz	r3, 80078fc <xQueueGiveFromISR+0x4a>
 80078e6:	6883      	ldr	r3, [r0, #8]
 80078e8:	b143      	cbz	r3, 80078fc <xQueueGiveFromISR+0x4a>
 80078ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ee:	f383 8811 	msr	BASEPRI, r3
 80078f2:	f3bf 8f6f 	isb	sy
 80078f6:	f3bf 8f4f 	dsb	sy
 80078fa:	e7fe      	b.n	80078fa <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80078fc:	f7ff fd1c 	bl	8007338 <vPortValidateInterruptPriority>
	__asm volatile
 8007900:	f3ef 8611 	mrs	r6, BASEPRI
 8007904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007908:	f383 8811 	msr	BASEPRI, r3
 800790c:	f3bf 8f6f 	isb	sy
 8007910:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007914:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007916:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8007918:	4293      	cmp	r3, r2
 800791a:	d919      	bls.n	8007950 <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 800791c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007920:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8007922:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8007924:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007926:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 8007928:	d10d      	bne.n	8007946 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800792a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800792c:	b13b      	cbz	r3, 800793e <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800792e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007932:	f000 fdf7 	bl	8008524 <xTaskRemoveFromEventList>
 8007936:	b110      	cbz	r0, 800793e <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 8007938:	b10d      	cbz	r5, 800793e <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800793a:	2301      	movs	r3, #1
 800793c:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 800793e:	2001      	movs	r0, #1
	__asm volatile
 8007940:	f386 8811 	msr	BASEPRI, r6
}
 8007944:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007946:	3301      	adds	r3, #1
 8007948:	b25b      	sxtb	r3, r3
 800794a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800794e:	e7f6      	b.n	800793e <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 8007950:	2000      	movs	r0, #0
 8007952:	e7f5      	b.n	8007940 <xQueueGiveFromISR+0x8e>

08007954 <xQueueReceive>:
{
 8007954:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8007958:	460e      	mov	r6, r1
 800795a:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800795c:	4604      	mov	r4, r0
 800795e:	b940      	cbnz	r0, 8007972 <xQueueReceive+0x1e>
	__asm volatile
 8007960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007964:	f383 8811 	msr	BASEPRI, r3
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	e7fe      	b.n	8007970 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007972:	b951      	cbnz	r1, 800798a <xQueueReceive+0x36>
 8007974:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007976:	b143      	cbz	r3, 800798a <xQueueReceive+0x36>
 8007978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800797c:	f383 8811 	msr	BASEPRI, r3
 8007980:	f3bf 8f6f 	isb	sy
 8007984:	f3bf 8f4f 	dsb	sy
 8007988:	e7fe      	b.n	8007988 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800798a:	f000 fe59 	bl	8008640 <xTaskGetSchedulerState>
 800798e:	4605      	mov	r5, r0
 8007990:	b318      	cbz	r0, 80079da <xQueueReceive+0x86>
 8007992:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8007994:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8007998:	f7ff fbbc 	bl	8007114 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800799c:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800799e:	b347      	cbz	r7, 80079f2 <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80079a0:	4631      	mov	r1, r6
 80079a2:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80079a4:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80079a6:	f7ff fd33 	bl	8007410 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80079aa:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079ac:	6923      	ldr	r3, [r4, #16]
 80079ae:	b173      	cbz	r3, 80079ce <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079b0:	f104 0010 	add.w	r0, r4, #16
 80079b4:	f000 fdb6 	bl	8008524 <xTaskRemoveFromEventList>
 80079b8:	b148      	cbz	r0, 80079ce <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 80079ba:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80079be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079c2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80079c6:	f3bf 8f4f 	dsb	sy
 80079ca:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80079ce:	f7ff fbc1 	bl	8007154 <vPortExitCritical>
				return pdPASS;
 80079d2:	2001      	movs	r0, #1
}
 80079d4:	b004      	add	sp, #16
 80079d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079da:	9b01      	ldr	r3, [sp, #4]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d0d9      	beq.n	8007994 <xQueueReceive+0x40>
 80079e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079e4:	f383 8811 	msr	BASEPRI, r3
 80079e8:	f3bf 8f6f 	isb	sy
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	e7fe      	b.n	80079f0 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 80079f2:	9b01      	ldr	r3, [sp, #4]
 80079f4:	b91b      	cbnz	r3, 80079fe <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 80079f6:	f7ff fbad 	bl	8007154 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80079fa:	2000      	movs	r0, #0
 80079fc:	e7ea      	b.n	80079d4 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 80079fe:	b915      	cbnz	r5, 8007a06 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a00:	a802      	add	r0, sp, #8
 8007a02:	f000 fdcf 	bl	80085a4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007a06:	f7ff fba5 	bl	8007154 <vPortExitCritical>
		vTaskSuspendAll();
 8007a0a:	f000 fbdd 	bl	80081c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a0e:	f7ff fb81 	bl	8007114 <vPortEnterCritical>
 8007a12:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007a16:	2bff      	cmp	r3, #255	@ 0xff
 8007a18:	bf08      	it	eq
 8007a1a:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8007a1e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007a22:	2bff      	cmp	r3, #255	@ 0xff
 8007a24:	bf08      	it	eq
 8007a26:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8007a2a:	f7ff fb93 	bl	8007154 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a2e:	a901      	add	r1, sp, #4
 8007a30:	a802      	add	r0, sp, #8
 8007a32:	f000 fdc3 	bl	80085bc <xTaskCheckForTimeOut>
 8007a36:	bb00      	cbnz	r0, 8007a7a <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a38:	4620      	mov	r0, r4
 8007a3a:	f7ff fcab 	bl	8007394 <prvIsQueueEmpty>
 8007a3e:	b1b0      	cbz	r0, 8007a6e <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007a40:	9901      	ldr	r1, [sp, #4]
 8007a42:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007a46:	f000 fd35 	bl	80084b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	f7ff fcf6 	bl	800743c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a50:	f000 fc5e 	bl	8008310 <xTaskResumeAll>
 8007a54:	b948      	cbnz	r0, 8007a6a <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8007a56:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007a5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a5e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007a62:	f3bf 8f4f 	dsb	sy
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	2501      	movs	r5, #1
 8007a6c:	e794      	b.n	8007998 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 8007a6e:	4620      	mov	r0, r4
 8007a70:	f7ff fce4 	bl	800743c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a74:	f000 fc4c 	bl	8008310 <xTaskResumeAll>
 8007a78:	e7f7      	b.n	8007a6a <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	f7ff fcde 	bl	800743c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a80:	f000 fc46 	bl	8008310 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a84:	4620      	mov	r0, r4
 8007a86:	f7ff fc85 	bl	8007394 <prvIsQueueEmpty>
 8007a8a:	2800      	cmp	r0, #0
 8007a8c:	d0ed      	beq.n	8007a6a <xQueueReceive+0x116>
 8007a8e:	e7b4      	b.n	80079fa <xQueueReceive+0xa6>

08007a90 <xQueueSemaphoreTake>:
{
 8007a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a92:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 8007a94:	4604      	mov	r4, r0
{
 8007a96:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8007a98:	b940      	cbnz	r0, 8007aac <xQueueSemaphoreTake+0x1c>
 8007a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a9e:	f383 8811 	msr	BASEPRI, r3
 8007aa2:	f3bf 8f6f 	isb	sy
 8007aa6:	f3bf 8f4f 	dsb	sy
 8007aaa:	e7fe      	b.n	8007aaa <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8007aac:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 8007aae:	b145      	cbz	r5, 8007ac2 <xQueueSemaphoreTake+0x32>
 8007ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ab4:	f383 8811 	msr	BASEPRI, r3
 8007ab8:	f3bf 8f6f 	isb	sy
 8007abc:	f3bf 8f4f 	dsb	sy
 8007ac0:	e7fe      	b.n	8007ac0 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ac2:	f000 fdbd 	bl	8008640 <xTaskGetSchedulerState>
 8007ac6:	4606      	mov	r6, r0
 8007ac8:	b320      	cbz	r0, 8007b14 <xQueueSemaphoreTake+0x84>
 8007aca:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8007acc:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 8007ace:	f7ff fb21 	bl	8007114 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007ad2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007ad4:	b353      	cbz	r3, 8007b2c <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ada:	6823      	ldr	r3, [r4, #0]
 8007adc:	b913      	cbnz	r3, 8007ae4 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007ade:	f000 fe8d 	bl	80087fc <pvTaskIncrementMutexHeldCount>
 8007ae2:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ae4:	6923      	ldr	r3, [r4, #16]
 8007ae6:	b173      	cbz	r3, 8007b06 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ae8:	f104 0010 	add.w	r0, r4, #16
 8007aec:	f000 fd1a 	bl	8008524 <xTaskRemoveFromEventList>
 8007af0:	b148      	cbz	r0, 8007b06 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 8007af2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007af6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007afa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007afe:	f3bf 8f4f 	dsb	sy
 8007b02:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8007b06:	f7ff fb25 	bl	8007154 <vPortExitCritical>
				return pdPASS;
 8007b0a:	2001      	movs	r0, #1
}
 8007b0c:	b005      	add	sp, #20
 8007b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b10:	4635      	mov	r5, r6
 8007b12:	e7db      	b.n	8007acc <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b14:	9b01      	ldr	r3, [sp, #4]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d0fa      	beq.n	8007b10 <xQueueSemaphoreTake+0x80>
 8007b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b1e:	f383 8811 	msr	BASEPRI, r3
 8007b22:	f3bf 8f6f 	isb	sy
 8007b26:	f3bf 8f4f 	dsb	sy
 8007b2a:	e7fe      	b.n	8007b2a <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b2c:	9b01      	ldr	r3, [sp, #4]
 8007b2e:	b953      	cbnz	r3, 8007b46 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007b30:	2d00      	cmp	r5, #0
 8007b32:	d066      	beq.n	8007c02 <xQueueSemaphoreTake+0x172>
 8007b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b38:	f383 8811 	msr	BASEPRI, r3
 8007b3c:	f3bf 8f6f 	isb	sy
 8007b40:	f3bf 8f4f 	dsb	sy
 8007b44:	e7fe      	b.n	8007b44 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 8007b46:	b916      	cbnz	r6, 8007b4e <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b48:	a802      	add	r0, sp, #8
 8007b4a:	f000 fd2b 	bl	80085a4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8007b4e:	f7ff fb01 	bl	8007154 <vPortExitCritical>
		vTaskSuspendAll();
 8007b52:	f000 fb39 	bl	80081c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b56:	f7ff fadd 	bl	8007114 <vPortEnterCritical>
 8007b5a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007b5e:	2bff      	cmp	r3, #255	@ 0xff
 8007b60:	bf08      	it	eq
 8007b62:	f884 7044 	strbeq.w	r7, [r4, #68]	@ 0x44
 8007b66:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007b6a:	2bff      	cmp	r3, #255	@ 0xff
 8007b6c:	bf08      	it	eq
 8007b6e:	f884 7045 	strbeq.w	r7, [r4, #69]	@ 0x45
 8007b72:	f7ff faef 	bl	8007154 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b76:	a901      	add	r1, sp, #4
 8007b78:	a802      	add	r0, sp, #8
 8007b7a:	f000 fd1f 	bl	80085bc <xTaskCheckForTimeOut>
 8007b7e:	bb50      	cbnz	r0, 8007bd6 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b80:	4620      	mov	r0, r4
 8007b82:	f7ff fc07 	bl	8007394 <prvIsQueueEmpty>
 8007b86:	b300      	cbz	r0, 8007bca <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007b88:	6823      	ldr	r3, [r4, #0]
 8007b8a:	b93b      	cbnz	r3, 8007b9c <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 8007b8c:	f7ff fac2 	bl	8007114 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007b90:	68a0      	ldr	r0, [r4, #8]
 8007b92:	f000 fd65 	bl	8008660 <xTaskPriorityInherit>
 8007b96:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8007b98:	f7ff fadc 	bl	8007154 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b9c:	9901      	ldr	r1, [sp, #4]
 8007b9e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007ba2:	f000 fc87 	bl	80084b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007ba6:	4620      	mov	r0, r4
 8007ba8:	f7ff fc48 	bl	800743c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007bac:	f000 fbb0 	bl	8008310 <xTaskResumeAll>
 8007bb0:	b948      	cbnz	r0, 8007bc6 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 8007bb2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007bb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bba:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007bbe:	f3bf 8f4f 	dsb	sy
 8007bc2:	f3bf 8f6f 	isb	sy
 8007bc6:	2601      	movs	r6, #1
 8007bc8:	e781      	b.n	8007ace <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 8007bca:	4620      	mov	r0, r4
 8007bcc:	f7ff fc36 	bl	800743c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007bd0:	f000 fb9e 	bl	8008310 <xTaskResumeAll>
 8007bd4:	e7f7      	b.n	8007bc6 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	f7ff fc30 	bl	800743c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007bdc:	f000 fb98 	bl	8008310 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007be0:	4620      	mov	r0, r4
 8007be2:	f7ff fbd7 	bl	8007394 <prvIsQueueEmpty>
 8007be6:	2800      	cmp	r0, #0
 8007be8:	d0ed      	beq.n	8007bc6 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 8007bea:	b165      	cbz	r5, 8007c06 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 8007bec:	f7ff fa92 	bl	8007114 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007bf0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8007bf2:	b119      	cbz	r1, 8007bfc <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007bf4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007bf6:	6819      	ldr	r1, [r3, #0]
 8007bf8:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007bfc:	68a0      	ldr	r0, [r4, #8]
 8007bfe:	f000 fdaf 	bl	8008760 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8007c02:	f7ff faa7 	bl	8007154 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8007c06:	2000      	movs	r0, #0
 8007c08:	e780      	b.n	8007b0c <xQueueSemaphoreTake+0x7c>

08007c0a <xQueueReceiveFromISR>:
{
 8007c0a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c0e:	4689      	mov	r9, r1
 8007c10:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8007c12:	4604      	mov	r4, r0
 8007c14:	b940      	cbnz	r0, 8007c28 <xQueueReceiveFromISR+0x1e>
 8007c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c1a:	f383 8811 	msr	BASEPRI, r3
 8007c1e:	f3bf 8f6f 	isb	sy
 8007c22:	f3bf 8f4f 	dsb	sy
 8007c26:	e7fe      	b.n	8007c26 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c28:	b951      	cbnz	r1, 8007c40 <xQueueReceiveFromISR+0x36>
 8007c2a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8007c2c:	b143      	cbz	r3, 8007c40 <xQueueReceiveFromISR+0x36>
 8007c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c32:	f383 8811 	msr	BASEPRI, r3
 8007c36:	f3bf 8f6f 	isb	sy
 8007c3a:	f3bf 8f4f 	dsb	sy
 8007c3e:	e7fe      	b.n	8007c3e <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c40:	f7ff fb7a 	bl	8007338 <vPortValidateInterruptPriority>
	__asm volatile
 8007c44:	f3ef 8711 	mrs	r7, BASEPRI
 8007c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c4c:	f383 8811 	msr	BASEPRI, r3
 8007c50:	f3bf 8f6f 	isb	sy
 8007c54:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c58:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c5a:	b30d      	cbz	r5, 8007ca0 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 8007c5c:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c60:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 8007c62:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c64:	4620      	mov	r0, r4
 8007c66:	f7ff fbd3 	bl	8007410 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c6a:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8007c6c:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c6e:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8007c70:	d111      	bne.n	8007c96 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c72:	6923      	ldr	r3, [r4, #16]
 8007c74:	b153      	cbz	r3, 8007c8c <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c76:	f104 0010 	add.w	r0, r4, #16
 8007c7a:	f000 fc53 	bl	8008524 <xTaskRemoveFromEventList>
 8007c7e:	b128      	cbz	r0, 8007c8c <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 8007c80:	f1b8 0f00 	cmp.w	r8, #0
 8007c84:	d002      	beq.n	8007c8c <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007c86:	2301      	movs	r3, #1
 8007c88:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 8007c8c:	2001      	movs	r0, #1
	__asm volatile
 8007c8e:	f387 8811 	msr	BASEPRI, r7
}
 8007c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007c96:	3601      	adds	r6, #1
 8007c98:	b276      	sxtb	r6, r6
 8007c9a:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 8007c9e:	e7f5      	b.n	8007c8c <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	e7f4      	b.n	8007c8e <xQueueReceiveFromISR+0x84>

08007ca4 <uxQueueMessagesWaiting>:
{
 8007ca4:	b510      	push	{r4, lr}
	configASSERT( xQueue );
 8007ca6:	4604      	mov	r4, r0
 8007ca8:	b940      	cbnz	r0, 8007cbc <uxQueueMessagesWaiting+0x18>
	__asm volatile
 8007caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cae:	f383 8811 	msr	BASEPRI, r3
 8007cb2:	f3bf 8f6f 	isb	sy
 8007cb6:	f3bf 8f4f 	dsb	sy
 8007cba:	e7fe      	b.n	8007cba <uxQueueMessagesWaiting+0x16>
	taskENTER_CRITICAL();
 8007cbc:	f7ff fa2a 	bl	8007114 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007cc0:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
	taskEXIT_CRITICAL();
 8007cc2:	f7ff fa47 	bl	8007154 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	bd10      	pop	{r4, pc}

08007cca <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 8007cca:	b940      	cbnz	r0, 8007cde <uxQueueMessagesWaitingFromISR+0x14>
 8007ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd0:	f383 8811 	msr	BASEPRI, r3
 8007cd4:	f3bf 8f6f 	isb	sy
 8007cd8:	f3bf 8f4f 	dsb	sy
 8007cdc:	e7fe      	b.n	8007cdc <uxQueueMessagesWaitingFromISR+0x12>
	uxReturn = pxQueue->uxMessagesWaiting;
 8007cde:	6b80      	ldr	r0, [r0, #56]	@ 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007ce0:	4770      	bx	lr
	...

08007ce4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007ce4:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007ce6:	4a07      	ldr	r2, [pc, #28]	@ (8007d04 <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ce8:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007cea:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8007cee:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8007cf2:	b91d      	cbnz	r5, 8007cfc <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007cf4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007cf8:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007cfa:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	2b08      	cmp	r3, #8
 8007d00:	d1f3      	bne.n	8007cea <vQueueAddToRegistry+0x6>
 8007d02:	e7fa      	b.n	8007cfa <vQueueAddToRegistry+0x16>
 8007d04:	20011fe4 	.word	0x20011fe4

08007d08 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007d08:	b510      	push	{r4, lr}

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007d0a:	4a09      	ldr	r2, [pc, #36]	@ (8007d30 <vQueueUnregisterQueue+0x28>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d0c:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007d0e:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8007d12:	4281      	cmp	r1, r0
 8007d14:	ea4f 04c3 	mov.w	r4, r3, lsl #3
 8007d18:	d106      	bne.n	8007d28 <vQueueUnregisterQueue+0x20>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007d1a:	4a06      	ldr	r2, [pc, #24]	@ (8007d34 <vQueueUnregisterQueue+0x2c>)
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007d22:	4422      	add	r2, r4
 8007d24:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007d26:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d28:	3301      	adds	r3, #1
 8007d2a:	2b08      	cmp	r3, #8
 8007d2c:	d1ef      	bne.n	8007d0e <vQueueUnregisterQueue+0x6>
 8007d2e:	e7fa      	b.n	8007d26 <vQueueUnregisterQueue+0x1e>
 8007d30:	20011fe8 	.word	0x20011fe8
 8007d34:	20011fe4 	.word	0x20011fe4

08007d38 <vQueueDelete>:
{
 8007d38:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8007d3a:	b940      	cbnz	r0, 8007d4e <vQueueDelete+0x16>
 8007d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d40:	f383 8811 	msr	BASEPRI, r3
 8007d44:	f3bf 8f6f 	isb	sy
 8007d48:	f3bf 8f4f 	dsb	sy
 8007d4c:	e7fe      	b.n	8007d4c <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 8007d4e:	f7ff ffdb 	bl	8007d08 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007d52:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 8007d56:	b91b      	cbnz	r3, 8007d60 <vQueueDelete+0x28>
}
 8007d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 8007d5c:	f7ff b8f4 	b.w	8006f48 <vPortFree>
}
 8007d60:	bd10      	pop	{r4, pc}

08007d62 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d62:	b570      	push	{r4, r5, r6, lr}
 8007d64:	4604      	mov	r4, r0
 8007d66:	460d      	mov	r5, r1
 8007d68:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007d6a:	f7ff f9d3 	bl	8007114 <vPortEnterCritical>
 8007d6e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007d72:	2bff      	cmp	r3, #255	@ 0xff
 8007d74:	bf04      	itt	eq
 8007d76:	2300      	moveq	r3, #0
 8007d78:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 8007d7c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007d80:	2bff      	cmp	r3, #255	@ 0xff
 8007d82:	bf04      	itt	eq
 8007d84:	2300      	moveq	r3, #0
 8007d86:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 8007d8a:	f7ff f9e3 	bl	8007154 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007d8e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007d90:	b92b      	cbnz	r3, 8007d9e <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007d92:	4632      	mov	r2, r6
 8007d94:	4629      	mov	r1, r5
 8007d96:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8007d9a:	f000 fba5 	bl	80084e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007d9e:	4620      	mov	r0, r4
	}
 8007da0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8007da4:	f7ff bb4a 	b.w	800743c <prvUnlockQueue>

08007da8 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dac:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007dae:	f7ff f9b1 	bl	8007114 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007db2:	4b30      	ldr	r3, [pc, #192]	@ (8007e74 <prvAddNewTaskToReadyList+0xcc>)
		if( pxCurrentTCB == NULL )
 8007db4:	4e30      	ldr	r6, [pc, #192]	@ (8007e78 <prvAddNewTaskToReadyList+0xd0>)
		uxCurrentNumberOfTasks++;
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	4f30      	ldr	r7, [pc, #192]	@ (8007e7c <prvAddNewTaskToReadyList+0xd4>)
 8007dba:	3201      	adds	r2, #1
 8007dbc:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8007dbe:	6835      	ldr	r5, [r6, #0]
 8007dc0:	2d00      	cmp	r5, #0
 8007dc2:	d14b      	bne.n	8007e5c <prvAddNewTaskToReadyList+0xb4>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007dc4:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d11f      	bne.n	8007e0c <prvAddNewTaskToReadyList+0x64>
 8007dcc:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007dce:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007dd0:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007dd2:	f7ff f8f7 	bl	8006fc4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007dd6:	2d38      	cmp	r5, #56	@ 0x38
 8007dd8:	f108 0814 	add.w	r8, r8, #20
 8007ddc:	d1f7      	bne.n	8007dce <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007dde:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 8007ea4 <prvAddNewTaskToReadyList+0xfc>
	vListInitialise( &xDelayedTaskList2 );
 8007de2:	4d27      	ldr	r5, [pc, #156]	@ (8007e80 <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 8007de4:	4640      	mov	r0, r8
 8007de6:	f7ff f8ed 	bl	8006fc4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007dea:	4628      	mov	r0, r5
 8007dec:	f7ff f8ea 	bl	8006fc4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007df0:	4824      	ldr	r0, [pc, #144]	@ (8007e84 <prvAddNewTaskToReadyList+0xdc>)
 8007df2:	f7ff f8e7 	bl	8006fc4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007df6:	4824      	ldr	r0, [pc, #144]	@ (8007e88 <prvAddNewTaskToReadyList+0xe0>)
 8007df8:	f7ff f8e4 	bl	8006fc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007dfc:	4823      	ldr	r0, [pc, #140]	@ (8007e8c <prvAddNewTaskToReadyList+0xe4>)
 8007dfe:	f7ff f8e1 	bl	8006fc4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007e02:	4b23      	ldr	r3, [pc, #140]	@ (8007e90 <prvAddNewTaskToReadyList+0xe8>)
 8007e04:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e08:	4b22      	ldr	r3, [pc, #136]	@ (8007e94 <prvAddNewTaskToReadyList+0xec>)
 8007e0a:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8007e0c:	4a22      	ldr	r2, [pc, #136]	@ (8007e98 <prvAddNewTaskToReadyList+0xf0>)
 8007e0e:	6813      	ldr	r3, [r2, #0]
 8007e10:	3301      	adds	r3, #1
 8007e12:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8007e14:	4a21      	ldr	r2, [pc, #132]	@ (8007e9c <prvAddNewTaskToReadyList+0xf4>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007e16:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8007e18:	6811      	ldr	r1, [r2, #0]
 8007e1a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007e1c:	2014      	movs	r0, #20
 8007e1e:	428b      	cmp	r3, r1
 8007e20:	fb00 7003 	mla	r0, r0, r3, r7
 8007e24:	f104 0104 	add.w	r1, r4, #4
 8007e28:	bf88      	it	hi
 8007e2a:	6013      	strhi	r3, [r2, #0]
 8007e2c:	f7ff f8d8 	bl	8006fe0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8007e30:	f7ff f990 	bl	8007154 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8007e34:	4b1a      	ldr	r3, [pc, #104]	@ (8007ea0 <prvAddNewTaskToReadyList+0xf8>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	b173      	cbz	r3, 8007e58 <prvAddNewTaskToReadyList+0xb0>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e3a:	6833      	ldr	r3, [r6, #0]
 8007e3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e3e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d209      	bcs.n	8007e58 <prvAddNewTaskToReadyList+0xb0>
			taskYIELD_IF_USING_PREEMPTION();
 8007e44:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007e48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e4c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007e50:	f3bf 8f4f 	dsb	sy
 8007e54:	f3bf 8f6f 	isb	sy
}
 8007e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8007e5c:	4b10      	ldr	r3, [pc, #64]	@ (8007ea0 <prvAddNewTaskToReadyList+0xf8>)
 8007e5e:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007e60:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8007e62:	2a00      	cmp	r2, #0
 8007e64:	d1d2      	bne.n	8007e0c <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007e66:	6832      	ldr	r2, [r6, #0]
 8007e68:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007e6a:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8007e6c:	bf98      	it	ls
 8007e6e:	6034      	strls	r4, [r6, #0]
 8007e70:	e7cc      	b.n	8007e0c <prvAddNewTaskToReadyList+0x64>
 8007e72:	bf00      	nop
 8007e74:	20012048 	.word	0x20012048
 8007e78:	2001251c 	.word	0x2001251c
 8007e7c:	200120bc 	.word	0x200120bc
 8007e80:	20012094 	.word	0x20012094
 8007e84:	20012078 	.word	0x20012078
 8007e88:	20012064 	.word	0x20012064
 8007e8c:	2001204c 	.word	0x2001204c
 8007e90:	20012090 	.word	0x20012090
 8007e94:	2001208c 	.word	0x2001208c
 8007e98:	2001202c 	.word	0x2001202c
 8007e9c:	20012040 	.word	0x20012040
 8007ea0:	2001203c 	.word	0x2001203c
 8007ea4:	200120a8 	.word	0x200120a8

08007ea8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007eaa:	4b15      	ldr	r3, [pc, #84]	@ (8007f00 <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007eac:	4d15      	ldr	r5, [pc, #84]	@ (8007f04 <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 8007eae:	681c      	ldr	r4, [r3, #0]
{
 8007eb0:	4606      	mov	r6, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007eb2:	6828      	ldr	r0, [r5, #0]
 8007eb4:	3004      	adds	r0, #4
{
 8007eb6:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007eb8:	f7ff f8b4 	bl	8007024 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ebc:	1c73      	adds	r3, r6, #1
 8007ebe:	d107      	bne.n	8007ed0 <prvAddCurrentTaskToDelayedList+0x28>
 8007ec0:	b137      	cbz	r7, 8007ed0 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ec2:	6829      	ldr	r1, [r5, #0]
 8007ec4:	4810      	ldr	r0, [pc, #64]	@ (8007f08 <prvAddCurrentTaskToDelayedList+0x60>)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007ec6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007eca:	3104      	adds	r1, #4
 8007ecc:	f7ff b888 	b.w	8006fe0 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007ed0:	682b      	ldr	r3, [r5, #0]
 8007ed2:	19a4      	adds	r4, r4, r6
 8007ed4:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007ed6:	d307      	bcc.n	8007ee8 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8007f0c <prvAddCurrentTaskToDelayedList+0x64>)
 8007eda:	6818      	ldr	r0, [r3, #0]
 8007edc:	6829      	ldr	r1, [r5, #0]
}
 8007ede:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ee2:	3104      	adds	r1, #4
 8007ee4:	f7ff b887 	b.w	8006ff6 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ee8:	4b09      	ldr	r3, [pc, #36]	@ (8007f10 <prvAddCurrentTaskToDelayedList+0x68>)
 8007eea:	6818      	ldr	r0, [r3, #0]
 8007eec:	6829      	ldr	r1, [r5, #0]
 8007eee:	3104      	adds	r1, #4
 8007ef0:	f7ff f881 	bl	8006ff6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ef4:	4b07      	ldr	r3, [pc, #28]	@ (8007f14 <prvAddCurrentTaskToDelayedList+0x6c>)
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8007efa:	bf88      	it	hi
 8007efc:	601c      	strhi	r4, [r3, #0]
}
 8007efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f00:	20012044 	.word	0x20012044
 8007f04:	2001251c 	.word	0x2001251c
 8007f08:	2001204c 	.word	0x2001204c
 8007f0c:	2001208c 	.word	0x2001208c
 8007f10:	20012090 	.word	0x20012090
 8007f14:	20012028 	.word	0x20012028

08007f18 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f18:	4a06      	ldr	r2, [pc, #24]	@ (8007f34 <prvResetNextTaskUnblockTime+0x1c>)
 8007f1a:	6813      	ldr	r3, [r2, #0]
 8007f1c:	6819      	ldr	r1, [r3, #0]
 8007f1e:	4b06      	ldr	r3, [pc, #24]	@ (8007f38 <prvResetNextTaskUnblockTime+0x20>)
 8007f20:	b919      	cbnz	r1, 8007f2a <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f22:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f26:	601a      	str	r2, [r3, #0]
}
 8007f28:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f2a:	6812      	ldr	r2, [r2, #0]
 8007f2c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f2e:	68d2      	ldr	r2, [r2, #12]
 8007f30:	6852      	ldr	r2, [r2, #4]
 8007f32:	e7f8      	b.n	8007f26 <prvResetNextTaskUnblockTime+0xe>
 8007f34:	20012090 	.word	0x20012090
 8007f38:	20012028 	.word	0x20012028

08007f3c <prvDeleteTCB>:
	{
 8007f3c:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f3e:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
	{
 8007f42:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f44:	b93b      	cbnz	r3, 8007f56 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8007f46:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8007f48:	f7fe fffe 	bl	8006f48 <vPortFree>
				vPortFree( pxTCB );
 8007f4c:	4620      	mov	r0, r4
	}
 8007f4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8007f52:	f7fe bff9 	b.w	8006f48 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d0f9      	beq.n	8007f4e <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	d008      	beq.n	8007f70 <prvDeleteTCB+0x34>
 8007f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f62:	f383 8811 	msr	BASEPRI, r3
 8007f66:	f3bf 8f6f 	isb	sy
 8007f6a:	f3bf 8f4f 	dsb	sy
 8007f6e:	e7fe      	b.n	8007f6e <prvDeleteTCB+0x32>
	}
 8007f70:	bd10      	pop	{r4, pc}
	...

08007f74 <prvIdleTask>:
{
 8007f74:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f76:	4c13      	ldr	r4, [pc, #76]	@ (8007fc4 <prvIdleTask+0x50>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f78:	4f13      	ldr	r7, [pc, #76]	@ (8007fc8 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8007f7a:	4d14      	ldr	r5, [pc, #80]	@ (8007fcc <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f7c:	6823      	ldr	r3, [r4, #0]
 8007f7e:	b973      	cbnz	r3, 8007f9e <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f80:	4b13      	ldr	r3, [pc, #76]	@ (8007fd0 <prvIdleTask+0x5c>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d9f8      	bls.n	8007f7a <prvIdleTask+0x6>
				taskYIELD();
 8007f88:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007f8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f90:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8007f94:	f3bf 8f4f 	dsb	sy
 8007f98:	f3bf 8f6f 	isb	sy
 8007f9c:	e7ed      	b.n	8007f7a <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8007f9e:	f7ff f8b9 	bl	8007114 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fa6:	1d30      	adds	r0, r6, #4
 8007fa8:	f7ff f83c 	bl	8007024 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007fac:	682b      	ldr	r3, [r5, #0]
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007fb2:	6823      	ldr	r3, [r4, #0]
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8007fb8:	f7ff f8cc 	bl	8007154 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8007fbc:	4630      	mov	r0, r6
 8007fbe:	f7ff ffbd 	bl	8007f3c <prvDeleteTCB>
 8007fc2:	e7db      	b.n	8007f7c <prvIdleTask+0x8>
 8007fc4:	20012060 	.word	0x20012060
 8007fc8:	20012064 	.word	0x20012064
 8007fcc:	20012048 	.word	0x20012048
 8007fd0:	200120bc 	.word	0x200120bc

08007fd4 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8007fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fd8:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007fdc:	0096      	lsls	r6, r2, #2
 8007fde:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8007fe0:	4607      	mov	r7, r0
 8007fe2:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007fe4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8007fe6:	21a5      	movs	r1, #165	@ 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8007fe8:	4698      	mov	r8, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007fea:	f00b fbca 	bl	8013782 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007fee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007ff0:	3e04      	subs	r6, #4
 8007ff2:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007ff4:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8007ff8:	b3b5      	cbz	r5, 8008068 <prvInitialiseNewTask.constprop.0+0x94>
 8007ffa:	1e6b      	subs	r3, r5, #1
 8007ffc:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 8008000:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008002:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8008006:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800800a:	b109      	cbz	r1, 8008010 <prvInitialiseNewTask.constprop.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800800c:	42ab      	cmp	r3, r5
 800800e:	d1f8      	bne.n	8008002 <prvInitialiseNewTask.constprop.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008010:	2300      	movs	r3, #0
 8008012:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008016:	9d08      	ldr	r5, [sp, #32]
 8008018:	2d37      	cmp	r5, #55	@ 0x37
 800801a:	bf28      	it	cs
 800801c:	2537      	movcs	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800801e:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 8008022:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8008024:	64e5      	str	r5, [r4, #76]	@ 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008026:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8008028:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800802c:	f7fe ffd5 	bl	8006fda <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008030:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008034:	f104 0018 	add.w	r0, r4, #24
 8008038:	f7fe ffcf 	bl	8006fda <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800803c:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008040:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008042:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008044:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 8008046:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800804a:	f884 a05c 	strb.w	sl, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800804e:	4642      	mov	r2, r8
 8008050:	4639      	mov	r1, r7
 8008052:	4630      	mov	r0, r6
 8008054:	f7ff f834 	bl	80070c0 <pxPortInitialiseStack>
 8008058:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800805a:	f1b9 0f00 	cmp.w	r9, #0
 800805e:	d001      	beq.n	8008064 <prvInitialiseNewTask.constprop.0+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008060:	f8c9 4000 	str.w	r4, [r9]
}
 8008064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008068:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 800806c:	e7d3      	b.n	8008016 <prvInitialiseNewTask.constprop.0+0x42>

0800806e <xTaskCreateStatic>:
	{
 800806e:	b570      	push	{r4, r5, r6, lr}
 8008070:	b086      	sub	sp, #24
 8008072:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8008076:	b945      	cbnz	r5, 800808a <xTaskCreateStatic+0x1c>
 8008078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800807c:	f383 8811 	msr	BASEPRI, r3
 8008080:	f3bf 8f6f 	isb	sy
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	e7fe      	b.n	8008088 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800808a:	b944      	cbnz	r4, 800809e <xTaskCreateStatic+0x30>
 800808c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008090:	f383 8811 	msr	BASEPRI, r3
 8008094:	f3bf 8f6f 	isb	sy
 8008098:	f3bf 8f4f 	dsb	sy
 800809c:	e7fe      	b.n	800809c <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800809e:	2660      	movs	r6, #96	@ 0x60
 80080a0:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80080a2:	9e05      	ldr	r6, [sp, #20]
 80080a4:	2e60      	cmp	r6, #96	@ 0x60
 80080a6:	d008      	beq.n	80080ba <xTaskCreateStatic+0x4c>
 80080a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ac:	f383 8811 	msr	BASEPRI, r3
 80080b0:	f3bf 8f6f 	isb	sy
 80080b4:	f3bf 8f4f 	dsb	sy
 80080b8:	e7fe      	b.n	80080b8 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80080ba:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80080bc:	2502      	movs	r5, #2
 80080be:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80080c2:	ad04      	add	r5, sp, #16
 80080c4:	9501      	str	r5, [sp, #4]
 80080c6:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80080c8:	9402      	str	r4, [sp, #8]
 80080ca:	9500      	str	r5, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80080cc:	9e05      	ldr	r6, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80080ce:	f7ff ff81 	bl	8007fd4 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80080d2:	4620      	mov	r0, r4
 80080d4:	f7ff fe68 	bl	8007da8 <prvAddNewTaskToReadyList>
	}
 80080d8:	9804      	ldr	r0, [sp, #16]
 80080da:	b006      	add	sp, #24
 80080dc:	bd70      	pop	{r4, r5, r6, pc}

080080de <xTaskCreate>:
	{
 80080de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80080e2:	4607      	mov	r7, r0
 80080e4:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80080e6:	0090      	lsls	r0, r2, #2
	{
 80080e8:	4688      	mov	r8, r1
 80080ea:	4616      	mov	r6, r2
 80080ec:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80080ee:	f7fe fe93 	bl	8006e18 <pvPortMalloc>
			if( pxStack != NULL )
 80080f2:	4605      	mov	r5, r0
 80080f4:	b920      	cbnz	r0, 8008100 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80080f6:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80080fa:	b005      	add	sp, #20
 80080fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008100:	2060      	movs	r0, #96	@ 0x60
 8008102:	f7fe fe89 	bl	8006e18 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8008106:	4604      	mov	r4, r0
 8008108:	b198      	cbz	r0, 8008132 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800810a:	2300      	movs	r3, #0
 800810c:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008110:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 8008112:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008114:	9301      	str	r3, [sp, #4]
 8008116:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008118:	9002      	str	r0, [sp, #8]
 800811a:	9300      	str	r3, [sp, #0]
 800811c:	4632      	mov	r2, r6
 800811e:	464b      	mov	r3, r9
 8008120:	4641      	mov	r1, r8
 8008122:	4638      	mov	r0, r7
 8008124:	f7ff ff56 	bl	8007fd4 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008128:	4620      	mov	r0, r4
 800812a:	f7ff fe3d 	bl	8007da8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800812e:	2001      	movs	r0, #1
 8008130:	e7e3      	b.n	80080fa <xTaskCreate+0x1c>
					vPortFree( pxStack );
 8008132:	4628      	mov	r0, r5
 8008134:	f7fe ff08 	bl	8006f48 <vPortFree>
		if( pxNewTCB != NULL )
 8008138:	e7dd      	b.n	80080f6 <xTaskCreate+0x18>
	...

0800813c <vTaskStartScheduler>:
{
 800813c:	b510      	push	{r4, lr}
 800813e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008140:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008142:	aa07      	add	r2, sp, #28
 8008144:	a906      	add	r1, sp, #24
 8008146:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008148:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800814c:	f7fe fe26 	bl	8006d9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008150:	9b05      	ldr	r3, [sp, #20]
 8008152:	9302      	str	r3, [sp, #8]
 8008154:	9b06      	ldr	r3, [sp, #24]
 8008156:	9a07      	ldr	r2, [sp, #28]
 8008158:	4916      	ldr	r1, [pc, #88]	@ (80081b4 <vTaskStartScheduler+0x78>)
 800815a:	4817      	ldr	r0, [pc, #92]	@ (80081b8 <vTaskStartScheduler+0x7c>)
 800815c:	e9cd 4300 	strd	r4, r3, [sp]
 8008160:	4623      	mov	r3, r4
 8008162:	f7ff ff84 	bl	800806e <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8008166:	b318      	cbz	r0, 80081b0 <vTaskStartScheduler+0x74>
			xReturn = xTimerCreateTimerTask();
 8008168:	f000 fba6 	bl	80088b8 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800816c:	2801      	cmp	r0, #1
 800816e:	d114      	bne.n	800819a <vTaskStartScheduler+0x5e>
 8008170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008174:	f383 8811 	msr	BASEPRI, r3
 8008178:	f3bf 8f6f 	isb	sy
 800817c:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8008180:	4b0e      	ldr	r3, [pc, #56]	@ (80081bc <vTaskStartScheduler+0x80>)
 8008182:	f04f 32ff 	mov.w	r2, #4294967295
 8008186:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008188:	4b0d      	ldr	r3, [pc, #52]	@ (80081c0 <vTaskStartScheduler+0x84>)
 800818a:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800818c:	4b0d      	ldr	r3, [pc, #52]	@ (80081c4 <vTaskStartScheduler+0x88>)
 800818e:	601c      	str	r4, [r3, #0]
}
 8008190:	b008      	add	sp, #32
 8008192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8008196:	f7ff b84d 	b.w	8007234 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800819a:	3001      	adds	r0, #1
 800819c:	d108      	bne.n	80081b0 <vTaskStartScheduler+0x74>
 800819e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081a2:	f383 8811 	msr	BASEPRI, r3
 80081a6:	f3bf 8f6f 	isb	sy
 80081aa:	f3bf 8f4f 	dsb	sy
 80081ae:	e7fe      	b.n	80081ae <vTaskStartScheduler+0x72>
}
 80081b0:	b008      	add	sp, #32
 80081b2:	bd10      	pop	{r4, pc}
 80081b4:	080158dc 	.word	0x080158dc
 80081b8:	08007f75 	.word	0x08007f75
 80081bc:	20012028 	.word	0x20012028
 80081c0:	2001203c 	.word	0x2001203c
 80081c4:	20012044 	.word	0x20012044

080081c8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80081c8:	4a02      	ldr	r2, [pc, #8]	@ (80081d4 <vTaskSuspendAll+0xc>)
 80081ca:	6813      	ldr	r3, [r2, #0]
 80081cc:	3301      	adds	r3, #1
 80081ce:	6013      	str	r3, [r2, #0]
}
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	20012024 	.word	0x20012024

080081d8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80081d8:	4b01      	ldr	r3, [pc, #4]	@ (80081e0 <xTaskGetTickCount+0x8>)
 80081da:	6818      	ldr	r0, [r3, #0]
}
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	20012044 	.word	0x20012044

080081e4 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081e4:	4b3f      	ldr	r3, [pc, #252]	@ (80082e4 <xTaskIncrementTick+0x100>)
 80081e6:	681b      	ldr	r3, [r3, #0]
{
 80081e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d172      	bne.n	80082d6 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80081f0:	4b3d      	ldr	r3, [pc, #244]	@ (80082e8 <xTaskIncrementTick+0x104>)
 80081f2:	681c      	ldr	r4, [r3, #0]
 80081f4:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80081f6:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80081f8:	b9bc      	cbnz	r4, 800822a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80081fa:	4b3c      	ldr	r3, [pc, #240]	@ (80082ec <xTaskIncrementTick+0x108>)
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	6812      	ldr	r2, [r2, #0]
 8008200:	b142      	cbz	r2, 8008214 <xTaskIncrementTick+0x30>
 8008202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008206:	f383 8811 	msr	BASEPRI, r3
 800820a:	f3bf 8f6f 	isb	sy
 800820e:	f3bf 8f4f 	dsb	sy
 8008212:	e7fe      	b.n	8008212 <xTaskIncrementTick+0x2e>
 8008214:	4a36      	ldr	r2, [pc, #216]	@ (80082f0 <xTaskIncrementTick+0x10c>)
 8008216:	6819      	ldr	r1, [r3, #0]
 8008218:	6810      	ldr	r0, [r2, #0]
 800821a:	6018      	str	r0, [r3, #0]
 800821c:	6011      	str	r1, [r2, #0]
 800821e:	4a35      	ldr	r2, [pc, #212]	@ (80082f4 <xTaskIncrementTick+0x110>)
 8008220:	6813      	ldr	r3, [r2, #0]
 8008222:	3301      	adds	r3, #1
 8008224:	6013      	str	r3, [r2, #0]
 8008226:	f7ff fe77 	bl	8007f18 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800822a:	4d33      	ldr	r5, [pc, #204]	@ (80082f8 <xTaskIncrementTick+0x114>)
 800822c:	4e33      	ldr	r6, [pc, #204]	@ (80082fc <xTaskIncrementTick+0x118>)
 800822e:	682b      	ldr	r3, [r5, #0]
 8008230:	4f33      	ldr	r7, [pc, #204]	@ (8008300 <xTaskIncrementTick+0x11c>)
 8008232:	429c      	cmp	r4, r3
BaseType_t xSwitchRequired = pdFALSE;
 8008234:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008238:	d212      	bcs.n	8008260 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800823a:	683a      	ldr	r2, [r7, #0]
 800823c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800823e:	2114      	movs	r1, #20
 8008240:	434a      	muls	r2, r1
 8008242:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 8008244:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 8008246:	4a2f      	ldr	r2, [pc, #188]	@ (8008304 <xTaskIncrementTick+0x120>)
 8008248:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 800824a:	bf28      	it	cs
 800824c:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 8008250:	2a00      	cmp	r2, #0
 8008252:	bf18      	it	ne
 8008254:	f04f 0b01 	movne.w	fp, #1
}
 8008258:	4658      	mov	r0, fp
 800825a:	b003      	add	sp, #12
 800825c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008260:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 80082ec <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 8008264:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 800830c <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008268:	f8d9 2000 	ldr.w	r2, [r9]
 800826c:	6812      	ldr	r2, [r2, #0]
 800826e:	b91a      	cbnz	r2, 8008278 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008270:	f04f 32ff 	mov.w	r2, #4294967295
 8008274:	602a      	str	r2, [r5, #0]
					break;
 8008276:	e7e0      	b.n	800823a <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008278:	f8d9 2000 	ldr.w	r2, [r9]
 800827c:	68d2      	ldr	r2, [r2, #12]
 800827e:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008282:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 8008286:	428c      	cmp	r4, r1
 8008288:	d201      	bcs.n	800828e <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 800828a:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800828c:	e7d5      	b.n	800823a <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800828e:	f108 0304 	add.w	r3, r8, #4
 8008292:	4618      	mov	r0, r3
 8008294:	9301      	str	r3, [sp, #4]
 8008296:	f7fe fec5 	bl	8007024 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800829a:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 800829e:	b119      	cbz	r1, 80082a8 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082a0:	f108 0018 	add.w	r0, r8, #24
 80082a4:	f7fe febe 	bl	8007024 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80082a8:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 80082ac:	f8da 1000 	ldr.w	r1, [sl]
 80082b0:	2314      	movs	r3, #20
 80082b2:	4288      	cmp	r0, r1
 80082b4:	bf88      	it	hi
 80082b6:	f8ca 0000 	strhi.w	r0, [sl]
 80082ba:	9901      	ldr	r1, [sp, #4]
 80082bc:	fb03 6000 	mla	r0, r3, r0, r6
 80082c0:	f7fe fe8e 	bl	8006fe0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082c4:	6838      	ldr	r0, [r7, #0]
 80082c6:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 80082ca:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 80082cc:	4291      	cmp	r1, r2
 80082ce:	bf28      	it	cs
 80082d0:	f04f 0b01 	movcs.w	fp, #1
 80082d4:	e7c8      	b.n	8008268 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 80082d6:	4a0c      	ldr	r2, [pc, #48]	@ (8008308 <xTaskIncrementTick+0x124>)
 80082d8:	6813      	ldr	r3, [r2, #0]
 80082da:	3301      	adds	r3, #1
 80082dc:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80082de:	f04f 0b00 	mov.w	fp, #0
 80082e2:	e7b9      	b.n	8008258 <xTaskIncrementTick+0x74>
 80082e4:	20012024 	.word	0x20012024
 80082e8:	20012044 	.word	0x20012044
 80082ec:	20012090 	.word	0x20012090
 80082f0:	2001208c 	.word	0x2001208c
 80082f4:	20012030 	.word	0x20012030
 80082f8:	20012028 	.word	0x20012028
 80082fc:	200120bc 	.word	0x200120bc
 8008300:	2001251c 	.word	0x2001251c
 8008304:	20012034 	.word	0x20012034
 8008308:	20012038 	.word	0x20012038
 800830c:	20012040 	.word	0x20012040

08008310 <xTaskResumeAll>:
{
 8008310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8008314:	4c30      	ldr	r4, [pc, #192]	@ (80083d8 <xTaskResumeAll+0xc8>)
 8008316:	6823      	ldr	r3, [r4, #0]
 8008318:	b943      	cbnz	r3, 800832c <xTaskResumeAll+0x1c>
 800831a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800831e:	f383 8811 	msr	BASEPRI, r3
 8008322:	f3bf 8f6f 	isb	sy
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	e7fe      	b.n	800832a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800832c:	f7fe fef2 	bl	8007114 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8008330:	6823      	ldr	r3, [r4, #0]
 8008332:	3b01      	subs	r3, #1
 8008334:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008336:	6824      	ldr	r4, [r4, #0]
 8008338:	b12c      	cbz	r4, 8008346 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800833a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800833c:	f7fe ff0a 	bl	8007154 <vPortExitCritical>
}
 8008340:	4620      	mov	r0, r4
 8008342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008346:	4b25      	ldr	r3, [pc, #148]	@ (80083dc <xTaskResumeAll+0xcc>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d0f5      	beq.n	800833a <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800834e:	4d24      	ldr	r5, [pc, #144]	@ (80083e0 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 8008350:	4e24      	ldr	r6, [pc, #144]	@ (80083e4 <xTaskResumeAll+0xd4>)
 8008352:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 80083f4 <xTaskResumeAll+0xe4>
 8008356:	e01d      	b.n	8008394 <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008358:	68eb      	ldr	r3, [r5, #12]
 800835a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800835c:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800835e:	f104 0018 	add.w	r0, r4, #24
 8008362:	f7fe fe5f 	bl	8007024 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008366:	4638      	mov	r0, r7
 8008368:	f7fe fe5c 	bl	8007024 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800836c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800836e:	6832      	ldr	r2, [r6, #0]
 8008370:	2014      	movs	r0, #20
 8008372:	4293      	cmp	r3, r2
 8008374:	fb00 8003 	mla	r0, r0, r3, r8
 8008378:	4639      	mov	r1, r7
 800837a:	bf88      	it	hi
 800837c:	6033      	strhi	r3, [r6, #0]
 800837e:	f7fe fe2f 	bl	8006fe0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008382:	4b19      	ldr	r3, [pc, #100]	@ (80083e8 <xTaskResumeAll+0xd8>)
 8008384:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800838a:	429a      	cmp	r2, r3
 800838c:	d302      	bcc.n	8008394 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 800838e:	4b17      	ldr	r3, [pc, #92]	@ (80083ec <xTaskResumeAll+0xdc>)
 8008390:	2201      	movs	r2, #1
 8008392:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008394:	682b      	ldr	r3, [r5, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1de      	bne.n	8008358 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800839a:	b10c      	cbz	r4, 80083a0 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 800839c:	f7ff fdbc 	bl	8007f18 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80083a0:	4d13      	ldr	r5, [pc, #76]	@ (80083f0 <xTaskResumeAll+0xe0>)
 80083a2:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 80083a4:	b144      	cbz	r4, 80083b8 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 80083a6:	4e11      	ldr	r6, [pc, #68]	@ (80083ec <xTaskResumeAll+0xdc>)
 80083a8:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80083aa:	f7ff ff1b 	bl	80081e4 <xTaskIncrementTick>
 80083ae:	b100      	cbz	r0, 80083b2 <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 80083b0:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80083b2:	3c01      	subs	r4, #1
 80083b4:	d1f9      	bne.n	80083aa <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 80083b6:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80083b8:	4b0c      	ldr	r3, [pc, #48]	@ (80083ec <xTaskResumeAll+0xdc>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d0bc      	beq.n	800833a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80083c0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80083c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083c8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80083cc:	f3bf 8f4f 	dsb	sy
 80083d0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80083d4:	2401      	movs	r4, #1
 80083d6:	e7b1      	b.n	800833c <xTaskResumeAll+0x2c>
 80083d8:	20012024 	.word	0x20012024
 80083dc:	20012048 	.word	0x20012048
 80083e0:	20012078 	.word	0x20012078
 80083e4:	20012040 	.word	0x20012040
 80083e8:	2001251c 	.word	0x2001251c
 80083ec:	20012034 	.word	0x20012034
 80083f0:	20012038 	.word	0x20012038
 80083f4:	200120bc 	.word	0x200120bc

080083f8 <vTaskDelay>:
	{
 80083f8:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80083fa:	b950      	cbnz	r0, 8008412 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 80083fc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008400:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008404:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008408:	f3bf 8f4f 	dsb	sy
 800840c:	f3bf 8f6f 	isb	sy
	}
 8008410:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8008412:	4b0a      	ldr	r3, [pc, #40]	@ (800843c <vTaskDelay+0x44>)
 8008414:	6819      	ldr	r1, [r3, #0]
 8008416:	b141      	cbz	r1, 800842a <vTaskDelay+0x32>
 8008418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800841c:	f383 8811 	msr	BASEPRI, r3
 8008420:	f3bf 8f6f 	isb	sy
 8008424:	f3bf 8f4f 	dsb	sy
 8008428:	e7fe      	b.n	8008428 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800842a:	f7ff fecd 	bl	80081c8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800842e:	f7ff fd3b 	bl	8007ea8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8008432:	f7ff ff6d 	bl	8008310 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8008436:	2800      	cmp	r0, #0
 8008438:	d0e0      	beq.n	80083fc <vTaskDelay+0x4>
 800843a:	e7e9      	b.n	8008410 <vTaskDelay+0x18>
 800843c:	20012024 	.word	0x20012024

08008440 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008440:	4b17      	ldr	r3, [pc, #92]	@ (80084a0 <vTaskSwitchContext+0x60>)
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	4b17      	ldr	r3, [pc, #92]	@ (80084a4 <vTaskSwitchContext+0x64>)
{
 8008446:	b570      	push	{r4, r5, r6, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008448:	b112      	cbz	r2, 8008450 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800844a:	2201      	movs	r2, #1
 800844c:	601a      	str	r2, [r3, #0]
}
 800844e:	bd70      	pop	{r4, r5, r6, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008450:	4d15      	ldr	r5, [pc, #84]	@ (80084a8 <vTaskSwitchContext+0x68>)
		xYieldPending = pdFALSE;
 8008452:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008454:	682a      	ldr	r2, [r5, #0]
 8008456:	4915      	ldr	r1, [pc, #84]	@ (80084ac <vTaskSwitchContext+0x6c>)
 8008458:	2614      	movs	r6, #20
 800845a:	fb06 f302 	mul.w	r3, r6, r2
 800845e:	18c8      	adds	r0, r1, r3
 8008460:	58cc      	ldr	r4, [r1, r3]
 8008462:	b18c      	cbz	r4, 8008488 <vTaskSwitchContext+0x48>
 8008464:	6844      	ldr	r4, [r0, #4]
 8008466:	3308      	adds	r3, #8
 8008468:	6864      	ldr	r4, [r4, #4]
 800846a:	6044      	str	r4, [r0, #4]
 800846c:	440b      	add	r3, r1
 800846e:	429c      	cmp	r4, r3
 8008470:	bf04      	itt	eq
 8008472:	6863      	ldreq	r3, [r4, #4]
 8008474:	6043      	streq	r3, [r0, #4]
 8008476:	2314      	movs	r3, #20
 8008478:	fb03 1102 	mla	r1, r3, r2, r1
 800847c:	684b      	ldr	r3, [r1, #4]
 800847e:	68d9      	ldr	r1, [r3, #12]
 8008480:	4b0b      	ldr	r3, [pc, #44]	@ (80084b0 <vTaskSwitchContext+0x70>)
 8008482:	6019      	str	r1, [r3, #0]
 8008484:	602a      	str	r2, [r5, #0]
}
 8008486:	e7e2      	b.n	800844e <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008488:	b942      	cbnz	r2, 800849c <vTaskSwitchContext+0x5c>
 800848a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800848e:	f383 8811 	msr	BASEPRI, r3
 8008492:	f3bf 8f6f 	isb	sy
 8008496:	f3bf 8f4f 	dsb	sy
 800849a:	e7fe      	b.n	800849a <vTaskSwitchContext+0x5a>
 800849c:	3a01      	subs	r2, #1
 800849e:	e7dc      	b.n	800845a <vTaskSwitchContext+0x1a>
 80084a0:	20012024 	.word	0x20012024
 80084a4:	20012034 	.word	0x20012034
 80084a8:	20012040 	.word	0x20012040
 80084ac:	200120bc 	.word	0x200120bc
 80084b0:	2001251c 	.word	0x2001251c

080084b4 <vTaskPlaceOnEventList>:
{
 80084b4:	b510      	push	{r4, lr}
 80084b6:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80084b8:	b940      	cbnz	r0, 80084cc <vTaskPlaceOnEventList+0x18>
 80084ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084be:	f383 8811 	msr	BASEPRI, r3
 80084c2:	f3bf 8f6f 	isb	sy
 80084c6:	f3bf 8f4f 	dsb	sy
 80084ca:	e7fe      	b.n	80084ca <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80084cc:	4b05      	ldr	r3, [pc, #20]	@ (80084e4 <vTaskPlaceOnEventList+0x30>)
 80084ce:	6819      	ldr	r1, [r3, #0]
 80084d0:	3118      	adds	r1, #24
 80084d2:	f7fe fd90 	bl	8006ff6 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80084d6:	4620      	mov	r0, r4
 80084d8:	2101      	movs	r1, #1
}
 80084da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80084de:	f7ff bce3 	b.w	8007ea8 <prvAddCurrentTaskToDelayedList>
 80084e2:	bf00      	nop
 80084e4:	2001251c 	.word	0x2001251c

080084e8 <vTaskPlaceOnEventListRestricted>:
	{
 80084e8:	b538      	push	{r3, r4, r5, lr}
 80084ea:	460d      	mov	r5, r1
 80084ec:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 80084ee:	b940      	cbnz	r0, 8008502 <vTaskPlaceOnEventListRestricted+0x1a>
 80084f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084f4:	f383 8811 	msr	BASEPRI, r3
 80084f8:	f3bf 8f6f 	isb	sy
 80084fc:	f3bf 8f4f 	dsb	sy
 8008500:	e7fe      	b.n	8008500 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008502:	4b07      	ldr	r3, [pc, #28]	@ (8008520 <vTaskPlaceOnEventListRestricted+0x38>)
 8008504:	6819      	ldr	r1, [r3, #0]
 8008506:	3118      	adds	r1, #24
 8008508:	f7fe fd6a 	bl	8006fe0 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800850c:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800850e:	4621      	mov	r1, r4
 8008510:	bf0c      	ite	eq
 8008512:	4628      	moveq	r0, r5
 8008514:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8008518:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800851c:	f7ff bcc4 	b.w	8007ea8 <prvAddCurrentTaskToDelayedList>
 8008520:	2001251c 	.word	0x2001251c

08008524 <xTaskRemoveFromEventList>:
{
 8008524:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008526:	68c3      	ldr	r3, [r0, #12]
 8008528:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800852a:	b944      	cbnz	r4, 800853e <xTaskRemoveFromEventList+0x1a>
 800852c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008530:	f383 8811 	msr	BASEPRI, r3
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	e7fe      	b.n	800853c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800853e:	f104 0518 	add.w	r5, r4, #24
 8008542:	4628      	mov	r0, r5
 8008544:	f7fe fd6e 	bl	8007024 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008548:	4b10      	ldr	r3, [pc, #64]	@ (800858c <xTaskRemoveFromEventList+0x68>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	b9db      	cbnz	r3, 8008586 <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800854e:	1d25      	adds	r5, r4, #4
 8008550:	4628      	mov	r0, r5
 8008552:	f7fe fd67 	bl	8007024 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008556:	4a0e      	ldr	r2, [pc, #56]	@ (8008590 <xTaskRemoveFromEventList+0x6c>)
 8008558:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800855a:	6811      	ldr	r1, [r2, #0]
 800855c:	428b      	cmp	r3, r1
 800855e:	bf88      	it	hi
 8008560:	6013      	strhi	r3, [r2, #0]
 8008562:	4a0c      	ldr	r2, [pc, #48]	@ (8008594 <xTaskRemoveFromEventList+0x70>)
 8008564:	2014      	movs	r0, #20
 8008566:	4629      	mov	r1, r5
 8008568:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800856c:	f7fe fd38 	bl	8006fe0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008570:	4b09      	ldr	r3, [pc, #36]	@ (8008598 <xTaskRemoveFromEventList+0x74>)
 8008572:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008578:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800857a:	bf83      	ittte	hi
 800857c:	4b07      	ldrhi	r3, [pc, #28]	@ (800859c <xTaskRemoveFromEventList+0x78>)
 800857e:	2001      	movhi	r0, #1
 8008580:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8008582:	2000      	movls	r0, #0
}
 8008584:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008586:	4806      	ldr	r0, [pc, #24]	@ (80085a0 <xTaskRemoveFromEventList+0x7c>)
 8008588:	4629      	mov	r1, r5
 800858a:	e7ef      	b.n	800856c <xTaskRemoveFromEventList+0x48>
 800858c:	20012024 	.word	0x20012024
 8008590:	20012040 	.word	0x20012040
 8008594:	200120bc 	.word	0x200120bc
 8008598:	2001251c 	.word	0x2001251c
 800859c:	20012034 	.word	0x20012034
 80085a0:	20012078 	.word	0x20012078

080085a4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80085a4:	4b03      	ldr	r3, [pc, #12]	@ (80085b4 <vTaskInternalSetTimeOutState+0x10>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80085aa:	4b03      	ldr	r3, [pc, #12]	@ (80085b8 <vTaskInternalSetTimeOutState+0x14>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	6043      	str	r3, [r0, #4]
}
 80085b0:	4770      	bx	lr
 80085b2:	bf00      	nop
 80085b4:	20012030 	.word	0x20012030
 80085b8:	20012044 	.word	0x20012044

080085bc <xTaskCheckForTimeOut>:
{
 80085bc:	b570      	push	{r4, r5, r6, lr}
 80085be:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 80085c0:	4605      	mov	r5, r0
 80085c2:	b940      	cbnz	r0, 80085d6 <xTaskCheckForTimeOut+0x1a>
 80085c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c8:	f383 8811 	msr	BASEPRI, r3
 80085cc:	f3bf 8f6f 	isb	sy
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	e7fe      	b.n	80085d4 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80085d6:	b941      	cbnz	r1, 80085ea <xTaskCheckForTimeOut+0x2e>
 80085d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085dc:	f383 8811 	msr	BASEPRI, r3
 80085e0:	f3bf 8f6f 	isb	sy
 80085e4:	f3bf 8f4f 	dsb	sy
 80085e8:	e7fe      	b.n	80085e8 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80085ea:	f7fe fd93 	bl	8007114 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80085ee:	4b0f      	ldr	r3, [pc, #60]	@ (800862c <xTaskCheckForTimeOut+0x70>)
 80085f0:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80085f2:	6823      	ldr	r3, [r4, #0]
 80085f4:	1c5a      	adds	r2, r3, #1
 80085f6:	d010      	beq.n	800861a <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80085f8:	480d      	ldr	r0, [pc, #52]	@ (8008630 <xTaskCheckForTimeOut+0x74>)
 80085fa:	682e      	ldr	r6, [r5, #0]
 80085fc:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80085fe:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008600:	4286      	cmp	r6, r0
 8008602:	d001      	beq.n	8008608 <xTaskCheckForTimeOut+0x4c>
 8008604:	428a      	cmp	r2, r1
 8008606:	d90f      	bls.n	8008628 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008608:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800860a:	4283      	cmp	r3, r0
 800860c:	d90a      	bls.n	8008624 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800860e:	1a5b      	subs	r3, r3, r1
 8008610:	4413      	add	r3, r2
 8008612:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008614:	4628      	mov	r0, r5
 8008616:	f7ff ffc5 	bl	80085a4 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800861a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800861c:	f7fe fd9a 	bl	8007154 <vPortExitCritical>
}
 8008620:	4620      	mov	r0, r4
 8008622:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8008624:	2300      	movs	r3, #0
 8008626:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8008628:	2401      	movs	r4, #1
 800862a:	e7f7      	b.n	800861c <xTaskCheckForTimeOut+0x60>
 800862c:	20012044 	.word	0x20012044
 8008630:	20012030 	.word	0x20012030

08008634 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8008634:	4b01      	ldr	r3, [pc, #4]	@ (800863c <vTaskMissedYield+0x8>)
 8008636:	2201      	movs	r2, #1
 8008638:	601a      	str	r2, [r3, #0]
}
 800863a:	4770      	bx	lr
 800863c:	20012034 	.word	0x20012034

08008640 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8008640:	4b05      	ldr	r3, [pc, #20]	@ (8008658 <xTaskGetSchedulerState+0x18>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	b133      	cbz	r3, 8008654 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008646:	4b05      	ldr	r3, [pc, #20]	@ (800865c <xTaskGetSchedulerState+0x1c>)
 8008648:	6818      	ldr	r0, [r3, #0]
 800864a:	fab0 f080 	clz	r0, r0
 800864e:	0940      	lsrs	r0, r0, #5
 8008650:	0040      	lsls	r0, r0, #1
 8008652:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008654:	2001      	movs	r0, #1
	}
 8008656:	4770      	bx	lr
 8008658:	2001203c 	.word	0x2001203c
 800865c:	20012024 	.word	0x20012024

08008660 <xTaskPriorityInherit>:
	{
 8008660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8008662:	4604      	mov	r4, r0
 8008664:	b338      	cbz	r0, 80086b6 <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008666:	4d1a      	ldr	r5, [pc, #104]	@ (80086d0 <xTaskPriorityInherit+0x70>)
 8008668:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800866a:	682a      	ldr	r2, [r5, #0]
 800866c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800866e:	4293      	cmp	r3, r2
 8008670:	d226      	bcs.n	80086c0 <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008672:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008674:	4e17      	ldr	r6, [pc, #92]	@ (80086d4 <xTaskPriorityInherit+0x74>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008676:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008678:	bfa1      	itttt	ge
 800867a:	682a      	ldrge	r2, [r5, #0]
 800867c:	6ad2      	ldrge	r2, [r2, #44]	@ 0x2c
 800867e:	f1c2 0238 	rsbge	r2, r2, #56	@ 0x38
 8008682:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008684:	2214      	movs	r2, #20
 8008686:	fb02 6303 	mla	r3, r2, r3, r6
 800868a:	6942      	ldr	r2, [r0, #20]
 800868c:	429a      	cmp	r2, r3
 800868e:	d113      	bne.n	80086b8 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008690:	1d07      	adds	r7, r0, #4
 8008692:	4638      	mov	r0, r7
 8008694:	f7fe fcc6 	bl	8007024 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008698:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800869a:	4a0f      	ldr	r2, [pc, #60]	@ (80086d8 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800869c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800869e:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80086a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80086a2:	2014      	movs	r0, #20
 80086a4:	428b      	cmp	r3, r1
 80086a6:	fb00 6003 	mla	r0, r0, r3, r6
 80086aa:	4639      	mov	r1, r7
 80086ac:	bf88      	it	hi
 80086ae:	6013      	strhi	r3, [r2, #0]
 80086b0:	f7fe fc96 	bl	8006fe0 <vListInsertEnd>
				xReturn = pdTRUE;
 80086b4:	2001      	movs	r0, #1
	}
 80086b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80086b8:	682b      	ldr	r3, [r5, #0]
 80086ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086bc:	62c3      	str	r3, [r0, #44]	@ 0x2c
 80086be:	e7f9      	b.n	80086b4 <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80086c0:	682b      	ldr	r3, [r5, #0]
 80086c2:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 80086c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086c6:	4298      	cmp	r0, r3
 80086c8:	bf2c      	ite	cs
 80086ca:	2000      	movcs	r0, #0
 80086cc:	2001      	movcc	r0, #1
 80086ce:	e7f2      	b.n	80086b6 <xTaskPriorityInherit+0x56>
 80086d0:	2001251c 	.word	0x2001251c
 80086d4:	200120bc 	.word	0x200120bc
 80086d8:	20012040 	.word	0x20012040

080086dc <xTaskPriorityDisinherit>:
	{
 80086dc:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 80086de:	b908      	cbnz	r0, 80086e4 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 80086e0:	2000      	movs	r0, #0
	}
 80086e2:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80086e4:	4b1b      	ldr	r3, [pc, #108]	@ (8008754 <xTaskPriorityDisinherit+0x78>)
 80086e6:	681c      	ldr	r4, [r3, #0]
 80086e8:	4284      	cmp	r4, r0
 80086ea:	d008      	beq.n	80086fe <xTaskPriorityDisinherit+0x22>
 80086ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f0:	f383 8811 	msr	BASEPRI, r3
 80086f4:	f3bf 8f6f 	isb	sy
 80086f8:	f3bf 8f4f 	dsb	sy
 80086fc:	e7fe      	b.n	80086fc <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 80086fe:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8008700:	b943      	cbnz	r3, 8008714 <xTaskPriorityDisinherit+0x38>
 8008702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008706:	f383 8811 	msr	BASEPRI, r3
 800870a:	f3bf 8f6f 	isb	sy
 800870e:	f3bf 8f4f 	dsb	sy
 8008712:	e7fe      	b.n	8008712 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008714:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008716:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 8008718:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800871a:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800871c:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800871e:	d0df      	beq.n	80086e0 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008720:	2b00      	cmp	r3, #0
 8008722:	d1dd      	bne.n	80086e0 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008724:	1d25      	adds	r5, r4, #4
 8008726:	4628      	mov	r0, r5
 8008728:	f7fe fc7c 	bl	8007024 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800872c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800872e:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008730:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008734:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8008736:	4a08      	ldr	r2, [pc, #32]	@ (8008758 <xTaskPriorityDisinherit+0x7c>)
 8008738:	6811      	ldr	r1, [r2, #0]
 800873a:	428b      	cmp	r3, r1
 800873c:	bf88      	it	hi
 800873e:	6013      	strhi	r3, [r2, #0]
 8008740:	4a06      	ldr	r2, [pc, #24]	@ (800875c <xTaskPriorityDisinherit+0x80>)
 8008742:	2014      	movs	r0, #20
 8008744:	fb00 2003 	mla	r0, r0, r3, r2
 8008748:	4629      	mov	r1, r5
 800874a:	f7fe fc49 	bl	8006fe0 <vListInsertEnd>
					xReturn = pdTRUE;
 800874e:	2001      	movs	r0, #1
		return xReturn;
 8008750:	e7c7      	b.n	80086e2 <xTaskPriorityDisinherit+0x6>
 8008752:	bf00      	nop
 8008754:	2001251c 	.word	0x2001251c
 8008758:	20012040 	.word	0x20012040
 800875c:	200120bc 	.word	0x200120bc

08008760 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8008760:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8008762:	4604      	mov	r4, r0
 8008764:	2800      	cmp	r0, #0
 8008766:	d041      	beq.n	80087ec <vTaskPriorityDisinheritAfterTimeout+0x8c>
			configASSERT( pxTCB->uxMutexesHeld );
 8008768:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800876a:	b942      	cbnz	r2, 800877e <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800876c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008770:	f383 8811 	msr	BASEPRI, r3
 8008774:	f3bf 8f6f 	isb	sy
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	e7fe      	b.n	800877c <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800877e:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8008780:	4299      	cmp	r1, r3
 8008782:	bf38      	it	cc
 8008784:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008786:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8008788:	428b      	cmp	r3, r1
 800878a:	d02f      	beq.n	80087ec <vTaskPriorityDisinheritAfterTimeout+0x8c>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800878c:	2a01      	cmp	r2, #1
 800878e:	d12d      	bne.n	80087ec <vTaskPriorityDisinheritAfterTimeout+0x8c>
					configASSERT( pxTCB != pxCurrentTCB );
 8008790:	4a17      	ldr	r2, [pc, #92]	@ (80087f0 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 8008792:	6812      	ldr	r2, [r2, #0]
 8008794:	4282      	cmp	r2, r0
 8008796:	d108      	bne.n	80087aa <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8008798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800879c:	f383 8811 	msr	BASEPRI, r3
 80087a0:	f3bf 8f6f 	isb	sy
 80087a4:	f3bf 8f4f 	dsb	sy
 80087a8:	e7fe      	b.n	80087a8 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80087aa:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80087ac:	4d11      	ldr	r5, [pc, #68]	@ (80087f4 <vTaskPriorityDisinheritAfterTimeout+0x94>)
					pxTCB->uxPriority = uxPriorityToUse;
 80087ae:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80087b0:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80087b2:	f04f 0214 	mov.w	r2, #20
 80087b6:	fb02 5303 	mla	r3, r2, r3, r5
 80087ba:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087bc:	bfa4      	itt	ge
 80087be:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
 80087c2:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d111      	bne.n	80087ec <vTaskPriorityDisinheritAfterTimeout+0x8c>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087c8:	1d06      	adds	r6, r0, #4
 80087ca:	4630      	mov	r0, r6
 80087cc:	f7fe fc2a 	bl	8007024 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 80087d0:	4a09      	ldr	r2, [pc, #36]	@ (80087f8 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 80087d2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80087d4:	6811      	ldr	r1, [r2, #0]
 80087d6:	2014      	movs	r0, #20
 80087d8:	428b      	cmp	r3, r1
 80087da:	fb00 5003 	mla	r0, r0, r3, r5
 80087de:	4631      	mov	r1, r6
	}
 80087e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 80087e4:	bf88      	it	hi
 80087e6:	6013      	strhi	r3, [r2, #0]
 80087e8:	f7fe bbfa 	b.w	8006fe0 <vListInsertEnd>
	}
 80087ec:	bd70      	pop	{r4, r5, r6, pc}
 80087ee:	bf00      	nop
 80087f0:	2001251c 	.word	0x2001251c
 80087f4:	200120bc 	.word	0x200120bc
 80087f8:	20012040 	.word	0x20012040

080087fc <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80087fc:	4b04      	ldr	r3, [pc, #16]	@ (8008810 <pvTaskIncrementMutexHeldCount+0x14>)
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	b11a      	cbz	r2, 800880a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8008802:	6819      	ldr	r1, [r3, #0]
 8008804:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 8008806:	3201      	adds	r2, #1
 8008808:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 800880a:	6818      	ldr	r0, [r3, #0]
	}
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop
 8008810:	2001251c 	.word	0x2001251c

08008814 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8008814:	4291      	cmp	r1, r2
{
 8008816:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008818:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800881a:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800881c:	d80a      	bhi.n	8008834 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800881e:	1ad2      	subs	r2, r2, r3
 8008820:	6983      	ldr	r3, [r0, #24]
 8008822:	429a      	cmp	r2, r3
 8008824:	d20d      	bcs.n	8008842 <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008826:	4b08      	ldr	r3, [pc, #32]	@ (8008848 <prvInsertTimerInActiveList+0x34>)
 8008828:	1d01      	adds	r1, r0, #4
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800882a:	6818      	ldr	r0, [r3, #0]
 800882c:	f7fe fbe3 	bl	8006ff6 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8008830:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 8008832:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008834:	429a      	cmp	r2, r3
 8008836:	d201      	bcs.n	800883c <prvInsertTimerInActiveList+0x28>
 8008838:	4299      	cmp	r1, r3
 800883a:	d202      	bcs.n	8008842 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800883c:	4b03      	ldr	r3, [pc, #12]	@ (800884c <prvInsertTimerInActiveList+0x38>)
 800883e:	1d01      	adds	r1, r0, #4
 8008840:	e7f3      	b.n	800882a <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8008842:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8008844:	e7f5      	b.n	8008832 <prvInsertTimerInActiveList+0x1e>
 8008846:	bf00      	nop
 8008848:	2001261c 	.word	0x2001261c
 800884c:	20012620 	.word	0x20012620

08008850 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008850:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8008852:	4c11      	ldr	r4, [pc, #68]	@ (8008898 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8008854:	f7fe fc5e 	bl	8007114 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8008858:	6825      	ldr	r5, [r4, #0]
 800885a:	b9bd      	cbnz	r5, 800888c <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800885c:	4f0f      	ldr	r7, [pc, #60]	@ (800889c <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800885e:	4e10      	ldr	r6, [pc, #64]	@ (80088a0 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8008860:	4638      	mov	r0, r7
 8008862:	f7fe fbaf 	bl	8006fc4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008866:	4630      	mov	r0, r6
 8008868:	f7fe fbac 	bl	8006fc4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800886c:	4b0d      	ldr	r3, [pc, #52]	@ (80088a4 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800886e:	4a0e      	ldr	r2, [pc, #56]	@ (80088a8 <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 8008870:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008872:	4b0e      	ldr	r3, [pc, #56]	@ (80088ac <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008874:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 8008876:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008878:	200a      	movs	r0, #10
 800887a:	4b0d      	ldr	r3, [pc, #52]	@ (80088b0 <prvCheckForValidListAndQueue+0x60>)
 800887c:	9500      	str	r5, [sp, #0]
 800887e:	f7fe fe54 	bl	800752a <xQueueGenericCreateStatic>
 8008882:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008884:	b110      	cbz	r0, 800888c <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008886:	490b      	ldr	r1, [pc, #44]	@ (80088b4 <prvCheckForValidListAndQueue+0x64>)
 8008888:	f7ff fa2c 	bl	8007ce4 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800888c:	b003      	add	sp, #12
 800888e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8008892:	f7fe bc5f 	b.w	8007154 <vPortExitCritical>
 8008896:	bf00      	nop
 8008898:	20012618 	.word	0x20012618
 800889c:	20012638 	.word	0x20012638
 80088a0:	20012624 	.word	0x20012624
 80088a4:	20012620 	.word	0x20012620
 80088a8:	20012570 	.word	0x20012570
 80088ac:	2001261c 	.word	0x2001261c
 80088b0:	20012520 	.word	0x20012520
 80088b4:	080158e1 	.word	0x080158e1

080088b8 <xTimerCreateTimerTask>:
{
 80088b8:	b510      	push	{r4, lr}
 80088ba:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 80088bc:	f7ff ffc8 	bl	8008850 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80088c0:	4b12      	ldr	r3, [pc, #72]	@ (800890c <xTimerCreateTimerTask+0x54>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	b1b3      	cbz	r3, 80088f4 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80088c6:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80088c8:	aa07      	add	r2, sp, #28
 80088ca:	a906      	add	r1, sp, #24
 80088cc:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80088ce:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80088d2:	f7fe fa6f 	bl	8006db4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80088d6:	9b05      	ldr	r3, [sp, #20]
 80088d8:	9302      	str	r3, [sp, #8]
 80088da:	9b06      	ldr	r3, [sp, #24]
 80088dc:	9301      	str	r3, [sp, #4]
 80088de:	2302      	movs	r3, #2
 80088e0:	9300      	str	r3, [sp, #0]
 80088e2:	9a07      	ldr	r2, [sp, #28]
 80088e4:	490a      	ldr	r1, [pc, #40]	@ (8008910 <xTimerCreateTimerTask+0x58>)
 80088e6:	480b      	ldr	r0, [pc, #44]	@ (8008914 <xTimerCreateTimerTask+0x5c>)
 80088e8:	4623      	mov	r3, r4
 80088ea:	f7ff fbc0 	bl	800806e <xTaskCreateStatic>
 80088ee:	4b0a      	ldr	r3, [pc, #40]	@ (8008918 <xTimerCreateTimerTask+0x60>)
 80088f0:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80088f2:	b940      	cbnz	r0, 8008906 <xTimerCreateTimerTask+0x4e>
 80088f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f8:	f383 8811 	msr	BASEPRI, r3
 80088fc:	f3bf 8f6f 	isb	sy
 8008900:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8008904:	e7fe      	b.n	8008904 <xTimerCreateTimerTask+0x4c>
}
 8008906:	2001      	movs	r0, #1
 8008908:	b008      	add	sp, #32
 800890a:	bd10      	pop	{r4, pc}
 800890c:	20012618 	.word	0x20012618
 8008910:	080158e6 	.word	0x080158e6
 8008914:	08008a19 	.word	0x08008a19
 8008918:	20012614 	.word	0x20012614

0800891c <xTimerGenericCommand>:
{
 800891c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800891e:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8008920:	4604      	mov	r4, r0
{
 8008922:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8008924:	b940      	cbnz	r0, 8008938 <xTimerGenericCommand+0x1c>
 8008926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800892a:	f383 8811 	msr	BASEPRI, r3
 800892e:	f3bf 8f6f 	isb	sy
 8008932:	f3bf 8f4f 	dsb	sy
 8008936:	e7fe      	b.n	8008936 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8008938:	4d0d      	ldr	r5, [pc, #52]	@ (8008970 <xTimerGenericCommand+0x54>)
 800893a:	6828      	ldr	r0, [r5, #0]
 800893c:	b180      	cbz	r0, 8008960 <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800893e:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008940:	e9cd 1600 	strd	r1, r6, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008944:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008946:	dc0d      	bgt.n	8008964 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008948:	f7ff fe7a 	bl	8008640 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800894c:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800894e:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008950:	bf08      	it	eq
 8008952:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008954:	6828      	ldr	r0, [r5, #0]
 8008956:	bf18      	it	ne
 8008958:	461a      	movne	r2, r3
 800895a:	4669      	mov	r1, sp
 800895c:	f7fe fe9a 	bl	8007694 <xQueueGenericSend>
}
 8008960:	b004      	add	sp, #16
 8008962:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008964:	2300      	movs	r3, #0
 8008966:	4669      	mov	r1, sp
 8008968:	f7fe ff46 	bl	80077f8 <xQueueGenericSendFromISR>
 800896c:	e7f8      	b.n	8008960 <xTimerGenericCommand+0x44>
 800896e:	bf00      	nop
 8008970:	20012618 	.word	0x20012618

08008974 <prvSampleTimeNow>:
{
 8008974:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 8008978:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8008a14 <prvSampleTimeNow+0xa0>
{
 800897c:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800897e:	f7ff fc2b 	bl	80081d8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8008982:	f8d8 3000 	ldr.w	r3, [r8]
 8008986:	4283      	cmp	r3, r0
	xTimeNow = xTaskGetTickCount();
 8008988:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800898a:	d909      	bls.n	80089a0 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800898c:	4f1f      	ldr	r7, [pc, #124]	@ (8008a0c <prvSampleTimeNow+0x98>)
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	b96a      	cbnz	r2, 80089b0 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8008994:	4a1e      	ldr	r2, [pc, #120]	@ (8008a10 <prvSampleTimeNow+0x9c>)
 8008996:	6811      	ldr	r1, [r2, #0]
 8008998:	6039      	str	r1, [r7, #0]
	pxOverflowTimerList = pxTemp;
 800899a:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800899c:	2301      	movs	r3, #1
 800899e:	e000      	b.n	80089a2 <prvSampleTimeNow+0x2e>
 80089a0:	2300      	movs	r3, #0
}
 80089a2:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 80089a4:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 80089a6:	f8c8 5000 	str.w	r5, [r8]
}
 80089aa:	b002      	add	sp, #8
 80089ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089b0:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089b2:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089b4:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80089b8:	f104 0a04 	add.w	sl, r4, #4
 80089bc:	4650      	mov	r0, sl
 80089be:	f7fe fb31 	bl	8007024 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089c2:	6a23      	ldr	r3, [r4, #32]
 80089c4:	4620      	mov	r0, r4
 80089c6:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80089c8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80089cc:	075b      	lsls	r3, r3, #29
 80089ce:	d5de      	bpl.n	800898e <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80089d0:	69a3      	ldr	r3, [r4, #24]
 80089d2:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 80089d4:	4599      	cmp	r9, r3
 80089d6:	d206      	bcs.n	80089e6 <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80089d8:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80089da:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80089dc:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80089de:	4651      	mov	r1, sl
 80089e0:	f7fe fb09 	bl	8006ff6 <vListInsert>
 80089e4:	e7d3      	b.n	800898e <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80089e6:	2300      	movs	r3, #0
 80089e8:	9300      	str	r3, [sp, #0]
 80089ea:	464a      	mov	r2, r9
 80089ec:	4619      	mov	r1, r3
 80089ee:	4620      	mov	r0, r4
 80089f0:	f7ff ff94 	bl	800891c <xTimerGenericCommand>
				configASSERT( xResult );
 80089f4:	2800      	cmp	r0, #0
 80089f6:	d1ca      	bne.n	800898e <prvSampleTimeNow+0x1a>
 80089f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089fc:	f383 8811 	msr	BASEPRI, r3
 8008a00:	f3bf 8f6f 	isb	sy
 8008a04:	f3bf 8f4f 	dsb	sy
 8008a08:	e7fe      	b.n	8008a08 <prvSampleTimeNow+0x94>
 8008a0a:	bf00      	nop
 8008a0c:	20012620 	.word	0x20012620
 8008a10:	2001261c 	.word	0x2001261c
 8008a14:	20012610 	.word	0x20012610

08008a18 <prvTimerTask>:
{
 8008a18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008a1c:	4d6e      	ldr	r5, [pc, #440]	@ (8008bd8 <prvTimerTask+0x1c0>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008a1e:	4e6f      	ldr	r6, [pc, #444]	@ (8008bdc <prvTimerTask+0x1c4>)
{
 8008a20:	b089      	sub	sp, #36	@ 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008a22:	682b      	ldr	r3, [r5, #0]
 8008a24:	f8d3 8000 	ldr.w	r8, [r3]
 8008a28:	f1b8 0f00 	cmp.w	r8, #0
 8008a2c:	d035      	beq.n	8008a9a <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	f8d3 8000 	ldr.w	r8, [r3]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008a34:	2400      	movs	r4, #0
	vTaskSuspendAll();
 8008a36:	f7ff fbc7 	bl	80081c8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008a3a:	a804      	add	r0, sp, #16
 8008a3c:	f7ff ff9a 	bl	8008974 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8008a40:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008a42:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d169      	bne.n	8008b1c <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008a48:	2c00      	cmp	r4, #0
 8008a4a:	d14c      	bne.n	8008ae6 <prvTimerTask+0xce>
 8008a4c:	4540      	cmp	r0, r8
 8008a4e:	d350      	bcc.n	8008af2 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 8008a50:	f7ff fc5e 	bl	8008310 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a54:	682b      	ldr	r3, [r5, #0]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a5a:	1d38      	adds	r0, r7, #4
 8008a5c:	f7fe fae2 	bl	8007024 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a60:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008a64:	0758      	lsls	r0, r3, #29
 8008a66:	d51a      	bpl.n	8008a9e <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008a68:	69b9      	ldr	r1, [r7, #24]
 8008a6a:	4643      	mov	r3, r8
 8008a6c:	464a      	mov	r2, r9
 8008a6e:	4441      	add	r1, r8
 8008a70:	4638      	mov	r0, r7
 8008a72:	f7ff fecf 	bl	8008814 <prvInsertTimerInActiveList>
 8008a76:	b1b0      	cbz	r0, 8008aa6 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a78:	9400      	str	r4, [sp, #0]
 8008a7a:	4623      	mov	r3, r4
 8008a7c:	4642      	mov	r2, r8
 8008a7e:	4621      	mov	r1, r4
 8008a80:	4638      	mov	r0, r7
 8008a82:	f7ff ff4b 	bl	800891c <xTimerGenericCommand>
			configASSERT( xResult );
 8008a86:	b970      	cbnz	r0, 8008aa6 <prvTimerTask+0x8e>
 8008a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a8c:	f383 8811 	msr	BASEPRI, r3
 8008a90:	f3bf 8f6f 	isb	sy
 8008a94:	f3bf 8f4f 	dsb	sy
 8008a98:	e7fe      	b.n	8008a98 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008a9a:	2401      	movs	r4, #1
 8008a9c:	e7cb      	b.n	8008a36 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a9e:	f023 0301 	bic.w	r3, r3, #1
 8008aa2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008aa6:	6a3b      	ldr	r3, [r7, #32]
 8008aa8:	4638      	mov	r0, r7
 8008aaa:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008aac:	6830      	ldr	r0, [r6, #0]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	a904      	add	r1, sp, #16
 8008ab2:	f7fe ff4f 	bl	8007954 <xQueueReceive>
 8008ab6:	2800      	cmp	r0, #0
 8008ab8:	d0b3      	beq.n	8008a22 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008aba:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008abc:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	db2f      	blt.n	8008b22 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008ac2:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008ac4:	6963      	ldr	r3, [r4, #20]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d132      	bne.n	8008b30 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008aca:	a803      	add	r0, sp, #12
 8008acc:	f7ff ff52 	bl	8008974 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8008ad0:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008ad2:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8008ad4:	2b09      	cmp	r3, #9
 8008ad6:	d8e9      	bhi.n	8008aac <prvTimerTask+0x94>
 8008ad8:	e8df f003 	tbb	[pc, r3]
 8008adc:	572e2e2e 	.word	0x572e2e2e
 8008ae0:	2e2e765e 	.word	0x2e2e765e
 8008ae4:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008ae6:	4b3e      	ldr	r3, [pc, #248]	@ (8008be0 <prvTimerTask+0x1c8>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	681c      	ldr	r4, [r3, #0]
 8008aec:	fab4 f484 	clz	r4, r4
 8008af0:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008af2:	6830      	ldr	r0, [r6, #0]
 8008af4:	4622      	mov	r2, r4
 8008af6:	eba8 0109 	sub.w	r1, r8, r9
 8008afa:	f7ff f932 	bl	8007d62 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008afe:	f7ff fc07 	bl	8008310 <xTaskResumeAll>
 8008b02:	2800      	cmp	r0, #0
 8008b04:	d1d2      	bne.n	8008aac <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 8008b06:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8008b0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b0e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8008b12:	f3bf 8f4f 	dsb	sy
 8008b16:	f3bf 8f6f 	isb	sy
 8008b1a:	e7c7      	b.n	8008aac <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 8008b1c:	f7ff fbf8 	bl	8008310 <xTaskResumeAll>
}
 8008b20:	e7c4      	b.n	8008aac <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008b22:	9b05      	ldr	r3, [sp, #20]
 8008b24:	9907      	ldr	r1, [sp, #28]
 8008b26:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008b28:	9b04      	ldr	r3, [sp, #16]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	dbbe      	blt.n	8008aac <prvTimerTask+0x94>
 8008b2e:	e7c8      	b.n	8008ac2 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b30:	1d20      	adds	r0, r4, #4
 8008b32:	f7fe fa77 	bl	8007024 <uxListRemove>
 8008b36:	e7c8      	b.n	8008aca <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b38:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008b3c:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b3e:	f043 0301 	orr.w	r3, r3, #1
 8008b42:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008b46:	9b05      	ldr	r3, [sp, #20]
 8008b48:	4620      	mov	r0, r4
 8008b4a:	4419      	add	r1, r3
 8008b4c:	f7ff fe62 	bl	8008814 <prvInsertTimerInActiveList>
 8008b50:	2800      	cmp	r0, #0
 8008b52:	d0ab      	beq.n	8008aac <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b54:	6a23      	ldr	r3, [r4, #32]
 8008b56:	4620      	mov	r0, r4
 8008b58:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b5a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8008b5e:	0759      	lsls	r1, r3, #29
 8008b60:	d5a4      	bpl.n	8008aac <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008b62:	69a2      	ldr	r2, [r4, #24]
 8008b64:	9905      	ldr	r1, [sp, #20]
 8008b66:	2300      	movs	r3, #0
 8008b68:	440a      	add	r2, r1
 8008b6a:	9300      	str	r3, [sp, #0]
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	4620      	mov	r0, r4
 8008b70:	f7ff fed4 	bl	800891c <xTimerGenericCommand>
							configASSERT( xResult );
 8008b74:	2800      	cmp	r0, #0
 8008b76:	d199      	bne.n	8008aac <prvTimerTask+0x94>
 8008b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b7c:	f383 8811 	msr	BASEPRI, r3
 8008b80:	f3bf 8f6f 	isb	sy
 8008b84:	f3bf 8f4f 	dsb	sy
 8008b88:	e7fe      	b.n	8008b88 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b8a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b8e:	f023 0301 	bic.w	r3, r3, #1
 8008b92:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8008b96:	e789      	b.n	8008aac <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b98:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8008b9c:	f043 0301 	orr.w	r3, r3, #1
 8008ba0:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008ba4:	9905      	ldr	r1, [sp, #20]
 8008ba6:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008ba8:	b941      	cbnz	r1, 8008bbc <prvTimerTask+0x1a4>
 8008baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bae:	f383 8811 	msr	BASEPRI, r3
 8008bb2:	f3bf 8f6f 	isb	sy
 8008bb6:	f3bf 8f4f 	dsb	sy
 8008bba:	e7fe      	b.n	8008bba <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	4401      	add	r1, r0
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	f7ff fe27 	bl	8008814 <prvInsertTimerInActiveList>
					break;
 8008bc6:	e771      	b.n	8008aac <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008bc8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8008bcc:	079a      	lsls	r2, r3, #30
 8008bce:	d4de      	bmi.n	8008b8e <prvTimerTask+0x176>
							vPortFree( pxTimer );
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	f7fe f9b9 	bl	8006f48 <vPortFree>
 8008bd6:	e769      	b.n	8008aac <prvTimerTask+0x94>
 8008bd8:	20012620 	.word	0x20012620
 8008bdc:	20012618 	.word	0x20012618
 8008be0:	2001261c 	.word	0x2001261c

08008be4 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8008be4:	8880      	ldrh	r0, [r0, #4]
 8008be6:	4770      	bx	lr

08008be8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8008be8:	b570      	push	{r4, r5, r6, lr}
 8008bea:	6803      	ldr	r3, [r0, #0]
 8008bec:	4605      	mov	r5, r0
 8008bee:	460c      	mov	r4, r1
 8008bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bf2:	2100      	movs	r1, #0
 8008bf4:	4798      	blx	r3
 8008bf6:	682b      	ldr	r3, [r5, #0]
 8008bf8:	4606      	mov	r6, r0
 8008bfa:	6a1b      	ldr	r3, [r3, #32]
 8008bfc:	4628      	mov	r0, r5
 8008bfe:	4798      	blx	r3
 8008c00:	1ba4      	subs	r4, r4, r6
 8008c02:	b2a4      	uxth	r4, r4
 8008c04:	fbb4 f0f0 	udiv	r0, r4, r0
 8008c08:	bd70      	pop	{r4, r5, r6, pc}

08008c0a <_ZN8touchgfx17AbstractPartition5clearEv>:
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	8083      	strh	r3, [r0, #4]
 8008c0e:	4770      	bx	lr

08008c10 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8008c10:	b510      	push	{r4, lr}
 8008c12:	6803      	ldr	r3, [r0, #0]
 8008c14:	8881      	ldrh	r1, [r0, #4]
 8008c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c18:	4604      	mov	r4, r0
 8008c1a:	4798      	blx	r3
 8008c1c:	88a3      	ldrh	r3, [r4, #4]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	80a3      	strh	r3, [r4, #4]
 8008c22:	bd10      	pop	{r4, pc}

08008c24 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8008c24:	6803      	ldr	r3, [r0, #0]
 8008c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c28:	4718      	bx	r3

08008c2a <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8008c2a:	4770      	bx	lr

08008c2c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8008c2c:	4a02      	ldr	r2, [pc, #8]	@ (8008c38 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8008c2e:	6002      	str	r2, [r0, #0]
 8008c30:	2200      	movs	r2, #0
 8008c32:	8082      	strh	r2, [r0, #4]
 8008c34:	4770      	bx	lr
 8008c36:	bf00      	nop
 8008c38:	080158f8 	.word	0x080158f8

08008c3c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8008c3c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8008c3e:	2000      	movs	r0, #0
 8008c40:	b12b      	cbz	r3, 8008c4e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8008c42:	b920      	cbnz	r0, 8008c4e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 8008c44:	1a5a      	subs	r2, r3, r1
 8008c46:	4250      	negs	r0, r2
 8008c48:	4150      	adcs	r0, r2
 8008c4a:	699b      	ldr	r3, [r3, #24]
 8008c4c:	e7f8      	b.n	8008c40 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8008c4e:	4770      	bx	lr

08008c50 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8008c50:	2300      	movs	r3, #0
 8008c52:	6148      	str	r0, [r1, #20]
 8008c54:	618b      	str	r3, [r1, #24]
 8008c56:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8008c58:	b913      	cbnz	r3, 8008c60 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8008c5a:	6281      	str	r1, [r0, #40]	@ 0x28
 8008c5c:	4770      	bx	lr
 8008c5e:	4613      	mov	r3, r2
 8008c60:	699a      	ldr	r2, [r3, #24]
 8008c62:	2a00      	cmp	r2, #0
 8008c64:	d1fb      	bne.n	8008c5e <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8008c66:	6199      	str	r1, [r3, #24]
 8008c68:	4770      	bx	lr

08008c6a <_ZN8touchgfx9Container9removeAllEv>:
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8008c6e:	b123      	cbz	r3, 8008c7a <_ZN8touchgfx9Container9removeAllEv+0x10>
 8008c70:	6999      	ldr	r1, [r3, #24]
 8008c72:	6281      	str	r1, [r0, #40]	@ 0x28
 8008c74:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8008c78:	e7f8      	b.n	8008c6c <_ZN8touchgfx9Container9removeAllEv+0x2>
 8008c7a:	4770      	bx	lr

08008c7c <_ZN8touchgfx9Container6unlinkEv>:
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	6283      	str	r3, [r0, #40]	@ 0x28
 8008c80:	4770      	bx	lr

08008c82 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8008c82:	2200      	movs	r2, #0
 8008c84:	8002      	strh	r2, [r0, #0]
 8008c86:	8042      	strh	r2, [r0, #2]
 8008c88:	8082      	strh	r2, [r0, #4]
 8008c8a:	80c2      	strh	r2, [r0, #6]
 8008c8c:	4770      	bx	lr

08008c8e <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8008c8e:	b570      	push	{r4, r5, r6, lr}
 8008c90:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8008c92:	460d      	mov	r5, r1
 8008c94:	4616      	mov	r6, r2
 8008c96:	b13c      	cbz	r4, 8008ca8 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8008c98:	6823      	ldr	r3, [r4, #0]
 8008c9a:	4620      	mov	r0, r4
 8008c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c9e:	4632      	mov	r2, r6
 8008ca0:	4629      	mov	r1, r5
 8008ca2:	4798      	blx	r3
 8008ca4:	69a4      	ldr	r4, [r4, #24]
 8008ca6:	e7f6      	b.n	8008c96 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8008ca8:	bd70      	pop	{r4, r5, r6, pc}

08008caa <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8008caa:	b538      	push	{r3, r4, r5, lr}
 8008cac:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8008cae:	460d      	mov	r5, r1
 8008cb0:	b134      	cbz	r4, 8008cc0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8008cb2:	682b      	ldr	r3, [r5, #0]
 8008cb4:	4621      	mov	r1, r4
 8008cb6:	689b      	ldr	r3, [r3, #8]
 8008cb8:	4628      	mov	r0, r5
 8008cba:	4798      	blx	r3
 8008cbc:	69a4      	ldr	r4, [r4, #24]
 8008cbe:	e7f7      	b.n	8008cb0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8008cc0:	bd38      	pop	{r3, r4, r5, pc}

08008cc2 <_ZN8touchgfx9ContainerD1Ev>:
 8008cc2:	4770      	bx	lr

08008cc4 <_ZN8touchgfx9ContainerD0Ev>:
 8008cc4:	b510      	push	{r4, lr}
 8008cc6:	212c      	movs	r1, #44	@ 0x2c
 8008cc8:	4604      	mov	r4, r0
 8008cca:	f00a fb25 	bl	8013318 <_ZdlPvj>
 8008cce:	4620      	mov	r0, r4
 8008cd0:	bd10      	pop	{r4, pc}

08008cd2 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8008cd2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8008cd4:	b19b      	cbz	r3, 8008cfe <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8008cd6:	428b      	cmp	r3, r1
 8008cd8:	d109      	bne.n	8008cee <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8008cda:	699a      	ldr	r2, [r3, #24]
 8008cdc:	2100      	movs	r1, #0
 8008cde:	6159      	str	r1, [r3, #20]
 8008ce0:	6282      	str	r2, [r0, #40]	@ 0x28
 8008ce2:	b902      	cbnz	r2, 8008ce6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8008ce4:	4770      	bx	lr
 8008ce6:	6199      	str	r1, [r3, #24]
 8008ce8:	4770      	bx	lr
 8008cea:	4613      	mov	r3, r2
 8008cec:	b13a      	cbz	r2, 8008cfe <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8008cee:	699a      	ldr	r2, [r3, #24]
 8008cf0:	428a      	cmp	r2, r1
 8008cf2:	d1fa      	bne.n	8008cea <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8008cf4:	698a      	ldr	r2, [r1, #24]
 8008cf6:	619a      	str	r2, [r3, #24]
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8008cfe:	4770      	bx	lr

08008d00 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8008d00:	b410      	push	{r4}
 8008d02:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8008d04:	4604      	mov	r4, r0
 8008d06:	b92b      	cbnz	r3, 8008d14 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8008d08:	6803      	ldr	r3, [r0, #0]
 8008d0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d10:	4611      	mov	r1, r2
 8008d12:	4718      	bx	r3
 8008d14:	b941      	cbnz	r1, 8008d28 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8008d16:	6193      	str	r3, [r2, #24]
 8008d18:	6282      	str	r2, [r0, #40]	@ 0x28
 8008d1a:	6154      	str	r4, [r2, #20]
 8008d1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d20:	4770      	bx	lr
 8008d22:	4603      	mov	r3, r0
 8008d24:	2800      	cmp	r0, #0
 8008d26:	d0f9      	beq.n	8008d1c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8008d28:	4299      	cmp	r1, r3
 8008d2a:	6998      	ldr	r0, [r3, #24]
 8008d2c:	d1f9      	bne.n	8008d22 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8008d2e:	6190      	str	r0, [r2, #24]
 8008d30:	618a      	str	r2, [r1, #24]
 8008d32:	e7f2      	b.n	8008d1a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08008d34 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8008d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d38:	461f      	mov	r7, r3
 8008d3a:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8008d3e:	460d      	mov	r5, r1
 8008d40:	4616      	mov	r6, r2
 8008d42:	b103      	cbz	r3, 8008d46 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8008d44:	6038      	str	r0, [r7, #0]
 8008d46:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8008d48:	b314      	cbz	r4, 8008d90 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8008d4a:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8008d4e:	b1eb      	cbz	r3, 8008d8c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8008d50:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8008d54:	428d      	cmp	r5, r1
 8008d56:	db19      	blt.n	8008d8c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8008d58:	8923      	ldrh	r3, [r4, #8]
 8008d5a:	b289      	uxth	r1, r1
 8008d5c:	440b      	add	r3, r1
 8008d5e:	b21b      	sxth	r3, r3
 8008d60:	429d      	cmp	r5, r3
 8008d62:	da13      	bge.n	8008d8c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8008d64:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8008d68:	4296      	cmp	r6, r2
 8008d6a:	db0f      	blt.n	8008d8c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8008d6c:	8963      	ldrh	r3, [r4, #10]
 8008d6e:	b292      	uxth	r2, r2
 8008d70:	4413      	add	r3, r2
 8008d72:	b21b      	sxth	r3, r3
 8008d74:	429e      	cmp	r6, r3
 8008d76:	da09      	bge.n	8008d8c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8008d78:	6823      	ldr	r3, [r4, #0]
 8008d7a:	1ab2      	subs	r2, r6, r2
 8008d7c:	1a69      	subs	r1, r5, r1
 8008d7e:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 8008d82:	b212      	sxth	r2, r2
 8008d84:	463b      	mov	r3, r7
 8008d86:	b209      	sxth	r1, r1
 8008d88:	4620      	mov	r0, r4
 8008d8a:	47c0      	blx	r8
 8008d8c:	69a4      	ldr	r4, [r4, #24]
 8008d8e:	e7db      	b.n	8008d48 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8008d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008d94 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8008d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d98:	4c6e      	ldr	r4, [pc, #440]	@ (8008f54 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8008d9a:	b0a1      	sub	sp, #132	@ 0x84
 8008d9c:	6824      	ldr	r4, [r4, #0]
 8008d9e:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8008da0:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 8008da4:	9303      	str	r3, [sp, #12]
 8008da6:	2400      	movs	r4, #0
 8008da8:	802c      	strh	r4, [r5, #0]
 8008daa:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 8008dac:	802c      	strh	r4, [r5, #0]
 8008dae:	601c      	str	r4, [r3, #0]
 8008db0:	4606      	mov	r6, r0
 8008db2:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8008db6:	f7ff ffbd 	bl	8008d34 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8008dba:	f1b9 0f03 	cmp.w	r9, #3
 8008dbe:	f340 80c2 	ble.w	8008f46 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 8008dc2:	4631      	mov	r1, r6
 8008dc4:	a80c      	add	r0, sp, #48	@ 0x30
 8008dc6:	f005 f853 	bl	800de70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8008dca:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8008dce:	9306      	str	r3, [sp, #24]
 8008dd0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8008dd4:	9307      	str	r3, [sp, #28]
 8008dd6:	9b03      	ldr	r3, [sp, #12]
 8008dd8:	f8d3 a000 	ldr.w	sl, [r3]
 8008ddc:	f1ba 0f00 	cmp.w	sl, #0
 8008de0:	f000 80b4 	beq.w	8008f4c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>
 8008de4:	4651      	mov	r1, sl
 8008de6:	a810      	add	r0, sp, #64	@ 0x40
 8008de8:	f005 f842 	bl	800de70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8008dec:	9b01      	ldr	r3, [sp, #4]
 8008dee:	9a06      	ldr	r2, [sp, #24]
 8008df0:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 8008df4:	189d      	adds	r5, r3, r2
 8008df6:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 8008dfa:	9a07      	ldr	r2, [sp, #28]
 8008dfc:	2002      	movs	r0, #2
 8008dfe:	fb91 f1f0 	sdiv	r1, r1, r0
 8008e02:	4419      	add	r1, r3
 8008e04:	1a6d      	subs	r5, r5, r1
 8008e06:	9b02      	ldr	r3, [sp, #8]
 8008e08:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 8008e0c:	4413      	add	r3, r2
 8008e0e:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 8008e12:	fb92 f2f0 	sdiv	r2, r2, r0
 8008e16:	440a      	add	r2, r1
 8008e18:	1a9b      	subs	r3, r3, r2
 8008e1a:	435b      	muls	r3, r3
 8008e1c:	fb05 3505 	mla	r5, r5, r5, r3
 8008e20:	4f4d      	ldr	r7, [pc, #308]	@ (8008f58 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c4>)
 8008e22:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8008e24:	ac10      	add	r4, sp, #64	@ 0x40
 8008e26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e28:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8008e2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e2c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8008e2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e30:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8008e34:	f1b9 0f0c 	cmp.w	r9, #12
 8008e38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8008e3c:	f04f 0303 	mov.w	r3, #3
 8008e40:	bfc8      	it	gt
 8008e42:	4698      	movgt	r8, r3
 8008e44:	f8cd 9000 	str.w	r9, [sp]
 8008e48:	f04f 0400 	mov.w	r4, #0
 8008e4c:	bfdc      	itt	le
 8008e4e:	f109 32ff 	addle.w	r2, r9, #4294967295
 8008e52:	fb92 f8f3 	sdivle	r8, r2, r3
 8008e56:	1c63      	adds	r3, r4, #1
 8008e58:	aa10      	add	r2, sp, #64	@ 0x40
 8008e5a:	f004 0401 	and.w	r4, r4, #1
 8008e5e:	9308      	str	r3, [sp, #32]
 8008e60:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8008e64:	9b00      	ldr	r3, [sp, #0]
 8008e66:	fb93 f3f8 	sdiv	r3, r3, r8
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	3404      	adds	r4, #4
 8008e6e:	f04f 0b00 	mov.w	fp, #0
 8008e72:	9304      	str	r3, [sp, #16]
 8008e74:	9a04      	ldr	r2, [sp, #16]
 8008e76:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008e7a:	fb13 f302 	smulbb	r3, r3, r2
 8008e7e:	9a01      	ldr	r2, [sp, #4]
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	1899      	adds	r1, r3, r2
 8008e84:	9305      	str	r3, [sp, #20]
 8008e86:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8008e8a:	b209      	sxth	r1, r1
 8008e8c:	4299      	cmp	r1, r3
 8008e8e:	db4d      	blt.n	8008f2c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8008e90:	8932      	ldrh	r2, [r6, #8]
 8008e92:	4413      	add	r3, r2
 8008e94:	b21b      	sxth	r3, r3
 8008e96:	4299      	cmp	r1, r3
 8008e98:	da48      	bge.n	8008f2c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8008e9a:	9b04      	ldr	r3, [sp, #16]
 8008e9c:	6827      	ldr	r7, [r4, #0]
 8008e9e:	fb17 f703 	smulbb	r7, r7, r3
 8008ea2:	9b02      	ldr	r3, [sp, #8]
 8008ea4:	b2bf      	uxth	r7, r7
 8008ea6:	18fa      	adds	r2, r7, r3
 8008ea8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8008eac:	b212      	sxth	r2, r2
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	db3c      	blt.n	8008f2c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8008eb2:	8970      	ldrh	r0, [r6, #10]
 8008eb4:	4403      	add	r3, r0
 8008eb6:	b21b      	sxth	r3, r3
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	da37      	bge.n	8008f2c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ec0:	4630      	mov	r0, r6
 8008ec2:	ab0b      	add	r3, sp, #44	@ 0x2c
 8008ec4:	f7ff ff36 	bl	8008d34 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8008ec8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008eca:	b37a      	cbz	r2, 8008f2c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8008ecc:	4552      	cmp	r2, sl
 8008ece:	d02d      	beq.n	8008f2c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8008ed0:	4611      	mov	r1, r2
 8008ed2:	a80e      	add	r0, sp, #56	@ 0x38
 8008ed4:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ed6:	f004 ffcb 	bl	800de70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8008eda:	9a06      	ldr	r2, [sp, #24]
 8008edc:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 8008ee0:	9b01      	ldr	r3, [sp, #4]
 8008ee2:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 8008ee6:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 8008eea:	4413      	add	r3, r2
 8008eec:	f04f 0e02 	mov.w	lr, #2
 8008ef0:	fb91 f1fe 	sdiv	r1, r1, lr
 8008ef4:	4401      	add	r1, r0
 8008ef6:	1a58      	subs	r0, r3, r1
 8008ef8:	9a07      	ldr	r2, [sp, #28]
 8008efa:	9b02      	ldr	r3, [sp, #8]
 8008efc:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 8008f00:	fb9c fcfe 	sdiv	ip, ip, lr
 8008f04:	4413      	add	r3, r2
 8008f06:	448c      	add	ip, r1
 8008f08:	eba3 030c 	sub.w	r3, r3, ip
 8008f0c:	435b      	muls	r3, r3
 8008f0e:	fb00 3300 	mla	r3, r0, r0, r3
 8008f12:	42ab      	cmp	r3, r5
 8008f14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f16:	d208      	bcs.n	8008f2a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8008f18:	9803      	ldr	r0, [sp, #12]
 8008f1a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008f1c:	6001      	str	r1, [r0, #0]
 8008f1e:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8008f20:	9805      	ldr	r0, [sp, #20]
 8008f22:	8008      	strh	r0, [r1, #0]
 8008f24:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8008f26:	461d      	mov	r5, r3
 8008f28:	800f      	strh	r7, [r1, #0]
 8008f2a:	4692      	mov	sl, r2
 8008f2c:	f10b 0b01 	add.w	fp, fp, #1
 8008f30:	f1bb 0f04 	cmp.w	fp, #4
 8008f34:	f104 0408 	add.w	r4, r4, #8
 8008f38:	d19c      	bne.n	8008e74 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8008f3a:	9b00      	ldr	r3, [sp, #0]
 8008f3c:	9c08      	ldr	r4, [sp, #32]
 8008f3e:	444b      	add	r3, r9
 8008f40:	4544      	cmp	r4, r8
 8008f42:	9300      	str	r3, [sp, #0]
 8008f44:	d187      	bne.n	8008e56 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8008f46:	b021      	add	sp, #132	@ 0x84
 8008f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f4c:	f04f 35ff 	mov.w	r5, #4294967295
 8008f50:	e766      	b.n	8008e20 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8008f52:	bf00      	nop
 8008f54:	20012658 	.word	0x20012658
 8008f58:	080143cc 	.word	0x080143cc

08008f5c <_ZN8touchgfx4RectaNERKS0_>:
 8008f5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f60:	f9b1 7000 	ldrsh.w	r7, [r1]
 8008f64:	888c      	ldrh	r4, [r1, #4]
 8008f66:	f9b0 9000 	ldrsh.w	r9, [r0]
 8008f6a:	443c      	add	r4, r7
 8008f6c:	b2a4      	uxth	r4, r4
 8008f6e:	fa0f f884 	sxth.w	r8, r4
 8008f72:	45c1      	cmp	r9, r8
 8008f74:	da2f      	bge.n	8008fd6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8008f76:	8882      	ldrh	r2, [r0, #4]
 8008f78:	444a      	add	r2, r9
 8008f7a:	b292      	uxth	r2, r2
 8008f7c:	fa0f fe82 	sxth.w	lr, r2
 8008f80:	4577      	cmp	r7, lr
 8008f82:	da28      	bge.n	8008fd6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8008f84:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8008f88:	88cb      	ldrh	r3, [r1, #6]
 8008f8a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8008f8e:	442b      	add	r3, r5
 8008f90:	b21b      	sxth	r3, r3
 8008f92:	429e      	cmp	r6, r3
 8008f94:	da1f      	bge.n	8008fd6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8008f96:	88c3      	ldrh	r3, [r0, #6]
 8008f98:	4433      	add	r3, r6
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	fa0f fc83 	sxth.w	ip, r3
 8008fa0:	4565      	cmp	r5, ip
 8008fa2:	da18      	bge.n	8008fd6 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8008fa4:	454f      	cmp	r7, r9
 8008fa6:	bfb8      	it	lt
 8008fa8:	464f      	movlt	r7, r9
 8008faa:	42b5      	cmp	r5, r6
 8008fac:	bfb8      	it	lt
 8008fae:	4635      	movlt	r5, r6
 8008fb0:	45f0      	cmp	r8, lr
 8008fb2:	bfd8      	it	le
 8008fb4:	4622      	movle	r2, r4
 8008fb6:	1bd2      	subs	r2, r2, r7
 8008fb8:	8082      	strh	r2, [r0, #4]
 8008fba:	884a      	ldrh	r2, [r1, #2]
 8008fbc:	88c9      	ldrh	r1, [r1, #6]
 8008fbe:	8007      	strh	r7, [r0, #0]
 8008fc0:	440a      	add	r2, r1
 8008fc2:	b292      	uxth	r2, r2
 8008fc4:	b211      	sxth	r1, r2
 8008fc6:	458c      	cmp	ip, r1
 8008fc8:	bfa8      	it	ge
 8008fca:	4613      	movge	r3, r2
 8008fcc:	1b5b      	subs	r3, r3, r5
 8008fce:	80c3      	strh	r3, [r0, #6]
 8008fd0:	8045      	strh	r5, [r0, #2]
 8008fd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	8003      	strh	r3, [r0, #0]
 8008fda:	8043      	strh	r3, [r0, #2]
 8008fdc:	8083      	strh	r3, [r0, #4]
 8008fde:	80c3      	strh	r3, [r0, #6]
 8008fe0:	e7f7      	b.n	8008fd2 <_ZN8touchgfx4RectaNERKS0_+0x76>

08008fe2 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8008fe2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	dd06      	ble.n	8008ff8 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8008fea:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	bfcc      	ite	gt
 8008ff2:	2000      	movgt	r0, #0
 8008ff4:	2001      	movle	r0, #1
 8008ff6:	4770      	bx	lr
 8008ff8:	2001      	movs	r0, #1
 8008ffa:	4770      	bx	lr

08008ffc <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8008ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009000:	2300      	movs	r3, #0
 8009002:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8009004:	8003      	strh	r3, [r0, #0]
 8009006:	4604      	mov	r4, r0
 8009008:	8043      	strh	r3, [r0, #2]
 800900a:	8083      	strh	r3, [r0, #4]
 800900c:	80c3      	strh	r3, [r0, #6]
 800900e:	2d00      	cmp	r5, #0
 8009010:	d040      	beq.n	8009094 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8009012:	1d28      	adds	r0, r5, #4
 8009014:	f7ff ffe5 	bl	8008fe2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8009018:	b988      	cbnz	r0, 800903e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800901a:	4620      	mov	r0, r4
 800901c:	f7ff ffe1 	bl	8008fe2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8009020:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8009024:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8009028:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800902c:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8009030:	b138      	cbz	r0, 8009042 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8009032:	8022      	strh	r2, [r4, #0]
 8009034:	8063      	strh	r3, [r4, #2]
 8009036:	f8a4 e004 	strh.w	lr, [r4, #4]
 800903a:	f8a4 c006 	strh.w	ip, [r4, #6]
 800903e:	69ad      	ldr	r5, [r5, #24]
 8009040:	e7e5      	b.n	800900e <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8009042:	f9b4 0000 	ldrsh.w	r0, [r4]
 8009046:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800904a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800904e:	4290      	cmp	r0, r2
 8009050:	4607      	mov	r7, r0
 8009052:	bfa8      	it	ge
 8009054:	4617      	movge	r7, r2
 8009056:	4472      	add	r2, lr
 8009058:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800905c:	8027      	strh	r7, [r4, #0]
 800905e:	4299      	cmp	r1, r3
 8009060:	460e      	mov	r6, r1
 8009062:	4440      	add	r0, r8
 8009064:	bfa8      	it	ge
 8009066:	461e      	movge	r6, r3
 8009068:	4471      	add	r1, lr
 800906a:	4463      	add	r3, ip
 800906c:	b200      	sxth	r0, r0
 800906e:	b212      	sxth	r2, r2
 8009070:	b209      	sxth	r1, r1
 8009072:	b21b      	sxth	r3, r3
 8009074:	4290      	cmp	r0, r2
 8009076:	bfac      	ite	ge
 8009078:	ebc7 0200 	rsbge	r2, r7, r0
 800907c:	ebc7 0202 	rsblt	r2, r7, r2
 8009080:	4299      	cmp	r1, r3
 8009082:	bfac      	ite	ge
 8009084:	ebc6 0301 	rsbge	r3, r6, r1
 8009088:	ebc6 0303 	rsblt	r3, r6, r3
 800908c:	8066      	strh	r6, [r4, #2]
 800908e:	80a2      	strh	r2, [r4, #4]
 8009090:	80e3      	strh	r3, [r4, #6]
 8009092:	e7d4      	b.n	800903e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8009094:	4620      	mov	r0, r4
 8009096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800909a <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800909a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800909e:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 80090a2:	b383      	cbz	r3, 8009106 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80090a4:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80090a6:	b374      	cbz	r4, 8009106 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80090a8:	f9b1 5000 	ldrsh.w	r5, [r1]
 80090ac:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80090b0:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80090b4:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80090b8:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80090bc:	b303      	cbz	r3, 8009100 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80090be:	4668      	mov	r0, sp
 80090c0:	1d21      	adds	r1, r4, #4
 80090c2:	f8ad 5000 	strh.w	r5, [sp]
 80090c6:	f8ad 6002 	strh.w	r6, [sp, #2]
 80090ca:	f8ad 7004 	strh.w	r7, [sp, #4]
 80090ce:	f8ad 8006 	strh.w	r8, [sp, #6]
 80090d2:	f7ff ff43 	bl	8008f5c <_ZN8touchgfx4RectaNERKS0_>
 80090d6:	4668      	mov	r0, sp
 80090d8:	f7ff ff83 	bl	8008fe2 <_ZNK8touchgfx4Rect7isEmptyEv>
 80090dc:	b980      	cbnz	r0, 8009100 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 80090de:	f8bd 3000 	ldrh.w	r3, [sp]
 80090e2:	88a2      	ldrh	r2, [r4, #4]
 80090e4:	1a9b      	subs	r3, r3, r2
 80090e6:	f8ad 3000 	strh.w	r3, [sp]
 80090ea:	88e2      	ldrh	r2, [r4, #6]
 80090ec:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80090f0:	1a9b      	subs	r3, r3, r2
 80090f2:	f8ad 3002 	strh.w	r3, [sp, #2]
 80090f6:	6823      	ldr	r3, [r4, #0]
 80090f8:	4669      	mov	r1, sp
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	4620      	mov	r0, r4
 80090fe:	4798      	blx	r3
 8009100:	69a4      	ldr	r4, [r4, #24]
 8009102:	2c00      	cmp	r4, #0
 8009104:	d1d8      	bne.n	80090b8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8009106:	b002      	add	sp, #8
 8009108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800910c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800910c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800910e:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8009112:	460d      	mov	r5, r1
 8009114:	4616      	mov	r6, r2
 8009116:	b323      	cbz	r3, 8009162 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8009118:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800911a:	b314      	cbz	r4, 8009162 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800911c:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8009120:	b1eb      	cbz	r3, 800915e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8009122:	6828      	ldr	r0, [r5, #0]
 8009124:	6869      	ldr	r1, [r5, #4]
 8009126:	466b      	mov	r3, sp
 8009128:	c303      	stmia	r3!, {r0, r1}
 800912a:	4668      	mov	r0, sp
 800912c:	1d21      	adds	r1, r4, #4
 800912e:	f7ff ff15 	bl	8008f5c <_ZN8touchgfx4RectaNERKS0_>
 8009132:	4668      	mov	r0, sp
 8009134:	f7ff ff55 	bl	8008fe2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8009138:	b988      	cbnz	r0, 800915e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800913a:	f8bd 3000 	ldrh.w	r3, [sp]
 800913e:	88a2      	ldrh	r2, [r4, #4]
 8009140:	1a9b      	subs	r3, r3, r2
 8009142:	f8ad 3000 	strh.w	r3, [sp]
 8009146:	88e2      	ldrh	r2, [r4, #6]
 8009148:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800914c:	1a9b      	subs	r3, r3, r2
 800914e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8009152:	6823      	ldr	r3, [r4, #0]
 8009154:	4632      	mov	r2, r6
 8009156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009158:	4669      	mov	r1, sp
 800915a:	4620      	mov	r0, r4
 800915c:	4798      	blx	r3
 800915e:	69a4      	ldr	r4, [r4, #24]
 8009160:	e7db      	b.n	800911a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8009162:	b002      	add	sp, #8
 8009164:	bd70      	pop	{r4, r5, r6, pc}

08009166 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8009166:	b513      	push	{r0, r1, r4, lr}
 8009168:	6803      	ldr	r3, [r0, #0]
 800916a:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 800916e:	2300      	movs	r3, #0
 8009170:	e9cd 3300 	strd	r3, r3, [sp]
 8009174:	466b      	mov	r3, sp
 8009176:	47a0      	blx	r4
 8009178:	b002      	add	sp, #8
 800917a:	bd10      	pop	{r4, pc}

0800917c <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800917c:	2301      	movs	r3, #1
 800917e:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8009182:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8009186:	4770      	bx	lr

08009188 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8009188:	2301      	movs	r3, #1
 800918a:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800918e:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 8009192:	4770      	bx	lr

08009194 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8009194:	6843      	ldr	r3, [r0, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	725a      	strb	r2, [r3, #9]
 800919a:	6840      	ldr	r0, [r0, #4]
 800919c:	6803      	ldr	r3, [r0, #0]
 800919e:	691b      	ldr	r3, [r3, #16]
 80091a0:	4718      	bx	r3

080091a2 <_ZN8touchgfx3HAL8flushDMAEv>:
 80091a2:	6840      	ldr	r0, [r0, #4]
 80091a4:	6803      	ldr	r3, [r0, #0]
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	4718      	bx	r3

080091aa <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80091aa:	b530      	push	{r4, r5, lr}
 80091ac:	b08b      	sub	sp, #44	@ 0x2c
 80091ae:	6804      	ldr	r4, [r0, #0]
 80091b0:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 80091b4:	9509      	str	r5, [sp, #36]	@ 0x24
 80091b6:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 80091ba:	9508      	str	r5, [sp, #32]
 80091bc:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 80091c0:	9507      	str	r5, [sp, #28]
 80091c2:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 80091c6:	9506      	str	r5, [sp, #24]
 80091c8:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 80091cc:	9505      	str	r5, [sp, #20]
 80091ce:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 80091d2:	9504      	str	r5, [sp, #16]
 80091d4:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 80091d8:	9503      	str	r5, [sp, #12]
 80091da:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 80091de:	9502      	str	r5, [sp, #8]
 80091e0:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 80091e4:	e9cd 3500 	strd	r3, r5, [sp]
 80091e8:	4613      	mov	r3, r2
 80091ea:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 80091ec:	2200      	movs	r2, #0
 80091ee:	47a0      	blx	r4
 80091f0:	b00b      	add	sp, #44	@ 0x2c
 80091f2:	bd30      	pop	{r4, r5, pc}

080091f4 <_ZN8touchgfx3HAL10beginFrameEv>:
 80091f4:	4b04      	ldr	r3, [pc, #16]	@ (8009208 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	b123      	cbz	r3, 8009204 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80091fa:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 80091fe:	f080 0001 	eor.w	r0, r0, #1
 8009202:	4770      	bx	lr
 8009204:	2001      	movs	r0, #1
 8009206:	4770      	bx	lr
 8009208:	20012656 	.word	0x20012656

0800920c <_ZN8touchgfx3HAL8endFrameEv>:
 800920c:	b510      	push	{r4, lr}
 800920e:	4604      	mov	r4, r0
 8009210:	6840      	ldr	r0, [r0, #4]
 8009212:	6803      	ldr	r3, [r0, #0]
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	4798      	blx	r3
 8009218:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 800921c:	b113      	cbz	r3, 8009224 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800921e:	2301      	movs	r3, #1
 8009220:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8009224:	bd10      	pop	{r4, pc}

08009226 <_ZN8touchgfx3HAL10initializeEv>:
 8009226:	b510      	push	{r4, lr}
 8009228:	4604      	mov	r4, r0
 800922a:	f7f7 fc03 	bl	8000a34 <_ZN8touchgfx10OSWrappers10initializeEv>
 800922e:	f7f7 fb0b 	bl	8000848 <_ZN8touchgfx4GPIO4initEv>
 8009232:	6860      	ldr	r0, [r4, #4]
 8009234:	6803      	ldr	r3, [r0, #0]
 8009236:	68db      	ldr	r3, [r3, #12]
 8009238:	4798      	blx	r3
 800923a:	68e0      	ldr	r0, [r4, #12]
 800923c:	6803      	ldr	r3, [r0, #0]
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	4798      	blx	r3
 8009242:	6823      	ldr	r3, [r4, #0]
 8009244:	4620      	mov	r0, r4
 8009246:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800924c:	4718      	bx	r3
	...

08009250 <_ZN8touchgfx3HAL4tickEv>:
 8009250:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009252:	6803      	ldr	r3, [r0, #0]
 8009254:	4d5b      	ldr	r5, [pc, #364]	@ (80093c4 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8009256:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800925a:	4604      	mov	r4, r0
 800925c:	4798      	blx	r3
 800925e:	2800      	cmp	r0, #0
 8009260:	f000 8095 	beq.w	800938e <_ZN8touchgfx3HAL4tickEv+0x13e>
 8009264:	2001      	movs	r0, #1
 8009266:	f7f7 fa6d 	bl	8000744 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800926a:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 800926e:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8009272:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8009276:	2600      	movs	r6, #0
 8009278:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 800927c:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 8009280:	b133      	cbz	r3, 8009290 <_ZN8touchgfx3HAL4tickEv+0x40>
 8009282:	6823      	ldr	r3, [r4, #0]
 8009284:	4620      	mov	r0, r4
 8009286:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800928a:	4798      	blx	r3
 800928c:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8009290:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 8009294:	6862      	ldr	r2, [r4, #4]
 8009296:	f083 0301 	eor.w	r3, r3, #1
 800929a:	7253      	strb	r3, [r2, #9]
 800929c:	2601      	movs	r6, #1
 800929e:	702e      	strb	r6, [r5, #0]
 80092a0:	f003 fcd0 	bl	800cc44 <_ZN8touchgfx11Application11getInstanceEv>
 80092a4:	6803      	ldr	r3, [r0, #0]
 80092a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092a8:	4798      	blx	r3
 80092aa:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 80092ae:	b90b      	cbnz	r3, 80092b4 <_ZN8touchgfx3HAL4tickEv+0x64>
 80092b0:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 80092b4:	f003 fcc6 	bl	800cc44 <_ZN8touchgfx11Application11getInstanceEv>
 80092b8:	6803      	ldr	r3, [r0, #0]
 80092ba:	695b      	ldr	r3, [r3, #20]
 80092bc:	4798      	blx	r3
 80092be:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80092c0:	6803      	ldr	r3, [r0, #0]
 80092c2:	691b      	ldr	r3, [r3, #16]
 80092c4:	4798      	blx	r3
 80092c6:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 80092ca:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 80092ce:	3b01      	subs	r3, #1
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 80092d6:	b10a      	cbz	r2, 80092dc <_ZN8touchgfx3HAL4tickEv+0x8c>
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d1eb      	bne.n	80092b4 <_ZN8touchgfx3HAL4tickEv+0x64>
 80092dc:	4a3a      	ldr	r2, [pc, #232]	@ (80093c8 <_ZN8touchgfx3HAL4tickEv+0x178>)
 80092de:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 80092e2:	7813      	ldrb	r3, [r2, #0]
 80092e4:	3301      	adds	r3, #1
 80092e6:	b25b      	sxtb	r3, r3
 80092e8:	4299      	cmp	r1, r3
 80092ea:	7013      	strb	r3, [r2, #0]
 80092ec:	dc10      	bgt.n	8009310 <_ZN8touchgfx3HAL4tickEv+0xc0>
 80092ee:	68e0      	ldr	r0, [r4, #12]
 80092f0:	2300      	movs	r3, #0
 80092f2:	7013      	strb	r3, [r2, #0]
 80092f4:	6803      	ldr	r3, [r0, #0]
 80092f6:	aa03      	add	r2, sp, #12
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	a902      	add	r1, sp, #8
 80092fc:	4798      	blx	r3
 80092fe:	6823      	ldr	r3, [r4, #0]
 8009300:	2800      	cmp	r0, #0
 8009302:	d050      	beq.n	80093a6 <_ZN8touchgfx3HAL4tickEv+0x156>
 8009304:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009308:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800930c:	4620      	mov	r0, r4
 800930e:	4798      	blx	r3
 8009310:	6960      	ldr	r0, [r4, #20]
 8009312:	2300      	movs	r3, #0
 8009314:	f88d 3007 	strb.w	r3, [sp, #7]
 8009318:	b158      	cbz	r0, 8009332 <_ZN8touchgfx3HAL4tickEv+0xe2>
 800931a:	6803      	ldr	r3, [r0, #0]
 800931c:	f10d 0107 	add.w	r1, sp, #7
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	4798      	blx	r3
 8009324:	b128      	cbz	r0, 8009332 <_ZN8touchgfx3HAL4tickEv+0xe2>
 8009326:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8009328:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800932c:	6803      	ldr	r3, [r0, #0]
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	4798      	blx	r3
 8009332:	f104 001c 	add.w	r0, r4, #28
 8009336:	f009 ff1b 	bl	8013170 <_ZN8touchgfx8Gestures4tickEv>
 800933a:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 800933e:	b30b      	cbz	r3, 8009384 <_ZN8touchgfx3HAL4tickEv+0x134>
 8009340:	6920      	ldr	r0, [r4, #16]
 8009342:	6803      	ldr	r3, [r0, #0]
 8009344:	691b      	ldr	r3, [r3, #16]
 8009346:	4798      	blx	r3
 8009348:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800934a:	4606      	mov	r6, r0
 800934c:	b903      	cbnz	r3, 8009350 <_ZN8touchgfx3HAL4tickEv+0x100>
 800934e:	6760      	str	r0, [r4, #116]	@ 0x74
 8009350:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8009352:	4a1e      	ldr	r2, [pc, #120]	@ (80093cc <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8009354:	1af3      	subs	r3, r6, r3
 8009356:	4293      	cmp	r3, r2
 8009358:	d914      	bls.n	8009384 <_ZN8touchgfx3HAL4tickEv+0x134>
 800935a:	6920      	ldr	r0, [r4, #16]
 800935c:	6803      	ldr	r3, [r0, #0]
 800935e:	699b      	ldr	r3, [r3, #24]
 8009360:	4798      	blx	r3
 8009362:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8009364:	2264      	movs	r2, #100	@ 0x64
 8009366:	1af3      	subs	r3, r6, r3
 8009368:	fbb3 f3f2 	udiv	r3, r3, r2
 800936c:	fbb0 f0f3 	udiv	r0, r0, r3
 8009370:	2800      	cmp	r0, #0
 8009372:	dc1d      	bgt.n	80093b0 <_ZN8touchgfx3HAL4tickEv+0x160>
 8009374:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 8009378:	6920      	ldr	r0, [r4, #16]
 800937a:	6803      	ldr	r3, [r0, #0]
 800937c:	2100      	movs	r1, #0
 800937e:	69db      	ldr	r3, [r3, #28]
 8009380:	4798      	blx	r3
 8009382:	6766      	str	r6, [r4, #116]	@ 0x74
 8009384:	f003 fc5e 	bl	800cc44 <_ZN8touchgfx11Application11getInstanceEv>
 8009388:	6803      	ldr	r3, [r0, #0]
 800938a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800938c:	4798      	blx	r3
 800938e:	6823      	ldr	r3, [r4, #0]
 8009390:	4620      	mov	r0, r4
 8009392:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009396:	4798      	blx	r3
 8009398:	2001      	movs	r0, #1
 800939a:	f7f7 f9fd 	bl	8000798 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800939e:	2300      	movs	r3, #0
 80093a0:	702b      	strb	r3, [r5, #0]
 80093a2:	b004      	add	sp, #16
 80093a4:	bd70      	pop	{r4, r5, r6, pc}
 80093a6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80093aa:	4620      	mov	r0, r4
 80093ac:	4798      	blx	r3
 80093ae:	e7af      	b.n	8009310 <_ZN8touchgfx3HAL4tickEv+0xc0>
 80093b0:	2863      	cmp	r0, #99	@ 0x63
 80093b2:	bfcb      	itete	gt
 80093b4:	2300      	movgt	r3, #0
 80093b6:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 80093ba:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 80093be:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 80093c2:	e7d9      	b.n	8009378 <_ZN8touchgfx3HAL4tickEv+0x128>
 80093c4:	2001265c 	.word	0x2001265c
 80093c8:	2001265d 	.word	0x2001265d
 80093cc:	05f5e100 	.word	0x05f5e100

080093d0 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 80093d0:	b510      	push	{r4, lr}
 80093d2:	4604      	mov	r4, r0
 80093d4:	f7f7 fb5e 	bl	8000a94 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 80093d8:	6863      	ldr	r3, [r4, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	729a      	strb	r2, [r3, #10]
 80093de:	bd10      	pop	{r4, pc}

080093e0 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80093e0:	65c1      	str	r1, [r0, #92]	@ 0x5c
 80093e2:	301c      	adds	r0, #28
 80093e4:	f009 bec2 	b.w	801316c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080093e8 <_ZN8touchgfx3HAL5touchEll>:
 80093e8:	b530      	push	{r4, r5, lr}
 80093ea:	b087      	sub	sp, #28
 80093ec:	4604      	mov	r4, r0
 80093ee:	a804      	add	r0, sp, #16
 80093f0:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80093f4:	f003 fa0e 	bl	800c814 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80093f8:	9b04      	ldr	r3, [sp, #16]
 80093fa:	f8ad 300c 	strh.w	r3, [sp, #12]
 80093fe:	a906      	add	r1, sp, #24
 8009400:	9b05      	ldr	r3, [sp, #20]
 8009402:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8009406:	a803      	add	r0, sp, #12
 8009408:	f003 fa56 	bl	800c8b8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800940c:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 8009410:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8009414:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8009418:	f104 001c 	add.w	r0, r4, #28
 800941c:	b189      	cbz	r1, 8009442 <_ZN8touchgfx3HAL5touchEll+0x5a>
 800941e:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 8009422:	9300      	str	r3, [sp, #0]
 8009424:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 8009428:	4613      	mov	r3, r2
 800942a:	462a      	mov	r2, r5
 800942c:	f009 feae 	bl	801318c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8009430:	b128      	cbz	r0, 800943e <_ZN8touchgfx3HAL5touchEll+0x56>
 8009432:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8009436:	6623      	str	r3, [r4, #96]	@ 0x60
 8009438:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800943c:	6663      	str	r3, [r4, #100]	@ 0x64
 800943e:	b007      	add	sp, #28
 8009440:	bd30      	pop	{r4, r5, pc}
 8009442:	f009 fee3 	bl	801320c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8009446:	2301      	movs	r3, #1
 8009448:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800944c:	e7f1      	b.n	8009432 <_ZN8touchgfx3HAL5touchEll+0x4a>

0800944e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800944e:	b510      	push	{r4, lr}
 8009450:	2b00      	cmp	r3, #0
 8009452:	d046      	beq.n	80094e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8009454:	ea81 0002 	eor.w	r0, r1, r2
 8009458:	07c4      	lsls	r4, r0, #31
 800945a:	d508      	bpl.n	800946e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800945c:	440b      	add	r3, r1
 800945e:	3a01      	subs	r2, #1
 8009460:	428b      	cmp	r3, r1
 8009462:	d93e      	bls.n	80094e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8009464:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8009468:	f801 0b01 	strb.w	r0, [r1], #1
 800946c:	e7f8      	b.n	8009460 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800946e:	07d0      	lsls	r0, r2, #31
 8009470:	bf42      	ittt	mi
 8009472:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8009476:	f801 0b01 	strbmi.w	r0, [r1], #1
 800947a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800947e:	2b01      	cmp	r3, #1
 8009480:	d911      	bls.n	80094a6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8009482:	ea81 0402 	eor.w	r4, r1, r2
 8009486:	07a4      	lsls	r4, r4, #30
 8009488:	4610      	mov	r0, r2
 800948a:	d022      	beq.n	80094d2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800948c:	f023 0401 	bic.w	r4, r3, #1
 8009490:	440c      	add	r4, r1
 8009492:	428c      	cmp	r4, r1
 8009494:	4602      	mov	r2, r0
 8009496:	d904      	bls.n	80094a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8009498:	8812      	ldrh	r2, [r2, #0]
 800949a:	f821 2b02 	strh.w	r2, [r1], #2
 800949e:	3002      	adds	r0, #2
 80094a0:	e7f7      	b.n	8009492 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 80094a2:	f003 0301 	and.w	r3, r3, #1
 80094a6:	f023 0003 	bic.w	r0, r3, #3
 80094aa:	4408      	add	r0, r1
 80094ac:	4288      	cmp	r0, r1
 80094ae:	4614      	mov	r4, r2
 80094b0:	d904      	bls.n	80094bc <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 80094b2:	6824      	ldr	r4, [r4, #0]
 80094b4:	f841 4b04 	str.w	r4, [r1], #4
 80094b8:	3204      	adds	r2, #4
 80094ba:	e7f7      	b.n	80094ac <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 80094bc:	f003 0303 	and.w	r3, r3, #3
 80094c0:	440b      	add	r3, r1
 80094c2:	3a01      	subs	r2, #1
 80094c4:	428b      	cmp	r3, r1
 80094c6:	d90c      	bls.n	80094e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80094c8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80094cc:	f801 0b01 	strb.w	r0, [r1], #1
 80094d0:	e7f8      	b.n	80094c4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 80094d2:	0790      	lsls	r0, r2, #30
 80094d4:	d0e7      	beq.n	80094a6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80094d6:	f832 0b02 	ldrh.w	r0, [r2], #2
 80094da:	f821 0b02 	strh.w	r0, [r1], #2
 80094de:	3b02      	subs	r3, #2
 80094e0:	e7e1      	b.n	80094a6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80094e2:	2001      	movs	r0, #1
 80094e4:	bd10      	pop	{r4, pc}

080094e6 <_ZN8touchgfx3HAL7noTouchEv>:
 80094e6:	b510      	push	{r4, lr}
 80094e8:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 80094ec:	4604      	mov	r4, r0
 80094ee:	b153      	cbz	r3, 8009506 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80094f0:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 80094f4:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 80094f8:	2101      	movs	r1, #1
 80094fa:	301c      	adds	r0, #28
 80094fc:	f009 fe86 	bl	801320c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8009500:	2300      	movs	r3, #0
 8009502:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8009506:	bd10      	pop	{r4, pc}

08009508 <_ZN8touchgfx3HAL3lcdEv>:
 8009508:	4b04      	ldr	r3, [pc, #16]	@ (800951c <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8009510:	b10a      	cbz	r2, 8009516 <_ZN8touchgfx3HAL3lcdEv+0xe>
 8009512:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8009514:	b900      	cbnz	r0, 8009518 <_ZN8touchgfx3HAL3lcdEv+0x10>
 8009516:	6898      	ldr	r0, [r3, #8]
 8009518:	4770      	bx	lr
 800951a:	bf00      	nop
 800951c:	20012658 	.word	0x20012658

08009520 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8009520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009524:	b085      	sub	sp, #20
 8009526:	ad04      	add	r5, sp, #16
 8009528:	4604      	mov	r4, r0
 800952a:	2000      	movs	r0, #0
 800952c:	f845 0d04 	str.w	r0, [r5, #-4]!
 8009530:	69a0      	ldr	r0, [r4, #24]
 8009532:	6806      	ldr	r6, [r0, #0]
 8009534:	9501      	str	r5, [sp, #4]
 8009536:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 800953a:	9500      	str	r5, [sp, #0]
 800953c:	6835      	ldr	r5, [r6, #0]
 800953e:	4699      	mov	r9, r3
 8009540:	460f      	mov	r7, r1
 8009542:	4690      	mov	r8, r2
 8009544:	47a8      	blx	r5
 8009546:	4d10      	ldr	r5, [pc, #64]	@ (8009588 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8009548:	4606      	mov	r6, r0
 800954a:	f8a5 9000 	strh.w	r9, [r5]
 800954e:	f7ff ffdb 	bl	8009508 <_ZN8touchgfx3HAL3lcdEv>
 8009552:	6803      	ldr	r3, [r0, #0]
 8009554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009556:	4798      	blx	r3
 8009558:	b128      	cbz	r0, 8009566 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800955a:	2801      	cmp	r0, #1
 800955c:	d00b      	beq.n	8009576 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800955e:	4630      	mov	r0, r6
 8009560:	b005      	add	sp, #20
 8009562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009566:	882b      	ldrh	r3, [r5, #0]
 8009568:	fb08 7203 	mla	r2, r8, r3, r7
 800956c:	9b03      	ldr	r3, [sp, #12]
 800956e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8009572:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8009574:	e7f3      	b.n	800955e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8009576:	882a      	ldrh	r2, [r5, #0]
 8009578:	9b03      	ldr	r3, [sp, #12]
 800957a:	fb08 7202 	mla	r2, r8, r2, r7
 800957e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009582:	1a9a      	subs	r2, r3, r2
 8009584:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8009586:	e7ea      	b.n	800955e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8009588:	20012652 	.word	0x20012652

0800958c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800958c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800958e:	b08b      	sub	sp, #44	@ 0x2c
 8009590:	4617      	mov	r7, r2
 8009592:	4604      	mov	r4, r0
 8009594:	460e      	mov	r6, r1
 8009596:	461d      	mov	r5, r3
 8009598:	f7ff ffb6 	bl	8009508 <_ZN8touchgfx3HAL3lcdEv>
 800959c:	6803      	ldr	r3, [r0, #0]
 800959e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095a0:	4798      	blx	r3
 80095a2:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 80095a6:	9007      	str	r0, [sp, #28]
 80095a8:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80095ac:	4b0d      	ldr	r3, [pc, #52]	@ (80095e4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 80095ae:	6822      	ldr	r2, [r4, #0]
 80095b0:	881b      	ldrh	r3, [r3, #0]
 80095b2:	9306      	str	r3, [sp, #24]
 80095b4:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80095b8:	9305      	str	r3, [sp, #20]
 80095ba:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 80095be:	9304      	str	r3, [sp, #16]
 80095c0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80095c4:	9303      	str	r3, [sp, #12]
 80095c6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80095ca:	9302      	str	r3, [sp, #8]
 80095cc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 80095d0:	e9cd 5300 	strd	r5, r3, [sp]
 80095d4:	4631      	mov	r1, r6
 80095d6:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 80095d8:	463b      	mov	r3, r7
 80095da:	2200      	movs	r2, #0
 80095dc:	4620      	mov	r0, r4
 80095de:	47a8      	blx	r5
 80095e0:	b00b      	add	sp, #44	@ 0x2c
 80095e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095e4:	20012652 	.word	0x20012652

080095e8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 80095e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80095ec:	4698      	mov	r8, r3
 80095ee:	6803      	ldr	r3, [r0, #0]
 80095f0:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 80095f2:	4b15      	ldr	r3, [pc, #84]	@ (8009648 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 80095f4:	b08b      	sub	sp, #44	@ 0x2c
 80095f6:	4617      	mov	r7, r2
 80095f8:	f8b3 9000 	ldrh.w	r9, [r3]
 80095fc:	460e      	mov	r6, r1
 80095fe:	4604      	mov	r4, r0
 8009600:	f7ff ff82 	bl	8009508 <_ZN8touchgfx3HAL3lcdEv>
 8009604:	6803      	ldr	r3, [r0, #0]
 8009606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009608:	4798      	blx	r3
 800960a:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800960e:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8009612:	2302      	movs	r3, #2
 8009614:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8009618:	2301      	movs	r3, #1
 800961a:	9305      	str	r3, [sp, #20]
 800961c:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8009620:	9304      	str	r3, [sp, #16]
 8009622:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8009626:	9303      	str	r3, [sp, #12]
 8009628:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800962c:	9302      	str	r3, [sp, #8]
 800962e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8009632:	2200      	movs	r2, #0
 8009634:	e9cd 8300 	strd	r8, r3, [sp]
 8009638:	4631      	mov	r1, r6
 800963a:	463b      	mov	r3, r7
 800963c:	4620      	mov	r0, r4
 800963e:	47a8      	blx	r5
 8009640:	b00b      	add	sp, #44	@ 0x2c
 8009642:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009646:	bf00      	nop
 8009648:	20012652 	.word	0x20012652

0800964c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800964c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009650:	4698      	mov	r8, r3
 8009652:	6803      	ldr	r3, [r0, #0]
 8009654:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 8009656:	4b11      	ldr	r3, [pc, #68]	@ (800969c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8009658:	b087      	sub	sp, #28
 800965a:	f8b3 9000 	ldrh.w	r9, [r3]
 800965e:	460e      	mov	r6, r1
 8009660:	4617      	mov	r7, r2
 8009662:	4604      	mov	r4, r0
 8009664:	f7ff ff50 	bl	8009508 <_ZN8touchgfx3HAL3lcdEv>
 8009668:	6803      	ldr	r3, [r0, #0]
 800966a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800966c:	4798      	blx	r3
 800966e:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 8009672:	f8cd 900c 	str.w	r9, [sp, #12]
 8009676:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800967a:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 800967e:	9302      	str	r3, [sp, #8]
 8009680:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 8009684:	9301      	str	r3, [sp, #4]
 8009686:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800968a:	9300      	str	r3, [sp, #0]
 800968c:	463a      	mov	r2, r7
 800968e:	4643      	mov	r3, r8
 8009690:	4631      	mov	r1, r6
 8009692:	4620      	mov	r0, r4
 8009694:	47a8      	blx	r5
 8009696:	b007      	add	sp, #28
 8009698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800969c:	20012652 	.word	0x20012652

080096a0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 80096a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a4:	4604      	mov	r4, r0
 80096a6:	b08f      	sub	sp, #60	@ 0x3c
 80096a8:	4610      	mov	r0, r2
 80096aa:	460d      	mov	r5, r1
 80096ac:	4691      	mov	r9, r2
 80096ae:	461e      	mov	r6, r3
 80096b0:	f006 ff20 	bl	80104f4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80096b4:	2800      	cmp	r0, #0
 80096b6:	f000 809d 	beq.w	80097f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 80096ba:	6823      	ldr	r3, [r4, #0]
 80096bc:	f8df b198 	ldr.w	fp, [pc, #408]	@ 8009858 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 80096c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096c2:	f8df a198 	ldr.w	sl, [pc, #408]	@ 800985c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 80096c6:	4f61      	ldr	r7, [pc, #388]	@ (800984c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80096c8:	4620      	mov	r0, r4
 80096ca:	4798      	blx	r3
 80096cc:	6823      	ldr	r3, [r4, #0]
 80096ce:	4620      	mov	r0, r4
 80096d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096d2:	4798      	blx	r3
 80096d4:	f8bb 3000 	ldrh.w	r3, [fp]
 80096d8:	9301      	str	r3, [sp, #4]
 80096da:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 80096de:	f8ba 3000 	ldrh.w	r3, [sl]
 80096e2:	9302      	str	r3, [sp, #8]
 80096e4:	883b      	ldrh	r3, [r7, #0]
 80096e6:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 80096ea:	9303      	str	r3, [sp, #12]
 80096ec:	4b58      	ldr	r3, [pc, #352]	@ (8009850 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80096ee:	9305      	str	r3, [sp, #20]
 80096f0:	881a      	ldrh	r2, [r3, #0]
 80096f2:	9204      	str	r2, [sp, #16]
 80096f4:	4640      	mov	r0, r8
 80096f6:	f006 ff91 	bl	801061c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80096fa:	8038      	strh	r0, [r7, #0]
 80096fc:	4640      	mov	r0, r8
 80096fe:	f006 ffc1 	bl	8010684 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8009702:	9b05      	ldr	r3, [sp, #20]
 8009704:	b280      	uxth	r0, r0
 8009706:	8018      	strh	r0, [r3, #0]
 8009708:	4b52      	ldr	r3, [pc, #328]	@ (8009854 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d174      	bne.n	80097fa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8009710:	883b      	ldrh	r3, [r7, #0]
 8009712:	f8ab 3000 	strh.w	r3, [fp]
 8009716:	f8aa 0000 	strh.w	r0, [sl]
 800971a:	4648      	mov	r0, r9
 800971c:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 8009720:	f006 fee8 	bl	80104f4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8009724:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 8009728:	2200      	movs	r2, #0
 800972a:	4611      	mov	r1, r2
 800972c:	4628      	mov	r0, r5
 800972e:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8009732:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8009736:	f7f9 f997 	bl	8002a68 <_ZN8touchgfx8Drawable5setXYEss>
 800973a:	2301      	movs	r3, #1
 800973c:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 8009740:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8009744:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8009748:	2b00      	cmp	r3, #0
 800974a:	dd5c      	ble.n	8009806 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800974c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8009750:	2b00      	cmp	r3, #0
 8009752:	dd58      	ble.n	8009806 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8009754:	462a      	mov	r2, r5
 8009756:	ab0a      	add	r3, sp, #40	@ 0x28
 8009758:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800975c:	6851      	ldr	r1, [r2, #4]
 800975e:	c303      	stmia	r3!, {r0, r1}
 8009760:	4631      	mov	r1, r6
 8009762:	a80a      	add	r0, sp, #40	@ 0x28
 8009764:	f7ff fbfa 	bl	8008f5c <_ZN8touchgfx4RectaNERKS0_>
 8009768:	4b38      	ldr	r3, [pc, #224]	@ (800984c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800976a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800976e:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8009772:	2100      	movs	r1, #0
 8009774:	aa0a      	add	r2, sp, #40	@ 0x28
 8009776:	4b36      	ldr	r3, [pc, #216]	@ (8009850 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8009778:	910c      	str	r1, [sp, #48]	@ 0x30
 800977a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800977e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009782:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8009786:	ab08      	add	r3, sp, #32
 8009788:	e883 0003 	stmia.w	r3, {r0, r1}
 800978c:	4618      	mov	r0, r3
 800978e:	a90c      	add	r1, sp, #48	@ 0x30
 8009790:	f7ff fbe4 	bl	8008f5c <_ZN8touchgfx4RectaNERKS0_>
 8009794:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8009796:	2b00      	cmp	r3, #0
 8009798:	d13c      	bne.n	8009814 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 800979a:	2000      	movs	r0, #0
 800979c:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 80097a0:	2600      	movs	r6, #0
 80097a2:	682a      	ldr	r2, [r5, #0]
 80097a4:	696b      	ldr	r3, [r5, #20]
 80097a6:	616e      	str	r6, [r5, #20]
 80097a8:	9305      	str	r3, [sp, #20]
 80097aa:	6892      	ldr	r2, [r2, #8]
 80097ac:	a908      	add	r1, sp, #32
 80097ae:	4628      	mov	r0, r5
 80097b0:	4790      	blx	r2
 80097b2:	9b05      	ldr	r3, [sp, #20]
 80097b4:	616b      	str	r3, [r5, #20]
 80097b6:	4652      	mov	r2, sl
 80097b8:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 80097bc:	4649      	mov	r1, r9
 80097be:	4628      	mov	r0, r5
 80097c0:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 80097c4:	f7f9 f950 	bl	8002a68 <_ZN8touchgfx8Drawable5setXYEss>
 80097c8:	4b23      	ldr	r3, [pc, #140]	@ (8009858 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 80097ca:	9a01      	ldr	r2, [sp, #4]
 80097cc:	801a      	strh	r2, [r3, #0]
 80097ce:	4b23      	ldr	r3, [pc, #140]	@ (800985c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 80097d0:	9a02      	ldr	r2, [sp, #8]
 80097d2:	801a      	strh	r2, [r3, #0]
 80097d4:	4b1d      	ldr	r3, [pc, #116]	@ (800984c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80097d6:	9a03      	ldr	r2, [sp, #12]
 80097d8:	801a      	strh	r2, [r3, #0]
 80097da:	4b1d      	ldr	r3, [pc, #116]	@ (8009850 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80097dc:	9a04      	ldr	r2, [sp, #16]
 80097de:	801a      	strh	r2, [r3, #0]
 80097e0:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 80097e4:	6823      	ldr	r3, [r4, #0]
 80097e6:	4620      	mov	r0, r4
 80097e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097ea:	4798      	blx	r3
 80097ec:	6823      	ldr	r3, [r4, #0]
 80097ee:	4620      	mov	r0, r4
 80097f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097f2:	4798      	blx	r3
 80097f4:	b00f      	add	sp, #60	@ 0x3c
 80097f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097fa:	883b      	ldrh	r3, [r7, #0]
 80097fc:	f8ab 0000 	strh.w	r0, [fp]
 8009800:	f8aa 3000 	strh.w	r3, [sl]
 8009804:	e789      	b.n	800971a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8009806:	462a      	mov	r2, r5
 8009808:	ab0a      	add	r3, sp, #40	@ 0x28
 800980a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800980e:	6851      	ldr	r1, [r2, #4]
 8009810:	c303      	stmia	r3!, {r0, r1}
 8009812:	e7a9      	b.n	8009768 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8009814:	a807      	add	r0, sp, #28
 8009816:	f007 f877 	bl	8010908 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800981a:	4606      	mov	r6, r0
 800981c:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800981e:	6803      	ldr	r3, [r0, #0]
 8009820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009822:	4798      	blx	r3
 8009824:	4286      	cmp	r6, r0
 8009826:	d1b8      	bne.n	800979a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8009828:	f7ff fe6e 	bl	8009508 <_ZN8touchgfx3HAL3lcdEv>
 800982c:	6803      	ldr	r3, [r0, #0]
 800982e:	4606      	mov	r6, r0
 8009830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009832:	9305      	str	r3, [sp, #20]
 8009834:	a807      	add	r0, sp, #28
 8009836:	f007 f867 	bl	8010908 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800983a:	9b05      	ldr	r3, [sp, #20]
 800983c:	4601      	mov	r1, r0
 800983e:	4630      	mov	r0, r6
 8009840:	4798      	blx	r3
 8009842:	f080 0001 	eor.w	r0, r0, #1
 8009846:	b2c0      	uxtb	r0, r0
 8009848:	e7a8      	b.n	800979c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800984a:	bf00      	nop
 800984c:	2001264c 	.word	0x2001264c
 8009850:	2001264e 	.word	0x2001264e
 8009854:	20012650 	.word	0x20012650
 8009858:	20012652 	.word	0x20012652
 800985c:	20012654 	.word	0x20012654

08009860 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8009860:	b510      	push	{r4, lr}
 8009862:	4b07      	ldr	r3, [pc, #28]	@ (8009880 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8009864:	781b      	ldrb	r3, [r3, #0]
 8009866:	4604      	mov	r4, r0
 8009868:	b13b      	cbz	r3, 800987a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800986a:	6803      	ldr	r3, [r0, #0]
 800986c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800986e:	4798      	blx	r3
 8009870:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009872:	4283      	cmp	r3, r0
 8009874:	d101      	bne.n	800987a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8009876:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8009878:	bd10      	pop	{r4, pc}
 800987a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800987c:	e7fc      	b.n	8009878 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800987e:	bf00      	nop
 8009880:	20012656 	.word	0x20012656

08009884 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8009884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009888:	b08a      	sub	sp, #40	@ 0x28
 800988a:	461d      	mov	r5, r3
 800988c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009890:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8009894:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8009898:	f8ad 3018 	strh.w	r3, [sp, #24]
 800989c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 80098a0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80098a4:	2400      	movs	r4, #0
 80098a6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80098aa:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 80098ae:	f8ad 301c 	strh.w	r3, [sp, #28]
 80098b2:	4690      	mov	r8, r2
 80098b4:	4607      	mov	r7, r0
 80098b6:	9404      	str	r4, [sp, #16]
 80098b8:	f88d 4020 	strb.w	r4, [sp, #32]
 80098bc:	f7ff ffd0 	bl	8009860 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80098c0:	fb06 8505 	mla	r5, r6, r5, r8
 80098c4:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	9505      	str	r5, [sp, #20]
 80098cc:	f8ad 601e 	strh.w	r6, [sp, #30]
 80098d0:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 80098d4:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 80098d8:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 80098dc:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 80098e0:	6803      	ldr	r3, [r0, #0]
 80098e2:	a901      	add	r1, sp, #4
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	4798      	blx	r3
 80098e8:	b00a      	add	sp, #40	@ 0x28
 80098ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080098ee <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 80098ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80098f2:	b08b      	sub	sp, #44	@ 0x2c
 80098f4:	2400      	movs	r4, #0
 80098f6:	461d      	mov	r5, r3
 80098f8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80098fc:	4688      	mov	r8, r1
 80098fe:	4691      	mov	r9, r2
 8009900:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 8009904:	9404      	str	r4, [sp, #16]
 8009906:	4607      	mov	r7, r0
 8009908:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800990c:	f7ff ffa8 	bl	8009860 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009910:	fb06 9505 	mla	r5, r6, r5, r9
 8009914:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8009918:	f8ad 3018 	strh.w	r3, [sp, #24]
 800991c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8009920:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	9505      	str	r5, [sp, #20]
 8009928:	f8ad 301a 	strh.w	r3, [sp, #26]
 800992c:	f8ad 401c 	strh.w	r4, [sp, #28]
 8009930:	f8ad 601e 	strh.w	r6, [sp, #30]
 8009934:	f8cd 8010 	str.w	r8, [sp, #16]
 8009938:	f8ad 4020 	strh.w	r4, [sp, #32]
 800993c:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8009940:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 8009944:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8009948:	6803      	ldr	r3, [r0, #0]
 800994a:	a901      	add	r1, sp, #4
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	4798      	blx	r3
 8009950:	b00b      	add	sp, #44	@ 0x2c
 8009952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08009958 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8009958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800995c:	b08a      	sub	sp, #40	@ 0x28
 800995e:	4698      	mov	r8, r3
 8009960:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8009964:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 8009968:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 800996c:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 8009970:	2300      	movs	r3, #0
 8009972:	2d0b      	cmp	r5, #11
 8009974:	4606      	mov	r6, r0
 8009976:	9304      	str	r3, [sp, #16]
 8009978:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 800997c:	d138      	bne.n	80099f0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x98>
 800997e:	2380      	movs	r3, #128	@ 0x80
 8009980:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8009984:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8009988:	f8ad 3018 	strh.w	r3, [sp, #24]
 800998c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8009990:	f8ad 301a 	strh.w	r3, [sp, #26]
 8009994:	f88d 0020 	strb.w	r0, [sp, #32]
 8009998:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800999c:	f8ad 301c 	strh.w	r3, [sp, #28]
 80099a0:	4630      	mov	r0, r6
 80099a2:	9203      	str	r2, [sp, #12]
 80099a4:	f7ff ff5c 	bl	8009860 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80099a8:	2c0b      	cmp	r4, #11
 80099aa:	bf98      	it	ls
 80099ac:	4b1b      	ldrls	r3, [pc, #108]	@ (8009a1c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 80099ae:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 80099b2:	bf98      	it	ls
 80099b4:	5d19      	ldrbls	r1, [r3, r4]
 80099b6:	f8ad 701e 	strh.w	r7, [sp, #30]
 80099ba:	bf88      	it	hi
 80099bc:	2100      	movhi	r1, #0
 80099be:	fb02 8307 	mla	r3, r2, r7, r8
 80099c2:	10c9      	asrs	r1, r1, #3
 80099c4:	fb01 0003 	mla	r0, r1, r3, r0
 80099c8:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 80099cc:	9005      	str	r0, [sp, #20]
 80099ce:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 80099d2:	6870      	ldr	r0, [r6, #4]
 80099d4:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 80099d8:	2300      	movs	r3, #0
 80099da:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 80099de:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 80099e2:	6803      	ldr	r3, [r0, #0]
 80099e4:	a901      	add	r1, sp, #4
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	4798      	blx	r3
 80099ea:	b00a      	add	sp, #40	@ 0x28
 80099ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099f0:	2d02      	cmp	r5, #2
 80099f2:	d109      	bne.n	8009a08 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xb0>
 80099f4:	28ff      	cmp	r0, #255	@ 0xff
 80099f6:	d105      	bne.n	8009a04 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xac>
 80099f8:	f1bc 0f00 	cmp.w	ip, #0
 80099fc:	bf14      	ite	ne
 80099fe:	2340      	movne	r3, #64	@ 0x40
 8009a00:	2320      	moveq	r3, #32
 8009a02:	e7bd      	b.n	8009980 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8009a04:	2340      	movs	r3, #64	@ 0x40
 8009a06:	e7bb      	b.n	8009980 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8009a08:	28ff      	cmp	r0, #255	@ 0xff
 8009a0a:	d105      	bne.n	8009a18 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc0>
 8009a0c:	f1bc 0f00 	cmp.w	ip, #0
 8009a10:	bf14      	ite	ne
 8009a12:	2304      	movne	r3, #4
 8009a14:	2301      	moveq	r3, #1
 8009a16:	e7b3      	b.n	8009980 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8009a18:	2304      	movs	r3, #4
 8009a1a:	e7b1      	b.n	8009980 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8009a1c:	080159b4 	.word	0x080159b4

08009a20 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8009a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a24:	b08b      	sub	sp, #44	@ 0x2c
 8009a26:	461d      	mov	r5, r3
 8009a28:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 8009a2c:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 8009a30:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 8009a34:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 8009a38:	bf14      	ite	ne
 8009a3a:	2308      	movne	r3, #8
 8009a3c:	2302      	moveq	r3, #2
 8009a3e:	2400      	movs	r4, #0
 8009a40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009a44:	4688      	mov	r8, r1
 8009a46:	4693      	mov	fp, r2
 8009a48:	9404      	str	r4, [sp, #16]
 8009a4a:	4607      	mov	r7, r0
 8009a4c:	f7ff ff08 	bl	8009860 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009a50:	2e0b      	cmp	r6, #11
 8009a52:	bf98      	it	ls
 8009a54:	4b15      	ldrls	r3, [pc, #84]	@ (8009aac <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8009a56:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8009a5a:	bf98      	it	ls
 8009a5c:	5d9c      	ldrbls	r4, [r3, r6]
 8009a5e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8009a62:	f8ad 3018 	strh.w	r3, [sp, #24]
 8009a66:	fb05 b50a 	mla	r5, r5, sl, fp
 8009a6a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8009a6e:	f8ad 301a 	strh.w	r3, [sp, #26]
 8009a72:	10e4      	asrs	r4, r4, #3
 8009a74:	fb04 0405 	mla	r4, r4, r5, r0
 8009a78:	2300      	movs	r3, #0
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	9405      	str	r4, [sp, #20]
 8009a7e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009a82:	f8ad a01e 	strh.w	sl, [sp, #30]
 8009a86:	f8cd 8010 	str.w	r8, [sp, #16]
 8009a8a:	f88d 9020 	strb.w	r9, [sp, #32]
 8009a8e:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 8009a92:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8009a96:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 8009a9a:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 8009a9e:	6803      	ldr	r3, [r0, #0]
 8009aa0:	a901      	add	r1, sp, #4
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	4798      	blx	r3
 8009aa6:	b00b      	add	sp, #44	@ 0x2c
 8009aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aac:	080159b4 	.word	0x080159b4

08009ab0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8009ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ab4:	461e      	mov	r6, r3
 8009ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8009ae0 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8009ab8:	460f      	mov	r7, r1
 8009aba:	881d      	ldrh	r5, [r3, #0]
 8009abc:	4690      	mov	r8, r2
 8009abe:	f7ff fd23 	bl	8009508 <_ZN8touchgfx3HAL3lcdEv>
 8009ac2:	6803      	ldr	r3, [r0, #0]
 8009ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ac6:	4798      	blx	r3
 8009ac8:	280b      	cmp	r0, #11
 8009aca:	bf9a      	itte	ls
 8009acc:	4b05      	ldrls	r3, [pc, #20]	@ (8009ae4 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8009ace:	5c1c      	ldrbls	r4, [r3, r0]
 8009ad0:	2400      	movhi	r4, #0
 8009ad2:	fb08 7005 	mla	r0, r8, r5, r7
 8009ad6:	10e4      	asrs	r4, r4, #3
 8009ad8:	fb04 6000 	mla	r0, r4, r0, r6
 8009adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ae0:	20012652 	.word	0x20012652
 8009ae4:	080159b4 	.word	0x080159b4

08009ae8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8009ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009aea:	b08b      	sub	sp, #44	@ 0x2c
 8009aec:	461f      	mov	r7, r3
 8009aee:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8009af2:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8009af6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8009afa:	f8ad 3018 	strh.w	r3, [sp, #24]
 8009afe:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8009b02:	f8ad 301a 	strh.w	r3, [sp, #26]
 8009b06:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8009b0a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009b0e:	2500      	movs	r5, #0
 8009b10:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8009b14:	f88d 3020 	strb.w	r3, [sp, #32]
 8009b18:	4604      	mov	r4, r0
 8009b1a:	4616      	mov	r6, r2
 8009b1c:	9504      	str	r5, [sp, #16]
 8009b1e:	f7ff fe9f 	bl	8009860 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009b22:	463a      	mov	r2, r7
 8009b24:	4631      	mov	r1, r6
 8009b26:	4603      	mov	r3, r0
 8009b28:	4620      	mov	r0, r4
 8009b2a:	f7ff ffc1 	bl	8009ab0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8009b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8009b68 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8009b30:	9005      	str	r0, [sp, #20]
 8009b32:	881b      	ldrh	r3, [r3, #0]
 8009b34:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009b38:	f7ff fce6 	bl	8009508 <_ZN8touchgfx3HAL3lcdEv>
 8009b3c:	6803      	ldr	r3, [r0, #0]
 8009b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b40:	4798      	blx	r3
 8009b42:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009b44:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 8009b48:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8009b4c:	9304      	str	r3, [sp, #16]
 8009b4e:	6860      	ldr	r0, [r4, #4]
 8009b50:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8009b54:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8009b58:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 8009b5c:	6803      	ldr	r3, [r0, #0]
 8009b5e:	a901      	add	r1, sp, #4
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	4798      	blx	r3
 8009b64:	b00b      	add	sp, #44	@ 0x2c
 8009b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b68:	20012652 	.word	0x20012652

08009b6c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8009b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b6e:	b08d      	sub	sp, #52	@ 0x34
 8009b70:	466b      	mov	r3, sp
 8009b72:	e883 0006 	stmia.w	r3, {r1, r2}
 8009b76:	2300      	movs	r3, #0
 8009b78:	9306      	str	r3, [sp, #24]
 8009b7a:	6803      	ldr	r3, [r0, #0]
 8009b7c:	f8bd 6000 	ldrh.w	r6, [sp]
 8009b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b82:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8009b86:	2501      	movs	r5, #1
 8009b88:	9503      	str	r5, [sp, #12]
 8009b8a:	4604      	mov	r4, r0
 8009b8c:	4798      	blx	r3
 8009b8e:	463a      	mov	r2, r7
 8009b90:	4631      	mov	r1, r6
 8009b92:	4603      	mov	r3, r0
 8009b94:	4620      	mov	r0, r4
 8009b96:	f7ff ff8b 	bl	8009ab0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8009b9a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009b9c:	9307      	str	r3, [sp, #28]
 8009b9e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8009ba2:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009ba6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009baa:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8009bae:	4b0f      	ldr	r3, [pc, #60]	@ (8009bec <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8009bb0:	9004      	str	r0, [sp, #16]
 8009bb2:	881b      	ldrh	r3, [r3, #0]
 8009bb4:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8009bb8:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8009bbc:	f7ff fca4 	bl	8009508 <_ZN8touchgfx3HAL3lcdEv>
 8009bc0:	6803      	ldr	r3, [r0, #0]
 8009bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bc4:	4798      	blx	r3
 8009bc6:	23ff      	movs	r3, #255	@ 0xff
 8009bc8:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8009bcc:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8009bd0:	6860      	ldr	r0, [r4, #4]
 8009bd2:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8009bd6:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8009bda:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8009bde:	6803      	ldr	r3, [r0, #0]
 8009be0:	a903      	add	r1, sp, #12
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	4798      	blx	r3
 8009be6:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8009be8:	b00d      	add	sp, #52	@ 0x34
 8009bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bec:	20012652 	.word	0x20012652

08009bf0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8009bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bf4:	b08c      	sub	sp, #48	@ 0x30
 8009bf6:	461e      	mov	r6, r3
 8009bf8:	466d      	mov	r5, sp
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	e885 0006 	stmia.w	r5, {r1, r2}
 8009c00:	9306      	str	r3, [sp, #24]
 8009c02:	6803      	ldr	r3, [r0, #0]
 8009c04:	f8bd 7000 	ldrh.w	r7, [sp]
 8009c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c0a:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8009c0e:	2501      	movs	r5, #1
 8009c10:	9503      	str	r5, [sp, #12]
 8009c12:	4604      	mov	r4, r0
 8009c14:	4798      	blx	r3
 8009c16:	4642      	mov	r2, r8
 8009c18:	4639      	mov	r1, r7
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	f7ff ff47 	bl	8009ab0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8009c22:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8009c26:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009c2a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8009c2e:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8009c32:	4b11      	ldr	r3, [pc, #68]	@ (8009c78 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8009c34:	9004      	str	r0, [sp, #16]
 8009c36:	881b      	ldrh	r3, [r3, #0]
 8009c38:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8009c3c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009c3e:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8009c42:	9607      	str	r6, [sp, #28]
 8009c44:	f7ff fc60 	bl	8009508 <_ZN8touchgfx3HAL3lcdEv>
 8009c48:	6803      	ldr	r3, [r0, #0]
 8009c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c4c:	4798      	blx	r3
 8009c4e:	23ff      	movs	r3, #255	@ 0xff
 8009c50:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8009c54:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8009c58:	6860      	ldr	r0, [r4, #4]
 8009c5a:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8009c5e:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8009c62:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8009c66:	6803      	ldr	r3, [r0, #0]
 8009c68:	a903      	add	r1, sp, #12
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	4798      	blx	r3
 8009c6e:	4630      	mov	r0, r6
 8009c70:	b00c      	add	sp, #48	@ 0x30
 8009c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c76:	bf00      	nop
 8009c78:	20012652 	.word	0x20012652

08009c7c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8009c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c7e:	b085      	sub	sp, #20
 8009c80:	ac02      	add	r4, sp, #8
 8009c82:	e884 0006 	stmia.w	r4, {r1, r2}
 8009c86:	4605      	mov	r5, r0
 8009c88:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8009c8c:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8009c90:	f7ff fde6 	bl	8009860 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009c94:	463a      	mov	r2, r7
 8009c96:	4603      	mov	r3, r0
 8009c98:	4631      	mov	r1, r6
 8009c9a:	4628      	mov	r0, r5
 8009c9c:	f7ff ff08 	bl	8009ab0 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8009ca0:	4a05      	ldr	r2, [pc, #20]	@ (8009cb8 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8009ca2:	682b      	ldr	r3, [r5, #0]
 8009ca4:	8812      	ldrh	r2, [r2, #0]
 8009ca6:	9200      	str	r2, [sp, #0]
 8009ca8:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8009caa:	e894 0006 	ldmia.w	r4, {r1, r2}
 8009cae:	4603      	mov	r3, r0
 8009cb0:	4628      	mov	r0, r5
 8009cb2:	47b0      	blx	r6
 8009cb4:	b005      	add	sp, #20
 8009cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cb8:	20012652 	.word	0x20012652

08009cbc <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8009cbc:	b570      	push	{r4, r5, r6, lr}
 8009cbe:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 8009cc2:	4604      	mov	r4, r0
 8009cc4:	b19b      	cbz	r3, 8009cee <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8009cc6:	2002      	movs	r0, #2
 8009cc8:	f7f6 fd90 	bl	80007ec <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8009ccc:	2300      	movs	r3, #0
 8009cce:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8009cd2:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8009cd6:	6823      	ldr	r3, [r4, #0]
 8009cd8:	4620      	mov	r0, r4
 8009cda:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 8009cde:	f7ff fdbf 	bl	8009860 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009ce2:	462b      	mov	r3, r5
 8009ce4:	4601      	mov	r1, r0
 8009ce6:	4620      	mov	r0, r4
 8009ce8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009cec:	4718      	bx	r3
 8009cee:	bd70      	pop	{r4, r5, r6, pc}

08009cf0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8009cf0:	b538      	push	{r3, r4, r5, lr}
 8009cf2:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8009cf6:	428b      	cmp	r3, r1
 8009cf8:	4604      	mov	r4, r0
 8009cfa:	460d      	mov	r5, r1
 8009cfc:	d006      	beq.n	8009d0c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8009cfe:	6803      	ldr	r3, [r0, #0]
 8009d00:	b929      	cbnz	r1, 8009d0e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8009d02:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8009d06:	4798      	blx	r3
 8009d08:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 8009d0c:	bd38      	pop	{r3, r4, r5, pc}
 8009d0e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8009d12:	e7f8      	b.n	8009d06 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08009d14 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8009d14:	b510      	push	{r4, lr}
 8009d16:	4b0d      	ldr	r3, [pc, #52]	@ (8009d4c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	4604      	mov	r4, r0
 8009d1c:	b95b      	cbnz	r3, 8009d36 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8009d1e:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8009d22:	2b02      	cmp	r3, #2
 8009d24:	d007      	beq.n	8009d36 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8009d26:	6840      	ldr	r0, [r0, #4]
 8009d28:	f000 f912 	bl	8009f50 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8009d2c:	b118      	cbz	r0, 8009d36 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8009d2e:	6862      	ldr	r2, [r4, #4]
 8009d30:	7a53      	ldrb	r3, [r2, #9]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d0fc      	beq.n	8009d30 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8009d36:	f7f6 fea5 	bl	8000a84 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	2100      	movs	r1, #0
 8009d3e:	f7ff ffd7 	bl	8009cf0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8009d42:	4620      	mov	r0, r4
 8009d44:	f7ff fd8c 	bl	8009860 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8009d48:	bd10      	pop	{r4, pc}
 8009d4a:	bf00      	nop
 8009d4c:	20012656 	.word	0x20012656

08009d50 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8009d50:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8009d54:	1a13      	subs	r3, r2, r0
 8009d56:	4258      	negs	r0, r3
 8009d58:	4158      	adcs	r0, r3
 8009d5a:	4770      	bx	lr

08009d5c <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8009d5c:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8009d60:	1a9b      	subs	r3, r3, r2
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	bfdc      	itt	le
 8009d66:	6882      	ldrle	r2, [r0, #8]
 8009d68:	189b      	addle	r3, r3, r2
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	bfcc      	ite	gt
 8009d6e:	2000      	movgt	r0, #0
 8009d70:	2001      	movle	r0, #1
 8009d72:	4770      	bx	lr

08009d74 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8009d74:	6902      	ldr	r2, [r0, #16]
 8009d76:	6843      	ldr	r3, [r0, #4]
 8009d78:	2024      	movs	r0, #36	@ 0x24
 8009d7a:	fb00 3002 	mla	r0, r0, r2, r3
 8009d7e:	4770      	bx	lr

08009d80 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8009d80:	6803      	ldr	r3, [r0, #0]
 8009d82:	691b      	ldr	r3, [r3, #16]
 8009d84:	4718      	bx	r3

08009d86 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8009d86:	b570      	push	{r4, r5, r6, lr}
 8009d88:	2301      	movs	r3, #1
 8009d8a:	7203      	strb	r3, [r0, #8]
 8009d8c:	4604      	mov	r4, r0
 8009d8e:	6840      	ldr	r0, [r0, #4]
 8009d90:	6803      	ldr	r3, [r0, #0]
 8009d92:	699b      	ldr	r3, [r3, #24]
 8009d94:	4798      	blx	r3
 8009d96:	6803      	ldr	r3, [r0, #0]
 8009d98:	2b40      	cmp	r3, #64	@ 0x40
 8009d9a:	4605      	mov	r5, r0
 8009d9c:	d00c      	beq.n	8009db8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8009d9e:	d810      	bhi.n	8009dc2 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8009da0:	2b04      	cmp	r3, #4
 8009da2:	d01d      	beq.n	8009de0 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8009da4:	d804      	bhi.n	8009db0 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d006      	beq.n	8009db8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8009daa:	2b02      	cmp	r3, #2
 8009dac:	d02c      	beq.n	8009e08 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8009dae:	bd70      	pop	{r4, r5, r6, pc}
 8009db0:	2b08      	cmp	r3, #8
 8009db2:	d01d      	beq.n	8009df0 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8009db4:	2b20      	cmp	r3, #32
 8009db6:	d1fa      	bne.n	8009dae <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8009db8:	6823      	ldr	r3, [r4, #0]
 8009dba:	4620      	mov	r0, r4
 8009dbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dbe:	4798      	blx	r3
 8009dc0:	e013      	b.n	8009dea <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8009dc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009dc6:	d0f7      	beq.n	8009db8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8009dc8:	d804      	bhi.n	8009dd4 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8009dca:	2b80      	cmp	r3, #128	@ 0x80
 8009dcc:	d0f4      	beq.n	8009db8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8009dce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009dd2:	e7f0      	b.n	8009db6 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8009dd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009dd8:	d0ee      	beq.n	8009db8 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8009dda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009dde:	e7e5      	b.n	8009dac <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8009de0:	6823      	ldr	r3, [r4, #0]
 8009de2:	7f01      	ldrb	r1, [r0, #28]
 8009de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009de6:	4620      	mov	r0, r4
 8009de8:	4798      	blx	r3
 8009dea:	6823      	ldr	r3, [r4, #0]
 8009dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dee:	e006      	b.n	8009dfe <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8009df0:	6823      	ldr	r3, [r4, #0]
 8009df2:	7f01      	ldrb	r1, [r0, #28]
 8009df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009df6:	4620      	mov	r0, r4
 8009df8:	4798      	blx	r3
 8009dfa:	6823      	ldr	r3, [r4, #0]
 8009dfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dfe:	4629      	mov	r1, r5
 8009e00:	4620      	mov	r0, r4
 8009e02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009e06:	4718      	bx	r3
 8009e08:	6823      	ldr	r3, [r4, #0]
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e0e:	4798      	blx	r3
 8009e10:	e7f3      	b.n	8009dfa <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08009e12 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8009e12:	4770      	bx	lr

08009e14 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8009e14:	4770      	bx	lr

08009e16 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 8009e16:	4770      	bx	lr

08009e18 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8009e18:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8009e1c:	1ad2      	subs	r2, r2, r3
 8009e1e:	2a00      	cmp	r2, #0
 8009e20:	b510      	push	{r4, lr}
 8009e22:	bfdc      	itt	le
 8009e24:	6884      	ldrle	r4, [r0, #8]
 8009e26:	1912      	addle	r2, r2, r4
 8009e28:	2a01      	cmp	r2, #1
 8009e2a:	dd16      	ble.n	8009e5a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8009e2c:	6842      	ldr	r2, [r0, #4]
 8009e2e:	2424      	movs	r4, #36	@ 0x24
 8009e30:	fb04 2303 	mla	r3, r4, r3, r2
 8009e34:	f101 0220 	add.w	r2, r1, #32
 8009e38:	f851 4b04 	ldr.w	r4, [r1], #4
 8009e3c:	f843 4b04 	str.w	r4, [r3], #4
 8009e40:	4291      	cmp	r1, r2
 8009e42:	d1f9      	bne.n	8009e38 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8009e44:	780a      	ldrb	r2, [r1, #0]
 8009e46:	701a      	strb	r2, [r3, #0]
 8009e48:	68c3      	ldr	r3, [r0, #12]
 8009e4a:	6882      	ldr	r2, [r0, #8]
 8009e4c:	f3bf 8f5b 	dmb	ish
 8009e50:	3301      	adds	r3, #1
 8009e52:	429a      	cmp	r2, r3
 8009e54:	bfd8      	it	le
 8009e56:	1a9b      	suble	r3, r3, r2
 8009e58:	60c3      	str	r3, [r0, #12]
 8009e5a:	bd10      	pop	{r4, pc}

08009e5c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8009e5c:	6903      	ldr	r3, [r0, #16]
 8009e5e:	6882      	ldr	r2, [r0, #8]
 8009e60:	f3bf 8f5b 	dmb	ish
 8009e64:	3301      	adds	r3, #1
 8009e66:	429a      	cmp	r2, r3
 8009e68:	bfd8      	it	le
 8009e6a:	1a9b      	suble	r3, r3, r2
 8009e6c:	6103      	str	r3, [r0, #16]
 8009e6e:	4770      	bx	lr

08009e70 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8009e70:	b570      	push	{r4, r5, r6, lr}
 8009e72:	4604      	mov	r4, r0
 8009e74:	460e      	mov	r6, r1
 8009e76:	6860      	ldr	r0, [r4, #4]
 8009e78:	6803      	ldr	r3, [r0, #0]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	4798      	blx	r3
 8009e7e:	2800      	cmp	r0, #0
 8009e80:	d1f9      	bne.n	8009e76 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8009e82:	4d0d      	ldr	r5, [pc, #52]	@ (8009eb8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8009e84:	6828      	ldr	r0, [r5, #0]
 8009e86:	6803      	ldr	r3, [r0, #0]
 8009e88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009e8a:	4798      	blx	r3
 8009e8c:	f7f6 fe08 	bl	8000aa0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8009e90:	6828      	ldr	r0, [r5, #0]
 8009e92:	2101      	movs	r1, #1
 8009e94:	f7ff ff2c 	bl	8009cf0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8009e98:	6860      	ldr	r0, [r4, #4]
 8009e9a:	6803      	ldr	r3, [r0, #0]
 8009e9c:	4631      	mov	r1, r6
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	4798      	blx	r3
 8009ea2:	6823      	ldr	r3, [r4, #0]
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ea8:	4798      	blx	r3
 8009eaa:	6828      	ldr	r0, [r5, #0]
 8009eac:	6803      	ldr	r3, [r0, #0]
 8009eae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009eb2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009eb4:	4718      	bx	r3
 8009eb6:	bf00      	nop
 8009eb8:	20012658 	.word	0x20012658

08009ebc <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8009ebc:	b508      	push	{r3, lr}
 8009ebe:	f7f6 fde1 	bl	8000a84 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8009ec2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009ec6:	f7f6 bde5 	b.w	8000a94 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08009eca <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8009eca:	b510      	push	{r4, lr}
 8009ecc:	2114      	movs	r1, #20
 8009ece:	4604      	mov	r4, r0
 8009ed0:	f009 fa22 	bl	8013318 <_ZdlPvj>
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	bd10      	pop	{r4, pc}

08009ed8 <_ZN8touchgfx13DMA_Interface5startEv>:
 8009ed8:	b510      	push	{r4, lr}
 8009eda:	4604      	mov	r4, r0
 8009edc:	6840      	ldr	r0, [r0, #4]
 8009ede:	6803      	ldr	r3, [r0, #0]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4798      	blx	r3
 8009ee4:	b948      	cbnz	r0, 8009efa <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8009ee6:	7a63      	ldrb	r3, [r4, #9]
 8009ee8:	b13b      	cbz	r3, 8009efa <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8009eea:	7a23      	ldrb	r3, [r4, #8]
 8009eec:	b92b      	cbnz	r3, 8009efa <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8009eee:	6823      	ldr	r3, [r4, #0]
 8009ef0:	4620      	mov	r0, r4
 8009ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ef8:	4718      	bx	r3
 8009efa:	bd10      	pop	{r4, pc}

08009efc <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8009efc:	b570      	push	{r4, r5, r6, lr}
 8009efe:	4604      	mov	r4, r0
 8009f00:	6840      	ldr	r0, [r0, #4]
 8009f02:	6803      	ldr	r3, [r0, #0]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4798      	blx	r3
 8009f08:	4605      	mov	r5, r0
 8009f0a:	b930      	cbnz	r0, 8009f1a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8009f0c:	7a23      	ldrb	r3, [r4, #8]
 8009f0e:	b123      	cbz	r3, 8009f1a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8009f10:	6860      	ldr	r0, [r4, #4]
 8009f12:	6803      	ldr	r3, [r0, #0]
 8009f14:	695b      	ldr	r3, [r3, #20]
 8009f16:	4798      	blx	r3
 8009f18:	7225      	strb	r5, [r4, #8]
 8009f1a:	6860      	ldr	r0, [r4, #4]
 8009f1c:	6803      	ldr	r3, [r0, #0]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4798      	blx	r3
 8009f22:	b928      	cbnz	r0, 8009f30 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8009f24:	6823      	ldr	r3, [r4, #0]
 8009f26:	4620      	mov	r0, r4
 8009f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009f2e:	4718      	bx	r3
 8009f30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009f34:	f7f6 bdbc 	b.w	8000ab0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08009f38 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8009f38:	b510      	push	{r4, lr}
 8009f3a:	4c04      	ldr	r4, [pc, #16]	@ (8009f4c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8009f3c:	6082      	str	r2, [r0, #8]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	e9c0 4100 	strd	r4, r1, [r0]
 8009f44:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8009f48:	bd10      	pop	{r4, pc}
 8009f4a:	bf00      	nop
 8009f4c:	080159c8 	.word	0x080159c8

08009f50 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8009f50:	6840      	ldr	r0, [r0, #4]
 8009f52:	6803      	ldr	r3, [r0, #0]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4718      	bx	r3

08009f58 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8009f58:	2000      	movs	r0, #0
 8009f5a:	4770      	bx	lr

08009f5c <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8009f5c:	4b07      	ldr	r3, [pc, #28]	@ (8009f7c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8009f5e:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8009f60:	881b      	ldrh	r3, [r3, #0]
 8009f62:	4293      	cmp	r3, r2
 8009f64:	bf81      	itttt	hi
 8009f66:	4b06      	ldrhi	r3, [pc, #24]	@ (8009f80 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8009f68:	681b      	ldrhi	r3, [r3, #0]
 8009f6a:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8009f6e:	7858      	ldrbhi	r0, [r3, #1]
 8009f70:	bf8c      	ite	hi
 8009f72:	f000 0003 	andhi.w	r0, r0, #3
 8009f76:	2000      	movls	r0, #0
 8009f78:	4770      	bx	lr
 8009f7a:	bf00      	nop
 8009f7c:	200126ac 	.word	0x200126ac
 8009f80:	200126a8 	.word	0x200126a8

08009f84 <_ZN8touchgfx8TextAreaD1Ev>:
 8009f84:	4770      	bx	lr
	...

08009f88 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8009f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f8c:	4b10      	ldr	r3, [pc, #64]	@ (8009fd0 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8009f8e:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8009f90:	881b      	ldrh	r3, [r3, #0]
 8009f92:	428b      	cmp	r3, r1
 8009f94:	4604      	mov	r4, r0
 8009f96:	d918      	bls.n	8009fca <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8009f98:	6803      	ldr	r3, [r0, #0]
 8009f9a:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 8009f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8009fd4 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8009f9e:	6818      	ldr	r0, [r3, #0]
 8009fa0:	f7f9 fbb0 	bl	8003704 <_ZNK8touchgfx5Texts7getTextEt>
 8009fa4:	6823      	ldr	r3, [r4, #0]
 8009fa6:	4606      	mov	r6, r0
 8009fa8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009faa:	4620      	mov	r0, r4
 8009fac:	4798      	blx	r3
 8009fae:	6823      	ldr	r3, [r4, #0]
 8009fb0:	4607      	mov	r7, r0
 8009fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fb6:	4620      	mov	r0, r4
 8009fb8:	4798      	blx	r3
 8009fba:	463a      	mov	r2, r7
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	4631      	mov	r1, r6
 8009fc0:	4620      	mov	r0, r4
 8009fc2:	46ac      	mov	ip, r5
 8009fc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fc8:	4760      	bx	ip
 8009fca:	2000      	movs	r0, #0
 8009fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fd0:	200126ac 	.word	0x200126ac
 8009fd4:	200126b4 	.word	0x200126b4

08009fd8 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8009fd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009fdc:	4b17      	ldr	r3, [pc, #92]	@ (800a03c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8009fde:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8009fe0:	881b      	ldrh	r3, [r3, #0]
 8009fe2:	428b      	cmp	r3, r1
 8009fe4:	4604      	mov	r4, r0
 8009fe6:	d926      	bls.n	800a036 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8009fe8:	4b15      	ldr	r3, [pc, #84]	@ (800a040 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8009ff0:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8009ff4:	4b13      	ldr	r3, [pc, #76]	@ (800a044 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8009ff6:	7855      	ldrb	r5, [r2, #1]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8009ffe:	6833      	ldr	r3, [r6, #0]
 800a000:	69df      	ldr	r7, [r3, #28]
 800a002:	4b11      	ldr	r3, [pc, #68]	@ (800a048 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 800a004:	6818      	ldr	r0, [r3, #0]
 800a006:	f7f9 fb7d 	bl	8003704 <_ZNK8touchgfx5Texts7getTextEt>
 800a00a:	6823      	ldr	r3, [r4, #0]
 800a00c:	4680      	mov	r8, r0
 800a00e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a010:	4620      	mov	r0, r4
 800a012:	4798      	blx	r3
 800a014:	6823      	ldr	r3, [r4, #0]
 800a016:	4681      	mov	r9, r0
 800a018:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a01c:	4620      	mov	r0, r4
 800a01e:	4798      	blx	r3
 800a020:	f3c5 0581 	ubfx	r5, r5, #2, #2
 800a024:	9000      	str	r0, [sp, #0]
 800a026:	464b      	mov	r3, r9
 800a028:	4642      	mov	r2, r8
 800a02a:	4629      	mov	r1, r5
 800a02c:	4630      	mov	r0, r6
 800a02e:	47b8      	blx	r7
 800a030:	b003      	add	sp, #12
 800a032:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a036:	2000      	movs	r0, #0
 800a038:	e7fa      	b.n	800a030 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 800a03a:	bf00      	nop
 800a03c:	200126ac 	.word	0x200126ac
 800a040:	200126a8 	.word	0x200126a8
 800a044:	200126b0 	.word	0x200126b0
 800a048:	200126b4 	.word	0x200126b4

0800a04c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 800a04c:	b40e      	push	{r1, r2, r3}
 800a04e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a052:	4b2f      	ldr	r3, [pc, #188]	@ (800a110 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 800a054:	881a      	ldrh	r2, [r3, #0]
 800a056:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 800a058:	429a      	cmp	r2, r3
 800a05a:	b09d      	sub	sp, #116	@ 0x74
 800a05c:	4604      	mov	r4, r0
 800a05e:	d954      	bls.n	800a10a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 800a060:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 800a114 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 800a064:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 800a118 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 800a068:	aa26      	add	r2, sp, #152	@ 0x98
 800a06a:	9202      	str	r2, [sp, #8]
 800a06c:	f8d9 2000 	ldr.w	r2, [r9]
 800a070:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800a074:	f8d8 3000 	ldr.w	r3, [r8]
 800a078:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800a07c:	682b      	ldr	r3, [r5, #0]
 800a07e:	4628      	mov	r0, r5
 800a080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a082:	4798      	blx	r3
 800a084:	b207      	sxth	r7, r0
 800a086:	4606      	mov	r6, r0
 800a088:	a803      	add	r0, sp, #12
 800a08a:	f004 fae2 	bl	800e652 <_ZN8touchgfx12TextProviderC1Ev>
 800a08e:	682b      	ldr	r3, [r5, #0]
 800a090:	4628      	mov	r0, r5
 800a092:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a094:	4798      	blx	r3
 800a096:	682b      	ldr	r3, [r5, #0]
 800a098:	4682      	mov	sl, r0
 800a09a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a09c:	4628      	mov	r0, r5
 800a09e:	4798      	blx	r3
 800a0a0:	4653      	mov	r3, sl
 800a0a2:	9000      	str	r0, [sp, #0]
 800a0a4:	9a02      	ldr	r2, [sp, #8]
 800a0a6:	9925      	ldr	r1, [sp, #148]	@ 0x94
 800a0a8:	a803      	add	r0, sp, #12
 800a0aa:	f004 fb2d 	bl	800e708 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800a0ae:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800a0b0:	f8d9 3000 	ldr.w	r3, [r9]
 800a0b4:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 800a0b8:	8925      	ldrh	r5, [r4, #8]
 800a0ba:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 800a0be:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 800a0c2:	eba5 050c 	sub.w	r5, r5, ip
 800a0c6:	784a      	ldrb	r2, [r1, #1]
 800a0c8:	f8d8 3000 	ldr.w	r3, [r8]
 800a0cc:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 800a0d0:	b22d      	sxth	r5, r5
 800a0d2:	9500      	str	r5, [sp, #0]
 800a0d4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800a0d8:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800a0dc:	a803      	add	r0, sp, #12
 800a0de:	f002 f907 	bl	800c2f0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 800a0e2:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 800a0e6:	18b9      	adds	r1, r7, r2
 800a0e8:	2900      	cmp	r1, #0
 800a0ea:	b203      	sxth	r3, r0
 800a0ec:	dd0b      	ble.n	800a106 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 800a0ee:	3b01      	subs	r3, #1
 800a0f0:	fb13 f302 	smulbb	r3, r3, r2
 800a0f4:	fb16 3300 	smlabb	r3, r6, r0, r3
 800a0f8:	b21f      	sxth	r7, r3
 800a0fa:	4638      	mov	r0, r7
 800a0fc:	b01d      	add	sp, #116	@ 0x74
 800a0fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a102:	b003      	add	sp, #12
 800a104:	4770      	bx	lr
 800a106:	2b00      	cmp	r3, #0
 800a108:	dcf7      	bgt.n	800a0fa <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 800a10a:	2700      	movs	r7, #0
 800a10c:	e7f5      	b.n	800a0fa <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 800a10e:	bf00      	nop
 800a110:	200126ac 	.word	0x200126ac
 800a114:	200126a8 	.word	0x200126a8
 800a118:	200126b0 	.word	0x200126b0

0800a11c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 800a11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a120:	4bbc      	ldr	r3, [pc, #752]	@ (800a414 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 800a122:	460c      	mov	r4, r1
 800a124:	881b      	ldrh	r3, [r3, #0]
 800a126:	8d89      	ldrh	r1, [r1, #44]	@ 0x2c
 800a128:	428b      	cmp	r3, r1
 800a12a:	b0a9      	sub	sp, #164	@ 0xa4
 800a12c:	4680      	mov	r8, r0
 800a12e:	d809      	bhi.n	800a144 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 800a130:	2300      	movs	r3, #0
 800a132:	f04f 32ff 	mov.w	r2, #4294967295
 800a136:	e9c0 3200 	strd	r3, r2, [r0]
 800a13a:	6083      	str	r3, [r0, #8]
 800a13c:	4640      	mov	r0, r8
 800a13e:	b029      	add	sp, #164	@ 0xa4
 800a140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a144:	4eb4      	ldr	r6, [pc, #720]	@ (800a418 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 800a146:	6833      	ldr	r3, [r6, #0]
 800a148:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 800a14c:	4bb3      	ldr	r3, [pc, #716]	@ (800a41c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800a154:	4bb2      	ldr	r3, [pc, #712]	@ (800a420 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 800a156:	6818      	ldr	r0, [r3, #0]
 800a158:	f7f9 fad4 	bl	8003704 <_ZNK8touchgfx5Texts7getTextEt>
 800a15c:	682b      	ldr	r3, [r5, #0]
 800a15e:	4681      	mov	r9, r0
 800a160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a162:	4628      	mov	r0, r5
 800a164:	4798      	blx	r3
 800a166:	8ea7      	ldrh	r7, [r4, #52]	@ 0x34
 800a168:	b203      	sxth	r3, r0
 800a16a:	4407      	add	r7, r0
 800a16c:	9304      	str	r3, [sp, #16]
 800a16e:	b2bb      	uxth	r3, r7
 800a170:	9303      	str	r3, [sp, #12]
 800a172:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 800a176:	4682      	mov	sl, r0
 800a178:	a80f      	add	r0, sp, #60	@ 0x3c
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	f040 80a6 	bne.w	800a2cc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1b0>
 800a180:	f004 fa67 	bl	800e652 <_ZN8touchgfx12TextProviderC1Ev>
 800a184:	682b      	ldr	r3, [r5, #0]
 800a186:	4628      	mov	r0, r5
 800a188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a18a:	4798      	blx	r3
 800a18c:	682b      	ldr	r3, [r5, #0]
 800a18e:	4606      	mov	r6, r0
 800a190:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a192:	4628      	mov	r0, r5
 800a194:	4798      	blx	r3
 800a196:	6823      	ldr	r3, [r4, #0]
 800a198:	4607      	mov	r7, r0
 800a19a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a19c:	4620      	mov	r0, r4
 800a19e:	4798      	blx	r3
 800a1a0:	6823      	ldr	r3, [r4, #0]
 800a1a2:	4683      	mov	fp, r0
 800a1a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1a8:	4620      	mov	r0, r4
 800a1aa:	4798      	blx	r3
 800a1ac:	463b      	mov	r3, r7
 800a1ae:	e9cd b000 	strd	fp, r0, [sp]
 800a1b2:	4649      	mov	r1, r9
 800a1b4:	4632      	mov	r2, r6
 800a1b6:	a80f      	add	r0, sp, #60	@ 0x3c
 800a1b8:	f004 fabb 	bl	800e732 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 800a1bc:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800a1c0:	f8df b254 	ldr.w	fp, [pc, #596]	@ 800a418 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 800a1c4:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800a1c8:	f04f 0600 	mov.w	r6, #0
 800a1cc:	bf0c      	ite	eq
 800a1ce:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 800a1d2:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 800a1d6:	4637      	mov	r7, r6
 800a1d8:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800a1da:	f8db 3000 	ldr.w	r3, [fp]
 800a1de:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800a1e2:	4629      	mov	r1, r5
 800a1e4:	785b      	ldrb	r3, [r3, #1]
 800a1e6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800a1ea:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800a1ee:	a80f      	add	r0, sp, #60	@ 0x3c
 800a1f0:	f001 f9a9 	bl	800b546 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800a1f4:	9b03      	ldr	r3, [sp, #12]
 800a1f6:	4286      	cmp	r6, r0
 800a1f8:	bfb8      	it	lt
 800a1fa:	4606      	movlt	r6, r0
 800a1fc:	3701      	adds	r7, #1
 800a1fe:	eba9 0903 	sub.w	r9, r9, r3
 800a202:	a80f      	add	r0, sp, #60	@ 0x3c
 800a204:	b236      	sxth	r6, r6
 800a206:	b2bf      	uxth	r7, r7
 800a208:	fa0f f989 	sxth.w	r9, r9
 800a20c:	f004 fa48 	bl	800e6a0 <_ZN8touchgfx12TextProvider11endOfStringEv>
 800a210:	b918      	cbnz	r0, 800a21a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 800a212:	7a2b      	ldrb	r3, [r5, #8]
 800a214:	444b      	add	r3, r9
 800a216:	2b00      	cmp	r3, #0
 800a218:	dcde      	bgt.n	800a1d8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xbc>
 800a21a:	9b03      	ldr	r3, [sp, #12]
 800a21c:	9a04      	ldr	r2, [sp, #16]
 800a21e:	f895 9009 	ldrb.w	r9, [r5, #9]
 800a222:	fb13 f707 	smulbb	r7, r3, r7
 800a226:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800a228:	1aff      	subs	r7, r7, r3
 800a22a:	b2bf      	uxth	r7, r7
 800a22c:	b23b      	sxth	r3, r7
 800a22e:	429a      	cmp	r2, r3
 800a230:	bfa8      	it	ge
 800a232:	4657      	movge	r7, sl
 800a234:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800a238:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800a23c:	6823      	ldr	r3, [r4, #0]
 800a23e:	bf08      	it	eq
 800a240:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 800a244:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a246:	bf18      	it	ne
 800a248:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 800a24c:	4620      	mov	r0, r4
 800a24e:	4798      	blx	r3
 800a250:	444f      	add	r7, r9
 800a252:	fa1f f987 	uxth.w	r9, r7
 800a256:	2801      	cmp	r0, #1
 800a258:	fa0f f789 	sxth.w	r7, r9
 800a25c:	b2b3      	uxth	r3, r6
 800a25e:	f000 80e1 	beq.w	800a424 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 800a262:	2802      	cmp	r0, #2
 800a264:	f894 6037 	ldrb.w	r6, [r4, #55]	@ 0x37
 800a268:	f000 80e2 	beq.w	800a430 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 800a26c:	7aea      	ldrb	r2, [r5, #11]
 800a26e:	7b2d      	ldrb	r5, [r5, #12]
 800a270:	b236      	sxth	r6, r6
 800a272:	1ab6      	subs	r6, r6, r2
 800a274:	442a      	add	r2, r5
 800a276:	4413      	add	r3, r2
 800a278:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 800a27c:	fa1f fa86 	uxth.w	sl, r6
 800a280:	b29b      	uxth	r3, r3
 800a282:	2a02      	cmp	r2, #2
 800a284:	fa0f fb8a 	sxth.w	fp, sl
 800a288:	b21e      	sxth	r6, r3
 800a28a:	f000 80d5 	beq.w	800a438 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 800a28e:	2a03      	cmp	r2, #3
 800a290:	f000 80dd 	beq.w	800a44e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 800a294:	2a01      	cmp	r2, #1
 800a296:	f040 80e5 	bne.w	800a464 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 800a29a:	8925      	ldrh	r5, [r4, #8]
 800a29c:	4633      	mov	r3, r6
 800a29e:	eba5 0909 	sub.w	r9, r5, r9
 800a2a2:	463e      	mov	r6, r7
 800a2a4:	465d      	mov	r5, fp
 800a2a6:	461f      	mov	r7, r3
 800a2a8:	fa0f fb89 	sxth.w	fp, r9
 800a2ac:	4b5c      	ldr	r3, [pc, #368]	@ (800a420 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 800a2ae:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800a2b0:	6818      	ldr	r0, [r3, #0]
 800a2b2:	f7f9 fa27 	bl	8003704 <_ZNK8touchgfx5Texts7getTextEt>
 800a2b6:	f8a8 b000 	strh.w	fp, [r8]
 800a2ba:	f8a8 5002 	strh.w	r5, [r8, #2]
 800a2be:	f8a8 6004 	strh.w	r6, [r8, #4]
 800a2c2:	f8a8 7006 	strh.w	r7, [r8, #6]
 800a2c6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a2ca:	e737      	b.n	800a13c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 800a2cc:	f004 f9c1 	bl	800e652 <_ZN8touchgfx12TextProviderC1Ev>
 800a2d0:	682b      	ldr	r3, [r5, #0]
 800a2d2:	4628      	mov	r0, r5
 800a2d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2d6:	4798      	blx	r3
 800a2d8:	682b      	ldr	r3, [r5, #0]
 800a2da:	4607      	mov	r7, r0
 800a2dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2de:	4628      	mov	r0, r5
 800a2e0:	4798      	blx	r3
 800a2e2:	6823      	ldr	r3, [r4, #0]
 800a2e4:	4683      	mov	fp, r0
 800a2e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	4798      	blx	r3
 800a2ec:	6822      	ldr	r2, [r4, #0]
 800a2ee:	9005      	str	r0, [sp, #20]
 800a2f0:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a2f4:	4620      	mov	r0, r4
 800a2f6:	4790      	blx	r2
 800a2f8:	9b05      	ldr	r3, [sp, #20]
 800a2fa:	9001      	str	r0, [sp, #4]
 800a2fc:	463a      	mov	r2, r7
 800a2fe:	4649      	mov	r1, r9
 800a300:	9300      	str	r3, [sp, #0]
 800a302:	a80f      	add	r0, sp, #60	@ 0x3c
 800a304:	465b      	mov	r3, fp
 800a306:	f004 fa14 	bl	800e732 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 800a30a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800a30e:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 800a312:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800a314:	f894 0039 	ldrb.w	r0, [r4, #57]	@ 0x39
 800a318:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800a31c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800a320:	bf0a      	itet	eq
 800a322:	464a      	moveq	r2, r9
 800a324:	461a      	movne	r2, r3
 800a326:	4699      	moveq	r9, r3
 800a328:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 800a32c:	1ad2      	subs	r2, r2, r3
 800a32e:	6833      	ldr	r3, [r6, #0]
 800a330:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	@ 0x34
 800a334:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800a338:	af0f      	add	r7, sp, #60	@ 0x3c
 800a33a:	7859      	ldrb	r1, [r3, #1]
 800a33c:	9707      	str	r7, [sp, #28]
 800a33e:	2300      	movs	r3, #0
 800a340:	f3c1 0181 	ubfx	r1, r1, #2, #2
 800a344:	f8ad 3018 	strh.w	r3, [sp, #24]
 800a348:	f88d 1020 	strb.w	r1, [sp, #32]
 800a34c:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 800a350:	9509      	str	r5, [sp, #36]	@ 0x24
 800a352:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800a356:	f8ad 902a 	strh.w	r9, [sp, #42]	@ 0x2a
 800a35a:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 800a35e:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800a362:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 800a366:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800a36a:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800a36e:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800a372:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 800a376:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800a37a:	b350      	cbz	r0, 800a3d2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 800a37c:	682b      	ldr	r3, [r5, #0]
 800a37e:	4628      	mov	r0, r5
 800a380:	695b      	ldr	r3, [r3, #20]
 800a382:	4798      	blx	r3
 800a384:	4607      	mov	r7, r0
 800a386:	b320      	cbz	r0, 800a3d2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 800a388:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a38a:	6803      	ldr	r3, [r0, #0]
 800a38c:	4639      	mov	r1, r7
 800a38e:	68db      	ldr	r3, [r3, #12]
 800a390:	4798      	blx	r3
 800a392:	4606      	mov	r6, r0
 800a394:	b1e8      	cbz	r0, 800a3d2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 800a396:	7b43      	ldrb	r3, [r0, #13]
 800a398:	7a82      	ldrb	r2, [r0, #10]
 800a39a:	005b      	lsls	r3, r3, #1
 800a39c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 800a3a6:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 800a3aa:	2b06      	cmp	r3, #6
 800a3ac:	d111      	bne.n	800a3d2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b6>
 800a3ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a3b0:	6803      	ldr	r3, [r0, #0]
 800a3b2:	4632      	mov	r2, r6
 800a3b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3b6:	4639      	mov	r1, r7
 800a3b8:	4798      	blx	r3
 800a3ba:	7b73      	ldrb	r3, [r6, #13]
 800a3bc:	005b      	lsls	r3, r3, #1
 800a3be:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800a3c2:	7ab3      	ldrb	r3, [r6, #10]
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	4418      	add	r0, r3
 800a3c8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800a3cc:	4418      	add	r0, r3
 800a3ce:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 800a3d2:	2600      	movs	r6, #0
 800a3d4:	4637      	mov	r7, r6
 800a3d6:	a806      	add	r0, sp, #24
 800a3d8:	f001 fe86 	bl	800c0e8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800a3dc:	f8bd 0036 	ldrh.w	r0, [sp, #54]	@ 0x36
 800a3e0:	9b03      	ldr	r3, [sp, #12]
 800a3e2:	4286      	cmp	r6, r0
 800a3e4:	eba9 0903 	sub.w	r9, r9, r3
 800a3e8:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800a3ec:	bfb8      	it	lt
 800a3ee:	4606      	movlt	r6, r0
 800a3f0:	3701      	adds	r7, #1
 800a3f2:	b236      	sxth	r6, r6
 800a3f4:	b2bf      	uxth	r7, r7
 800a3f6:	fa0f f989 	sxth.w	r9, r9
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	f43f af0d 	beq.w	800a21a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 800a400:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 800a404:	2b00      	cmp	r3, #0
 800a406:	f47f af08 	bne.w	800a21a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 800a40a:	7a2b      	ldrb	r3, [r5, #8]
 800a40c:	444b      	add	r3, r9
 800a40e:	2b00      	cmp	r3, #0
 800a410:	dce1      	bgt.n	800a3d6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2ba>
 800a412:	e702      	b.n	800a21a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfe>
 800a414:	200126ac 	.word	0x200126ac
 800a418:	200126a8 	.word	0x200126a8
 800a41c:	200126b0 	.word	0x200126b0
 800a420:	200126b4 	.word	0x200126b4
 800a424:	ebaa 0606 	sub.w	r6, sl, r6
 800a428:	2002      	movs	r0, #2
 800a42a:	fb96 f6f0 	sdiv	r6, r6, r0
 800a42e:	e71d      	b.n	800a26c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x150>
 800a430:	441e      	add	r6, r3
 800a432:	ebaa 0606 	sub.w	r6, sl, r6
 800a436:	e719      	b.n	800a26c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x150>
 800a438:	8925      	ldrh	r5, [r4, #8]
 800a43a:	1aed      	subs	r5, r5, r3
 800a43c:	eba5 050a 	sub.w	r5, r5, sl
 800a440:	fa0f fb85 	sxth.w	fp, r5
 800a444:	8965      	ldrh	r5, [r4, #10]
 800a446:	eba5 0509 	sub.w	r5, r5, r9
 800a44a:	b22d      	sxth	r5, r5
 800a44c:	e72e      	b.n	800a2ac <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>
 800a44e:	8965      	ldrh	r5, [r4, #10]
 800a450:	1aed      	subs	r5, r5, r3
 800a452:	eba5 050a 	sub.w	r5, r5, sl
 800a456:	4633      	mov	r3, r6
 800a458:	b22d      	sxth	r5, r5
 800a45a:	463e      	mov	r6, r7
 800a45c:	f04f 0b00 	mov.w	fp, #0
 800a460:	461f      	mov	r7, r3
 800a462:	e723      	b.n	800a2ac <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>
 800a464:	2500      	movs	r5, #0
 800a466:	e721      	b.n	800a2ac <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x190>

0800a468 <_ZN8touchgfx8TextAreaD0Ev>:
 800a468:	b510      	push	{r4, lr}
 800a46a:	2148      	movs	r1, #72	@ 0x48
 800a46c:	4604      	mov	r4, r0
 800a46e:	f008 ff53 	bl	8013318 <_ZdlPvj>
 800a472:	4620      	mov	r0, r4
 800a474:	bd10      	pop	{r4, pc}
	...

0800a478 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 800a478:	b513      	push	{r0, r1, r4, lr}
 800a47a:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 800a47e:	4604      	mov	r4, r0
 800a480:	b1fb      	cbz	r3, 800a4c2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800a482:	4b16      	ldr	r3, [pc, #88]	@ (800a4dc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 800a484:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800a486:	881b      	ldrh	r3, [r3, #0]
 800a488:	428b      	cmp	r3, r1
 800a48a:	d91a      	bls.n	800a4c2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800a48c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800a490:	2b00      	cmp	r3, #0
 800a492:	dd16      	ble.n	800a4c2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800a494:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	dd12      	ble.n	800a4c2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800a49c:	4b10      	ldr	r3, [pc, #64]	@ (800a4e0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 800a49e:	6818      	ldr	r0, [r3, #0]
 800a4a0:	f7f9 f930 	bl	8003704 <_ZNK8touchgfx5Texts7getTextEt>
 800a4a4:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 800a4a8:	6822      	ldr	r2, [r4, #0]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	db06      	blt.n	800a4bc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 800a4ae:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	db02      	blt.n	800a4bc <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 800a4b6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a4b8:	4298      	cmp	r0, r3
 800a4ba:	d004      	beq.n	800a4c6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 800a4bc:	6953      	ldr	r3, [r2, #20]
 800a4be:	4620      	mov	r0, r4
 800a4c0:	4798      	blx	r3
 800a4c2:	b002      	add	sp, #8
 800a4c4:	bd10      	pop	{r4, pc}
 800a4c6:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 800a4ca:	c903      	ldmia	r1, {r0, r1}
 800a4cc:	466b      	mov	r3, sp
 800a4ce:	e883 0003 	stmia.w	r3, {r0, r1}
 800a4d2:	6912      	ldr	r2, [r2, #16]
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	4620      	mov	r0, r4
 800a4d8:	4790      	blx	r2
 800a4da:	e7f2      	b.n	800a4c2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800a4dc:	200126ac 	.word	0x200126ac
 800a4e0:	200126b4 	.word	0x200126b4

0800a4e4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 800a4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4e8:	4b44      	ldr	r3, [pc, #272]	@ (800a5fc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 800a4ea:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800a4ec:	881b      	ldrh	r3, [r3, #0]
 800a4ee:	4293      	cmp	r3, r2
 800a4f0:	b08e      	sub	sp, #56	@ 0x38
 800a4f2:	4604      	mov	r4, r0
 800a4f4:	d97e      	bls.n	800a5f4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800a4f6:	6808      	ldr	r0, [r1, #0]
 800a4f8:	4d41      	ldr	r5, [pc, #260]	@ (800a600 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 800a4fa:	6849      	ldr	r1, [r1, #4]
 800a4fc:	ab05      	add	r3, sp, #20
 800a4fe:	c303      	stmia	r3!, {r0, r1}
 800a500:	4611      	mov	r1, r2
 800a502:	6828      	ldr	r0, [r5, #0]
 800a504:	f7f9 f8fe 	bl	8003704 <_ZNK8touchgfx5Texts7getTextEt>
 800a508:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	db11      	blt.n	800a534 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 800a510:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 800a514:	2b00      	cmp	r3, #0
 800a516:	db0d      	blt.n	800a534 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 800a518:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a51a:	4298      	cmp	r0, r3
 800a51c:	d10a      	bne.n	800a534 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 800a51e:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 800a522:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a526:	ab09      	add	r3, sp, #36	@ 0x24
 800a528:	e883 0003 	stmia.w	r3, {r0, r1}
 800a52c:	4619      	mov	r1, r3
 800a52e:	a805      	add	r0, sp, #20
 800a530:	f7fe fd14 	bl	8008f5c <_ZN8touchgfx4RectaNERKS0_>
 800a534:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	dd5b      	ble.n	800a5f4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800a53c:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 800a540:	2b00      	cmp	r3, #0
 800a542:	dd57      	ble.n	800a5f4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800a544:	4f2f      	ldr	r7, [pc, #188]	@ (800a604 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 800a546:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800a54e:	4b2e      	ldr	r3, [pc, #184]	@ (800a608 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800a556:	2e00      	cmp	r6, #0
 800a558:	d04c      	beq.n	800a5f4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800a55a:	6823      	ldr	r3, [r4, #0]
 800a55c:	f894 8036 	ldrb.w	r8, [r4, #54]	@ 0x36
 800a560:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a562:	4620      	mov	r0, r4
 800a564:	4798      	blx	r3
 800a566:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	@ 0x34
 800a56e:	f894 e038 	ldrb.w	lr, [r4, #56]	@ 0x38
 800a572:	f894 7037 	ldrb.w	r7, [r4, #55]	@ 0x37
 800a576:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a578:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800a57c:	f894 2039 	ldrb.w	r2, [r4, #57]	@ 0x39
 800a580:	785b      	ldrb	r3, [r3, #1]
 800a582:	9609      	str	r6, [sp, #36]	@ 0x24
 800a584:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800a588:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a58c:	4b1f      	ldr	r3, [pc, #124]	@ (800a60c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 800a58e:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f88d e02a 	strb.w	lr, [sp, #42]	@ 0x2a
 800a598:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a59a:	f8ad c030 	strh.w	ip, [sp, #48]	@ 0x30
 800a59e:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 800a5a2:	f88d 7033 	strb.w	r7, [sp, #51]	@ 0x33
 800a5a6:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 800a5aa:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800a5ae:	b10a      	cbz	r2, 800a5b4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 800a5b0:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 800a5b2:	b906      	cbnz	r6, 800a5b6 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 800a5b4:	689e      	ldr	r6, [r3, #8]
 800a5b6:	af07      	add	r7, sp, #28
 800a5b8:	4621      	mov	r1, r4
 800a5ba:	4638      	mov	r0, r7
 800a5bc:	f003 fc58 	bl	800de70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800a5c0:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800a5c2:	6828      	ldr	r0, [r5, #0]
 800a5c4:	f7f9 f89e 	bl	8003704 <_ZNK8touchgfx5Texts7getTextEt>
 800a5c8:	6823      	ldr	r3, [r4, #0]
 800a5ca:	4605      	mov	r5, r0
 800a5cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	4798      	blx	r3
 800a5d2:	6823      	ldr	r3, [r4, #0]
 800a5d4:	4680      	mov	r8, r0
 800a5d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a5da:	4620      	mov	r0, r4
 800a5dc:	4798      	blx	r3
 800a5de:	e9cd 8002 	strd	r8, r0, [sp, #8]
 800a5e2:	ab09      	add	r3, sp, #36	@ 0x24
 800a5e4:	9300      	str	r3, [sp, #0]
 800a5e6:	9501      	str	r5, [sp, #4]
 800a5e8:	ab05      	add	r3, sp, #20
 800a5ea:	e897 0006 	ldmia.w	r7, {r1, r2}
 800a5ee:	4630      	mov	r0, r6
 800a5f0:	f7f9 f83b 	bl	800366a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800a5f4:	b00e      	add	sp, #56	@ 0x38
 800a5f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5fa:	bf00      	nop
 800a5fc:	200126ac 	.word	0x200126ac
 800a600:	200126b4 	.word	0x200126b4
 800a604:	200126a8 	.word	0x200126a8
 800a608:	200126b0 	.word	0x200126b0
 800a60c:	20012658 	.word	0x20012658

0800a610 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 800a610:	b570      	push	{r4, r5, r6, lr}
 800a612:	6803      	ldr	r3, [r0, #0]
 800a614:	4604      	mov	r4, r0
 800a616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a618:	4615      	mov	r5, r2
 800a61a:	4798      	blx	r3
 800a61c:	6823      	ldr	r3, [r4, #0]
 800a61e:	4629      	mov	r1, r5
 800a620:	4620      	mov	r0, r4
 800a622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a624:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a628:	4718      	bx	r3
	...

0800a62c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 800a62c:	b538      	push	{r3, r4, r5, lr}
 800a62e:	4b0e      	ldr	r3, [pc, #56]	@ (800a668 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 800a630:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800a632:	881b      	ldrh	r3, [r3, #0]
 800a634:	429a      	cmp	r2, r3
 800a636:	4604      	mov	r4, r0
 800a638:	d214      	bcs.n	800a664 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 800a63a:	6803      	ldr	r3, [r0, #0]
 800a63c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a63e:	4798      	blx	r3
 800a640:	6823      	ldr	r3, [r4, #0]
 800a642:	4605      	mov	r5, r0
 800a644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a646:	4620      	mov	r0, r4
 800a648:	4798      	blx	r3
 800a64a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800a64e:	b22d      	sxth	r5, r5
 800a650:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 800a654:	4601      	mov	r1, r0
 800a656:	bf06      	itte	eq
 800a658:	4602      	moveq	r2, r0
 800a65a:	4629      	moveq	r1, r5
 800a65c:	462a      	movne	r2, r5
 800a65e:	4620      	mov	r0, r4
 800a660:	f7ff ffd6 	bl	800a610 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800a664:	bd38      	pop	{r3, r4, r5, pc}
 800a666:	bf00      	nop
 800a668:	200126ac 	.word	0x200126ac

0800a66c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 800a66c:	b530      	push	{r4, r5, lr}
 800a66e:	888b      	ldrh	r3, [r1, #4]
 800a670:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800a672:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800a676:	b085      	sub	sp, #20
 800a678:	4604      	mov	r4, r0
 800a67a:	b923      	cbnz	r3, 800a686 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 800a67c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800a680:	b90b      	cbnz	r3, 800a686 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 800a682:	f7ff ffd3 	bl	800a62c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 800a686:	6823      	ldr	r3, [r4, #0]
 800a688:	466d      	mov	r5, sp
 800a68a:	4621      	mov	r1, r4
 800a68c:	4628      	mov	r0, r5
 800a68e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a692:	4798      	blx	r3
 800a694:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a698:	343c      	adds	r4, #60	@ 0x3c
 800a69a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a69e:	b005      	add	sp, #20
 800a6a0:	bd30      	pop	{r4, r5, pc}

0800a6a2 <_ZNK8touchgfx3Box12getSolidRectEv>:
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	8083      	strh	r3, [r0, #4]
 800a6a6:	80c3      	strh	r3, [r0, #6]
 800a6a8:	8003      	strh	r3, [r0, #0]
 800a6aa:	8043      	strh	r3, [r0, #2]
 800a6ac:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 800a6b0:	2bff      	cmp	r3, #255	@ 0xff
 800a6b2:	bf01      	itttt	eq
 800a6b4:	890b      	ldrheq	r3, [r1, #8]
 800a6b6:	8083      	strheq	r3, [r0, #4]
 800a6b8:	894b      	ldrheq	r3, [r1, #10]
 800a6ba:	80c3      	strheq	r3, [r0, #6]
 800a6bc:	4770      	bx	lr
	...

0800a6c0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800a6c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a6c2:	4604      	mov	r4, r0
 800a6c4:	6808      	ldr	r0, [r1, #0]
 800a6c6:	6849      	ldr	r1, [r1, #4]
 800a6c8:	466b      	mov	r3, sp
 800a6ca:	c303      	stmia	r3!, {r0, r1}
 800a6cc:	6823      	ldr	r3, [r4, #0]
 800a6ce:	4669      	mov	r1, sp
 800a6d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	4798      	blx	r3
 800a6d6:	4b08      	ldr	r3, [pc, #32]	@ (800a6f8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800a6de:	b10a      	cbz	r2, 800a6e4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800a6e0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800a6e2:	b900      	cbnz	r0, 800a6e6 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800a6e4:	6898      	ldr	r0, [r3, #8]
 800a6e6:	6803      	ldr	r3, [r0, #0]
 800a6e8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800a6ea:	6a1d      	ldr	r5, [r3, #32]
 800a6ec:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 800a6f0:	4669      	mov	r1, sp
 800a6f2:	47a8      	blx	r5
 800a6f4:	b003      	add	sp, #12
 800a6f6:	bd30      	pop	{r4, r5, pc}
 800a6f8:	20012658 	.word	0x20012658

0800a6fc <_ZN8touchgfx3BoxD1Ev>:
 800a6fc:	4770      	bx	lr

0800a6fe <_ZN8touchgfx3BoxD0Ev>:
 800a6fe:	b510      	push	{r4, lr}
 800a700:	212c      	movs	r1, #44	@ 0x2c
 800a702:	4604      	mov	r4, r0
 800a704:	f008 fe08 	bl	8013318 <_ZdlPvj>
 800a708:	4620      	mov	r0, r4
 800a70a:	bd10      	pop	{r4, pc}

0800a70c <_ZNK8touchgfx3Box17invalidateContentEv>:
 800a70c:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 800a710:	b12a      	cbz	r2, 800a71e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800a712:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800a716:	b112      	cbz	r2, 800a71e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800a718:	6803      	ldr	r3, [r0, #0]
 800a71a:	695b      	ldr	r3, [r3, #20]
 800a71c:	4718      	bx	r3
 800a71e:	4770      	bx	lr

0800a720 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 800a720:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 800a724:	4770      	bx	lr

0800a726 <_ZN8touchgfx6ButtonD1Ev>:
 800a726:	4770      	bx	lr

0800a728 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 800a728:	b570      	push	{r4, r5, r6, lr}
 800a72a:	880b      	ldrh	r3, [r1, #0]
 800a72c:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 800a72e:	4605      	mov	r5, r0
 800a730:	8813      	ldrh	r3, [r2, #0]
 800a732:	f825 3f30 	strh.w	r3, [r5, #48]!
 800a736:	4604      	mov	r4, r0
 800a738:	4628      	mov	r0, r5
 800a73a:	f005 ff6f 	bl	801061c <_ZNK8touchgfx6Bitmap8getWidthEv>
 800a73e:	4606      	mov	r6, r0
 800a740:	4628      	mov	r0, r5
 800a742:	f005 ff9f 	bl	8010684 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800a746:	6823      	ldr	r3, [r4, #0]
 800a748:	4605      	mov	r5, r0
 800a74a:	4631      	mov	r1, r6
 800a74c:	4620      	mov	r0, r4
 800a74e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a750:	4798      	blx	r3
 800a752:	6823      	ldr	r3, [r4, #0]
 800a754:	4629      	mov	r1, r5
 800a756:	4620      	mov	r0, r4
 800a758:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a75a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a75e:	4718      	bx	r3

0800a760 <_ZN8touchgfx6ButtonD0Ev>:
 800a760:	b510      	push	{r4, lr}
 800a762:	2134      	movs	r1, #52	@ 0x34
 800a764:	4604      	mov	r4, r0
 800a766:	f008 fdd7 	bl	8013318 <_ZdlPvj>
 800a76a:	4620      	mov	r0, r4
 800a76c:	bd10      	pop	{r4, pc}

0800a76e <_ZN8touchgfx14AbstractButton13executeActionEv>:
 800a76e:	b510      	push	{r4, lr}
 800a770:	4604      	mov	r4, r0
 800a772:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800a774:	b150      	cbz	r0, 800a78c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800a776:	6803      	ldr	r3, [r0, #0]
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	4798      	blx	r3
 800a77c:	b130      	cbz	r0, 800a78c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 800a77e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800a780:	6803      	ldr	r3, [r0, #0]
 800a782:	4621      	mov	r1, r4
 800a784:	689b      	ldr	r3, [r3, #8]
 800a786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a78a:	4718      	bx	r3
 800a78c:	bd10      	pop	{r4, pc}

0800a78e <_ZNK8touchgfx6Button12getSolidRectEv>:
 800a78e:	b510      	push	{r4, lr}
 800a790:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 800a794:	2bff      	cmp	r3, #255	@ 0xff
 800a796:	4604      	mov	r4, r0
 800a798:	d006      	beq.n	800a7a8 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 800a79a:	2300      	movs	r3, #0
 800a79c:	8003      	strh	r3, [r0, #0]
 800a79e:	8043      	strh	r3, [r0, #2]
 800a7a0:	8083      	strh	r3, [r0, #4]
 800a7a2:	80c3      	strh	r3, [r0, #6]
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	bd10      	pop	{r4, pc}
 800a7a8:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 800a7ac:	b11b      	cbz	r3, 800a7b6 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 800a7ae:	3130      	adds	r1, #48	@ 0x30
 800a7b0:	f005 ff9c 	bl	80106ec <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800a7b4:	e7f6      	b.n	800a7a4 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 800a7b6:	312e      	adds	r1, #46	@ 0x2e
 800a7b8:	e7fa      	b.n	800a7b0 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

0800a7bc <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 800a7bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7c0:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800a7c4:	b08a      	sub	sp, #40	@ 0x28
 800a7c6:	4604      	mov	r4, r0
 800a7c8:	4688      	mov	r8, r1
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d066      	beq.n	800a89c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 800a7ce:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 800a7d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a7d4:	a805      	add	r0, sp, #20
 800a7d6:	f005 ff21 	bl	801061c <_ZNK8touchgfx6Bitmap8getWidthEv>
 800a7da:	4607      	mov	r7, r0
 800a7dc:	a805      	add	r0, sp, #20
 800a7de:	f005 ff51 	bl	8010684 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800a7e2:	f9b8 6000 	ldrsh.w	r6, [r8]
 800a7e6:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 800a7ea:	4432      	add	r2, r6
 800a7ec:	b292      	uxth	r2, r2
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	fa0f fc82 	sxth.w	ip, r2
 800a7f4:	459c      	cmp	ip, r3
 800a7f6:	9306      	str	r3, [sp, #24]
 800a7f8:	dd52      	ble.n	800a8a0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800a7fa:	42b7      	cmp	r7, r6
 800a7fc:	dd50      	ble.n	800a8a0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800a7fe:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 800a802:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800a806:	442b      	add	r3, r5
 800a808:	b29b      	uxth	r3, r3
 800a80a:	b219      	sxth	r1, r3
 800a80c:	2900      	cmp	r1, #0
 800a80e:	dd47      	ble.n	800a8a0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800a810:	42a8      	cmp	r0, r5
 800a812:	dd45      	ble.n	800a8a0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 800a814:	4567      	cmp	r7, ip
 800a816:	bfb8      	it	lt
 800a818:	b2ba      	uxthlt	r2, r7
 800a81a:	4288      	cmp	r0, r1
 800a81c:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 800a820:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800a824:	bfb8      	it	lt
 800a826:	b283      	uxthlt	r3, r0
 800a828:	1b92      	subs	r2, r2, r6
 800a82a:	1b5b      	subs	r3, r3, r5
 800a82c:	f8ad 201c 	strh.w	r2, [sp, #28]
 800a830:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a834:	f8ad 6018 	strh.w	r6, [sp, #24]
 800a838:	f8ad 501a 	strh.w	r5, [sp, #26]
 800a83c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800a840:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a844:	429a      	cmp	r2, r3
 800a846:	d026      	beq.n	800a896 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800a848:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	dd22      	ble.n	800a896 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800a850:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800a854:	2b00      	cmp	r3, #0
 800a856:	dd1e      	ble.n	800a896 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 800a858:	2300      	movs	r3, #0
 800a85a:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800a85e:	6823      	ldr	r3, [r4, #0]
 800a860:	a908      	add	r1, sp, #32
 800a862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a864:	4620      	mov	r0, r4
 800a866:	4798      	blx	r3
 800a868:	4b0f      	ldr	r3, [pc, #60]	@ (800a8a8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800a870:	b10a      	cbz	r2, 800a876 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 800a872:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800a874:	b900      	cbnz	r0, 800a878 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 800a876:	6898      	ldr	r0, [r3, #8]
 800a878:	6801      	ldr	r1, [r0, #0]
 800a87a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 800a87e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800a882:	2501      	movs	r5, #1
 800a884:	9502      	str	r5, [sp, #8]
 800a886:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 800a88a:	9401      	str	r4, [sp, #4]
 800a88c:	ac06      	add	r4, sp, #24
 800a88e:	9400      	str	r4, [sp, #0]
 800a890:	688c      	ldr	r4, [r1, #8]
 800a892:	a905      	add	r1, sp, #20
 800a894:	47a0      	blx	r4
 800a896:	b00a      	add	sp, #40	@ 0x28
 800a898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a89c:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 800a89e:	e797      	b.n	800a7d0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	9307      	str	r3, [sp, #28]
 800a8a4:	e7ca      	b.n	800a83c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 800a8a6:	bf00      	nop
 800a8a8:	20012658 	.word	0x20012658

0800a8ac <_ZNK8touchgfx6Button17invalidateContentEv>:
 800a8ac:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 800a8b0:	b12a      	cbz	r2, 800a8be <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 800a8b2:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800a8b6:	b112      	cbz	r2, 800a8be <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 800a8b8:	6803      	ldr	r3, [r0, #0]
 800a8ba:	695b      	ldr	r3, [r3, #20]
 800a8bc:	4718      	bx	r3
 800a8be:	4770      	bx	lr

0800a8c0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 800a8c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a8c4:	4b2f      	ldr	r3, [pc, #188]	@ (800a984 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 800a8c6:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 800a8c8:	881b      	ldrh	r3, [r3, #0]
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	b08d      	sub	sp, #52	@ 0x34
 800a8ce:	4604      	mov	r4, r0
 800a8d0:	460f      	mov	r7, r1
 800a8d2:	d954      	bls.n	800a97e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 800a8d4:	4b2c      	ldr	r3, [pc, #176]	@ (800a988 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 800a8d6:	6819      	ldr	r1, [r3, #0]
 800a8d8:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 800a8dc:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 800a8e0:	4a2a      	ldr	r2, [pc, #168]	@ (800a98c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 800a8e2:	6812      	ldr	r2, [r2, #0]
 800a8e4:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800a8e8:	2900      	cmp	r1, #0
 800a8ea:	d048      	beq.n	800a97e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 800a8ec:	785a      	ldrb	r2, [r3, #1]
 800a8ee:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 800a8f2:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800a8f6:	4b26      	ldr	r3, [pc, #152]	@ (800a990 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 800a8f8:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
 800a8fc:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	@ 0x34
 800a900:	f890 e038 	ldrb.w	lr, [r0, #56]	@ 0x38
 800a904:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800a906:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 800a90a:	9107      	str	r1, [sp, #28]
 800a90c:	f3c2 0801 	ubfx	r8, r2, #0, #2
 800a910:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800a914:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	f88d 8020 	strb.w	r8, [sp, #32]
 800a91e:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 800a922:	f88d e022 	strb.w	lr, [sp, #34]	@ 0x22
 800a926:	9609      	str	r6, [sp, #36]	@ 0x24
 800a928:	f8ad c028 	strh.w	ip, [sp, #40]	@ 0x28
 800a92c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800a930:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
 800a934:	b10b      	cbz	r3, 800a93a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 800a936:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
 800a938:	b905      	cbnz	r5, 800a93c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 800a93a:	6895      	ldr	r5, [r2, #8]
 800a93c:	ae05      	add	r6, sp, #20
 800a93e:	4621      	mov	r1, r4
 800a940:	4630      	mov	r0, r6
 800a942:	f003 fa95 	bl	800de70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800a946:	4b13      	ldr	r3, [pc, #76]	@ (800a994 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 800a948:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800a94a:	6818      	ldr	r0, [r3, #0]
 800a94c:	f7f8 feda 	bl	8003704 <_ZNK8touchgfx5Texts7getTextEt>
 800a950:	6823      	ldr	r3, [r4, #0]
 800a952:	4680      	mov	r8, r0
 800a954:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a956:	4620      	mov	r0, r4
 800a958:	4798      	blx	r3
 800a95a:	6823      	ldr	r3, [r4, #0]
 800a95c:	4681      	mov	r9, r0
 800a95e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a962:	4620      	mov	r0, r4
 800a964:	4798      	blx	r3
 800a966:	e9cd 9002 	strd	r9, r0, [sp, #8]
 800a96a:	ab07      	add	r3, sp, #28
 800a96c:	9300      	str	r3, [sp, #0]
 800a96e:	f8cd 8004 	str.w	r8, [sp, #4]
 800a972:	463b      	mov	r3, r7
 800a974:	e896 0006 	ldmia.w	r6, {r1, r2}
 800a978:	4628      	mov	r0, r5
 800a97a:	f7f8 fe76 	bl	800366a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800a97e:	b00d      	add	sp, #52	@ 0x34
 800a980:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a984:	200126ac 	.word	0x200126ac
 800a988:	200126a8 	.word	0x200126a8
 800a98c:	200126b0 	.word	0x200126b0
 800a990:	20012658 	.word	0x20012658
 800a994:	200126b4 	.word	0x200126b4

0800a998 <_ZN8touchgfx5ImageD1Ev>:
 800a998:	4770      	bx	lr

0800a99a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 800a99a:	b570      	push	{r4, r5, r6, lr}
 800a99c:	880b      	ldrh	r3, [r1, #0]
 800a99e:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800a9a0:	4604      	mov	r4, r0
 800a9a2:	4608      	mov	r0, r1
 800a9a4:	460d      	mov	r5, r1
 800a9a6:	f005 fe39 	bl	801061c <_ZNK8touchgfx6Bitmap8getWidthEv>
 800a9aa:	4606      	mov	r6, r0
 800a9ac:	4628      	mov	r0, r5
 800a9ae:	f005 fe69 	bl	8010684 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800a9b2:	6823      	ldr	r3, [r4, #0]
 800a9b4:	4605      	mov	r5, r0
 800a9b6:	4631      	mov	r1, r6
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9bc:	4798      	blx	r3
 800a9be:	6823      	ldr	r3, [r4, #0]
 800a9c0:	4629      	mov	r1, r5
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a9ca:	4718      	bx	r3

0800a9cc <_ZN8touchgfx5ImageD0Ev>:
 800a9cc:	b510      	push	{r4, lr}
 800a9ce:	212c      	movs	r1, #44	@ 0x2c
 800a9d0:	4604      	mov	r4, r0
 800a9d2:	f008 fca1 	bl	8013318 <_ZdlPvj>
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	bd10      	pop	{r4, pc}

0800a9da <_ZNK8touchgfx5Image12getSolidRectEv>:
 800a9da:	b510      	push	{r4, lr}
 800a9dc:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 800a9e0:	2bff      	cmp	r3, #255	@ 0xff
 800a9e2:	4604      	mov	r4, r0
 800a9e4:	d006      	beq.n	800a9f4 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	8003      	strh	r3, [r0, #0]
 800a9ea:	8043      	strh	r3, [r0, #2]
 800a9ec:	8083      	strh	r3, [r0, #4]
 800a9ee:	80c3      	strh	r3, [r0, #6]
 800a9f0:	4620      	mov	r0, r4
 800a9f2:	bd10      	pop	{r4, pc}
 800a9f4:	3126      	adds	r1, #38	@ 0x26
 800a9f6:	f005 fe79 	bl	80106ec <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800a9fa:	e7f9      	b.n	800a9f0 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0800a9fc <_ZNK8touchgfx5Image17invalidateContentEv>:
 800a9fc:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 800aa00:	b12a      	cbz	r2, 800aa0e <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800aa02:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800aa06:	b112      	cbz	r2, 800aa0e <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800aa08:	6803      	ldr	r3, [r0, #0]
 800aa0a:	695b      	ldr	r3, [r3, #20]
 800aa0c:	4718      	bx	r3
 800aa0e:	4770      	bx	lr

0800aa10 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 800aa10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa14:	4604      	mov	r4, r0
 800aa16:	b088      	sub	sp, #32
 800aa18:	f854 3b26 	ldr.w	r3, [r4], #38
 800aa1c:	2500      	movs	r5, #0
 800aa1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa20:	460f      	mov	r7, r1
 800aa22:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800aa26:	a904      	add	r1, sp, #16
 800aa28:	4606      	mov	r6, r0
 800aa2a:	4798      	blx	r3
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	f005 fdf5 	bl	801061c <_ZNK8touchgfx6Bitmap8getWidthEv>
 800aa32:	4680      	mov	r8, r0
 800aa34:	4620      	mov	r0, r4
 800aa36:	f005 fe25 	bl	8010684 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800aa3a:	9506      	str	r5, [sp, #24]
 800aa3c:	ad06      	add	r5, sp, #24
 800aa3e:	f8ad 001e 	strh.w	r0, [sp, #30]
 800aa42:	4639      	mov	r1, r7
 800aa44:	4628      	mov	r0, r5
 800aa46:	f8ad 801c 	strh.w	r8, [sp, #28]
 800aa4a:	f7fe fa87 	bl	8008f5c <_ZN8touchgfx4RectaNERKS0_>
 800aa4e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	dd19      	ble.n	800aa8a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800aa56:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	dd15      	ble.n	800aa8a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800aa5e:	4b0c      	ldr	r3, [pc, #48]	@ (800aa90 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800aa66:	b10a      	cbz	r2, 800aa6c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 800aa68:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800aa6a:	b900      	cbnz	r0, 800aa6e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 800aa6c:	6898      	ldr	r0, [r3, #8]
 800aa6e:	6801      	ldr	r1, [r0, #0]
 800aa70:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800aa74:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800aa78:	2701      	movs	r7, #1
 800aa7a:	9702      	str	r7, [sp, #8]
 800aa7c:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 800aa80:	e9cd 5600 	strd	r5, r6, [sp]
 800aa84:	688d      	ldr	r5, [r1, #8]
 800aa86:	4621      	mov	r1, r4
 800aa88:	47a8      	blx	r5
 800aa8a:	b008      	add	sp, #32
 800aa8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa90:	20012658 	.word	0x20012658

0800aa94 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 800aa94:	b510      	push	{r4, lr}
 800aa96:	6803      	ldr	r3, [r0, #0]
 800aa98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa9a:	460c      	mov	r4, r1
 800aa9c:	4798      	blx	r3
 800aa9e:	1b03      	subs	r3, r0, r4
 800aaa0:	4258      	negs	r0, r3
 800aaa2:	4158      	adcs	r0, r3
 800aaa4:	bd10      	pop	{r4, pc}
	...

0800aaa8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 800aaa8:	4b01      	ldr	r3, [pc, #4]	@ (800aab0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 800aaaa:	6019      	str	r1, [r3, #0]
 800aaac:	4770      	bx	lr
 800aaae:	bf00      	nop
 800aab0:	20012660 	.word	0x20012660

0800aab4 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800aab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aab8:	4696      	mov	lr, r2
 800aaba:	4605      	mov	r5, r0
 800aabc:	4614      	mov	r4, r2
 800aabe:	460e      	mov	r6, r1
 800aac0:	461f      	mov	r7, r3
 800aac2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800aac6:	b097      	sub	sp, #92	@ 0x5c
 800aac8:	f10d 0c1c 	add.w	ip, sp, #28
 800aacc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800aad0:	f8de 3000 	ldr.w	r3, [lr]
 800aad4:	f8cc 3000 	str.w	r3, [ip]
 800aad8:	f104 0e14 	add.w	lr, r4, #20
 800aadc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800aae0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800aae4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800aae8:	f8de 3000 	ldr.w	r3, [lr]
 800aaec:	f8cc 3000 	str.w	r3, [ip]
 800aaf0:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 800aaf4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800aaf8:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800aafc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ab00:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 800ab04:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 800ab08:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 800ab0c:	f8de 3000 	ldr.w	r3, [lr]
 800ab10:	f8cc 3000 	str.w	r3, [ip]
 800ab14:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ab16:	682b      	ldr	r3, [r5, #0]
 800ab18:	9201      	str	r2, [sp, #4]
 800ab1a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800ab1e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ab20:	9200      	str	r2, [sp, #0]
 800ab22:	f8cd 8008 	str.w	r8, [sp, #8]
 800ab26:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 800ab2a:	aa07      	add	r2, sp, #28
 800ab2c:	463b      	mov	r3, r7
 800ab2e:	4631      	mov	r1, r6
 800ab30:	4628      	mov	r0, r5
 800ab32:	47d8      	blx	fp
 800ab34:	46a6      	mov	lr, r4
 800ab36:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ab3a:	f10d 0c1c 	add.w	ip, sp, #28
 800ab3e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ab42:	f8de 3000 	ldr.w	r3, [lr]
 800ab46:	f8cc 3000 	str.w	r3, [ip]
 800ab4a:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 800ab4e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ab52:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800ab56:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ab5a:	343c      	adds	r4, #60	@ 0x3c
 800ab5c:	f8de 3000 	ldr.w	r3, [lr]
 800ab60:	f8cc 3000 	str.w	r3, [ip]
 800ab64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab66:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800ab6a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ab6e:	6823      	ldr	r3, [r4, #0]
 800ab70:	f8cc 3000 	str.w	r3, [ip]
 800ab74:	682b      	ldr	r3, [r5, #0]
 800ab76:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800ab7a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ab7c:	9201      	str	r2, [sp, #4]
 800ab7e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ab80:	9200      	str	r2, [sp, #0]
 800ab82:	f8cd 8008 	str.w	r8, [sp, #8]
 800ab86:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 800ab88:	aa07      	add	r2, sp, #28
 800ab8a:	463b      	mov	r3, r7
 800ab8c:	4631      	mov	r1, r6
 800ab8e:	4628      	mov	r0, r5
 800ab90:	47a0      	blx	r4
 800ab92:	b017      	add	sp, #92	@ 0x5c
 800ab94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ab98 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800ab98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab9c:	b08d      	sub	sp, #52	@ 0x34
 800ab9e:	4688      	mov	r8, r1
 800aba0:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800aba2:	f8d3 c000 	ldr.w	ip, [r3]
 800aba6:	680f      	ldr	r7, [r1, #0]
 800aba8:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 800abac:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 800abb0:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 800abb4:	edd3 6a07 	vldr	s13, [r3, #28]
 800abb8:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800abba:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 800abbe:	f9b1 9000 	ldrsh.w	r9, [r1]
 800abc2:	f9ba 1000 	ldrsh.w	r1, [sl]
 800abc6:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 800abca:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 800abce:	eba7 070c 	sub.w	r7, r7, ip
 800abd2:	42bc      	cmp	r4, r7
 800abd4:	bfa8      	it	ge
 800abd6:	463c      	movge	r4, r7
 800abd8:	ee07 4a90 	vmov	s15, r4
 800abdc:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800abe0:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 800abe4:	ee25 4a04 	vmul.f32	s8, s10, s8
 800abe8:	ee65 4a24 	vmul.f32	s9, s10, s9
 800abec:	ee25 5a27 	vmul.f32	s10, s10, s15
 800abf0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800abf4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800abf8:	eb09 0e0c 	add.w	lr, r9, ip
 800abfc:	4571      	cmp	r1, lr
 800abfe:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800ac02:	ee32 1a05 	vadd.f32	s2, s4, s10
 800ac06:	ee36 0a84 	vadd.f32	s0, s13, s8
 800ac0a:	ee61 1a87 	vmul.f32	s3, s3, s14
 800ac0e:	ee22 2a07 	vmul.f32	s4, s4, s14
 800ac12:	f340 808d 	ble.w	800ad30 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x198>
 800ac16:	eba1 060e 	sub.w	r6, r1, lr
 800ac1a:	fb96 f5f4 	sdiv	r5, r6, r4
 800ac1e:	ee07 5a10 	vmov	s14, r5
 800ac22:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ac26:	2d00      	cmp	r5, #0
 800ac28:	fb04 6615 	mls	r6, r4, r5, r6
 800ac2c:	eea7 0a04 	vfma.f32	s0, s14, s8
 800ac30:	eee7 0a24 	vfma.f32	s1, s14, s9
 800ac34:	eea7 1a05 	vfma.f32	s2, s14, s10
 800ac38:	dd13      	ble.n	800ac62 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca>
 800ac3a:	ee70 6a44 	vsub.f32	s13, s0, s8
 800ac3e:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800ac42:	eef5 6a40 	vcmp.f32	s13, #0.0
 800ac46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac4a:	bf18      	it	ne
 800ac4c:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800ac50:	ee31 2a45 	vsub.f32	s4, s2, s10
 800ac54:	bf08      	it	eq
 800ac56:	eeb0 7a67 	vmoveq.f32	s14, s15
 800ac5a:	ee61 1a87 	vmul.f32	s3, s3, s14
 800ac5e:	ee22 2a07 	vmul.f32	s4, s4, s14
 800ac62:	fb05 f204 	mul.w	r2, r5, r4
 800ac66:	1abf      	subs	r7, r7, r2
 800ac68:	4494      	add	ip, r2
 800ac6a:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800ac6e:	4411      	add	r1, r2
 800ac70:	eb09 020c 	add.w	r2, r9, ip
 800ac74:	443a      	add	r2, r7
 800ac76:	b209      	sxth	r1, r1
 800ac78:	428a      	cmp	r2, r1
 800ac7a:	bfc4      	itt	gt
 800ac7c:	eba1 0209 	subgt.w	r2, r1, r9
 800ac80:	eba2 070c 	subgt.w	r7, r2, ip
 800ac84:	2f00      	cmp	r7, #0
 800ac86:	dd50      	ble.n	800ad2a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x192>
 800ac88:	fb97 f1f4 	sdiv	r1, r7, r4
 800ac8c:	fb04 7211 	mls	r2, r4, r1, r7
 800ac90:	b90a      	cbnz	r2, 800ac96 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfe>
 800ac92:	3901      	subs	r1, #1
 800ac94:	4622      	mov	r2, r4
 800ac96:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800ac9a:	6840      	ldr	r0, [r0, #4]
 800ac9c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ac9e:	f8d0 a000 	ldr.w	sl, [r0]
 800aca2:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800aca4:	9008      	str	r0, [sp, #32]
 800aca6:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 800acaa:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800acac:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800acb0:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 800acb4:	695b      	ldr	r3, [r3, #20]
 800acb6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800acb8:	445b      	add	r3, fp
 800acba:	eef0 6a42 	vmov.f32	s13, s4
 800acbe:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800acc2:	ee21 3a23 	vmul.f32	s6, s2, s7
 800acc6:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800acca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800acce:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800acd2:	9307      	str	r3, [sp, #28]
 800acd4:	ee17 7a90 	vmov	r7, s15
 800acd8:	ee73 7a42 	vsub.f32	s15, s6, s4
 800acdc:	eeb0 7a61 	vmov.f32	s14, s3
 800ace0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800ace4:	ee16 3a90 	vmov	r3, s13
 800ace8:	fb97 f7f4 	sdiv	r7, r7, r4
 800acec:	ee17 ca90 	vmov	ip, s15
 800acf0:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800acf4:	fb9c fcf4 	sdiv	ip, ip, r4
 800acf8:	fb0c 3306 	mla	r3, ip, r6, r3
 800acfc:	9302      	str	r3, [sp, #8]
 800acfe:	ee17 3a10 	vmov	r3, s14
 800ad02:	44b6      	add	lr, r6
 800ad04:	fb04 e505 	mla	r5, r4, r5, lr
 800ad08:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 800ad0c:	fb07 3706 	mla	r7, r7, r6, r3
 800ad10:	e9cd 8505 	strd	r8, r5, [sp, #20]
 800ad14:	e9cd 4700 	strd	r4, r7, [sp]
 800ad18:	2900      	cmp	r1, #0
 800ad1a:	bfcc      	ite	gt
 800ad1c:	46a1      	movgt	r9, r4
 800ad1e:	4691      	movle	r9, r2
 800ad20:	eba9 0306 	sub.w	r3, r9, r6
 800ad24:	f8da 4008 	ldr.w	r4, [sl, #8]
 800ad28:	47a0      	blx	r4
 800ad2a:	b00d      	add	sp, #52	@ 0x34
 800ad2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad30:	2500      	movs	r5, #0
 800ad32:	462e      	mov	r6, r5
 800ad34:	e799      	b.n	800ac6a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd2>
	...

0800ad38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800ad38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad3c:	b0db      	sub	sp, #364	@ 0x16c
 800ad3e:	461d      	mov	r5, r3
 800ad40:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 800ad44:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad46:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 800ad4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad4c:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 800ad50:	9310      	str	r3, [sp, #64]	@ 0x40
 800ad52:	6803      	ldr	r3, [r0, #0]
 800ad54:	910f      	str	r1, [sp, #60]	@ 0x3c
 800ad56:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 800ad58:	9009      	str	r0, [sp, #36]	@ 0x24
 800ad5a:	4614      	mov	r4, r2
 800ad5c:	4629      	mov	r1, r5
 800ad5e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 800ad62:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 800ad66:	47b8      	blx	r7
 800ad68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad6a:	6058      	str	r0, [r3, #4]
 800ad6c:	2800      	cmp	r0, #0
 800ad6e:	f000 83a1 	beq.w	800b4b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800ad72:	682b      	ldr	r3, [r5, #0]
 800ad74:	9314      	str	r3, [sp, #80]	@ 0x50
 800ad76:	686b      	ldr	r3, [r5, #4]
 800ad78:	9315      	str	r3, [sp, #84]	@ 0x54
 800ad7a:	4bc4      	ldr	r3, [pc, #784]	@ (800b08c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 800ad7c:	ed94 7a02 	vldr	s14, [r4, #8]
 800ad80:	7819      	ldrb	r1, [r3, #0]
 800ad82:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800ad86:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 800ad8a:	2900      	cmp	r1, #0
 800ad8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ad90:	bf16      	itet	ne
 800ad92:	4619      	movne	r1, r3
 800ad94:	4611      	moveq	r1, r2
 800ad96:	4613      	movne	r3, r2
 800ad98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad9c:	9116      	str	r1, [sp, #88]	@ 0x58
 800ad9e:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 800ada2:	f240 8387 	bls.w	800b4b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800ada6:	ed94 7a07 	vldr	s14, [r4, #28]
 800adaa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800adae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adb2:	f240 837f 	bls.w	800b4b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800adb6:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 800adba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800adbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adc2:	f240 8377 	bls.w	800b4b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800adc6:	6822      	ldr	r2, [r4, #0]
 800adc8:	4bb1      	ldr	r3, [pc, #708]	@ (800b090 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 800adca:	429a      	cmp	r2, r3
 800adcc:	f2c0 8372 	blt.w	800b4b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800add0:	49b0      	ldr	r1, [pc, #704]	@ (800b094 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 800add2:	6963      	ldr	r3, [r4, #20]
 800add4:	428a      	cmp	r2, r1
 800add6:	f300 836d 	bgt.w	800b4b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800adda:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 800adde:	48ae      	ldr	r0, [pc, #696]	@ (800b098 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 800ade0:	33ff      	adds	r3, #255	@ 0xff
 800ade2:	4283      	cmp	r3, r0
 800ade4:	f200 8366 	bhi.w	800b4b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800ade8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800adea:	4dac      	ldr	r5, [pc, #688]	@ (800b09c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 800adec:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 800adf0:	33ff      	adds	r3, #255	@ 0xff
 800adf2:	42ab      	cmp	r3, r5
 800adf4:	f200 835e 	bhi.w	800b4b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800adf8:	6862      	ldr	r2, [r4, #4]
 800adfa:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 800adfe:	33ff      	adds	r3, #255	@ 0xff
 800ae00:	4283      	cmp	r3, r0
 800ae02:	f200 8357 	bhi.w	800b4b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800ae06:	69a1      	ldr	r1, [r4, #24]
 800ae08:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 800ae0c:	33ff      	adds	r3, #255	@ 0xff
 800ae0e:	4283      	cmp	r3, r0
 800ae10:	f200 8350 	bhi.w	800b4b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800ae14:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ae16:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 800ae1a:	30ff      	adds	r0, #255	@ 0xff
 800ae1c:	42a8      	cmp	r0, r5
 800ae1e:	f200 8349 	bhi.w	800b4b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800ae22:	428a      	cmp	r2, r1
 800ae24:	f280 8110 	bge.w	800b048 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 800ae28:	429a      	cmp	r2, r3
 800ae2a:	f300 8119 	bgt.w	800b060 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 800ae2e:	4299      	cmp	r1, r3
 800ae30:	f280 811d 	bge.w	800b06e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 800ae34:	2502      	movs	r5, #2
 800ae36:	2701      	movs	r7, #1
 800ae38:	46a9      	mov	r9, r5
 800ae3a:	46b8      	mov	r8, r7
 800ae3c:	f04f 0a00 	mov.w	sl, #0
 800ae40:	4621      	mov	r1, r4
 800ae42:	a849      	add	r0, sp, #292	@ 0x124
 800ae44:	f004 fda6 	bl	800f994 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 800ae48:	4622      	mov	r2, r4
 800ae4a:	4653      	mov	r3, sl
 800ae4c:	a949      	add	r1, sp, #292	@ 0x124
 800ae4e:	f8cd 9000 	str.w	r9, [sp]
 800ae52:	a819      	add	r0, sp, #100	@ 0x64
 800ae54:	f004 fece 	bl	800fbf4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800ae58:	4622      	mov	r2, r4
 800ae5a:	4653      	mov	r3, sl
 800ae5c:	a949      	add	r1, sp, #292	@ 0x124
 800ae5e:	f8cd 8000 	str.w	r8, [sp]
 800ae62:	a829      	add	r0, sp, #164	@ 0xa4
 800ae64:	f004 fec6 	bl	800fbf4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800ae68:	4643      	mov	r3, r8
 800ae6a:	4622      	mov	r2, r4
 800ae6c:	a949      	add	r1, sp, #292	@ 0x124
 800ae6e:	f8cd 9000 	str.w	r9, [sp]
 800ae72:	a839      	add	r0, sp, #228	@ 0xe4
 800ae74:	f004 febe 	bl	800fbf4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800ae78:	42af      	cmp	r7, r5
 800ae7a:	bfb5      	itete	lt
 800ae7c:	2300      	movlt	r3, #0
 800ae7e:	2301      	movge	r3, #1
 800ae80:	930e      	strlt	r3, [sp, #56]	@ 0x38
 800ae82:	930e      	strge	r3, [sp, #56]	@ 0x38
 800ae84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae86:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ae8a:	af12      	add	r7, sp, #72	@ 0x48
 800ae8c:	bfb9      	ittee	lt
 800ae8e:	ad29      	addlt	r5, sp, #164	@ 0xa4
 800ae90:	ac19      	addlt	r4, sp, #100	@ 0x64
 800ae92:	ad19      	addge	r5, sp, #100	@ 0x64
 800ae94:	ac29      	addge	r4, sp, #164	@ 0xa4
 800ae96:	e887 0003 	stmia.w	r7, {r0, r1}
 800ae9a:	b928      	cbnz	r0, 800aea8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 800ae9c:	4b80      	ldr	r3, [pc, #512]	@ (800b0a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 800ae9e:	6818      	ldr	r0, [r3, #0]
 800aea0:	6803      	ldr	r3, [r0, #0]
 800aea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aea4:	4798      	blx	r3
 800aea6:	6038      	str	r0, [r7, #0]
 800aea8:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800aeaa:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800aeae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800aeb2:	930c      	str	r3, [sp, #48]	@ 0x30
 800aeb4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800aeb6:	6963      	ldr	r3, [r4, #20]
 800aeb8:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 800aeba:	440b      	add	r3, r1
 800aebc:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800aec0:	4408      	add	r0, r1
 800aec2:	b200      	sxth	r0, r0
 800aec4:	4283      	cmp	r3, r0
 800aec6:	900d      	str	r0, [sp, #52]	@ 0x34
 800aec8:	f280 80dd 	bge.w	800b086 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 800aecc:	428b      	cmp	r3, r1
 800aece:	da08      	bge.n	800aee2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800aed0:	2a00      	cmp	r2, #0
 800aed2:	dd06      	ble.n	800aee2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800aed4:	1acb      	subs	r3, r1, r3
 800aed6:	429a      	cmp	r2, r3
 800aed8:	f2c0 80e4 	blt.w	800b0a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 800aedc:	2b00      	cmp	r3, #0
 800aede:	f300 80e2 	bgt.w	800b0a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 800aee2:	6967      	ldr	r7, [r4, #20]
 800aee4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aee6:	443b      	add	r3, r7
 800aee8:	461f      	mov	r7, r3
 800aeea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aeec:	1bdf      	subs	r7, r3, r7
 800aeee:	4297      	cmp	r7, r2
 800aef0:	bfa8      	it	ge
 800aef2:	4617      	movge	r7, r2
 800aef4:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 800aef8:	2f00      	cmp	r7, #0
 800aefa:	f340 8166 	ble.w	800b1ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 800aefe:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800af00:	6829      	ldr	r1, [r5, #0]
 800af02:	f9b3 2000 	ldrsh.w	r2, [r3]
 800af06:	f9bb 3000 	ldrsh.w	r3, [fp]
 800af0a:	6820      	ldr	r0, [r4, #0]
 800af0c:	4411      	add	r1, r2
 800af0e:	4299      	cmp	r1, r3
 800af10:	dd1a      	ble.n	800af48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800af12:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800af16:	440b      	add	r3, r1
 800af18:	4402      	add	r2, r0
 800af1a:	b21b      	sxth	r3, r3
 800af1c:	429a      	cmp	r2, r3
 800af1e:	dc13      	bgt.n	800af48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800af20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af22:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	9206      	str	r2, [sp, #24]
 800af28:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800af2a:	9205      	str	r2, [sp, #20]
 800af2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af2e:	9500      	str	r5, [sp, #0]
 800af30:	e9cd b203 	strd	fp, r2, [sp, #12]
 800af34:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800af36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af38:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800af3c:	a912      	add	r1, sp, #72	@ 0x48
 800af3e:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 800af42:	aa49      	add	r2, sp, #292	@ 0x124
 800af44:	4623      	mov	r3, r4
 800af46:	47c8      	blx	r9
 800af48:	e9d4 2300 	ldrd	r2, r3, [r4]
 800af4c:	441a      	add	r2, r3
 800af4e:	6963      	ldr	r3, [r4, #20]
 800af50:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 800af54:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 800af58:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 800af5c:	68a1      	ldr	r1, [r4, #8]
 800af5e:	ed94 6a08 	vldr	s12, [r4, #32]
 800af62:	6022      	str	r2, [r4, #0]
 800af64:	3301      	adds	r3, #1
 800af66:	6163      	str	r3, [r4, #20]
 800af68:	69a3      	ldr	r3, [r4, #24]
 800af6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800af6e:	3b01      	subs	r3, #1
 800af70:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 800af74:	61a3      	str	r3, [r4, #24]
 800af76:	6923      	ldr	r3, [r4, #16]
 800af78:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800af7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af80:	edd4 6a07 	vldr	s13, [r4, #28]
 800af84:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800af88:	440b      	add	r3, r1
 800af8a:	68e1      	ldr	r1, [r4, #12]
 800af8c:	6123      	str	r3, [r4, #16]
 800af8e:	ee76 6a86 	vadd.f32	s13, s13, s12
 800af92:	428b      	cmp	r3, r1
 800af94:	edc4 6a07 	vstr	s13, [r4, #28]
 800af98:	db15      	blt.n	800afc6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 800af9a:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 800af9e:	ee76 6a26 	vadd.f32	s13, s12, s13
 800afa2:	3201      	adds	r2, #1
 800afa4:	edc4 6a07 	vstr	s13, [r4, #28]
 800afa8:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 800afac:	6022      	str	r2, [r4, #0]
 800afae:	ee36 7a87 	vadd.f32	s14, s13, s14
 800afb2:	1a5b      	subs	r3, r3, r1
 800afb4:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800afb8:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 800afbc:	6123      	str	r3, [r4, #16]
 800afbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800afc2:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800afc6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800afca:	441a      	add	r2, r3
 800afcc:	696b      	ldr	r3, [r5, #20]
 800afce:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 800afd2:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 800afd6:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 800afda:	68a9      	ldr	r1, [r5, #8]
 800afdc:	ed95 6a08 	vldr	s12, [r5, #32]
 800afe0:	602a      	str	r2, [r5, #0]
 800afe2:	3301      	adds	r3, #1
 800afe4:	616b      	str	r3, [r5, #20]
 800afe6:	69ab      	ldr	r3, [r5, #24]
 800afe8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800afec:	3b01      	subs	r3, #1
 800afee:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 800aff2:	61ab      	str	r3, [r5, #24]
 800aff4:	692b      	ldr	r3, [r5, #16]
 800aff6:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800affa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800affe:	edd5 6a07 	vldr	s13, [r5, #28]
 800b002:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800b006:	440b      	add	r3, r1
 800b008:	68e9      	ldr	r1, [r5, #12]
 800b00a:	612b      	str	r3, [r5, #16]
 800b00c:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b010:	428b      	cmp	r3, r1
 800b012:	edc5 6a07 	vstr	s13, [r5, #28]
 800b016:	db15      	blt.n	800b044 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 800b018:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 800b01c:	ee76 6a26 	vadd.f32	s13, s12, s13
 800b020:	3201      	adds	r2, #1
 800b022:	edc5 6a07 	vstr	s13, [r5, #28]
 800b026:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 800b02a:	602a      	str	r2, [r5, #0]
 800b02c:	ee36 7a87 	vadd.f32	s14, s13, s14
 800b030:	1a5b      	subs	r3, r3, r1
 800b032:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800b036:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 800b03a:	612b      	str	r3, [r5, #16]
 800b03c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b040:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800b044:	3f01      	subs	r7, #1
 800b046:	e757      	b.n	800aef8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 800b048:	4299      	cmp	r1, r3
 800b04a:	dc13      	bgt.n	800b074 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 800b04c:	429a      	cmp	r2, r3
 800b04e:	da14      	bge.n	800b07a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 800b050:	2502      	movs	r5, #2
 800b052:	2703      	movs	r7, #3
 800b054:	46a9      	mov	r9, r5
 800b056:	f04f 0800 	mov.w	r8, #0
 800b05a:	f04f 0a01 	mov.w	sl, #1
 800b05e:	e6ef      	b.n	800ae40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800b060:	2501      	movs	r5, #1
 800b062:	2700      	movs	r7, #0
 800b064:	46a9      	mov	r9, r5
 800b066:	46b8      	mov	r8, r7
 800b068:	f04f 0a02 	mov.w	sl, #2
 800b06c:	e6e8      	b.n	800ae40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800b06e:	2501      	movs	r5, #1
 800b070:	2702      	movs	r7, #2
 800b072:	e6e1      	b.n	800ae38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 800b074:	2500      	movs	r5, #0
 800b076:	2701      	movs	r7, #1
 800b078:	e7f4      	b.n	800b064 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 800b07a:	2702      	movs	r7, #2
 800b07c:	2503      	movs	r5, #3
 800b07e:	f04f 0900 	mov.w	r9, #0
 800b082:	46b8      	mov	r8, r7
 800b084:	e7e9      	b.n	800b05a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 800b086:	4613      	mov	r3, r2
 800b088:	e728      	b.n	800aedc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 800b08a:	bf00      	nop
 800b08c:	20012650 	.word	0x20012650
 800b090:	fffd8f01 	.word	0xfffd8f01
 800b094:	00027100 	.word	0x00027100
 800b098:	0004e1ff 	.word	0x0004e1ff
 800b09c:	0004e1fe 	.word	0x0004e1fe
 800b0a0:	20012658 	.word	0x20012658
 800b0a4:	4613      	mov	r3, r2
 800b0a6:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800b0a8:	9111      	str	r1, [sp, #68]	@ 0x44
 800b0aa:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 800b0ae:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 800b0b2:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 800b0b4:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 800b0b8:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 800b0bc:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 800b0c0:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 800b0c4:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 800b0c8:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800b0cc:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 800b0d0:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 800b0d4:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 800b0d8:	469e      	mov	lr, r3
 800b0da:	469c      	mov	ip, r3
 800b0dc:	f04f 0900 	mov.w	r9, #0
 800b0e0:	f1bc 0f00 	cmp.w	ip, #0
 800b0e4:	d147      	bne.n	800b176 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 800b0e6:	eb03 0c07 	add.w	ip, r3, r7
 800b0ea:	1ad7      	subs	r7, r2, r3
 800b0ec:	f1b9 0f00 	cmp.w	r9, #0
 800b0f0:	d009      	beq.n	800b106 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 800b0f2:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 800b0f6:	9029      	str	r0, [sp, #164]	@ 0xa4
 800b0f8:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 800b0fc:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 800b100:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 800b104:	912d      	str	r1, [sp, #180]	@ 0xb4
 800b106:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800b108:	9111      	str	r1, [sp, #68]	@ 0x44
 800b10a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 800b10e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 800b112:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 800b116:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 800b11a:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 800b11e:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 800b122:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 800b126:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 800b12a:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 800b12e:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 800b132:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 800b136:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 800b13a:	f04f 0800 	mov.w	r8, #0
 800b13e:	f1be 0f00 	cmp.w	lr, #0
 800b142:	d031      	beq.n	800b1a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 800b144:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800b146:	4431      	add	r1, r6
 800b148:	4549      	cmp	r1, r9
 800b14a:	4450      	add	r0, sl
 800b14c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800b150:	ee37 7a04 	vadd.f32	s14, s14, s8
 800b154:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800b158:	db08      	blt.n	800b16c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 800b15a:	ee77 7a85 	vadd.f32	s15, s15, s10
 800b15e:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800b162:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b166:	3001      	adds	r0, #1
 800b168:	eba1 0109 	sub.w	r1, r1, r9
 800b16c:	f10e 3eff 	add.w	lr, lr, #4294967295
 800b170:	f04f 0801 	mov.w	r8, #1
 800b174:	e7e3      	b.n	800b13e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 800b176:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800b178:	4431      	add	r1, r6
 800b17a:	4541      	cmp	r1, r8
 800b17c:	4450      	add	r0, sl
 800b17e:	ee37 7a24 	vadd.f32	s14, s14, s9
 800b182:	ee77 7a84 	vadd.f32	s15, s15, s8
 800b186:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800b18a:	db08      	blt.n	800b19e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 800b18c:	ee76 6a85 	vadd.f32	s13, s13, s10
 800b190:	ee37 7a25 	vadd.f32	s14, s14, s11
 800b194:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b198:	3001      	adds	r0, #1
 800b19a:	eba1 0108 	sub.w	r1, r1, r8
 800b19e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b1a2:	f04f 0901 	mov.w	r9, #1
 800b1a6:	e79b      	b.n	800b0e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 800b1a8:	449c      	add	ip, r3
 800b1aa:	1aff      	subs	r7, r7, r3
 800b1ac:	f1b8 0f00 	cmp.w	r8, #0
 800b1b0:	d009      	beq.n	800b1c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 800b1b2:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 800b1b6:	9019      	str	r0, [sp, #100]	@ 0x64
 800b1b8:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 800b1bc:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 800b1c0:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 800b1c4:	911d      	str	r1, [sp, #116]	@ 0x74
 800b1c6:	1ad2      	subs	r2, r2, r3
 800b1c8:	e68b      	b.n	800aee2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800b1ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1cc:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	f000 80d1 	beq.w	800b376 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 800b1d4:	ad19      	add	r5, sp, #100	@ 0x64
 800b1d6:	ac39      	add	r4, sp, #228	@ 0xe4
 800b1d8:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800b1da:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800b1de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800b1e2:	930c      	str	r3, [sp, #48]	@ 0x30
 800b1e4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b1e6:	6963      	ldr	r3, [r4, #20]
 800b1e8:	440b      	add	r3, r1
 800b1ea:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800b1ee:	4408      	add	r0, r1
 800b1f0:	b200      	sxth	r0, r0
 800b1f2:	4283      	cmp	r3, r0
 800b1f4:	900d      	str	r0, [sp, #52]	@ 0x34
 800b1f6:	f280 80c1 	bge.w	800b37c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 800b1fa:	428b      	cmp	r3, r1
 800b1fc:	da08      	bge.n	800b210 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800b1fe:	2a00      	cmp	r2, #0
 800b200:	dd06      	ble.n	800b210 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800b202:	1acb      	subs	r3, r1, r3
 800b204:	429a      	cmp	r2, r3
 800b206:	f2c0 80bb 	blt.w	800b380 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	f300 80b9 	bgt.w	800b382 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 800b210:	6967      	ldr	r7, [r4, #20]
 800b212:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b214:	443b      	add	r3, r7
 800b216:	461f      	mov	r7, r3
 800b218:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b21a:	1bdf      	subs	r7, r3, r7
 800b21c:	4297      	cmp	r7, r2
 800b21e:	bfa8      	it	ge
 800b220:	4617      	movge	r7, r2
 800b222:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 800b226:	2f00      	cmp	r7, #0
 800b228:	f340 813c 	ble.w	800b4a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 800b22c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800b22e:	6829      	ldr	r1, [r5, #0]
 800b230:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b234:	f9bb 3000 	ldrsh.w	r3, [fp]
 800b238:	6820      	ldr	r0, [r4, #0]
 800b23a:	4411      	add	r1, r2
 800b23c:	4299      	cmp	r1, r3
 800b23e:	dd1a      	ble.n	800b276 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800b240:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800b244:	440b      	add	r3, r1
 800b246:	4402      	add	r2, r0
 800b248:	b21b      	sxth	r3, r3
 800b24a:	429a      	cmp	r2, r3
 800b24c:	dc13      	bgt.n	800b276 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800b24e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b250:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	9206      	str	r2, [sp, #24]
 800b256:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b258:	9205      	str	r2, [sp, #20]
 800b25a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b25c:	9500      	str	r5, [sp, #0]
 800b25e:	e9cd b203 	strd	fp, r2, [sp, #12]
 800b262:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800b264:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b266:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800b26a:	a912      	add	r1, sp, #72	@ 0x48
 800b26c:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 800b270:	aa49      	add	r2, sp, #292	@ 0x124
 800b272:	4623      	mov	r3, r4
 800b274:	47c8      	blx	r9
 800b276:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b27a:	441a      	add	r2, r3
 800b27c:	6963      	ldr	r3, [r4, #20]
 800b27e:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 800b282:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 800b286:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 800b28a:	68a1      	ldr	r1, [r4, #8]
 800b28c:	ed94 6a08 	vldr	s12, [r4, #32]
 800b290:	6022      	str	r2, [r4, #0]
 800b292:	3301      	adds	r3, #1
 800b294:	6163      	str	r3, [r4, #20]
 800b296:	69a3      	ldr	r3, [r4, #24]
 800b298:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b29c:	3b01      	subs	r3, #1
 800b29e:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 800b2a2:	61a3      	str	r3, [r4, #24]
 800b2a4:	6923      	ldr	r3, [r4, #16]
 800b2a6:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800b2aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2ae:	edd4 6a07 	vldr	s13, [r4, #28]
 800b2b2:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800b2b6:	440b      	add	r3, r1
 800b2b8:	68e1      	ldr	r1, [r4, #12]
 800b2ba:	6123      	str	r3, [r4, #16]
 800b2bc:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b2c0:	428b      	cmp	r3, r1
 800b2c2:	edc4 6a07 	vstr	s13, [r4, #28]
 800b2c6:	db15      	blt.n	800b2f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 800b2c8:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 800b2cc:	ee76 6a26 	vadd.f32	s13, s12, s13
 800b2d0:	3201      	adds	r2, #1
 800b2d2:	edc4 6a07 	vstr	s13, [r4, #28]
 800b2d6:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 800b2da:	6022      	str	r2, [r4, #0]
 800b2dc:	ee36 7a87 	vadd.f32	s14, s13, s14
 800b2e0:	1a5b      	subs	r3, r3, r1
 800b2e2:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 800b2e6:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 800b2ea:	6123      	str	r3, [r4, #16]
 800b2ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b2f0:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 800b2f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b2f8:	441a      	add	r2, r3
 800b2fa:	696b      	ldr	r3, [r5, #20]
 800b2fc:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 800b300:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 800b304:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 800b308:	68a9      	ldr	r1, [r5, #8]
 800b30a:	ed95 6a08 	vldr	s12, [r5, #32]
 800b30e:	602a      	str	r2, [r5, #0]
 800b310:	3301      	adds	r3, #1
 800b312:	616b      	str	r3, [r5, #20]
 800b314:	69ab      	ldr	r3, [r5, #24]
 800b316:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b31a:	3b01      	subs	r3, #1
 800b31c:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 800b320:	61ab      	str	r3, [r5, #24]
 800b322:	692b      	ldr	r3, [r5, #16]
 800b324:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800b328:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b32c:	edd5 6a07 	vldr	s13, [r5, #28]
 800b330:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800b334:	440b      	add	r3, r1
 800b336:	68e9      	ldr	r1, [r5, #12]
 800b338:	612b      	str	r3, [r5, #16]
 800b33a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b33e:	428b      	cmp	r3, r1
 800b340:	edc5 6a07 	vstr	s13, [r5, #28]
 800b344:	db15      	blt.n	800b372 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 800b346:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 800b34a:	ee76 6a26 	vadd.f32	s13, s12, s13
 800b34e:	3201      	adds	r2, #1
 800b350:	edc5 6a07 	vstr	s13, [r5, #28]
 800b354:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 800b358:	602a      	str	r2, [r5, #0]
 800b35a:	ee36 7a87 	vadd.f32	s14, s13, s14
 800b35e:	1a5b      	subs	r3, r3, r1
 800b360:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 800b364:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 800b368:	612b      	str	r3, [r5, #16]
 800b36a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b36e:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 800b372:	3f01      	subs	r7, #1
 800b374:	e757      	b.n	800b226 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 800b376:	ad39      	add	r5, sp, #228	@ 0xe4
 800b378:	ac19      	add	r4, sp, #100	@ 0x64
 800b37a:	e72d      	b.n	800b1d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 800b37c:	4613      	mov	r3, r2
 800b37e:	e744      	b.n	800b20a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 800b380:	4613      	mov	r3, r2
 800b382:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 800b386:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 800b388:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 800b38c:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 800b390:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 800b394:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 800b398:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 800b39c:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 800b3a0:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 800b3a4:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 800b3a6:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 800b3aa:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 800b3ae:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 800b3b2:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 800b3b6:	960e      	str	r6, [sp, #56]	@ 0x38
 800b3b8:	469e      	mov	lr, r3
 800b3ba:	461f      	mov	r7, r3
 800b3bc:	f04f 0900 	mov.w	r9, #0
 800b3c0:	2f00      	cmp	r7, #0
 800b3c2:	d146      	bne.n	800b452 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 800b3c4:	449c      	add	ip, r3
 800b3c6:	1ad7      	subs	r7, r2, r3
 800b3c8:	f1b9 0f00 	cmp.w	r9, #0
 800b3cc:	d009      	beq.n	800b3e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 800b3ce:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 800b3d2:	9039      	str	r0, [sp, #228]	@ 0xe4
 800b3d4:	913d      	str	r1, [sp, #244]	@ 0xf4
 800b3d6:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 800b3da:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 800b3de:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 800b3e2:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800b3e4:	910e      	str	r1, [sp, #56]	@ 0x38
 800b3e6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 800b3ea:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 800b3ee:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 800b3f2:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 800b3f6:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 800b3fa:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 800b3fe:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 800b402:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 800b406:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 800b40a:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 800b40e:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 800b412:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 800b416:	f04f 0800 	mov.w	r8, #0
 800b41a:	f1be 0f00 	cmp.w	lr, #0
 800b41e:	d030      	beq.n	800b482 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 800b420:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800b422:	4431      	add	r1, r6
 800b424:	4549      	cmp	r1, r9
 800b426:	4450      	add	r0, sl
 800b428:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800b42c:	ee37 7a04 	vadd.f32	s14, s14, s8
 800b430:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800b434:	db08      	blt.n	800b448 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 800b436:	ee77 7a85 	vadd.f32	s15, s15, s10
 800b43a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800b43e:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b442:	3001      	adds	r0, #1
 800b444:	eba1 0109 	sub.w	r1, r1, r9
 800b448:	f10e 3eff 	add.w	lr, lr, #4294967295
 800b44c:	f04f 0801 	mov.w	r8, #1
 800b450:	e7e3      	b.n	800b41a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 800b452:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 800b454:	4431      	add	r1, r6
 800b456:	4541      	cmp	r1, r8
 800b458:	4450      	add	r0, sl
 800b45a:	ee37 7a24 	vadd.f32	s14, s14, s9
 800b45e:	ee77 7a84 	vadd.f32	s15, s15, s8
 800b462:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800b466:	db08      	blt.n	800b47a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 800b468:	ee76 6a85 	vadd.f32	s13, s13, s10
 800b46c:	ee37 7a25 	vadd.f32	s14, s14, s11
 800b470:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b474:	3001      	adds	r0, #1
 800b476:	eba1 0108 	sub.w	r1, r1, r8
 800b47a:	3f01      	subs	r7, #1
 800b47c:	f04f 0901 	mov.w	r9, #1
 800b480:	e79e      	b.n	800b3c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 800b482:	449c      	add	ip, r3
 800b484:	1aff      	subs	r7, r7, r3
 800b486:	f1b8 0f00 	cmp.w	r8, #0
 800b48a:	d009      	beq.n	800b4a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 800b48c:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 800b490:	9019      	str	r0, [sp, #100]	@ 0x64
 800b492:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 800b496:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 800b49a:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 800b49e:	911d      	str	r1, [sp, #116]	@ 0x74
 800b4a0:	1ad2      	subs	r2, r2, r3
 800b4a2:	e6b5      	b.n	800b210 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800b4a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	b923      	cbnz	r3, 800b4b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800b4aa:	4b04      	ldr	r3, [pc, #16]	@ (800b4bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 800b4ac:	6818      	ldr	r0, [r3, #0]
 800b4ae:	6803      	ldr	r3, [r0, #0]
 800b4b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4b2:	4798      	blx	r3
 800b4b4:	b05b      	add	sp, #364	@ 0x16c
 800b4b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4ba:	bf00      	nop
 800b4bc:	20012658 	.word	0x20012658

0800b4c0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 800b4c0:	b570      	push	{r4, r5, r6, lr}
 800b4c2:	4604      	mov	r4, r0
 800b4c4:	f89d 601c 	ldrb.w	r6, [sp, #28]
 800b4c8:	9805      	ldr	r0, [sp, #20]
 800b4ca:	6061      	str	r1, [r4, #4]
 800b4cc:	2500      	movs	r5, #0
 800b4ce:	f89d 1010 	ldrb.w	r1, [sp, #16]
 800b4d2:	8263      	strh	r3, [r4, #18]
 800b4d4:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800b4d8:	8025      	strh	r5, [r4, #0]
 800b4da:	7221      	strb	r1, [r4, #8]
 800b4dc:	7266      	strb	r6, [r4, #9]
 800b4de:	60e0      	str	r0, [r4, #12]
 800b4e0:	8222      	strh	r2, [r4, #16]
 800b4e2:	82a3      	strh	r3, [r4, #20]
 800b4e4:	82e5      	strh	r5, [r4, #22]
 800b4e6:	8325      	strh	r5, [r4, #24]
 800b4e8:	8365      	strh	r5, [r4, #26]
 800b4ea:	83a5      	strh	r5, [r4, #28]
 800b4ec:	83e5      	strh	r5, [r4, #30]
 800b4ee:	8425      	strh	r5, [r4, #32]
 800b4f0:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 800b4f4:	b32e      	cbz	r6, 800b542 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800b4f6:	6803      	ldr	r3, [r0, #0]
 800b4f8:	695b      	ldr	r3, [r3, #20]
 800b4fa:	4798      	blx	r3
 800b4fc:	4606      	mov	r6, r0
 800b4fe:	b300      	cbz	r0, 800b542 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800b500:	68e0      	ldr	r0, [r4, #12]
 800b502:	6803      	ldr	r3, [r0, #0]
 800b504:	4631      	mov	r1, r6
 800b506:	68db      	ldr	r3, [r3, #12]
 800b508:	4798      	blx	r3
 800b50a:	4605      	mov	r5, r0
 800b50c:	b1c8      	cbz	r0, 800b542 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800b50e:	7b43      	ldrb	r3, [r0, #13]
 800b510:	7a82      	ldrb	r2, [r0, #10]
 800b512:	005b      	lsls	r3, r3, #1
 800b514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b518:	4313      	orrs	r3, r2
 800b51a:	8423      	strh	r3, [r4, #32]
 800b51c:	7a63      	ldrb	r3, [r4, #9]
 800b51e:	2b06      	cmp	r3, #6
 800b520:	d10f      	bne.n	800b542 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 800b522:	68e0      	ldr	r0, [r4, #12]
 800b524:	6803      	ldr	r3, [r0, #0]
 800b526:	462a      	mov	r2, r5
 800b528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b52a:	4631      	mov	r1, r6
 800b52c:	4798      	blx	r3
 800b52e:	7b6b      	ldrb	r3, [r5, #13]
 800b530:	005b      	lsls	r3, r3, #1
 800b532:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800b536:	7aab      	ldrb	r3, [r5, #10]
 800b538:	4313      	orrs	r3, r2
 800b53a:	4418      	add	r0, r3
 800b53c:	8c23      	ldrh	r3, [r4, #32]
 800b53e:	4418      	add	r0, r3
 800b540:	8420      	strh	r0, [r4, #32]
 800b542:	4620      	mov	r0, r4
 800b544:	bd70      	pop	{r4, r5, r6, pc}

0800b546 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 800b546:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b54a:	2400      	movs	r4, #0
 800b54c:	b085      	sub	sp, #20
 800b54e:	4681      	mov	r9, r0
 800b550:	4688      	mov	r8, r1
 800b552:	4692      	mov	sl, r2
 800b554:	469b      	mov	fp, r3
 800b556:	4627      	mov	r7, r4
 800b558:	4625      	mov	r5, r4
 800b55a:	4626      	mov	r6, r4
 800b55c:	4554      	cmp	r4, sl
 800b55e:	da2a      	bge.n	800b5b6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800b560:	2300      	movs	r3, #0
 800b562:	9303      	str	r3, [sp, #12]
 800b564:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800b568:	429d      	cmp	r5, r3
 800b56a:	d004      	beq.n	800b576 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 800b56c:	f242 030b 	movw	r3, #8203	@ 0x200b
 800b570:	429d      	cmp	r5, r3
 800b572:	bf18      	it	ne
 800b574:	462f      	movne	r7, r5
 800b576:	ab03      	add	r3, sp, #12
 800b578:	4642      	mov	r2, r8
 800b57a:	4659      	mov	r1, fp
 800b57c:	4648      	mov	r0, r9
 800b57e:	f004 f81f 	bl	800f5c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800b582:	4605      	mov	r5, r0
 800b584:	b1b8      	cbz	r0, 800b5b6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800b586:	280a      	cmp	r0, #10
 800b588:	d015      	beq.n	800b5b6 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 800b58a:	9a03      	ldr	r2, [sp, #12]
 800b58c:	b18a      	cbz	r2, 800b5b2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 800b58e:	7b50      	ldrb	r0, [r2, #13]
 800b590:	7a93      	ldrb	r3, [r2, #10]
 800b592:	8895      	ldrh	r5, [r2, #4]
 800b594:	0040      	lsls	r0, r0, #1
 800b596:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 800b59a:	4303      	orrs	r3, r0
 800b59c:	9301      	str	r3, [sp, #4]
 800b59e:	f8d8 3000 	ldr.w	r3, [r8]
 800b5a2:	4639      	mov	r1, r7
 800b5a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5a6:	4640      	mov	r0, r8
 800b5a8:	4798      	blx	r3
 800b5aa:	9b01      	ldr	r3, [sp, #4]
 800b5ac:	4418      	add	r0, r3
 800b5ae:	4406      	add	r6, r0
 800b5b0:	b2b6      	uxth	r6, r6
 800b5b2:	3401      	adds	r4, #1
 800b5b4:	e7d2      	b.n	800b55c <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 800b5b6:	4630      	mov	r0, r6
 800b5b8:	b005      	add	sp, #20
 800b5ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b5be <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 800b5be:	2a02      	cmp	r2, #2
 800b5c0:	b530      	push	{r4, r5, lr}
 800b5c2:	d011      	beq.n	800b5e8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 800b5c4:	2a03      	cmp	r2, #3
 800b5c6:	d01c      	beq.n	800b602 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 800b5c8:	2a01      	cmp	r2, #1
 800b5ca:	d10c      	bne.n	800b5e6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800b5cc:	888b      	ldrh	r3, [r1, #4]
 800b5ce:	8801      	ldrh	r1, [r0, #0]
 800b5d0:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800b5d4:	8844      	ldrh	r4, [r0, #2]
 800b5d6:	8004      	strh	r4, [r0, #0]
 800b5d8:	1a5b      	subs	r3, r3, r1
 800b5da:	1a9b      	subs	r3, r3, r2
 800b5dc:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800b5e0:	8043      	strh	r3, [r0, #2]
 800b5e2:	8081      	strh	r1, [r0, #4]
 800b5e4:	80c2      	strh	r2, [r0, #6]
 800b5e6:	bd30      	pop	{r4, r5, pc}
 800b5e8:	88cb      	ldrh	r3, [r1, #6]
 800b5ea:	8842      	ldrh	r2, [r0, #2]
 800b5ec:	1a9b      	subs	r3, r3, r2
 800b5ee:	88c2      	ldrh	r2, [r0, #6]
 800b5f0:	1a9b      	subs	r3, r3, r2
 800b5f2:	888a      	ldrh	r2, [r1, #4]
 800b5f4:	8801      	ldrh	r1, [r0, #0]
 800b5f6:	8043      	strh	r3, [r0, #2]
 800b5f8:	1a52      	subs	r2, r2, r1
 800b5fa:	8881      	ldrh	r1, [r0, #4]
 800b5fc:	1a52      	subs	r2, r2, r1
 800b5fe:	8002      	strh	r2, [r0, #0]
 800b600:	e7f1      	b.n	800b5e6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 800b602:	88cb      	ldrh	r3, [r1, #6]
 800b604:	8841      	ldrh	r1, [r0, #2]
 800b606:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800b60a:	f9b0 5000 	ldrsh.w	r5, [r0]
 800b60e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800b612:	8045      	strh	r5, [r0, #2]
 800b614:	1a5b      	subs	r3, r3, r1
 800b616:	1a9b      	subs	r3, r3, r2
 800b618:	8003      	strh	r3, [r0, #0]
 800b61a:	8082      	strh	r2, [r0, #4]
 800b61c:	80c4      	strh	r4, [r0, #6]
 800b61e:	e7e2      	b.n	800b5e6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0800b620 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 800b620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b624:	b09f      	sub	sp, #124	@ 0x7c
 800b626:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b628:	9312      	str	r3, [sp, #72]	@ 0x48
 800b62a:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800b62c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800b62e:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 800b630:	8812      	ldrh	r2, [r2, #0]
 800b632:	889b      	ldrh	r3, [r3, #4]
 800b634:	900e      	str	r0, [sp, #56]	@ 0x38
 800b636:	4413      	add	r3, r2
 800b638:	6828      	ldr	r0, [r5, #0]
 800b63a:	9117      	str	r1, [sp, #92]	@ 0x5c
 800b63c:	b21b      	sxth	r3, r3
 800b63e:	9311      	str	r3, [sp, #68]	@ 0x44
 800b640:	6803      	ldr	r3, [r0, #0]
 800b642:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 800b646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b648:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 800b64c:	4798      	blx	r3
 800b64e:	682b      	ldr	r3, [r5, #0]
 800b650:	9013      	str	r0, [sp, #76]	@ 0x4c
 800b652:	7b1a      	ldrb	r2, [r3, #12]
 800b654:	7adb      	ldrb	r3, [r3, #11]
 800b656:	9215      	str	r2, [sp, #84]	@ 0x54
 800b658:	9316      	str	r3, [sp, #88]	@ 0x58
 800b65a:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 800b65e:	2c00      	cmp	r4, #0
 800b660:	d067      	beq.n	800b732 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 800b662:	7c2b      	ldrb	r3, [r5, #16]
 800b664:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 800b666:	2b06      	cmp	r3, #6
 800b668:	bf14      	ite	ne
 800b66a:	2301      	movne	r3, #1
 800b66c:	2302      	moveq	r3, #2
 800b66e:	4413      	add	r3, r2
 800b670:	f04f 0900 	mov.w	r9, #0
 800b674:	9310      	str	r3, [sp, #64]	@ 0x40
 800b676:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 800b67a:	464c      	mov	r4, r9
 800b67c:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 800b680:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b682:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800b684:	4293      	cmp	r3, r2
 800b686:	f280 808b 	bge.w	800b7a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800b68a:	2300      	movs	r3, #0
 800b68c:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 800b690:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 800b694:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800b698:	429c      	cmp	r4, r3
 800b69a:	d006      	beq.n	800b6aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 800b69c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b69e:	f242 020b 	movw	r2, #8203	@ 0x200b
 800b6a2:	4294      	cmp	r4, r2
 800b6a4:	bf18      	it	ne
 800b6a6:	4623      	movne	r3, r4
 800b6a8:	930c      	str	r3, [sp, #48]	@ 0x30
 800b6aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b6ac:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 800b6ae:	682a      	ldr	r2, [r5, #0]
 800b6b0:	428b      	cmp	r3, r1
 800b6b2:	db40      	blt.n	800b736 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 800b6b4:	6813      	ldr	r3, [r2, #0]
 800b6b6:	4610      	mov	r0, r2
 800b6b8:	695b      	ldr	r3, [r3, #20]
 800b6ba:	4798      	blx	r3
 800b6bc:	4604      	mov	r4, r0
 800b6be:	6828      	ldr	r0, [r5, #0]
 800b6c0:	6803      	ldr	r3, [r0, #0]
 800b6c2:	aa1d      	add	r2, sp, #116	@ 0x74
 800b6c4:	689f      	ldr	r7, [r3, #8]
 800b6c6:	4621      	mov	r1, r4
 800b6c8:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 800b6cc:	47b8      	blx	r7
 800b6ce:	901c      	str	r0, [sp, #112]	@ 0x70
 800b6d0:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800b6d4:	429c      	cmp	r4, r3
 800b6d6:	f000 80ea 	beq.w	800b8ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800b6da:	f242 030b 	movw	r3, #8203	@ 0x200b
 800b6de:	429c      	cmp	r4, r3
 800b6e0:	f000 80e5 	beq.w	800b8ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800b6e4:	2c00      	cmp	r4, #0
 800b6e6:	f000 810c 	beq.w	800b902 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 800b6ea:	2c0a      	cmp	r4, #10
 800b6ec:	d05e      	beq.n	800b7ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800b6ee:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b6f0:	b36a      	cbz	r2, 800b74e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 800b6f2:	8894      	ldrh	r4, [r2, #4]
 800b6f4:	f1bb 0f00 	cmp.w	fp, #0
 800b6f8:	d03a      	beq.n	800b770 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 800b6fa:	f892 900d 	ldrb.w	r9, [r2, #13]
 800b6fe:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800b702:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 800b706:	f892 900a 	ldrb.w	r9, [r2, #10]
 800b70a:	f1bb 0f01 	cmp.w	fp, #1
 800b70e:	ea49 0903 	orr.w	r9, r9, r3
 800b712:	d133      	bne.n	800b77c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 800b714:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b716:	eba6 0609 	sub.w	r6, r6, r9
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d14d      	bne.n	800b7ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800b71e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b720:	eb09 0306 	add.w	r3, r9, r6
 800b724:	4413      	add	r3, r2
 800b726:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800b728:	f9b2 2000 	ldrsh.w	r2, [r2]
 800b72c:	4293      	cmp	r3, r2
 800b72e:	da4e      	bge.n	800b7ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 800b730:	e036      	b.n	800b7a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 800b732:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800b734:	e79c      	b.n	800b670 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 800b736:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 800b73a:	9301      	str	r3, [sp, #4]
 800b73c:	ab1d      	add	r3, sp, #116	@ 0x74
 800b73e:	9300      	str	r3, [sp, #0]
 800b740:	4659      	mov	r1, fp
 800b742:	ab1c      	add	r3, sp, #112	@ 0x70
 800b744:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800b746:	f003 ff84 	bl	800f652 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 800b74a:	4604      	mov	r4, r0
 800b74c:	e7c0      	b.n	800b6d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 800b74e:	6828      	ldr	r0, [r5, #0]
 800b750:	6803      	ldr	r3, [r0, #0]
 800b752:	691b      	ldr	r3, [r3, #16]
 800b754:	4798      	blx	r3
 800b756:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800b75a:	4298      	cmp	r0, r3
 800b75c:	f000 80a7 	beq.w	800b8ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800b760:	f242 030b 	movw	r3, #8203	@ 0x200b
 800b764:	4298      	cmp	r0, r3
 800b766:	f000 80a2 	beq.w	800b8ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800b76a:	f1bb 0f00 	cmp.w	fp, #0
 800b76e:	d100      	bne.n	800b772 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 800b770:	444e      	add	r6, r9
 800b772:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b774:	2a00      	cmp	r2, #0
 800b776:	d1c0      	bne.n	800b6fa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 800b778:	4691      	mov	r9, r2
 800b77a:	e098      	b.n	800b8ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800b77c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b77e:	2b00      	cmp	r3, #0
 800b780:	f000 80c1 	beq.w	800b906 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e6>
 800b784:	f1bb 0f00 	cmp.w	fp, #0
 800b788:	d117      	bne.n	800b7ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 800b78a:	6828      	ldr	r0, [r5, #0]
 800b78c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b78e:	6803      	ldr	r3, [r0, #0]
 800b790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b792:	4798      	blx	r3
 800b794:	4406      	add	r6, r0
 800b796:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b798:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b79a:	1af3      	subs	r3, r6, r3
 800b79c:	4293      	cmp	r3, r2
 800b79e:	dd16      	ble.n	800b7ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 800b7a0:	2c00      	cmp	r4, #0
 800b7a2:	f000 80ae 	beq.w	800b902 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 800b7a6:	2c0a      	cmp	r4, #10
 800b7a8:	f040 809c 	bne.w	800b8e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c4>
 800b7ac:	240a      	movs	r4, #10
 800b7ae:	fab4 f084 	clz	r0, r4
 800b7b2:	0940      	lsrs	r0, r0, #5
 800b7b4:	b01f      	add	sp, #124	@ 0x7c
 800b7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ba:	6828      	ldr	r0, [r5, #0]
 800b7bc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b7be:	6803      	ldr	r3, [r0, #0]
 800b7c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7c2:	4798      	blx	r3
 800b7c4:	f1bb 0f01 	cmp.w	fp, #1
 800b7c8:	eba6 0600 	sub.w	r6, r6, r0
 800b7cc:	d0a7      	beq.n	800b71e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 800b7ce:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800b7d0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800b7d2:	f990 1009 	ldrsb.w	r1, [r0, #9]
 800b7d6:	f9b3 8000 	ldrsh.w	r8, [r3]
 800b7da:	7b43      	ldrb	r3, [r0, #13]
 800b7dc:	015b      	lsls	r3, r3, #5
 800b7de:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800b7e2:	7983      	ldrb	r3, [r0, #6]
 800b7e4:	4431      	add	r1, r6
 800b7e6:	4313      	orrs	r3, r2
 800b7e8:	440b      	add	r3, r1
 800b7ea:	4543      	cmp	r3, r8
 800b7ec:	db5f      	blt.n	800b8ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800b7ee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b7f0:	4299      	cmp	r1, r3
 800b7f2:	da5c      	bge.n	800b8ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800b7f4:	6828      	ldr	r0, [r5, #0]
 800b7f6:	6803      	ldr	r3, [r0, #0]
 800b7f8:	45b0      	cmp	r8, r6
 800b7fa:	bfc8      	it	gt
 800b7fc:	eba8 0806 	subgt.w	r8, r8, r6
 800b800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b802:	bfcc      	ite	gt
 800b804:	fa1f f888 	uxthgt.w	r8, r8
 800b808:	f04f 0800 	movle.w	r8, #0
 800b80c:	4798      	blx	r3
 800b80e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b810:	7b53      	ldrb	r3, [r2, #13]
 800b812:	00d9      	lsls	r1, r3, #3
 800b814:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 800b818:	7a11      	ldrb	r1, [r2, #8]
 800b81a:	4339      	orrs	r1, r7
 800b81c:	065f      	lsls	r7, r3, #25
 800b81e:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800b820:	bf44      	itt	mi
 800b822:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 800b826:	b209      	sxthmi	r1, r1
 800b828:	19c7      	adds	r7, r0, r7
 800b82a:	1a7f      	subs	r7, r7, r1
 800b82c:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 800b82e:	b2bf      	uxth	r7, r7
 800b830:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 800b834:	fa0f fa87 	sxth.w	sl, r7
 800b838:	4551      	cmp	r1, sl
 800b83a:	dd3c      	ble.n	800b8b6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 800b83c:	011b      	lsls	r3, r3, #4
 800b83e:	79d0      	ldrb	r0, [r2, #7]
 800b840:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b844:	4303      	orrs	r3, r0
 800b846:	449a      	add	sl, r3
 800b848:	4551      	cmp	r1, sl
 800b84a:	dc30      	bgt.n	800b8ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800b84c:	1bcf      	subs	r7, r1, r7
 800b84e:	b23f      	sxth	r7, r7
 800b850:	468a      	mov	sl, r1
 800b852:	9219      	str	r2, [sp, #100]	@ 0x64
 800b854:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b856:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b858:	6828      	ldr	r0, [r5, #0]
 800b85a:	2a00      	cmp	r2, #0
 800b85c:	d12d      	bne.n	800b8ba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 800b85e:	9318      	str	r3, [sp, #96]	@ 0x60
 800b860:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b862:	6819      	ldr	r1, [r3, #0]
 800b864:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 800b866:	6801      	ldr	r1, [r0, #0]
 800b868:	9314      	str	r3, [sp, #80]	@ 0x50
 800b86a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b86c:	4788      	blx	r1
 800b86e:	79a9      	ldrb	r1, [r5, #6]
 800b870:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b872:	7ba9      	ldrb	r1, [r5, #14]
 800b874:	910a      	str	r1, [sp, #40]	@ 0x28
 800b876:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 800b87a:	9109      	str	r1, [sp, #36]	@ 0x24
 800b87c:	68a9      	ldr	r1, [r5, #8]
 800b87e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800b880:	9306      	str	r3, [sp, #24]
 800b882:	b2bf      	uxth	r7, r7
 800b884:	e9cd 8702 	strd	r8, r7, [sp, #8]
 800b888:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800b88a:	9304      	str	r3, [sp, #16]
 800b88c:	44b0      	add	r8, r6
 800b88e:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800b892:	fa0f f388 	sxth.w	r3, r8
 800b896:	9300      	str	r3, [sp, #0]
 800b898:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b89a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b89c:	9205      	str	r2, [sp, #20]
 800b89e:	f8cd a004 	str.w	sl, [sp, #4]
 800b8a2:	681a      	ldr	r2, [r3, #0]
 800b8a4:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800b8a6:	685b      	ldr	r3, [r3, #4]
 800b8a8:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800b8aa:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 800b8ac:	47b8      	blx	r7
 800b8ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b8b0:	3301      	adds	r3, #1
 800b8b2:	930d      	str	r3, [sp, #52]	@ 0x34
 800b8b4:	e6e4      	b.n	800b680 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 800b8b6:	2700      	movs	r7, #0
 800b8b8:	e7cb      	b.n	800b852 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x232>
 800b8ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b8bc:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800b8c0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b8c2:	f8dc 1000 	ldr.w	r1, [ip]
 800b8c6:	e9cd 6204 	strd	r6, r2, [sp, #16]
 800b8ca:	79aa      	ldrb	r2, [r5, #6]
 800b8cc:	9203      	str	r2, [sp, #12]
 800b8ce:	7baa      	ldrb	r2, [r5, #14]
 800b8d0:	9202      	str	r2, [sp, #8]
 800b8d2:	68aa      	ldr	r2, [r5, #8]
 800b8d4:	e9cd 0200 	strd	r0, r2, [sp]
 800b8d8:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800b8da:	688f      	ldr	r7, [r1, #8]
 800b8dc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b8de:	4660      	mov	r0, ip
 800b8e0:	47b8      	blx	r7
 800b8e2:	e7e4      	b.n	800b8ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 800b8e4:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800b8e6:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800b8e8:	3501      	adds	r5, #1
 800b8ea:	429d      	cmp	r5, r3
 800b8ec:	f6bf af5f 	bge.w	800b7ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800b8f0:	4659      	mov	r1, fp
 800b8f2:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800b8f4:	f7f7 fe6a 	bl	80035cc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800b8f8:	4604      	mov	r4, r0
 800b8fa:	b110      	cbz	r0, 800b902 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e2>
 800b8fc:	280a      	cmp	r0, #10
 800b8fe:	d1f2      	bne.n	800b8e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 800b900:	e754      	b.n	800b7ac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 800b902:	2400      	movs	r4, #0
 800b904:	e753      	b.n	800b7ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 800b906:	f1bb 0f00 	cmp.w	fp, #0
 800b90a:	f43f af44 	beq.w	800b796 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 800b90e:	e75e      	b.n	800b7ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

0800b910 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>:
 800b910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b914:	b089      	sub	sp, #36	@ 0x24
 800b916:	4699      	mov	r9, r3
 800b918:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b91a:	f8bd 4050 	ldrh.w	r4, [sp, #80]	@ 0x50
 800b91e:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b920:	4683      	mov	fp, r0
 800b922:	460d      	mov	r5, r1
 800b924:	4690      	mov	r8, r2
 800b926:	bb1b      	cbnz	r3, 800b970 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0x60>
 800b928:	6813      	ldr	r3, [r2, #0]
 800b92a:	4610      	mov	r0, r2
 800b92c:	695b      	ldr	r3, [r3, #20]
 800b92e:	4798      	blx	r3
 800b930:	4682      	mov	sl, r0
 800b932:	b1e8      	cbz	r0, 800b970 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0x60>
 800b934:	f8d8 3000 	ldr.w	r3, [r8]
 800b938:	4601      	mov	r1, r0
 800b93a:	68db      	ldr	r3, [r3, #12]
 800b93c:	4640      	mov	r0, r8
 800b93e:	4798      	blx	r3
 800b940:	4602      	mov	r2, r0
 800b942:	2800      	cmp	r0, #0
 800b944:	d03f      	beq.n	800b9c6 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0xb6>
 800b946:	7b47      	ldrb	r7, [r0, #13]
 800b948:	007f      	lsls	r7, r7, #1
 800b94a:	f407 7380 	and.w	r3, r7, #256	@ 0x100
 800b94e:	7a87      	ldrb	r7, [r0, #10]
 800b950:	431f      	orrs	r7, r3
 800b952:	6933      	ldr	r3, [r6, #16]
 800b954:	7c1b      	ldrb	r3, [r3, #16]
 800b956:	443c      	add	r4, r7
 800b958:	2b06      	cmp	r3, #6
 800b95a:	b2a4      	uxth	r4, r4
 800b95c:	d108      	bne.n	800b970 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0x60>
 800b95e:	f8d8 3000 	ldr.w	r3, [r8]
 800b962:	4651      	mov	r1, sl
 800b964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b966:	4640      	mov	r0, r8
 800b968:	4798      	blx	r3
 800b96a:	4438      	add	r0, r7
 800b96c:	4404      	add	r4, r0
 800b96e:	b2a4      	uxth	r4, r4
 800b970:	6933      	ldr	r3, [r6, #16]
 800b972:	795a      	ldrb	r2, [r3, #5]
 800b974:	f9b5 3000 	ldrsh.w	r3, [r5]
 800b978:	bb42      	cbnz	r2, 800b9cc <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0xbc>
 800b97a:	f1b9 0f01 	cmp.w	r9, #1
 800b97e:	d101      	bne.n	800b984 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0x74>
 800b980:	4423      	add	r3, r4
 800b982:	802b      	strh	r3, [r5, #0]
 800b984:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b986:	f9b6 3008 	ldrsh.w	r3, [r6, #8]
 800b98a:	fab2 f282 	clz	r2, r2
 800b98e:	0952      	lsrs	r2, r2, #5
 800b990:	9206      	str	r2, [sp, #24]
 800b992:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b994:	9205      	str	r2, [sp, #20]
 800b996:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b998:	e9cd 9203 	strd	r9, r2, [sp, #12]
 800b99c:	6932      	ldr	r2, [r6, #16]
 800b99e:	9202      	str	r2, [sp, #8]
 800b9a0:	68f2      	ldr	r2, [r6, #12]
 800b9a2:	9201      	str	r2, [sp, #4]
 800b9a4:	f9b5 2000 	ldrsh.w	r2, [r5]
 800b9a8:	9200      	str	r2, [sp, #0]
 800b9aa:	e9d6 1200 	ldrd	r1, r2, [r6]
 800b9ae:	4658      	mov	r0, fp
 800b9b0:	f7ff fe36 	bl	800b620 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 800b9b4:	6933      	ldr	r3, [r6, #16]
 800b9b6:	795b      	ldrb	r3, [r3, #5]
 800b9b8:	b97b      	cbnz	r3, 800b9da <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0xca>
 800b9ba:	f1b9 0f00 	cmp.w	r9, #0
 800b9be:	d102      	bne.n	800b9c6 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0xb6>
 800b9c0:	8828      	ldrh	r0, [r5, #0]
 800b9c2:	4404      	add	r4, r0
 800b9c4:	802c      	strh	r4, [r5, #0]
 800b9c6:	b009      	add	sp, #36	@ 0x24
 800b9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9cc:	2a01      	cmp	r2, #1
 800b9ce:	d1d9      	bne.n	800b984 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0x74>
 800b9d0:	f1b9 0f00 	cmp.w	r9, #0
 800b9d4:	d1d6      	bne.n	800b984 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0x74>
 800b9d6:	1b1b      	subs	r3, r3, r4
 800b9d8:	e7d3      	b.n	800b982 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0x72>
 800b9da:	2b01      	cmp	r3, #1
 800b9dc:	d1f3      	bne.n	800b9c6 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0xb6>
 800b9de:	f1b9 0f01 	cmp.w	r9, #1
 800b9e2:	d1f0      	bne.n	800b9c6 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0xb6>
 800b9e4:	8828      	ldrh	r0, [r5, #0]
 800b9e6:	1b04      	subs	r4, r0, r4
 800b9e8:	e7ec      	b.n	800b9c4 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE+0xb4>
	...

0800b9ec <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE>:
 800b9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f0:	b0a9      	sub	sp, #164	@ 0xa4
 800b9f2:	4683      	mov	fp, r0
 800b9f4:	9105      	str	r1, [sp, #20]
 800b9f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b9f8:	4615      	mov	r5, r2
 800b9fa:	f89d 30d0 	ldrb.w	r3, [sp, #208]	@ 0xd0
 800b9fe:	9932      	ldr	r1, [sp, #200]	@ 0xc8
 800ba00:	930d      	str	r3, [sp, #52]	@ 0x34
 800ba02:	2264      	movs	r2, #100	@ 0x64
 800ba04:	a80f      	add	r0, sp, #60	@ 0x3c
 800ba06:	f007 ff8c 	bl	8013922 <memcpy>
 800ba0a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	930e      	str	r3, [sp, #56]	@ 0x38
 800ba10:	2a00      	cmp	r2, #0
 800ba12:	f040 815c 	bne.w	800bcce <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2e2>
 800ba16:	9207      	str	r2, [sp, #28]
 800ba18:	9209      	str	r2, [sp, #36]	@ 0x24
 800ba1a:	4690      	mov	r8, r2
 800ba1c:	4616      	mov	r6, r2
 800ba1e:	9208      	str	r2, [sp, #32]
 800ba20:	4614      	mov	r4, r2
 800ba22:	920a      	str	r2, [sp, #40]	@ 0x28
 800ba24:	4691      	mov	r9, r2
 800ba26:	9b07      	ldr	r3, [sp, #28]
 800ba28:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	f280 8101 	bge.w	800bc32 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x246>
 800ba30:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800ba34:	4599      	cmp	r9, r3
 800ba36:	d006      	beq.n	800ba46 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5a>
 800ba38:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ba3a:	f242 030b 	movw	r3, #8203	@ 0x200b
 800ba3e:	4599      	cmp	r9, r3
 800ba40:	bf18      	it	ne
 800ba42:	464a      	movne	r2, r9
 800ba44:	920a      	str	r2, [sp, #40]	@ 0x28
 800ba46:	462a      	mov	r2, r5
 800ba48:	ab0e      	add	r3, sp, #56	@ 0x38
 800ba4a:	2100      	movs	r1, #0
 800ba4c:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 800ba4e:	f003 fdb7 	bl	800f5c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800ba52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba54:	4681      	mov	r9, r0
 800ba56:	2a00      	cmp	r2, #0
 800ba58:	d06c      	beq.n	800bb34 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x148>
 800ba5a:	f892 a00d 	ldrb.w	sl, [r2, #13]
 800ba5e:	682b      	ldr	r3, [r5, #0]
 800ba60:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ba62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba64:	f8b2 9004 	ldrh.w	r9, [r2, #4]
 800ba68:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 800ba6c:	f40a 7080 	and.w	r0, sl, #256	@ 0x100
 800ba70:	f892 a00a 	ldrb.w	sl, [r2, #10]
 800ba74:	ea4a 0a00 	orr.w	sl, sl, r0
 800ba78:	4628      	mov	r0, r5
 800ba7a:	4798      	blx	r3
 800ba7c:	4450      	add	r0, sl
 800ba7e:	b287      	uxth	r7, r0
 800ba80:	f1b9 0f00 	cmp.w	r9, #0
 800ba84:	f000 80d5 	beq.w	800bc32 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x246>
 800ba88:	f1b9 0f0a 	cmp.w	r9, #10
 800ba8c:	f000 80d1 	beq.w	800bc32 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x246>
 800ba90:	f1a9 0328 	sub.w	r3, r9, #40	@ 0x28
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	f029 0120 	bic.w	r1, r9, #32
 800ba9a:	2b01      	cmp	r3, #1
 800ba9c:	b289      	uxth	r1, r1
 800ba9e:	d94b      	bls.n	800bb38 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x14c>
 800baa0:	295b      	cmp	r1, #91	@ 0x5b
 800baa2:	d049      	beq.n	800bb38 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x14c>
 800baa4:	295d      	cmp	r1, #93	@ 0x5d
 800baa6:	d047      	beq.n	800bb38 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x14c>
 800baa8:	f029 0202 	bic.w	r2, r9, #2
 800baac:	b292      	uxth	r2, r2
 800baae:	f1a2 033c 	sub.w	r3, r2, #60	@ 0x3c
 800bab2:	425a      	negs	r2, r3
 800bab4:	415a      	adcs	r2, r3
 800bab6:	f1a9 0330 	sub.w	r3, r9, #48	@ 0x30
 800baba:	b29b      	uxth	r3, r3
 800babc:	2b09      	cmp	r3, #9
 800babe:	d93d      	bls.n	800bb3c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x150>
 800bac0:	f5a9 6acc 	sub.w	sl, r9, #1632	@ 0x660
 800bac4:	fa1f fa8a 	uxth.w	sl, sl
 800bac8:	f1ba 0f09 	cmp.w	sl, #9
 800bacc:	bf8c      	ite	hi
 800bace:	2300      	movhi	r3, #0
 800bad0:	2301      	movls	r3, #1
 800bad2:	9306      	str	r3, [sp, #24]
 800bad4:	f5a9 63b2 	sub.w	r3, r9, #1424	@ 0x590
 800bad8:	b29b      	uxth	r3, r3
 800bada:	f5b3 7fb8 	cmp.w	r3, #368	@ 0x170
 800bade:	d305      	bcc.n	800baec <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x100>
 800bae0:	f509 6396 	add.w	r3, r9, #1200	@ 0x4b0
 800bae4:	b29b      	uxth	r3, r3
 800bae6:	f5b3 7f6c 	cmp.w	r3, #944	@ 0x3b0
 800baea:	d229      	bcs.n	800bb40 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x154>
 800baec:	9b06      	ldr	r3, [sp, #24]
 800baee:	f083 0301 	eor.w	r3, r3, #1
 800baf2:	b2db      	uxtb	r3, r3
 800baf4:	f64f 60ff 	movw	r0, #65279	@ 0xfeff
 800baf8:	4581      	cmp	r9, r0
 800bafa:	d023      	beq.n	800bb44 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x158>
 800bafc:	f242 000b 	movw	r0, #8203	@ 0x200b
 800bb00:	eba9 0a00 	sub.w	sl, r9, r0
 800bb04:	f1da 0000 	rsbs	r0, sl, #0
 800bb08:	eb40 000a 	adc.w	r0, r0, sl
 800bb0c:	3941      	subs	r1, #65	@ 0x41
 800bb0e:	2919      	cmp	r1, #25
 800bb10:	f240 82a2 	bls.w	800c058 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x66c>
 800bb14:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
 800bb18:	f240 828b 	bls.w	800c032 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x646>
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	f040 8288 	bne.w	800c032 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x646>
 800bb22:	2800      	cmp	r0, #0
 800bb24:	f040 8285 	bne.w	800c032 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x646>
 800bb28:	2e03      	cmp	r6, #3
 800bb2a:	d850      	bhi.n	800bbce <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1e2>
 800bb2c:	e8df f006 	tbb	[pc, r6]
 800bb30:	62392b13 	.word	0x62392b13
 800bb34:	4617      	mov	r7, r2
 800bb36:	e7a3      	b.n	800ba80 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x94>
 800bb38:	2201      	movs	r2, #1
 800bb3a:	e7bc      	b.n	800bab6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0xca>
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	e7c8      	b.n	800bad2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0xe6>
 800bb40:	2300      	movs	r3, #0
 800bb42:	e7d7      	b.n	800baf4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x108>
 800bb44:	2001      	movs	r0, #1
 800bb46:	e7e1      	b.n	800bb0c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x120>
 800bb48:	2e03      	cmp	r6, #3
 800bb4a:	d840      	bhi.n	800bbce <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1e2>
 800bb4c:	e8df f006 	tbb	[pc, r6]
 800bb50:	46290902 	.word	0x46290902
 800bb54:	b99b      	cbnz	r3, 800bb7e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x192>
 800bb56:	f04f 0a01 	mov.w	sl, #1
 800bb5a:	4656      	mov	r6, sl
 800bb5c:	f8cd a018 	str.w	sl, [sp, #24]
 800bb60:	e017      	b.n	800bb92 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1a6>
 800bb62:	b183      	cbz	r3, 800bb86 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x19a>
 800bb64:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bb66:	f8cd 8004 	str.w	r8, [sp, #4]
 800bb6a:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800bb6e:	ab0f      	add	r3, sp, #60	@ 0x3c
 800bb70:	9300      	str	r3, [sp, #0]
 800bb72:	462a      	mov	r2, r5
 800bb74:	2300      	movs	r3, #0
 800bb76:	9905      	ldr	r1, [sp, #20]
 800bb78:	4658      	mov	r0, fp
 800bb7a:	f7ff fec9 	bl	800b910 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800bb7e:	463c      	mov	r4, r7
 800bb80:	f04f 0801 	mov.w	r8, #1
 800bb84:	e034      	b.n	800bbf0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x204>
 800bb86:	443c      	add	r4, r7
 800bb88:	2601      	movs	r6, #1
 800bb8a:	f108 0a01 	add.w	sl, r8, #1
 800bb8e:	b2a7      	uxth	r7, r4
 800bb90:	9606      	str	r6, [sp, #24]
 800bb92:	9b07      	ldr	r3, [sp, #28]
 800bb94:	3301      	adds	r3, #1
 800bb96:	9307      	str	r3, [sp, #28]
 800bb98:	9b06      	ldr	r3, [sp, #24]
 800bb9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb9c:	46d0      	mov	r8, sl
 800bb9e:	463c      	mov	r4, r7
 800bba0:	e741      	b.n	800ba26 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x3a>
 800bba2:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bba4:	f8cd 8004 	str.w	r8, [sp, #4]
 800bba8:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800bbac:	ab0f      	add	r3, sp, #60	@ 0x3c
 800bbae:	9300      	str	r3, [sp, #0]
 800bbb0:	462a      	mov	r2, r5
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	9905      	ldr	r1, [sp, #20]
 800bbb6:	4658      	mov	r0, fp
 800bbb8:	f7ff feaa 	bl	800b910 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800bbbc:	e7cb      	b.n	800bb56 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x16a>
 800bbbe:	b913      	cbnz	r3, 800bbc6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1da>
 800bbc0:	2800      	cmp	r0, #0
 800bbc2:	f000 8257 	beq.w	800c074 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x688>
 800bbc6:	443c      	add	r4, r7
 800bbc8:	f108 0801 	add.w	r8, r8, #1
 800bbcc:	b2a4      	uxth	r4, r4
 800bbce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bbd0:	9306      	str	r3, [sp, #24]
 800bbd2:	46c2      	mov	sl, r8
 800bbd4:	4627      	mov	r7, r4
 800bbd6:	e7dc      	b.n	800bb92 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1a6>
 800bbd8:	2200      	movs	r2, #0
 800bbda:	9206      	str	r2, [sp, #24]
 800bbdc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bbde:	f102 0a01 	add.w	sl, r2, #1
 800bbe2:	b14b      	cbz	r3, 800bbf8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x20c>
 800bbe4:	9b08      	ldr	r3, [sp, #32]
 800bbe6:	441c      	add	r4, r3
 800bbe8:	fa17 f484 	uxtah	r4, r7, r4
 800bbec:	44d0      	add	r8, sl
 800bbee:	b2a4      	uxth	r4, r4
 800bbf0:	2602      	movs	r6, #2
 800bbf2:	e7ec      	b.n	800bbce <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1e2>
 800bbf4:	2201      	movs	r2, #1
 800bbf6:	e7f0      	b.n	800bbda <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1ee>
 800bbf8:	9b06      	ldr	r3, [sp, #24]
 800bbfa:	b19b      	cbz	r3, 800bc24 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x238>
 800bbfc:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bbfe:	f8cd 8004 	str.w	r8, [sp, #4]
 800bc02:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800bc06:	ab0f      	add	r3, sp, #60	@ 0x3c
 800bc08:	9300      	str	r3, [sp, #0]
 800bc0a:	462a      	mov	r2, r5
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	9905      	ldr	r1, [sp, #20]
 800bc10:	4658      	mov	r0, fp
 800bc12:	f7ff fe7d 	bl	800b910 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800bc16:	9b08      	ldr	r3, [sp, #32]
 800bc18:	441c      	add	r4, r3
 800bc1a:	fa17 f484 	uxtah	r4, r7, r4
 800bc1e:	b2a7      	uxth	r7, r4
 800bc20:	2601      	movs	r6, #1
 800bc22:	e7b6      	b.n	800bb92 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1a6>
 800bc24:	9b08      	ldr	r3, [sp, #32]
 800bc26:	443b      	add	r3, r7
 800bc28:	b29b      	uxth	r3, r3
 800bc2a:	e9cd 3a08 	strd	r3, sl, [sp, #32]
 800bc2e:	2603      	movs	r6, #3
 800bc30:	e7cd      	b.n	800bbce <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1e2>
 800bc32:	2e01      	cmp	r6, #1
 800bc34:	d107      	bne.n	800bc46 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x25a>
 800bc36:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bc38:	f8cd 8004 	str.w	r8, [sp, #4]
 800bc3c:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800bc40:	ab0f      	add	r3, sp, #60	@ 0x3c
 800bc42:	9300      	str	r3, [sp, #0]
 800bc44:	e021      	b.n	800bc8a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x29e>
 800bc46:	2e02      	cmp	r6, #2
 800bc48:	d108      	bne.n	800bc5c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x270>
 800bc4a:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bc4c:	f8cd 8004 	str.w	r8, [sp, #4]
 800bc50:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800bc54:	ab0f      	add	r3, sp, #60	@ 0x3c
 800bc56:	9300      	str	r3, [sp, #0]
 800bc58:	2301      	movs	r3, #1
 800bc5a:	e017      	b.n	800bc8c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2a0>
 800bc5c:	2e03      	cmp	r6, #3
 800bc5e:	d11a      	bne.n	800bc96 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2aa>
 800bc60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc62:	ae0f      	add	r6, sp, #60	@ 0x3c
 800bc64:	b343      	cbz	r3, 800bcb8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2cc>
 800bc66:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bc68:	9905      	ldr	r1, [sp, #20]
 800bc6a:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800bc6e:	e9cd 6800 	strd	r6, r8, [sp]
 800bc72:	2301      	movs	r3, #1
 800bc74:	462a      	mov	r2, r5
 800bc76:	4658      	mov	r0, fp
 800bc78:	f7ff fe4a 	bl	800b910 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800bc7c:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bc7e:	9303      	str	r3, [sp, #12]
 800bc80:	9b08      	ldr	r3, [sp, #32]
 800bc82:	9302      	str	r3, [sp, #8]
 800bc84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc86:	e9cd 6300 	strd	r6, r3, [sp]
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	462a      	mov	r2, r5
 800bc8e:	9905      	ldr	r1, [sp, #20]
 800bc90:	4658      	mov	r0, fp
 800bc92:	f7ff fe3d 	bl	800b910 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800bc96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bc98:	b15b      	cbz	r3, 800bcb2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2c6>
 800bc9a:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bc9c:	9303      	str	r3, [sp, #12]
 800bc9e:	aa0f      	add	r2, sp, #60	@ 0x3c
 800bca0:	2300      	movs	r3, #0
 800bca2:	9200      	str	r2, [sp, #0]
 800bca4:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800bca8:	462a      	mov	r2, r5
 800bcaa:	9905      	ldr	r1, [sp, #20]
 800bcac:	4658      	mov	r0, fp
 800bcae:	f7ff fe2f 	bl	800b910 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800bcb2:	b029      	add	sp, #164	@ 0xa4
 800bcb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcb8:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bcba:	9303      	str	r3, [sp, #12]
 800bcbc:	9b08      	ldr	r3, [sp, #32]
 800bcbe:	441c      	add	r4, r3
 800bcc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcc2:	b2a4      	uxth	r4, r4
 800bcc4:	9402      	str	r4, [sp, #8]
 800bcc6:	4443      	add	r3, r8
 800bcc8:	e9cd 6300 	strd	r6, r3, [sp]
 800bccc:	e7c4      	b.n	800bc58 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x26c>
 800bcce:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800bcd2:	9307      	str	r3, [sp, #28]
 800bcd4:	461f      	mov	r7, r3
 800bcd6:	4698      	mov	r8, r3
 800bcd8:	9306      	str	r3, [sp, #24]
 800bcda:	461c      	mov	r4, r3
 800bcdc:	930a      	str	r3, [sp, #40]	@ 0x28
 800bcde:	4699      	mov	r9, r3
 800bce0:	9b08      	ldr	r3, [sp, #32]
 800bce2:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
 800bce4:	4293      	cmp	r3, r2
 800bce6:	f280 816e 	bge.w	800bfc6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5da>
 800bcea:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800bcee:	4599      	cmp	r9, r3
 800bcf0:	d006      	beq.n	800bd00 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x314>
 800bcf2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcf4:	f242 020b 	movw	r2, #8203	@ 0x200b
 800bcf8:	4591      	cmp	r9, r2
 800bcfa:	bf18      	it	ne
 800bcfc:	464b      	movne	r3, r9
 800bcfe:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd00:	462a      	mov	r2, r5
 800bd02:	ab0e      	add	r3, sp, #56	@ 0x38
 800bd04:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bd06:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 800bd08:	f003 fc5a 	bl	800f5c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800bd0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd0e:	4681      	mov	r9, r0
 800bd10:	2a00      	cmp	r2, #0
 800bd12:	d073      	beq.n	800bdfc <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x410>
 800bd14:	f892 a00d 	ldrb.w	sl, [r2, #13]
 800bd18:	682b      	ldr	r3, [r5, #0]
 800bd1a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bd1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd1e:	f8b2 9004 	ldrh.w	r9, [r2, #4]
 800bd22:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 800bd26:	f40a 7080 	and.w	r0, sl, #256	@ 0x100
 800bd2a:	f892 a00a 	ldrb.w	sl, [r2, #10]
 800bd2e:	ea4a 0a00 	orr.w	sl, sl, r0
 800bd32:	4628      	mov	r0, r5
 800bd34:	4798      	blx	r3
 800bd36:	4450      	add	r0, sl
 800bd38:	b286      	uxth	r6, r0
 800bd3a:	f1b9 0f00 	cmp.w	r9, #0
 800bd3e:	f000 8142 	beq.w	800bfc6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5da>
 800bd42:	f1b9 0f0a 	cmp.w	r9, #10
 800bd46:	f000 813e 	beq.w	800bfc6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5da>
 800bd4a:	f1a9 0328 	sub.w	r3, r9, #40	@ 0x28
 800bd4e:	b29b      	uxth	r3, r3
 800bd50:	f029 0220 	bic.w	r2, r9, #32
 800bd54:	2b01      	cmp	r3, #1
 800bd56:	b292      	uxth	r2, r2
 800bd58:	d952      	bls.n	800be00 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x414>
 800bd5a:	2a5b      	cmp	r2, #91	@ 0x5b
 800bd5c:	d050      	beq.n	800be00 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x414>
 800bd5e:	2a5d      	cmp	r2, #93	@ 0x5d
 800bd60:	d04e      	beq.n	800be00 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x414>
 800bd62:	f029 0a02 	bic.w	sl, r9, #2
 800bd66:	fa1f fa8a 	uxth.w	sl, sl
 800bd6a:	f1aa 0c3c 	sub.w	ip, sl, #60	@ 0x3c
 800bd6e:	f1dc 0a00 	rsbs	sl, ip, #0
 800bd72:	eb4a 0a0c 	adc.w	sl, sl, ip
 800bd76:	f1a9 0330 	sub.w	r3, r9, #48	@ 0x30
 800bd7a:	b29b      	uxth	r3, r3
 800bd7c:	2b09      	cmp	r3, #9
 800bd7e:	d942      	bls.n	800be06 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x41a>
 800bd80:	f5a9 63cc 	sub.w	r3, r9, #1632	@ 0x660
 800bd84:	b29b      	uxth	r3, r3
 800bd86:	2b09      	cmp	r3, #9
 800bd88:	bf8c      	ite	hi
 800bd8a:	2300      	movhi	r3, #0
 800bd8c:	2301      	movls	r3, #1
 800bd8e:	f5a9 61b2 	sub.w	r1, r9, #1424	@ 0x590
 800bd92:	b289      	uxth	r1, r1
 800bd94:	f5b1 7fb8 	cmp.w	r1, #368	@ 0x170
 800bd98:	d308      	bcc.n	800bdac <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x3c0>
 800bd9a:	f509 6196 	add.w	r1, r9, #1200	@ 0x4b0
 800bd9e:	b289      	uxth	r1, r1
 800bda0:	f5b1 7f6c 	cmp.w	r1, #944	@ 0x3b0
 800bda4:	d302      	bcc.n	800bdac <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x3c0>
 800bda6:	f1ba 0f00 	cmp.w	sl, #0
 800bdaa:	d001      	beq.n	800bdb0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x3c4>
 800bdac:	f083 0a01 	eor.w	sl, r3, #1
 800bdb0:	f64f 61ff 	movw	r1, #65279	@ 0xfeff
 800bdb4:	4589      	cmp	r9, r1
 800bdb6:	d028      	beq.n	800be0a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x41e>
 800bdb8:	f242 010b 	movw	r1, #8203	@ 0x200b
 800bdbc:	eba9 0001 	sub.w	r0, r9, r1
 800bdc0:	4241      	negs	r1, r0
 800bdc2:	4141      	adcs	r1, r0
 800bdc4:	3a41      	subs	r2, #65	@ 0x41
 800bdc6:	2a19      	cmp	r2, #25
 800bdc8:	d90a      	bls.n	800bde0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x3f4>
 800bdca:	f1b9 0f7f 	cmp.w	r9, #127	@ 0x7f
 800bdce:	f240 8155 	bls.w	800c07c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x690>
 800bdd2:	f1ba 0f00 	cmp.w	sl, #0
 800bdd6:	f040 8151 	bne.w	800c07c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x690>
 800bdda:	2900      	cmp	r1, #0
 800bddc:	f040 814e 	bne.w	800c07c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x690>
 800bde0:	f1b8 0f07 	cmp.w	r8, #7
 800bde4:	f200 80e5 	bhi.w	800bfb2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5c6>
 800bde8:	e8df f018 	tbh	[pc, r8, lsl #1]
 800bdec:	00e3001d 	.word	0x00e3001d
 800bdf0:	00e30030 	.word	0x00e30030
 800bdf4:	00830055 	.word	0x00830055
 800bdf8:	00c20068 	.word	0x00c20068
 800bdfc:	4616      	mov	r6, r2
 800bdfe:	e79c      	b.n	800bd3a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x34e>
 800be00:	f04f 0a01 	mov.w	sl, #1
 800be04:	e7b7      	b.n	800bd76 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x38a>
 800be06:	2301      	movs	r3, #1
 800be08:	e7c1      	b.n	800bd8e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x3a2>
 800be0a:	2101      	movs	r1, #1
 800be0c:	e7da      	b.n	800bdc4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x3d8>
 800be0e:	2200      	movs	r2, #0
 800be10:	b9cb      	cbnz	r3, 800be46 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x45a>
 800be12:	bb52      	cbnz	r2, 800be6a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x47e>
 800be14:	2701      	movs	r7, #1
 800be16:	f04f 0802 	mov.w	r8, #2
 800be1a:	9709      	str	r7, [sp, #36]	@ 0x24
 800be1c:	9b08      	ldr	r3, [sp, #32]
 800be1e:	3301      	adds	r3, #1
 800be20:	9308      	str	r3, [sp, #32]
 800be22:	4634      	mov	r4, r6
 800be24:	e75c      	b.n	800bce0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2f4>
 800be26:	2201      	movs	r2, #1
 800be28:	e7f2      	b.n	800be10 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x424>
 800be2a:	2200      	movs	r2, #0
 800be2c:	b183      	cbz	r3, 800be50 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x464>
 800be2e:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800be30:	9701      	str	r7, [sp, #4]
 800be32:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800be36:	ab0f      	add	r3, sp, #60	@ 0x3c
 800be38:	9300      	str	r3, [sp, #0]
 800be3a:	462a      	mov	r2, r5
 800be3c:	2301      	movs	r3, #1
 800be3e:	9905      	ldr	r1, [sp, #20]
 800be40:	4658      	mov	r0, fp
 800be42:	f7ff fd65 	bl	800b910 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800be46:	4634      	mov	r4, r6
 800be48:	2701      	movs	r7, #1
 800be4a:	e020      	b.n	800be8e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4a2>
 800be4c:	2201      	movs	r2, #1
 800be4e:	e7ed      	b.n	800be2c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x440>
 800be50:	b182      	cbz	r2, 800be74 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x488>
 800be52:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800be54:	9701      	str	r7, [sp, #4]
 800be56:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800be5a:	ab0f      	add	r3, sp, #60	@ 0x3c
 800be5c:	9300      	str	r3, [sp, #0]
 800be5e:	2301      	movs	r3, #1
 800be60:	462a      	mov	r2, r5
 800be62:	9905      	ldr	r1, [sp, #20]
 800be64:	4658      	mov	r0, fp
 800be66:	f7ff fd53 	bl	800b910 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800be6a:	4634      	mov	r4, r6
 800be6c:	2701      	movs	r7, #1
 800be6e:	f04f 0806 	mov.w	r8, #6
 800be72:	e00e      	b.n	800be92 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4a6>
 800be74:	3701      	adds	r7, #1
 800be76:	4434      	add	r4, r6
 800be78:	2301      	movs	r3, #1
 800be7a:	b2a6      	uxth	r6, r4
 800be7c:	f04f 0802 	mov.w	r8, #2
 800be80:	9309      	str	r3, [sp, #36]	@ 0x24
 800be82:	e7cb      	b.n	800be1c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x430>
 800be84:	2200      	movs	r2, #0
 800be86:	b143      	cbz	r3, 800be9a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4ae>
 800be88:	3701      	adds	r7, #1
 800be8a:	4434      	add	r4, r6
 800be8c:	b2a4      	uxth	r4, r4
 800be8e:	f04f 0804 	mov.w	r8, #4
 800be92:	4626      	mov	r6, r4
 800be94:	e7c2      	b.n	800be1c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x430>
 800be96:	2201      	movs	r2, #1
 800be98:	e7f5      	b.n	800be86 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x49a>
 800be9a:	f029 0302 	bic.w	r3, r9, #2
 800be9e:	b29b      	uxth	r3, r3
 800bea0:	2b2c      	cmp	r3, #44	@ 0x2c
 800bea2:	f000 8101 	beq.w	800c0a8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6bc>
 800bea6:	f1b9 0f3a 	cmp.w	r9, #58	@ 0x3a
 800beaa:	f000 80fd 	beq.w	800c0a8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6bc>
 800beae:	f2a9 636b 	subw	r3, r9, #1643	@ 0x66b
 800beb2:	b29b      	uxth	r3, r3
 800beb4:	2b01      	cmp	r3, #1
 800beb6:	f240 80f7 	bls.w	800c0a8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6bc>
 800beba:	b11a      	cbz	r2, 800bec4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4d8>
 800bebc:	3701      	adds	r7, #1
 800bebe:	4434      	add	r4, r6
 800bec0:	b2a4      	uxth	r4, r4
 800bec2:	e7d4      	b.n	800be6e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x482>
 800bec4:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bec6:	9701      	str	r7, [sp, #4]
 800bec8:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800becc:	ab0f      	add	r3, sp, #60	@ 0x3c
 800bece:	9300      	str	r3, [sp, #0]
 800bed0:	9905      	ldr	r1, [sp, #20]
 800bed2:	4613      	mov	r3, r2
 800bed4:	4658      	mov	r0, fp
 800bed6:	462a      	mov	r2, r5
 800bed8:	f7ff fd1a 	bl	800b910 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800bedc:	e79a      	b.n	800be14 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x428>
 800bede:	2200      	movs	r2, #0
 800bee0:	b14b      	cbz	r3, 800bef6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x50a>
 800bee2:	9b07      	ldr	r3, [sp, #28]
 800bee4:	3301      	adds	r3, #1
 800bee6:	441f      	add	r7, r3
 800bee8:	9b06      	ldr	r3, [sp, #24]
 800beea:	441c      	add	r4, r3
 800beec:	fa16 f484 	uxtah	r4, r6, r4
 800bef0:	e7cc      	b.n	800be8c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4a0>
 800bef2:	2201      	movs	r2, #1
 800bef4:	e7f4      	b.n	800bee0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4f4>
 800bef6:	f10d 083c 	add.w	r8, sp, #60	@ 0x3c
 800befa:	b18a      	cbz	r2, 800bf20 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x534>
 800befc:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 800befe:	9905      	ldr	r1, [sp, #20]
 800bf00:	e9cd 4202 	strd	r4, r2, [sp, #8]
 800bf04:	e9cd 8700 	strd	r8, r7, [sp]
 800bf08:	462a      	mov	r2, r5
 800bf0a:	4658      	mov	r0, fp
 800bf0c:	f7ff fd00 	bl	800b910 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800bf10:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bf12:	9303      	str	r3, [sp, #12]
 800bf14:	9b06      	ldr	r3, [sp, #24]
 800bf16:	9302      	str	r3, [sp, #8]
 800bf18:	9b07      	ldr	r3, [sp, #28]
 800bf1a:	e9cd 8300 	strd	r8, r3, [sp]
 800bf1e:	e79e      	b.n	800be5e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x472>
 800bf20:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bf22:	9905      	ldr	r1, [sp, #20]
 800bf24:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800bf28:	e9cd 8700 	strd	r8, r7, [sp]
 800bf2c:	4613      	mov	r3, r2
 800bf2e:	4658      	mov	r0, fp
 800bf30:	462a      	mov	r2, r5
 800bf32:	f7ff fced 	bl	800b910 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800bf36:	9b07      	ldr	r3, [sp, #28]
 800bf38:	1c5f      	adds	r7, r3, #1
 800bf3a:	9b06      	ldr	r3, [sp, #24]
 800bf3c:	199c      	adds	r4, r3, r6
 800bf3e:	e79b      	b.n	800be78 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x48c>
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d1bb      	bne.n	800bebc <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4d0>
 800bf44:	f1ba 0f00 	cmp.w	sl, #0
 800bf48:	f000 80b4 	beq.w	800c0b4 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6c8>
 800bf4c:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 800bf4e:	9701      	str	r7, [sp, #4]
 800bf50:	e9cd 4202 	strd	r4, r2, [sp, #8]
 800bf54:	aa0f      	add	r2, sp, #60	@ 0x3c
 800bf56:	9200      	str	r2, [sp, #0]
 800bf58:	9905      	ldr	r1, [sp, #20]
 800bf5a:	462a      	mov	r2, r5
 800bf5c:	4658      	mov	r0, fp
 800bf5e:	f7ff fcd7 	bl	800b910 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800bf62:	2701      	movs	r7, #1
 800bf64:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 800bf68:	f04f 0802 	mov.w	r8, #2
 800bf6c:	e756      	b.n	800be1c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x430>
 800bf6e:	b13b      	cbz	r3, 800bf80 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x594>
 800bf70:	9b07      	ldr	r3, [sp, #28]
 800bf72:	3301      	adds	r3, #1
 800bf74:	441f      	add	r7, r3
 800bf76:	9b06      	ldr	r3, [sp, #24]
 800bf78:	441c      	add	r4, r3
 800bf7a:	fa16 f484 	uxtah	r4, r6, r4
 800bf7e:	e79f      	b.n	800bec0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4d4>
 800bf80:	9a07      	ldr	r2, [sp, #28]
 800bf82:	3201      	adds	r2, #1
 800bf84:	920c      	str	r2, [sp, #48]	@ 0x30
 800bf86:	9a06      	ldr	r2, [sp, #24]
 800bf88:	4416      	add	r6, r2
 800bf8a:	b2b6      	uxth	r6, r6
 800bf8c:	f1ba 0f00 	cmp.w	sl, #0
 800bf90:	f000 8096 	beq.w	800c0c0 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x6d4>
 800bf94:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
 800bf96:	9701      	str	r7, [sp, #4]
 800bf98:	e9cd 4202 	strd	r4, r2, [sp, #8]
 800bf9c:	aa0f      	add	r2, sp, #60	@ 0x3c
 800bf9e:	9200      	str	r2, [sp, #0]
 800bfa0:	9905      	ldr	r1, [sp, #20]
 800bfa2:	462a      	mov	r2, r5
 800bfa4:	4658      	mov	r0, fp
 800bfa6:	f7ff fcb3 	bl	800b910 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800bfaa:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 800bfac:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 800bfb0:	e7da      	b.n	800bf68 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x57c>
 800bfb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	f47f af6c 	bne.w	800be92 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4a6>
 800bfba:	f1a8 0202 	sub.w	r2, r8, #2
 800bfbe:	4253      	negs	r3, r2
 800bfc0:	4153      	adcs	r3, r2
 800bfc2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfc4:	e765      	b.n	800be92 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4a6>
 800bfc6:	f1b8 0f02 	cmp.w	r8, #2
 800bfca:	d104      	bne.n	800bfd6 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5ea>
 800bfcc:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bfce:	9701      	str	r7, [sp, #4]
 800bfd0:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800bfd4:	e63e      	b.n	800bc54 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x268>
 800bfd6:	f008 0805 	and.w	r8, r8, #5
 800bfda:	f1b8 0f04 	cmp.w	r8, #4
 800bfde:	d104      	bne.n	800bfea <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5fe>
 800bfe0:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bfe2:	9701      	str	r7, [sp, #4]
 800bfe4:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800bfe8:	e62a      	b.n	800bc40 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x254>
 800bfea:	f1b8 0f05 	cmp.w	r8, #5
 800bfee:	f47f ae52 	bne.w	800bc96 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2aa>
 800bff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bff4:	ae0f      	add	r6, sp, #60	@ 0x3c
 800bff6:	b183      	cbz	r3, 800c01a <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x62e>
 800bff8:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800bffa:	9905      	ldr	r1, [sp, #20]
 800bffc:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800c000:	e9cd 6700 	strd	r6, r7, [sp]
 800c004:	2300      	movs	r3, #0
 800c006:	462a      	mov	r2, r5
 800c008:	4658      	mov	r0, fp
 800c00a:	f7ff fc81 	bl	800b910 <_ZN8touchgfx3LCD21drawStringRTLInternalERsPKNS_4FontEhRNS_12TextProviderEitPKNS0_24DrawStringInternalStructE>
 800c00e:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800c010:	9303      	str	r3, [sp, #12]
 800c012:	9b06      	ldr	r3, [sp, #24]
 800c014:	9302      	str	r3, [sp, #8]
 800c016:	9b07      	ldr	r3, [sp, #28]
 800c018:	e656      	b.n	800bcc8 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2dc>
 800c01a:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 800c01c:	9303      	str	r3, [sp, #12]
 800c01e:	9b06      	ldr	r3, [sp, #24]
 800c020:	441c      	add	r4, r3
 800c022:	9b07      	ldr	r3, [sp, #28]
 800c024:	b2a4      	uxth	r4, r4
 800c026:	441f      	add	r7, r3
 800c028:	9402      	str	r4, [sp, #8]
 800c02a:	e9cd 6700 	strd	r6, r7, [sp]
 800c02e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c030:	e62c      	b.n	800bc8c <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x2a0>
 800c032:	9906      	ldr	r1, [sp, #24]
 800c034:	2900      	cmp	r1, #0
 800c036:	f47f ad87 	bne.w	800bb48 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x15c>
 800c03a:	b96a      	cbnz	r2, 800c058 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x66c>
 800c03c:	2e03      	cmp	r6, #3
 800c03e:	f63f adc6 	bhi.w	800bbce <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1e2>
 800c042:	a201      	add	r2, pc, #4	@ (adr r2, 800c048 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x65c>)
 800c044:	f852 f026 	ldr.w	pc, [r2, r6, lsl #2]
 800c048:	0800bb55 	.word	0x0800bb55
 800c04c:	0800bb63 	.word	0x0800bb63
 800c050:	0800bbbf 	.word	0x0800bbbf
 800c054:	0800bbd9 	.word	0x0800bbd9
 800c058:	2e03      	cmp	r6, #3
 800c05a:	f63f adb8 	bhi.w	800bbce <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x1e2>
 800c05e:	a201      	add	r2, pc, #4	@ (adr r2, 800c064 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x678>)
 800c060:	f852 f026 	ldr.w	pc, [r2, r6, lsl #2]
 800c064:	0800bb55 	.word	0x0800bb55
 800c068:	0800bb63 	.word	0x0800bb63
 800c06c:	0800bba3 	.word	0x0800bba3
 800c070:	0800bbf5 	.word	0x0800bbf5
 800c074:	2301      	movs	r3, #1
 800c076:	9708      	str	r7, [sp, #32]
 800c078:	9309      	str	r3, [sp, #36]	@ 0x24
 800c07a:	e5d8      	b.n	800bc2e <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x242>
 800c07c:	f1b8 0f07 	cmp.w	r8, #7
 800c080:	d897      	bhi.n	800bfb2 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x5c6>
 800c082:	a201      	add	r2, pc, #4	@ (adr r2, 800c088 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x69c>)
 800c084:	f852 f028 	ldr.w	pc, [r2, r8, lsl #2]
 800c088:	0800be0f 	.word	0x0800be0f
 800c08c:	0800bfb3 	.word	0x0800bfb3
 800c090:	0800be2b 	.word	0x0800be2b
 800c094:	0800bfb3 	.word	0x0800bfb3
 800c098:	0800be85 	.word	0x0800be85
 800c09c:	0800bedf 	.word	0x0800bedf
 800c0a0:	0800bf41 	.word	0x0800bf41
 800c0a4:	0800bf6f 	.word	0x0800bf6f
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	9606      	str	r6, [sp, #24]
 800c0ac:	9307      	str	r3, [sp, #28]
 800c0ae:	f04f 0805 	mov.w	r8, #5
 800c0b2:	e6ee      	b.n	800be92 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4a6>
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	9606      	str	r6, [sp, #24]
 800c0b8:	9307      	str	r3, [sp, #28]
 800c0ba:	f04f 0807 	mov.w	r8, #7
 800c0be:	e6e8      	b.n	800be92 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4a6>
 800c0c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c0c2:	e9cd 6306 	strd	r6, r3, [sp, #24]
 800c0c6:	e6e4      	b.n	800be92 <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE+0x4a6>

0800c0c8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 800c0c8:	b530      	push	{r4, r5, lr}
 800c0ca:	8ac4      	ldrh	r4, [r0, #22]
 800c0cc:	8b45      	ldrh	r5, [r0, #26]
 800c0ce:	8343      	strh	r3, [r0, #26]
 800c0d0:	442c      	add	r4, r5
 800c0d2:	1ae4      	subs	r4, r4, r3
 800c0d4:	82c4      	strh	r4, [r0, #22]
 800c0d6:	8b83      	ldrh	r3, [r0, #28]
 800c0d8:	8b04      	ldrh	r4, [r0, #24]
 800c0da:	4422      	add	r2, r4
 800c0dc:	440c      	add	r4, r1
 800c0de:	1a59      	subs	r1, r3, r1
 800c0e0:	83c2      	strh	r2, [r0, #30]
 800c0e2:	8304      	strh	r4, [r0, #24]
 800c0e4:	8381      	strh	r1, [r0, #28]
 800c0e6:	bd30      	pop	{r4, r5, pc}

0800c0e8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 800c0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0ec:	4604      	mov	r4, r0
 800c0ee:	8a47      	ldrh	r7, [r0, #18]
 800c0f0:	68c0      	ldr	r0, [r0, #12]
 800c0f2:	6803      	ldr	r3, [r0, #0]
 800c0f4:	b085      	sub	sp, #20
 800c0f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0f8:	4798      	blx	r3
 800c0fa:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 800c0fe:	7a63      	ldrb	r3, [r4, #9]
 800c100:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 800c104:	42b7      	cmp	r7, r6
 800c106:	f103 33ff 	add.w	r3, r3, #4294967295
 800c10a:	bfac      	ite	ge
 800c10c:	f04f 0900 	movge.w	r9, #0
 800c110:	f04f 0901 	movlt.w	r9, #1
 800c114:	2b05      	cmp	r3, #5
 800c116:	d804      	bhi.n	800c122 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3a>
 800c118:	e8df f003 	tbb	[pc, r3]
 800c11c:	470e0854 	.word	0x470e0854
 800c120:	4c4c      	.short	0x4c4c
 800c122:	2500      	movs	r5, #0
 800c124:	46a9      	mov	r9, r5
 800c126:	462e      	mov	r6, r5
 800c128:	462f      	mov	r7, r5
 800c12a:	e00d      	b.n	800c148 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 800c12c:	42b7      	cmp	r7, r6
 800c12e:	bfb4      	ite	lt
 800c130:	2600      	movlt	r6, #0
 800c132:	2601      	movge	r6, #1
 800c134:	2500      	movs	r5, #0
 800c136:	e7f7      	b.n	800c128 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 800c138:	42b7      	cmp	r7, r6
 800c13a:	464d      	mov	r5, r9
 800c13c:	f04f 0900 	mov.w	r9, #0
 800c140:	bfb4      	ite	lt
 800c142:	2600      	movlt	r6, #0
 800c144:	2601      	movge	r6, #1
 800c146:	464f      	mov	r7, r9
 800c148:	f04f 0800 	mov.w	r8, #0
 800c14c:	f8a4 8016 	strh.w	r8, [r4, #22]
 800c150:	f8a4 8018 	strh.w	r8, [r4, #24]
 800c154:	f8cd 8004 	str.w	r8, [sp, #4]
 800c158:	2300      	movs	r3, #0
 800c15a:	9303      	str	r3, [sp, #12]
 800c15c:	8823      	ldrh	r3, [r4, #0]
 800c15e:	2b20      	cmp	r3, #32
 800c160:	d034      	beq.n	800c1cc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe4>
 800c162:	f242 010b 	movw	r1, #8203	@ 0x200b
 800c166:	1a5a      	subs	r2, r3, r1
 800c168:	f1d2 0a00 	rsbs	sl, r2, #0
 800c16c:	eb4a 0a02 	adc.w	sl, sl, r2
 800c170:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 800c174:	4293      	cmp	r3, r2
 800c176:	d009      	beq.n	800c18c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa4>
 800c178:	428b      	cmp	r3, r1
 800c17a:	9a01      	ldr	r2, [sp, #4]
 800c17c:	bf18      	it	ne
 800c17e:	461a      	movne	r2, r3
 800c180:	9201      	str	r2, [sp, #4]
 800c182:	bf0c      	ite	eq
 800c184:	f04f 0a01 	moveq.w	sl, #1
 800c188:	f04f 0a00 	movne.w	sl, #0
 800c18c:	ab03      	add	r3, sp, #12
 800c18e:	68e2      	ldr	r2, [r4, #12]
 800c190:	7a21      	ldrb	r1, [r4, #8]
 800c192:	6860      	ldr	r0, [r4, #4]
 800c194:	f003 fa14 	bl	800f5c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800c198:	8020      	strh	r0, [r4, #0]
 800c19a:	b9d8      	cbnz	r0, 800c1d4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xec>
 800c19c:	8ba2      	ldrh	r2, [r4, #28]
 800c19e:	2300      	movs	r3, #0
 800c1a0:	4611      	mov	r1, r2
 800c1a2:	4620      	mov	r0, r4
 800c1a4:	f7ff ff90 	bl	800c0c8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800c1a8:	e06e      	b.n	800c288 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1a0>
 800c1aa:	2500      	movs	r5, #0
 800c1ac:	46a9      	mov	r9, r5
 800c1ae:	462e      	mov	r6, r5
 800c1b0:	2701      	movs	r7, #1
 800c1b2:	e7c9      	b.n	800c148 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 800c1b4:	42b7      	cmp	r7, r6
 800c1b6:	f04f 0500 	mov.w	r5, #0
 800c1ba:	bfb4      	ite	lt
 800c1bc:	2700      	movlt	r7, #0
 800c1be:	2701      	movge	r7, #1
 800c1c0:	462e      	mov	r6, r5
 800c1c2:	e7c1      	b.n	800c148 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 800c1c4:	2500      	movs	r5, #0
 800c1c6:	46a9      	mov	r9, r5
 800c1c8:	2601      	movs	r6, #1
 800c1ca:	e7ad      	b.n	800c128 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x40>
 800c1cc:	9301      	str	r3, [sp, #4]
 800c1ce:	f04f 0a01 	mov.w	sl, #1
 800c1d2:	e7db      	b.n	800c18c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa4>
 800c1d4:	8b63      	ldrh	r3, [r4, #26]
 800c1d6:	280a      	cmp	r0, #10
 800c1d8:	f103 0301 	add.w	r3, r3, #1
 800c1dc:	8363      	strh	r3, [r4, #26]
 800c1de:	d0dd      	beq.n	800c19c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb4>
 800c1e0:	9a03      	ldr	r2, [sp, #12]
 800c1e2:	bb62      	cbnz	r2, 800c23e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x156>
 800c1e4:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 800c1e8:	4298      	cmp	r0, r3
 800c1ea:	d003      	beq.n	800c1f4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10c>
 800c1ec:	f242 030b 	movw	r3, #8203	@ 0x200b
 800c1f0:	4298      	cmp	r0, r3
 800c1f2:	d1b1      	bne.n	800c158 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c1f4:	8823      	ldrh	r3, [r4, #0]
 800c1f6:	8ba1      	ldrh	r1, [r4, #28]
 800c1f8:	2b20      	cmp	r3, #32
 800c1fa:	d003      	beq.n	800c204 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11c>
 800c1fc:	f242 000b 	movw	r0, #8203	@ 0x200b
 800c200:	4283      	cmp	r3, r0
 800c202:	d131      	bne.n	800c268 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x180>
 800c204:	f1ba 0f00 	cmp.w	sl, #0
 800c208:	bf0a      	itet	eq
 800c20a:	4688      	moveq	r8, r1
 800c20c:	4650      	movne	r0, sl
 800c20e:	2001      	moveq	r0, #1
 800c210:	440a      	add	r2, r1
 800c212:	8b23      	ldrh	r3, [r4, #24]
 800c214:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 800c218:	b292      	uxth	r2, r2
 800c21a:	83a2      	strh	r2, [r4, #28]
 800c21c:	4413      	add	r3, r2
 800c21e:	f1b9 0f00 	cmp.w	r9, #0
 800c222:	d102      	bne.n	800c22a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x142>
 800c224:	2d00      	cmp	r5, #0
 800c226:	d042      	beq.n	800c2ae <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c6>
 800c228:	b300      	cbz	r0, 800c26c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x184>
 800c22a:	8c21      	ldrh	r1, [r4, #32]
 800c22c:	4419      	add	r1, r3
 800c22e:	458c      	cmp	ip, r1
 800c230:	da37      	bge.n	800c2a2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ba>
 800c232:	8ae1      	ldrh	r1, [r4, #22]
 800c234:	2900      	cmp	r1, #0
 800c236:	d034      	beq.n	800c2a2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ba>
 800c238:	4563      	cmp	r3, ip
 800c23a:	dd8d      	ble.n	800c158 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c23c:	e01d      	b.n	800c27a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x192>
 800c23e:	8893      	ldrh	r3, [r2, #4]
 800c240:	8023      	strh	r3, [r4, #0]
 800c242:	f892 b00d 	ldrb.w	fp, [r2, #13]
 800c246:	9901      	ldr	r1, [sp, #4]
 800c248:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 800c24c:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 800c250:	f892 b00a 	ldrb.w	fp, [r2, #10]
 800c254:	ea4b 0b00 	orr.w	fp, fp, r0
 800c258:	68e0      	ldr	r0, [r4, #12]
 800c25a:	6803      	ldr	r3, [r0, #0]
 800c25c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c25e:	4798      	blx	r3
 800c260:	eb0b 0200 	add.w	r2, fp, r0
 800c264:	b292      	uxth	r2, r2
 800c266:	e7c5      	b.n	800c1f4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10c>
 800c268:	2000      	movs	r0, #0
 800c26a:	e7d1      	b.n	800c210 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x128>
 800c26c:	4563      	cmp	r3, ip
 800c26e:	f77f af73 	ble.w	800c158 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c272:	8ae3      	ldrh	r3, [r4, #22]
 800c274:	2b00      	cmp	r3, #0
 800c276:	f43f af6f 	beq.w	800c158 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c27a:	2301      	movs	r3, #1
 800c27c:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 800c280:	8c22      	ldrh	r2, [r4, #32]
 800c282:	8be3      	ldrh	r3, [r4, #30]
 800c284:	4413      	add	r3, r2
 800c286:	83e3      	strh	r3, [r4, #30]
 800c288:	68e0      	ldr	r0, [r4, #12]
 800c28a:	6803      	ldr	r3, [r0, #0]
 800c28c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c28e:	4798      	blx	r3
 800c290:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 800c294:	4418      	add	r0, r3
 800c296:	8a63      	ldrh	r3, [r4, #18]
 800c298:	1a18      	subs	r0, r3, r0
 800c29a:	8260      	strh	r0, [r4, #18]
 800c29c:	b005      	add	sp, #20
 800c29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	4611      	mov	r1, r2
 800c2a6:	4620      	mov	r0, r4
 800c2a8:	f7ff ff0e 	bl	800c0c8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 800c2ac:	e754      	b.n	800c158 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c2ae:	4563      	cmp	r3, ip
 800c2b0:	dd14      	ble.n	800c2dc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f4>
 800c2b2:	b117      	cbz	r7, 800c2ba <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d2>
 800c2b4:	2301      	movs	r3, #1
 800c2b6:	460a      	mov	r2, r1
 800c2b8:	e772      	b.n	800c1a0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 800c2ba:	2e00      	cmp	r6, #0
 800c2bc:	f43f af4c 	beq.w	800c158 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c2c0:	2800      	cmp	r0, #0
 800c2c2:	f47f af49 	bne.w	800c158 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c2c6:	f1ba 0f00 	cmp.w	sl, #0
 800c2ca:	d002      	beq.n	800c2d2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1ea>
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	4642      	mov	r2, r8
 800c2d0:	e767      	b.n	800c1a2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xba>
 800c2d2:	8ae3      	ldrh	r3, [r4, #22]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	f43f af3f 	beq.w	800c158 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c2da:	e7d5      	b.n	800c288 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1a0>
 800c2dc:	2800      	cmp	r0, #0
 800c2de:	f47f af3b 	bne.w	800c158 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c2e2:	f1ba 0f00 	cmp.w	sl, #0
 800c2e6:	f43f af37 	beq.w	800c158 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	4642      	mov	r2, r8
 800c2ee:	e7da      	b.n	800c2a6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1be>

0800c2f0 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 800c2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2f2:	4605      	mov	r5, r0
 800c2f4:	b08f      	sub	sp, #60	@ 0x3c
 800c2f6:	4617      	mov	r7, r2
 800c2f8:	461c      	mov	r4, r3
 800c2fa:	460e      	mov	r6, r1
 800c2fc:	b1d1      	cbz	r1, 800c334 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	4620      	mov	r0, r4
 800c302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c304:	4798      	blx	r3
 800c306:	4240      	negs	r0, r0
 800c308:	b200      	sxth	r0, r0
 800c30a:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800c30e:	9603      	str	r6, [sp, #12]
 800c310:	9700      	str	r7, [sp, #0]
 800c312:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c316:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 800c31a:	4629      	mov	r1, r5
 800c31c:	a805      	add	r0, sp, #20
 800c31e:	f7ff f8cf 	bl	800b4c0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 800c322:	2401      	movs	r4, #1
 800c324:	a805      	add	r0, sp, #20
 800c326:	f7ff fedf 	bl	800c0e8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800c32a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800c32e:	b163      	cbz	r3, 800c34a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 800c330:	3401      	adds	r4, #1
 800c332:	e7f7      	b.n	800c324 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 800c334:	f003 fa12 	bl	800f75c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800c338:	2401      	movs	r4, #1
 800c33a:	280a      	cmp	r0, #10
 800c33c:	4628      	mov	r0, r5
 800c33e:	bf08      	it	eq
 800c340:	3401      	addeq	r4, #1
 800c342:	f003 fa0b 	bl	800f75c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800c346:	2800      	cmp	r0, #0
 800c348:	d1f7      	bne.n	800c33a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 800c34a:	b2a0      	uxth	r0, r4
 800c34c:	b00f      	add	sp, #60	@ 0x3c
 800c34e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c350 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 800c350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c354:	b0e7      	sub	sp, #412	@ 0x19c
 800c356:	468a      	mov	sl, r1
 800c358:	f8dd 91c0 	ldr.w	r9, [sp, #448]	@ 0x1c0
 800c35c:	9006      	str	r0, [sp, #24]
 800c35e:	461c      	mov	r4, r3
 800c360:	f1b9 0f00 	cmp.w	r9, #0
 800c364:	f000 80c6 	beq.w	800c4f4 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	f000 80c2 	beq.w	800c4f4 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800c370:	7ba3      	ldrb	r3, [r4, #14]
 800c372:	2b00      	cmp	r3, #0
 800c374:	f000 80be 	beq.w	800c4f4 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800c378:	6810      	ldr	r0, [r2, #0]
 800c37a:	6851      	ldr	r1, [r2, #4]
 800c37c:	f9ba 2004 	ldrsh.w	r2, [sl, #4]
 800c380:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 800c384:	af09      	add	r7, sp, #36	@ 0x24
 800c386:	463b      	mov	r3, r7
 800c388:	c303      	stmia	r3!, {r0, r1}
 800c38a:	79a2      	ldrb	r2, [r4, #6]
 800c38c:	f9ba 3006 	ldrsh.w	r3, [sl, #6]
 800c390:	7966      	ldrb	r6, [r4, #5]
 800c392:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800c396:	a90b      	add	r1, sp, #44	@ 0x2c
 800c398:	4638      	mov	r0, r7
 800c39a:	2500      	movs	r5, #0
 800c39c:	950b      	str	r5, [sp, #44]	@ 0x2c
 800c39e:	f7ff f90e 	bl	800b5be <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800c3a2:	a90b      	add	r1, sp, #44	@ 0x2c
 800c3a4:	79a2      	ldrb	r2, [r4, #6]
 800c3a6:	4608      	mov	r0, r1
 800c3a8:	f7ff f909 	bl	800b5be <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 800c3ac:	2e00      	cmp	r6, #0
 800c3ae:	d16a      	bne.n	800c486 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 800c3b0:	f894 8004 	ldrb.w	r8, [r4, #4]
 800c3b4:	ebb8 0805 	subs.w	r8, r8, r5
 800c3b8:	bf18      	it	ne
 800c3ba:	f04f 0801 	movne.w	r8, #1
 800c3be:	4645      	mov	r5, r8
 800c3c0:	a81b      	add	r0, sp, #108	@ 0x6c
 800c3c2:	f002 f946 	bl	800e652 <_ZN8touchgfx12TextProviderC1Ev>
 800c3c6:	6820      	ldr	r0, [r4, #0]
 800c3c8:	6803      	ldr	r3, [r0, #0]
 800c3ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c3cc:	4798      	blx	r3
 800c3ce:	4683      	mov	fp, r0
 800c3d0:	6820      	ldr	r0, [r4, #0]
 800c3d2:	6803      	ldr	r3, [r0, #0]
 800c3d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c3d6:	4798      	blx	r3
 800c3d8:	465b      	mov	r3, fp
 800c3da:	9a71      	ldr	r2, [sp, #452]	@ 0x1c4
 800c3dc:	9000      	str	r0, [sp, #0]
 800c3de:	4649      	mov	r1, r9
 800c3e0:	a81b      	add	r0, sp, #108	@ 0x6c
 800c3e2:	f002 f991 	bl	800e708 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800c3e6:	6820      	ldr	r0, [r4, #0]
 800c3e8:	6803      	ldr	r3, [r0, #0]
 800c3ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3ec:	4798      	blx	r3
 800c3ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3f2:	4403      	add	r3, r0
 800c3f4:	9305      	str	r3, [sp, #20]
 800c3f6:	6823      	ldr	r3, [r4, #0]
 800c3f8:	f893 b009 	ldrb.w	fp, [r3, #9]
 800c3fc:	4483      	add	fp, r0
 800c3fe:	a834      	add	r0, sp, #208	@ 0xd0
 800c400:	f002 f927 	bl	800e652 <_ZN8touchgfx12TextProviderC1Ev>
 800c404:	7c23      	ldrb	r3, [r4, #16]
 800c406:	b17b      	cbz	r3, 800c428 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd8>
 800c408:	6820      	ldr	r0, [r4, #0]
 800c40a:	6803      	ldr	r3, [r0, #0]
 800c40c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c40e:	4798      	blx	r3
 800c410:	9007      	str	r0, [sp, #28]
 800c412:	6820      	ldr	r0, [r4, #0]
 800c414:	6802      	ldr	r2, [r0, #0]
 800c416:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c418:	4790      	blx	r2
 800c41a:	9b07      	ldr	r3, [sp, #28]
 800c41c:	9000      	str	r0, [sp, #0]
 800c41e:	9a71      	ldr	r2, [sp, #452]	@ 0x1c4
 800c420:	4649      	mov	r1, r9
 800c422:	a834      	add	r0, sp, #208	@ 0xd0
 800c424:	f002 f970 	bl	800e708 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800c428:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 800c42c:	7be2      	ldrb	r2, [r4, #15]
 800c42e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 800c432:	1a8a      	subs	r2, r1, r2
 800c434:	7c21      	ldrb	r1, [r4, #16]
 800c436:	9103      	str	r1, [sp, #12]
 800c438:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 800c43c:	9102      	str	r1, [sp, #8]
 800c43e:	6821      	ldr	r1, [r4, #0]
 800c440:	9101      	str	r1, [sp, #4]
 800c442:	7961      	ldrb	r1, [r4, #5]
 800c444:	9100      	str	r1, [sp, #0]
 800c446:	b292      	uxth	r2, r2
 800c448:	a934      	add	r1, sp, #208	@ 0xd0
 800c44a:	a812      	add	r0, sp, #72	@ 0x48
 800c44c:	f7ff f838 	bl	800b4c0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 800c450:	7c23      	ldrb	r3, [r4, #16]
 800c452:	b30b      	cbz	r3, 800c498 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x148>
 800c454:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 800c458:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 800c45c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c460:	445b      	add	r3, fp
 800c462:	4293      	cmp	r3, r2
 800c464:	da49      	bge.n	800c4fa <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1aa>
 800c466:	a812      	add	r0, sp, #72	@ 0x48
 800c468:	f7ff fe3e 	bl	800c0e8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800c46c:	f8bd 305e 	ldrh.w	r3, [sp, #94]	@ 0x5e
 800c470:	3b01      	subs	r3, #1
 800c472:	b29b      	uxth	r3, r3
 800c474:	454b      	cmp	r3, r9
 800c476:	9307      	str	r3, [sp, #28]
 800c478:	d029      	beq.n	800c4ce <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x17e>
 800c47a:	4631      	mov	r1, r6
 800c47c:	a81b      	add	r0, sp, #108	@ 0x6c
 800c47e:	f7f7 f8a5 	bl	80035cc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800c482:	9b07      	ldr	r3, [sp, #28]
 800c484:	e7f4      	b.n	800c470 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x120>
 800c486:	2e01      	cmp	r6, #1
 800c488:	d103      	bne.n	800c492 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x142>
 800c48a:	7925      	ldrb	r5, [r4, #4]
 800c48c:	3d02      	subs	r5, #2
 800c48e:	bf18      	it	ne
 800c490:	2501      	movne	r5, #1
 800c492:	f04f 0801 	mov.w	r8, #1
 800c496:	e793      	b.n	800c3c0 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x70>
 800c498:	f8bd 9014 	ldrh.w	r9, [sp, #20]
 800c49c:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 800c4a0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800c4a4:	445b      	add	r3, fp
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	da27      	bge.n	800c4fa <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1aa>
 800c4aa:	a81b      	add	r0, sp, #108	@ 0x6c
 800c4ac:	f003 f956 	bl	800f75c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800c4b0:	b300      	cbz	r0, 800c4f4 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800c4b2:	280a      	cmp	r0, #10
 800c4b4:	d1f2      	bne.n	800c49c <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14c>
 800c4b6:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 800c4ba:	444b      	add	r3, r9
 800c4bc:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800c4c0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 800c4c4:	eba3 0309 	sub.w	r3, r3, r9
 800c4c8:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800c4cc:	e7e6      	b.n	800c49c <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14c>
 800c4ce:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800c4d2:	f8bd 202e 	ldrh.w	r2, [sp, #46]	@ 0x2e
 800c4d6:	441a      	add	r2, r3
 800c4d8:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 800c4dc:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 800c4e0:	1ad3      	subs	r3, r2, r3
 800c4e2:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 800c4e6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800c4ea:	b11b      	cbz	r3, 800c4f4 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800c4ec:	f89d 306a 	ldrb.w	r3, [sp, #106]	@ 0x6a
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d0b1      	beq.n	800c458 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x108>
 800c4f4:	b067      	add	sp, #412	@ 0x19c
 800c4f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	e9cd 3a0d 	strd	r3, sl, [sp, #52]	@ 0x34
 800c500:	e9cd 7410 	strd	r7, r4, [sp, #64]	@ 0x40
 800c504:	f8bd 202e 	ldrh.w	r2, [sp, #46]	@ 0x2e
 800c508:	f8ad 203c 	strh.w	r2, [sp, #60]	@ 0x3c
 800c50c:	4699      	mov	r9, r3
 800c50e:	7c23      	ldrb	r3, [r4, #16]
 800c510:	f8ad 9022 	strh.w	r9, [sp, #34]	@ 0x22
 800c514:	b113      	cbz	r3, 800c51c <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1cc>
 800c516:	a812      	add	r0, sp, #72	@ 0x48
 800c518:	f7ff fde6 	bl	800c0e8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800c51c:	f1b8 0f00 	cmp.w	r8, #0
 800c520:	d068      	beq.n	800c5f4 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x2a4>
 800c522:	2d00      	cmp	r5, #0
 800c524:	d061      	beq.n	800c5ea <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x29a>
 800c526:	7c23      	ldrb	r3, [r4, #16]
 800c528:	b9c3      	cbnz	r3, 800c55c <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x20c>
 800c52a:	2264      	movs	r2, #100	@ 0x64
 800c52c:	a91b      	add	r1, sp, #108	@ 0x6c
 800c52e:	a84d      	add	r0, sp, #308	@ 0x134
 800c530:	f007 f9f7 	bl	8013922 <memcpy>
 800c534:	4633      	mov	r3, r6
 800c536:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800c53a:	6821      	ldr	r1, [r4, #0]
 800c53c:	a84d      	add	r0, sp, #308	@ 0x134
 800c53e:	f7ff f802 	bl	800b546 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800c542:	b200      	sxth	r0, r0
 800c544:	7922      	ldrb	r2, [r4, #4]
 800c546:	2e00      	cmp	r6, #0
 800c548:	d144      	bne.n	800c5d4 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x284>
 800c54a:	2a01      	cmp	r2, #1
 800c54c:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800c550:	d107      	bne.n	800c562 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x212>
 800c552:	1a1b      	subs	r3, r3, r0
 800c554:	2002      	movs	r0, #2
 800c556:	fb93 f3f0 	sdiv	r3, r3, r0
 800c55a:	e005      	b.n	800c568 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 800c55c:	f9bd 0066 	ldrsh.w	r0, [sp, #102]	@ 0x66
 800c560:	e7f0      	b.n	800c544 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1f4>
 800c562:	7be2      	ldrb	r2, [r4, #15]
 800c564:	1a9b      	subs	r3, r3, r2
 800c566:	1a1b      	subs	r3, r3, r0
 800c568:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800c56c:	7c23      	ldrb	r3, [r4, #16]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d042      	beq.n	800c5f8 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x2a8>
 800c572:	f8bd 205e 	ldrh.w	r2, [sp, #94]	@ 0x5e
 800c576:	f89d 306a 	ldrb.w	r3, [sp, #106]	@ 0x6a
 800c57a:	9201      	str	r2, [sp, #4]
 800c57c:	f10d 0a34 	add.w	sl, sp, #52	@ 0x34
 800c580:	f10d 0b6c 	add.w	fp, sp, #108	@ 0x6c
 800c584:	e9cd 3a02 	strd	r3, sl, [sp, #8]
 800c588:	6822      	ldr	r2, [r4, #0]
 800c58a:	f8cd b000 	str.w	fp, [sp]
 800c58e:	4633      	mov	r3, r6
 800c590:	f10d 0122 	add.w	r1, sp, #34	@ 0x22
 800c594:	9806      	ldr	r0, [sp, #24]
 800c596:	f7ff fa29 	bl	800b9ec <_ZN8touchgfx3LCD17drawStringRTLLineERsPKNS_4FontEhRNS_12TextProviderEibPKNS0_24DrawStringInternalStructE>
 800c59a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800c59e:	f8ba 3008 	ldrh.w	r3, [sl, #8]
 800c5a2:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800c5a6:	4413      	add	r3, r2
 800c5a8:	1a8a      	subs	r2, r1, r2
 800c5aa:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 800c5ae:	f89d 206a 	ldrb.w	r2, [sp, #106]	@ 0x6a
 800c5b2:	b21b      	sxth	r3, r3
 800c5b4:	f8aa 3008 	strh.w	r3, [sl, #8]
 800c5b8:	2a00      	cmp	r2, #0
 800c5ba:	d19b      	bne.n	800c4f4 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800c5bc:	88fa      	ldrh	r2, [r7, #6]
 800c5be:	8879      	ldrh	r1, [r7, #2]
 800c5c0:	440a      	add	r2, r1
 800c5c2:	b212      	sxth	r2, r2
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	dc95      	bgt.n	800c4f4 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800c5c8:	4658      	mov	r0, fp
 800c5ca:	f002 f869 	bl	800e6a0 <_ZN8touchgfx12TextProvider11endOfStringEv>
 800c5ce:	2800      	cmp	r0, #0
 800c5d0:	d09d      	beq.n	800c50e <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1be>
 800c5d2:	e78f      	b.n	800c4f4 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 800c5d4:	2a01      	cmp	r2, #1
 800c5d6:	d103      	bne.n	800c5e0 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x290>
 800c5d8:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800c5dc:	4403      	add	r3, r0
 800c5de:	e7b9      	b.n	800c554 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x204>
 800c5e0:	2a00      	cmp	r2, #0
 800c5e2:	d1c3      	bne.n	800c56c <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x21c>
 800c5e4:	7be3      	ldrb	r3, [r4, #15]
 800c5e6:	4403      	add	r3, r0
 800c5e8:	e7be      	b.n	800c568 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 800c5ea:	7be2      	ldrb	r2, [r4, #15]
 800c5ec:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 800c5f0:	1a9b      	subs	r3, r3, r2
 800c5f2:	e7b9      	b.n	800c568 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 800c5f4:	7be3      	ldrb	r3, [r4, #15]
 800c5f6:	e7b7      	b.n	800c568 <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x218>
 800c5f8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800c5fc:	e7bd      	b.n	800c57a <_ZN8touchgfx3LCD13drawStringRTLERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x22a>

0800c5fe <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 800c5fe:	2b03      	cmp	r3, #3
 800c600:	d818      	bhi.n	800c634 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 800c602:	e8df f003 	tbb	[pc, r3]
 800c606:	0602      	.short	0x0602
 800c608:	130d      	.short	0x130d
 800c60a:	f9b0 2000 	ldrsh.w	r2, [r0]
 800c60e:	1850      	adds	r0, r2, r1
 800c610:	4770      	bx	lr
 800c612:	8803      	ldrh	r3, [r0, #0]
 800c614:	8880      	ldrh	r0, [r0, #4]
 800c616:	4418      	add	r0, r3
 800c618:	b200      	sxth	r0, r0
 800c61a:	1a80      	subs	r0, r0, r2
 800c61c:	3801      	subs	r0, #1
 800c61e:	4770      	bx	lr
 800c620:	8803      	ldrh	r3, [r0, #0]
 800c622:	8880      	ldrh	r0, [r0, #4]
 800c624:	4418      	add	r0, r3
 800c626:	b200      	sxth	r0, r0
 800c628:	1a40      	subs	r0, r0, r1
 800c62a:	e7f7      	b.n	800c61c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 800c62c:	f9b0 0000 	ldrsh.w	r0, [r0]
 800c630:	4410      	add	r0, r2
 800c632:	4770      	bx	lr
 800c634:	2000      	movs	r0, #0
 800c636:	4770      	bx	lr

0800c638 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 800c638:	2b03      	cmp	r3, #3
 800c63a:	d817      	bhi.n	800c66c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 800c63c:	e8df f003 	tbb	[pc, r3]
 800c640:	10090602 	.word	0x10090602
 800c644:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800c648:	1850      	adds	r0, r2, r1
 800c64a:	4770      	bx	lr
 800c64c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800c650:	e7fa      	b.n	800c648 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 800c652:	8843      	ldrh	r3, [r0, #2]
 800c654:	88c0      	ldrh	r0, [r0, #6]
 800c656:	4418      	add	r0, r3
 800c658:	b200      	sxth	r0, r0
 800c65a:	1a80      	subs	r0, r0, r2
 800c65c:	3801      	subs	r0, #1
 800c65e:	4770      	bx	lr
 800c660:	8843      	ldrh	r3, [r0, #2]
 800c662:	88c0      	ldrh	r0, [r0, #6]
 800c664:	4418      	add	r0, r3
 800c666:	b200      	sxth	r0, r0
 800c668:	1a40      	subs	r0, r0, r1
 800c66a:	e7f7      	b.n	800c65c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 800c66c:	2000      	movs	r0, #0
 800c66e:	4770      	bx	lr

0800c670 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800c670:	4b01      	ldr	r3, [pc, #4]	@ (800c678 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800c672:	2200      	movs	r2, #0
 800c674:	601a      	str	r2, [r3, #0]
 800c676:	4770      	bx	lr
 800c678:	20012660 	.word	0x20012660

0800c67c <_ZN8touchgfx16TouchCalibration4clzuEm>:
 800c67c:	4603      	mov	r3, r0
 800c67e:	b1c8      	cbz	r0, 800c6b4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 800c680:	0c02      	lsrs	r2, r0, #16
 800c682:	0412      	lsls	r2, r2, #16
 800c684:	b9a2      	cbnz	r2, 800c6b0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 800c686:	0403      	lsls	r3, r0, #16
 800c688:	2010      	movs	r0, #16
 800c68a:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 800c68e:	bf04      	itt	eq
 800c690:	021b      	lsleq	r3, r3, #8
 800c692:	3008      	addeq	r0, #8
 800c694:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 800c698:	bf04      	itt	eq
 800c69a:	011b      	lsleq	r3, r3, #4
 800c69c:	3004      	addeq	r0, #4
 800c69e:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 800c6a2:	bf04      	itt	eq
 800c6a4:	009b      	lsleq	r3, r3, #2
 800c6a6:	3002      	addeq	r0, #2
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	db04      	blt.n	800c6b6 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 800c6ac:	3001      	adds	r0, #1
 800c6ae:	4770      	bx	lr
 800c6b0:	2000      	movs	r0, #0
 800c6b2:	e7ea      	b.n	800c68a <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 800c6b4:	2020      	movs	r0, #32
 800c6b6:	4770      	bx	lr

0800c6b8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 800c6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6bc:	b087      	sub	sp, #28
 800c6be:	460d      	mov	r5, r1
 800c6c0:	4616      	mov	r6, r2
 800c6c2:	4698      	mov	r8, r3
 800c6c4:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 800c6c8:	4601      	mov	r1, r0
 800c6ca:	b120      	cbz	r0, 800c6d6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800c6cc:	b11a      	cbz	r2, 800c6d6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800c6ce:	2d1f      	cmp	r5, #31
 800c6d0:	d801      	bhi.n	800c6d6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800c6d2:	2b1f      	cmp	r3, #31
 800c6d4:	d904      	bls.n	800c6e0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 800c6d6:	2000      	movs	r0, #0
 800c6d8:	6038      	str	r0, [r7, #0]
 800c6da:	b007      	add	sp, #28
 800c6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6e0:	b97d      	cbnz	r5, 800c702 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 800c6e2:	b143      	cbz	r3, 800c6f6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 800c6e4:	4602      	mov	r2, r0
 800c6e6:	e9cd 4700 	strd	r4, r7, [sp]
 800c6ea:	462b      	mov	r3, r5
 800c6ec:	4641      	mov	r1, r8
 800c6ee:	4630      	mov	r0, r6
 800c6f0:	f7ff ffe2 	bl	800c6b8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800c6f4:	e7f1      	b.n	800c6da <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800c6f6:	f04f 33ff 	mov.w	r3, #4294967295
 800c6fa:	603b      	str	r3, [r7, #0]
 800c6fc:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800c700:	e7eb      	b.n	800c6da <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800c702:	fa32 fa05 	lsrs.w	sl, r2, r5
 800c706:	d106      	bne.n	800c716 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 800c708:	4346      	muls	r6, r0
 800c70a:	fbb6 f0f4 	udiv	r0, r6, r4
 800c70e:	fb04 6610 	mls	r6, r4, r0, r6
 800c712:	603e      	str	r6, [r7, #0]
 800c714:	e7e1      	b.n	800c6da <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800c716:	2201      	movs	r2, #1
 800c718:	40aa      	lsls	r2, r5
 800c71a:	3a01      	subs	r2, #1
 800c71c:	4016      	ands	r6, r2
 800c71e:	fa00 fb05 	lsl.w	fp, r0, r5
 800c722:	4630      	mov	r0, r6
 800c724:	fbbb f9f4 	udiv	r9, fp, r4
 800c728:	fb0a f309 	mul.w	r3, sl, r9
 800c72c:	9303      	str	r3, [sp, #12]
 800c72e:	f7ff ffa5 	bl	800c67c <_ZN8touchgfx16TouchCalibration4clzuEm>
 800c732:	462b      	mov	r3, r5
 800c734:	460a      	mov	r2, r1
 800c736:	e9cd 4700 	strd	r4, r7, [sp]
 800c73a:	4601      	mov	r1, r0
 800c73c:	4630      	mov	r0, r6
 800c73e:	f7ff ffbb 	bl	800c6b8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800c742:	fb04 b919 	mls	r9, r4, r9, fp
 800c746:	4606      	mov	r6, r0
 800c748:	4648      	mov	r0, r9
 800c74a:	eb05 0108 	add.w	r1, r5, r8
 800c74e:	f7ff ff95 	bl	800c67c <_ZN8touchgfx16TouchCalibration4clzuEm>
 800c752:	ab05      	add	r3, sp, #20
 800c754:	e9cd 4300 	strd	r4, r3, [sp]
 800c758:	464a      	mov	r2, r9
 800c75a:	4603      	mov	r3, r0
 800c75c:	4650      	mov	r0, sl
 800c75e:	f7ff ffab 	bl	800c6b8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800c762:	6839      	ldr	r1, [r7, #0]
 800c764:	9a05      	ldr	r2, [sp, #20]
 800c766:	9b03      	ldr	r3, [sp, #12]
 800c768:	4411      	add	r1, r2
 800c76a:	fbb1 f2f4 	udiv	r2, r1, r4
 800c76e:	18d3      	adds	r3, r2, r3
 800c770:	441e      	add	r6, r3
 800c772:	fb04 1412 	mls	r4, r4, r2, r1
 800c776:	4430      	add	r0, r6
 800c778:	603c      	str	r4, [r7, #0]
 800c77a:	e7ae      	b.n	800c6da <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

0800c77c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 800c77c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c780:	b085      	sub	sp, #20
 800c782:	f1b0 0900 	subs.w	r9, r0, #0
 800c786:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800c788:	461d      	mov	r5, r3
 800c78a:	bfbf      	itttt	lt
 800c78c:	6823      	ldrlt	r3, [r4, #0]
 800c78e:	425b      	neglt	r3, r3
 800c790:	f1c9 0900 	rsblt	r9, r9, #0
 800c794:	6023      	strlt	r3, [r4, #0]
 800c796:	bfb4      	ite	lt
 800c798:	f04f 36ff 	movlt.w	r6, #4294967295
 800c79c:	2601      	movge	r6, #1
 800c79e:	2a00      	cmp	r2, #0
 800c7a0:	4617      	mov	r7, r2
 800c7a2:	da04      	bge.n	800c7ae <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 800c7a4:	6823      	ldr	r3, [r4, #0]
 800c7a6:	425b      	negs	r3, r3
 800c7a8:	4257      	negs	r7, r2
 800c7aa:	4276      	negs	r6, r6
 800c7ac:	6023      	str	r3, [r4, #0]
 800c7ae:	2d00      	cmp	r5, #0
 800c7b0:	4638      	mov	r0, r7
 800c7b2:	bfba      	itte	lt
 800c7b4:	426d      	neglt	r5, r5
 800c7b6:	f04f 38ff 	movlt.w	r8, #4294967295
 800c7ba:	f04f 0801 	movge.w	r8, #1
 800c7be:	f7ff ff5d 	bl	800c67c <_ZN8touchgfx16TouchCalibration4clzuEm>
 800c7c2:	ab03      	add	r3, sp, #12
 800c7c4:	e9cd 5300 	strd	r5, r3, [sp]
 800c7c8:	463a      	mov	r2, r7
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	4648      	mov	r0, r9
 800c7ce:	f7ff ff73 	bl	800c6b8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800c7d2:	6823      	ldr	r3, [r4, #0]
 800c7d4:	9a03      	ldr	r2, [sp, #12]
 800c7d6:	4546      	cmp	r6, r8
 800c7d8:	441a      	add	r2, r3
 800c7da:	fb92 f3f5 	sdiv	r3, r2, r5
 800c7de:	4418      	add	r0, r3
 800c7e0:	bf18      	it	ne
 800c7e2:	4240      	negne	r0, r0
 800c7e4:	fb05 2313 	mls	r3, r5, r3, r2
 800c7e8:	1c72      	adds	r2, r6, #1
 800c7ea:	6023      	str	r3, [r4, #0]
 800c7ec:	d105      	bne.n	800c7fa <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	f1c3 0200 	rsb	r2, r3, #0
 800c7f4:	db0b      	blt.n	800c80e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 800c7f6:	6022      	str	r2, [r4, #0]
 800c7f8:	e006      	b.n	800c808 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800c7fa:	2e01      	cmp	r6, #1
 800c7fc:	d104      	bne.n	800c808 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	da02      	bge.n	800c808 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800c802:	442b      	add	r3, r5
 800c804:	3801      	subs	r0, #1
 800c806:	6023      	str	r3, [r4, #0]
 800c808:	b005      	add	sp, #20
 800c80a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c80e:	3801      	subs	r0, #1
 800c810:	1b52      	subs	r2, r2, r5
 800c812:	e7f0      	b.n	800c7f6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0800c814 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 800c814:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800c818:	4c1c      	ldr	r4, [pc, #112]	@ (800c88c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 800c81a:	6807      	ldr	r7, [r0, #0]
 800c81c:	69a3      	ldr	r3, [r4, #24]
 800c81e:	4605      	mov	r5, r0
 800c820:	b92b      	cbnz	r3, 800c82e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 800c822:	6840      	ldr	r0, [r0, #4]
 800c824:	e9c5 7000 	strd	r7, r0, [r5]
 800c828:	b004      	add	sp, #16
 800c82a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c82e:	68a2      	ldr	r2, [r4, #8]
 800c830:	6820      	ldr	r0, [r4, #0]
 800c832:	ae04      	add	r6, sp, #16
 800c834:	f04f 0802 	mov.w	r8, #2
 800c838:	fb93 f1f8 	sdiv	r1, r3, r8
 800c83c:	440a      	add	r2, r1
 800c83e:	f846 2d04 	str.w	r2, [r6, #-4]!
 800c842:	69e1      	ldr	r1, [r4, #28]
 800c844:	9600      	str	r6, [sp, #0]
 800c846:	463a      	mov	r2, r7
 800c848:	f7ff ff98 	bl	800c77c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800c84c:	69a3      	ldr	r3, [r4, #24]
 800c84e:	686a      	ldr	r2, [r5, #4]
 800c850:	6a21      	ldr	r1, [r4, #32]
 800c852:	9600      	str	r6, [sp, #0]
 800c854:	4607      	mov	r7, r0
 800c856:	6860      	ldr	r0, [r4, #4]
 800c858:	f7ff ff90 	bl	800c77c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800c85c:	6962      	ldr	r2, [r4, #20]
 800c85e:	69a3      	ldr	r3, [r4, #24]
 800c860:	fb93 f8f8 	sdiv	r8, r3, r8
 800c864:	4442      	add	r2, r8
 800c866:	9203      	str	r2, [sp, #12]
 800c868:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c86a:	682a      	ldr	r2, [r5, #0]
 800c86c:	9600      	str	r6, [sp, #0]
 800c86e:	4407      	add	r7, r0
 800c870:	68e0      	ldr	r0, [r4, #12]
 800c872:	f7ff ff83 	bl	800c77c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800c876:	9600      	str	r6, [sp, #0]
 800c878:	4680      	mov	r8, r0
 800c87a:	69a3      	ldr	r3, [r4, #24]
 800c87c:	686a      	ldr	r2, [r5, #4]
 800c87e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800c880:	6920      	ldr	r0, [r4, #16]
 800c882:	f7ff ff7b 	bl	800c77c <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800c886:	4440      	add	r0, r8
 800c888:	e7cc      	b.n	800c824 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 800c88a:	bf00      	nop
 800c88c:	20012664 	.word	0x20012664

0800c890 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 800c890:	4b07      	ldr	r3, [pc, #28]	@ (800c8b0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	2b01      	cmp	r3, #1
 800c896:	d109      	bne.n	800c8ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 800c898:	f9b1 3000 	ldrsh.w	r3, [r1]
 800c89c:	f9b0 2000 	ldrsh.w	r2, [r0]
 800c8a0:	8003      	strh	r3, [r0, #0]
 800c8a2:	4b04      	ldr	r3, [pc, #16]	@ (800c8b4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 800c8a4:	881b      	ldrh	r3, [r3, #0]
 800c8a6:	3b01      	subs	r3, #1
 800c8a8:	1a9b      	subs	r3, r3, r2
 800c8aa:	800b      	strh	r3, [r1, #0]
 800c8ac:	4770      	bx	lr
 800c8ae:	bf00      	nop
 800c8b0:	20012650 	.word	0x20012650
 800c8b4:	2001264c 	.word	0x2001264c

0800c8b8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 800c8b8:	b510      	push	{r4, lr}
 800c8ba:	4b07      	ldr	r3, [pc, #28]	@ (800c8d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 800c8bc:	781b      	ldrb	r3, [r3, #0]
 800c8be:	2b01      	cmp	r3, #1
 800c8c0:	d108      	bne.n	800c8d4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 800c8c2:	4b06      	ldr	r3, [pc, #24]	@ (800c8dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 800c8c4:	880c      	ldrh	r4, [r1, #0]
 800c8c6:	881b      	ldrh	r3, [r3, #0]
 800c8c8:	f9b0 2000 	ldrsh.w	r2, [r0]
 800c8cc:	3b01      	subs	r3, #1
 800c8ce:	1b1b      	subs	r3, r3, r4
 800c8d0:	8003      	strh	r3, [r0, #0]
 800c8d2:	800a      	strh	r2, [r1, #0]
 800c8d4:	bd10      	pop	{r4, pc}
 800c8d6:	bf00      	nop
 800c8d8:	20012650 	.word	0x20012650
 800c8dc:	2001264c 	.word	0x2001264c

0800c8e0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 800c8e0:	b510      	push	{r4, lr}
 800c8e2:	4b0a      	ldr	r3, [pc, #40]	@ (800c90c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 800c8e4:	781b      	ldrb	r3, [r3, #0]
 800c8e6:	2b01      	cmp	r3, #1
 800c8e8:	d10e      	bne.n	800c908 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 800c8ea:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800c8ee:	8843      	ldrh	r3, [r0, #2]
 800c8f0:	f9b0 4000 	ldrsh.w	r4, [r0]
 800c8f4:	8044      	strh	r4, [r0, #2]
 800c8f6:	18ca      	adds	r2, r1, r3
 800c8f8:	4b05      	ldr	r3, [pc, #20]	@ (800c910 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 800c8fa:	881b      	ldrh	r3, [r3, #0]
 800c8fc:	1a9b      	subs	r3, r3, r2
 800c8fe:	8003      	strh	r3, [r0, #0]
 800c900:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800c904:	80c3      	strh	r3, [r0, #6]
 800c906:	8081      	strh	r1, [r0, #4]
 800c908:	bd10      	pop	{r4, pc}
 800c90a:	bf00      	nop
 800c90c:	20012650 	.word	0x20012650
 800c910:	2001264c 	.word	0x2001264c

0800c914 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 800c914:	4b08      	ldr	r3, [pc, #32]	@ (800c938 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 800c916:	781b      	ldrb	r3, [r3, #0]
 800c918:	2b01      	cmp	r3, #1
 800c91a:	d10c      	bne.n	800c936 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 800c91c:	8803      	ldrh	r3, [r0, #0]
 800c91e:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800c922:	8842      	ldrh	r2, [r0, #2]
 800c924:	8002      	strh	r2, [r0, #0]
 800c926:	185a      	adds	r2, r3, r1
 800c928:	4b04      	ldr	r3, [pc, #16]	@ (800c93c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 800c92a:	881b      	ldrh	r3, [r3, #0]
 800c92c:	1a9b      	subs	r3, r3, r2
 800c92e:	8043      	strh	r3, [r0, #2]
 800c930:	88c3      	ldrh	r3, [r0, #6]
 800c932:	8083      	strh	r3, [r0, #4]
 800c934:	80c1      	strh	r1, [r0, #6]
 800c936:	4770      	bx	lr
 800c938:	20012650 	.word	0x20012650
 800c93c:	2001264c 	.word	0x2001264c

0800c940 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 800c940:	b510      	push	{r4, lr}
 800c942:	4b07      	ldr	r3, [pc, #28]	@ (800c960 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	2b01      	cmp	r3, #1
 800c948:	d108      	bne.n	800c95c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 800c94a:	f9b1 3000 	ldrsh.w	r3, [r1]
 800c94e:	f9b0 4000 	ldrsh.w	r4, [r0]
 800c952:	8003      	strh	r3, [r0, #0]
 800c954:	8893      	ldrh	r3, [r2, #4]
 800c956:	3b01      	subs	r3, #1
 800c958:	1b1b      	subs	r3, r3, r4
 800c95a:	800b      	strh	r3, [r1, #0]
 800c95c:	bd10      	pop	{r4, pc}
 800c95e:	bf00      	nop
 800c960:	20012650 	.word	0x20012650

0800c964 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 800c964:	b510      	push	{r4, lr}
 800c966:	4b0a      	ldr	r3, [pc, #40]	@ (800c990 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	2b01      	cmp	r3, #1
 800c96c:	460a      	mov	r2, r1
 800c96e:	d10d      	bne.n	800c98c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 800c970:	8881      	ldrh	r1, [r0, #4]
 800c972:	8803      	ldrh	r3, [r0, #0]
 800c974:	440b      	add	r3, r1
 800c976:	4601      	mov	r1, r0
 800c978:	3b01      	subs	r3, #1
 800c97a:	f821 3b02 	strh.w	r3, [r1], #2
 800c97e:	f7ff ffdf 	bl	800c940 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800c982:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800c986:	88c2      	ldrh	r2, [r0, #6]
 800c988:	8082      	strh	r2, [r0, #4]
 800c98a:	80c3      	strh	r3, [r0, #6]
 800c98c:	bd10      	pop	{r4, pc}
 800c98e:	bf00      	nop
 800c990:	20012650 	.word	0x20012650

0800c994 <_ZN8touchgfx11Application13requestRedrawEv>:
 800c994:	4b06      	ldr	r3, [pc, #24]	@ (800c9b0 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 800c996:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c99a:	4b06      	ldr	r3, [pc, #24]	@ (800c9b4 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 800c99c:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 800c9a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c9a4:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 800c9a8:	2100      	movs	r1, #0
 800c9aa:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 800c9ae:	4770      	bx	lr
 800c9b0:	2001264c 	.word	0x2001264c
 800c9b4:	2001264e 	.word	0x2001264e

0800c9b8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 800c9b8:	4b03      	ldr	r3, [pc, #12]	@ (800c9c8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 800c9ba:	6818      	ldr	r0, [r3, #0]
 800c9bc:	b110      	cbz	r0, 800c9c4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 800c9be:	6803      	ldr	r3, [r0, #0]
 800c9c0:	699b      	ldr	r3, [r3, #24]
 800c9c2:	4718      	bx	r3
 800c9c4:	4770      	bx	lr
 800c9c6:	bf00      	nop
 800c9c8:	20012694 	.word	0x20012694

0800c9cc <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 800c9cc:	4770      	bx	lr
	...

0800c9d0 <_ZN8touchgfx11Application4drawEv>:
 800c9d0:	b507      	push	{r0, r1, r2, lr}
 800c9d2:	4b09      	ldr	r3, [pc, #36]	@ (800c9f8 <_ZN8touchgfx11Application4drawEv+0x28>)
 800c9d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c9d8:	4b08      	ldr	r3, [pc, #32]	@ (800c9fc <_ZN8touchgfx11Application4drawEv+0x2c>)
 800c9da:	f8ad 2004 	strh.w	r2, [sp, #4]
 800c9de:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c9e2:	f8ad 3006 	strh.w	r3, [sp, #6]
 800c9e6:	6803      	ldr	r3, [r0, #0]
 800c9e8:	2100      	movs	r1, #0
 800c9ea:	9100      	str	r1, [sp, #0]
 800c9ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c9ee:	4669      	mov	r1, sp
 800c9f0:	4798      	blx	r3
 800c9f2:	b003      	add	sp, #12
 800c9f4:	f85d fb04 	ldr.w	pc, [sp], #4
 800c9f8:	2001264c 	.word	0x2001264c
 800c9fc:	2001264e 	.word	0x2001264e

0800ca00 <_ZN8touchgfx11Application10invalidateEv>:
 800ca00:	4b09      	ldr	r3, [pc, #36]	@ (800ca28 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 800ca02:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ca06:	4b09      	ldr	r3, [pc, #36]	@ (800ca2c <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 800ca08:	b082      	sub	sp, #8
 800ca0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca0e:	f8ad 2004 	strh.w	r2, [sp, #4]
 800ca12:	2100      	movs	r1, #0
 800ca14:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ca18:	9100      	str	r1, [sp, #0]
 800ca1a:	6803      	ldr	r3, [r0, #0]
 800ca1c:	aa02      	add	r2, sp, #8
 800ca1e:	e912 0006 	ldmdb	r2, {r1, r2}
 800ca22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca24:	b002      	add	sp, #8
 800ca26:	4718      	bx	r3
 800ca28:	2001264c 	.word	0x2001264c
 800ca2c:	2001264e 	.word	0x2001264e

0800ca30 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 800ca30:	4b03      	ldr	r3, [pc, #12]	@ (800ca40 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 800ca32:	6818      	ldr	r0, [r3, #0]
 800ca34:	b110      	cbz	r0, 800ca3c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 800ca36:	6803      	ldr	r3, [r0, #0]
 800ca38:	69db      	ldr	r3, [r3, #28]
 800ca3a:	4718      	bx	r3
 800ca3c:	4770      	bx	lr
 800ca3e:	bf00      	nop
 800ca40:	20012694 	.word	0x20012694

0800ca44 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 800ca44:	4b03      	ldr	r3, [pc, #12]	@ (800ca54 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 800ca46:	6818      	ldr	r0, [r3, #0]
 800ca48:	b110      	cbz	r0, 800ca50 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 800ca4a:	6803      	ldr	r3, [r0, #0]
 800ca4c:	6a1b      	ldr	r3, [r3, #32]
 800ca4e:	4718      	bx	r3
 800ca50:	4770      	bx	lr
 800ca52:	bf00      	nop
 800ca54:	20012694 	.word	0x20012694

0800ca58 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 800ca58:	2300      	movs	r3, #0
 800ca5a:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 800ca5e:	4770      	bx	lr

0800ca60 <_ZN8touchgfx11Application14handleKeyEventEh>:
 800ca60:	4b03      	ldr	r3, [pc, #12]	@ (800ca70 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 800ca62:	6818      	ldr	r0, [r3, #0]
 800ca64:	b110      	cbz	r0, 800ca6c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 800ca66:	6803      	ldr	r3, [r0, #0]
 800ca68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca6a:	4718      	bx	r3
 800ca6c:	4770      	bx	lr
 800ca6e:	bf00      	nop
 800ca70:	20012694 	.word	0x20012694

0800ca74 <_ZN8touchgfx11ApplicationD1Ev>:
 800ca74:	4770      	bx	lr

0800ca76 <_ZN8touchgfx11ApplicationD0Ev>:
 800ca76:	b510      	push	{r4, lr}
 800ca78:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 800ca7c:	4604      	mov	r4, r0
 800ca7e:	f006 fc4b 	bl	8013318 <_ZdlPvj>
 800ca82:	4620      	mov	r0, r4
 800ca84:	bd10      	pop	{r4, pc}

0800ca86 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800ca86:	b510      	push	{r4, lr}
 800ca88:	f9b1 4000 	ldrsh.w	r4, [r1]
 800ca8c:	888a      	ldrh	r2, [r1, #4]
 800ca8e:	f9b0 3000 	ldrsh.w	r3, [r0]
 800ca92:	4422      	add	r2, r4
 800ca94:	b212      	sxth	r2, r2
 800ca96:	4293      	cmp	r3, r2
 800ca98:	da15      	bge.n	800cac6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800ca9a:	8882      	ldrh	r2, [r0, #4]
 800ca9c:	4413      	add	r3, r2
 800ca9e:	b21b      	sxth	r3, r3
 800caa0:	429c      	cmp	r4, r3
 800caa2:	da10      	bge.n	800cac6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800caa4:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800caa8:	88c9      	ldrh	r1, [r1, #6]
 800caaa:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800caae:	4419      	add	r1, r3
 800cab0:	b209      	sxth	r1, r1
 800cab2:	428a      	cmp	r2, r1
 800cab4:	da07      	bge.n	800cac6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800cab6:	88c0      	ldrh	r0, [r0, #6]
 800cab8:	4410      	add	r0, r2
 800caba:	b200      	sxth	r0, r0
 800cabc:	4283      	cmp	r3, r0
 800cabe:	bfac      	ite	ge
 800cac0:	2000      	movge	r0, #0
 800cac2:	2001      	movlt	r0, #1
 800cac4:	bd10      	pop	{r4, pc}
 800cac6:	2000      	movs	r0, #0
 800cac8:	e7fc      	b.n	800cac4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0800caca <_ZN8touchgfx4Rect10restrictToEss>:
 800caca:	f9b0 3000 	ldrsh.w	r3, [r0]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	b510      	push	{r4, lr}
 800cad2:	da04      	bge.n	800cade <_ZN8touchgfx4Rect10restrictToEss+0x14>
 800cad4:	8884      	ldrh	r4, [r0, #4]
 800cad6:	4423      	add	r3, r4
 800cad8:	8083      	strh	r3, [r0, #4]
 800cada:	2300      	movs	r3, #0
 800cadc:	8003      	strh	r3, [r0, #0]
 800cade:	f9b0 4000 	ldrsh.w	r4, [r0]
 800cae2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800cae6:	1b09      	subs	r1, r1, r4
 800cae8:	428b      	cmp	r3, r1
 800caea:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800caee:	bfc8      	it	gt
 800caf0:	8081      	strhgt	r1, [r0, #4]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	da04      	bge.n	800cb00 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 800caf6:	88c1      	ldrh	r1, [r0, #6]
 800caf8:	440b      	add	r3, r1
 800cafa:	80c3      	strh	r3, [r0, #6]
 800cafc:	2300      	movs	r3, #0
 800cafe:	8043      	strh	r3, [r0, #2]
 800cb00:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800cb04:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800cb08:	1a52      	subs	r2, r2, r1
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	bfc8      	it	gt
 800cb0e:	80c2      	strhgt	r2, [r0, #6]
 800cb10:	bd10      	pop	{r4, pc}
	...

0800cb14 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 800cb14:	b510      	push	{r4, lr}
 800cb16:	4b10      	ldr	r3, [pc, #64]	@ (800cb58 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 800cb18:	f9b3 2000 	ldrsh.w	r2, [r3]
 800cb1c:	4b0f      	ldr	r3, [pc, #60]	@ (800cb5c <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 800cb1e:	460c      	mov	r4, r1
 800cb20:	4620      	mov	r0, r4
 800cb22:	f9b3 1000 	ldrsh.w	r1, [r3]
 800cb26:	f7ff ffd0 	bl	800caca <_ZN8touchgfx4Rect10restrictToEss>
 800cb2a:	4b0d      	ldr	r3, [pc, #52]	@ (800cb60 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 800cb2c:	6818      	ldr	r0, [r3, #0]
 800cb2e:	b190      	cbz	r0, 800cb56 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 800cb30:	6803      	ldr	r3, [r0, #0]
 800cb32:	4621      	mov	r1, r4
 800cb34:	689b      	ldr	r3, [r3, #8]
 800cb36:	4798      	blx	r3
 800cb38:	4b0a      	ldr	r3, [pc, #40]	@ (800cb64 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 800cb3a:	6818      	ldr	r0, [r3, #0]
 800cb3c:	b118      	cbz	r0, 800cb46 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 800cb3e:	6803      	ldr	r3, [r0, #0]
 800cb40:	4621      	mov	r1, r4
 800cb42:	689b      	ldr	r3, [r3, #8]
 800cb44:	4798      	blx	r3
 800cb46:	4b08      	ldr	r3, [pc, #32]	@ (800cb68 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 800cb48:	6818      	ldr	r0, [r3, #0]
 800cb4a:	6803      	ldr	r3, [r0, #0]
 800cb4c:	4621      	mov	r1, r4
 800cb4e:	69db      	ldr	r3, [r3, #28]
 800cb50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb54:	4718      	bx	r3
 800cb56:	bd10      	pop	{r4, pc}
 800cb58:	2001264e 	.word	0x2001264e
 800cb5c:	2001264c 	.word	0x2001264c
 800cb60:	20012694 	.word	0x20012694
 800cb64:	20012690 	.word	0x20012690
 800cb68:	20012658 	.word	0x20012658

0800cb6c <_ZNK8touchgfx4Rect8includesERKS0_>:
 800cb6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb6e:	4606      	mov	r6, r0
 800cb70:	4608      	mov	r0, r1
 800cb72:	460f      	mov	r7, r1
 800cb74:	f7fc fa35 	bl	8008fe2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800cb78:	b9e8      	cbnz	r0, 800cbb6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800cb7a:	f9b7 5000 	ldrsh.w	r5, [r7]
 800cb7e:	f9b6 4000 	ldrsh.w	r4, [r6]
 800cb82:	42a5      	cmp	r5, r4
 800cb84:	db17      	blt.n	800cbb6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800cb86:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800cb8a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	db11      	blt.n	800cbb6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800cb92:	88b9      	ldrh	r1, [r7, #4]
 800cb94:	440d      	add	r5, r1
 800cb96:	88b1      	ldrh	r1, [r6, #4]
 800cb98:	440c      	add	r4, r1
 800cb9a:	b22d      	sxth	r5, r5
 800cb9c:	b224      	sxth	r4, r4
 800cb9e:	42a5      	cmp	r5, r4
 800cba0:	dc09      	bgt.n	800cbb6 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800cba2:	88f8      	ldrh	r0, [r7, #6]
 800cba4:	4410      	add	r0, r2
 800cba6:	88f2      	ldrh	r2, [r6, #6]
 800cba8:	4413      	add	r3, r2
 800cbaa:	b200      	sxth	r0, r0
 800cbac:	b21b      	sxth	r3, r3
 800cbae:	4298      	cmp	r0, r3
 800cbb0:	bfcc      	ite	gt
 800cbb2:	2000      	movgt	r0, #0
 800cbb4:	2001      	movle	r0, #1
 800cbb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cbb8 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800cbb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbba:	4604      	mov	r4, r0
 800cbbc:	4608      	mov	r0, r1
 800cbbe:	460d      	mov	r5, r1
 800cbc0:	f7fc fa0f 	bl	8008fe2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800cbc4:	b978      	cbnz	r0, 800cbe6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800cbc6:	4620      	mov	r0, r4
 800cbc8:	f7fc fa0b 	bl	8008fe2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800cbcc:	f9b5 6000 	ldrsh.w	r6, [r5]
 800cbd0:	b150      	cbz	r0, 800cbe8 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800cbd2:	8026      	strh	r6, [r4, #0]
 800cbd4:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800cbd8:	8063      	strh	r3, [r4, #2]
 800cbda:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800cbde:	80a3      	strh	r3, [r4, #4]
 800cbe0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800cbe4:	80e3      	strh	r3, [r4, #6]
 800cbe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbe8:	f9b4 1000 	ldrsh.w	r1, [r4]
 800cbec:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800cbf0:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800cbf4:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800cbf8:	88ed      	ldrh	r5, [r5, #6]
 800cbfa:	42b1      	cmp	r1, r6
 800cbfc:	460f      	mov	r7, r1
 800cbfe:	bfa8      	it	ge
 800cc00:	4637      	movge	r7, r6
 800cc02:	4293      	cmp	r3, r2
 800cc04:	4618      	mov	r0, r3
 800cc06:	4466      	add	r6, ip
 800cc08:	bfa8      	it	ge
 800cc0a:	4610      	movge	r0, r2
 800cc0c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800cc10:	8027      	strh	r7, [r4, #0]
 800cc12:	442a      	add	r2, r5
 800cc14:	88e5      	ldrh	r5, [r4, #6]
 800cc16:	8060      	strh	r0, [r4, #2]
 800cc18:	4461      	add	r1, ip
 800cc1a:	442b      	add	r3, r5
 800cc1c:	b236      	sxth	r6, r6
 800cc1e:	b209      	sxth	r1, r1
 800cc20:	b212      	sxth	r2, r2
 800cc22:	b21b      	sxth	r3, r3
 800cc24:	428e      	cmp	r6, r1
 800cc26:	bfac      	ite	ge
 800cc28:	ebc7 0106 	rsbge	r1, r7, r6
 800cc2c:	ebc7 0101 	rsblt	r1, r7, r1
 800cc30:	429a      	cmp	r2, r3
 800cc32:	bfac      	ite	ge
 800cc34:	ebc0 0202 	rsbge	r2, r0, r2
 800cc38:	ebc0 0203 	rsblt	r2, r0, r3
 800cc3c:	80a1      	strh	r1, [r4, #4]
 800cc3e:	80e2      	strh	r2, [r4, #6]
 800cc40:	e7d1      	b.n	800cbe6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0800cc44 <_ZN8touchgfx11Application11getInstanceEv>:
 800cc44:	4b01      	ldr	r3, [pc, #4]	@ (800cc4c <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 800cc46:	6818      	ldr	r0, [r3, #0]
 800cc48:	4770      	bx	lr
 800cc4a:	bf00      	nop
 800cc4c:	200126a4 	.word	0x200126a4

0800cc50 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv>:
 800cc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc52:	4b10      	ldr	r3, [pc, #64]	@ (800cc94 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x44>)
 800cc54:	781b      	ldrb	r3, [r3, #0]
 800cc56:	4605      	mov	r5, r0
 800cc58:	b1d3      	cbz	r3, 800cc90 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x40>
 800cc5a:	4b0f      	ldr	r3, [pc, #60]	@ (800cc98 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x48>)
 800cc5c:	4f0f      	ldr	r7, [pc, #60]	@ (800cc9c <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x4c>)
 800cc5e:	881c      	ldrh	r4, [r3, #0]
 800cc60:	f100 06ee 	add.w	r6, r0, #238	@ 0xee
 800cc64:	f8b5 312e 	ldrh.w	r3, [r5, #302]	@ 0x12e
 800cc68:	42a3      	cmp	r3, r4
 800cc6a:	d90e      	bls.n	800cc8a <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x3a>
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800cc72:	b10a      	cbz	r2, 800cc78 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x28>
 800cc74:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800cc76:	b900      	cbnz	r0, 800cc7a <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x2a>
 800cc78:	6898      	ldr	r0, [r3, #8]
 800cc7a:	6803      	ldr	r3, [r0, #0]
 800cc7c:	eb06 01c4 	add.w	r1, r6, r4, lsl #3
 800cc80:	69db      	ldr	r3, [r3, #28]
 800cc82:	3401      	adds	r4, #1
 800cc84:	4798      	blx	r3
 800cc86:	b2a4      	uxth	r4, r4
 800cc88:	e7ec      	b.n	800cc64 <_ZN8touchgfx11Application41copyInvalidatedAreasFromTFTToClientBufferEv+0x14>
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	f8a5 312e 	strh.w	r3, [r5, #302]	@ 0x12e
 800cc90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc92:	bf00      	nop
 800cc94:	20012656 	.word	0x20012656
 800cc98:	20000084 	.word	0x20000084
 800cc9c:	20012658 	.word	0x20012658

0800cca0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 800cca0:	b510      	push	{r4, lr}
 800cca2:	2300      	movs	r3, #0
 800cca4:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 800cca8:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 800ccac:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 800ccb0:	4604      	mov	r4, r0
 800ccb2:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 800ccb6:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 800ccba:	429a      	cmp	r2, r3
 800ccbc:	d90e      	bls.n	800ccdc <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 800ccbe:	18e2      	adds	r2, r4, r3
 800ccc0:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 800ccc4:	b122      	cbz	r2, 800ccd0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 800ccc6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800ccca:	6803      	ldr	r3, [r0, #0]
 800cccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ccce:	4798      	blx	r3
 800ccd0:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 800ccd4:	3301      	adds	r3, #1
 800ccd6:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 800ccda:	e7ea      	b.n	800ccb2 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 800ccdc:	bd10      	pop	{r4, pc}

0800ccde <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 800ccde:	2300      	movs	r3, #0
 800cce0:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 800cce4:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 800cce8:	30a4      	adds	r0, #164	@ 0xa4
 800ccea:	f802 3b01 	strb.w	r3, [r2], #1
 800ccee:	4282      	cmp	r2, r0
 800ccf0:	d1fb      	bne.n	800ccea <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 800ccf2:	4770      	bx	lr

0800ccf4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 800ccf4:	b570      	push	{r4, r5, r6, lr}
 800ccf6:	4c0b      	ldr	r4, [pc, #44]	@ (800cd24 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 800ccf8:	4605      	mov	r5, r0
 800ccfa:	6820      	ldr	r0, [r4, #0]
 800ccfc:	460e      	mov	r6, r1
 800ccfe:	b110      	cbz	r0, 800cd06 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 800cd00:	6803      	ldr	r3, [r0, #0]
 800cd02:	695b      	ldr	r3, [r3, #20]
 800cd04:	4798      	blx	r3
 800cd06:	1d28      	adds	r0, r5, #4
 800cd08:	f7ff ffe9 	bl	800ccde <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800cd0c:	6026      	str	r6, [r4, #0]
 800cd0e:	6833      	ldr	r3, [r6, #0]
 800cd10:	4630      	mov	r0, r6
 800cd12:	68db      	ldr	r3, [r3, #12]
 800cd14:	4798      	blx	r3
 800cd16:	682b      	ldr	r3, [r5, #0]
 800cd18:	4628      	mov	r0, r5
 800cd1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cd20:	4718      	bx	r3
 800cd22:	bf00      	nop
 800cd24:	20012694 	.word	0x20012694

0800cd28 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 800cd28:	2300      	movs	r3, #0
 800cd2a:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 800cd2e:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 800cd32:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd34:	461a      	mov	r2, r3
 800cd36:	461c      	mov	r4, r3
 800cd38:	461d      	mov	r5, r3
 800cd3a:	459c      	cmp	ip, r3
 800cd3c:	dd1a      	ble.n	800cd74 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 800cd3e:	18c6      	adds	r6, r0, r3
 800cd40:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 800cd44:	b16e      	cbz	r6, 800cd62 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 800cd46:	429a      	cmp	r2, r3
 800cd48:	d008      	beq.n	800cd5c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 800cd4a:	fa1f fe82 	uxth.w	lr, r2
 800cd4e:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 800cd52:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 800cd56:	1887      	adds	r7, r0, r2
 800cd58:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 800cd5c:	3201      	adds	r2, #1
 800cd5e:	3301      	adds	r3, #1
 800cd60:	e7eb      	b.n	800cd3a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 800cd62:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 800cd66:	4299      	cmp	r1, r3
 800cd68:	bfa8      	it	ge
 800cd6a:	3501      	addge	r5, #1
 800cd6c:	429e      	cmp	r6, r3
 800cd6e:	bfc8      	it	gt
 800cd70:	3401      	addgt	r4, #1
 800cd72:	e7f4      	b.n	800cd5e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 800cd74:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 800cd78:	1b49      	subs	r1, r1, r5
 800cd7a:	1b1b      	subs	r3, r3, r4
 800cd7c:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 800cd80:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 800cd84:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 800cd88:	4293      	cmp	r3, r2
 800cd8a:	dd03      	ble.n	800cd94 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 800cd8c:	3b01      	subs	r3, #1
 800cd8e:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 800cd92:	e7f7      	b.n	800cd84 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 800cd94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800cd98 <_ZN8touchgfx11Application15handleTickEventEv>:
 800cd98:	b570      	push	{r4, r5, r6, lr}
 800cd9a:	4d16      	ldr	r5, [pc, #88]	@ (800cdf4 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 800cd9c:	4604      	mov	r4, r0
 800cd9e:	6828      	ldr	r0, [r5, #0]
 800cda0:	b140      	cbz	r0, 800cdb4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800cda2:	7a03      	ldrb	r3, [r0, #8]
 800cda4:	b933      	cbnz	r3, 800cdb4 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800cda6:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 800cdaa:	6803      	ldr	r3, [r0, #0]
 800cdac:	689b      	ldr	r3, [r3, #8]
 800cdae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cdb2:	4718      	bx	r3
 800cdb4:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 800cdb8:	4e0f      	ldr	r6, [pc, #60]	@ (800cdf8 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 800cdba:	b973      	cbnz	r3, 800cdda <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800cdbc:	b168      	cbz	r0, 800cdda <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800cdbe:	7a03      	ldrb	r3, [r0, #8]
 800cdc0:	b15b      	cbz	r3, 800cdda <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800cdc2:	6830      	ldr	r0, [r6, #0]
 800cdc4:	b110      	cbz	r0, 800cdcc <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 800cdc6:	6803      	ldr	r3, [r0, #0]
 800cdc8:	691b      	ldr	r3, [r3, #16]
 800cdca:	4798      	blx	r3
 800cdcc:	6828      	ldr	r0, [r5, #0]
 800cdce:	6803      	ldr	r3, [r0, #0]
 800cdd0:	68db      	ldr	r3, [r3, #12]
 800cdd2:	4798      	blx	r3
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 800cdda:	3404      	adds	r4, #4
 800cddc:	4620      	mov	r0, r4
 800cdde:	f7ff ff5f 	bl	800cca0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 800cde2:	4620      	mov	r0, r4
 800cde4:	f7ff ffa0 	bl	800cd28 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 800cde8:	6830      	ldr	r0, [r6, #0]
 800cdea:	b110      	cbz	r0, 800cdf2 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 800cdec:	6803      	ldr	r3, [r0, #0]
 800cdee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdf0:	e7dd      	b.n	800cdae <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 800cdf2:	bd70      	pop	{r4, r5, r6, pc}
 800cdf4:	20012698 	.word	0x20012698
 800cdf8:	20012694 	.word	0x20012694

0800cdfc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 800ce02:	2200      	movs	r2, #0
 800ce04:	801a      	strh	r2, [r3, #0]
 800ce06:	805a      	strh	r2, [r3, #2]
 800ce08:	809a      	strh	r2, [r3, #4]
 800ce0a:	80da      	strh	r2, [r3, #6]
 800ce0c:	3308      	adds	r3, #8
 800ce0e:	428b      	cmp	r3, r1
 800ce10:	d1f8      	bne.n	800ce04 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 800ce12:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 800ce16:	4770      	bx	lr

0800ce18 <_ZN8touchgfx11ApplicationC1Ev>:
 800ce18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce1a:	4606      	mov	r6, r0
 800ce1c:	4b1c      	ldr	r3, [pc, #112]	@ (800ce90 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 800ce1e:	f846 3b04 	str.w	r3, [r6], #4
 800ce22:	4604      	mov	r4, r0
 800ce24:	2500      	movs	r5, #0
 800ce26:	22a8      	movs	r2, #168	@ 0xa8
 800ce28:	2100      	movs	r1, #0
 800ce2a:	4630      	mov	r0, r6
 800ce2c:	f006 fca9 	bl	8013782 <memset>
 800ce30:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 800ce34:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 800ce38:	f7ff ffe0 	bl	800cdfc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800ce3c:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 800ce40:	f7ff ffdc 	bl	800cdfc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800ce44:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 800ce48:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 800ce4c:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 800ce50:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 800ce54:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 800ce58:	490e      	ldr	r1, [pc, #56]	@ (800ce94 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 800ce5a:	480f      	ldr	r0, [pc, #60]	@ (800ce98 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 800ce5c:	4f0f      	ldr	r7, [pc, #60]	@ (800ce9c <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 800ce5e:	f006 f913 	bl	8013088 <CRC_Lock>
 800ce62:	4b0f      	ldr	r3, [pc, #60]	@ (800cea0 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 800ce64:	b158      	cbz	r0, 800ce7e <_ZN8touchgfx11ApplicationC1Ev+0x66>
 800ce66:	801d      	strh	r5, [r3, #0]
 800ce68:	4a0e      	ldr	r2, [pc, #56]	@ (800cea4 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	6013      	str	r3, [r2, #0]
 800ce6e:	4a0e      	ldr	r2, [pc, #56]	@ (800cea8 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 800ce70:	603b      	str	r3, [r7, #0]
 800ce72:	4630      	mov	r0, r6
 800ce74:	6013      	str	r3, [r2, #0]
 800ce76:	f7ff ff32 	bl	800ccde <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800ce7a:	4620      	mov	r0, r4
 800ce7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ce82:	2002      	movs	r0, #2
 800ce84:	801a      	strh	r2, [r3, #0]
 800ce86:	6038      	str	r0, [r7, #0]
 800ce88:	f001 fa36 	bl	800e2f8 <_ZN8touchgfx6Screen4drawEv>
 800ce8c:	e7ec      	b.n	800ce68 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 800ce8e:	bf00      	nop
 800ce90:	08015bc4 	.word	0x08015bc4
 800ce94:	b5e8b5cd 	.word	0xb5e8b5cd
 800ce98:	f407a5c2 	.word	0xf407a5c2
 800ce9c:	20012694 	.word	0x20012694
 800cea0:	20000084 	.word	0x20000084
 800cea4:	200126a4 	.word	0x200126a4
 800cea8:	20012698 	.word	0x20012698

0800ceac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 800ceac:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 800ceb0:	3b01      	subs	r3, #1
 800ceb2:	b29b      	uxth	r3, r3
 800ceb4:	428b      	cmp	r3, r1
 800ceb6:	b510      	push	{r4, lr}
 800ceb8:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 800cebc:	d908      	bls.n	800ced0 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 800cebe:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800cec2:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 800cec6:	681a      	ldr	r2, [r3, #0]
 800cec8:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 800cecc:	685a      	ldr	r2, [r3, #4]
 800cece:	6062      	str	r2, [r4, #4]
 800ced0:	bd10      	pop	{r4, pc}
	...

0800ced4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 800ced4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ced8:	4b8f      	ldr	r3, [pc, #572]	@ (800d118 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 800ceda:	b08f      	sub	sp, #60	@ 0x3c
 800cedc:	ac0a      	add	r4, sp, #40	@ 0x28
 800cede:	e884 0006 	stmia.w	r4, {r1, r2}
 800cee2:	f9b3 2000 	ldrsh.w	r2, [r3]
 800cee6:	4b8d      	ldr	r3, [pc, #564]	@ (800d11c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 800cee8:	4683      	mov	fp, r0
 800ceea:	f9b3 1000 	ldrsh.w	r1, [r3]
 800ceee:	4620      	mov	r0, r4
 800cef0:	f7ff fdeb 	bl	800caca <_ZN8touchgfx4Rect10restrictToEss>
 800cef4:	4620      	mov	r0, r4
 800cef6:	f7fc f874 	bl	8008fe2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800cefa:	2800      	cmp	r0, #0
 800cefc:	d16a      	bne.n	800cfd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800cefe:	9403      	str	r4, [sp, #12]
 800cf00:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 800cf04:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 800cf08:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 800cf0c:	35a4      	adds	r5, #164	@ 0xa4
 800cf0e:	9301      	str	r3, [sp, #4]
 800cf10:	b15c      	cbz	r4, 800cf2a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 800cf12:	4629      	mov	r1, r5
 800cf14:	9803      	ldr	r0, [sp, #12]
 800cf16:	f7ff fe29 	bl	800cb6c <_ZNK8touchgfx4Rect8includesERKS0_>
 800cf1a:	3c01      	subs	r4, #1
 800cf1c:	b118      	cbz	r0, 800cf26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 800cf1e:	b2a1      	uxth	r1, r4
 800cf20:	9801      	ldr	r0, [sp, #4]
 800cf22:	f7ff ffc3 	bl	800ceac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800cf26:	3d08      	subs	r5, #8
 800cf28:	e7f2      	b.n	800cf10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 800cf2a:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 800cf2e:	f8cd a010 	str.w	sl, [sp, #16]
 800cf32:	f10a 33ff 	add.w	r3, sl, #4294967295
 800cf36:	9302      	str	r3, [sp, #8]
 800cf38:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800cf3c:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 800cf40:	9306      	str	r3, [sp, #24]
 800cf42:	445c      	add	r4, fp
 800cf44:	2500      	movs	r5, #0
 800cf46:	4626      	mov	r6, r4
 800cf48:	f8cd a014 	str.w	sl, [sp, #20]
 800cf4c:	462f      	mov	r7, r5
 800cf4e:	9b05      	ldr	r3, [sp, #20]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d073      	beq.n	800d03c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 800cf54:	9903      	ldr	r1, [sp, #12]
 800cf56:	4630      	mov	r0, r6
 800cf58:	f7ff fd95 	bl	800ca86 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800cf5c:	b350      	cbz	r0, 800cfb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800cf5e:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 800cf62:	f9b6 c000 	ldrsh.w	ip, [r6]
 800cf66:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 800cf6a:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 800cf6e:	45e6      	cmp	lr, ip
 800cf70:	db33      	blt.n	800cfda <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800cf72:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800cf76:	88b3      	ldrh	r3, [r6, #4]
 800cf78:	4472      	add	r2, lr
 800cf7a:	4463      	add	r3, ip
 800cf7c:	b212      	sxth	r2, r2
 800cf7e:	b21b      	sxth	r3, r3
 800cf80:	429a      	cmp	r2, r3
 800cf82:	dc2a      	bgt.n	800cfda <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 800cf84:	88f3      	ldrh	r3, [r6, #6]
 800cf86:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 800cf8a:	fa1f f289 	uxth.w	r2, r9
 800cf8e:	4413      	add	r3, r2
 800cf90:	b29b      	uxth	r3, r3
 800cf92:	45c8      	cmp	r8, r9
 800cf94:	fa1f fc88 	uxth.w	ip, r8
 800cf98:	fa0f fe83 	sxth.w	lr, r3
 800cf9c:	db0f      	blt.n	800cfbe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 800cf9e:	eba3 030c 	sub.w	r3, r3, ip
 800cfa2:	1ac9      	subs	r1, r1, r3
 800cfa4:	b209      	sxth	r1, r1
 800cfa6:	2900      	cmp	r1, #0
 800cfa8:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800cfac:	dd12      	ble.n	800cfd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800cfae:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 800cfb2:	4605      	mov	r5, r0
 800cfb4:	9b05      	ldr	r3, [sp, #20]
 800cfb6:	3b01      	subs	r3, #1
 800cfb8:	9305      	str	r3, [sp, #20]
 800cfba:	3e08      	subs	r6, #8
 800cfbc:	e7c7      	b.n	800cf4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 800cfbe:	4461      	add	r1, ip
 800cfc0:	b209      	sxth	r1, r1
 800cfc2:	4571      	cmp	r1, lr
 800cfc4:	dc38      	bgt.n	800d038 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800cfc6:	eba2 020c 	sub.w	r2, r2, ip
 800cfca:	b212      	sxth	r2, r2
 800cfcc:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 800cfd0:	2a00      	cmp	r2, #0
 800cfd2:	dcee      	bgt.n	800cfb2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800cfd4:	b00f      	add	sp, #60	@ 0x3c
 800cfd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfda:	45c8      	cmp	r8, r9
 800cfdc:	db2c      	blt.n	800d038 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800cfde:	88f3      	ldrh	r3, [r6, #6]
 800cfe0:	4499      	add	r9, r3
 800cfe2:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 800cfe6:	4498      	add	r8, r3
 800cfe8:	fa0f f989 	sxth.w	r9, r9
 800cfec:	fa0f f888 	sxth.w	r8, r8
 800cff0:	45c1      	cmp	r9, r8
 800cff2:	db21      	blt.n	800d038 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800cff4:	88b3      	ldrh	r3, [r6, #4]
 800cff6:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 800cffa:	fa1f f28c 	uxth.w	r2, ip
 800cffe:	4413      	add	r3, r2
 800d000:	b29b      	uxth	r3, r3
 800d002:	45e6      	cmp	lr, ip
 800d004:	fa1f f88e 	uxth.w	r8, lr
 800d008:	fa0f f983 	sxth.w	r9, r3
 800d00c:	db0a      	blt.n	800d024 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 800d00e:	eba3 0308 	sub.w	r3, r3, r8
 800d012:	1ac9      	subs	r1, r1, r3
 800d014:	b209      	sxth	r1, r1
 800d016:	2900      	cmp	r1, #0
 800d018:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 800d01c:	ddda      	ble.n	800cfd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800d01e:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 800d022:	e7c6      	b.n	800cfb2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 800d024:	4441      	add	r1, r8
 800d026:	b209      	sxth	r1, r1
 800d028:	4549      	cmp	r1, r9
 800d02a:	dc05      	bgt.n	800d038 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 800d02c:	eba2 0208 	sub.w	r2, r2, r8
 800d030:	b212      	sxth	r2, r2
 800d032:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 800d036:	e7cb      	b.n	800cfd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 800d038:	4607      	mov	r7, r0
 800d03a:	e7bb      	b.n	800cfb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 800d03c:	2d00      	cmp	r5, #0
 800d03e:	d181      	bne.n	800cf44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 800d040:	2f00      	cmp	r7, #0
 800d042:	f000 81dd 	beq.w	800d400 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800d046:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 800d04a:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 800d04e:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 800d052:	b2b3      	uxth	r3, r6
 800d054:	9305      	str	r3, [sp, #20]
 800d056:	9a05      	ldr	r2, [sp, #20]
 800d058:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 800d05c:	4413      	add	r3, r2
 800d05e:	b2ba      	uxth	r2, r7
 800d060:	4492      	add	sl, r2
 800d062:	b29b      	uxth	r3, r3
 800d064:	fa1f fa8a 	uxth.w	sl, sl
 800d068:	fa0f f883 	sxth.w	r8, r3
 800d06c:	fa0f f98a 	sxth.w	r9, sl
 800d070:	e9cd 2307 	strd	r2, r3, [sp, #28]
 800d074:	9b04      	ldr	r3, [sp, #16]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d052      	beq.n	800d120 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 800d07a:	9903      	ldr	r1, [sp, #12]
 800d07c:	4620      	mov	r0, r4
 800d07e:	f7ff fd02 	bl	800ca86 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800d082:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d086:	b1c0      	cbz	r0, 800d0ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800d088:	f9b4 e000 	ldrsh.w	lr, [r4]
 800d08c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800d090:	4576      	cmp	r6, lr
 800d092:	dc22      	bgt.n	800d0da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800d094:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800d098:	44f4      	add	ip, lr
 800d09a:	fa0f fc8c 	sxth.w	ip, ip
 800d09e:	45e0      	cmp	r8, ip
 800d0a0:	db1b      	blt.n	800d0da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 800d0a2:	428f      	cmp	r7, r1
 800d0a4:	fa1f fc81 	uxth.w	ip, r1
 800d0a8:	88e1      	ldrh	r1, [r4, #6]
 800d0aa:	dc0d      	bgt.n	800d0c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 800d0ac:	ebaa 0c0c 	sub.w	ip, sl, ip
 800d0b0:	eba1 010c 	sub.w	r1, r1, ip
 800d0b4:	f8a4 9002 	strh.w	r9, [r4, #2]
 800d0b8:	80e1      	strh	r1, [r4, #6]
 800d0ba:	4628      	mov	r0, r5
 800d0bc:	9904      	ldr	r1, [sp, #16]
 800d0be:	3901      	subs	r1, #1
 800d0c0:	9104      	str	r1, [sp, #16]
 800d0c2:	3c08      	subs	r4, #8
 800d0c4:	4605      	mov	r5, r0
 800d0c6:	e7d3      	b.n	800d070 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 800d0c8:	4461      	add	r1, ip
 800d0ca:	b209      	sxth	r1, r1
 800d0cc:	4549      	cmp	r1, r9
 800d0ce:	dcf5      	bgt.n	800d0bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800d0d0:	eba2 0c0c 	sub.w	ip, r2, ip
 800d0d4:	f8a4 c006 	strh.w	ip, [r4, #6]
 800d0d8:	e7ef      	b.n	800d0ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800d0da:	428f      	cmp	r7, r1
 800d0dc:	dcee      	bgt.n	800d0bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800d0de:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 800d0e2:	4461      	add	r1, ip
 800d0e4:	b209      	sxth	r1, r1
 800d0e6:	4589      	cmp	r9, r1
 800d0e8:	dbe8      	blt.n	800d0bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800d0ea:	4576      	cmp	r6, lr
 800d0ec:	fa1f fc8e 	uxth.w	ip, lr
 800d0f0:	88a1      	ldrh	r1, [r4, #4]
 800d0f2:	dc07      	bgt.n	800d104 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 800d0f4:	eba3 0c0c 	sub.w	ip, r3, ip
 800d0f8:	eba1 010c 	sub.w	r1, r1, ip
 800d0fc:	f8a4 8000 	strh.w	r8, [r4]
 800d100:	80a1      	strh	r1, [r4, #4]
 800d102:	e7da      	b.n	800d0ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800d104:	4461      	add	r1, ip
 800d106:	b209      	sxth	r1, r1
 800d108:	4588      	cmp	r8, r1
 800d10a:	dbd7      	blt.n	800d0bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 800d10c:	9905      	ldr	r1, [sp, #20]
 800d10e:	eba1 0c0c 	sub.w	ip, r1, ip
 800d112:	f8a4 c004 	strh.w	ip, [r4, #4]
 800d116:	e7d0      	b.n	800d0ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 800d118:	2001264e 	.word	0x2001264e
 800d11c:	2001264c 	.word	0x2001264c
 800d120:	2d00      	cmp	r5, #0
 800d122:	f000 816d 	beq.w	800d400 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800d126:	9b06      	ldr	r3, [sp, #24]
 800d128:	445b      	add	r3, fp
 800d12a:	461c      	mov	r4, r3
 800d12c:	9b02      	ldr	r3, [sp, #8]
 800d12e:	3301      	adds	r3, #1
 800d130:	f000 8166 	beq.w	800d400 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 800d134:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 800d138:	4629      	mov	r1, r5
 800d13a:	9803      	ldr	r0, [sp, #12]
 800d13c:	f7ff fd16 	bl	800cb6c <_ZNK8touchgfx4Rect8includesERKS0_>
 800d140:	b120      	cbz	r0, 800d14c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 800d142:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800d146:	9801      	ldr	r0, [sp, #4]
 800d148:	f7ff feb0 	bl	800ceac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800d14c:	9903      	ldr	r1, [sp, #12]
 800d14e:	4628      	mov	r0, r5
 800d150:	f7ff fc99 	bl	800ca86 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800d154:	2800      	cmp	r0, #0
 800d156:	f000 809c 	beq.w	800d292 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 800d15a:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 800d15e:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800d162:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 800d166:	9309      	str	r3, [sp, #36]	@ 0x24
 800d168:	fa1f f189 	uxth.w	r1, r9
 800d16c:	eb01 0c03 	add.w	ip, r1, r3
 800d170:	fa1f fa8c 	uxth.w	sl, ip
 800d174:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 800d178:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 800d17c:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 800d180:	b283      	uxth	r3, r0
 800d182:	eb03 050c 	add.w	r5, r3, ip
 800d186:	b2ad      	uxth	r5, r5
 800d188:	9505      	str	r5, [sp, #20]
 800d18a:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 800d18e:	9504      	str	r5, [sp, #16]
 800d190:	4548      	cmp	r0, r9
 800d192:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 800d196:	f340 8099 	ble.w	800d2cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 800d19a:	1a5b      	subs	r3, r3, r1
 800d19c:	b29b      	uxth	r3, r3
 800d19e:	4596      	cmp	lr, r2
 800d1a0:	fa0f f08a 	sxth.w	r0, sl
 800d1a4:	b21e      	sxth	r6, r3
 800d1a6:	dd2e      	ble.n	800d206 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 800d1a8:	9f02      	ldr	r7, [sp, #8]
 800d1aa:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 800d1ae:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 800d1b2:	9f04      	ldr	r7, [sp, #16]
 800d1b4:	1a3f      	subs	r7, r7, r0
 800d1b6:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 800d1ba:	fa1f fe8e 	uxth.w	lr, lr
 800d1be:	b292      	uxth	r2, r2
 800d1c0:	ebae 0102 	sub.w	r1, lr, r2
 800d1c4:	44a6      	add	lr, r4
 800d1c6:	4402      	add	r2, r0
 800d1c8:	b289      	uxth	r1, r1
 800d1ca:	fa0f fe8e 	sxth.w	lr, lr
 800d1ce:	b212      	sxth	r2, r2
 800d1d0:	b20d      	sxth	r5, r1
 800d1d2:	ebae 0202 	sub.w	r2, lr, r2
 800d1d6:	436f      	muls	r7, r5
 800d1d8:	4372      	muls	r2, r6
 800d1da:	4297      	cmp	r7, r2
 800d1dc:	db09      	blt.n	800d1f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 800d1de:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 800d1e2:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 800d1e6:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800d1ea:	449c      	add	ip, r3
 800d1ec:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 800d1f0:	e686      	b.n	800cf00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d1f2:	4421      	add	r1, r4
 800d1f4:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 800d1f8:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 800d1fc:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800d200:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800d204:	e67c      	b.n	800cf00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d206:	9f04      	ldr	r7, [sp, #16]
 800d208:	42b8      	cmp	r0, r7
 800d20a:	da27      	bge.n	800d25c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 800d20c:	9902      	ldr	r1, [sp, #8]
 800d20e:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 800d212:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 800d216:	eb05 010e 	add.w	r1, r5, lr
 800d21a:	fa1f f881 	uxth.w	r8, r1
 800d21e:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 800d222:	4411      	add	r1, r2
 800d224:	eba1 0108 	sub.w	r1, r1, r8
 800d228:	b289      	uxth	r1, r1
 800d22a:	fa0f f988 	sxth.w	r9, r8
 800d22e:	eba2 020e 	sub.w	r2, r2, lr
 800d232:	fa0f f881 	sxth.w	r8, r1
 800d236:	1a3f      	subs	r7, r7, r0
 800d238:	4372      	muls	r2, r6
 800d23a:	fb08 f707 	mul.w	r7, r8, r7
 800d23e:	42ba      	cmp	r2, r7
 800d240:	dc06      	bgt.n	800d250 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 800d242:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 800d246:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 800d24a:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 800d24e:	e7ca      	b.n	800d1e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 800d250:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 800d254:	4429      	add	r1, r5
 800d256:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800d25a:	e651      	b.n	800cf00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d25c:	9805      	ldr	r0, [sp, #20]
 800d25e:	ebaa 0000 	sub.w	r0, sl, r0
 800d262:	b280      	uxth	r0, r0
 800d264:	2d06      	cmp	r5, #6
 800d266:	fa0f fe80 	sxth.w	lr, r0
 800d26a:	d817      	bhi.n	800d29c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 800d26c:	9b04      	ldr	r3, [sp, #16]
 800d26e:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 800d272:	1c6b      	adds	r3, r5, #1
 800d274:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 800d278:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 800d27c:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 800d280:	9b01      	ldr	r3, [sp, #4]
 800d282:	9801      	ldr	r0, [sp, #4]
 800d284:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d288:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 800d28c:	805a      	strh	r2, [r3, #2]
 800d28e:	809e      	strh	r6, [r3, #4]
 800d290:	80d9      	strh	r1, [r3, #6]
 800d292:	9b02      	ldr	r3, [sp, #8]
 800d294:	3b01      	subs	r3, #1
 800d296:	9302      	str	r3, [sp, #8]
 800d298:	3c08      	subs	r4, #8
 800d29a:	e747      	b.n	800d12c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 800d29c:	9a02      	ldr	r2, [sp, #8]
 800d29e:	45b6      	cmp	lr, r6
 800d2a0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800d2a4:	db0d      	blt.n	800d2c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 800d2a6:	449c      	add	ip, r3
 800d2a8:	fa1f fc8c 	uxth.w	ip, ip
 800d2ac:	445a      	add	r2, fp
 800d2ae:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 800d2b2:	448c      	add	ip, r1
 800d2b4:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 800d2b8:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 800d2bc:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 800d2c0:	e61e      	b.n	800cf00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d2c2:	445a      	add	r2, fp
 800d2c4:	4484      	add	ip, r0
 800d2c6:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 800d2ca:	e78f      	b.n	800d1ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800d2cc:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 800d2d0:	fa1f f18e 	uxth.w	r1, lr
 800d2d4:	eb01 0806 	add.w	r8, r1, r6
 800d2d8:	b293      	uxth	r3, r2
 800d2da:	fa1f f888 	uxth.w	r8, r8
 800d2de:	9306      	str	r3, [sp, #24]
 800d2e0:	fa0f f388 	sxth.w	r3, r8
 800d2e4:	9307      	str	r3, [sp, #28]
 800d2e6:	9f06      	ldr	r7, [sp, #24]
 800d2e8:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 800d2ec:	443b      	add	r3, r7
 800d2ee:	b29b      	uxth	r3, r3
 800d2f0:	4596      	cmp	lr, r2
 800d2f2:	9308      	str	r3, [sp, #32]
 800d2f4:	da24      	bge.n	800d340 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 800d2f6:	9905      	ldr	r1, [sp, #20]
 800d2f8:	eba3 0308 	sub.w	r3, r3, r8
 800d2fc:	ebaa 0401 	sub.w	r4, sl, r1
 800d300:	b2a4      	uxth	r4, r4
 800d302:	b29b      	uxth	r3, r3
 800d304:	b225      	sxth	r5, r4
 800d306:	b219      	sxth	r1, r3
 800d308:	eba2 020e 	sub.w	r2, r2, lr
 800d30c:	eba9 0000 	sub.w	r0, r9, r0
 800d310:	436a      	muls	r2, r5
 800d312:	4348      	muls	r0, r1
 800d314:	4282      	cmp	r2, r0
 800d316:	9a02      	ldr	r2, [sp, #8]
 800d318:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800d31c:	445a      	add	r2, fp
 800d31e:	dc06      	bgt.n	800d32e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 800d320:	9b07      	ldr	r3, [sp, #28]
 800d322:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 800d326:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 800d32a:	44a4      	add	ip, r4
 800d32c:	e75e      	b.n	800d1ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800d32e:	9904      	ldr	r1, [sp, #16]
 800d330:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 800d334:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 800d338:	4433      	add	r3, r6
 800d33a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800d33e:	e5df      	b.n	800cf00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d340:	9f06      	ldr	r7, [sp, #24]
 800d342:	9b04      	ldr	r3, [sp, #16]
 800d344:	1bc9      	subs	r1, r1, r7
 800d346:	fa0f f78a 	sxth.w	r7, sl
 800d34a:	b289      	uxth	r1, r1
 800d34c:	429f      	cmp	r7, r3
 800d34e:	fa0f fe81 	sxth.w	lr, r1
 800d352:	dd23      	ble.n	800d39c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 800d354:	9a05      	ldr	r2, [sp, #20]
 800d356:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800d35a:	9d07      	ldr	r5, [sp, #28]
 800d35c:	ebaa 0202 	sub.w	r2, sl, r2
 800d360:	b292      	uxth	r2, r2
 800d362:	eba5 0a03 	sub.w	sl, r5, r3
 800d366:	b214      	sxth	r4, r2
 800d368:	eba9 0000 	sub.w	r0, r9, r0
 800d36c:	9b02      	ldr	r3, [sp, #8]
 800d36e:	fb0e f000 	mul.w	r0, lr, r0
 800d372:	fb04 fa0a 	mul.w	sl, r4, sl
 800d376:	00db      	lsls	r3, r3, #3
 800d378:	4550      	cmp	r0, sl
 800d37a:	445b      	add	r3, fp
 800d37c:	db03      	blt.n	800d386 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 800d37e:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 800d382:	4494      	add	ip, r2
 800d384:	e732      	b.n	800d1ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 800d386:	9a04      	ldr	r2, [sp, #16]
 800d388:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 800d38c:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 800d390:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 800d394:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800d398:	4431      	add	r1, r6
 800d39a:	e75c      	b.n	800d256 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 800d39c:	9b08      	ldr	r3, [sp, #32]
 800d39e:	eba3 0308 	sub.w	r3, r3, r8
 800d3a2:	b29b      	uxth	r3, r3
 800d3a4:	2d06      	cmp	r5, #6
 800d3a6:	b218      	sxth	r0, r3
 800d3a8:	d813      	bhi.n	800d3d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 800d3aa:	9b07      	ldr	r3, [sp, #28]
 800d3ac:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 800d3b0:	1c6b      	adds	r3, r5, #1
 800d3b2:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 800d3b6:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 800d3ba:	9b01      	ldr	r3, [sp, #4]
 800d3bc:	9901      	ldr	r1, [sp, #4]
 800d3be:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d3c2:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 800d3c6:	805a      	strh	r2, [r3, #2]
 800d3c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d3ca:	809a      	strh	r2, [r3, #4]
 800d3cc:	f8a3 e006 	strh.w	lr, [r3, #6]
 800d3d0:	e75f      	b.n	800d292 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 800d3d2:	9c02      	ldr	r4, [sp, #8]
 800d3d4:	4570      	cmp	r0, lr
 800d3d6:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 800d3da:	db0d      	blt.n	800d3f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 800d3dc:	4431      	add	r1, r6
 800d3de:	9b06      	ldr	r3, [sp, #24]
 800d3e0:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 800d3e4:	b289      	uxth	r1, r1
 800d3e6:	445c      	add	r4, fp
 800d3e8:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 800d3ec:	4419      	add	r1, r3
 800d3ee:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 800d3f2:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 800d3f6:	e583      	b.n	800cf00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d3f8:	445c      	add	r4, fp
 800d3fa:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 800d3fe:	e79b      	b.n	800d338 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 800d400:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 800d404:	1e65      	subs	r5, r4, #1
 800d406:	b2ad      	uxth	r5, r5
 800d408:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 800d40c:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 800d410:	42b5      	cmp	r5, r6
 800d412:	d044      	beq.n	800d49e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 800d414:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 800d418:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 800d41c:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 800d420:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 800d424:	4282      	cmp	r2, r0
 800d426:	d11f      	bne.n	800d468 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 800d428:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 800d42c:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 800d430:	459c      	cmp	ip, r3
 800d432:	d119      	bne.n	800d468 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 800d434:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 800d438:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 800d43c:	19d8      	adds	r0, r3, r7
 800d43e:	b200      	sxth	r0, r0
 800d440:	4288      	cmp	r0, r1
 800d442:	d109      	bne.n	800d458 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 800d444:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 800d448:	4413      	add	r3, r2
 800d44a:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 800d44e:	4629      	mov	r1, r5
 800d450:	9801      	ldr	r0, [sp, #4]
 800d452:	f7ff fd2b 	bl	800ceac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800d456:	e003      	b.n	800d460 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800d458:	4411      	add	r1, r2
 800d45a:	b209      	sxth	r1, r1
 800d45c:	42b9      	cmp	r1, r7
 800d45e:	d0f3      	beq.n	800d448 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 800d460:	3d01      	subs	r5, #1
 800d462:	b2ad      	uxth	r5, r5
 800d464:	3c08      	subs	r4, #8
 800d466:	e7d3      	b.n	800d410 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 800d468:	42b9      	cmp	r1, r7
 800d46a:	d1f9      	bne.n	800d460 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800d46c:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 800d470:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800d474:	4299      	cmp	r1, r3
 800d476:	d1f3      	bne.n	800d460 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800d478:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 800d47c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 800d480:	181f      	adds	r7, r3, r0
 800d482:	b23f      	sxth	r7, r7
 800d484:	42ba      	cmp	r2, r7
 800d486:	d105      	bne.n	800d494 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 800d488:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 800d48c:	440b      	add	r3, r1
 800d48e:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 800d492:	e7dc      	b.n	800d44e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 800d494:	440a      	add	r2, r1
 800d496:	b212      	sxth	r2, r2
 800d498:	4290      	cmp	r0, r2
 800d49a:	d1e1      	bne.n	800d460 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 800d49c:	e7f6      	b.n	800d48c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 800d49e:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 800d4a2:	2e07      	cmp	r6, #7
 800d4a4:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 800d4a8:	d812      	bhi.n	800d4d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 800d4aa:	1c75      	adds	r5, r6, #1
 800d4ac:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 800d4b0:	9d01      	ldr	r5, [sp, #4]
 800d4b2:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 800d4b6:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 800d4ba:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 800d4be:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 800d4c2:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 800d4c6:	442c      	add	r4, r5
 800d4c8:	8061      	strh	r1, [r4, #2]
 800d4ca:	80a2      	strh	r2, [r4, #4]
 800d4cc:	80e3      	strh	r3, [r4, #6]
 800d4ce:	e581      	b.n	800cfd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 800d4d0:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 800d4d4:	3e01      	subs	r6, #1
 800d4d6:	445c      	add	r4, fp
 800d4d8:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 800d4dc:	f04f 37ff 	mov.w	r7, #4294967295
 800d4e0:	2500      	movs	r5, #0
 800d4e2:	9305      	str	r3, [sp, #20]
 800d4e4:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 800d4e8:	9302      	str	r3, [sp, #8]
 800d4ea:	1e72      	subs	r2, r6, #1
 800d4ec:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 800d4f0:	9304      	str	r3, [sp, #16]
 800d4f2:	4691      	mov	r9, r2
 800d4f4:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 800d4f8:	f1b9 3fff 	cmp.w	r9, #4294967295
 800d4fc:	bf14      	ite	ne
 800d4fe:	9905      	ldrne	r1, [sp, #20]
 800d500:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 800d504:	6818      	ldr	r0, [r3, #0]
 800d506:	9207      	str	r2, [sp, #28]
 800d508:	bf18      	it	ne
 800d50a:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 800d50e:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800d512:	f8be 1006 	ldrh.w	r1, [lr, #6]
 800d516:	f8be 8004 	ldrh.w	r8, [lr, #4]
 800d51a:	9306      	str	r3, [sp, #24]
 800d51c:	fb18 f801 	smulbb	r8, r8, r1
 800d520:	6859      	ldr	r1, [r3, #4]
 800d522:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800d526:	4671      	mov	r1, lr
 800d528:	a80c      	add	r0, sp, #48	@ 0x30
 800d52a:	f7ff fb45 	bl	800cbb8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800d52e:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 800d532:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 800d536:	9b04      	ldr	r3, [sp, #16]
 800d538:	9a02      	ldr	r2, [sp, #8]
 800d53a:	fb10 f001 	smulbb	r0, r0, r1
 800d53e:	fb02 8803 	mla	r8, r2, r3, r8
 800d542:	eba0 0108 	sub.w	r1, r0, r8
 800d546:	f04f 0c08 	mov.w	ip, #8
 800d54a:	fb90 f0fc 	sdiv	r0, r0, ip
 800d54e:	4288      	cmp	r0, r1
 800d550:	dc20      	bgt.n	800d594 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 800d552:	4551      	cmp	r1, sl
 800d554:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d558:	da03      	bge.n	800d562 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68e>
 800d55a:	b1d9      	cbz	r1, 800d594 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c0>
 800d55c:	468a      	mov	sl, r1
 800d55e:	464f      	mov	r7, r9
 800d560:	4635      	mov	r5, r6
 800d562:	f109 39ff 	add.w	r9, r9, #4294967295
 800d566:	f119 0f02 	cmn.w	r9, #2
 800d56a:	d1c5      	bne.n	800d4f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 800d56c:	4616      	mov	r6, r2
 800d56e:	3201      	adds	r2, #1
 800d570:	f1a4 0408 	sub.w	r4, r4, #8
 800d574:	d1b6      	bne.n	800d4e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 800d576:	9b01      	ldr	r3, [sp, #4]
 800d578:	b2ac      	uxth	r4, r5
 800d57a:	00ed      	lsls	r5, r5, #3
 800d57c:	1958      	adds	r0, r3, r5
 800d57e:	1c7b      	adds	r3, r7, #1
 800d580:	d10b      	bne.n	800d59a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c6>
 800d582:	4601      	mov	r1, r0
 800d584:	9803      	ldr	r0, [sp, #12]
 800d586:	f7ff fb17 	bl	800cbb8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800d58a:	4621      	mov	r1, r4
 800d58c:	9801      	ldr	r0, [sp, #4]
 800d58e:	f7ff fc8d 	bl	800ceac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800d592:	e4b5      	b.n	800cf00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 800d594:	464f      	mov	r7, r9
 800d596:	4635      	mov	r5, r6
 800d598:	e7ed      	b.n	800d576 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a2>
 800d59a:	9b01      	ldr	r3, [sp, #4]
 800d59c:	00ff      	lsls	r7, r7, #3
 800d59e:	19d9      	adds	r1, r3, r7
 800d5a0:	f7ff fb0a 	bl	800cbb8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 800d5a4:	9b03      	ldr	r3, [sp, #12]
 800d5a6:	cb03      	ldmia	r3!, {r0, r1}
 800d5a8:	445f      	add	r7, fp
 800d5aa:	445d      	add	r5, fp
 800d5ac:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 800d5b0:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 800d5b4:	f855 0fac 	ldr.w	r0, [r5, #172]!
 800d5b8:	9b03      	ldr	r3, [sp, #12]
 800d5ba:	6869      	ldr	r1, [r5, #4]
 800d5bc:	c303      	stmia	r3!, {r0, r1}
 800d5be:	e7e4      	b.n	800d58a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b6>

0800d5c0 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 800d5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5c4:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 800d5c8:	b09b      	sub	sp, #108	@ 0x6c
 800d5ca:	4604      	mov	r4, r0
 800d5cc:	4630      	mov	r0, r6
 800d5ce:	f7fb fd08 	bl	8008fe2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d5d2:	4605      	mov	r5, r0
 800d5d4:	b948      	cbnz	r0, 800d5ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 800d5d6:	6823      	ldr	r3, [r4, #0]
 800d5d8:	e896 0006 	ldmia.w	r6, {r1, r2}
 800d5dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5de:	4620      	mov	r0, r4
 800d5e0:	4798      	blx	r3
 800d5e2:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 800d5e6:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 800d5ea:	4bc6      	ldr	r3, [pc, #792]	@ (800d904 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d03f      	beq.n	800d672 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 800d5f2:	4dc5      	ldr	r5, [pc, #788]	@ (800d908 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 800d5f4:	4628      	mov	r0, r5
 800d5f6:	f7fb fcf4 	bl	8008fe2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d5fa:	4606      	mov	r6, r0
 800d5fc:	2800      	cmp	r0, #0
 800d5fe:	d138      	bne.n	800d672 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 800d600:	4628      	mov	r0, r5
 800d602:	f7ff f96d 	bl	800c8e0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800d606:	6823      	ldr	r3, [r4, #0]
 800d608:	6829      	ldr	r1, [r5, #0]
 800d60a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d60c:	686a      	ldr	r2, [r5, #4]
 800d60e:	4620      	mov	r0, r4
 800d610:	4798      	blx	r3
 800d612:	802e      	strh	r6, [r5, #0]
 800d614:	806e      	strh	r6, [r5, #2]
 800d616:	80ae      	strh	r6, [r5, #4]
 800d618:	80ee      	strh	r6, [r5, #6]
 800d61a:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 800d61e:	4dbb      	ldr	r5, [pc, #748]	@ (800d90c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 800d620:	4640      	mov	r0, r8
 800d622:	f7ff fbeb 	bl	800cdfc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800d626:	882e      	ldrh	r6, [r5, #0]
 800d628:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 800d62c:	4633      	mov	r3, r6
 800d62e:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 800d632:	42bb      	cmp	r3, r7
 800d634:	d224      	bcs.n	800d680 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 800d636:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 800d63a:	2907      	cmp	r1, #7
 800d63c:	d816      	bhi.n	800d66c <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 800d63e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 800d642:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 800d646:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 800d64a:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 800d64e:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 800d652:	1c4a      	adds	r2, r1, #1
 800d654:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 800d658:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 800d65c:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 800d660:	f8a2 a002 	strh.w	sl, [r2, #2]
 800d664:	f8a2 e004 	strh.w	lr, [r2, #4]
 800d668:	f8a2 c006 	strh.w	ip, [r2, #6]
 800d66c:	3301      	adds	r3, #1
 800d66e:	b29b      	uxth	r3, r3
 800d670:	e7df      	b.n	800d632 <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 800d672:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800d676:	2b00      	cmp	r3, #0
 800d678:	d1cf      	bne.n	800d61a <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 800d67a:	b01b      	add	sp, #108	@ 0x6c
 800d67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d680:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 800d684:	42b3      	cmp	r3, r6
 800d686:	d90c      	bls.n	800d6a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 800d688:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800d68c:	6822      	ldr	r2, [r4, #0]
 800d68e:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 800d692:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 800d694:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 800d698:	4620      	mov	r0, r4
 800d69a:	3601      	adds	r6, #1
 800d69c:	47b8      	blx	r7
 800d69e:	b2b6      	uxth	r6, r6
 800d6a0:	e7ee      	b.n	800d680 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 800d6a2:	4a9b      	ldr	r2, [pc, #620]	@ (800d910 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 800d6a4:	6813      	ldr	r3, [r2, #0]
 800d6a6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d6aa:	2b01      	cmp	r3, #1
 800d6ac:	4691      	mov	r9, r2
 800d6ae:	f040 80e2 	bne.w	800d876 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 800d6b2:	8829      	ldrh	r1, [r5, #0]
 800d6b4:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 800d6b8:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 800d6bc:	33ae      	adds	r3, #174	@ 0xae
 800d6be:	2600      	movs	r6, #0
 800d6c0:	428f      	cmp	r7, r1
 800d6c2:	f103 0308 	add.w	r3, r3, #8
 800d6c6:	dd0a      	ble.n	800d6de <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 800d6c8:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 800d6cc:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 800d6d0:	4402      	add	r2, r0
 800d6d2:	b212      	sxth	r2, r2
 800d6d4:	4296      	cmp	r6, r2
 800d6d6:	bfb8      	it	lt
 800d6d8:	4616      	movlt	r6, r2
 800d6da:	3101      	adds	r1, #1
 800d6dc:	e7f0      	b.n	800d6c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 800d6de:	4b8d      	ldr	r3, [pc, #564]	@ (800d914 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 800d6e0:	f8df 922c 	ldr.w	r9, [pc, #556]	@ 800d910 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>
 800d6e4:	881b      	ldrh	r3, [r3, #0]
 800d6e6:	2b0f      	cmp	r3, #15
 800d6e8:	bf88      	it	hi
 800d6ea:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 800d6ee:	f04f 0300 	mov.w	r3, #0
 800d6f2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800d6f6:	bf98      	it	ls
 800d6f8:	f04f 0b01 	movls.w	fp, #1
 800d6fc:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 800d700:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 800d704:	4b82      	ldr	r3, [pc, #520]	@ (800d910 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 800d706:	4438      	add	r0, r7
 800d708:	b207      	sxth	r7, r0
 800d70a:	6818      	ldr	r0, [r3, #0]
 800d70c:	42b7      	cmp	r7, r6
 800d70e:	6803      	ldr	r3, [r0, #0]
 800d710:	f280 8083 	bge.w	800d81a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 800d714:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d718:	4798      	blx	r3
 800d71a:	eb07 030b 	add.w	r3, r7, fp
 800d71e:	4298      	cmp	r0, r3
 800d720:	da07      	bge.n	800d732 <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 800d722:	42b0      	cmp	r0, r6
 800d724:	da05      	bge.n	800d732 <_ZN8touchgfx11Application15drawCachedAreasEv+0x172>
 800d726:	4287      	cmp	r7, r0
 800d728:	dd6c      	ble.n	800d804 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 800d72a:	2f00      	cmp	r7, #0
 800d72c:	dd6a      	ble.n	800d804 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 800d72e:	4630      	mov	r0, r6
 800d730:	e004      	b.n	800d73c <_ZN8touchgfx11Application15drawCachedAreasEv+0x17c>
 800d732:	4287      	cmp	r7, r0
 800d734:	dcfb      	bgt.n	800d72e <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 800d736:	42b0      	cmp	r0, r6
 800d738:	bfa8      	it	ge
 800d73a:	4630      	movge	r0, r6
 800d73c:	4b76      	ldr	r3, [pc, #472]	@ (800d918 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 800d73e:	f8ad 7016 	strh.w	r7, [sp, #22]
 800d742:	1bc0      	subs	r0, r0, r7
 800d744:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d748:	882f      	ldrh	r7, [r5, #0]
 800d74a:	f8ad 3018 	strh.w	r3, [sp, #24]
 800d74e:	2200      	movs	r2, #0
 800d750:	f8ad 2014 	strh.w	r2, [sp, #20]
 800d754:	f8ad 001a 	strh.w	r0, [sp, #26]
 800d758:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800d75c:	42bb      	cmp	r3, r7
 800d75e:	d9cd      	bls.n	800d6fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 800d760:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 800d764:	ab07      	add	r3, sp, #28
 800d766:	f852 0fac 	ldr.w	r0, [r2, #172]!
 800d76a:	6851      	ldr	r1, [r2, #4]
 800d76c:	c303      	stmia	r3!, {r0, r1}
 800d76e:	a905      	add	r1, sp, #20
 800d770:	a807      	add	r0, sp, #28
 800d772:	f7ff f988 	bl	800ca86 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800d776:	2800      	cmp	r0, #0
 800d778:	d04c      	beq.n	800d814 <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 800d77a:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 800d77e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 800d782:	f8bd a020 	ldrh.w	sl, [sp, #32]
 800d786:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 800d78a:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800d78e:	9302      	str	r3, [sp, #8]
 800d790:	4686      	mov	lr, r0
 800d792:	4290      	cmp	r0, r2
 800d794:	4450      	add	r0, sl
 800d796:	f8bd a018 	ldrh.w	sl, [sp, #24]
 800d79a:	bfb8      	it	lt
 800d79c:	4696      	movlt	lr, r2
 800d79e:	4452      	add	r2, sl
 800d7a0:	4299      	cmp	r1, r3
 800d7a2:	b280      	uxth	r0, r0
 800d7a4:	b292      	uxth	r2, r2
 800d7a6:	468c      	mov	ip, r1
 800d7a8:	fa0f fa82 	sxth.w	sl, r2
 800d7ac:	bfb8      	it	lt
 800d7ae:	469c      	movlt	ip, r3
 800d7b0:	b203      	sxth	r3, r0
 800d7b2:	4553      	cmp	r3, sl
 800d7b4:	bfb8      	it	lt
 800d7b6:	4602      	movlt	r2, r0
 800d7b8:	eba2 020e 	sub.w	r2, r2, lr
 800d7bc:	f8ad 2020 	strh.w	r2, [sp, #32]
 800d7c0:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 800d7c4:	9b02      	ldr	r3, [sp, #8]
 800d7c6:	f8ad e01c 	strh.w	lr, [sp, #28]
 800d7ca:	4411      	add	r1, r2
 800d7cc:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 800d7d0:	f8ad c01e 	strh.w	ip, [sp, #30]
 800d7d4:	4413      	add	r3, r2
 800d7d6:	b289      	uxth	r1, r1
 800d7d8:	b29b      	uxth	r3, r3
 800d7da:	b208      	sxth	r0, r1
 800d7dc:	b21a      	sxth	r2, r3
 800d7de:	4290      	cmp	r0, r2
 800d7e0:	bfb8      	it	lt
 800d7e2:	460b      	movlt	r3, r1
 800d7e4:	eba3 030c 	sub.w	r3, r3, ip
 800d7e8:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800d7ec:	a807      	add	r0, sp, #28
 800d7ee:	f7fb fbf8 	bl	8008fe2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d7f2:	b920      	cbnz	r0, 800d7fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 800d7f4:	6823      	ldr	r3, [r4, #0]
 800d7f6:	a907      	add	r1, sp, #28
 800d7f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d7fa:	4620      	mov	r0, r4
 800d7fc:	4798      	blx	r3
 800d7fe:	3701      	adds	r7, #1
 800d800:	b2bf      	uxth	r7, r7
 800d802:	e7a9      	b.n	800d758 <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 800d804:	f8d9 0000 	ldr.w	r0, [r9]
 800d808:	6803      	ldr	r3, [r0, #0]
 800d80a:	2101      	movs	r1, #1
 800d80c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d810:	4798      	blx	r3
 800d812:	e773      	b.n	800d6fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x13c>
 800d814:	e9cd 0007 	strd	r0, r0, [sp, #28]
 800d818:	e7e8      	b.n	800d7ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 800d81a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d81c:	4798      	blx	r3
 800d81e:	4b3f      	ldr	r3, [pc, #252]	@ (800d91c <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 800d820:	781b      	ldrb	r3, [r3, #0]
 800d822:	2b00      	cmp	r3, #0
 800d824:	f43f af29 	beq.w	800d67a <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 800d828:	2300      	movs	r3, #0
 800d82a:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 800d82e:	882b      	ldrh	r3, [r5, #0]
 800d830:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 800d834:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 800d838:	42ab      	cmp	r3, r5
 800d83a:	f4bf af1e 	bcs.w	800d67a <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 800d83e:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 800d842:	2907      	cmp	r1, #7
 800d844:	d814      	bhi.n	800d870 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 800d846:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 800d84a:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 800d84e:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 800d852:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 800d856:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 800d85a:	1c4a      	adds	r2, r1, #1
 800d85c:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 800d860:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 800d864:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 800d868:	f8a2 c002 	strh.w	ip, [r2, #2]
 800d86c:	8097      	strh	r7, [r2, #4]
 800d86e:	80d6      	strh	r6, [r2, #6]
 800d870:	3301      	adds	r3, #1
 800d872:	b29b      	uxth	r3, r3
 800d874:	e7e0      	b.n	800d838 <_ZN8touchgfx11Application15drawCachedAreasEv+0x278>
 800d876:	2b02      	cmp	r3, #2
 800d878:	f040 8133 	bne.w	800dae2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x522>
 800d87c:	4b28      	ldr	r3, [pc, #160]	@ (800d920 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 800d87e:	781b      	ldrb	r3, [r3, #0]
 800d880:	2b01      	cmp	r3, #1
 800d882:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 800d886:	f000 8098 	beq.w	800d9ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 800d88a:	882a      	ldrh	r2, [r5, #0]
 800d88c:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 800d890:	3201      	adds	r2, #1
 800d892:	b292      	uxth	r2, r2
 800d894:	2900      	cmp	r1, #0
 800d896:	d0c2      	beq.n	800d81e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 800d898:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 800d89c:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 800d8a0:	441e      	add	r6, r3
 800d8a2:	b236      	sxth	r6, r6
 800d8a4:	4694      	mov	ip, r2
 800d8a6:	f04f 0900 	mov.w	r9, #0
 800d8aa:	fa1f f38c 	uxth.w	r3, ip
 800d8ae:	4299      	cmp	r1, r3
 800d8b0:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 800d8b4:	f240 80bf 	bls.w	800da36 <_ZN8touchgfx11Application15drawCachedAreasEv+0x476>
 800d8b8:	4427      	add	r7, r4
 800d8ba:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 800d8be:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 800d8c2:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 800d8c6:	4283      	cmp	r3, r0
 800d8c8:	f340 80a1 	ble.w	800da0e <_ZN8touchgfx11Application15drawCachedAreasEv+0x44e>
 800d8cc:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 800d8d0:	4406      	add	r6, r0
 800d8d2:	b236      	sxth	r6, r6
 800d8d4:	429e      	cmp	r6, r3
 800d8d6:	bfa8      	it	ge
 800d8d8:	461e      	movge	r6, r3
 800d8da:	46e1      	mov	r9, ip
 800d8dc:	f10c 0c01 	add.w	ip, ip, #1
 800d8e0:	e7e3      	b.n	800d8aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ea>
 800d8e2:	d10a      	bne.n	800d8fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x33a>
 800d8e4:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 800d8e8:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 800d8ec:	4562      	cmp	r2, ip
 800d8ee:	bfb8      	it	lt
 800d8f0:	4662      	movlt	r2, ip
 800d8f2:	4288      	cmp	r0, r1
 800d8f4:	bfb8      	it	lt
 800d8f6:	461f      	movlt	r7, r3
 800d8f8:	e087      	b.n	800da0a <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 800d8fa:	428a      	cmp	r2, r1
 800d8fc:	bfb8      	it	lt
 800d8fe:	460a      	movlt	r2, r1
 800d900:	e083      	b.n	800da0a <_ZN8touchgfx11Application15drawCachedAreasEv+0x44a>
 800d902:	bf00      	nop
 800d904:	20012690 	.word	0x20012690
 800d908:	2001269c 	.word	0x2001269c
 800d90c:	20000084 	.word	0x20000084
 800d910:	20012658 	.word	0x20012658
 800d914:	2001264e 	.word	0x2001264e
 800d918:	2001264c 	.word	0x2001264c
 800d91c:	20012656 	.word	0x20012656
 800d920:	20012650 	.word	0x20012650
 800d924:	19a1      	adds	r1, r4, r6
 800d926:	ab07      	add	r3, sp, #28
 800d928:	f851 0fac 	ldr.w	r0, [r1, #172]!
 800d92c:	6849      	ldr	r1, [r1, #4]
 800d92e:	c303      	stmia	r3!, {r0, r1}
 800d930:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800d934:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800d938:	2b13      	cmp	r3, #19
 800d93a:	bfd8      	it	le
 800d93c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 800d940:	f8ad 201c 	strh.w	r2, [sp, #28]
 800d944:	440b      	add	r3, r1
 800d946:	1a9b      	subs	r3, r3, r2
 800d948:	a807      	add	r0, sp, #28
 800d94a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800d94e:	f7fe ffe1 	bl	800c914 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 800d952:	a807      	add	r0, sp, #28
 800d954:	f7fb fb45 	bl	8008fe2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d958:	bb78      	cbnz	r0, 800d9ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 800d95a:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 800d95e:	f8d9 0000 	ldr.w	r0, [r9]
 800d962:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800d966:	f8d0 e000 	ldr.w	lr, [r0]
 800d96a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800d96e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 800d972:	f1bc 0f14 	cmp.w	ip, #20
 800d976:	bfa8      	it	ge
 800d978:	f04f 0c14 	movge.w	ip, #20
 800d97c:	fa1f fc8c 	uxth.w	ip, ip
 800d980:	f8cd c000 	str.w	ip, [sp]
 800d984:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 800d988:	47d8      	blx	fp
 800d98a:	4683      	mov	fp, r0
 800d98c:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 800d990:	a807      	add	r0, sp, #28
 800d992:	f7fe ffa5 	bl	800c8e0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 800d996:	6823      	ldr	r3, [r4, #0]
 800d998:	4426      	add	r6, r4
 800d99a:	4620      	mov	r0, r4
 800d99c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d99e:	a907      	add	r1, sp, #28
 800d9a0:	4798      	blx	r3
 800d9a2:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 800d9a6:	eba0 000b 	sub.w	r0, r0, fp
 800d9aa:	b200      	sxth	r0, r0
 800d9ac:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 800d9b0:	b918      	cbnz	r0, 800d9ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x3fa>
 800d9b2:	b2b9      	uxth	r1, r7
 800d9b4:	4650      	mov	r0, sl
 800d9b6:	f7ff fa79 	bl	800ceac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800d9ba:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 800d9be:	f1bb 0f00 	cmp.w	fp, #0
 800d9c2:	f43f af2c 	beq.w	800d81e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 800d9c6:	882b      	ldrh	r3, [r5, #0]
 800d9c8:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 800d9cc:	3301      	adds	r3, #1
 800d9ce:	b29b      	uxth	r3, r3
 800d9d0:	2700      	movs	r7, #0
 800d9d2:	b299      	uxth	r1, r3
 800d9d4:	458b      	cmp	fp, r1
 800d9d6:	ea4f 06c7 	mov.w	r6, r7, lsl #3
 800d9da:	d9a3      	bls.n	800d924 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>
 800d9dc:	4426      	add	r6, r4
 800d9de:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 800d9e2:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 800d9e6:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 800d9ea:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 800d9ee:	4408      	add	r0, r1
 800d9f0:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 800d9f4:	4461      	add	r1, ip
 800d9f6:	b200      	sxth	r0, r0
 800d9f8:	b209      	sxth	r1, r1
 800d9fa:	4288      	cmp	r0, r1
 800d9fc:	f6bf af71 	bge.w	800d8e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 800da00:	4584      	cmp	ip, r0
 800da02:	4662      	mov	r2, ip
 800da04:	461f      	mov	r7, r3
 800da06:	bfb8      	it	lt
 800da08:	4602      	movlt	r2, r0
 800da0a:	3301      	adds	r3, #1
 800da0c:	e7e1      	b.n	800d9d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x412>
 800da0e:	d10e      	bne.n	800da2e <_ZN8touchgfx11Application15drawCachedAreasEv+0x46e>
 800da10:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 800da14:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 800da18:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 800da1c:	4473      	add	r3, lr
 800da1e:	b21b      	sxth	r3, r3
 800da20:	429e      	cmp	r6, r3
 800da22:	bfa8      	it	ge
 800da24:	461e      	movge	r6, r3
 800da26:	4287      	cmp	r7, r0
 800da28:	bfb8      	it	lt
 800da2a:	46e1      	movlt	r9, ip
 800da2c:	e756      	b.n	800d8dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 800da2e:	4286      	cmp	r6, r0
 800da30:	bfa8      	it	ge
 800da32:	4606      	movge	r6, r0
 800da34:	e752      	b.n	800d8dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 800da36:	eb0a 0007 	add.w	r0, sl, r7
 800da3a:	4427      	add	r7, r4
 800da3c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800da40:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 800da44:	f1bb 0f13 	cmp.w	fp, #19
 800da48:	bfde      	ittt	le
 800da4a:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 800da4e:	445e      	addle	r6, fp
 800da50:	b236      	sxthle	r6, r6
 800da52:	f7fb fac6 	bl	8008fe2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800da56:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800da5a:	2800      	cmp	r0, #0
 800da5c:	f47f af1a 	bne.w	800d894 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d4>
 800da60:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 800da64:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 800da68:	482a      	ldr	r0, [pc, #168]	@ (800db14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x554>)
 800da6a:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 800da6e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 800da72:	6800      	ldr	r0, [r0, #0]
 800da74:	f8ad 101c 	strh.w	r1, [sp, #28]
 800da78:	1ab6      	subs	r6, r6, r2
 800da7a:	2e14      	cmp	r6, #20
 800da7c:	f8ad 201e 	strh.w	r2, [sp, #30]
 800da80:	f8ad 3020 	strh.w	r3, [sp, #32]
 800da84:	bfa8      	it	ge
 800da86:	2614      	movge	r6, #20
 800da88:	f8d0 c000 	ldr.w	ip, [r0]
 800da8c:	b2b6      	uxth	r6, r6
 800da8e:	fa1f fb8b 	uxth.w	fp, fp
 800da92:	455e      	cmp	r6, fp
 800da94:	bf94      	ite	ls
 800da96:	9600      	strls	r6, [sp, #0]
 800da98:	f8cd b000 	strhi.w	fp, [sp]
 800da9c:	b292      	uxth	r2, r2
 800da9e:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 800daa2:	b29b      	uxth	r3, r3
 800daa4:	b289      	uxth	r1, r1
 800daa6:	47b0      	blx	r6
 800daa8:	6823      	ldr	r3, [r4, #0]
 800daaa:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 800daae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dab0:	a907      	add	r1, sp, #28
 800dab2:	4620      	mov	r0, r4
 800dab4:	4798      	blx	r3
 800dab6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800daba:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800dabe:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 800dac2:	1a5b      	subs	r3, r3, r1
 800dac4:	440a      	add	r2, r1
 800dac6:	b21b      	sxth	r3, r3
 800dac8:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 800dacc:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	f47f aeda 	bne.w	800d88a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 800dad6:	fa1f f189 	uxth.w	r1, r9
 800dada:	4650      	mov	r0, sl
 800dadc:	f7ff f9e6 	bl	800ceac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 800dae0:	e6d3      	b.n	800d88a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 800dae2:	882e      	ldrh	r6, [r5, #0]
 800dae4:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 800dae8:	42b3      	cmp	r3, r6
 800daea:	f67f ae98 	bls.w	800d81e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 800daee:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 800daf2:	ab07      	add	r3, sp, #28
 800daf4:	f852 0fac 	ldr.w	r0, [r2, #172]!
 800daf8:	6851      	ldr	r1, [r2, #4]
 800dafa:	c303      	stmia	r3!, {r0, r1}
 800dafc:	a807      	add	r0, sp, #28
 800dafe:	f7fb fa70 	bl	8008fe2 <_ZNK8touchgfx4Rect7isEmptyEv>
 800db02:	b920      	cbnz	r0, 800db0e <_ZN8touchgfx11Application15drawCachedAreasEv+0x54e>
 800db04:	6823      	ldr	r3, [r4, #0]
 800db06:	a907      	add	r1, sp, #28
 800db08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800db0a:	4620      	mov	r0, r4
 800db0c:	4798      	blx	r3
 800db0e:	3601      	adds	r6, #1
 800db10:	b2b6      	uxth	r6, r6
 800db12:	e7e7      	b.n	800dae4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x524>
 800db14:	20012658 	.word	0x20012658

0800db18 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 800db18:	4b03      	ldr	r3, [pc, #12]	@ (800db28 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 800db1a:	2200      	movs	r2, #0
 800db1c:	801a      	strh	r2, [r3, #0]
 800db1e:	805a      	strh	r2, [r3, #2]
 800db20:	809a      	strh	r2, [r3, #4]
 800db22:	80da      	strh	r2, [r3, #6]
 800db24:	4770      	bx	lr
 800db26:	bf00      	nop
 800db28:	2001269c 	.word	0x2001269c

0800db2c <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list>:
 800db2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db30:	4604      	mov	r4, r0
 800db32:	b09c      	sub	sp, #112	@ 0x70
 800db34:	a803      	add	r0, sp, #12
 800db36:	4615      	mov	r5, r2
 800db38:	460e      	mov	r6, r1
 800db3a:	461f      	mov	r7, r3
 800db3c:	f000 fd89 	bl	800e652 <_ZN8touchgfx12TextProviderC1Ev>
 800db40:	6823      	ldr	r3, [r4, #0]
 800db42:	4620      	mov	r0, r4
 800db44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800db46:	4798      	blx	r3
 800db48:	6823      	ldr	r3, [r4, #0]
 800db4a:	4680      	mov	r8, r0
 800db4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db4e:	4620      	mov	r0, r4
 800db50:	4798      	blx	r3
 800db52:	4629      	mov	r1, r5
 800db54:	9000      	str	r0, [sp, #0]
 800db56:	4643      	mov	r3, r8
 800db58:	463a      	mov	r2, r7
 800db5a:	a803      	add	r0, sp, #12
 800db5c:	f000 fdd4 	bl	800e708 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800db60:	2500      	movs	r5, #0
 800db62:	a803      	add	r0, sp, #12
 800db64:	f000 fd9c 	bl	800e6a0 <_ZN8touchgfx12TextProvider11endOfStringEv>
 800db68:	b958      	cbnz	r0, 800db82 <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list+0x56>
 800db6a:	4633      	mov	r3, r6
 800db6c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800db70:	4621      	mov	r1, r4
 800db72:	a803      	add	r0, sp, #12
 800db74:	f7fd fce7 	bl	800b546 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800db78:	b203      	sxth	r3, r0
 800db7a:	42ab      	cmp	r3, r5
 800db7c:	bfc8      	it	gt
 800db7e:	4605      	movgt	r5, r0
 800db80:	e7ef      	b.n	800db62 <_ZNK8touchgfx4Font17getStringWidthRTLEhPKtSt9__va_list+0x36>
 800db82:	4628      	mov	r0, r5
 800db84:	b01c      	add	sp, #112	@ 0x70
 800db86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800db8a <_ZNK8touchgfx4Font12getCharWidthEt>:
 800db8a:	b508      	push	{r3, lr}
 800db8c:	6803      	ldr	r3, [r0, #0]
 800db8e:	68db      	ldr	r3, [r3, #12]
 800db90:	4798      	blx	r3
 800db92:	b128      	cbz	r0, 800dba0 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 800db94:	7b43      	ldrb	r3, [r0, #13]
 800db96:	7a80      	ldrb	r0, [r0, #10]
 800db98:	005b      	lsls	r3, r3, #1
 800db9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800db9e:	4318      	orrs	r0, r3
 800dba0:	bd08      	pop	{r3, pc}

0800dba2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 800dba2:	b40e      	push	{r1, r2, r3}
 800dba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dba6:	b09e      	sub	sp, #120	@ 0x78
 800dba8:	ab23      	add	r3, sp, #140	@ 0x8c
 800dbaa:	4605      	mov	r5, r0
 800dbac:	f853 4b04 	ldr.w	r4, [r3], #4
 800dbb0:	9303      	str	r3, [sp, #12]
 800dbb2:	a805      	add	r0, sp, #20
 800dbb4:	f000 fd4d 	bl	800e652 <_ZN8touchgfx12TextProviderC1Ev>
 800dbb8:	682b      	ldr	r3, [r5, #0]
 800dbba:	4628      	mov	r0, r5
 800dbbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dbbe:	4798      	blx	r3
 800dbc0:	682b      	ldr	r3, [r5, #0]
 800dbc2:	4606      	mov	r6, r0
 800dbc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dbc6:	4628      	mov	r0, r5
 800dbc8:	4798      	blx	r3
 800dbca:	4633      	mov	r3, r6
 800dbcc:	ae1e      	add	r6, sp, #120	@ 0x78
 800dbce:	4621      	mov	r1, r4
 800dbd0:	9000      	str	r0, [sp, #0]
 800dbd2:	9a03      	ldr	r2, [sp, #12]
 800dbd4:	2400      	movs	r4, #0
 800dbd6:	a805      	add	r0, sp, #20
 800dbd8:	f000 fd96 	bl	800e708 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800dbdc:	f846 4d68 	str.w	r4, [r6, #-104]!
 800dbe0:	462a      	mov	r2, r5
 800dbe2:	4633      	mov	r3, r6
 800dbe4:	4621      	mov	r1, r4
 800dbe6:	a805      	add	r0, sp, #20
 800dbe8:	f001 fcea 	bl	800f5c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800dbec:	b1f0      	cbz	r0, 800dc2c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 800dbee:	280a      	cmp	r0, #10
 800dbf0:	d018      	beq.n	800dc24 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 800dbf2:	9f04      	ldr	r7, [sp, #16]
 800dbf4:	b1b7      	cbz	r7, 800dc24 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 800dbf6:	7b78      	ldrb	r0, [r7, #13]
 800dbf8:	7a3b      	ldrb	r3, [r7, #8]
 800dbfa:	88ea      	ldrh	r2, [r5, #6]
 800dbfc:	00c1      	lsls	r1, r0, #3
 800dbfe:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800dc02:	4319      	orrs	r1, r3
 800dc04:	0643      	lsls	r3, r0, #25
 800dc06:	bf44      	itt	mi
 800dc08:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 800dc0c:	b219      	sxthmi	r1, r3
 800dc0e:	0100      	lsls	r0, r0, #4
 800dc10:	79fb      	ldrb	r3, [r7, #7]
 800dc12:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 800dc16:	4303      	orrs	r3, r0
 800dc18:	4413      	add	r3, r2
 800dc1a:	1a5b      	subs	r3, r3, r1
 800dc1c:	b21b      	sxth	r3, r3
 800dc1e:	429c      	cmp	r4, r3
 800dc20:	bfb8      	it	lt
 800dc22:	461c      	movlt	r4, r3
 800dc24:	4633      	mov	r3, r6
 800dc26:	462a      	mov	r2, r5
 800dc28:	2100      	movs	r1, #0
 800dc2a:	e7dc      	b.n	800dbe6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 800dc2c:	b2a0      	uxth	r0, r4
 800dc2e:	b01e      	add	sp, #120	@ 0x78
 800dc30:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800dc34:	b003      	add	sp, #12
 800dc36:	4770      	bx	lr

0800dc38 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 800dc38:	7a43      	ldrb	r3, [r0, #9]
 800dc3a:	8880      	ldrh	r0, [r0, #4]
 800dc3c:	4418      	add	r0, r3
 800dc3e:	b280      	uxth	r0, r0
 800dc40:	4770      	bx	lr

0800dc42 <_ZNK8touchgfx4Font13getFontHeightEv>:
 800dc42:	6803      	ldr	r3, [r0, #0]
 800dc44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc46:	4718      	bx	r3

0800dc48 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 800dc48:	b40e      	push	{r1, r2, r3}
 800dc4a:	b570      	push	{r4, r5, r6, lr}
 800dc4c:	b09d      	sub	sp, #116	@ 0x74
 800dc4e:	ab21      	add	r3, sp, #132	@ 0x84
 800dc50:	4604      	mov	r4, r0
 800dc52:	f853 5b04 	ldr.w	r5, [r3], #4
 800dc56:	9302      	str	r3, [sp, #8]
 800dc58:	a803      	add	r0, sp, #12
 800dc5a:	f000 fcfa 	bl	800e652 <_ZN8touchgfx12TextProviderC1Ev>
 800dc5e:	6823      	ldr	r3, [r4, #0]
 800dc60:	4620      	mov	r0, r4
 800dc62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dc64:	4798      	blx	r3
 800dc66:	6823      	ldr	r3, [r4, #0]
 800dc68:	4606      	mov	r6, r0
 800dc6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc6c:	4620      	mov	r0, r4
 800dc6e:	4798      	blx	r3
 800dc70:	4633      	mov	r3, r6
 800dc72:	9000      	str	r0, [sp, #0]
 800dc74:	9a02      	ldr	r2, [sp, #8]
 800dc76:	4629      	mov	r1, r5
 800dc78:	a803      	add	r0, sp, #12
 800dc7a:	f000 fd45 	bl	800e708 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800dc7e:	a803      	add	r0, sp, #12
 800dc80:	f001 fd6c 	bl	800f75c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800dc84:	2401      	movs	r4, #1
 800dc86:	b2a3      	uxth	r3, r4
 800dc88:	b140      	cbz	r0, 800dc9c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 800dc8a:	280a      	cmp	r0, #10
 800dc8c:	bf08      	it	eq
 800dc8e:	3301      	addeq	r3, #1
 800dc90:	a803      	add	r0, sp, #12
 800dc92:	bf08      	it	eq
 800dc94:	b21c      	sxtheq	r4, r3
 800dc96:	f001 fd61 	bl	800f75c <_ZN8touchgfx12TextProvider11getNextCharEv>
 800dc9a:	e7f4      	b.n	800dc86 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	b01d      	add	sp, #116	@ 0x74
 800dca0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dca4:	b003      	add	sp, #12
 800dca6:	4770      	bx	lr

0800dca8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 800dca8:	b40e      	push	{r1, r2, r3}
 800dcaa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcac:	b09e      	sub	sp, #120	@ 0x78
 800dcae:	ab23      	add	r3, sp, #140	@ 0x8c
 800dcb0:	4604      	mov	r4, r0
 800dcb2:	f853 5b04 	ldr.w	r5, [r3], #4
 800dcb6:	9303      	str	r3, [sp, #12]
 800dcb8:	a805      	add	r0, sp, #20
 800dcba:	f000 fcca 	bl	800e652 <_ZN8touchgfx12TextProviderC1Ev>
 800dcbe:	6823      	ldr	r3, [r4, #0]
 800dcc0:	4620      	mov	r0, r4
 800dcc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dcc4:	4798      	blx	r3
 800dcc6:	6823      	ldr	r3, [r4, #0]
 800dcc8:	4606      	mov	r6, r0
 800dcca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dccc:	4620      	mov	r0, r4
 800dcce:	4798      	blx	r3
 800dcd0:	4633      	mov	r3, r6
 800dcd2:	4629      	mov	r1, r5
 800dcd4:	9000      	str	r0, [sp, #0]
 800dcd6:	9a03      	ldr	r2, [sp, #12]
 800dcd8:	a805      	add	r0, sp, #20
 800dcda:	ad1e      	add	r5, sp, #120	@ 0x78
 800dcdc:	f000 fd14 	bl	800e708 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800dce0:	2100      	movs	r1, #0
 800dce2:	f845 1d68 	str.w	r1, [r5, #-104]!
 800dce6:	4622      	mov	r2, r4
 800dce8:	462b      	mov	r3, r5
 800dcea:	a805      	add	r0, sp, #20
 800dcec:	f001 fc68 	bl	800f5c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800dcf0:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 800dcf4:	b1d8      	cbz	r0, 800dd2e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 800dcf6:	280a      	cmp	r0, #10
 800dcf8:	d012      	beq.n	800dd20 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800dcfa:	9804      	ldr	r0, [sp, #16]
 800dcfc:	b180      	cbz	r0, 800dd20 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 800dcfe:	7b47      	ldrb	r7, [r0, #13]
 800dd00:	88e2      	ldrh	r2, [r4, #6]
 800dd02:	00fb      	lsls	r3, r7, #3
 800dd04:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800dd08:	7a03      	ldrb	r3, [r0, #8]
 800dd0a:	430b      	orrs	r3, r1
 800dd0c:	0679      	lsls	r1, r7, #25
 800dd0e:	bf44      	itt	mi
 800dd10:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800dd14:	b21b      	sxthmi	r3, r3
 800dd16:	1ad3      	subs	r3, r2, r3
 800dd18:	b21b      	sxth	r3, r3
 800dd1a:	429e      	cmp	r6, r3
 800dd1c:	bfa8      	it	ge
 800dd1e:	461e      	movge	r6, r3
 800dd20:	462b      	mov	r3, r5
 800dd22:	4622      	mov	r2, r4
 800dd24:	2100      	movs	r1, #0
 800dd26:	a805      	add	r0, sp, #20
 800dd28:	f001 fc4a 	bl	800f5c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 800dd2c:	e7e2      	b.n	800dcf4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 800dd2e:	4630      	mov	r0, r6
 800dd30:	b01e      	add	sp, #120	@ 0x78
 800dd32:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800dd36:	b003      	add	sp, #12
 800dd38:	4770      	bx	lr

0800dd3a <_ZNK8touchgfx8Drawable10invalidateEv>:
 800dd3a:	b513      	push	{r0, r1, r4, lr}
 800dd3c:	6803      	ldr	r3, [r0, #0]
 800dd3e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800dd42:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800dd46:	f8ad 1004 	strh.w	r1, [sp, #4]
 800dd4a:	2400      	movs	r4, #0
 800dd4c:	9400      	str	r4, [sp, #0]
 800dd4e:	f8ad 2006 	strh.w	r2, [sp, #6]
 800dd52:	691b      	ldr	r3, [r3, #16]
 800dd54:	4669      	mov	r1, sp
 800dd56:	4798      	blx	r3
 800dd58:	b002      	add	sp, #8
 800dd5a:	bd10      	pop	{r4, pc}

0800dd5c <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 800dd5c:	b538      	push	{r3, r4, r5, lr}
 800dd5e:	680b      	ldr	r3, [r1, #0]
 800dd60:	460c      	mov	r4, r1
 800dd62:	68db      	ldr	r3, [r3, #12]
 800dd64:	4605      	mov	r5, r0
 800dd66:	4798      	blx	r3
 800dd68:	6823      	ldr	r3, [r4, #0]
 800dd6a:	4620      	mov	r0, r4
 800dd6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd6e:	4629      	mov	r1, r5
 800dd70:	4798      	blx	r3
 800dd72:	4628      	mov	r0, r5
 800dd74:	bd38      	pop	{r3, r4, r5, pc}

0800dd76 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 800dd76:	b410      	push	{r4}
 800dd78:	880a      	ldrh	r2, [r1, #0]
 800dd7a:	8884      	ldrh	r4, [r0, #4]
 800dd7c:	4422      	add	r2, r4
 800dd7e:	800a      	strh	r2, [r1, #0]
 800dd80:	88c4      	ldrh	r4, [r0, #6]
 800dd82:	884a      	ldrh	r2, [r1, #2]
 800dd84:	4422      	add	r2, r4
 800dd86:	804a      	strh	r2, [r1, #2]
 800dd88:	6940      	ldr	r0, [r0, #20]
 800dd8a:	b120      	cbz	r0, 800dd96 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 800dd8c:	6803      	ldr	r3, [r0, #0]
 800dd8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd94:	4718      	bx	r3
 800dd96:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd9a:	4770      	bx	lr

0800dd9c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 800dd9c:	b570      	push	{r4, r5, r6, lr}
 800dd9e:	8882      	ldrh	r2, [r0, #4]
 800dda0:	880b      	ldrh	r3, [r1, #0]
 800dda2:	4413      	add	r3, r2
 800dda4:	800b      	strh	r3, [r1, #0]
 800dda6:	88c2      	ldrh	r2, [r0, #6]
 800dda8:	884b      	ldrh	r3, [r1, #2]
 800ddaa:	460c      	mov	r4, r1
 800ddac:	4413      	add	r3, r2
 800ddae:	804b      	strh	r3, [r1, #2]
 800ddb0:	4605      	mov	r5, r0
 800ddb2:	1d01      	adds	r1, r0, #4
 800ddb4:	4620      	mov	r0, r4
 800ddb6:	f7fb f8d1 	bl	8008f5c <_ZN8touchgfx4RectaNERKS0_>
 800ddba:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	dd0b      	ble.n	800ddda <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800ddc2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	dd07      	ble.n	800ddda <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800ddca:	6968      	ldr	r0, [r5, #20]
 800ddcc:	b128      	cbz	r0, 800ddda <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 800ddce:	6803      	ldr	r3, [r0, #0]
 800ddd0:	4621      	mov	r1, r4
 800ddd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ddd8:	4718      	bx	r3
 800ddda:	bd70      	pop	{r4, r5, r6, pc}

0800dddc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 800dddc:	b570      	push	{r4, r5, r6, lr}
 800ddde:	8882      	ldrh	r2, [r0, #4]
 800dde0:	880b      	ldrh	r3, [r1, #0]
 800dde2:	4413      	add	r3, r2
 800dde4:	800b      	strh	r3, [r1, #0]
 800dde6:	88c2      	ldrh	r2, [r0, #6]
 800dde8:	884b      	ldrh	r3, [r1, #2]
 800ddea:	460c      	mov	r4, r1
 800ddec:	4413      	add	r3, r2
 800ddee:	804b      	strh	r3, [r1, #2]
 800ddf0:	4605      	mov	r5, r0
 800ddf2:	1d01      	adds	r1, r0, #4
 800ddf4:	4620      	mov	r0, r4
 800ddf6:	f7fb f8b1 	bl	8008f5c <_ZN8touchgfx4RectaNERKS0_>
 800ddfa:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	dd19      	ble.n	800de36 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 800de02:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 800de06:	2b00      	cmp	r3, #0
 800de08:	dd15      	ble.n	800de36 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 800de0a:	6968      	ldr	r0, [r5, #20]
 800de0c:	b128      	cbz	r0, 800de1a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 800de0e:	6803      	ldr	r3, [r0, #0]
 800de10:	4621      	mov	r1, r4
 800de12:	691b      	ldr	r3, [r3, #16]
 800de14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de18:	4718      	bx	r3
 800de1a:	4b07      	ldr	r3, [pc, #28]	@ (800de38 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	3304      	adds	r3, #4
 800de20:	429d      	cmp	r5, r3
 800de22:	d108      	bne.n	800de36 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 800de24:	f7fe ff0e 	bl	800cc44 <_ZN8touchgfx11Application11getInstanceEv>
 800de28:	6803      	ldr	r3, [r0, #0]
 800de2a:	6821      	ldr	r1, [r4, #0]
 800de2c:	6862      	ldr	r2, [r4, #4]
 800de2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de34:	4718      	bx	r3
 800de36:	bd70      	pop	{r4, r5, r6, pc}
 800de38:	20012694 	.word	0x20012694

0800de3c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 800de3c:	b570      	push	{r4, r5, r6, lr}
 800de3e:	4604      	mov	r4, r0
 800de40:	4616      	mov	r6, r2
 800de42:	460d      	mov	r5, r1
 800de44:	b901      	cbnz	r1, 800de48 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 800de46:	b192      	cbz	r2, 800de6e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 800de48:	6823      	ldr	r3, [r4, #0]
 800de4a:	4620      	mov	r0, r4
 800de4c:	699b      	ldr	r3, [r3, #24]
 800de4e:	4798      	blx	r3
 800de50:	88e2      	ldrh	r2, [r4, #6]
 800de52:	88a1      	ldrh	r1, [r4, #4]
 800de54:	4432      	add	r2, r6
 800de56:	4429      	add	r1, r5
 800de58:	4620      	mov	r0, r4
 800de5a:	b212      	sxth	r2, r2
 800de5c:	b209      	sxth	r1, r1
 800de5e:	f7f4 fe03 	bl	8002a68 <_ZN8touchgfx8Drawable5setXYEss>
 800de62:	6823      	ldr	r3, [r4, #0]
 800de64:	4620      	mov	r0, r4
 800de66:	699b      	ldr	r3, [r3, #24]
 800de68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800de6c:	4718      	bx	r3
 800de6e:	bd70      	pop	{r4, r5, r6, pc}

0800de70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 800de70:	b510      	push	{r4, lr}
 800de72:	4604      	mov	r4, r0
 800de74:	4608      	mov	r0, r1
 800de76:	2300      	movs	r3, #0
 800de78:	8023      	strh	r3, [r4, #0]
 800de7a:	8063      	strh	r3, [r4, #2]
 800de7c:	6803      	ldr	r3, [r0, #0]
 800de7e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800de82:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 800de86:	80a1      	strh	r1, [r4, #4]
 800de88:	80e2      	strh	r2, [r4, #6]
 800de8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de8c:	4621      	mov	r1, r4
 800de8e:	4798      	blx	r3
 800de90:	4620      	mov	r0, r4
 800de92:	bd10      	pop	{r4, pc}

0800de94 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 800de94:	b530      	push	{r4, r5, lr}
 800de96:	8083      	strh	r3, [r0, #4]
 800de98:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800de9c:	80c3      	strh	r3, [r0, #6]
 800de9e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800dea2:	7203      	strb	r3, [r0, #8]
 800dea4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800dea8:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800deac:	7243      	strb	r3, [r0, #9]
 800deae:	7a83      	ldrb	r3, [r0, #10]
 800deb0:	6141      	str	r1, [r0, #20]
 800deb2:	f365 0306 	bfi	r3, r5, #0, #7
 800deb6:	f89d 501c 	ldrb.w	r5, [sp, #28]
 800deba:	8302      	strh	r2, [r0, #24]
 800debc:	f365 13c7 	bfi	r3, r5, #7, #1
 800dec0:	7283      	strb	r3, [r0, #10]
 800dec2:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800dec6:	72c3      	strb	r3, [r0, #11]
 800dec8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800decc:	7303      	strb	r3, [r0, #12]
 800dece:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 800ded2:	81c3      	strh	r3, [r0, #14]
 800ded4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 800ded8:	8203      	strh	r3, [r0, #16]
 800deda:	4b01      	ldr	r3, [pc, #4]	@ (800dee0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 800dedc:	6003      	str	r3, [r0, #0]
 800dede:	bd30      	pop	{r4, r5, pc}
 800dee0:	08015c18 	.word	0x08015c18

0800dee4 <_ZNK8touchgfx9ConstFont4findEt>:
 800dee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dee6:	6944      	ldr	r4, [r0, #20]
 800dee8:	b3bc      	cbz	r4, 800df5a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800deea:	88a3      	ldrh	r3, [r4, #4]
 800deec:	8b02      	ldrh	r2, [r0, #24]
 800deee:	1acb      	subs	r3, r1, r3
 800def0:	f102 32ff 	add.w	r2, r2, #4294967295
 800def4:	d431      	bmi.n	800df5a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800def6:	4293      	cmp	r3, r2
 800def8:	dd0c      	ble.n	800df14 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 800defa:	230e      	movs	r3, #14
 800defc:	fb03 4302 	mla	r3, r3, r2, r4
 800df00:	889b      	ldrh	r3, [r3, #4]
 800df02:	1a5b      	subs	r3, r3, r1
 800df04:	1ad3      	subs	r3, r2, r3
 800df06:	429a      	cmp	r2, r3
 800df08:	db27      	blt.n	800df5a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	bfbc      	itt	lt
 800df0e:	2302      	movlt	r3, #2
 800df10:	fb92 f3f3 	sdivlt	r3, r2, r3
 800df14:	2500      	movs	r5, #0
 800df16:	260e      	movs	r6, #14
 800df18:	4295      	cmp	r5, r2
 800df1a:	dc1e      	bgt.n	800df5a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800df1c:	fb06 4003 	mla	r0, r6, r3, r4
 800df20:	8887      	ldrh	r7, [r0, #4]
 800df22:	42b9      	cmp	r1, r7
 800df24:	d01a      	beq.n	800df5c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 800df26:	d20d      	bcs.n	800df44 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 800df28:	1e5a      	subs	r2, r3, #1
 800df2a:	4295      	cmp	r5, r2
 800df2c:	dc15      	bgt.n	800df5a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800df2e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 800df32:	1a5b      	subs	r3, r3, r1
 800df34:	1ad3      	subs	r3, r2, r3
 800df36:	429a      	cmp	r2, r3
 800df38:	db0f      	blt.n	800df5a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800df3a:	429d      	cmp	r5, r3
 800df3c:	ddec      	ble.n	800df18 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800df3e:	1953      	adds	r3, r2, r5
 800df40:	105b      	asrs	r3, r3, #1
 800df42:	e7e9      	b.n	800df18 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800df44:	1c5d      	adds	r5, r3, #1
 800df46:	42aa      	cmp	r2, r5
 800df48:	db07      	blt.n	800df5a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800df4a:	8a43      	ldrh	r3, [r0, #18]
 800df4c:	1acb      	subs	r3, r1, r3
 800df4e:	442b      	add	r3, r5
 800df50:	429d      	cmp	r5, r3
 800df52:	dc02      	bgt.n	800df5a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 800df54:	429a      	cmp	r2, r3
 800df56:	dadf      	bge.n	800df18 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 800df58:	e7f1      	b.n	800df3e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 800df5a:	2000      	movs	r0, #0
 800df5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800df5e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 800df5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df60:	4604      	mov	r4, r0
 800df62:	4617      	mov	r7, r2
 800df64:	461e      	mov	r6, r3
 800df66:	b911      	cbnz	r1, 800df6e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 800df68:	2500      	movs	r5, #0
 800df6a:	4628      	mov	r0, r5
 800df6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df6e:	290a      	cmp	r1, #10
 800df70:	d0fa      	beq.n	800df68 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800df72:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 800df76:	4291      	cmp	r1, r2
 800df78:	d0f6      	beq.n	800df68 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800df7a:	f242 020b 	movw	r2, #8203	@ 0x200b
 800df7e:	4291      	cmp	r1, r2
 800df80:	d0f2      	beq.n	800df68 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800df82:	f7ff ffaf 	bl	800dee4 <_ZNK8touchgfx9ConstFont4findEt>
 800df86:	4605      	mov	r5, r0
 800df88:	b950      	cbnz	r0, 800dfa0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 800df8a:	6823      	ldr	r3, [r4, #0]
 800df8c:	4620      	mov	r0, r4
 800df8e:	691b      	ldr	r3, [r3, #16]
 800df90:	4798      	blx	r3
 800df92:	4601      	mov	r1, r0
 800df94:	4620      	mov	r0, r4
 800df96:	f7ff ffa5 	bl	800dee4 <_ZNK8touchgfx9ConstFont4findEt>
 800df9a:	4605      	mov	r5, r0
 800df9c:	2800      	cmp	r0, #0
 800df9e:	d0e3      	beq.n	800df68 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 800dfa0:	6823      	ldr	r3, [r4, #0]
 800dfa2:	4629      	mov	r1, r5
 800dfa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dfa6:	4620      	mov	r0, r4
 800dfa8:	4798      	blx	r3
 800dfaa:	6038      	str	r0, [r7, #0]
 800dfac:	6823      	ldr	r3, [r4, #0]
 800dfae:	4620      	mov	r0, r4
 800dfb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dfb2:	4798      	blx	r3
 800dfb4:	7030      	strb	r0, [r6, #0]
 800dfb6:	e7d8      	b.n	800df6a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0800dfb8 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 800dfb8:	2000      	movs	r0, #0
 800dfba:	4770      	bx	lr

0800dfbc <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 800dfbc:	2001      	movs	r0, #1
 800dfbe:	4770      	bx	lr

0800dfc0 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 800dfc0:	2002      	movs	r0, #2
 800dfc2:	4770      	bx	lr

0800dfc4 <_ZN8touchgfx6ScreenD1Ev>:
 800dfc4:	4770      	bx	lr

0800dfc6 <_ZN8touchgfx12GestureEventD1Ev>:
 800dfc6:	4770      	bx	lr

0800dfc8 <_ZN8touchgfx9DragEventD1Ev>:
 800dfc8:	4770      	bx	lr

0800dfca <_ZN8touchgfx10ClickEventD1Ev>:
 800dfca:	4770      	bx	lr

0800dfcc <_ZN8touchgfx10ClickEventD0Ev>:
 800dfcc:	b510      	push	{r4, lr}
 800dfce:	210c      	movs	r1, #12
 800dfd0:	4604      	mov	r4, r0
 800dfd2:	f005 f9a1 	bl	8013318 <_ZdlPvj>
 800dfd6:	4620      	mov	r0, r4
 800dfd8:	bd10      	pop	{r4, pc}

0800dfda <_ZN8touchgfx9DragEventD0Ev>:
 800dfda:	b510      	push	{r4, lr}
 800dfdc:	2110      	movs	r1, #16
 800dfde:	4604      	mov	r4, r0
 800dfe0:	f005 f99a 	bl	8013318 <_ZdlPvj>
 800dfe4:	4620      	mov	r0, r4
 800dfe6:	bd10      	pop	{r4, pc}

0800dfe8 <_ZN8touchgfx12GestureEventD0Ev>:
 800dfe8:	b510      	push	{r4, lr}
 800dfea:	210c      	movs	r1, #12
 800dfec:	4604      	mov	r4, r0
 800dfee:	f005 f993 	bl	8013318 <_ZdlPvj>
 800dff2:	4620      	mov	r0, r4
 800dff4:	bd10      	pop	{r4, pc}

0800dff6 <_ZN8touchgfx6ScreenD0Ev>:
 800dff6:	b510      	push	{r4, lr}
 800dff8:	213c      	movs	r1, #60	@ 0x3c
 800dffa:	4604      	mov	r4, r0
 800dffc:	f005 f98c 	bl	8013318 <_ZdlPvj>
 800e000:	4620      	mov	r0, r4
 800e002:	bd10      	pop	{r4, pc}

0800e004 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 800e004:	b530      	push	{r4, r5, lr}
 800e006:	460d      	mov	r5, r1
 800e008:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800e00a:	b087      	sub	sp, #28
 800e00c:	4604      	mov	r4, r0
 800e00e:	b301      	cbz	r1, 800e052 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 800e010:	a801      	add	r0, sp, #4
 800e012:	f7ff ff2d 	bl	800de70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e016:	892a      	ldrh	r2, [r5, #8]
 800e018:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800e01c:	7928      	ldrb	r0, [r5, #4]
 800e01e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 800e022:	f88d 0010 	strb.w	r0, [sp, #16]
 800e026:	1ad2      	subs	r2, r2, r3
 800e028:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 800e02a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800e02c:	f8ad 1012 	strh.w	r1, [sp, #18]
 800e030:	441a      	add	r2, r3
 800e032:	896b      	ldrh	r3, [r5, #10]
 800e034:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 800e038:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e03c:	1b5b      	subs	r3, r3, r5
 800e03e:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 800e040:	442b      	add	r3, r5
 800e042:	4d05      	ldr	r5, [pc, #20]	@ (800e058 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 800e044:	9503      	str	r5, [sp, #12]
 800e046:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e04a:	6803      	ldr	r3, [r0, #0]
 800e04c:	a903      	add	r1, sp, #12
 800e04e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e050:	4798      	blx	r3
 800e052:	b007      	add	sp, #28
 800e054:	bd30      	pop	{r4, r5, pc}
 800e056:	bf00      	nop
 800e058:	08015ca8 	.word	0x08015ca8

0800e05c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 800e05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e060:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800e062:	b08a      	sub	sp, #40	@ 0x28
 800e064:	4604      	mov	r4, r0
 800e066:	460d      	mov	r5, r1
 800e068:	b113      	cbz	r3, 800e070 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 800e06a:	790b      	ldrb	r3, [r1, #4]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d044      	beq.n	800e0fa <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800e070:	f104 0804 	add.w	r8, r4, #4
 800e074:	4641      	mov	r1, r8
 800e076:	a803      	add	r0, sp, #12
 800e078:	f7ff fefa 	bl	800de70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e07c:	792b      	ldrb	r3, [r5, #4]
 800e07e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 800e082:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 800e086:	b983      	cbnz	r3, 800e0aa <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 800e088:	892a      	ldrh	r2, [r5, #8]
 800e08a:	88e9      	ldrh	r1, [r5, #6]
 800e08c:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 800e090:	1b92      	subs	r2, r2, r6
 800e092:	1bc9      	subs	r1, r1, r7
 800e094:	9301      	str	r3, [sp, #4]
 800e096:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 800e09a:	9300      	str	r3, [sp, #0]
 800e09c:	b212      	sxth	r2, r2
 800e09e:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 800e0a2:	b209      	sxth	r1, r1
 800e0a4:	4640      	mov	r0, r8
 800e0a6:	f7fa fe75 	bl	8008d94 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 800e0aa:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e0ac:	b329      	cbz	r1, 800e0fa <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800e0ae:	a805      	add	r0, sp, #20
 800e0b0:	f7ff fede 	bl	800de70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e0b4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800e0b8:	792b      	ldrb	r3, [r5, #4]
 800e0ba:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800e0bc:	f88d 3020 	strb.w	r3, [sp, #32]
 800e0c0:	1abf      	subs	r7, r7, r2
 800e0c2:	88ea      	ldrh	r2, [r5, #6]
 800e0c4:	4417      	add	r7, r2
 800e0c6:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 800e0c8:	4417      	add	r7, r2
 800e0ca:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800e0ce:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 800e0d2:	1ab6      	subs	r6, r6, r2
 800e0d4:	892a      	ldrh	r2, [r5, #8]
 800e0d6:	4416      	add	r6, r2
 800e0d8:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800e0da:	4416      	add	r6, r2
 800e0dc:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 800e0e0:	4a07      	ldr	r2, [pc, #28]	@ (800e100 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 800e0e2:	9207      	str	r2, [sp, #28]
 800e0e4:	2600      	movs	r6, #0
 800e0e6:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 800e0ea:	6803      	ldr	r3, [r0, #0]
 800e0ec:	a907      	add	r1, sp, #28
 800e0ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e0f0:	4798      	blx	r3
 800e0f2:	792b      	ldrb	r3, [r5, #4]
 800e0f4:	b10b      	cbz	r3, 800e0fa <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 800e0f6:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 800e0fa:	b00a      	add	sp, #40	@ 0x28
 800e0fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e100:	08015c80 	.word	0x08015c80

0800e104 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 800e104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e108:	460c      	mov	r4, r1
 800e10a:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800e10c:	b088      	sub	sp, #32
 800e10e:	4605      	mov	r5, r0
 800e110:	2900      	cmp	r1, #0
 800e112:	d06d      	beq.n	800e1f0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 800e114:	4668      	mov	r0, sp
 800e116:	f7ff feab 	bl	800de70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e11a:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 800e11c:	88e3      	ldrh	r3, [r4, #6]
 800e11e:	f9bd 8000 	ldrsh.w	r8, [sp]
 800e122:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 800e126:	440b      	add	r3, r1
 800e128:	b21b      	sxth	r3, r3
 800e12a:	4543      	cmp	r3, r8
 800e12c:	db31      	blt.n	800e192 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e12e:	f8bd c004 	ldrh.w	ip, [sp, #4]
 800e132:	44c4      	add	ip, r8
 800e134:	fa0f fc8c 	sxth.w	ip, ip
 800e138:	4563      	cmp	r3, ip
 800e13a:	da2a      	bge.n	800e192 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e13c:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 800e13e:	8926      	ldrh	r6, [r4, #8]
 800e140:	4416      	add	r6, r2
 800e142:	b236      	sxth	r6, r6
 800e144:	42be      	cmp	r6, r7
 800e146:	db24      	blt.n	800e192 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e148:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 800e14c:	4438      	add	r0, r7
 800e14e:	b200      	sxth	r0, r0
 800e150:	4286      	cmp	r6, r0
 800e152:	da1e      	bge.n	800e192 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e154:	8963      	ldrh	r3, [r4, #10]
 800e156:	4419      	add	r1, r3
 800e158:	b209      	sxth	r1, r1
 800e15a:	4541      	cmp	r1, r8
 800e15c:	db08      	blt.n	800e170 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800e15e:	4561      	cmp	r1, ip
 800e160:	da06      	bge.n	800e170 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800e162:	89a3      	ldrh	r3, [r4, #12]
 800e164:	441a      	add	r2, r3
 800e166:	b212      	sxth	r2, r2
 800e168:	42ba      	cmp	r2, r7
 800e16a:	db01      	blt.n	800e170 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 800e16c:	4282      	cmp	r2, r0
 800e16e:	db10      	blt.n	800e192 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 800e170:	4b21      	ldr	r3, [pc, #132]	@ (800e1f8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 800e172:	9304      	str	r3, [sp, #16]
 800e174:	2302      	movs	r3, #2
 800e176:	f88d 3014 	strb.w	r3, [sp, #20]
 800e17a:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800e17c:	2300      	movs	r3, #0
 800e17e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e182:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e186:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e18a:	6803      	ldr	r3, [r0, #0]
 800e18c:	a904      	add	r1, sp, #16
 800e18e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e190:	4798      	blx	r3
 800e192:	1d29      	adds	r1, r5, #4
 800e194:	a802      	add	r0, sp, #8
 800e196:	f7ff fe6b 	bl	800de70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e19a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800e19e:	88e0      	ldrh	r0, [r4, #6]
 800e1a0:	7921      	ldrb	r1, [r4, #4]
 800e1a2:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 800e1a6:	8922      	ldrh	r2, [r4, #8]
 800e1a8:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 800e1aa:	f88d 1014 	strb.w	r1, [sp, #20]
 800e1ae:	eba3 0808 	sub.w	r8, r3, r8
 800e1b2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800e1b6:	1bdf      	subs	r7, r3, r7
 800e1b8:	b2bb      	uxth	r3, r7
 800e1ba:	fa1f f888 	uxth.w	r8, r8
 800e1be:	8967      	ldrh	r7, [r4, #10]
 800e1c0:	89a4      	ldrh	r4, [r4, #12]
 800e1c2:	4440      	add	r0, r8
 800e1c4:	4460      	add	r0, ip
 800e1c6:	441a      	add	r2, r3
 800e1c8:	44b8      	add	r8, r7
 800e1ca:	4423      	add	r3, r4
 800e1cc:	f8ad 0016 	strh.w	r0, [sp, #22]
 800e1d0:	4433      	add	r3, r6
 800e1d2:	4432      	add	r2, r6
 800e1d4:	44e0      	add	r8, ip
 800e1d6:	4c09      	ldr	r4, [pc, #36]	@ (800e1fc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 800e1d8:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800e1da:	9404      	str	r4, [sp, #16]
 800e1dc:	f8ad 2018 	strh.w	r2, [sp, #24]
 800e1e0:	f8ad 801a 	strh.w	r8, [sp, #26]
 800e1e4:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e1e8:	6803      	ldr	r3, [r0, #0]
 800e1ea:	a904      	add	r1, sp, #16
 800e1ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e1ee:	4798      	blx	r3
 800e1f0:	b008      	add	sp, #32
 800e1f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1f6:	bf00      	nop
 800e1f8:	08015c80 	.word	0x08015c80
 800e1fc:	08015c94 	.word	0x08015c94

0800e200 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 800e200:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e202:	4604      	mov	r4, r0
 800e204:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 800e208:	3201      	adds	r2, #1
 800e20a:	d112      	bne.n	800e232 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 800e20c:	6803      	ldr	r3, [r0, #0]
 800e20e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 800e212:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800e216:	f8ad 1004 	strh.w	r1, [sp, #4]
 800e21a:	2500      	movs	r5, #0
 800e21c:	9500      	str	r5, [sp, #0]
 800e21e:	466d      	mov	r5, sp
 800e220:	4629      	mov	r1, r5
 800e222:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e228:	4798      	blx	r3
 800e22a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e22e:	e884 0003 	stmia.w	r4, {r0, r1}
 800e232:	4620      	mov	r0, r4
 800e234:	b003      	add	sp, #12
 800e236:	bd30      	pop	{r4, r5, pc}

0800e238 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 800e238:	b513      	push	{r0, r1, r4, lr}
 800e23a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 800e23e:	3301      	adds	r3, #1
 800e240:	4604      	mov	r4, r0
 800e242:	d109      	bne.n	800e258 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 800e244:	4601      	mov	r1, r0
 800e246:	4668      	mov	r0, sp
 800e248:	f7ff fe12 	bl	800de70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e24c:	f8bd 3000 	ldrh.w	r3, [sp]
 800e250:	8423      	strh	r3, [r4, #32]
 800e252:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e256:	8463      	strh	r3, [r4, #34]	@ 0x22
 800e258:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 800e25c:	b002      	add	sp, #8
 800e25e:	bd10      	pop	{r4, pc}

0800e260 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 800e260:	b513      	push	{r0, r1, r4, lr}
 800e262:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 800e266:	3301      	adds	r3, #1
 800e268:	4604      	mov	r4, r0
 800e26a:	d109      	bne.n	800e280 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 800e26c:	4601      	mov	r1, r0
 800e26e:	4668      	mov	r0, sp
 800e270:	f7ff fdfe 	bl	800de70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e274:	f8bd 3000 	ldrh.w	r3, [sp]
 800e278:	8423      	strh	r3, [r4, #32]
 800e27a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e27e:	8463      	strh	r3, [r4, #34]	@ 0x22
 800e280:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 800e284:	b002      	add	sp, #8
 800e286:	bd10      	pop	{r4, pc}

0800e288 <_ZN8touchgfx6ScreenC1Ev>:
 800e288:	b570      	push	{r4, r5, r6, lr}
 800e28a:	4605      	mov	r5, r0
 800e28c:	4b16      	ldr	r3, [pc, #88]	@ (800e2e8 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 800e28e:	f845 3b04 	str.w	r3, [r5], #4
 800e292:	2300      	movs	r3, #0
 800e294:	8103      	strh	r3, [r0, #8]
 800e296:	8143      	strh	r3, [r0, #10]
 800e298:	8183      	strh	r3, [r0, #12]
 800e29a:	81c3      	strh	r3, [r0, #14]
 800e29c:	8203      	strh	r3, [r0, #16]
 800e29e:	8243      	strh	r3, [r0, #18]
 800e2a0:	8283      	strh	r3, [r0, #20]
 800e2a2:	82c3      	strh	r3, [r0, #22]
 800e2a4:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800e2a8:	6203      	str	r3, [r0, #32]
 800e2aa:	8483      	strh	r3, [r0, #36]	@ 0x24
 800e2ac:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800e2ae:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 800e2b2:	4a0e      	ldr	r2, [pc, #56]	@ (800e2ec <_ZN8touchgfx6ScreenC1Ev+0x64>)
 800e2b4:	6343      	str	r3, [r0, #52]	@ 0x34
 800e2b6:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 800e2ba:	4b0d      	ldr	r3, [pc, #52]	@ (800e2f0 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 800e2bc:	6042      	str	r2, [r0, #4]
 800e2be:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e2c2:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800e2c4:	4a0b      	ldr	r2, [pc, #44]	@ (800e2f4 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 800e2c6:	4604      	mov	r4, r0
 800e2c8:	2101      	movs	r1, #1
 800e2ca:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 800e2ce:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 800e2d2:	f9b2 1000 	ldrsh.w	r1, [r2]
 800e2d6:	4628      	mov	r0, r5
 800e2d8:	4798      	blx	r3
 800e2da:	6863      	ldr	r3, [r4, #4]
 800e2dc:	4628      	mov	r0, r5
 800e2de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e2e0:	4631      	mov	r1, r6
 800e2e2:	4798      	blx	r3
 800e2e4:	4620      	mov	r0, r4
 800e2e6:	bd70      	pop	{r4, r5, r6, pc}
 800e2e8:	08015cbc 	.word	0x08015cbc
 800e2ec:	0801592c 	.word	0x0801592c
 800e2f0:	2001264e 	.word	0x2001264e
 800e2f4:	2001264c 	.word	0x2001264c

0800e2f8 <_ZN8touchgfx6Screen4drawEv>:
 800e2f8:	b507      	push	{r0, r1, r2, lr}
 800e2fa:	4b09      	ldr	r3, [pc, #36]	@ (800e320 <_ZN8touchgfx6Screen4drawEv+0x28>)
 800e2fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e300:	4b08      	ldr	r3, [pc, #32]	@ (800e324 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 800e302:	f8ad 2004 	strh.w	r2, [sp, #4]
 800e306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e30a:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e30e:	6803      	ldr	r3, [r0, #0]
 800e310:	2100      	movs	r1, #0
 800e312:	9100      	str	r1, [sp, #0]
 800e314:	689b      	ldr	r3, [r3, #8]
 800e316:	4669      	mov	r1, sp
 800e318:	4798      	blx	r3
 800e31a:	b003      	add	sp, #12
 800e31c:	f85d fb04 	ldr.w	pc, [sp], #4
 800e320:	2001264c 	.word	0x2001264c
 800e324:	2001264e 	.word	0x2001264e

0800e328 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 800e328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e32c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 800e330:	2b00      	cmp	r3, #0
 800e332:	b089      	sub	sp, #36	@ 0x24
 800e334:	4680      	mov	r8, r0
 800e336:	460c      	mov	r4, r1
 800e338:	4615      	mov	r5, r2
 800e33a:	dd0e      	ble.n	800e35a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e33c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800e340:	2b00      	cmp	r3, #0
 800e342:	dd0a      	ble.n	800e35a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e344:	4628      	mov	r0, r5
 800e346:	f7ff ff5b 	bl	800e200 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800e34a:	4621      	mov	r1, r4
 800e34c:	f7fe fb9b 	bl	800ca86 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800e350:	69eb      	ldr	r3, [r5, #28]
 800e352:	b928      	cbnz	r0, 800e360 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 800e354:	461d      	mov	r5, r3
 800e356:	2b00      	cmp	r3, #0
 800e358:	d1f4      	bne.n	800e344 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 800e35a:	b009      	add	sp, #36	@ 0x24
 800e35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e360:	ae04      	add	r6, sp, #16
 800e362:	2b00      	cmp	r3, #0
 800e364:	f000 80b5 	beq.w	800e4d2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800e368:	682b      	ldr	r3, [r5, #0]
 800e36a:	4629      	mov	r1, r5
 800e36c:	68db      	ldr	r3, [r3, #12]
 800e36e:	a802      	add	r0, sp, #8
 800e370:	4798      	blx	r3
 800e372:	4628      	mov	r0, r5
 800e374:	f7ff ff60 	bl	800e238 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800e378:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 800e37c:	4407      	add	r7, r0
 800e37e:	4628      	mov	r0, r5
 800e380:	f7ff ff6e 	bl	800e260 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800e384:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800e388:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 800e38c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e390:	4418      	add	r0, r3
 800e392:	4621      	mov	r1, r4
 800e394:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800e398:	f8ad 0012 	strh.w	r0, [sp, #18]
 800e39c:	b23f      	sxth	r7, r7
 800e39e:	4630      	mov	r0, r6
 800e3a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e3a4:	f8ad 7010 	strh.w	r7, [sp, #16]
 800e3a8:	f7fa fdd8 	bl	8008f5c <_ZN8touchgfx4RectaNERKS0_>
 800e3ac:	4628      	mov	r0, r5
 800e3ae:	f7ff ff27 	bl	800e200 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800e3b2:	4602      	mov	r2, r0
 800e3b4:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e3b8:	ab06      	add	r3, sp, #24
 800e3ba:	e883 0003 	stmia.w	r3, {r0, r1}
 800e3be:	4611      	mov	r1, r2
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f7fa fdcb 	bl	8008f5c <_ZN8touchgfx4RectaNERKS0_>
 800e3c6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800e3ca:	f9b4 1000 	ldrsh.w	r1, [r4]
 800e3ce:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 800e3d2:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 800e3d6:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 800e3da:	4299      	cmp	r1, r3
 800e3dc:	d10b      	bne.n	800e3f6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800e3de:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800e3e2:	4552      	cmp	r2, sl
 800e3e4:	d107      	bne.n	800e3f6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800e3e6:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 800e3ea:	455a      	cmp	r2, fp
 800e3ec:	d103      	bne.n	800e3f6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 800e3ee:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800e3f2:	454a      	cmp	r2, r9
 800e3f4:	d06d      	beq.n	800e4d2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800e3f6:	f1bb 0f00 	cmp.w	fp, #0
 800e3fa:	dd65      	ble.n	800e4c8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800e3fc:	f1b9 0f00 	cmp.w	r9, #0
 800e400:	dd62      	ble.n	800e4c8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 800e402:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800e406:	fa1f f08a 	uxth.w	r0, sl
 800e40a:	4552      	cmp	r2, sl
 800e40c:	9000      	str	r0, [sp, #0]
 800e40e:	da12      	bge.n	800e436 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 800e410:	9301      	str	r3, [sp, #4]
 800e412:	9b00      	ldr	r3, [sp, #0]
 800e414:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800e418:	f8ad 2012 	strh.w	r2, [sp, #18]
 800e41c:	1a9a      	subs	r2, r3, r2
 800e41e:	f8ad 1010 	strh.w	r1, [sp, #16]
 800e422:	f8ad 0014 	strh.w	r0, [sp, #20]
 800e426:	f8ad 2016 	strh.w	r2, [sp, #22]
 800e42a:	69ea      	ldr	r2, [r5, #28]
 800e42c:	4631      	mov	r1, r6
 800e42e:	4640      	mov	r0, r8
 800e430:	f7ff ff7a 	bl	800e328 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e434:	9b01      	ldr	r3, [sp, #4]
 800e436:	f9b4 2000 	ldrsh.w	r2, [r4]
 800e43a:	429a      	cmp	r2, r3
 800e43c:	b29f      	uxth	r7, r3
 800e43e:	da0d      	bge.n	800e45c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 800e440:	f8ad 2010 	strh.w	r2, [sp, #16]
 800e444:	1aba      	subs	r2, r7, r2
 800e446:	f8ad a012 	strh.w	sl, [sp, #18]
 800e44a:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e44e:	f8ad 9016 	strh.w	r9, [sp, #22]
 800e452:	69ea      	ldr	r2, [r5, #28]
 800e454:	4631      	mov	r1, r6
 800e456:	4640      	mov	r0, r8
 800e458:	f7ff ff66 	bl	800e328 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e45c:	8822      	ldrh	r2, [r4, #0]
 800e45e:	88a3      	ldrh	r3, [r4, #4]
 800e460:	445f      	add	r7, fp
 800e462:	4413      	add	r3, r2
 800e464:	b29b      	uxth	r3, r3
 800e466:	b2bf      	uxth	r7, r7
 800e468:	b23a      	sxth	r2, r7
 800e46a:	b219      	sxth	r1, r3
 800e46c:	4291      	cmp	r1, r2
 800e46e:	dd0d      	ble.n	800e48c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 800e470:	1bdb      	subs	r3, r3, r7
 800e472:	f8ad 2010 	strh.w	r2, [sp, #16]
 800e476:	f8ad a012 	strh.w	sl, [sp, #18]
 800e47a:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e47e:	f8ad 9016 	strh.w	r9, [sp, #22]
 800e482:	69ea      	ldr	r2, [r5, #28]
 800e484:	4631      	mov	r1, r6
 800e486:	4640      	mov	r0, r8
 800e488:	f7ff ff4e 	bl	800e328 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e48c:	88e2      	ldrh	r2, [r4, #6]
 800e48e:	8863      	ldrh	r3, [r4, #2]
 800e490:	4413      	add	r3, r2
 800e492:	9a00      	ldr	r2, [sp, #0]
 800e494:	444a      	add	r2, r9
 800e496:	b29b      	uxth	r3, r3
 800e498:	fa1f f982 	uxth.w	r9, r2
 800e49c:	fa0f f289 	sxth.w	r2, r9
 800e4a0:	b219      	sxth	r1, r3
 800e4a2:	428a      	cmp	r2, r1
 800e4a4:	da15      	bge.n	800e4d2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 800e4a6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800e4aa:	f9b4 0000 	ldrsh.w	r0, [r4]
 800e4ae:	f8ad 1014 	strh.w	r1, [sp, #20]
 800e4b2:	eba3 0309 	sub.w	r3, r3, r9
 800e4b6:	f8ad 0010 	strh.w	r0, [sp, #16]
 800e4ba:	f8ad 2012 	strh.w	r2, [sp, #18]
 800e4be:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e4c2:	69ea      	ldr	r2, [r5, #28]
 800e4c4:	4631      	mov	r1, r6
 800e4c6:	e001      	b.n	800e4cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 800e4c8:	69ea      	ldr	r2, [r5, #28]
 800e4ca:	4621      	mov	r1, r4
 800e4cc:	4640      	mov	r0, r8
 800e4ce:	f7ff ff2b 	bl	800e328 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e4d2:	4628      	mov	r0, r5
 800e4d4:	f7ff fe94 	bl	800e200 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 800e4d8:	6861      	ldr	r1, [r4, #4]
 800e4da:	4602      	mov	r2, r0
 800e4dc:	6820      	ldr	r0, [r4, #0]
 800e4de:	4633      	mov	r3, r6
 800e4e0:	c303      	stmia	r3!, {r0, r1}
 800e4e2:	4611      	mov	r1, r2
 800e4e4:	4630      	mov	r0, r6
 800e4e6:	f7fa fd39 	bl	8008f5c <_ZN8touchgfx4RectaNERKS0_>
 800e4ea:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	f77f af33 	ble.w	800e35a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e4f4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	f77f af2e 	ble.w	800e35a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 800e4fe:	4628      	mov	r0, r5
 800e500:	f7ff fe9a 	bl	800e238 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 800e504:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800e508:	1a18      	subs	r0, r3, r0
 800e50a:	f8ad 0010 	strh.w	r0, [sp, #16]
 800e50e:	4628      	mov	r0, r5
 800e510:	f7ff fea6 	bl	800e260 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 800e514:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 800e518:	1a18      	subs	r0, r3, r0
 800e51a:	f8ad 0012 	strh.w	r0, [sp, #18]
 800e51e:	682b      	ldr	r3, [r5, #0]
 800e520:	4631      	mov	r1, r6
 800e522:	689b      	ldr	r3, [r3, #8]
 800e524:	4628      	mov	r0, r5
 800e526:	4798      	blx	r3
 800e528:	e717      	b.n	800e35a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0800e52a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 800e52a:	b570      	push	{r4, r5, r6, lr}
 800e52c:	460c      	mov	r4, r1
 800e52e:	b086      	sub	sp, #24
 800e530:	1d06      	adds	r6, r0, #4
 800e532:	2300      	movs	r3, #0
 800e534:	4631      	mov	r1, r6
 800e536:	4605      	mov	r5, r0
 800e538:	a802      	add	r0, sp, #8
 800e53a:	9301      	str	r3, [sp, #4]
 800e53c:	f7ff fc98 	bl	800de70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e540:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800e544:	8822      	ldrh	r2, [r4, #0]
 800e546:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800e54a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800e54e:	f8ad 0014 	strh.w	r0, [sp, #20]
 800e552:	1ad2      	subs	r2, r2, r3
 800e554:	8863      	ldrh	r3, [r4, #2]
 800e556:	f8ad 2010 	strh.w	r2, [sp, #16]
 800e55a:	1a5b      	subs	r3, r3, r1
 800e55c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 800e560:	f8ad 1016 	strh.w	r1, [sp, #22]
 800e564:	aa01      	add	r2, sp, #4
 800e566:	a904      	add	r1, sp, #16
 800e568:	4630      	mov	r0, r6
 800e56a:	f8ad 3012 	strh.w	r3, [sp, #18]
 800e56e:	f7fa fdcd 	bl	800910c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 800e572:	9a01      	ldr	r2, [sp, #4]
 800e574:	b11a      	cbz	r2, 800e57e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 800e576:	4621      	mov	r1, r4
 800e578:	4628      	mov	r0, r5
 800e57a:	f7ff fed5 	bl	800e328 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 800e57e:	b006      	add	sp, #24
 800e580:	bd70      	pop	{r4, r5, r6, pc}

0800e582 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 800e582:	b530      	push	{r4, r5, lr}
 800e584:	4602      	mov	r2, r0
 800e586:	4604      	mov	r4, r0
 800e588:	f852 0f08 	ldr.w	r0, [r2, #8]!
 800e58c:	b085      	sub	sp, #20
 800e58e:	460d      	mov	r5, r1
 800e590:	6851      	ldr	r1, [r2, #4]
 800e592:	466b      	mov	r3, sp
 800e594:	c303      	stmia	r3!, {r0, r1}
 800e596:	4629      	mov	r1, r5
 800e598:	4668      	mov	r0, sp
 800e59a:	f7fa fcdf 	bl	8008f5c <_ZN8touchgfx4RectaNERKS0_>
 800e59e:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800e5a2:	b12b      	cbz	r3, 800e5b0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 800e5a4:	4669      	mov	r1, sp
 800e5a6:	4620      	mov	r0, r4
 800e5a8:	f7ff ffbf 	bl	800e52a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 800e5ac:	b005      	add	sp, #20
 800e5ae:	bd30      	pop	{r4, r5, pc}
 800e5b0:	3404      	adds	r4, #4
 800e5b2:	4621      	mov	r1, r4
 800e5b4:	a802      	add	r0, sp, #8
 800e5b6:	f7ff fc5b 	bl	800de70 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e5ba:	f8bd 3000 	ldrh.w	r3, [sp]
 800e5be:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 800e5c2:	1a9b      	subs	r3, r3, r2
 800e5c4:	f8ad 3000 	strh.w	r3, [sp]
 800e5c8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 800e5cc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e5d0:	4669      	mov	r1, sp
 800e5d2:	1a9b      	subs	r3, r3, r2
 800e5d4:	4620      	mov	r0, r4
 800e5d6:	f8ad 3002 	strh.w	r3, [sp, #2]
 800e5da:	f7fa fd5e 	bl	800909a <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 800e5de:	e7e5      	b.n	800e5ac <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0800e5e0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 800e5e0:	680a      	ldr	r2, [r1, #0]
 800e5e2:	460b      	mov	r3, r1
 800e5e4:	6992      	ldr	r2, [r2, #24]
 800e5e6:	1d01      	adds	r1, r0, #4
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	4710      	bx	r2

0800e5ec <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 800e5ec:	4298      	cmp	r0, r3
 800e5ee:	d200      	bcs.n	800e5f2 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x6>
 800e5f0:	b913      	cbnz	r3, 800e5f8 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0xc>
 800e5f2:	440a      	add	r2, r1
 800e5f4:	b210      	sxth	r0, r2
 800e5f6:	4770      	bx	lr
 800e5f8:	ee07 0a90 	vmov	s15, r0
 800e5fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e600:	ee07 3a90 	vmov	s15, r3
 800e604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e608:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e60c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e610:	ee37 7a66 	vsub.f32	s14, s14, s13
 800e614:	ee07 2a90 	vmov	s15, r2
 800e618:	ee67 5a07 	vmul.f32	s11, s14, s14
 800e61c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800e620:	eee5 6a87 	vfma.f32	s13, s11, s14
 800e624:	ee07 1a90 	vmov	s15, r1
 800e628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e62c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800e630:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e634:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e63c:	bfcc      	ite	gt
 800e63e:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 800e642:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 800e646:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e64a:	ee17 3a90 	vmov	r3, s15
 800e64e:	b218      	sxth	r0, r3
 800e650:	4770      	bx	lr

0800e652 <_ZN8touchgfx12TextProviderC1Ev>:
 800e652:	b538      	push	{r3, r4, r5, lr}
 800e654:	2500      	movs	r5, #0
 800e656:	2302      	movs	r3, #2
 800e658:	4604      	mov	r4, r0
 800e65a:	e9c0 5500 	strd	r5, r5, [r0]
 800e65e:	7403      	strb	r3, [r0, #16]
 800e660:	6145      	str	r5, [r0, #20]
 800e662:	7605      	strb	r5, [r0, #24]
 800e664:	83c5      	strh	r5, [r0, #30]
 800e666:	8405      	strh	r5, [r0, #32]
 800e668:	86c5      	strh	r5, [r0, #54]	@ 0x36
 800e66a:	8705      	strh	r5, [r0, #56]	@ 0x38
 800e66c:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 800e66e:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 800e672:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 800e676:	220e      	movs	r2, #14
 800e678:	4629      	mov	r1, r5
 800e67a:	304c      	adds	r0, #76	@ 0x4c
 800e67c:	f005 f881 	bl	8013782 <memset>
 800e680:	2301      	movs	r3, #1
 800e682:	4620      	mov	r0, r4
 800e684:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 800e688:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800e68c:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 800e690:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 800e694:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 800e698:	f7f4 ffde 	bl	8003658 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 800e69c:	4620      	mov	r0, r4
 800e69e:	bd38      	pop	{r3, r4, r5, pc}

0800e6a0 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 800e6a0:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800e6a2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800e6a6:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 800e6a8:	fab0 f080 	clz	r0, r0
 800e6ac:	0940      	lsrs	r0, r0, #5
 800e6ae:	4770      	bx	lr

0800e6b0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 800e6b0:	b530      	push	{r4, r5, lr}
 800e6b2:	2500      	movs	r5, #0
 800e6b4:	2401      	movs	r4, #1
 800e6b6:	6843      	ldr	r3, [r0, #4]
 800e6b8:	b913      	cbnz	r3, 800e6c0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 800e6ba:	6803      	ldr	r3, [r0, #0]
 800e6bc:	b313      	cbz	r3, 800e704 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800e6be:	6043      	str	r3, [r0, #4]
 800e6c0:	7e03      	ldrb	r3, [r0, #24]
 800e6c2:	b143      	cbz	r3, 800e6d6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 800e6c4:	6943      	ldr	r3, [r0, #20]
 800e6c6:	b12b      	cbz	r3, 800e6d4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800e6c8:	881a      	ldrh	r2, [r3, #0]
 800e6ca:	b11a      	cbz	r2, 800e6d4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 800e6cc:	1c9a      	adds	r2, r3, #2
 800e6ce:	6142      	str	r2, [r0, #20]
 800e6d0:	8818      	ldrh	r0, [r3, #0]
 800e6d2:	bd30      	pop	{r4, r5, pc}
 800e6d4:	7605      	strb	r5, [r0, #24]
 800e6d6:	6843      	ldr	r3, [r0, #4]
 800e6d8:	8819      	ldrh	r1, [r3, #0]
 800e6da:	b199      	cbz	r1, 800e704 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 800e6dc:	1c9a      	adds	r2, r3, #2
 800e6de:	2902      	cmp	r1, #2
 800e6e0:	6042      	str	r2, [r0, #4]
 800e6e2:	d1f5      	bne.n	800e6d0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 800e6e4:	7c03      	ldrb	r3, [r0, #16]
 800e6e6:	2b01      	cmp	r3, #1
 800e6e8:	d8e5      	bhi.n	800e6b6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e6ea:	1c5a      	adds	r2, r3, #1
 800e6ec:	3302      	adds	r3, #2
 800e6ee:	7402      	strb	r2, [r0, #16]
 800e6f0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800e6f4:	6143      	str	r3, [r0, #20]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d0dd      	beq.n	800e6b6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e6fa:	881b      	ldrh	r3, [r3, #0]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d0da      	beq.n	800e6b6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e700:	7604      	strb	r4, [r0, #24]
 800e702:	e7d8      	b.n	800e6b6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 800e704:	2000      	movs	r0, #0
 800e706:	e7e4      	b.n	800e6d2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0800e708 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 800e708:	b430      	push	{r4, r5}
 800e70a:	6001      	str	r1, [r0, #0]
 800e70c:	2100      	movs	r1, #0
 800e70e:	6041      	str	r1, [r0, #4]
 800e710:	6815      	ldr	r5, [r2, #0]
 800e712:	6085      	str	r5, [r0, #8]
 800e714:	6852      	ldr	r2, [r2, #4]
 800e716:	6443      	str	r3, [r0, #68]	@ 0x44
 800e718:	9b02      	ldr	r3, [sp, #8]
 800e71a:	60c2      	str	r2, [r0, #12]
 800e71c:	7401      	strb	r1, [r0, #16]
 800e71e:	6141      	str	r1, [r0, #20]
 800e720:	7601      	strb	r1, [r0, #24]
 800e722:	8701      	strh	r1, [r0, #56]	@ 0x38
 800e724:	8401      	strh	r1, [r0, #32]
 800e726:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 800e72a:	6483      	str	r3, [r0, #72]	@ 0x48
 800e72c:	bc30      	pop	{r4, r5}
 800e72e:	f7f4 bf93 	b.w	8003658 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0800e732 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 800e732:	b408      	push	{r3}
 800e734:	b510      	push	{r4, lr}
 800e736:	b085      	sub	sp, #20
 800e738:	ac07      	add	r4, sp, #28
 800e73a:	f854 3b04 	ldr.w	r3, [r4], #4
 800e73e:	9300      	str	r3, [sp, #0]
 800e740:	4613      	mov	r3, r2
 800e742:	4622      	mov	r2, r4
 800e744:	9403      	str	r4, [sp, #12]
 800e746:	f7ff ffdf 	bl	800e708 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800e74a:	b005      	add	sp, #20
 800e74c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e750:	b001      	add	sp, #4
 800e752:	4770      	bx	lr

0800e754 <_ZN8touchgfx12TextProvider20unicodeConverterInitEv>:
 800e754:	2301      	movs	r3, #1
 800e756:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800e75a:	4770      	bx	lr

0800e75c <_ZN8touchgfx12TextProvider16unicodeConverterEh>:
 800e75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e760:	f8b0 b036 	ldrh.w	fp, [r0, #54]	@ 0x36
 800e764:	eb00 064b 	add.w	r6, r0, fp, lsl #1
 800e768:	b087      	sub	sp, #28
 800e76a:	8c73      	ldrh	r3, [r6, #34]	@ 0x22
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	f000 813e 	beq.w	800e9ee <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800e772:	2b7f      	cmp	r3, #127	@ 0x7f
 800e774:	d819      	bhi.n	800e7aa <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x4e>
 800e776:	2901      	cmp	r1, #1
 800e778:	d117      	bne.n	800e7aa <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x4e>
 800e77a:	2b3c      	cmp	r3, #60	@ 0x3c
 800e77c:	f000 83d2 	beq.w	800ef24 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7c8>
 800e780:	2b3e      	cmp	r3, #62	@ 0x3e
 800e782:	f000 83d1 	beq.w	800ef28 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7cc>
 800e786:	2b28      	cmp	r3, #40	@ 0x28
 800e788:	f000 83d0 	beq.w	800ef2c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7d0>
 800e78c:	2b29      	cmp	r3, #41	@ 0x29
 800e78e:	f000 83cf 	beq.w	800ef30 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7d4>
 800e792:	2b5b      	cmp	r3, #91	@ 0x5b
 800e794:	f000 83ce 	beq.w	800ef34 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7d8>
 800e798:	2b5d      	cmp	r3, #93	@ 0x5d
 800e79a:	f000 83cd 	beq.w	800ef38 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7dc>
 800e79e:	2b7b      	cmp	r3, #123	@ 0x7b
 800e7a0:	f000 83cc 	beq.w	800ef3c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7e0>
 800e7a4:	2b7d      	cmp	r3, #125	@ 0x7d
 800e7a6:	f000 83cb 	beq.w	800ef40 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7e4>
 800e7aa:	f10b 0201 	add.w	r2, fp, #1
 800e7ae:	b292      	uxth	r2, r2
 800e7b0:	2a09      	cmp	r2, #9
 800e7b2:	4611      	mov	r1, r2
 800e7b4:	bf88      	it	hi
 800e7b6:	f1a2 010a 	subhi.w	r1, r2, #10
 800e7ba:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800e7be:	9102      	str	r1, [sp, #8]
 800e7c0:	8c4d      	ldrh	r5, [r1, #34]	@ 0x22
 800e7c2:	f10b 0102 	add.w	r1, fp, #2
 800e7c6:	b289      	uxth	r1, r1
 800e7c8:	2909      	cmp	r1, #9
 800e7ca:	bf88      	it	hi
 800e7cc:	390a      	subhi	r1, #10
 800e7ce:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800e7d2:	8c4c      	ldrh	r4, [r1, #34]	@ 0x22
 800e7d4:	f240 6151 	movw	r1, #1617	@ 0x651
 800e7d8:	428d      	cmp	r5, r1
 800e7da:	d125      	bne.n	800e828 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xcc>
 800e7dc:	f2a3 614b 	subw	r1, r3, #1611	@ 0x64b
 800e7e0:	b289      	uxth	r1, r1
 800e7e2:	2914      	cmp	r1, #20
 800e7e4:	d914      	bls.n	800e810 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xb4>
 800e7e6:	f023 0104 	bic.w	r1, r3, #4
 800e7ea:	b289      	uxth	r1, r1
 800e7ec:	f5b1 6fce 	cmp.w	r1, #1648	@ 0x670
 800e7f0:	d00e      	beq.n	800e810 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xb4>
 800e7f2:	f2a3 61d6 	subw	r1, r3, #1750	@ 0x6d6
 800e7f6:	b289      	uxth	r1, r1
 800e7f8:	2917      	cmp	r1, #23
 800e7fa:	d804      	bhi.n	800e806 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xaa>
 800e7fc:	4fad      	ldr	r7, [pc, #692]	@ (800eab4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x358>)
 800e7fe:	fa27 f101 	lsr.w	r1, r7, r1
 800e802:	07c9      	lsls	r1, r1, #31
 800e804:	d404      	bmi.n	800e810 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xb4>
 800e806:	f6a3 01e4 	subw	r1, r3, #2276	@ 0x8e4
 800e80a:	b289      	uxth	r1, r1
 800e80c:	291a      	cmp	r1, #26
 800e80e:	d80b      	bhi.n	800e828 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xcc>
 800e810:	2a0a      	cmp	r2, #10
 800e812:	bf28      	it	cs
 800e814:	2200      	movcs	r2, #0
 800e816:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800e81a:	f240 6151 	movw	r1, #1617	@ 0x651
 800e81e:	8471      	strh	r1, [r6, #34]	@ 0x22
 800e820:	8453      	strh	r3, [r2, #34]	@ 0x22
 800e822:	461a      	mov	r2, r3
 800e824:	462b      	mov	r3, r5
 800e826:	4615      	mov	r5, r2
 800e828:	f2a3 6222 	subw	r2, r3, #1570	@ 0x622
 800e82c:	b292      	uxth	r2, r2
 800e82e:	2a18      	cmp	r2, #24
 800e830:	d90d      	bls.n	800e84e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xf2>
 800e832:	f5a3 62c8 	sub.w	r2, r3, #1600	@ 0x640
 800e836:	b292      	uxth	r2, r2
 800e838:	2a0a      	cmp	r2, #10
 800e83a:	d908      	bls.n	800e84e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xf2>
 800e83c:	f46f 67ce 	mvn.w	r7, #1648	@ 0x670
 800e840:	19da      	adds	r2, r3, r7
 800e842:	b292      	uxth	r2, r2
 800e844:	2a62      	cmp	r2, #98	@ 0x62
 800e846:	d902      	bls.n	800e84e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0xf2>
 800e848:	2b20      	cmp	r3, #32
 800e84a:	f040 80d0 	bne.w	800e9ee <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800e84e:	f10b 0103 	add.w	r1, fp, #3
 800e852:	b289      	uxth	r1, r1
 800e854:	2909      	cmp	r1, #9
 800e856:	460a      	mov	r2, r1
 800e858:	bf88      	it	hi
 800e85a:	f1a1 020a 	subhi.w	r2, r1, #10
 800e85e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800e862:	f8b2 c022 	ldrh.w	ip, [r2, #34]	@ 0x22
 800e866:	f10b 0204 	add.w	r2, fp, #4
 800e86a:	b292      	uxth	r2, r2
 800e86c:	2a09      	cmp	r2, #9
 800e86e:	bf88      	it	hi
 800e870:	3a0a      	subhi	r2, #10
 800e872:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800e876:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 800e878:	f2a2 6622 	subw	r6, r2, #1570	@ 0x622
 800e87c:	2e18      	cmp	r6, #24
 800e87e:	f240 80ba 	bls.w	800e9f6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x29a>
 800e882:	f5a2 66c8 	sub.w	r6, r2, #1600	@ 0x640
 800e886:	2e0a      	cmp	r6, #10
 800e888:	f240 80b5 	bls.w	800e9f6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x29a>
 800e88c:	f46f 66ce 	mvn.w	r6, #1648	@ 0x670
 800e890:	4432      	add	r2, r6
 800e892:	2a62      	cmp	r2, #98	@ 0x62
 800e894:	f240 80af 	bls.w	800e9f6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x29a>
 800e898:	f2a3 6227 	subw	r2, r3, #1575	@ 0x627
 800e89c:	b292      	uxth	r2, r2
 800e89e:	2a21      	cmp	r2, #33	@ 0x21
 800e8a0:	f200 80a9 	bhi.w	800e9f6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x29a>
 800e8a4:	f2a4 6227 	subw	r2, r4, #1575	@ 0x627
 800e8a8:	b292      	uxth	r2, r2
 800e8aa:	2a23      	cmp	r2, #35	@ 0x23
 800e8ac:	d82e      	bhi.n	800e90c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1b0>
 800e8ae:	f2ac 622f 	subw	r2, ip, #1583	@ 0x62f
 800e8b2:	b292      	uxth	r2, r2
 800e8b4:	2a18      	cmp	r2, #24
 800e8b6:	d829      	bhi.n	800e90c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1b0>
 800e8b8:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800e8bc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800e8c0:	f5a2 4282 	sub.w	r2, r2, #16640	@ 0x4100
 800e8c4:	ebc3 1603 	rsb	r6, r3, r3, lsl #4
 800e8c8:	3a1a      	subs	r2, #26
 800e8ca:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 800e8ce:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800e8d2:	6c87      	ldr	r7, [r0, #72]	@ 0x48
 800e8d4:	4462      	add	r2, ip
 800e8d6:	b292      	uxth	r2, r2
 800e8d8:	b1c7      	cbz	r7, 800e90c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1b0>
 800e8da:	8b3e      	ldrh	r6, [r7, #24]
 800e8dc:	b1b6      	cbz	r6, 800e90c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1b0>
 800e8de:	f8d7 9000 	ldr.w	r9, [r7]
 800e8e2:	f04f 0e00 	mov.w	lr, #0
 800e8e6:	eb06 070e 	add.w	r7, r6, lr
 800e8ea:	f04f 080a 	mov.w	r8, #10
 800e8ee:	107f      	asrs	r7, r7, #1
 800e8f0:	fb08 fa07 	mul.w	sl, r8, r7
 800e8f4:	eb09 080a 	add.w	r8, r9, sl
 800e8f8:	f839 a00a 	ldrh.w	sl, [r9, sl]
 800e8fc:	4552      	cmp	r2, sl
 800e8fe:	d961      	bls.n	800e9c4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x268>
 800e900:	f107 0e01 	add.w	lr, r7, #1
 800e904:	e000      	b.n	800e908 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1ac>
 800e906:	463e      	mov	r6, r7
 800e908:	45b6      	cmp	lr, r6
 800e90a:	dbec      	blt.n	800e8e6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x18a>
 800e90c:	f5a3 62c5 	sub.w	r2, r3, #1576	@ 0x628
 800e910:	b292      	uxth	r2, r2
 800e912:	2a22      	cmp	r2, #34	@ 0x22
 800e914:	d971      	bls.n	800e9fa <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x29e>
 800e916:	f2a5 624b 	subw	r2, r5, #1611	@ 0x64b
 800e91a:	b292      	uxth	r2, r2
 800e91c:	2a14      	cmp	r2, #20
 800e91e:	d918      	bls.n	800e952 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1f6>
 800e920:	f5b5 6fce 	cmp.w	r5, #1648	@ 0x670
 800e924:	d015      	beq.n	800e952 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1f6>
 800e926:	f240 6274 	movw	r2, #1652	@ 0x674
 800e92a:	4295      	cmp	r5, r2
 800e92c:	d011      	beq.n	800e952 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1f6>
 800e92e:	f2a5 62d6 	subw	r2, r5, #1750	@ 0x6d6
 800e932:	b292      	uxth	r2, r2
 800e934:	2a17      	cmp	r2, #23
 800e936:	d804      	bhi.n	800e942 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1e6>
 800e938:	495e      	ldr	r1, [pc, #376]	@ (800eab4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x358>)
 800e93a:	fa21 f202 	lsr.w	r2, r1, r2
 800e93e:	07d2      	lsls	r2, r2, #31
 800e940:	d407      	bmi.n	800e952 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1f6>
 800e942:	f6a5 02e4 	subw	r2, r5, #2276	@ 0x8e4
 800e946:	b292      	uxth	r2, r2
 800e948:	2a1a      	cmp	r2, #26
 800e94a:	d902      	bls.n	800e952 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1f6>
 800e94c:	46a4      	mov	ip, r4
 800e94e:	462c      	mov	r4, r5
 800e950:	2500      	movs	r5, #0
 800e952:	2b20      	cmp	r3, #32
 800e954:	d005      	beq.n	800e962 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x206>
 800e956:	f2a3 6226 	subw	r2, r3, #1574	@ 0x626
 800e95a:	b292      	uxth	r2, r2
 800e95c:	2a24      	cmp	r2, #36	@ 0x24
 800e95e:	f200 8136 	bhi.w	800ebce <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x472>
 800e962:	f2a4 6222 	subw	r2, r4, #1570	@ 0x622
 800e966:	b292      	uxth	r2, r2
 800e968:	2ab3      	cmp	r2, #179	@ 0xb3
 800e96a:	f200 8130 	bhi.w	800ebce <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x472>
 800e96e:	f240 6244 	movw	r2, #1604	@ 0x644
 800e972:	4294      	cmp	r4, r2
 800e974:	d104      	bne.n	800e980 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x224>
 800e976:	f240 6227 	movw	r2, #1575	@ 0x627
 800e97a:	4594      	cmp	ip, r2
 800e97c:	f000 8127 	beq.w	800ebce <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x472>
 800e980:	f240 624f 	movw	r2, #1615	@ 0x64f
 800e984:	4295      	cmp	r5, r2
 800e986:	f000 8122 	beq.w	800ebce <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x472>
 800e98a:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800e98c:	2900      	cmp	r1, #0
 800e98e:	f000 811e 	beq.w	800ebce <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x472>
 800e992:	8b8a      	ldrh	r2, [r1, #28]
 800e994:	2a00      	cmp	r2, #0
 800e996:	f000 811b 	beq.w	800ebd0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x474>
 800e99a:	b2e4      	uxtb	r4, r4
 800e99c:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 800e9a0:	6889      	ldr	r1, [r1, #8]
 800e9a2:	b2a4      	uxth	r4, r4
 800e9a4:	2700      	movs	r7, #0
 800e9a6:	f04f 080a 	mov.w	r8, #10
 800e9aa:	19d6      	adds	r6, r2, r7
 800e9ac:	1076      	asrs	r6, r6, #1
 800e9ae:	fb08 fc06 	mul.w	ip, r8, r6
 800e9b2:	eb01 0e0c 	add.w	lr, r1, ip
 800e9b6:	f831 c00c 	ldrh.w	ip, [r1, ip]
 800e9ba:	4564      	cmp	r4, ip
 800e9bc:	f240 810a 	bls.w	800ebd4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x478>
 800e9c0:	1c77      	adds	r7, r6, #1
 800e9c2:	e101      	b.n	800ebc8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x46c>
 800e9c4:	d39f      	bcc.n	800e906 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1aa>
 800e9c6:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 800e9ca:	42aa      	cmp	r2, r5
 800e9cc:	d19e      	bne.n	800e90c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1b0>
 800e9ce:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 800e9d0:	86c1      	strh	r1, [r0, #54]	@ 0x36
 800e9d2:	3b03      	subs	r3, #3
 800e9d4:	2909      	cmp	r1, #9
 800e9d6:	8703      	strh	r3, [r0, #56]	@ 0x38
 800e9d8:	bf88      	it	hi
 800e9da:	f1ab 0207 	subhi.w	r2, fp, #7
 800e9de:	f04f 0301 	mov.w	r3, #1
 800e9e2:	bf88      	it	hi
 800e9e4:	86c2      	strhhi	r2, [r0, #54]	@ 0x36
 800e9e6:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800e9ea:	f8b8 3002 	ldrh.w	r3, [r8, #2]
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	b007      	add	sp, #28
 800e9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9f6:	2b20      	cmp	r3, #32
 800e9f8:	d188      	bne.n	800e90c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1b0>
 800e9fa:	f2a5 622c 	subw	r2, r5, #1580	@ 0x62c
 800e9fe:	b292      	uxth	r2, r2
 800ea00:	2a25      	cmp	r2, #37	@ 0x25
 800ea02:	d888      	bhi.n	800e916 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1ba>
 800ea04:	f2a4 622c 	subw	r2, r4, #1580	@ 0x62c
 800ea08:	b291      	uxth	r1, r2
 800ea0a:	2925      	cmp	r1, #37	@ 0x25
 800ea0c:	d914      	bls.n	800ea38 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x2dc>
 800ea0e:	f5b4 6fce 	cmp.w	r4, #1648	@ 0x670
 800ea12:	f000 82ec 	beq.w	800efee <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x892>
 800ea16:	f240 62d2 	movw	r2, #1746	@ 0x6d2
 800ea1a:	4294      	cmp	r4, r2
 800ea1c:	f47f af7b 	bne.w	800e916 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1ba>
 800ea20:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800ea24:	00d2      	lsls	r2, r2, #3
 800ea26:	2b20      	cmp	r3, #32
 800ea28:	b292      	uxth	r2, r2
 800ea2a:	d107      	bne.n	800ea3c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x2e0>
 800ea2c:	f5a2 5240 	sub.w	r2, r2, #12288	@ 0x3000
 800ea30:	3a30      	subs	r2, #48	@ 0x30
 800ea32:	b292      	uxth	r2, r2
 800ea34:	2127      	movs	r1, #39	@ 0x27
 800ea36:	e017      	b.n	800ea68 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x30c>
 800ea38:	2b20      	cmp	r3, #32
 800ea3a:	d034      	beq.n	800eaa6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x34a>
 800ea3c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800ea40:	ebc3 1242 	rsb	r2, r3, r2, lsl #5
 800ea44:	0112      	lsls	r2, r2, #4
 800ea46:	f502 42e5 	add.w	r2, r2, #29312	@ 0x7280
 800ea4a:	b292      	uxth	r2, r2
 800ea4c:	eb05 0685 	add.w	r6, r5, r5, lsl #2
 800ea50:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
 800ea54:	f5b4 6fce 	cmp.w	r4, #1648	@ 0x670
 800ea58:	b292      	uxth	r2, r2
 800ea5a:	f000 82d2 	beq.w	800f002 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x8a6>
 800ea5e:	f240 66d2 	movw	r6, #1746	@ 0x6d2
 800ea62:	42b4      	cmp	r4, r6
 800ea64:	bf08      	it	eq
 800ea66:	2127      	moveq	r1, #39	@ 0x27
 800ea68:	6c87      	ldr	r7, [r0, #72]	@ 0x48
 800ea6a:	2f00      	cmp	r7, #0
 800ea6c:	f43f af53 	beq.w	800e916 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1ba>
 800ea70:	8b7e      	ldrh	r6, [r7, #26]
 800ea72:	2e00      	cmp	r6, #0
 800ea74:	f43f af4f 	beq.w	800e916 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1ba>
 800ea78:	440a      	add	r2, r1
 800ea7a:	f502 6212 	add.w	r2, r2, #2336	@ 0x920
 800ea7e:	6879      	ldr	r1, [r7, #4]
 800ea80:	b292      	uxth	r2, r2
 800ea82:	f04f 0e00 	mov.w	lr, #0
 800ea86:	f04f 0a0a 	mov.w	sl, #10
 800ea8a:	eb06 070e 	add.w	r7, r6, lr
 800ea8e:	107f      	asrs	r7, r7, #1
 800ea90:	fb0a f807 	mul.w	r8, sl, r7
 800ea94:	eb01 0908 	add.w	r9, r1, r8
 800ea98:	f831 8008 	ldrh.w	r8, [r1, r8]
 800ea9c:	4542      	cmp	r2, r8
 800ea9e:	d90b      	bls.n	800eab8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x35c>
 800eaa0:	f107 0e01 	add.w	lr, r7, #1
 800eaa4:	e003      	b.n	800eaae <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x352>
 800eaa6:	f64c 72d0 	movw	r2, #53200	@ 0xcfd0
 800eaaa:	e7cf      	b.n	800ea4c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x2f0>
 800eaac:	463e      	mov	r6, r7
 800eaae:	4576      	cmp	r6, lr
 800eab0:	dceb      	bgt.n	800ea8a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x32e>
 800eab2:	e730      	b.n	800e916 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x1ba>
 800eab4:	00f67e7f 	.word	0x00f67e7f
 800eab8:	d3f8      	bcc.n	800eaac <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x350>
 800eaba:	f109 0102 	add.w	r1, r9, #2
 800eabe:	2500      	movs	r5, #0
 800eac0:	2202      	movs	r2, #2
 800eac2:	2d00      	cmp	r5, #0
 800eac4:	bf0c      	ite	eq
 800eac6:	4614      	moveq	r4, r2
 800eac8:	1c54      	addne	r4, r2, #1
 800eaca:	3401      	adds	r4, #1
 800eacc:	445c      	add	r4, fp
 800eace:	f8df c388 	ldr.w	ip, [pc, #904]	@ 800ee58 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6fc>
 800ead2:	b2a4      	uxth	r4, r4
 800ead4:	2c09      	cmp	r4, #9
 800ead6:	4626      	mov	r6, r4
 800ead8:	bf88      	it	hi
 800eada:	f1a4 060a 	subhi.w	r6, r4, #10
 800eade:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800eae2:	8c76      	ldrh	r6, [r6, #34]	@ 0x22
 800eae4:	f2a6 674b 	subw	r7, r6, #1611	@ 0x64b
 800eae8:	2f14      	cmp	r7, #20
 800eaea:	d978      	bls.n	800ebde <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x482>
 800eaec:	f026 0704 	bic.w	r7, r6, #4
 800eaf0:	f5b7 6fce 	cmp.w	r7, #1648	@ 0x670
 800eaf4:	d073      	beq.n	800ebde <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x482>
 800eaf6:	f2a6 67d6 	subw	r7, r6, #1750	@ 0x6d6
 800eafa:	b2bf      	uxth	r7, r7
 800eafc:	2f17      	cmp	r7, #23
 800eafe:	d803      	bhi.n	800eb08 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3ac>
 800eb00:	fa2c f707 	lsr.w	r7, ip, r7
 800eb04:	07ff      	lsls	r7, r7, #31
 800eb06:	d46a      	bmi.n	800ebde <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x482>
 800eb08:	f6a6 07e4 	subw	r7, r6, #2276	@ 0x8e4
 800eb0c:	2f1a      	cmp	r7, #26
 800eb0e:	d966      	bls.n	800ebde <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x482>
 800eb10:	f2a6 6422 	subw	r4, r6, #1570	@ 0x622
 800eb14:	2c18      	cmp	r4, #24
 800eb16:	d965      	bls.n	800ebe4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x488>
 800eb18:	f5a6 64c8 	sub.w	r4, r6, #1600	@ 0x640
 800eb1c:	2c0a      	cmp	r4, #10
 800eb1e:	d961      	bls.n	800ebe4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x488>
 800eb20:	f46f 6cce 	mvn.w	ip, #1648	@ 0x670
 800eb24:	4466      	add	r6, ip
 800eb26:	2e62      	cmp	r6, #98	@ 0x62
 800eb28:	bf94      	ite	ls
 800eb2a:	2400      	movls	r4, #0
 800eb2c:	2401      	movhi	r4, #1
 800eb2e:	9401      	str	r4, [sp, #4]
 800eb30:	f890 4060 	ldrb.w	r4, [r0, #96]	@ 0x60
 800eb34:	f084 0401 	eor.w	r4, r4, #1
 800eb38:	9404      	str	r4, [sp, #16]
 800eb3a:	9c01      	ldr	r4, [sp, #4]
 800eb3c:	2c00      	cmp	r4, #0
 800eb3e:	9c04      	ldr	r4, [sp, #16]
 800eb40:	bf0c      	ite	eq
 800eb42:	2702      	moveq	r7, #2
 800eb44:	2700      	movne	r7, #0
 800eb46:	193c      	adds	r4, r7, r4
 800eb48:	9400      	str	r4, [sp, #0]
 800eb4a:	2900      	cmp	r1, #0
 800eb4c:	f000 8186 	beq.w	800ee5c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x700>
 800eb50:	f831 4014 	ldrh.w	r4, [r1, r4, lsl #1]
 800eb54:	2c00      	cmp	r4, #0
 800eb56:	f040 8221 	bne.w	800ef9c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x840>
 800eb5a:	2a00      	cmp	r2, #0
 800eb5c:	f000 821e 	beq.w	800ef9c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x840>
 800eb60:	eb0b 0402 	add.w	r4, fp, r2
 800eb64:	b2a4      	uxth	r4, r4
 800eb66:	2c09      	cmp	r4, #9
 800eb68:	bf88      	it	hi
 800eb6a:	3c0a      	subhi	r4, #10
 800eb6c:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800eb70:	4eb9      	ldr	r6, [pc, #740]	@ (800ee58 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6fc>)
 800eb72:	8c64      	ldrh	r4, [r4, #34]	@ 0x22
 800eb74:	f102 0e01 	add.w	lr, r2, #1
 800eb78:	f2a4 6c4b 	subw	ip, r4, #1611	@ 0x64b
 800eb7c:	f1bc 0f14 	cmp.w	ip, #20
 800eb80:	d915      	bls.n	800ebae <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x452>
 800eb82:	f024 0c04 	bic.w	ip, r4, #4
 800eb86:	f5bc 6fce 	cmp.w	ip, #1648	@ 0x670
 800eb8a:	d010      	beq.n	800ebae <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x452>
 800eb8c:	f2a4 6cd6 	subw	ip, r4, #1750	@ 0x6d6
 800eb90:	fa1f fc8c 	uxth.w	ip, ip
 800eb94:	f1bc 0f17 	cmp.w	ip, #23
 800eb98:	d804      	bhi.n	800eba4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x448>
 800eb9a:	fa26 fc0c 	lsr.w	ip, r6, ip
 800eb9e:	f01c 0f01 	tst.w	ip, #1
 800eba2:	d104      	bne.n	800ebae <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x452>
 800eba4:	f6a4 0ce4 	subw	ip, r4, #2276	@ 0x8e4
 800eba8:	f1bc 0f1a 	cmp.w	ip, #26
 800ebac:	d81c      	bhi.n	800ebe8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x48c>
 800ebae:	eb0b 040e 	add.w	r4, fp, lr
 800ebb2:	b2a4      	uxth	r4, r4
 800ebb4:	2c09      	cmp	r4, #9
 800ebb6:	bf88      	it	hi
 800ebb8:	3c0a      	subhi	r4, #10
 800ebba:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800ebbe:	f10e 0e01 	add.w	lr, lr, #1
 800ebc2:	8c64      	ldrh	r4, [r4, #34]	@ 0x22
 800ebc4:	e7d8      	b.n	800eb78 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x41c>
 800ebc6:	4632      	mov	r2, r6
 800ebc8:	4297      	cmp	r7, r2
 800ebca:	f6ff aeee 	blt.w	800e9aa <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x24e>
 800ebce:	2200      	movs	r2, #0
 800ebd0:	4611      	mov	r1, r2
 800ebd2:	e776      	b.n	800eac2 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x366>
 800ebd4:	d3f7      	bcc.n	800ebc6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x46a>
 800ebd6:	f10e 0102 	add.w	r1, lr, #2
 800ebda:	2201      	movs	r2, #1
 800ebdc:	e771      	b.n	800eac2 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x366>
 800ebde:	3401      	adds	r4, #1
 800ebe0:	b2a4      	uxth	r4, r4
 800ebe2:	e777      	b.n	800ead4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x378>
 800ebe4:	2400      	movs	r4, #0
 800ebe6:	e7a2      	b.n	800eb2e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x3d2>
 800ebe8:	6c86      	ldr	r6, [r0, #72]	@ 0x48
 800ebea:	2e00      	cmp	r6, #0
 800ebec:	d07a      	beq.n	800ece4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x588>
 800ebee:	f46f 6ac4 	mvn.w	sl, #1568	@ 0x620
 800ebf2:	eb04 0c0a 	add.w	ip, r4, sl
 800ebf6:	f1bc 0f19 	cmp.w	ip, #25
 800ebfa:	d840      	bhi.n	800ec7e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x522>
 800ebfc:	f104 5400 	add.w	r4, r4, #536870912	@ 0x20000000
 800ec00:	f46f 69c4 	mvn.w	r9, #1568	@ 0x620
 800ec04:	68f7      	ldr	r7, [r6, #12]
 800ec06:	444c      	add	r4, r9
 800ec08:	eb07 0cc4 	add.w	ip, r7, r4, lsl #3
 800ec0c:	f10e 0401 	add.w	r4, lr, #1
 800ec10:	44de      	add	lr, fp
 800ec12:	fa1f fe8e 	uxth.w	lr, lr
 800ec16:	f1be 0f09 	cmp.w	lr, #9
 800ec1a:	bf88      	it	hi
 800ec1c:	f1ae 0e0a 	subhi.w	lr, lr, #10
 800ec20:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
 800ec24:	445c      	add	r4, fp
 800ec26:	f8be e022 	ldrh.w	lr, [lr, #34]	@ 0x22
 800ec2a:	f8df 922c 	ldr.w	r9, [pc, #556]	@ 800ee58 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6fc>
 800ec2e:	b2a4      	uxth	r4, r4
 800ec30:	f2ae 684b 	subw	r8, lr, #1611	@ 0x64b
 800ec34:	f1b8 0f14 	cmp.w	r8, #20
 800ec38:	d915      	bls.n	800ec66 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x50a>
 800ec3a:	f02e 0804 	bic.w	r8, lr, #4
 800ec3e:	f5b8 6fce 	cmp.w	r8, #1648	@ 0x670
 800ec42:	d010      	beq.n	800ec66 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x50a>
 800ec44:	f2ae 68d6 	subw	r8, lr, #1750	@ 0x6d6
 800ec48:	fa1f f888 	uxth.w	r8, r8
 800ec4c:	f1b8 0f17 	cmp.w	r8, #23
 800ec50:	d804      	bhi.n	800ec5c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x500>
 800ec52:	fa29 f808 	lsr.w	r8, r9, r8
 800ec56:	f018 0f01 	tst.w	r8, #1
 800ec5a:	d104      	bne.n	800ec66 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x50a>
 800ec5c:	f6ae 08e4 	subw	r8, lr, #2276	@ 0x8e4
 800ec60:	f1b8 0f1a 	cmp.w	r8, #26
 800ec64:	d846      	bhi.n	800ecf4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x598>
 800ec66:	2c09      	cmp	r4, #9
 800ec68:	46a6      	mov	lr, r4
 800ec6a:	bf88      	it	hi
 800ec6c:	f1a4 0e0a 	subhi.w	lr, r4, #10
 800ec70:	eb00 0e4e 	add.w	lr, r0, lr, lsl #1
 800ec74:	3401      	adds	r4, #1
 800ec76:	b2a4      	uxth	r4, r4
 800ec78:	f8be e022 	ldrh.w	lr, [lr, #34]	@ 0x22
 800ec7c:	e7d8      	b.n	800ec30 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x4d4>
 800ec7e:	f46f 68c8 	mvn.w	r8, #1600	@ 0x640
 800ec82:	eb04 0c08 	add.w	ip, r4, r8
 800ec86:	f1bc 0f09 	cmp.w	ip, #9
 800ec8a:	d806      	bhi.n	800ec9a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x53e>
 800ec8c:	f104 5400 	add.w	r4, r4, #536870912	@ 0x20000000
 800ec90:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 800ec94:	4464      	add	r4, ip
 800ec96:	6937      	ldr	r7, [r6, #16]
 800ec98:	e7b6      	b.n	800ec08 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x4ac>
 800ec9a:	f46f 67ce 	mvn.w	r7, #1648	@ 0x670
 800ec9e:	eb04 0c07 	add.w	ip, r4, r7
 800eca2:	f1bc 0f62 	cmp.w	ip, #98	@ 0x62
 800eca6:	d81d      	bhi.n	800ece4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x588>
 800eca8:	f8b6 c01e 	ldrh.w	ip, [r6, #30]
 800ecac:	f1bc 0f00 	cmp.w	ip, #0
 800ecb0:	d0ac      	beq.n	800ec0c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x4b0>
 800ecb2:	6977      	ldr	r7, [r6, #20]
 800ecb4:	9703      	str	r7, [sp, #12]
 800ecb6:	f04f 0900 	mov.w	r9, #0
 800ecba:	eb0c 0809 	add.w	r8, ip, r9
 800ecbe:	270a      	movs	r7, #10
 800ecc0:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ecc4:	fb07 fa08 	mul.w	sl, r7, r8
 800ecc8:	9f03      	ldr	r7, [sp, #12]
 800ecca:	4457      	add	r7, sl
 800eccc:	9705      	str	r7, [sp, #20]
 800ecce:	9f03      	ldr	r7, [sp, #12]
 800ecd0:	f837 a00a 	ldrh.w	sl, [r7, sl]
 800ecd4:	45a2      	cmp	sl, r4
 800ecd6:	d208      	bcs.n	800ecea <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x58e>
 800ecd8:	f108 0901 	add.w	r9, r8, #1
 800ecdc:	e000      	b.n	800ece0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x584>
 800ecde:	46c4      	mov	ip, r8
 800ece0:	45cc      	cmp	ip, r9
 800ece2:	dcea      	bgt.n	800ecba <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x55e>
 800ece4:	f04f 0c00 	mov.w	ip, #0
 800ece8:	e790      	b.n	800ec0c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x4b0>
 800ecea:	d8f8      	bhi.n	800ecde <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x582>
 800ecec:	9c05      	ldr	r4, [sp, #20]
 800ecee:	f104 0c02 	add.w	ip, r4, #2
 800ecf2:	e78b      	b.n	800ec0c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x4b0>
 800ecf4:	2e00      	cmp	r6, #0
 800ecf6:	d05d      	beq.n	800edb4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x658>
 800ecf8:	f46f 6ac4 	mvn.w	sl, #1568	@ 0x620
 800ecfc:	eb0e 040a 	add.w	r4, lr, sl
 800ed00:	2c19      	cmp	r4, #25
 800ed02:	d829      	bhi.n	800ed58 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5fc>
 800ed04:	f10e 5400 	add.w	r4, lr, #536870912	@ 0x20000000
 800ed08:	f46f 69c4 	mvn.w	r9, #1568	@ 0x620
 800ed0c:	68f7      	ldr	r7, [r6, #12]
 800ed0e:	444c      	add	r4, r9
 800ed10:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 800ed14:	f1bc 0f00 	cmp.w	ip, #0
 800ed18:	d00f      	beq.n	800ed3a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5de>
 800ed1a:	f8bc c006 	ldrh.w	ip, [ip, #6]
 800ed1e:	f1bc 0f00 	cmp.w	ip, #0
 800ed22:	d00a      	beq.n	800ed3a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5de>
 800ed24:	b14c      	cbz	r4, 800ed3a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5de>
 800ed26:	f8b4 c002 	ldrh.w	ip, [r4, #2]
 800ed2a:	f1bc 0f00 	cmp.w	ip, #0
 800ed2e:	f040 8109 	bne.w	800ef44 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7e8>
 800ed32:	88e4      	ldrh	r4, [r4, #6]
 800ed34:	2c00      	cmp	r4, #0
 800ed36:	f040 8105 	bne.w	800ef44 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7e8>
 800ed3a:	9c00      	ldr	r4, [sp, #0]
 800ed3c:	2c02      	cmp	r4, #2
 800ed3e:	d13f      	bne.n	800edc0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x664>
 800ed40:	880c      	ldrh	r4, [r1, #0]
 800ed42:	2c00      	cmp	r4, #0
 800ed44:	f000 80fe 	beq.w	800ef44 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7e8>
 800ed48:	f240 6444 	movw	r4, #1604	@ 0x644
 800ed4c:	42a3      	cmp	r3, r4
 800ed4e:	f040 80f9 	bne.w	800ef44 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7e8>
 800ed52:	2401      	movs	r4, #1
 800ed54:	9401      	str	r4, [sp, #4]
 800ed56:	e0dc      	b.n	800ef12 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7b6>
 800ed58:	f46f 68c8 	mvn.w	r8, #1600	@ 0x640
 800ed5c:	eb0e 0408 	add.w	r4, lr, r8
 800ed60:	2c09      	cmp	r4, #9
 800ed62:	d806      	bhi.n	800ed72 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x616>
 800ed64:	f46f 67c8 	mvn.w	r7, #1600	@ 0x640
 800ed68:	f10e 5400 	add.w	r4, lr, #536870912	@ 0x20000000
 800ed6c:	443c      	add	r4, r7
 800ed6e:	6937      	ldr	r7, [r6, #16]
 800ed70:	e7ce      	b.n	800ed10 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5b4>
 800ed72:	f46f 64ce 	mvn.w	r4, #1648	@ 0x670
 800ed76:	4474      	add	r4, lr
 800ed78:	2c62      	cmp	r4, #98	@ 0x62
 800ed7a:	d81b      	bhi.n	800edb4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x658>
 800ed7c:	8bf4      	ldrh	r4, [r6, #30]
 800ed7e:	2c00      	cmp	r4, #0
 800ed80:	d0c8      	beq.n	800ed14 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5b8>
 800ed82:	6977      	ldr	r7, [r6, #20]
 800ed84:	9703      	str	r7, [sp, #12]
 800ed86:	f04f 0900 	mov.w	r9, #0
 800ed8a:	eb04 0809 	add.w	r8, r4, r9
 800ed8e:	270a      	movs	r7, #10
 800ed90:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ed94:	fb07 fa08 	mul.w	sl, r7, r8
 800ed98:	9f03      	ldr	r7, [sp, #12]
 800ed9a:	4457      	add	r7, sl
 800ed9c:	9705      	str	r7, [sp, #20]
 800ed9e:	9f03      	ldr	r7, [sp, #12]
 800eda0:	f837 a00a 	ldrh.w	sl, [r7, sl]
 800eda4:	45f2      	cmp	sl, lr
 800eda6:	d207      	bcs.n	800edb8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x65c>
 800eda8:	f108 0901 	add.w	r9, r8, #1
 800edac:	e000      	b.n	800edb0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x654>
 800edae:	4644      	mov	r4, r8
 800edb0:	45a1      	cmp	r9, r4
 800edb2:	dbea      	blt.n	800ed8a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x62e>
 800edb4:	2400      	movs	r4, #0
 800edb6:	e7ad      	b.n	800ed14 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5b8>
 800edb8:	d8f9      	bhi.n	800edae <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x652>
 800edba:	9c05      	ldr	r4, [sp, #20]
 800edbc:	3402      	adds	r4, #2
 800edbe:	e7a9      	b.n	800ed14 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5b8>
 800edc0:	9c00      	ldr	r4, [sp, #0]
 800edc2:	2c03      	cmp	r4, #3
 800edc4:	f040 80be 	bne.w	800ef44 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7e8>
 800edc8:	884c      	ldrh	r4, [r1, #2]
 800edca:	2c00      	cmp	r4, #0
 800edcc:	f000 80ba 	beq.w	800ef44 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7e8>
 800edd0:	f240 6444 	movw	r4, #1604	@ 0x644
 800edd4:	42a3      	cmp	r3, r4
 800edd6:	f040 80b5 	bne.w	800ef44 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7e8>
 800edda:	2401      	movs	r4, #1
 800eddc:	9401      	str	r4, [sp, #4]
 800edde:	884c      	ldrh	r4, [r1, #2]
 800ede0:	2c00      	cmp	r4, #0
 800ede2:	f000 8096 	beq.w	800ef12 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7b6>
 800ede6:	2401      	movs	r4, #1
 800ede8:	9400      	str	r4, [sp, #0]
 800edea:	e0de      	b.n	800efaa <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x84e>
 800edec:	f46f 68c8 	mvn.w	r8, #1600	@ 0x640
 800edf0:	eb03 0408 	add.w	r4, r3, r8
 800edf4:	b2a4      	uxth	r4, r4
 800edf6:	2c09      	cmp	r4, #9
 800edf8:	d806      	bhi.n	800ee08 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6ac>
 800edfa:	f103 5400 	add.w	r4, r3, #536870912	@ 0x20000000
 800edfe:	f46f 67c8 	mvn.w	r7, #1600	@ 0x640
 800ee02:	443c      	add	r4, r7
 800ee04:	6936      	ldr	r6, [r6, #16]
 800ee06:	e0ac      	b.n	800ef62 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x806>
 800ee08:	f46f 6ace 	mvn.w	sl, #1648	@ 0x670
 800ee0c:	eb03 040a 	add.w	r4, r3, sl
 800ee10:	b2a4      	uxth	r4, r4
 800ee12:	2c62      	cmp	r4, #98	@ 0x62
 800ee14:	d819      	bhi.n	800ee4a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6ee>
 800ee16:	8bf4      	ldrh	r4, [r6, #30]
 800ee18:	b1bc      	cbz	r4, 800ee4a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6ee>
 800ee1a:	f8d6 e014 	ldr.w	lr, [r6, #20]
 800ee1e:	f04f 0c00 	mov.w	ip, #0
 800ee22:	4626      	mov	r6, r4
 800ee24:	f04f 0a0a 	mov.w	sl, #10
 800ee28:	eb06 040c 	add.w	r4, r6, ip
 800ee2c:	1064      	asrs	r4, r4, #1
 800ee2e:	fb0a f804 	mul.w	r8, sl, r4
 800ee32:	eb0e 0908 	add.w	r9, lr, r8
 800ee36:	f83e 8008 	ldrh.w	r8, [lr, r8]
 800ee3a:	4598      	cmp	r8, r3
 800ee3c:	d207      	bcs.n	800ee4e <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6f2>
 800ee3e:	f104 0c01 	add.w	ip, r4, #1
 800ee42:	e000      	b.n	800ee46 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6ea>
 800ee44:	4626      	mov	r6, r4
 800ee46:	45b4      	cmp	ip, r6
 800ee48:	dbee      	blt.n	800ee28 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6cc>
 800ee4a:	2600      	movs	r6, #0
 800ee4c:	e08b      	b.n	800ef66 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x80a>
 800ee4e:	d8f9      	bhi.n	800ee44 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x6e8>
 800ee50:	f109 0602 	add.w	r6, r9, #2
 800ee54:	e087      	b.n	800ef66 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x80a>
 800ee56:	bf00      	nop
 800ee58:	00f67e7f 	.word	0x00f67e7f
 800ee5c:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800ee5e:	b18c      	cbz	r4, 800ee84 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x728>
 800ee60:	f46f 69c4 	mvn.w	r9, #1568	@ 0x620
 800ee64:	eb03 0609 	add.w	r6, r3, r9
 800ee68:	b2b6      	uxth	r6, r6
 800ee6a:	2e19      	cmp	r6, #25
 800ee6c:	d812      	bhi.n	800ee94 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x738>
 800ee6e:	f103 5100 	add.w	r1, r3, #536870912	@ 0x20000000
 800ee72:	f46f 68c4 	mvn.w	r8, #1568	@ 0x620
 800ee76:	68e4      	ldr	r4, [r4, #12]
 800ee78:	4441      	add	r1, r8
 800ee7a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800ee7e:	2900      	cmp	r1, #0
 800ee80:	f040 808c 	bne.w	800ef9c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x840>
 800ee84:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ee88:	f47f adb1 	bne.w	800e9ee <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
 800ee92:	e5ac      	b.n	800e9ee <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800ee94:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 800ee98:	eb03 060c 	add.w	r6, r3, ip
 800ee9c:	b2b6      	uxth	r6, r6
 800ee9e:	2e09      	cmp	r6, #9
 800eea0:	d806      	bhi.n	800eeb0 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x754>
 800eea2:	f103 5100 	add.w	r1, r3, #536870912	@ 0x20000000
 800eea6:	f46f 67c8 	mvn.w	r7, #1600	@ 0x640
 800eeaa:	4439      	add	r1, r7
 800eeac:	6924      	ldr	r4, [r4, #16]
 800eeae:	e7e4      	b.n	800ee7a <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x71e>
 800eeb0:	f46f 66ce 	mvn.w	r6, #1648	@ 0x670
 800eeb4:	199e      	adds	r6, r3, r6
 800eeb6:	b2b6      	uxth	r6, r6
 800eeb8:	2e62      	cmp	r6, #98	@ 0x62
 800eeba:	d8e3      	bhi.n	800ee84 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x728>
 800eebc:	8be6      	ldrh	r6, [r4, #30]
 800eebe:	2e00      	cmp	r6, #0
 800eec0:	d0e0      	beq.n	800ee84 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x728>
 800eec2:	f8d4 e014 	ldr.w	lr, [r4, #20]
 800eec6:	f04f 090a 	mov.w	r9, #10
 800eeca:	4634      	mov	r4, r6
 800eecc:	1866      	adds	r6, r4, r1
 800eece:	1076      	asrs	r6, r6, #1
 800eed0:	fb09 fc06 	mul.w	ip, r9, r6
 800eed4:	eb0e 080c 	add.w	r8, lr, ip
 800eed8:	f83e c00c 	ldrh.w	ip, [lr, ip]
 800eedc:	459c      	cmp	ip, r3
 800eede:	d205      	bcs.n	800eeec <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x790>
 800eee0:	1c71      	adds	r1, r6, #1
 800eee2:	e000      	b.n	800eee6 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x78a>
 800eee4:	4634      	mov	r4, r6
 800eee6:	428c      	cmp	r4, r1
 800eee8:	dcf0      	bgt.n	800eecc <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x770>
 800eeea:	e7cb      	b.n	800ee84 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x728>
 800eeec:	d8fa      	bhi.n	800eee4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x788>
 800eeee:	f108 0102 	add.w	r1, r8, #2
 800eef2:	e053      	b.n	800ef9c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x840>
 800eef4:	9c00      	ldr	r4, [sp, #0]
 800eef6:	2c03      	cmp	r4, #3
 800eef8:	d104      	bne.n	800ef04 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7a8>
 800eefa:	88cc      	ldrh	r4, [r1, #6]
 800eefc:	2c00      	cmp	r4, #0
 800eefe:	f43f af6c 	beq.w	800edda <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x67e>
 800ef02:	e052      	b.n	800efaa <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x84e>
 800ef04:	9c00      	ldr	r4, [sp, #0]
 800ef06:	2c01      	cmp	r4, #1
 800ef08:	f43f af69 	beq.w	800edde <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x682>
 800ef0c:	9c00      	ldr	r4, [sp, #0]
 800ef0e:	2c00      	cmp	r4, #0
 800ef10:	d14b      	bne.n	800efaa <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x84e>
 800ef12:	880c      	ldrh	r4, [r1, #0]
 800ef14:	b924      	cbnz	r4, 800ef20 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x7c4>
 800ef16:	884f      	ldrh	r7, [r1, #2]
 800ef18:	1c3c      	adds	r4, r7, #0
 800ef1a:	bf18      	it	ne
 800ef1c:	2401      	movne	r4, #1
 800ef1e:	e763      	b.n	800ede8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x68c>
 800ef20:	2400      	movs	r4, #0
 800ef22:	e761      	b.n	800ede8 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x68c>
 800ef24:	233e      	movs	r3, #62	@ 0x3e
 800ef26:	e562      	b.n	800e9ee <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800ef28:	233c      	movs	r3, #60	@ 0x3c
 800ef2a:	e560      	b.n	800e9ee <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800ef2c:	2329      	movs	r3, #41	@ 0x29
 800ef2e:	e55e      	b.n	800e9ee <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800ef30:	2328      	movs	r3, #40	@ 0x28
 800ef32:	e55c      	b.n	800e9ee <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800ef34:	235d      	movs	r3, #93	@ 0x5d
 800ef36:	e55a      	b.n	800e9ee <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800ef38:	235b      	movs	r3, #91	@ 0x5b
 800ef3a:	e558      	b.n	800e9ee <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800ef3c:	237d      	movs	r3, #125	@ 0x7d
 800ef3e:	e556      	b.n	800e9ee <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800ef40:	237b      	movs	r3, #123	@ 0x7b
 800ef42:	e554      	b.n	800e9ee <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800ef44:	b17e      	cbz	r6, 800ef66 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x80a>
 800ef46:	f46f 6ac4 	mvn.w	sl, #1568	@ 0x620
 800ef4a:	eb03 040a 	add.w	r4, r3, sl
 800ef4e:	b2a4      	uxth	r4, r4
 800ef50:	2c19      	cmp	r4, #25
 800ef52:	f63f af4b 	bhi.w	800edec <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x690>
 800ef56:	f103 5400 	add.w	r4, r3, #536870912	@ 0x20000000
 800ef5a:	f46f 69c4 	mvn.w	r9, #1568	@ 0x620
 800ef5e:	68f6      	ldr	r6, [r6, #12]
 800ef60:	444c      	add	r4, r9
 800ef62:	eb06 06c4 	add.w	r6, r6, r4, lsl #3
 800ef66:	9c02      	ldr	r4, [sp, #8]
 800ef68:	9f04      	ldr	r7, [sp, #16]
 800ef6a:	8c64      	ldrh	r4, [r4, #34]	@ 0x22
 800ef6c:	f2a4 6422 	subw	r4, r4, #1570	@ 0x622
 800ef70:	b2a4      	uxth	r4, r4
 800ef72:	2cb1      	cmp	r4, #177	@ 0xb1
 800ef74:	bf8c      	ite	hi
 800ef76:	f04f 0c00 	movhi.w	ip, #0
 800ef7a:	f04f 0c02 	movls.w	ip, #2
 800ef7e:	44bc      	add	ip, r7
 800ef80:	b166      	cbz	r6, 800ef9c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x840>
 800ef82:	f836 e01c 	ldrh.w	lr, [r6, ip, lsl #1]
 800ef86:	f1be 0f00 	cmp.w	lr, #0
 800ef8a:	d007      	beq.n	800ef9c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x840>
 800ef8c:	2cb1      	cmp	r4, #177	@ 0xb1
 800ef8e:	bf94      	ite	ls
 800ef90:	2200      	movls	r2, #0
 800ef92:	2201      	movhi	r2, #1
 800ef94:	e9cd c200 	strd	ip, r2, [sp]
 800ef98:	4631      	mov	r1, r6
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	9c00      	ldr	r4, [sp, #0]
 800ef9e:	2c02      	cmp	r4, #2
 800efa0:	d1a8      	bne.n	800eef4 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x798>
 800efa2:	888c      	ldrh	r4, [r1, #4]
 800efa4:	2c00      	cmp	r4, #0
 800efa6:	f43f aed4 	beq.w	800ed52 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x5f6>
 800efaa:	9c00      	ldr	r4, [sp, #0]
 800efac:	9e00      	ldr	r6, [sp, #0]
 800efae:	eb01 0444 	add.w	r4, r1, r4, lsl #1
 800efb2:	f831 1016 	ldrh.w	r1, [r1, r6, lsl #1]
 800efb6:	2900      	cmp	r1, #0
 800efb8:	f43f ad19 	beq.w	800e9ee <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800efbc:	9b01      	ldr	r3, [sp, #4]
 800efbe:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 800efc2:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 800efc4:	b292      	uxth	r2, r2
 800efc6:	1a9b      	subs	r3, r3, r2
 800efc8:	445a      	add	r2, fp
 800efca:	b292      	uxth	r2, r2
 800efcc:	2a09      	cmp	r2, #9
 800efce:	bf88      	it	hi
 800efd0:	3a0a      	subhi	r2, #10
 800efd2:	8703      	strh	r3, [r0, #56]	@ 0x38
 800efd4:	86c2      	strh	r2, [r0, #54]	@ 0x36
 800efd6:	b145      	cbz	r5, 800efea <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x88e>
 800efd8:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800efda:	3301      	adds	r3, #1
 800efdc:	b29b      	uxth	r3, r3
 800efde:	2b0a      	cmp	r3, #10
 800efe0:	bf28      	it	cs
 800efe2:	2300      	movcs	r3, #0
 800efe4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800efe8:	8445      	strh	r5, [r0, #34]	@ 0x22
 800efea:	8823      	ldrh	r3, [r4, #0]
 800efec:	e4ff      	b.n	800e9ee <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x292>
 800efee:	2b20      	cmp	r3, #32
 800eff0:	f47f ad24 	bne.w	800ea3c <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x2e0>
 800eff4:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800eff8:	00d2      	lsls	r2, r2, #3
 800effa:	f5a2 5240 	sub.w	r2, r2, #12288	@ 0x3000
 800effe:	3a30      	subs	r2, #48	@ 0x30
 800f000:	b292      	uxth	r2, r2
 800f002:	f240 6152 	movw	r1, #1618	@ 0x652
 800f006:	e52f      	b.n	800ea68 <_ZN8touchgfx12TextProvider16unicodeConverterEh+0x30c>

0800f008 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 800f008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f00a:	4605      	mov	r5, r0
 800f00c:	4608      	mov	r0, r1
 800f00e:	b1e9      	cbz	r1, 800f04c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 800f010:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 800f014:	460b      	mov	r3, r1
 800f016:	f101 0708 	add.w	r7, r1, #8
 800f01a:	4622      	mov	r2, r4
 800f01c:	6818      	ldr	r0, [r3, #0]
 800f01e:	6859      	ldr	r1, [r3, #4]
 800f020:	4626      	mov	r6, r4
 800f022:	c603      	stmia	r6!, {r0, r1}
 800f024:	3308      	adds	r3, #8
 800f026:	42bb      	cmp	r3, r7
 800f028:	4634      	mov	r4, r6
 800f02a:	d1f7      	bne.n	800f01c <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 800f02c:	6818      	ldr	r0, [r3, #0]
 800f02e:	6030      	str	r0, [r6, #0]
 800f030:	889b      	ldrh	r3, [r3, #4]
 800f032:	80b3      	strh	r3, [r6, #4]
 800f034:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 800f038:	015b      	lsls	r3, r3, #5
 800f03a:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800f03e:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 800f042:	430b      	orrs	r3, r1
 800f044:	425b      	negs	r3, r3
 800f046:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 800f04a:	4610      	mov	r0, r2
 800f04c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f04e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 800f04e:	b538      	push	{r3, r4, r5, lr}
 800f050:	460c      	mov	r4, r1
 800f052:	6811      	ldr	r1, [r2, #0]
 800f054:	4610      	mov	r0, r2
 800f056:	68cd      	ldr	r5, [r1, #12]
 800f058:	4619      	mov	r1, r3
 800f05a:	47a8      	blx	r5
 800f05c:	2800      	cmp	r0, #0
 800f05e:	bf08      	it	eq
 800f060:	4620      	moveq	r0, r4
 800f062:	bd38      	pop	{r3, r4, r5, pc}

0800f064 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 800f064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f068:	468c      	mov	ip, r1
 800f06a:	4604      	mov	r4, r0
 800f06c:	4615      	mov	r5, r2
 800f06e:	b942      	cbnz	r2, 800f082 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 800f070:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 800f074:	f8a4 205c 	strh.w	r2, [r4, #92]	@ 0x5c
 800f078:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 800f07c:	4628      	mov	r0, r5
 800f07e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f082:	7b50      	ldrb	r0, [r2, #13]
 800f084:	8893      	ldrh	r3, [r2, #4]
 800f086:	0106      	lsls	r6, r0, #4
 800f088:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 800f08c:	79ee      	ldrb	r6, [r5, #7]
 800f08e:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 800f092:	4316      	orrs	r6, r2
 800f094:	185a      	adds	r2, r3, r1
 800f096:	b291      	uxth	r1, r2
 800f098:	291d      	cmp	r1, #29
 800f09a:	b2b7      	uxth	r7, r6
 800f09c:	d87e      	bhi.n	800f19c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x138>
 800f09e:	2201      	movs	r2, #1
 800f0a0:	408a      	lsls	r2, r1
 800f0a2:	4975      	ldr	r1, [pc, #468]	@ (800f278 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 800f0a4:	420a      	tst	r2, r1
 800f0a6:	ea4f 06e6 	mov.w	r6, r6, asr #3
 800f0aa:	d12d      	bne.n	800f108 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 800f0ac:	f412 7f60 	tst.w	r2, #896	@ 0x380
 800f0b0:	d074      	beq.n	800f19c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x138>
 800f0b2:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 800f0b6:	462b      	mov	r3, r5
 800f0b8:	f105 0e08 	add.w	lr, r5, #8
 800f0bc:	4615      	mov	r5, r2
 800f0be:	6818      	ldr	r0, [r3, #0]
 800f0c0:	6859      	ldr	r1, [r3, #4]
 800f0c2:	4694      	mov	ip, r2
 800f0c4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800f0c8:	3308      	adds	r3, #8
 800f0ca:	4573      	cmp	r3, lr
 800f0cc:	4662      	mov	r2, ip
 800f0ce:	d1f6      	bne.n	800f0be <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x5a>
 800f0d0:	6818      	ldr	r0, [r3, #0]
 800f0d2:	f8cc 0000 	str.w	r0, [ip]
 800f0d6:	889b      	ldrh	r3, [r3, #4]
 800f0d8:	f8ac 3004 	strh.w	r3, [ip, #4]
 800f0dc:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800f0e0:	f894 0059 	ldrb.w	r0, [r4, #89]	@ 0x59
 800f0e4:	b2b3      	uxth	r3, r6
 800f0e6:	1aca      	subs	r2, r1, r3
 800f0e8:	b292      	uxth	r2, r2
 800f0ea:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
 800f0ee:	10d2      	asrs	r2, r2, #3
 800f0f0:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 800f0f4:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 800f0f8:	4302      	orrs	r2, r0
 800f0fa:	1bcf      	subs	r7, r1, r7
 800f0fc:	f884 2059 	strb.w	r2, [r4, #89]	@ 0x59
 800f100:	1afb      	subs	r3, r7, r3
 800f102:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 800f106:	e7b9      	b.n	800f07c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 800f108:	f104 024c 	add.w	r2, r4, #76	@ 0x4c
 800f10c:	462b      	mov	r3, r5
 800f10e:	f105 0808 	add.w	r8, r5, #8
 800f112:	4615      	mov	r5, r2
 800f114:	6818      	ldr	r0, [r3, #0]
 800f116:	6859      	ldr	r1, [r3, #4]
 800f118:	4696      	mov	lr, r2
 800f11a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800f11e:	3308      	adds	r3, #8
 800f120:	4543      	cmp	r3, r8
 800f122:	4672      	mov	r2, lr
 800f124:	d1f6      	bne.n	800f114 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 800f126:	6818      	ldr	r0, [r3, #0]
 800f128:	f8ce 0000 	str.w	r0, [lr]
 800f12c:	889b      	ldrh	r3, [r3, #4]
 800f12e:	f8ae 3004 	strh.w	r3, [lr, #4]
 800f132:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800f134:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800f138:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 800f13a:	f640 6333 	movw	r3, #3635	@ 0xe33
 800f13e:	4299      	cmp	r1, r3
 800f140:	d111      	bne.n	800f166 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x102>
 800f142:	f8dc 3000 	ldr.w	r3, [ip]
 800f146:	4660      	mov	r0, ip
 800f148:	68db      	ldr	r3, [r3, #12]
 800f14a:	4798      	blx	r3
 800f14c:	7b41      	ldrb	r1, [r0, #13]
 800f14e:	00cb      	lsls	r3, r1, #3
 800f150:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800f154:	7a03      	ldrb	r3, [r0, #8]
 800f156:	4313      	orrs	r3, r2
 800f158:	064a      	lsls	r2, r1, #25
 800f15a:	bf44      	itt	mi
 800f15c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800f160:	b21b      	sxthmi	r3, r3
 800f162:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800f166:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 800f16a:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800f16e:	443b      	add	r3, r7
 800f170:	4433      	add	r3, r6
 800f172:	b29b      	uxth	r3, r3
 800f174:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800f178:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800f17c:	10db      	asrs	r3, r3, #3
 800f17e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800f182:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f186:	4313      	orrs	r3, r2
 800f188:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800f18c:	f894 205e 	ldrb.w	r2, [r4, #94]	@ 0x5e
 800f190:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 800f194:	1a9b      	subs	r3, r3, r2
 800f196:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
 800f19a:	e76f      	b.n	800f07c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 800f19c:	f023 0204 	bic.w	r2, r3, #4
 800f1a0:	f640 611b 	movw	r1, #3611	@ 0xe1b
 800f1a4:	428a      	cmp	r2, r1
 800f1a6:	d003      	beq.n	800f1b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14c>
 800f1a8:	f640 621d 	movw	r2, #3613	@ 0xe1d
 800f1ac:	4293      	cmp	r3, r2
 800f1ae:	d120      	bne.n	800f1f2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18e>
 800f1b0:	3b01      	subs	r3, #1
 800f1b2:	b29b      	uxth	r3, r3
 800f1b4:	4662      	mov	r2, ip
 800f1b6:	4629      	mov	r1, r5
 800f1b8:	4620      	mov	r0, r4
 800f1ba:	f7ff ff48 	bl	800f04e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800f1be:	7b41      	ldrb	r1, [r0, #13]
 800f1c0:	00cb      	lsls	r3, r1, #3
 800f1c2:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800f1c6:	7a03      	ldrb	r3, [r0, #8]
 800f1c8:	0648      	lsls	r0, r1, #25
 800f1ca:	ea43 0302 	orr.w	r3, r3, r2
 800f1ce:	bf44      	itt	mi
 800f1d0:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800f1d4:	b21b      	sxthmi	r3, r3
 800f1d6:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800f1da:	7b6b      	ldrb	r3, [r5, #13]
 800f1dc:	7aaa      	ldrb	r2, [r5, #10]
 800f1de:	005b      	lsls	r3, r3, #1
 800f1e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f1e4:	4313      	orrs	r3, r2
 800f1e6:	115a      	asrs	r2, r3, #5
 800f1e8:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 800f1ec:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 800f1f0:	e032      	b.n	800f258 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 800f1f2:	00c2      	lsls	r2, r0, #3
 800f1f4:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 800f1f8:	7a2a      	ldrb	r2, [r5, #8]
 800f1fa:	430a      	orrs	r2, r1
 800f1fc:	0641      	lsls	r1, r0, #25
 800f1fe:	bf44      	itt	mi
 800f200:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 800f204:	b212      	sxthmi	r2, r2
 800f206:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
 800f20a:	f640 6109 	movw	r1, #3593	@ 0xe09
 800f20e:	f023 0210 	bic.w	r2, r3, #16
 800f212:	428a      	cmp	r2, r1
 800f214:	d003      	beq.n	800f21e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 800f216:	f640 6213 	movw	r2, #3603	@ 0xe13
 800f21a:	4293      	cmp	r3, r2
 800f21c:	d129      	bne.n	800f272 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 800f21e:	7b6e      	ldrb	r6, [r5, #13]
 800f220:	0076      	lsls	r6, r6, #1
 800f222:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 800f226:	7aae      	ldrb	r6, [r5, #10]
 800f228:	4316      	orrs	r6, r2
 800f22a:	f640 6213 	movw	r2, #3603	@ 0xe13
 800f22e:	4293      	cmp	r3, r2
 800f230:	bf1a      	itte	ne
 800f232:	f103 33ff 	addne.w	r3, r3, #4294967295
 800f236:	b29b      	uxthne	r3, r3
 800f238:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 800f23c:	4662      	mov	r2, ip
 800f23e:	4629      	mov	r1, r5
 800f240:	4620      	mov	r0, r4
 800f242:	f7ff ff04 	bl	800f04e <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 800f246:	7b43      	ldrb	r3, [r0, #13]
 800f248:	7a82      	ldrb	r2, [r0, #10]
 800f24a:	005b      	lsls	r3, r3, #1
 800f24c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f250:	4313      	orrs	r3, r2
 800f252:	1af6      	subs	r6, r6, r3
 800f254:	f8a4 605e 	strh.w	r6, [r4, #94]	@ 0x5e
 800f258:	7b69      	ldrb	r1, [r5, #13]
 800f25a:	00cb      	lsls	r3, r1, #3
 800f25c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800f260:	7a2b      	ldrb	r3, [r5, #8]
 800f262:	4313      	orrs	r3, r2
 800f264:	064a      	lsls	r2, r1, #25
 800f266:	bf44      	itt	mi
 800f268:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800f26c:	b21b      	sxthmi	r3, r3
 800f26e:	1bdb      	subs	r3, r3, r7
 800f270:	e747      	b.n	800f102 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 800f272:	2300      	movs	r3, #0
 800f274:	e7ba      	b.n	800f1ec <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 800f276:	bf00      	nop
 800f278:	3fc00079 	.word	0x3fc00079

0800f27c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 800f27c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f280:	4604      	mov	r4, r0
 800f282:	b942      	cbnz	r2, 800f296 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 800f284:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f288:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 800f28c:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 800f290:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 800f294:	e047      	b.n	800f326 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800f296:	7b51      	ldrb	r1, [r2, #13]
 800f298:	8893      	ldrh	r3, [r2, #4]
 800f29a:	010d      	lsls	r5, r1, #4
 800f29c:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 800f2a0:	79d5      	ldrb	r5, [r2, #7]
 800f2a2:	4305      	orrs	r5, r0
 800f2a4:	2d04      	cmp	r5, #4
 800f2a6:	bfcc      	ite	gt
 800f2a8:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 800f2ac:	f04f 0e01 	movle.w	lr, #1
 800f2b0:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 800f2b4:	f200 80ab 	bhi.w	800f40e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 800f2b8:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 800f2bc:	4283      	cmp	r3, r0
 800f2be:	d216      	bcs.n	800f2ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f2c0:	f240 605b 	movw	r0, #1627	@ 0x65b
 800f2c4:	4283      	cmp	r3, r0
 800f2c6:	d859      	bhi.n	800f37c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 800f2c8:	f240 6057 	movw	r0, #1623	@ 0x657
 800f2cc:	4283      	cmp	r3, r0
 800f2ce:	d20e      	bcs.n	800f2ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f2d0:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 800f2d4:	d24a      	bcs.n	800f36c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 800f2d6:	f240 604e 	movw	r0, #1614	@ 0x64e
 800f2da:	4283      	cmp	r3, r0
 800f2dc:	d207      	bcs.n	800f2ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f2de:	f240 601a 	movw	r0, #1562	@ 0x61a
 800f2e2:	4283      	cmp	r3, r0
 800f2e4:	d02a      	beq.n	800f33c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800f2e6:	d821      	bhi.n	800f32c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 800f2e8:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 800f2ec:	d35b      	bcc.n	800f3a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800f2ee:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 800f2f2:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800f2f6:	f040 80d0 	bne.w	800f49a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800f2fa:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 800f2fe:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800f302:	f040 80ca 	bne.w	800f49a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 800f306:	00cb      	lsls	r3, r1, #3
 800f308:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800f30c:	7a13      	ldrb	r3, [r2, #8]
 800f30e:	0649      	lsls	r1, r1, #25
 800f310:	ea43 0300 	orr.w	r3, r3, r0
 800f314:	bf44      	itt	mi
 800f316:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800f31a:	b21b      	sxthmi	r3, r3
 800f31c:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800f320:	1b5d      	subs	r5, r3, r5
 800f322:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800f326:	4610      	mov	r0, r2
 800f328:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f32c:	f240 604b 	movw	r0, #1611	@ 0x64b
 800f330:	4283      	cmp	r3, r0
 800f332:	d338      	bcc.n	800f3a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800f334:	f240 604c 	movw	r0, #1612	@ 0x64c
 800f338:	4283      	cmp	r3, r0
 800f33a:	d9d8      	bls.n	800f2ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f33c:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 800f340:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 800f344:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800f348:	f040 80f2 	bne.w	800f530 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 800f34c:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800f350:	f040 80ee 	bne.w	800f530 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 800f354:	00cb      	lsls	r3, r1, #3
 800f356:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800f35a:	7a13      	ldrb	r3, [r2, #8]
 800f35c:	064e      	lsls	r6, r1, #25
 800f35e:	ea43 0300 	orr.w	r3, r3, r0
 800f362:	bf44      	itt	mi
 800f364:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800f368:	b21b      	sxthmi	r3, r3
 800f36a:	e7d9      	b.n	800f320 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 800f36c:	f240 6054 	movw	r0, #1620	@ 0x654
 800f370:	4283      	cmp	r3, r0
 800f372:	d8e3      	bhi.n	800f33c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800f374:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 800f378:	d9e0      	bls.n	800f33c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800f37a:	e7b8      	b.n	800f2ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f37c:	f240 6074 	movw	r0, #1652	@ 0x674
 800f380:	4283      	cmp	r3, r0
 800f382:	d0b4      	beq.n	800f2ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f384:	d82d      	bhi.n	800f3e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 800f386:	f240 605e 	movw	r0, #1630	@ 0x65e
 800f38a:	4283      	cmp	r3, r0
 800f38c:	d804      	bhi.n	800f398 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 800f38e:	f240 605d 	movw	r0, #1629	@ 0x65d
 800f392:	4283      	cmp	r3, r0
 800f394:	d3d2      	bcc.n	800f33c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800f396:	e7aa      	b.n	800f2ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f398:	f240 605f 	movw	r0, #1631	@ 0x65f
 800f39c:	4283      	cmp	r3, r0
 800f39e:	d0cd      	beq.n	800f33c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800f3a0:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 800f3a4:	d0a3      	beq.n	800f2ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f3a6:	00cb      	lsls	r3, r1, #3
 800f3a8:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 800f3ac:	7a13      	ldrb	r3, [r2, #8]
 800f3ae:	0649      	lsls	r1, r1, #25
 800f3b0:	ea43 0300 	orr.w	r3, r3, r0
 800f3b4:	bf44      	itt	mi
 800f3b6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800f3ba:	b21b      	sxthmi	r3, r3
 800f3bc:	1b5d      	subs	r5, r3, r5
 800f3be:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800f3c2:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800f3c6:	7b53      	ldrb	r3, [r2, #13]
 800f3c8:	015b      	lsls	r3, r3, #5
 800f3ca:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 800f3ce:	7993      	ldrb	r3, [r2, #6]
 800f3d0:	430b      	orrs	r3, r1
 800f3d2:	005b      	lsls	r3, r3, #1
 800f3d4:	2105      	movs	r1, #5
 800f3d6:	fb93 f3f1 	sdiv	r3, r3, r1
 800f3da:	f992 1009 	ldrsb.w	r1, [r2, #9]
 800f3de:	440b      	add	r3, r1
 800f3e0:	e756      	b.n	800f290 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 800f3e2:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 800f3e6:	4283      	cmp	r3, r0
 800f3e8:	d809      	bhi.n	800f3fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 800f3ea:	f240 60df 	movw	r0, #1759	@ 0x6df
 800f3ee:	4283      	cmp	r3, r0
 800f3f0:	f4bf af7d 	bcs.w	800f2ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f3f4:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 800f3f8:	2b05      	cmp	r3, #5
 800f3fa:	d8d4      	bhi.n	800f3a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800f3fc:	e777      	b.n	800f2ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f3fe:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 800f402:	4283      	cmp	r3, r0
 800f404:	d09a      	beq.n	800f33c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800f406:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 800f40a:	4283      	cmp	r3, r0
 800f40c:	e7ca      	b.n	800f3a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 800f40e:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 800f412:	d22b      	bcs.n	800f46c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 800f414:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 800f418:	4283      	cmp	r3, r0
 800f41a:	d28f      	bcs.n	800f33c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800f41c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800f420:	4283      	cmp	r3, r0
 800f422:	d816      	bhi.n	800f452 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 800f424:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 800f428:	4283      	cmp	r3, r0
 800f42a:	f4bf af60 	bcs.w	800f2ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f42e:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 800f432:	4283      	cmp	r3, r0
 800f434:	d80a      	bhi.n	800f44c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 800f436:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 800f43a:	4283      	cmp	r3, r0
 800f43c:	f4bf af57 	bcs.w	800f2ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f440:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 800f444:	4283      	cmp	r3, r0
 800f446:	f43f af79 	beq.w	800f33c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800f44a:	e7ac      	b.n	800f3a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 800f44c:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 800f450:	e7f8      	b.n	800f444 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 800f452:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 800f456:	4283      	cmp	r3, r0
 800f458:	d802      	bhi.n	800f460 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 800f45a:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800f45e:	e798      	b.n	800f392 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 800f460:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 800f464:	4283      	cmp	r3, r0
 800f466:	f47f af42 	bne.w	800f2ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f46a:	e767      	b.n	800f33c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800f46c:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 800f470:	4283      	cmp	r3, r0
 800f472:	f43f af63 	beq.w	800f33c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800f476:	d802      	bhi.n	800f47e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 800f478:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 800f47c:	e7f2      	b.n	800f464 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 800f47e:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 800f482:	4283      	cmp	r3, r0
 800f484:	d805      	bhi.n	800f492 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 800f486:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 800f48a:	4283      	cmp	r3, r0
 800f48c:	f4ff af2f 	bcc.w	800f2ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 800f490:	e754      	b.n	800f33c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 800f492:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 800f496:	4283      	cmp	r3, r0
 800f498:	e7af      	b.n	800f3fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 800f49a:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 800f49e:	4617      	mov	r7, r2
 800f4a0:	f102 0808 	add.w	r8, r2, #8
 800f4a4:	4666      	mov	r6, ip
 800f4a6:	6838      	ldr	r0, [r7, #0]
 800f4a8:	6879      	ldr	r1, [r7, #4]
 800f4aa:	46e6      	mov	lr, ip
 800f4ac:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 800f4b0:	3708      	adds	r7, #8
 800f4b2:	4547      	cmp	r7, r8
 800f4b4:	46f4      	mov	ip, lr
 800f4b6:	d1f6      	bne.n	800f4a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 800f4b8:	6838      	ldr	r0, [r7, #0]
 800f4ba:	f8ce 0000 	str.w	r0, [lr]
 800f4be:	88b9      	ldrh	r1, [r7, #4]
 800f4c0:	f8ae 1004 	strh.w	r1, [lr, #4]
 800f4c4:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 800f4c8:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800f4cc:	d009      	beq.n	800f4e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 800f4ce:	7b51      	ldrb	r1, [r2, #13]
 800f4d0:	7992      	ldrb	r2, [r2, #6]
 800f4d2:	0149      	lsls	r1, r1, #5
 800f4d4:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800f4d8:	4311      	orrs	r1, r2
 800f4da:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800f4de:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 800f4e2:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800f4e6:	b2ad      	uxth	r5, r5
 800f4e8:	d00d      	beq.n	800f506 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 800f4ea:	442b      	add	r3, r5
 800f4ec:	b29b      	uxth	r3, r3
 800f4ee:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800f4f2:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800f4f6:	10db      	asrs	r3, r3, #3
 800f4f8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800f4fc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f500:	4313      	orrs	r3, r2
 800f502:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800f506:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800f50a:	00cb      	lsls	r3, r1, #3
 800f50c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800f510:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 800f514:	064f      	lsls	r7, r1, #25
 800f516:	ea43 0302 	orr.w	r3, r3, r2
 800f51a:	bf44      	itt	mi
 800f51c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800f520:	b21b      	sxthmi	r3, r3
 800f522:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 800f526:	1b5b      	subs	r3, r3, r5
 800f528:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 800f52c:	4632      	mov	r2, r6
 800f52e:	e6fa      	b.n	800f326 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 800f530:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 800f534:	4617      	mov	r7, r2
 800f536:	f102 0908 	add.w	r9, r2, #8
 800f53a:	4666      	mov	r6, ip
 800f53c:	6838      	ldr	r0, [r7, #0]
 800f53e:	6879      	ldr	r1, [r7, #4]
 800f540:	46e0      	mov	r8, ip
 800f542:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 800f546:	3708      	adds	r7, #8
 800f548:	454f      	cmp	r7, r9
 800f54a:	46c4      	mov	ip, r8
 800f54c:	d1f6      	bne.n	800f53c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 800f54e:	6838      	ldr	r0, [r7, #0]
 800f550:	f8c8 0000 	str.w	r0, [r8]
 800f554:	88b9      	ldrh	r1, [r7, #4]
 800f556:	f8a8 1004 	strh.w	r1, [r8, #4]
 800f55a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 800f55e:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800f562:	d009      	beq.n	800f578 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 800f564:	7b51      	ldrb	r1, [r2, #13]
 800f566:	7992      	ldrb	r2, [r2, #6]
 800f568:	0149      	lsls	r1, r1, #5
 800f56a:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 800f56e:	4311      	orrs	r1, r2
 800f570:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 800f574:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 800f578:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800f57c:	d00e      	beq.n	800f59c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 800f57e:	eba3 030e 	sub.w	r3, r3, lr
 800f582:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 800f586:	b29b      	uxth	r3, r3
 800f588:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800f58c:	10db      	asrs	r3, r3, #3
 800f58e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f592:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800f596:	4313      	orrs	r3, r2
 800f598:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 800f59c:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800f5a0:	00cb      	lsls	r3, r1, #3
 800f5a2:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800f5a6:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 800f5aa:	0648      	lsls	r0, r1, #25
 800f5ac:	ea43 0302 	orr.w	r3, r3, r2
 800f5b0:	bf44      	itt	mi
 800f5b2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 800f5b6:	b21b      	sxthmi	r3, r3
 800f5b8:	1b5d      	subs	r5, r3, r5
 800f5ba:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 800f5be:	e7b5      	b.n	800f52c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

0800f5c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 800f5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5c4:	461e      	mov	r6, r3
 800f5c6:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800f5c8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800f5cc:	4604      	mov	r4, r0
 800f5ce:	4617      	mov	r7, r2
 800f5d0:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800f5d4:	f7f3 fffa 	bl	80035cc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800f5d8:	4605      	mov	r5, r0
 800f5da:	b918      	cbnz	r0, 800f5e4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 800f5dc:	6030      	str	r0, [r6, #0]
 800f5de:	4628      	mov	r0, r5
 800f5e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	4601      	mov	r1, r0
 800f5e8:	68db      	ldr	r3, [r3, #12]
 800f5ea:	4638      	mov	r0, r7
 800f5ec:	4798      	blx	r3
 800f5ee:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 800f5f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f5f6:	4602      	mov	r2, r0
 800f5f8:	6030      	str	r0, [r6, #0]
 800f5fa:	d213      	bcs.n	800f624 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 800f5fc:	4643      	mov	r3, r8
 800f5fe:	4639      	mov	r1, r7
 800f600:	4620      	mov	r0, r4
 800f602:	f7ff fe3b 	bl	800f27c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800f606:	6030      	str	r0, [r6, #0]
 800f608:	6833      	ldr	r3, [r6, #0]
 800f60a:	b143      	cbz	r3, 800f61e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 800f60c:	7b5a      	ldrb	r2, [r3, #13]
 800f60e:	7a9b      	ldrb	r3, [r3, #10]
 800f610:	0052      	lsls	r2, r2, #1
 800f612:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800f616:	4313      	orrs	r3, r2
 800f618:	bf0c      	ite	eq
 800f61a:	2301      	moveq	r3, #1
 800f61c:	2300      	movne	r3, #0
 800f61e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 800f622:	e7dc      	b.n	800f5de <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 800f624:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 800f628:	b29b      	uxth	r3, r3
 800f62a:	2b7f      	cmp	r3, #127	@ 0x7f
 800f62c:	d804      	bhi.n	800f638 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 800f62e:	4639      	mov	r1, r7
 800f630:	4620      	mov	r0, r4
 800f632:	f7ff fd17 	bl	800f064 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800f636:	e7e6      	b.n	800f606 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 800f638:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d0e3      	beq.n	800f608 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800f640:	f640 1302 	movw	r3, #2306	@ 0x902
 800f644:	429d      	cmp	r5, r3
 800f646:	d1df      	bne.n	800f608 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 800f648:	4601      	mov	r1, r0
 800f64a:	4620      	mov	r0, r4
 800f64c:	f7ff fcdc 	bl	800f008 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 800f650:	e7d9      	b.n	800f606 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0800f652 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 800f652:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f656:	461e      	mov	r6, r3
 800f658:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800f65a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800f65e:	4604      	mov	r4, r0
 800f660:	4617      	mov	r7, r2
 800f662:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800f666:	f7f3 ffb1 	bl	80035cc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 800f66a:	4605      	mov	r5, r0
 800f66c:	b918      	cbnz	r0, 800f676 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 800f66e:	6030      	str	r0, [r6, #0]
 800f670:	4628      	mov	r0, r5
 800f672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f676:	683b      	ldr	r3, [r7, #0]
 800f678:	4601      	mov	r1, r0
 800f67a:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800f67e:	4638      	mov	r0, r7
 800f680:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f684:	47c8      	blx	r9
 800f686:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 800f68a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f68e:	4602      	mov	r2, r0
 800f690:	6030      	str	r0, [r6, #0]
 800f692:	d213      	bcs.n	800f6bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 800f694:	4643      	mov	r3, r8
 800f696:	4639      	mov	r1, r7
 800f698:	4620      	mov	r0, r4
 800f69a:	f7ff fdef 	bl	800f27c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 800f69e:	6030      	str	r0, [r6, #0]
 800f6a0:	6833      	ldr	r3, [r6, #0]
 800f6a2:	b143      	cbz	r3, 800f6b6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 800f6a4:	7b5a      	ldrb	r2, [r3, #13]
 800f6a6:	7a9b      	ldrb	r3, [r3, #10]
 800f6a8:	0052      	lsls	r2, r2, #1
 800f6aa:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800f6ae:	4313      	orrs	r3, r2
 800f6b0:	bf0c      	ite	eq
 800f6b2:	2301      	moveq	r3, #1
 800f6b4:	2300      	movne	r3, #0
 800f6b6:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 800f6ba:	e7d9      	b.n	800f670 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 800f6bc:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 800f6c0:	b29b      	uxth	r3, r3
 800f6c2:	2b7f      	cmp	r3, #127	@ 0x7f
 800f6c4:	d804      	bhi.n	800f6d0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 800f6c6:	4639      	mov	r1, r7
 800f6c8:	4620      	mov	r0, r4
 800f6ca:	f7ff fccb 	bl	800f064 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 800f6ce:	e7e6      	b.n	800f69e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 800f6d0:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d0e3      	beq.n	800f6a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 800f6d8:	f640 1302 	movw	r3, #2306	@ 0x902
 800f6dc:	429d      	cmp	r5, r3
 800f6de:	d1df      	bne.n	800f6a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 800f6e0:	4601      	mov	r1, r0
 800f6e2:	4620      	mov	r0, r4
 800f6e4:	f7ff fc90 	bl	800f008 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 800f6e8:	e7d9      	b.n	800f69e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0800f6ea <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 800f6ea:	b510      	push	{r4, lr}
 800f6ec:	4604      	mov	r4, r0
 800f6ee:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 800f6f2:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800f6f4:	b1f1      	cbz	r1, 800f734 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 800f6f6:	2b0a      	cmp	r3, #10
 800f6f8:	d02f      	beq.n	800f75a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 800f6fa:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800f6fc:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800f700:	3901      	subs	r1, #1
 800f702:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 800f704:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 800f708:	1c51      	adds	r1, r2, #1
 800f70a:	b289      	uxth	r1, r1
 800f70c:	2901      	cmp	r1, #1
 800f70e:	bf84      	itt	hi
 800f710:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800f714:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 800f716:	f103 0201 	add.w	r2, r3, #1
 800f71a:	8722      	strh	r2, [r4, #56]	@ 0x38
 800f71c:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800f71e:	bf98      	it	ls
 800f720:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 800f722:	4413      	add	r3, r2
 800f724:	b29b      	uxth	r3, r3
 800f726:	2b09      	cmp	r3, #9
 800f728:	bf88      	it	hi
 800f72a:	3b0a      	subhi	r3, #10
 800f72c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800f730:	8458      	strh	r0, [r3, #34]	@ 0x22
 800f732:	e7dc      	b.n	800f6ee <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 800f734:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800f736:	2b0a      	cmp	r3, #10
 800f738:	d00f      	beq.n	800f75a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 800f73a:	4620      	mov	r0, r4
 800f73c:	f7fe ffb8 	bl	800e6b0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 800f740:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800f742:	1c5a      	adds	r2, r3, #1
 800f744:	8722      	strh	r2, [r4, #56]	@ 0x38
 800f746:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800f748:	4413      	add	r3, r2
 800f74a:	b29b      	uxth	r3, r3
 800f74c:	2b09      	cmp	r3, #9
 800f74e:	bf88      	it	hi
 800f750:	3b0a      	subhi	r3, #10
 800f752:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800f756:	8458      	strh	r0, [r3, #34]	@ 0x22
 800f758:	e7ec      	b.n	800f734 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 800f75a:	bd10      	pop	{r4, pc}

0800f75c <_ZN8touchgfx12TextProvider11getNextCharEv>:
 800f75c:	b538      	push	{r3, r4, r5, lr}
 800f75e:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800f760:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 800f764:	4604      	mov	r4, r0
 800f766:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 800f768:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 800f76a:	3a01      	subs	r2, #1
 800f76c:	8702      	strh	r2, [r0, #56]	@ 0x38
 800f76e:	1c5a      	adds	r2, r3, #1
 800f770:	b292      	uxth	r2, r2
 800f772:	2a09      	cmp	r2, #9
 800f774:	bf86      	itte	hi
 800f776:	3b09      	subhi	r3, #9
 800f778:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 800f77a:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 800f77c:	f7ff ffb5 	bl	800f6ea <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 800f780:	8c23      	ldrh	r3, [r4, #32]
 800f782:	2b01      	cmp	r3, #1
 800f784:	bf9c      	itt	ls
 800f786:	3301      	addls	r3, #1
 800f788:	8423      	strhls	r3, [r4, #32]
 800f78a:	8be3      	ldrh	r3, [r4, #30]
 800f78c:	b90b      	cbnz	r3, 800f792 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 800f78e:	2302      	movs	r3, #2
 800f790:	83e3      	strh	r3, [r4, #30]
 800f792:	8be3      	ldrh	r3, [r4, #30]
 800f794:	3b01      	subs	r3, #1
 800f796:	b29b      	uxth	r3, r3
 800f798:	83e3      	strh	r3, [r4, #30]
 800f79a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 800f79e:	4628      	mov	r0, r5
 800f7a0:	8365      	strh	r5, [r4, #26]
 800f7a2:	bd38      	pop	{r3, r4, r5, pc}

0800f7a4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 800f7a4:	428a      	cmp	r2, r1
 800f7a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7aa:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 800f7ac:	d931      	bls.n	800f812 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 800f7ae:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 800f7b0:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 800f7b4:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 800f7b8:	19ee      	adds	r6, r5, r7
 800f7ba:	1a54      	subs	r4, r2, r1
 800f7bc:	3e01      	subs	r6, #1
 800f7be:	fa1f fe84 	uxth.w	lr, r4
 800f7c2:	b2b4      	uxth	r4, r6
 800f7c4:	eba4 090e 	sub.w	r9, r4, lr
 800f7c8:	fa1f f989 	uxth.w	r9, r9
 800f7cc:	2c09      	cmp	r4, #9
 800f7ce:	4626      	mov	r6, r4
 800f7d0:	bf88      	it	hi
 800f7d2:	f1a4 060a 	subhi.w	r6, r4, #10
 800f7d6:	f1bc 0f00 	cmp.w	ip, #0
 800f7da:	bf08      	it	eq
 800f7dc:	f04f 0c02 	moveq.w	ip, #2
 800f7e0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 800f7e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f7e8:	fa1f fc8c 	uxth.w	ip, ip
 800f7ec:	3c01      	subs	r4, #1
 800f7ee:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 800f7f2:	b2a4      	uxth	r4, r4
 800f7f4:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 800f7f8:	454c      	cmp	r4, r9
 800f7fa:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 800f7fe:	d1e5      	bne.n	800f7cc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 800f800:	eba5 050e 	sub.w	r5, r5, lr
 800f804:	eb0e 0408 	add.w	r4, lr, r8
 800f808:	8705      	strh	r5, [r0, #56]	@ 0x38
 800f80a:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 800f80e:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 800f812:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 800f814:	1a64      	subs	r4, r4, r1
 800f816:	4439      	add	r1, r7
 800f818:	b289      	uxth	r1, r1
 800f81a:	2909      	cmp	r1, #9
 800f81c:	bf88      	it	hi
 800f81e:	390a      	subhi	r1, #10
 800f820:	8704      	strh	r4, [r0, #56]	@ 0x38
 800f822:	86c1      	strh	r1, [r0, #54]	@ 0x36
 800f824:	250a      	movs	r5, #10
 800f826:	b18a      	cbz	r2, 800f84c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 800f828:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 800f82a:	3a01      	subs	r2, #1
 800f82c:	b292      	uxth	r2, r2
 800f82e:	3101      	adds	r1, #1
 800f830:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 800f834:	8701      	strh	r1, [r0, #56]	@ 0x38
 800f836:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 800f838:	b901      	cbnz	r1, 800f83c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 800f83a:	86c5      	strh	r5, [r0, #54]	@ 0x36
 800f83c:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 800f83e:	3901      	subs	r1, #1
 800f840:	b289      	uxth	r1, r1
 800f842:	86c1      	strh	r1, [r0, #54]	@ 0x36
 800f844:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800f848:	844c      	strh	r4, [r1, #34]	@ 0x22
 800f84a:	e7ec      	b.n	800f826 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 800f84c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f850:	f7ff bf4b 	b.w	800f6ea <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0800f854 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 800f854:	b570      	push	{r4, r5, r6, lr}
 800f856:	2500      	movs	r5, #0
 800f858:	4295      	cmp	r5, r2
 800f85a:	d011      	beq.n	800f880 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 800f85c:	8bc4      	ldrh	r4, [r0, #30]
 800f85e:	f831 6b02 	ldrh.w	r6, [r1], #2
 800f862:	4414      	add	r4, r2
 800f864:	3c01      	subs	r4, #1
 800f866:	1b64      	subs	r4, r4, r5
 800f868:	b2a4      	uxth	r4, r4
 800f86a:	2c01      	cmp	r4, #1
 800f86c:	bf88      	it	hi
 800f86e:	3c02      	subhi	r4, #2
 800f870:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800f874:	8b64      	ldrh	r4, [r4, #26]
 800f876:	42b4      	cmp	r4, r6
 800f878:	d117      	bne.n	800f8aa <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 800f87a:	3501      	adds	r5, #1
 800f87c:	b2ad      	uxth	r5, r5
 800f87e:	e7eb      	b.n	800f858 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 800f880:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 800f884:	2400      	movs	r4, #0
 800f886:	4413      	add	r3, r2
 800f888:	b2a2      	uxth	r2, r4
 800f88a:	429a      	cmp	r2, r3
 800f88c:	da0f      	bge.n	800f8ae <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 800f88e:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 800f890:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 800f894:	4432      	add	r2, r6
 800f896:	b292      	uxth	r2, r2
 800f898:	2a09      	cmp	r2, #9
 800f89a:	bf88      	it	hi
 800f89c:	3a0a      	subhi	r2, #10
 800f89e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800f8a2:	3401      	adds	r4, #1
 800f8a4:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 800f8a6:	42aa      	cmp	r2, r5
 800f8a8:	d0ee      	beq.n	800f888 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 800f8aa:	2000      	movs	r0, #0
 800f8ac:	bd70      	pop	{r4, r5, r6, pc}
 800f8ae:	2001      	movs	r0, #1
 800f8b0:	e7fc      	b.n	800f8ac <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0800f8b2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 800f8b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8b6:	4605      	mov	r5, r0
 800f8b8:	4616      	mov	r6, r2
 800f8ba:	1c8c      	adds	r4, r1, #2
 800f8bc:	8809      	ldrh	r1, [r1, #0]
 800f8be:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 800f8c2:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 800f8c6:	42b3      	cmp	r3, r6
 800f8c8:	d124      	bne.n	800f914 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 800f8ca:	f3c1 2903 	ubfx	r9, r1, #8, #4
 800f8ce:	f3c1 1803 	ubfx	r8, r1, #4, #4
 800f8d2:	f001 070f 	and.w	r7, r1, #15
 800f8d6:	f8cd 8000 	str.w	r8, [sp]
 800f8da:	464b      	mov	r3, r9
 800f8dc:	4652      	mov	r2, sl
 800f8de:	4621      	mov	r1, r4
 800f8e0:	4628      	mov	r0, r5
 800f8e2:	f7ff ffb7 	bl	800f854 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 800f8e6:	4683      	mov	fp, r0
 800f8e8:	b168      	cbz	r0, 800f906 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 800f8ea:	eb0a 0109 	add.w	r1, sl, r9
 800f8ee:	4441      	add	r1, r8
 800f8f0:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 800f8f4:	463a      	mov	r2, r7
 800f8f6:	4649      	mov	r1, r9
 800f8f8:	4628      	mov	r0, r5
 800f8fa:	f7ff ff53 	bl	800f7a4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 800f8fe:	4658      	mov	r0, fp
 800f900:	b003      	add	sp, #12
 800f902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f906:	eb07 010a 	add.w	r1, r7, sl
 800f90a:	4449      	add	r1, r9
 800f90c:	4441      	add	r1, r8
 800f90e:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800f912:	e7d2      	b.n	800f8ba <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 800f914:	f04f 0b00 	mov.w	fp, #0
 800f918:	e7f1      	b.n	800f8fe <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0800f91a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 800f91a:	b570      	push	{r4, r5, r6, lr}
 800f91c:	8810      	ldrh	r0, [r2, #0]
 800f91e:	4298      	cmp	r0, r3
 800f920:	d817      	bhi.n	800f952 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800f922:	1e48      	subs	r0, r1, #1
 800f924:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 800f928:	4298      	cmp	r0, r3
 800f92a:	d312      	bcc.n	800f952 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800f92c:	2400      	movs	r4, #0
 800f92e:	428c      	cmp	r4, r1
 800f930:	d20f      	bcs.n	800f952 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 800f932:	1860      	adds	r0, r4, r1
 800f934:	1040      	asrs	r0, r0, #1
 800f936:	0085      	lsls	r5, r0, #2
 800f938:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 800f93c:	42b3      	cmp	r3, r6
 800f93e:	d902      	bls.n	800f946 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 800f940:	3001      	adds	r0, #1
 800f942:	b284      	uxth	r4, r0
 800f944:	e7f3      	b.n	800f92e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800f946:	d201      	bcs.n	800f94c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 800f948:	b281      	uxth	r1, r0
 800f94a:	e7f0      	b.n	800f92e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 800f94c:	442a      	add	r2, r5
 800f94e:	8850      	ldrh	r0, [r2, #2]
 800f950:	bd70      	pop	{r4, r5, r6, pc}
 800f952:	2000      	movs	r0, #0
 800f954:	e7fc      	b.n	800f950 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0800f956 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 800f956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f95a:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 800f95c:	886f      	ldrh	r7, [r5, #2]
 800f95e:	4604      	mov	r4, r0
 800f960:	087f      	lsrs	r7, r7, #1
 800f962:	260b      	movs	r6, #11
 800f964:	3e01      	subs	r6, #1
 800f966:	d013      	beq.n	800f990 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800f968:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 800f96a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800f96e:	462a      	mov	r2, r5
 800f970:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 800f974:	4639      	mov	r1, r7
 800f976:	4643      	mov	r3, r8
 800f978:	4620      	mov	r0, r4
 800f97a:	f7ff ffce 	bl	800f91a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 800f97e:	b138      	cbz	r0, 800f990 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 800f980:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 800f984:	4642      	mov	r2, r8
 800f986:	4620      	mov	r0, r4
 800f988:	f7ff ff93 	bl	800f8b2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 800f98c:	2800      	cmp	r0, #0
 800f98e:	d1e9      	bne.n	800f964 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 800f990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f994 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 800f994:	b570      	push	{r4, r5, r6, lr}
 800f996:	694a      	ldr	r2, [r1, #20]
 800f998:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800f99a:	684b      	ldr	r3, [r1, #4]
 800f99c:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 800f99e:	1b54      	subs	r4, r2, r5
 800f9a0:	f000 8106 	beq.w	800fbb0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 800f9a4:	1b9b      	subs	r3, r3, r6
 800f9a6:	d003      	beq.n	800f9b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 800f9a8:	4363      	muls	r3, r4
 800f9aa:	2210      	movs	r2, #16
 800f9ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800f9b0:	680c      	ldr	r4, [r1, #0]
 800f9b2:	698a      	ldr	r2, [r1, #24]
 800f9b4:	1b65      	subs	r5, r4, r5
 800f9b6:	f000 80fd 	beq.w	800fbb4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 800f9ba:	1b92      	subs	r2, r2, r6
 800f9bc:	d003      	beq.n	800f9c6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 800f9be:	436a      	muls	r2, r5
 800f9c0:	2410      	movs	r4, #16
 800f9c2:	fb92 f2f4 	sdiv	r2, r2, r4
 800f9c6:	1a9b      	subs	r3, r3, r2
 800f9c8:	ee07 3a90 	vmov	s15, r3
 800f9cc:	ed9f 4a88 	vldr	s8, [pc, #544]	@ 800fbf0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 800f9d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f9d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f9d8:	ee67 7a84 	vmul.f32	s15, s15, s8
 800f9dc:	460a      	mov	r2, r1
 800f9de:	ee87 3a27 	vdiv.f32	s6, s14, s15
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	f100 040c 	add.w	r4, r0, #12
 800f9e8:	eeb1 6a43 	vneg.f32	s12, s6
 800f9ec:	edd2 7a02 	vldr	s15, [r2, #8]
 800f9f0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f9f4:	3214      	adds	r2, #20
 800f9f6:	ece3 6a01 	vstmia	r3!, {s13}
 800f9fa:	ed52 7a02 	vldr	s15, [r2, #-8]
 800f9fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fa02:	429c      	cmp	r4, r3
 800fa04:	edc3 7a02 	vstr	s15, [r3, #8]
 800fa08:	ed52 7a01 	vldr	s15, [r2, #-4]
 800fa0c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fa10:	edc3 7a05 	vstr	s15, [r3, #20]
 800fa14:	d1ea      	bne.n	800f9ec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 800fa16:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800fa18:	698b      	ldr	r3, [r1, #24]
 800fa1a:	edd0 4a02 	vldr	s9, [r0, #8]
 800fa1e:	edd0 3a00 	vldr	s7, [r0]
 800fa22:	edd0 6a01 	vldr	s13, [r0, #4]
 800fa26:	ed90 5a05 	vldr	s10, [r0, #20]
 800fa2a:	ed90 2a03 	vldr	s4, [r0, #12]
 800fa2e:	edd0 5a04 	vldr	s11, [r0, #16]
 800fa32:	ed90 1a07 	vldr	s2, [r0, #28]
 800fa36:	edd0 2a06 	vldr	s5, [r0, #24]
 800fa3a:	1a9b      	subs	r3, r3, r2
 800fa3c:	ee07 3a90 	vmov	s15, r3
 800fa40:	684b      	ldr	r3, [r1, #4]
 800fa42:	1a9b      	subs	r3, r3, r2
 800fa44:	ee07 3a10 	vmov	s14, r3
 800fa48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fa4c:	ee76 6ae4 	vsub.f32	s13, s13, s9
 800fa50:	ee67 7a84 	vmul.f32	s15, s15, s8
 800fa54:	ee73 4ae4 	vsub.f32	s9, s7, s9
 800fa58:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fa5c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 800fa60:	ee27 7a04 	vmul.f32	s14, s14, s8
 800fa64:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800fa68:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fa6c:	ee32 5a45 	vsub.f32	s10, s4, s10
 800fa70:	ee67 7a83 	vmul.f32	s15, s15, s6
 800fa74:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 800fa78:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800fa7a:	694a      	ldr	r2, [r1, #20]
 800fa7c:	1b13      	subs	r3, r2, r4
 800fa7e:	ee07 3a10 	vmov	s14, r3
 800fa82:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fa86:	680b      	ldr	r3, [r1, #0]
 800fa88:	ee27 7a04 	vmul.f32	s14, s14, s8
 800fa8c:	1b1b      	subs	r3, r3, r4
 800fa8e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 800fa92:	ee07 3a10 	vmov	s14, r3
 800fa96:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fa9a:	ee27 7a04 	vmul.f32	s14, s14, s8
 800fa9e:	eee6 4a87 	vfma.f32	s9, s13, s14
 800faa2:	ee64 4a86 	vmul.f32	s9, s9, s12
 800faa6:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 800faaa:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800faac:	698b      	ldr	r3, [r1, #24]
 800faae:	1a9b      	subs	r3, r3, r2
 800fab0:	ee06 3a90 	vmov	s13, r3
 800fab4:	684b      	ldr	r3, [r1, #4]
 800fab6:	1a9b      	subs	r3, r3, r2
 800fab8:	ee07 3a10 	vmov	s14, r3
 800fabc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800fac0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fac4:	ee66 6a84 	vmul.f32	s13, s13, s8
 800fac8:	ee27 7a04 	vmul.f32	s14, s14, s8
 800facc:	ee65 6a66 	vnmul.f32	s13, s10, s13
 800fad0:	eee5 6a87 	vfma.f32	s13, s11, s14
 800fad4:	ee66 6a83 	vmul.f32	s13, s13, s6
 800fad8:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 800fadc:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800fade:	694a      	ldr	r2, [r1, #20]
 800fae0:	1b13      	subs	r3, r2, r4
 800fae2:	ee07 3a10 	vmov	s14, r3
 800fae6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800faea:	680b      	ldr	r3, [r1, #0]
 800faec:	ee27 7a04 	vmul.f32	s14, s14, s8
 800faf0:	1b1b      	subs	r3, r3, r4
 800faf2:	ee25 5a47 	vnmul.f32	s10, s10, s14
 800faf6:	ee07 3a10 	vmov	s14, r3
 800fafa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fafe:	ee27 7a04 	vmul.f32	s14, s14, s8
 800fb02:	eea5 5a87 	vfma.f32	s10, s11, s14
 800fb06:	edd0 5a08 	vldr	s11, [r0, #32]
 800fb0a:	ee25 5a06 	vmul.f32	s10, s10, s12
 800fb0e:	ee31 1a65 	vsub.f32	s2, s2, s11
 800fb12:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 800fb16:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800fb18:	698b      	ldr	r3, [r1, #24]
 800fb1a:	1a9b      	subs	r3, r3, r2
 800fb1c:	ee07 3a10 	vmov	s14, r3
 800fb20:	684b      	ldr	r3, [r1, #4]
 800fb22:	1a9b      	subs	r3, r3, r2
 800fb24:	ee01 3a90 	vmov	s3, r3
 800fb28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fb2c:	ee72 5ae5 	vsub.f32	s11, s5, s11
 800fb30:	ee27 7a04 	vmul.f32	s14, s14, s8
 800fb34:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 800fb38:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 800fb3c:	ee61 1a84 	vmul.f32	s3, s3, s8
 800fb40:	eea1 7a21 	vfma.f32	s14, s2, s3
 800fb44:	ee27 7a03 	vmul.f32	s14, s14, s6
 800fb48:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 800fb4c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800fb4e:	694a      	ldr	r2, [r1, #20]
 800fb50:	1b13      	subs	r3, r2, r4
 800fb52:	ee03 3a10 	vmov	s6, r3
 800fb56:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800fb5a:	680b      	ldr	r3, [r1, #0]
 800fb5c:	ee23 3a04 	vmul.f32	s6, s6, s8
 800fb60:	1b1b      	subs	r3, r3, r4
 800fb62:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 800fb66:	ee03 3a10 	vmov	s6, r3
 800fb6a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 800fb6e:	ee23 4a04 	vmul.f32	s8, s6, s8
 800fb72:	eee1 5a04 	vfma.f32	s11, s2, s8
 800fb76:	ee25 6a86 	vmul.f32	s12, s11, s12
 800fb7a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 800fb7e:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 800fb82:	eee3 5aa6 	vfma.f32	s11, s7, s13
 800fb86:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 800fb8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb8e:	dd13      	ble.n	800fbb8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 800fb90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fb94:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 800fb98:	63c3      	str	r3, [r0, #60]	@ 0x3c
 800fb9a:	eee3 7a87 	vfma.f32	s15, s7, s14
 800fb9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fba6:	dd15      	ble.n	800fbd4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 800fba8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fbac:	6403      	str	r3, [r0, #64]	@ 0x40
 800fbae:	bd70      	pop	{r4, r5, r6, pc}
 800fbb0:	4623      	mov	r3, r4
 800fbb2:	e6fd      	b.n	800f9b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 800fbb4:	462a      	mov	r2, r5
 800fbb6:	e706      	b.n	800f9c6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 800fbb8:	d502      	bpl.n	800fbc0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 800fbba:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800fbbe:	e7e9      	b.n	800fb94 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 800fbc0:	ee22 2a64 	vnmul.f32	s4, s4, s9
 800fbc4:	eea3 2a85 	vfma.f32	s4, s7, s10
 800fbc8:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 800fbcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbd0:	dade      	bge.n	800fb90 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 800fbd2:	e7f2      	b.n	800fbba <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 800fbd4:	d502      	bpl.n	800fbdc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 800fbd6:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800fbda:	e7e7      	b.n	800fbac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 800fbdc:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 800fbe0:	eee3 4a86 	vfma.f32	s9, s7, s12
 800fbe4:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 800fbe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbec:	dadc      	bge.n	800fba8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 800fbee:	e7f2      	b.n	800fbd6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 800fbf0:	3d800000 	.word	0x3d800000

0800fbf4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 800fbf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbf8:	2714      	movs	r7, #20
 800fbfa:	435f      	muls	r7, r3
 800fbfc:	eb02 0c07 	add.w	ip, r2, r7
 800fc00:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800fc04:	f115 0e0f 	adds.w	lr, r5, #15
 800fc08:	f100 80a2 	bmi.w	800fd50 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 800fc0c:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 800fc10:	9c08      	ldr	r4, [sp, #32]
 800fc12:	f8c0 e014 	str.w	lr, [r0, #20]
 800fc16:	2614      	movs	r6, #20
 800fc18:	4366      	muls	r6, r4
 800fc1a:	eb02 0806 	add.w	r8, r2, r6
 800fc1e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fc22:	f115 040f 	adds.w	r4, r5, #15
 800fc26:	f100 809f 	bmi.w	800fd68 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 800fc2a:	1124      	asrs	r4, r4, #4
 800fc2c:	eba4 040e 	sub.w	r4, r4, lr
 800fc30:	6184      	str	r4, [r0, #24]
 800fc32:	2c00      	cmp	r4, #0
 800fc34:	f000 808a 	beq.w	800fd4c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 800fc38:	f8dc 9004 	ldr.w	r9, [ip, #4]
 800fc3c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800fc40:	5995      	ldr	r5, [r2, r6]
 800fc42:	eba4 0809 	sub.w	r8, r4, r9
 800fc46:	59d4      	ldr	r4, [r2, r7]
 800fc48:	eba5 0a04 	sub.w	sl, r5, r4
 800fc4c:	ea4f 150a 	mov.w	r5, sl, lsl #4
 800fc50:	fb0e fe05 	mul.w	lr, lr, r5
 800fc54:	fb0a ee19 	mls	lr, sl, r9, lr
 800fc58:	fb08 e404 	mla	r4, r8, r4, lr
 800fc5c:	ea4f 1608 	mov.w	r6, r8, lsl #4
 800fc60:	3c01      	subs	r4, #1
 800fc62:	19a4      	adds	r4, r4, r6
 800fc64:	f100 808c 	bmi.w	800fd80 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 800fc68:	fb94 fef6 	sdiv	lr, r4, r6
 800fc6c:	f8c0 e000 	str.w	lr, [r0]
 800fc70:	fb06 441e 	mls	r4, r6, lr, r4
 800fc74:	6104      	str	r4, [r0, #16]
 800fc76:	2d00      	cmp	r5, #0
 800fc78:	f2c0 8095 	blt.w	800fda6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 800fc7c:	fb95 f4f6 	sdiv	r4, r5, r6
 800fc80:	6044      	str	r4, [r0, #4]
 800fc82:	fb06 5514 	mls	r5, r6, r4, r5
 800fc86:	6085      	str	r5, [r0, #8]
 800fc88:	60c6      	str	r6, [r0, #12]
 800fc8a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800fc8e:	6945      	ldr	r5, [r0, #20]
 800fc90:	59d2      	ldr	r2, [r2, r7]
 800fc92:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 800fdc8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 800fc96:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 800fc9a:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 800fc9e:	ee07 4a10 	vmov	s14, r4
 800fca2:	6804      	ldr	r4, [r0, #0]
 800fca4:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 800fca8:	ee07 2a90 	vmov	s15, r2
 800fcac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fcb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fcb4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800fcb8:	ee27 7a26 	vmul.f32	s14, s14, s13
 800fcbc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fcc0:	edd3 6a00 	vldr	s13, [r3]
 800fcc4:	eee6 6a07 	vfma.f32	s13, s12, s14
 800fcc8:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 800fccc:	eee6 6a27 	vfma.f32	s13, s12, s15
 800fcd0:	edc0 6a07 	vstr	s13, [r0, #28]
 800fcd4:	edd0 6a01 	vldr	s13, [r0, #4]
 800fcd8:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 800fcdc:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 800fce0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800fce4:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800fce8:	ed80 6a08 	vstr	s12, [r0, #32]
 800fcec:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 800fcee:	6242      	str	r2, [r0, #36]	@ 0x24
 800fcf0:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 800fcf4:	ed93 6a03 	vldr	s12, [r3, #12]
 800fcf8:	eea5 6a87 	vfma.f32	s12, s11, s14
 800fcfc:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 800fd00:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800fd04:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 800fd08:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 800fd0c:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 800fd10:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800fd14:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 800fd18:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 800fd1a:	6302      	str	r2, [r0, #48]	@ 0x30
 800fd1c:	ed93 6a06 	vldr	s12, [r3, #24]
 800fd20:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 800fd24:	eea5 6a87 	vfma.f32	s12, s11, s14
 800fd28:	eeb0 7a46 	vmov.f32	s14, s12
 800fd2c:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 800fd30:	eea6 7a27 	vfma.f32	s14, s12, s15
 800fd34:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 800fd38:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 800fd3c:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 800fd40:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fd44:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 800fd48:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800fd4a:	63c3      	str	r3, [r0, #60]	@ 0x3c
 800fd4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd50:	f1c5 0501 	rsb	r5, r5, #1
 800fd54:	f015 050f 	ands.w	r5, r5, #15
 800fd58:	bf18      	it	ne
 800fd5a:	2501      	movne	r5, #1
 800fd5c:	2410      	movs	r4, #16
 800fd5e:	fb9e fef4 	sdiv	lr, lr, r4
 800fd62:	ebae 0e05 	sub.w	lr, lr, r5
 800fd66:	e753      	b.n	800fc10 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 800fd68:	f1c5 0501 	rsb	r5, r5, #1
 800fd6c:	f015 050f 	ands.w	r5, r5, #15
 800fd70:	bf18      	it	ne
 800fd72:	2501      	movne	r5, #1
 800fd74:	f04f 0910 	mov.w	r9, #16
 800fd78:	fb94 f4f9 	sdiv	r4, r4, r9
 800fd7c:	1b64      	subs	r4, r4, r5
 800fd7e:	e755      	b.n	800fc2c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 800fd80:	4264      	negs	r4, r4
 800fd82:	fb94 fef6 	sdiv	lr, r4, r6
 800fd86:	f1ce 0800 	rsb	r8, lr, #0
 800fd8a:	fb06 441e 	mls	r4, r6, lr, r4
 800fd8e:	f8c0 8000 	str.w	r8, [r0]
 800fd92:	6104      	str	r4, [r0, #16]
 800fd94:	2c00      	cmp	r4, #0
 800fd96:	f43f af6e 	beq.w	800fc76 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 800fd9a:	ea6f 0e0e 	mvn.w	lr, lr
 800fd9e:	f8c0 e000 	str.w	lr, [r0]
 800fda2:	1b34      	subs	r4, r6, r4
 800fda4:	e766      	b.n	800fc74 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 800fda6:	426d      	negs	r5, r5
 800fda8:	fb95 f4f6 	sdiv	r4, r5, r6
 800fdac:	f1c4 0e00 	rsb	lr, r4, #0
 800fdb0:	fb06 5514 	mls	r5, r6, r4, r5
 800fdb4:	f8c0 e004 	str.w	lr, [r0, #4]
 800fdb8:	6085      	str	r5, [r0, #8]
 800fdba:	2d00      	cmp	r5, #0
 800fdbc:	f43f af64 	beq.w	800fc88 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 800fdc0:	43e4      	mvns	r4, r4
 800fdc2:	6044      	str	r4, [r0, #4]
 800fdc4:	1b75      	subs	r5, r6, r5
 800fdc6:	e75e      	b.n	800fc86 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 800fdc8:	3d800000 	.word	0x3d800000

0800fdcc <_ZN8touchgfx7Unicode6strlenEPKt>:
 800fdcc:	4602      	mov	r2, r0
 800fdce:	b148      	cbz	r0, 800fde4 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	b298      	uxth	r0, r3
 800fdd4:	3301      	adds	r3, #1
 800fdd6:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 800fdda:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 800fdde:	2900      	cmp	r1, #0
 800fde0:	d1f7      	bne.n	800fdd2 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 800fde2:	4770      	bx	lr
 800fde4:	4770      	bx	lr

0800fde6 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 800fde6:	b530      	push	{r4, r5, lr}
 800fde8:	4604      	mov	r4, r0
 800fdea:	b159      	cbz	r1, 800fe04 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 800fdec:	b148      	cbz	r0, 800fe02 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 800fdee:	2300      	movs	r3, #0
 800fdf0:	b298      	uxth	r0, r3
 800fdf2:	4282      	cmp	r2, r0
 800fdf4:	d905      	bls.n	800fe02 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 800fdf6:	5ccd      	ldrb	r5, [r1, r3]
 800fdf8:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 800fdfc:	3301      	adds	r3, #1
 800fdfe:	2d00      	cmp	r5, #0
 800fe00:	d1f6      	bne.n	800fdf0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 800fe02:	bd30      	pop	{r4, r5, pc}
 800fe04:	4608      	mov	r0, r1
 800fe06:	e7fc      	b.n	800fe02 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0800fe08 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 800fe08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe0a:	b08b      	sub	sp, #44	@ 0x2c
 800fe0c:	468c      	mov	ip, r1
 800fe0e:	2100      	movs	r1, #0
 800fe10:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800fe14:	4604      	mov	r4, r0
 800fe16:	261f      	movs	r6, #31
 800fe18:	af01      	add	r7, sp, #4
 800fe1a:	fb94 fef3 	sdiv	lr, r4, r3
 800fe1e:	fb03 441e 	mls	r4, r3, lr, r4
 800fe22:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 800fe26:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 800fe2a:	b2ec      	uxtb	r4, r5
 800fe2c:	2d09      	cmp	r5, #9
 800fe2e:	bfd4      	ite	le
 800fe30:	3430      	addle	r4, #48	@ 0x30
 800fe32:	3457      	addgt	r4, #87	@ 0x57
 800fe34:	b2e4      	uxtb	r4, r4
 800fe36:	55bc      	strb	r4, [r7, r6]
 800fe38:	4674      	mov	r4, lr
 800fe3a:	1e71      	subs	r1, r6, #1
 800fe3c:	b974      	cbnz	r4, 800fe5c <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 800fe3e:	2800      	cmp	r0, #0
 800fe40:	da05      	bge.n	800fe4e <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 800fe42:	ab0a      	add	r3, sp, #40	@ 0x28
 800fe44:	4419      	add	r1, r3
 800fe46:	232d      	movs	r3, #45	@ 0x2d
 800fe48:	f801 3c24 	strb.w	r3, [r1, #-36]
 800fe4c:	1eb1      	subs	r1, r6, #2
 800fe4e:	3101      	adds	r1, #1
 800fe50:	4439      	add	r1, r7
 800fe52:	4660      	mov	r0, ip
 800fe54:	f7ff ffc7 	bl	800fde6 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 800fe58:	b00b      	add	sp, #44	@ 0x2c
 800fe5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe5c:	460e      	mov	r6, r1
 800fe5e:	e7dc      	b.n	800fe1a <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

0800fe60 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 800fe60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe62:	b08b      	sub	sp, #44	@ 0x2c
 800fe64:	468c      	mov	ip, r1
 800fe66:	2100      	movs	r1, #0
 800fe68:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 800fe6c:	ae01      	add	r6, sp, #4
 800fe6e:	211f      	movs	r1, #31
 800fe70:	fbb0 f7f3 	udiv	r7, r0, r3
 800fe74:	fb03 0517 	mls	r5, r3, r7, r0
 800fe78:	b2ec      	uxtb	r4, r5
 800fe7a:	2d09      	cmp	r5, #9
 800fe7c:	bfd4      	ite	le
 800fe7e:	3430      	addle	r4, #48	@ 0x30
 800fe80:	3457      	addgt	r4, #87	@ 0x57
 800fe82:	b2e4      	uxtb	r4, r4
 800fe84:	558c      	strb	r4, [r1, r6]
 800fe86:	4638      	mov	r0, r7
 800fe88:	1e4c      	subs	r4, r1, #1
 800fe8a:	b92f      	cbnz	r7, 800fe98 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 800fe8c:	4431      	add	r1, r6
 800fe8e:	4660      	mov	r0, ip
 800fe90:	f7ff ffa9 	bl	800fde6 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 800fe94:	b00b      	add	sp, #44	@ 0x2c
 800fe96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe98:	4621      	mov	r1, r4
 800fe9a:	e7e9      	b.n	800fe70 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

0800fe9c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 800fe9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fea0:	4691      	mov	r9, r2
 800fea2:	b085      	sub	sp, #20
 800fea4:	6802      	ldr	r2, [r0, #0]
 800fea6:	9201      	str	r2, [sp, #4]
 800fea8:	4688      	mov	r8, r1
 800feaa:	4683      	mov	fp, r0
 800feac:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 800feb0:	9103      	str	r1, [sp, #12]
 800feb2:	4610      	mov	r0, r2
 800feb4:	461c      	mov	r4, r3
 800feb6:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 800feba:	9302      	str	r3, [sp, #8]
 800febc:	f7ff ff86 	bl	800fdcc <_ZN8touchgfx7Unicode6strlenEPKt>
 800fec0:	f1b8 0f00 	cmp.w	r8, #0
 800fec4:	bf0c      	ite	eq
 800fec6:	4684      	moveq	ip, r0
 800fec8:	f100 0c01 	addne.w	ip, r0, #1
 800fecc:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 800fed0:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 800fed4:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 800fed6:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 800fed8:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 800fedc:	9903      	ldr	r1, [sp, #12]
 800fede:	fa1f fc8c 	uxth.w	ip, ip
 800fee2:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800fee6:	d041      	beq.n	800ff6c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 800fee8:	d834      	bhi.n	800ff54 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 800feea:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 800feee:	d059      	beq.n	800ffa4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 800fef0:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 800fef4:	d03a      	beq.n	800ff6c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 800fef6:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 800fefa:	d034      	beq.n	800ff66 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 800fefc:	2400      	movs	r4, #0
 800fefe:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 800ff02:	3a01      	subs	r2, #1
 800ff04:	b169      	cbz	r1, 800ff22 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 800ff06:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800ff08:	458c      	cmp	ip, r1
 800ff0a:	da09      	bge.n	800ff20 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 800ff0c:	eba1 010c 	sub.w	r1, r1, ip
 800ff10:	b289      	uxth	r1, r1
 800ff12:	b933      	cbnz	r3, 800ff22 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 800ff14:	2e00      	cmp	r6, #0
 800ff16:	d051      	beq.n	800ffbc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 800ff18:	2800      	cmp	r0, #0
 800ff1a:	d04f      	beq.n	800ffbc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 800ff1c:	440c      	add	r4, r1
 800ff1e:	b2a4      	uxth	r4, r4
 800ff20:	2100      	movs	r1, #0
 800ff22:	682b      	ldr	r3, [r5, #0]
 800ff24:	4293      	cmp	r3, r2
 800ff26:	da07      	bge.n	800ff38 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 800ff28:	f1b8 0f00 	cmp.w	r8, #0
 800ff2c:	d004      	beq.n	800ff38 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 800ff2e:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 800ff32:	682b      	ldr	r3, [r5, #0]
 800ff34:	3301      	adds	r3, #1
 800ff36:	602b      	str	r3, [r5, #0]
 800ff38:	2730      	movs	r7, #48	@ 0x30
 800ff3a:	2c00      	cmp	r4, #0
 800ff3c:	d04e      	beq.n	800ffdc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 800ff3e:	682e      	ldr	r6, [r5, #0]
 800ff40:	3c01      	subs	r4, #1
 800ff42:	42b2      	cmp	r2, r6
 800ff44:	b2a4      	uxth	r4, r4
 800ff46:	dd49      	ble.n	800ffdc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 800ff48:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 800ff4c:	682b      	ldr	r3, [r5, #0]
 800ff4e:	3301      	adds	r3, #1
 800ff50:	602b      	str	r3, [r5, #0]
 800ff52:	e7f2      	b.n	800ff3a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 800ff54:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 800ff58:	d01d      	beq.n	800ff96 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 800ff5a:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 800ff5e:	d002      	beq.n	800ff66 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 800ff60:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 800ff64:	e7c9      	b.n	800fefa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 800ff66:	4684      	mov	ip, r0
 800ff68:	f04f 0800 	mov.w	r8, #0
 800ff6c:	2c00      	cmp	r4, #0
 800ff6e:	d0c6      	beq.n	800fefe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 800ff70:	b947      	cbnz	r7, 800ff84 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 800ff72:	2801      	cmp	r0, #1
 800ff74:	d106      	bne.n	800ff84 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 800ff76:	8814      	ldrh	r4, [r2, #0]
 800ff78:	2c30      	cmp	r4, #48	@ 0x30
 800ff7a:	bf02      	ittt	eq
 800ff7c:	3202      	addeq	r2, #2
 800ff7e:	f8cb 2000 	streq.w	r2, [fp]
 800ff82:	4638      	moveq	r0, r7
 800ff84:	45bc      	cmp	ip, r7
 800ff86:	da14      	bge.n	800ffb2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 800ff88:	b2bf      	uxth	r7, r7
 800ff8a:	eba7 040c 	sub.w	r4, r7, ip
 800ff8e:	b2a4      	uxth	r4, r4
 800ff90:	46bc      	mov	ip, r7
 800ff92:	2600      	movs	r6, #0
 800ff94:	e7b3      	b.n	800fefe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 800ff96:	4684      	mov	ip, r0
 800ff98:	b16c      	cbz	r4, 800ffb6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 800ff9a:	42b8      	cmp	r0, r7
 800ff9c:	dd00      	ble.n	800ffa0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 800ff9e:	b2b8      	uxth	r0, r7
 800ffa0:	2400      	movs	r4, #0
 800ffa2:	e003      	b.n	800ffac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 800ffa4:	f04f 0c01 	mov.w	ip, #1
 800ffa8:	2400      	movs	r4, #0
 800ffaa:	4660      	mov	r0, ip
 800ffac:	4626      	mov	r6, r4
 800ffae:	46a0      	mov	r8, r4
 800ffb0:	e7a5      	b.n	800fefe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 800ffb2:	2400      	movs	r4, #0
 800ffb4:	e7ed      	b.n	800ff92 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 800ffb6:	4626      	mov	r6, r4
 800ffb8:	46a0      	mov	r8, r4
 800ffba:	e7a0      	b.n	800fefe <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 800ffbc:	2900      	cmp	r1, #0
 800ffbe:	d0b0      	beq.n	800ff22 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 800ffc0:	2720      	movs	r7, #32
 800ffc2:	682e      	ldr	r6, [r5, #0]
 800ffc4:	2900      	cmp	r1, #0
 800ffc6:	d0ac      	beq.n	800ff22 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 800ffc8:	3901      	subs	r1, #1
 800ffca:	4296      	cmp	r6, r2
 800ffcc:	b289      	uxth	r1, r1
 800ffce:	daa7      	bge.n	800ff20 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 800ffd0:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 800ffd4:	682b      	ldr	r3, [r5, #0]
 800ffd6:	3301      	adds	r3, #1
 800ffd8:	602b      	str	r3, [r5, #0]
 800ffda:	e7f2      	b.n	800ffc2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 800ffdc:	b188      	cbz	r0, 8010002 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 800ffde:	682b      	ldr	r3, [r5, #0]
 800ffe0:	3801      	subs	r0, #1
 800ffe2:	429a      	cmp	r2, r3
 800ffe4:	b280      	uxth	r0, r0
 800ffe6:	dd0c      	ble.n	8010002 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 800ffe8:	f8db 3000 	ldr.w	r3, [fp]
 800ffec:	1c9c      	adds	r4, r3, #2
 800ffee:	f8cb 4000 	str.w	r4, [fp]
 800fff2:	881c      	ldrh	r4, [r3, #0]
 800fff4:	682b      	ldr	r3, [r5, #0]
 800fff6:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 800fffa:	682b      	ldr	r3, [r5, #0]
 800fffc:	3301      	adds	r3, #1
 800fffe:	602b      	str	r3, [r5, #0]
 8010000:	e7ec      	b.n	800ffdc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8010002:	2620      	movs	r6, #32
 8010004:	b151      	cbz	r1, 801001c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8010006:	6828      	ldr	r0, [r5, #0]
 8010008:	3901      	subs	r1, #1
 801000a:	4282      	cmp	r2, r0
 801000c:	b289      	uxth	r1, r1
 801000e:	dd05      	ble.n	801001c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8010010:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 8010014:	682b      	ldr	r3, [r5, #0]
 8010016:	3301      	adds	r3, #1
 8010018:	602b      	str	r3, [r5, #0]
 801001a:	e7f3      	b.n	8010004 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801001c:	b005      	add	sp, #20
 801001e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010022 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 8010022:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010026:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801002a:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 801002e:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 8010032:	2400      	movs	r4, #0
 8010034:	8014      	strh	r4, [r2, #0]
 8010036:	701c      	strb	r4, [r3, #0]
 8010038:	f888 4000 	strb.w	r4, [r8]
 801003c:	f88c 4000 	strb.w	r4, [ip]
 8010040:	f88e 4000 	strb.w	r4, [lr]
 8010044:	703c      	strb	r4, [r7, #0]
 8010046:	6804      	ldr	r4, [r0, #0]
 8010048:	b1a4      	cbz	r4, 8010074 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801004a:	8824      	ldrh	r4, [r4, #0]
 801004c:	f04f 0901 	mov.w	r9, #1
 8010050:	b314      	cbz	r4, 8010098 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8010052:	2c2b      	cmp	r4, #43	@ 0x2b
 8010054:	d001      	beq.n	801005a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 8010056:	2c20      	cmp	r4, #32
 8010058:	d110      	bne.n	801007c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801005a:	8014      	strh	r4, [r2, #0]
 801005c:	6804      	ldr	r4, [r0, #0]
 801005e:	b10c      	cbz	r4, 8010064 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 8010060:	3402      	adds	r4, #2
 8010062:	6004      	str	r4, [r0, #0]
 8010064:	680c      	ldr	r4, [r1, #0]
 8010066:	b10c      	cbz	r4, 801006c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 8010068:	3401      	adds	r4, #1
 801006a:	600c      	str	r4, [r1, #0]
 801006c:	6804      	ldr	r4, [r0, #0]
 801006e:	b17c      	cbz	r4, 8010090 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 8010070:	8824      	ldrh	r4, [r4, #0]
 8010072:	e7ed      	b.n	8010050 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8010074:	680c      	ldr	r4, [r1, #0]
 8010076:	b17c      	cbz	r4, 8010098 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8010078:	7824      	ldrb	r4, [r4, #0]
 801007a:	e7e7      	b.n	801004c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801007c:	2c2d      	cmp	r4, #45	@ 0x2d
 801007e:	d102      	bne.n	8010086 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 8010080:	f883 9000 	strb.w	r9, [r3]
 8010084:	e7ea      	b.n	801005c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8010086:	2c23      	cmp	r4, #35	@ 0x23
 8010088:	d107      	bne.n	801009a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801008a:	f888 9000 	strb.w	r9, [r8]
 801008e:	e7e5      	b.n	801005c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8010090:	680c      	ldr	r4, [r1, #0]
 8010092:	b10c      	cbz	r4, 8010098 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8010094:	7824      	ldrb	r4, [r4, #0]
 8010096:	e7db      	b.n	8010050 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8010098:	2400      	movs	r4, #0
 801009a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 801009e:	2b09      	cmp	r3, #9
 80100a0:	d901      	bls.n	80100a6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 80100a2:	2c2a      	cmp	r4, #42	@ 0x2a
 80100a4:	d122      	bne.n	80100ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 80100a6:	2301      	movs	r3, #1
 80100a8:	2c30      	cmp	r4, #48	@ 0x30
 80100aa:	f88e 3000 	strb.w	r3, [lr]
 80100ae:	d10d      	bne.n	80100cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 80100b0:	f88c 3000 	strb.w	r3, [ip]
 80100b4:	6803      	ldr	r3, [r0, #0]
 80100b6:	b10b      	cbz	r3, 80100bc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 80100b8:	3302      	adds	r3, #2
 80100ba:	6003      	str	r3, [r0, #0]
 80100bc:	680b      	ldr	r3, [r1, #0]
 80100be:	b10b      	cbz	r3, 80100c4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 80100c0:	3301      	adds	r3, #1
 80100c2:	600b      	str	r3, [r1, #0]
 80100c4:	6803      	ldr	r3, [r0, #0]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d02f      	beq.n	801012a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 80100ca:	881c      	ldrh	r4, [r3, #0]
 80100cc:	2c2a      	cmp	r4, #42	@ 0x2a
 80100ce:	d135      	bne.n	801013c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 80100d0:	f04f 33ff 	mov.w	r3, #4294967295
 80100d4:	6033      	str	r3, [r6, #0]
 80100d6:	6803      	ldr	r3, [r0, #0]
 80100d8:	b10b      	cbz	r3, 80100de <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 80100da:	3302      	adds	r3, #2
 80100dc:	6003      	str	r3, [r0, #0]
 80100de:	680b      	ldr	r3, [r1, #0]
 80100e0:	b10b      	cbz	r3, 80100e6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 80100e2:	3301      	adds	r3, #1
 80100e4:	600b      	str	r3, [r1, #0]
 80100e6:	6803      	ldr	r3, [r0, #0]
 80100e8:	b31b      	cbz	r3, 8010132 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 80100ea:	881c      	ldrh	r4, [r3, #0]
 80100ec:	2c2e      	cmp	r4, #46	@ 0x2e
 80100ee:	d11a      	bne.n	8010126 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 80100f0:	2301      	movs	r3, #1
 80100f2:	703b      	strb	r3, [r7, #0]
 80100f4:	6803      	ldr	r3, [r0, #0]
 80100f6:	b10b      	cbz	r3, 80100fc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 80100f8:	3302      	adds	r3, #2
 80100fa:	6003      	str	r3, [r0, #0]
 80100fc:	680b      	ldr	r3, [r1, #0]
 80100fe:	b10b      	cbz	r3, 8010104 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 8010100:	3301      	adds	r3, #1
 8010102:	600b      	str	r3, [r1, #0]
 8010104:	6803      	ldr	r3, [r0, #0]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d036      	beq.n	8010178 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801010a:	881b      	ldrh	r3, [r3, #0]
 801010c:	2b2a      	cmp	r3, #42	@ 0x2a
 801010e:	d137      	bne.n	8010180 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8010110:	f04f 33ff 	mov.w	r3, #4294967295
 8010114:	602b      	str	r3, [r5, #0]
 8010116:	6803      	ldr	r3, [r0, #0]
 8010118:	b10b      	cbz	r3, 801011e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801011a:	3302      	adds	r3, #2
 801011c:	6003      	str	r3, [r0, #0]
 801011e:	680b      	ldr	r3, [r1, #0]
 8010120:	b10b      	cbz	r3, 8010126 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8010122:	3301      	adds	r3, #1
 8010124:	600b      	str	r3, [r1, #0]
 8010126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801012a:	680c      	ldr	r4, [r1, #0]
 801012c:	b134      	cbz	r4, 801013c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801012e:	7824      	ldrb	r4, [r4, #0]
 8010130:	e7cc      	b.n	80100cc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8010132:	680b      	ldr	r3, [r1, #0]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d0f6      	beq.n	8010126 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8010138:	781c      	ldrb	r4, [r3, #0]
 801013a:	e7d7      	b.n	80100ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801013c:	2300      	movs	r3, #0
 801013e:	6033      	str	r3, [r6, #0]
 8010140:	220a      	movs	r2, #10
 8010142:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8010146:	fa1f f38c 	uxth.w	r3, ip
 801014a:	2b09      	cmp	r3, #9
 801014c:	d8ce      	bhi.n	80100ec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801014e:	6833      	ldr	r3, [r6, #0]
 8010150:	fb02 c303 	mla	r3, r2, r3, ip
 8010154:	6033      	str	r3, [r6, #0]
 8010156:	6803      	ldr	r3, [r0, #0]
 8010158:	b10b      	cbz	r3, 801015e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801015a:	3302      	adds	r3, #2
 801015c:	6003      	str	r3, [r0, #0]
 801015e:	680b      	ldr	r3, [r1, #0]
 8010160:	b10b      	cbz	r3, 8010166 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 8010162:	3301      	adds	r3, #1
 8010164:	600b      	str	r3, [r1, #0]
 8010166:	6803      	ldr	r3, [r0, #0]
 8010168:	b10b      	cbz	r3, 801016e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801016a:	881c      	ldrh	r4, [r3, #0]
 801016c:	e7e9      	b.n	8010142 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801016e:	680c      	ldr	r4, [r1, #0]
 8010170:	2c00      	cmp	r4, #0
 8010172:	d0e6      	beq.n	8010142 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8010174:	7824      	ldrb	r4, [r4, #0]
 8010176:	e7e4      	b.n	8010142 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8010178:	680b      	ldr	r3, [r1, #0]
 801017a:	b10b      	cbz	r3, 8010180 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801017c:	781b      	ldrb	r3, [r3, #0]
 801017e:	e7c5      	b.n	801010c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 8010180:	2200      	movs	r2, #0
 8010182:	602a      	str	r2, [r5, #0]
 8010184:	240a      	movs	r4, #10
 8010186:	3b30      	subs	r3, #48	@ 0x30
 8010188:	b29e      	uxth	r6, r3
 801018a:	2e09      	cmp	r6, #9
 801018c:	682a      	ldr	r2, [r5, #0]
 801018e:	d813      	bhi.n	80101b8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 8010190:	fb04 3302 	mla	r3, r4, r2, r3
 8010194:	602b      	str	r3, [r5, #0]
 8010196:	6803      	ldr	r3, [r0, #0]
 8010198:	b10b      	cbz	r3, 801019e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801019a:	3302      	adds	r3, #2
 801019c:	6003      	str	r3, [r0, #0]
 801019e:	680b      	ldr	r3, [r1, #0]
 80101a0:	b10b      	cbz	r3, 80101a6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 80101a2:	3301      	adds	r3, #1
 80101a4:	600b      	str	r3, [r1, #0]
 80101a6:	6803      	ldr	r3, [r0, #0]
 80101a8:	b10b      	cbz	r3, 80101ae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 80101aa:	881b      	ldrh	r3, [r3, #0]
 80101ac:	e7eb      	b.n	8010186 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 80101ae:	680b      	ldr	r3, [r1, #0]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d0e8      	beq.n	8010186 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 80101b4:	781b      	ldrb	r3, [r3, #0]
 80101b6:	e7e6      	b.n	8010186 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 80101b8:	2a06      	cmp	r2, #6
 80101ba:	bfa8      	it	ge
 80101bc:	2206      	movge	r2, #6
 80101be:	602a      	str	r2, [r5, #0]
 80101c0:	e7b1      	b.n	8010126 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

080101c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 80101c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101c6:	b0a3      	sub	sp, #140	@ 0x8c
 80101c8:	2600      	movs	r6, #0
 80101ca:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 80101ce:	4607      	mov	r7, r0
 80101d0:	4688      	mov	r8, r1
 80101d2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80101d6:	4631      	mov	r1, r6
 80101d8:	2242      	movs	r2, #66	@ 0x42
 80101da:	4648      	mov	r0, r9
 80101dc:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 80101de:	960d      	str	r6, [sp, #52]	@ 0x34
 80101e0:	f003 facf 	bl	8013782 <memset>
 80101e4:	b15f      	cbz	r7, 80101fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 80101e6:	f108 3aff 	add.w	sl, r8, #4294967295
 80101ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80101ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80101ee:	b152      	cbz	r2, 8010206 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 80101f0:	8812      	ldrh	r2, [r2, #0]
 80101f2:	b10a      	cbz	r2, 80101f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 80101f4:	459a      	cmp	sl, r3
 80101f6:	dc2e      	bgt.n	8010256 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 80101f8:	2200      	movs	r2, #0
 80101fa:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 80101fe:	4638      	mov	r0, r7
 8010200:	b023      	add	sp, #140	@ 0x8c
 8010202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010206:	9a08      	ldr	r2, [sp, #32]
 8010208:	2a00      	cmp	r2, #0
 801020a:	d0f5      	beq.n	80101f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801020c:	7812      	ldrb	r2, [r2, #0]
 801020e:	e7f0      	b.n	80101f2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 8010210:	2d00      	cmp	r5, #0
 8010212:	d0ea      	beq.n	80101ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8010214:	782a      	ldrb	r2, [r5, #0]
 8010216:	b142      	cbz	r2, 801022a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 8010218:	2a25      	cmp	r2, #37	@ 0x25
 801021a:	d001      	beq.n	8010220 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801021c:	459a      	cmp	sl, r3
 801021e:	dc08      	bgt.n	8010232 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 8010220:	f1bb 0f00 	cmp.w	fp, #0
 8010224:	d121      	bne.n	801026a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 8010226:	2d00      	cmp	r5, #0
 8010228:	d0df      	beq.n	80101ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801022a:	782a      	ldrb	r2, [r5, #0]
 801022c:	f04f 0b00 	mov.w	fp, #0
 8010230:	e01d      	b.n	801026e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 8010232:	f1bb 0f00 	cmp.w	fp, #0
 8010236:	d078      	beq.n	801032a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x168>
 8010238:	f8bb 2000 	ldrh.w	r2, [fp]
 801023c:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8010240:	f1bb 0f00 	cmp.w	fp, #0
 8010244:	d002      	beq.n	801024c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 8010246:	f10b 0202 	add.w	r2, fp, #2
 801024a:	9209      	str	r2, [sp, #36]	@ 0x24
 801024c:	b10d      	cbz	r5, 8010252 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801024e:	3501      	adds	r5, #1
 8010250:	9508      	str	r5, [sp, #32]
 8010252:	3301      	adds	r3, #1
 8010254:	930d      	str	r3, [sp, #52]	@ 0x34
 8010256:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801025a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801025c:	f1bb 0f00 	cmp.w	fp, #0
 8010260:	d0d6      	beq.n	8010210 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 8010262:	f8bb 2000 	ldrh.w	r2, [fp]
 8010266:	2a00      	cmp	r2, #0
 8010268:	d1d6      	bne.n	8010218 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801026a:	f8bb 2000 	ldrh.w	r2, [fp]
 801026e:	2a00      	cmp	r2, #0
 8010270:	d0bb      	beq.n	80101ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8010272:	459a      	cmp	sl, r3
 8010274:	ddb9      	ble.n	80101ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8010276:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 801027a:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801027e:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 8010282:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 8010286:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 801028a:	960e      	str	r6, [sp, #56]	@ 0x38
 801028c:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 8010290:	960f      	str	r6, [sp, #60]	@ 0x3c
 8010292:	f1bb 0f00 	cmp.w	fp, #0
 8010296:	d002      	beq.n	801029e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 8010298:	f10b 0302 	add.w	r3, fp, #2
 801029c:	9309      	str	r3, [sp, #36]	@ 0x24
 801029e:	b10d      	cbz	r5, 80102a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 80102a0:	1c6b      	adds	r3, r5, #1
 80102a2:	9308      	str	r3, [sp, #32]
 80102a4:	ab0f      	add	r3, sp, #60	@ 0x3c
 80102a6:	9305      	str	r3, [sp, #20]
 80102a8:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 80102ac:	9304      	str	r3, [sp, #16]
 80102ae:	ab0e      	add	r3, sp, #56	@ 0x38
 80102b0:	9303      	str	r3, [sp, #12]
 80102b2:	ab0c      	add	r3, sp, #48	@ 0x30
 80102b4:	9302      	str	r3, [sp, #8]
 80102b6:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 80102ba:	9301      	str	r3, [sp, #4]
 80102bc:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 80102c0:	9300      	str	r3, [sp, #0]
 80102c2:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 80102c6:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 80102ca:	a908      	add	r1, sp, #32
 80102cc:	a809      	add	r0, sp, #36	@ 0x24
 80102ce:	f7ff fea8 	bl	8010022 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 80102d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	bfbe      	ittt	lt
 80102d8:	6823      	ldrlt	r3, [r4, #0]
 80102da:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80102de:	930e      	strlt	r3, [sp, #56]	@ 0x38
 80102e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80102e2:	bfb8      	it	lt
 80102e4:	3404      	addlt	r4, #4
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	bfb8      	it	lt
 80102ea:	6823      	ldrlt	r3, [r4, #0]
 80102ec:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80102f0:	bfbe      	ittt	lt
 80102f2:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 80102f6:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 80102f8:	3404      	addlt	r4, #4
 80102fa:	b1d9      	cbz	r1, 8010334 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x172>
 80102fc:	880b      	ldrh	r3, [r1, #0]
 80102fe:	2b69      	cmp	r3, #105	@ 0x69
 8010300:	d01f      	beq.n	8010342 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8010302:	d82f      	bhi.n	8010364 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a2>
 8010304:	2b58      	cmp	r3, #88	@ 0x58
 8010306:	d01c      	beq.n	8010342 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8010308:	d818      	bhi.n	801033c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17a>
 801030a:	2b25      	cmp	r3, #37	@ 0x25
 801030c:	d034      	beq.n	8010378 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b6>
 801030e:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 8010312:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010314:	f1bb 0f00 	cmp.w	fp, #0
 8010318:	f000 80b8 	beq.w	801048c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2ca>
 801031c:	f8bb 5000 	ldrh.w	r5, [fp]
 8010320:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 8010324:	3301      	adds	r3, #1
 8010326:	930d      	str	r3, [sp, #52]	@ 0x34
 8010328:	e029      	b.n	801037e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 801032a:	b10d      	cbz	r5, 8010330 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16e>
 801032c:	782a      	ldrb	r2, [r5, #0]
 801032e:	e785      	b.n	801023c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8010330:	462a      	mov	r2, r5
 8010332:	e783      	b.n	801023c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 8010334:	2a00      	cmp	r2, #0
 8010336:	d0ea      	beq.n	801030e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 8010338:	7813      	ldrb	r3, [r2, #0]
 801033a:	e7e0      	b.n	80102fe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13c>
 801033c:	3b63      	subs	r3, #99	@ 0x63
 801033e:	2b01      	cmp	r3, #1
 8010340:	d8e5      	bhi.n	801030e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 8010342:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 8010346:	b329      	cbz	r1, 8010394 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d2>
 8010348:	880b      	ldrh	r3, [r1, #0]
 801034a:	2b69      	cmp	r3, #105	@ 0x69
 801034c:	d063      	beq.n	8010416 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 801034e:	d825      	bhi.n	801039c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1da>
 8010350:	2b63      	cmp	r3, #99	@ 0x63
 8010352:	d038      	beq.n	80103c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x204>
 8010354:	2b64      	cmp	r3, #100	@ 0x64
 8010356:	d05e      	beq.n	8010416 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x254>
 8010358:	2b58      	cmp	r3, #88	@ 0x58
 801035a:	d07b      	beq.n	8010454 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x292>
 801035c:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 8010360:	4625      	mov	r5, r4
 8010362:	e036      	b.n	80103d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8010364:	2b73      	cmp	r3, #115	@ 0x73
 8010366:	d0ec      	beq.n	8010342 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8010368:	d802      	bhi.n	8010370 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ae>
 801036a:	2b6f      	cmp	r3, #111	@ 0x6f
 801036c:	d1cf      	bne.n	801030e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14c>
 801036e:	e7e8      	b.n	8010342 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8010370:	2b75      	cmp	r3, #117	@ 0x75
 8010372:	d0e6      	beq.n	8010342 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x180>
 8010374:	2b78      	cmp	r3, #120	@ 0x78
 8010376:	e7f9      	b.n	801036c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1aa>
 8010378:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801037a:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801037e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010380:	b10b      	cbz	r3, 8010386 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c4>
 8010382:	3302      	adds	r3, #2
 8010384:	9309      	str	r3, [sp, #36]	@ 0x24
 8010386:	9b08      	ldr	r3, [sp, #32]
 8010388:	2b00      	cmp	r3, #0
 801038a:	f43f af2e 	beq.w	80101ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801038e:	3301      	adds	r3, #1
 8010390:	9308      	str	r3, [sp, #32]
 8010392:	e72a      	b.n	80101ea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8010394:	2a00      	cmp	r2, #0
 8010396:	d0e1      	beq.n	801035c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 8010398:	7813      	ldrb	r3, [r2, #0]
 801039a:	e7d6      	b.n	801034a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x188>
 801039c:	2b73      	cmp	r3, #115	@ 0x73
 801039e:	d036      	beq.n	801040e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24c>
 80103a0:	d807      	bhi.n	80103b2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1f0>
 80103a2:	2b6f      	cmp	r3, #111	@ 0x6f
 80103a4:	d1da      	bne.n	801035c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 80103a6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80103a8:	1d25      	adds	r5, r4, #4
 80103aa:	eba8 0202 	sub.w	r2, r8, r2
 80103ae:	2308      	movs	r3, #8
 80103b0:	e04a      	b.n	8010448 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 80103b2:	2b75      	cmp	r3, #117	@ 0x75
 80103b4:	d043      	beq.n	801043e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x27c>
 80103b6:	2b78      	cmp	r3, #120	@ 0x78
 80103b8:	d1d0      	bne.n	801035c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x19a>
 80103ba:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80103bc:	1d25      	adds	r5, r4, #4
 80103be:	eba8 0202 	sub.w	r2, r8, r2
 80103c2:	2310      	movs	r3, #16
 80103c4:	e040      	b.n	8010448 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x286>
 80103c6:	6823      	ldr	r3, [r4, #0]
 80103c8:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 80103cc:	1d25      	adds	r5, r4, #4
 80103ce:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 80103d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103d4:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d052      	beq.n	8010482 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c0>
 80103dc:	881a      	ldrh	r2, [r3, #0]
 80103de:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 80103e2:	a80d      	add	r0, sp, #52	@ 0x34
 80103e4:	9005      	str	r0, [sp, #20]
 80103e6:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 80103ea:	9004      	str	r0, [sp, #16]
 80103ec:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80103ee:	9003      	str	r0, [sp, #12]
 80103f0:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 80103f4:	9002      	str	r0, [sp, #8]
 80103f6:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80103f8:	9001      	str	r0, [sp, #4]
 80103fa:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 80103fe:	9000      	str	r0, [sp, #0]
 8010400:	e9cd 8706 	strd	r8, r7, [sp, #24]
 8010404:	a810      	add	r0, sp, #64	@ 0x40
 8010406:	f7ff fd49 	bl	800fe9c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801040a:	462c      	mov	r4, r5
 801040c:	e7b7      	b.n	801037e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1bc>
 801040e:	6823      	ldr	r3, [r4, #0]
 8010410:	1d25      	adds	r5, r4, #4
 8010412:	9310      	str	r3, [sp, #64]	@ 0x40
 8010414:	e7dd      	b.n	80103d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8010416:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010418:	6820      	ldr	r0, [r4, #0]
 801041a:	eba8 0202 	sub.w	r2, r8, r2
 801041e:	230a      	movs	r3, #10
 8010420:	b292      	uxth	r2, r2
 8010422:	4649      	mov	r1, r9
 8010424:	f7ff fcf0 	bl	800fe08 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 8010428:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801042c:	2b2d      	cmp	r3, #45	@ 0x2d
 801042e:	f104 0504 	add.w	r5, r4, #4
 8010432:	d1ce      	bne.n	80103d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8010434:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8010438:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801043a:	3302      	adds	r3, #2
 801043c:	e7e9      	b.n	8010412 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x250>
 801043e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010440:	1d25      	adds	r5, r4, #4
 8010442:	eba8 0202 	sub.w	r2, r8, r2
 8010446:	230a      	movs	r3, #10
 8010448:	b292      	uxth	r2, r2
 801044a:	4649      	mov	r1, r9
 801044c:	6820      	ldr	r0, [r4, #0]
 801044e:	f7ff fd07 	bl	800fe60 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8010452:	e7be      	b.n	80103d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8010454:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010456:	6820      	ldr	r0, [r4, #0]
 8010458:	eba8 0202 	sub.w	r2, r8, r2
 801045c:	b292      	uxth	r2, r2
 801045e:	2310      	movs	r3, #16
 8010460:	4649      	mov	r1, r9
 8010462:	f7ff fcfd 	bl	800fe60 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 8010466:	1d25      	adds	r5, r4, #4
 8010468:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 801046c:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8010470:	2b00      	cmp	r3, #0
 8010472:	d0ae      	beq.n	80103d2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x210>
 8010474:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 8010478:	2919      	cmp	r1, #25
 801047a:	d8f7      	bhi.n	801046c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 801047c:	3b20      	subs	r3, #32
 801047e:	8013      	strh	r3, [r2, #0]
 8010480:	e7f4      	b.n	801046c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2aa>
 8010482:	9a08      	ldr	r2, [sp, #32]
 8010484:	2a00      	cmp	r2, #0
 8010486:	d0aa      	beq.n	80103de <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 8010488:	7812      	ldrb	r2, [r2, #0]
 801048a:	e7a8      	b.n	80103de <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21c>
 801048c:	2d00      	cmp	r5, #0
 801048e:	f43f af47 	beq.w	8010320 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>
 8010492:	782d      	ldrb	r5, [r5, #0]
 8010494:	e744      	b.n	8010320 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15e>

08010496 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8010496:	b507      	push	{r0, r1, r2, lr}
 8010498:	9300      	str	r3, [sp, #0]
 801049a:	4613      	mov	r3, r2
 801049c:	2200      	movs	r2, #0
 801049e:	f7ff fe90 	bl	80101c2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 80104a2:	b003      	add	sp, #12
 80104a4:	f85d fb04 	ldr.w	pc, [sp], #4

080104a8 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 80104a8:	b40c      	push	{r2, r3}
 80104aa:	b507      	push	{r0, r1, r2, lr}
 80104ac:	ab04      	add	r3, sp, #16
 80104ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80104b2:	9301      	str	r3, [sp, #4]
 80104b4:	f7ff ffef 	bl	8010496 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 80104b8:	b003      	add	sp, #12
 80104ba:	f85d eb04 	ldr.w	lr, [sp], #4
 80104be:	b002      	add	sp, #8
 80104c0:	4770      	bx	lr
	...

080104c4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 80104c4:	4b01      	ldr	r3, [pc, #4]	@ (80104cc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 80104c6:	6018      	str	r0, [r3, #0]
 80104c8:	4770      	bx	lr
 80104ca:	bf00      	nop
 80104cc:	200126b8 	.word	0x200126b8

080104d0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 80104d0:	4b06      	ldr	r3, [pc, #24]	@ (80104ec <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 80104d2:	881a      	ldrh	r2, [r3, #0]
 80104d4:	4282      	cmp	r2, r0
 80104d6:	d807      	bhi.n	80104e8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 80104d8:	4b05      	ldr	r3, [pc, #20]	@ (80104f0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 80104da:	881b      	ldrh	r3, [r3, #0]
 80104dc:	4413      	add	r3, r2
 80104de:	4298      	cmp	r0, r3
 80104e0:	bfac      	ite	ge
 80104e2:	2000      	movge	r0, #0
 80104e4:	2001      	movlt	r0, #1
 80104e6:	4770      	bx	lr
 80104e8:	2000      	movs	r0, #0
 80104ea:	4770      	bx	lr
 80104ec:	200126d8 	.word	0x200126d8
 80104f0:	200126dc 	.word	0x200126dc

080104f4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80104f4:	b508      	push	{r3, lr}
 80104f6:	4601      	mov	r1, r0
 80104f8:	f7ff ffea 	bl	80104d0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80104fc:	b118      	cbz	r0, 8010506 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 80104fe:	4b02      	ldr	r3, [pc, #8]	@ (8010508 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8010506:	bd08      	pop	{r3, pc}
 8010508:	200126bc 	.word	0x200126bc

0801050c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801050c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801050e:	4c24      	ldr	r4, [pc, #144]	@ (80105a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8010510:	6823      	ldr	r3, [r4, #0]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d042      	beq.n	801059c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8010516:	4a23      	ldr	r2, [pc, #140]	@ (80105a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8010518:	4d23      	ldr	r5, [pc, #140]	@ (80105a8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801051a:	8811      	ldrh	r1, [r2, #0]
 801051c:	f8b5 c000 	ldrh.w	ip, [r5]
 8010520:	4822      	ldr	r0, [pc, #136]	@ (80105ac <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8010522:	4461      	add	r1, ip
 8010524:	1c4a      	adds	r2, r1, #1
 8010526:	f022 0201 	bic.w	r2, r2, #1
 801052a:	008f      	lsls	r7, r1, #2
 801052c:	0412      	lsls	r2, r2, #16
 801052e:	19de      	adds	r6, r3, r7
 8010530:	0c12      	lsrs	r2, r2, #16
 8010532:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8010536:	6006      	str	r6, [r0, #0]
 8010538:	4e1d      	ldr	r6, [pc, #116]	@ (80105b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801053a:	19da      	adds	r2, r3, r7
 801053c:	6032      	str	r2, [r6, #0]
 801053e:	220e      	movs	r2, #14
 8010540:	fb02 f20c 	mul.w	r2, r2, ip
 8010544:	3203      	adds	r2, #3
 8010546:	f022 0203 	bic.w	r2, r2, #3
 801054a:	443a      	add	r2, r7
 801054c:	4f19      	ldr	r7, [pc, #100]	@ (80105b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801054e:	4413      	add	r3, r2
 8010550:	603b      	str	r3, [r7, #0]
 8010552:	4f19      	ldr	r7, [pc, #100]	@ (80105b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8010554:	2300      	movs	r3, #0
 8010556:	803b      	strh	r3, [r7, #0]
 8010558:	4f18      	ldr	r7, [pc, #96]	@ (80105bc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801055a:	683f      	ldr	r7, [r7, #0]
 801055c:	1aba      	subs	r2, r7, r2
 801055e:	4f18      	ldr	r7, [pc, #96]	@ (80105c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8010560:	603a      	str	r2, [r7, #0]
 8010562:	4a18      	ldr	r2, [pc, #96]	@ (80105c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8010564:	469c      	mov	ip, r3
 8010566:	8013      	strh	r3, [r2, #0]
 8010568:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 801056c:	428b      	cmp	r3, r1
 801056e:	d10d      	bne.n	801058c <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8010570:	882d      	ldrh	r5, [r5, #0]
 8010572:	6830      	ldr	r0, [r6, #0]
 8010574:	2300      	movs	r3, #0
 8010576:	240e      	movs	r4, #14
 8010578:	429d      	cmp	r5, r3
 801057a:	d90f      	bls.n	801059c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801057c:	fb04 0203 	mla	r2, r4, r3, r0
 8010580:	3301      	adds	r3, #1
 8010582:	7b11      	ldrb	r1, [r2, #12]
 8010584:	f36f 1145 	bfc	r1, #5, #1
 8010588:	7311      	strb	r1, [r2, #12]
 801058a:	e7f5      	b.n	8010578 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801058c:	6822      	ldr	r2, [r4, #0]
 801058e:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8010592:	6802      	ldr	r2, [r0, #0]
 8010594:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8010598:	3301      	adds	r3, #1
 801059a:	e7e7      	b.n	801056c <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801059c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801059e:	bf00      	nop
 80105a0:	200126bc 	.word	0x200126bc
 80105a4:	200126d8 	.word	0x200126d8
 80105a8:	200126dc 	.word	0x200126dc
 80105ac:	200126d0 	.word	0x200126d0
 80105b0:	200126c0 	.word	0x200126c0
 80105b4:	200126c8 	.word	0x200126c8
 80105b8:	200126da 	.word	0x200126da
 80105bc:	200126c4 	.word	0x200126c4
 80105c0:	200126d4 	.word	0x200126d4
 80105c4:	200126cc 	.word	0x200126cc

080105c8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80105c8:	4b06      	ldr	r3, [pc, #24]	@ (80105e4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	b943      	cbnz	r3, 80105e0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80105ce:	b139      	cbz	r1, 80105e0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80105d0:	4b05      	ldr	r3, [pc, #20]	@ (80105e8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 80105d2:	801a      	strh	r2, [r3, #0]
 80105d4:	4b05      	ldr	r3, [pc, #20]	@ (80105ec <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 80105d6:	6019      	str	r1, [r3, #0]
 80105d8:	4b05      	ldr	r3, [pc, #20]	@ (80105f0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 80105da:	6018      	str	r0, [r3, #0]
 80105dc:	f7ff bf96 	b.w	801050c <_ZN8touchgfx6Bitmap10clearCacheEv>
 80105e0:	4770      	bx	lr
 80105e2:	bf00      	nop
 80105e4:	200126c8 	.word	0x200126c8
 80105e8:	200126dc 	.word	0x200126dc
 80105ec:	200126c4 	.word	0x200126c4
 80105f0:	200126bc 	.word	0x200126bc

080105f4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 80105f4:	b470      	push	{r4, r5, r6}
 80105f6:	4c07      	ldr	r4, [pc, #28]	@ (8010614 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 80105f8:	6826      	ldr	r6, [r4, #0]
 80105fa:	4605      	mov	r5, r0
 80105fc:	4610      	mov	r0, r2
 80105fe:	9a03      	ldr	r2, [sp, #12]
 8010600:	b936      	cbnz	r6, 8010610 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8010602:	6025      	str	r5, [r4, #0]
 8010604:	4c04      	ldr	r4, [pc, #16]	@ (8010618 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8010606:	8021      	strh	r1, [r4, #0]
 8010608:	bc70      	pop	{r4, r5, r6}
 801060a:	4619      	mov	r1, r3
 801060c:	f7ff bfdc 	b.w	80105c8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8010610:	bc70      	pop	{r4, r5, r6}
 8010612:	4770      	bx	lr
 8010614:	200126e0 	.word	0x200126e0
 8010618:	200126d8 	.word	0x200126d8

0801061c <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801061c:	4a12      	ldr	r2, [pc, #72]	@ (8010668 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801061e:	8803      	ldrh	r3, [r0, #0]
 8010620:	8812      	ldrh	r2, [r2, #0]
 8010622:	4293      	cmp	r3, r2
 8010624:	d207      	bcs.n	8010636 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8010626:	4a11      	ldr	r2, [pc, #68]	@ (801066c <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8010628:	6812      	ldr	r2, [r2, #0]
 801062a:	2114      	movs	r1, #20
 801062c:	fb01 2303 	mla	r3, r1, r3, r2
 8010630:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8010634:	4770      	bx	lr
 8010636:	490e      	ldr	r1, [pc, #56]	@ (8010670 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8010638:	8809      	ldrh	r1, [r1, #0]
 801063a:	4411      	add	r1, r2
 801063c:	428b      	cmp	r3, r1
 801063e:	da04      	bge.n	801064a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8010640:	1a9b      	subs	r3, r3, r2
 8010642:	4a0c      	ldr	r2, [pc, #48]	@ (8010674 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8010644:	210e      	movs	r1, #14
 8010646:	6812      	ldr	r2, [r2, #0]
 8010648:	e7f0      	b.n	801062c <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801064a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801064e:	4293      	cmp	r3, r2
 8010650:	d108      	bne.n	8010664 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8010652:	4b09      	ldr	r3, [pc, #36]	@ (8010678 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8010654:	781b      	ldrb	r3, [r3, #0]
 8010656:	b91b      	cbnz	r3, 8010660 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8010658:	4b08      	ldr	r3, [pc, #32]	@ (801067c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801065a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801065e:	4770      	bx	lr
 8010660:	4b07      	ldr	r3, [pc, #28]	@ (8010680 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8010662:	e7fa      	b.n	801065a <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8010664:	2000      	movs	r0, #0
 8010666:	4770      	bx	lr
 8010668:	200126d8 	.word	0x200126d8
 801066c:	200126e0 	.word	0x200126e0
 8010670:	200126dc 	.word	0x200126dc
 8010674:	200126c0 	.word	0x200126c0
 8010678:	20012650 	.word	0x20012650
 801067c:	20012652 	.word	0x20012652
 8010680:	20012654 	.word	0x20012654

08010684 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8010684:	4a12      	ldr	r2, [pc, #72]	@ (80106d0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8010686:	8803      	ldrh	r3, [r0, #0]
 8010688:	8812      	ldrh	r2, [r2, #0]
 801068a:	4293      	cmp	r3, r2
 801068c:	d207      	bcs.n	801069e <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801068e:	4a11      	ldr	r2, [pc, #68]	@ (80106d4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8010690:	6812      	ldr	r2, [r2, #0]
 8010692:	2114      	movs	r1, #20
 8010694:	fb01 2303 	mla	r3, r1, r3, r2
 8010698:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801069c:	4770      	bx	lr
 801069e:	490e      	ldr	r1, [pc, #56]	@ (80106d8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 80106a0:	8809      	ldrh	r1, [r1, #0]
 80106a2:	4411      	add	r1, r2
 80106a4:	428b      	cmp	r3, r1
 80106a6:	da04      	bge.n	80106b2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 80106a8:	1a9b      	subs	r3, r3, r2
 80106aa:	4a0c      	ldr	r2, [pc, #48]	@ (80106dc <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 80106ac:	210e      	movs	r1, #14
 80106ae:	6812      	ldr	r2, [r2, #0]
 80106b0:	e7f0      	b.n	8010694 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 80106b2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80106b6:	4293      	cmp	r3, r2
 80106b8:	d108      	bne.n	80106cc <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 80106ba:	4b09      	ldr	r3, [pc, #36]	@ (80106e0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 80106bc:	781b      	ldrb	r3, [r3, #0]
 80106be:	b91b      	cbnz	r3, 80106c8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 80106c0:	4b08      	ldr	r3, [pc, #32]	@ (80106e4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 80106c2:	f9b3 0000 	ldrsh.w	r0, [r3]
 80106c6:	4770      	bx	lr
 80106c8:	4b07      	ldr	r3, [pc, #28]	@ (80106e8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 80106ca:	e7fa      	b.n	80106c2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 80106cc:	2000      	movs	r0, #0
 80106ce:	4770      	bx	lr
 80106d0:	200126d8 	.word	0x200126d8
 80106d4:	200126e0 	.word	0x200126e0
 80106d8:	200126dc 	.word	0x200126dc
 80106dc:	200126c0 	.word	0x200126c0
 80106e0:	20012650 	.word	0x20012650
 80106e4:	20012654 	.word	0x20012654
 80106e8:	20012652 	.word	0x20012652

080106ec <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80106ec:	b530      	push	{r4, r5, lr}
 80106ee:	4a22      	ldr	r2, [pc, #136]	@ (8010778 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 80106f0:	880b      	ldrh	r3, [r1, #0]
 80106f2:	8812      	ldrh	r2, [r2, #0]
 80106f4:	4293      	cmp	r3, r2
 80106f6:	d213      	bcs.n	8010720 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 80106f8:	4a20      	ldr	r2, [pc, #128]	@ (801077c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 80106fa:	6812      	ldr	r2, [r2, #0]
 80106fc:	2114      	movs	r1, #20
 80106fe:	fb01 2303 	mla	r3, r1, r3, r2
 8010702:	8a1a      	ldrh	r2, [r3, #16]
 8010704:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 8010708:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801070c:	8a5b      	ldrh	r3, [r3, #18]
 801070e:	8004      	strh	r4, [r0, #0]
 8010710:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8010714:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010718:	8041      	strh	r1, [r0, #2]
 801071a:	8082      	strh	r2, [r0, #4]
 801071c:	80c3      	strh	r3, [r0, #6]
 801071e:	e024      	b.n	801076a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 8010720:	4917      	ldr	r1, [pc, #92]	@ (8010780 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8010722:	8809      	ldrh	r1, [r1, #0]
 8010724:	4411      	add	r1, r2
 8010726:	428b      	cmp	r3, r1
 8010728:	da10      	bge.n	801074c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 801072a:	1a9b      	subs	r3, r3, r2
 801072c:	220e      	movs	r2, #14
 801072e:	4353      	muls	r3, r2
 8010730:	4a14      	ldr	r2, [pc, #80]	@ (8010784 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8010732:	6811      	ldr	r1, [r2, #0]
 8010734:	18ca      	adds	r2, r1, r3
 8010736:	5ecd      	ldrsh	r5, [r1, r3]
 8010738:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 801073c:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 8010740:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8010744:	8005      	strh	r5, [r0, #0]
 8010746:	8044      	strh	r4, [r0, #2]
 8010748:	8081      	strh	r1, [r0, #4]
 801074a:	e7e7      	b.n	801071c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801074c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010750:	4293      	cmp	r3, r2
 8010752:	d10b      	bne.n	801076c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 8010754:	4b0c      	ldr	r3, [pc, #48]	@ (8010788 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8010756:	f9b3 1000 	ldrsh.w	r1, [r3]
 801075a:	4b0c      	ldr	r3, [pc, #48]	@ (801078c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801075c:	8081      	strh	r1, [r0, #4]
 801075e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010762:	80c2      	strh	r2, [r0, #6]
 8010764:	2300      	movs	r3, #0
 8010766:	8003      	strh	r3, [r0, #0]
 8010768:	8043      	strh	r3, [r0, #2]
 801076a:	bd30      	pop	{r4, r5, pc}
 801076c:	2300      	movs	r3, #0
 801076e:	8003      	strh	r3, [r0, #0]
 8010770:	8043      	strh	r3, [r0, #2]
 8010772:	8083      	strh	r3, [r0, #4]
 8010774:	e7d2      	b.n	801071c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8010776:	bf00      	nop
 8010778:	200126d8 	.word	0x200126d8
 801077c:	200126e0 	.word	0x200126e0
 8010780:	200126dc 	.word	0x200126dc
 8010784:	200126c0 	.word	0x200126c0
 8010788:	2001264c 	.word	0x2001264c
 801078c:	2001264e 	.word	0x2001264e

08010790 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8010790:	4a17      	ldr	r2, [pc, #92]	@ (80107f0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 8010792:	8803      	ldrh	r3, [r0, #0]
 8010794:	8812      	ldrh	r2, [r2, #0]
 8010796:	4293      	cmp	r3, r2
 8010798:	d213      	bcs.n	80107c2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801079a:	4a16      	ldr	r2, [pc, #88]	@ (80107f4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801079c:	6812      	ldr	r2, [r2, #0]
 801079e:	2114      	movs	r1, #20
 80107a0:	fb01 2303 	mla	r3, r1, r3, r2
 80107a4:	8a1a      	ldrh	r2, [r3, #16]
 80107a6:	8919      	ldrh	r1, [r3, #8]
 80107a8:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80107ac:	428a      	cmp	r2, r1
 80107ae:	db1d      	blt.n	80107ec <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 80107b0:	8a58      	ldrh	r0, [r3, #18]
 80107b2:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80107b6:	895b      	ldrh	r3, [r3, #10]
 80107b8:	4298      	cmp	r0, r3
 80107ba:	bfac      	ite	ge
 80107bc:	2000      	movge	r0, #0
 80107be:	2001      	movlt	r0, #1
 80107c0:	4770      	bx	lr
 80107c2:	490d      	ldr	r1, [pc, #52]	@ (80107f8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 80107c4:	8809      	ldrh	r1, [r1, #0]
 80107c6:	4411      	add	r1, r2
 80107c8:	428b      	cmp	r3, r1
 80107ca:	da0d      	bge.n	80107e8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 80107cc:	1a9b      	subs	r3, r3, r2
 80107ce:	4a0b      	ldr	r2, [pc, #44]	@ (80107fc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 80107d0:	6812      	ldr	r2, [r2, #0]
 80107d2:	210e      	movs	r1, #14
 80107d4:	fb01 2303 	mla	r3, r1, r3, r2
 80107d8:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80107dc:	891a      	ldrh	r2, [r3, #8]
 80107de:	4291      	cmp	r1, r2
 80107e0:	db04      	blt.n	80107ec <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 80107e2:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 80107e6:	e7e6      	b.n	80107b6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 80107e8:	2000      	movs	r0, #0
 80107ea:	4770      	bx	lr
 80107ec:	2001      	movs	r0, #1
 80107ee:	4770      	bx	lr
 80107f0:	200126d8 	.word	0x200126d8
 80107f4:	200126e0 	.word	0x200126e0
 80107f8:	200126dc 	.word	0x200126dc
 80107fc:	200126c0 	.word	0x200126c0

08010800 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8010800:	4a12      	ldr	r2, [pc, #72]	@ (801084c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8010802:	8803      	ldrh	r3, [r0, #0]
 8010804:	8811      	ldrh	r1, [r2, #0]
 8010806:	428b      	cmp	r3, r1
 8010808:	d20b      	bcs.n	8010822 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801080a:	4a11      	ldr	r2, [pc, #68]	@ (8010850 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801080c:	6812      	ldr	r2, [r2, #0]
 801080e:	b112      	cbz	r2, 8010816 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8010810:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010814:	b9c0      	cbnz	r0, 8010848 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8010816:	4a0f      	ldr	r2, [pc, #60]	@ (8010854 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8010818:	6811      	ldr	r1, [r2, #0]
 801081a:	2214      	movs	r2, #20
 801081c:	4353      	muls	r3, r2
 801081e:	58c8      	ldr	r0, [r1, r3]
 8010820:	4770      	bx	lr
 8010822:	4a0d      	ldr	r2, [pc, #52]	@ (8010858 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8010824:	8812      	ldrh	r2, [r2, #0]
 8010826:	440a      	add	r2, r1
 8010828:	4293      	cmp	r3, r2
 801082a:	da04      	bge.n	8010836 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801082c:	4a08      	ldr	r2, [pc, #32]	@ (8010850 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801082e:	6812      	ldr	r2, [r2, #0]
 8010830:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010834:	4770      	bx	lr
 8010836:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801083a:	4293      	cmp	r3, r2
 801083c:	d103      	bne.n	8010846 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801083e:	4b07      	ldr	r3, [pc, #28]	@ (801085c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8010844:	4770      	bx	lr
 8010846:	2000      	movs	r0, #0
 8010848:	4770      	bx	lr
 801084a:	bf00      	nop
 801084c:	200126d8 	.word	0x200126d8
 8010850:	200126bc 	.word	0x200126bc
 8010854:	200126e0 	.word	0x200126e0
 8010858:	200126dc 	.word	0x200126dc
 801085c:	20012658 	.word	0x20012658

08010860 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8010860:	4b24      	ldr	r3, [pc, #144]	@ (80108f4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8010862:	8802      	ldrh	r2, [r0, #0]
 8010864:	8818      	ldrh	r0, [r3, #0]
 8010866:	4282      	cmp	r2, r0
 8010868:	d221      	bcs.n	80108ae <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801086a:	4b23      	ldr	r3, [pc, #140]	@ (80108f8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801086c:	6819      	ldr	r1, [r3, #0]
 801086e:	2314      	movs	r3, #20
 8010870:	fb03 1302 	mla	r3, r3, r2, r1
 8010874:	6858      	ldr	r0, [r3, #4]
 8010876:	2800      	cmp	r0, #0
 8010878:	d03a      	beq.n	80108f0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801087a:	4920      	ldr	r1, [pc, #128]	@ (80108fc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801087c:	6809      	ldr	r1, [r1, #0]
 801087e:	2900      	cmp	r1, #0
 8010880:	d036      	beq.n	80108f0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8010882:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8010886:	2900      	cmp	r1, #0
 8010888:	d032      	beq.n	80108f0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801088a:	891a      	ldrh	r2, [r3, #8]
 801088c:	8958      	ldrh	r0, [r3, #10]
 801088e:	4350      	muls	r0, r2
 8010890:	7c5a      	ldrb	r2, [r3, #17]
 8010892:	7cdb      	ldrb	r3, [r3, #19]
 8010894:	0952      	lsrs	r2, r2, #5
 8010896:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801089a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801089e:	2b0b      	cmp	r3, #11
 80108a0:	bf18      	it	ne
 80108a2:	0040      	lslne	r0, r0, #1
 80108a4:	3003      	adds	r0, #3
 80108a6:	f020 0003 	bic.w	r0, r0, #3
 80108aa:	4408      	add	r0, r1
 80108ac:	4770      	bx	lr
 80108ae:	4b14      	ldr	r3, [pc, #80]	@ (8010900 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 80108b0:	881b      	ldrh	r3, [r3, #0]
 80108b2:	4403      	add	r3, r0
 80108b4:	429a      	cmp	r2, r3
 80108b6:	da1a      	bge.n	80108ee <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80108b8:	4b12      	ldr	r3, [pc, #72]	@ (8010904 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	1a10      	subs	r0, r2, r0
 80108be:	210e      	movs	r1, #14
 80108c0:	fb01 3000 	mla	r0, r1, r0, r3
 80108c4:	7b03      	ldrb	r3, [r0, #12]
 80108c6:	f003 031f 	and.w	r3, r3, #31
 80108ca:	2b0b      	cmp	r3, #11
 80108cc:	d10b      	bne.n	80108e6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 80108ce:	8903      	ldrh	r3, [r0, #8]
 80108d0:	8940      	ldrh	r0, [r0, #10]
 80108d2:	4358      	muls	r0, r3
 80108d4:	4b09      	ldr	r3, [pc, #36]	@ (80108fc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80108d6:	6819      	ldr	r1, [r3, #0]
 80108d8:	3003      	adds	r0, #3
 80108da:	f020 0303 	bic.w	r3, r0, #3
 80108de:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80108e2:	4418      	add	r0, r3
 80108e4:	4770      	bx	lr
 80108e6:	2b0d      	cmp	r3, #13
 80108e8:	d101      	bne.n	80108ee <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80108ea:	300d      	adds	r0, #13
 80108ec:	4770      	bx	lr
 80108ee:	2000      	movs	r0, #0
 80108f0:	4770      	bx	lr
 80108f2:	bf00      	nop
 80108f4:	200126d8 	.word	0x200126d8
 80108f8:	200126e0 	.word	0x200126e0
 80108fc:	200126bc 	.word	0x200126bc
 8010900:	200126dc 	.word	0x200126dc
 8010904:	200126c0 	.word	0x200126c0

08010908 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8010908:	b510      	push	{r4, lr}
 801090a:	4b1f      	ldr	r3, [pc, #124]	@ (8010988 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 801090c:	8802      	ldrh	r2, [r0, #0]
 801090e:	881b      	ldrh	r3, [r3, #0]
 8010910:	429a      	cmp	r2, r3
 8010912:	d21a      	bcs.n	801094a <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 8010914:	4b1d      	ldr	r3, [pc, #116]	@ (801098c <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	2114      	movs	r1, #20
 801091a:	fb01 3102 	mla	r1, r1, r2, r3
 801091e:	7c4b      	ldrb	r3, [r1, #17]
 8010920:	0958      	lsrs	r0, r3, #5
 8010922:	7ccb      	ldrb	r3, [r1, #19]
 8010924:	491a      	ldr	r1, [pc, #104]	@ (8010990 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 8010926:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801092a:	6809      	ldr	r1, [r1, #0]
 801092c:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 8010930:	b2d8      	uxtb	r0, r3
 8010932:	b149      	cbz	r1, 8010948 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8010934:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8010938:	b132      	cbz	r2, 8010948 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801093a:	2b0e      	cmp	r3, #14
 801093c:	d021      	beq.n	8010982 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801093e:	280f      	cmp	r0, #15
 8010940:	d01d      	beq.n	801097e <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 8010942:	2810      	cmp	r0, #16
 8010944:	bf08      	it	eq
 8010946:	2002      	moveq	r0, #2
 8010948:	bd10      	pop	{r4, pc}
 801094a:	4912      	ldr	r1, [pc, #72]	@ (8010994 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 801094c:	8809      	ldrh	r1, [r1, #0]
 801094e:	4419      	add	r1, r3
 8010950:	428a      	cmp	r2, r1
 8010952:	da09      	bge.n	8010968 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 8010954:	1ad3      	subs	r3, r2, r3
 8010956:	4a10      	ldr	r2, [pc, #64]	@ (8010998 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 8010958:	6812      	ldr	r2, [r2, #0]
 801095a:	210e      	movs	r1, #14
 801095c:	fb01 2303 	mla	r3, r1, r3, r2
 8010960:	7b18      	ldrb	r0, [r3, #12]
 8010962:	f000 001f 	and.w	r0, r0, #31
 8010966:	e7ef      	b.n	8010948 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8010968:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 801096c:	429a      	cmp	r2, r3
 801096e:	d108      	bne.n	8010982 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 8010970:	f7f8 fdca 	bl	8009508 <_ZN8touchgfx3HAL3lcdEv>
 8010974:	6803      	ldr	r3, [r0, #0]
 8010976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801097a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801097c:	4718      	bx	r3
 801097e:	2001      	movs	r0, #1
 8010980:	e7e2      	b.n	8010948 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8010982:	2000      	movs	r0, #0
 8010984:	e7e0      	b.n	8010948 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8010986:	bf00      	nop
 8010988:	200126d8 	.word	0x200126d8
 801098c:	200126e0 	.word	0x200126e0
 8010990:	200126bc 	.word	0x200126bc
 8010994:	200126dc 	.word	0x200126dc
 8010998:	200126c0 	.word	0x200126c0

0801099c <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 801099c:	2010      	movs	r0, #16
 801099e:	4770      	bx	lr

080109a0 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 80109a0:	2000      	movs	r0, #0
 80109a2:	4770      	bx	lr

080109a4 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 80109a4:	4b02      	ldr	r3, [pc, #8]	@ (80109b0 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 80109a6:	8818      	ldrh	r0, [r3, #0]
 80109a8:	0040      	lsls	r0, r0, #1
 80109aa:	b280      	uxth	r0, r0
 80109ac:	4770      	bx	lr
 80109ae:	bf00      	nop
 80109b0:	20012652 	.word	0x20012652

080109b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80109b4:	2bff      	cmp	r3, #255	@ 0xff
 80109b6:	d05e      	beq.n	8010a76 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc2>
 80109b8:	2a0b      	cmp	r2, #11
 80109ba:	d058      	beq.n	8010a6e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 80109bc:	d80e      	bhi.n	80109dc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 80109be:	2a03      	cmp	r2, #3
 80109c0:	d04d      	beq.n	8010a5e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xaa>
 80109c2:	d804      	bhi.n	80109ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80109c4:	2a01      	cmp	r2, #1
 80109c6:	d04c      	beq.n	8010a62 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xae>
 80109c8:	d94d      	bls.n	8010a66 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb2>
 80109ca:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80109cc:	e031      	b.n	8010a32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80109ce:	2a09      	cmp	r2, #9
 80109d0:	d04d      	beq.n	8010a6e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xba>
 80109d2:	d84a      	bhi.n	8010a6a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 80109d4:	2a08      	cmp	r2, #8
 80109d6:	d048      	beq.n	8010a6a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 80109d8:	2300      	movs	r3, #0
 80109da:	e02a      	b.n	8010a32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80109dc:	2a2f      	cmp	r2, #47	@ 0x2f
 80109de:	d02c      	beq.n	8010a3a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 80109e0:	d811      	bhi.n	8010a06 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x52>
 80109e2:	2a2d      	cmp	r2, #45	@ 0x2d
 80109e4:	d018      	beq.n	8010a18 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x64>
 80109e6:	d831      	bhi.n	8010a4c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x98>
 80109e8:	2a2c      	cmp	r2, #44	@ 0x2c
 80109ea:	d1f5      	bne.n	80109d8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80109ec:	684a      	ldr	r2, [r1, #4]
 80109ee:	7813      	ldrb	r3, [r2, #0]
 80109f0:	7852      	ldrb	r2, [r2, #1]
 80109f2:	2a00      	cmp	r2, #0
 80109f4:	d1f0      	bne.n	80109d8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80109f6:	2b01      	cmp	r3, #1
 80109f8:	d01d      	beq.n	8010a36 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d02d      	beq.n	8010a5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 80109fe:	2b02      	cmp	r3, #2
 8010a00:	d1ea      	bne.n	80109d8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010a02:	68c3      	ldr	r3, [r0, #12]
 8010a04:	e015      	b.n	8010a32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010a06:	2a31      	cmp	r2, #49	@ 0x31
 8010a08:	d004      	beq.n	8010a14 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x60>
 8010a0a:	d332      	bcc.n	8010a72 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 8010a0c:	2a32      	cmp	r2, #50	@ 0x32
 8010a0e:	d030      	beq.n	8010a72 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbe>
 8010a10:	2a33      	cmp	r2, #51	@ 0x33
 8010a12:	d1e1      	bne.n	80109d8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010a14:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 8010a16:	e00c      	b.n	8010a32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010a18:	684a      	ldr	r2, [r1, #4]
 8010a1a:	7813      	ldrb	r3, [r2, #0]
 8010a1c:	7852      	ldrb	r2, [r2, #1]
 8010a1e:	2a00      	cmp	r2, #0
 8010a20:	d1da      	bne.n	80109d8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010a22:	2b01      	cmp	r3, #1
 8010a24:	d004      	beq.n	8010a30 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7c>
 8010a26:	d30f      	bcc.n	8010a48 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x94>
 8010a28:	2b02      	cmp	r3, #2
 8010a2a:	d1d5      	bne.n	80109d8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010a2c:	6943      	ldr	r3, [r0, #20]
 8010a2e:	e000      	b.n	8010a32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010a30:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8010a32:	4618      	mov	r0, r3
 8010a34:	4770      	bx	lr
 8010a36:	69c3      	ldr	r3, [r0, #28]
 8010a38:	e7fb      	b.n	8010a32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010a3a:	684b      	ldr	r3, [r1, #4]
 8010a3c:	781a      	ldrb	r2, [r3, #0]
 8010a3e:	785b      	ldrb	r3, [r3, #1]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d1c9      	bne.n	80109d8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010a44:	2a00      	cmp	r2, #0
 8010a46:	d1f4      	bne.n	8010a32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010a48:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8010a4a:	e7f2      	b.n	8010a32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010a4c:	684b      	ldr	r3, [r1, #4]
 8010a4e:	781a      	ldrb	r2, [r3, #0]
 8010a50:	785b      	ldrb	r3, [r3, #1]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d1c0      	bne.n	80109d8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010a56:	2a00      	cmp	r2, #0
 8010a58:	d1eb      	bne.n	8010a32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010a5a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8010a5c:	e7e9      	b.n	8010a32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010a5e:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8010a60:	e7e7      	b.n	8010a32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010a62:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8010a64:	e7e5      	b.n	8010a32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010a66:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8010a68:	e7e3      	b.n	8010a32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010a6a:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8010a6c:	e7e1      	b.n	8010a32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010a6e:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8010a70:	e7df      	b.n	8010a32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010a72:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8010a74:	e7dd      	b.n	8010a32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010a76:	2a0b      	cmp	r2, #11
 8010a78:	d059      	beq.n	8010b2e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 8010a7a:	d80e      	bhi.n	8010a9a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe6>
 8010a7c:	2a03      	cmp	r2, #3
 8010a7e:	d050      	beq.n	8010b22 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16e>
 8010a80:	d804      	bhi.n	8010a8c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd8>
 8010a82:	2a01      	cmp	r2, #1
 8010a84:	d04f      	beq.n	8010b26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x172>
 8010a86:	d950      	bls.n	8010b2a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x176>
 8010a88:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8010a8a:	e7d2      	b.n	8010a32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010a8c:	2a09      	cmp	r2, #9
 8010a8e:	d04e      	beq.n	8010b2e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17a>
 8010a90:	d801      	bhi.n	8010a96 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 8010a92:	2a08      	cmp	r2, #8
 8010a94:	d1a0      	bne.n	80109d8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010a96:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8010a98:	e7cb      	b.n	8010a32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010a9a:	2a2f      	cmp	r2, #47	@ 0x2f
 8010a9c:	d02d      	beq.n	8010afa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x146>
 8010a9e:	d811      	bhi.n	8010ac4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8010aa0:	2a2d      	cmp	r2, #45	@ 0x2d
 8010aa2:	d018      	beq.n	8010ad6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x122>
 8010aa4:	d833      	bhi.n	8010b0e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x15a>
 8010aa6:	2a2c      	cmp	r2, #44	@ 0x2c
 8010aa8:	d196      	bne.n	80109d8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010aaa:	684a      	ldr	r2, [r1, #4]
 8010aac:	7813      	ldrb	r3, [r2, #0]
 8010aae:	7852      	ldrb	r2, [r2, #1]
 8010ab0:	2a00      	cmp	r2, #0
 8010ab2:	d191      	bne.n	80109d8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010ab4:	2b01      	cmp	r3, #1
 8010ab6:	d01e      	beq.n	8010af6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d030      	beq.n	8010b1e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x16a>
 8010abc:	2b02      	cmp	r3, #2
 8010abe:	d18b      	bne.n	80109d8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010ac0:	6903      	ldr	r3, [r0, #16]
 8010ac2:	e7b6      	b.n	8010a32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010ac4:	2a31      	cmp	r2, #49	@ 0x31
 8010ac6:	d004      	beq.n	8010ad2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x11e>
 8010ac8:	d333      	bcc.n	8010b32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 8010aca:	2a32      	cmp	r2, #50	@ 0x32
 8010acc:	d031      	beq.n	8010b32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x17e>
 8010ace:	2a33      	cmp	r2, #51	@ 0x33
 8010ad0:	d182      	bne.n	80109d8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010ad2:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 8010ad4:	e7ad      	b.n	8010a32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010ad6:	684a      	ldr	r2, [r1, #4]
 8010ad8:	7813      	ldrb	r3, [r2, #0]
 8010ada:	7852      	ldrb	r2, [r2, #1]
 8010adc:	2a00      	cmp	r2, #0
 8010ade:	f47f af7b 	bne.w	80109d8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010ae2:	2b01      	cmp	r3, #1
 8010ae4:	d005      	beq.n	8010af2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8010ae6:	d310      	bcc.n	8010b0a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x156>
 8010ae8:	2b02      	cmp	r3, #2
 8010aea:	f47f af75 	bne.w	80109d8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010aee:	6983      	ldr	r3, [r0, #24]
 8010af0:	e79f      	b.n	8010a32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010af2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8010af4:	e79d      	b.n	8010a32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010af6:	6a03      	ldr	r3, [r0, #32]
 8010af8:	e79b      	b.n	8010a32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010afa:	684b      	ldr	r3, [r1, #4]
 8010afc:	781a      	ldrb	r2, [r3, #0]
 8010afe:	785b      	ldrb	r3, [r3, #1]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	f47f af69 	bne.w	80109d8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010b06:	2a00      	cmp	r2, #0
 8010b08:	d193      	bne.n	8010a32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010b0a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8010b0c:	e791      	b.n	8010a32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010b0e:	684b      	ldr	r3, [r1, #4]
 8010b10:	781a      	ldrb	r2, [r3, #0]
 8010b12:	785b      	ldrb	r3, [r3, #1]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	f47f af5f 	bne.w	80109d8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8010b1a:	2a00      	cmp	r2, #0
 8010b1c:	d189      	bne.n	8010a32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010b1e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010b20:	e787      	b.n	8010a32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010b22:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8010b24:	e785      	b.n	8010a32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010b26:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8010b28:	e783      	b.n	8010a32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010b2a:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8010b2c:	e781      	b.n	8010a32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010b2e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8010b30:	e77f      	b.n	8010a32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8010b32:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8010b34:	e77d      	b.n	8010a32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>

08010b36 <_ZN8touchgfx8LCD16bppD1Ev>:
 8010b36:	4770      	bx	lr

08010b38 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D1Ev>:
 8010b38:	4770      	bx	lr

08010b3a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8010b3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b3e:	b088      	sub	sp, #32
 8010b40:	ac08      	add	r4, sp, #32
 8010b42:	4606      	mov	r6, r0
 8010b44:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8010b48:	4620      	mov	r0, r4
 8010b4a:	4688      	mov	r8, r1
 8010b4c:	4691      	mov	r9, r2
 8010b4e:	f7ff fe57 	bl	8010800 <_ZNK8touchgfx6Bitmap7getDataEv>
 8010b52:	6833      	ldr	r3, [r6, #0]
 8010b54:	4605      	mov	r5, r0
 8010b56:	4620      	mov	r0, r4
 8010b58:	699f      	ldr	r7, [r3, #24]
 8010b5a:	f7ff fd5f 	bl	801061c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010b5e:	4682      	mov	sl, r0
 8010b60:	4620      	mov	r0, r4
 8010b62:	f7ff fd8f 	bl	8010684 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010b66:	9500      	str	r5, [sp, #0]
 8010b68:	e9cd a001 	strd	sl, r0, [sp, #4]
 8010b6c:	464b      	mov	r3, r9
 8010b6e:	a806      	add	r0, sp, #24
 8010b70:	4642      	mov	r2, r8
 8010b72:	4631      	mov	r1, r6
 8010b74:	47b8      	blx	r7
 8010b76:	4628      	mov	r0, r5
 8010b78:	b008      	add	sp, #32
 8010b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08010b80 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8010b80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010b84:	2300      	movs	r3, #0
 8010b86:	9300      	str	r3, [sp, #0]
 8010b88:	4b3d      	ldr	r3, [pc, #244]	@ (8010c80 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 8010b8a:	781b      	ldrb	r3, [r3, #0]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d137      	bne.n	8010c00 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 8010b90:	4a3c      	ldr	r2, [pc, #240]	@ (8010c84 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8010b92:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010b96:	f8ad 2004 	strh.w	r2, [sp, #4]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d132      	bne.n	8010c04 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 8010b9e:	4b3a      	ldr	r3, [pc, #232]	@ (8010c88 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8010ba0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010ba4:	6808      	ldr	r0, [r1, #0]
 8010ba6:	6849      	ldr	r1, [r1, #4]
 8010ba8:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010bac:	ac02      	add	r4, sp, #8
 8010bae:	ab02      	add	r3, sp, #8
 8010bb0:	c303      	stmia	r3!, {r0, r1}
 8010bb2:	4669      	mov	r1, sp
 8010bb4:	4620      	mov	r0, r4
 8010bb6:	f7fb fed5 	bl	800c964 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8010bba:	4668      	mov	r0, sp
 8010bbc:	f7fb feaa 	bl	800c914 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010bc0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8010bc4:	f8bd 2000 	ldrh.w	r2, [sp]
 8010bc8:	4d30      	ldr	r5, [pc, #192]	@ (8010c8c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 8010bca:	4413      	add	r3, r2
 8010bcc:	f8ad 3008 	strh.w	r3, [sp, #8]
 8010bd0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010bd4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8010bd8:	6828      	ldr	r0, [r5, #0]
 8010bda:	4413      	add	r3, r2
 8010bdc:	f8ad 300a 	strh.w	r3, [sp, #10]
 8010be0:	6803      	ldr	r3, [r0, #0]
 8010be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010be4:	4798      	blx	r3
 8010be6:	f010 0f01 	tst.w	r0, #1
 8010bea:	462f      	mov	r7, r5
 8010bec:	d00c      	beq.n	8010c08 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 8010bee:	6828      	ldr	r0, [r5, #0]
 8010bf0:	6803      	ldr	r3, [r0, #0]
 8010bf2:	e894 0006 	ldmia.w	r4, {r1, r2}
 8010bf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010bf8:	4798      	blx	r3
 8010bfa:	b004      	add	sp, #16
 8010bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c00:	4a21      	ldr	r2, [pc, #132]	@ (8010c88 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8010c02:	e7c6      	b.n	8010b92 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8010c04:	4b1f      	ldr	r3, [pc, #124]	@ (8010c84 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8010c06:	e7cb      	b.n	8010ba0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8010c08:	6838      	ldr	r0, [r7, #0]
 8010c0a:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8010c0e:	6803      	ldr	r3, [r0, #0]
 8010c10:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 8010c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010c16:	4798      	blx	r3
 8010c18:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8010c1c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8010c20:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 8010c24:	fb16 3602 	smlabb	r6, r6, r2, r3
 8010c28:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8010c2c:	6838      	ldr	r0, [r7, #0]
 8010c2e:	6803      	ldr	r3, [r0, #0]
 8010c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c32:	4798      	blx	r3
 8010c34:	4a13      	ldr	r2, [pc, #76]	@ (8010c84 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8010c36:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 8010c3a:	8813      	ldrh	r3, [r2, #0]
 8010c3c:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8010c40:	fb03 1404 	mla	r4, r3, r4, r1
 8010c44:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8010c48:	435d      	muls	r5, r3
 8010c4a:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8010c4e:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8010c52:	4691      	mov	r9, r2
 8010c54:	6838      	ldr	r0, [r7, #0]
 8010c56:	42ac      	cmp	r4, r5
 8010c58:	6803      	ldr	r3, [r0, #0]
 8010c5a:	d20e      	bcs.n	8010c7a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 8010c5c:	f8d3 a034 	ldr.w	sl, [r3, #52]	@ 0x34
 8010c60:	4632      	mov	r2, r6
 8010c62:	4643      	mov	r3, r8
 8010c64:	4621      	mov	r1, r4
 8010c66:	47d0      	blx	sl
 8010c68:	f8b9 3000 	ldrh.w	r3, [r9]
 8010c6c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8010c70:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8010c74:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8010c78:	e7ec      	b.n	8010c54 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 8010c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c7c:	4798      	blx	r3
 8010c7e:	e7bc      	b.n	8010bfa <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8010c80:	20012650 	.word	0x20012650
 8010c84:	20012652 	.word	0x20012652
 8010c88:	20012654 	.word	0x20012654
 8010c8c:	20012658 	.word	0x20012658

08010c90 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8010c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c94:	b08b      	sub	sp, #44	@ 0x2c
 8010c96:	460f      	mov	r7, r1
 8010c98:	f89d b050 	ldrb.w	fp, [sp, #80]	@ 0x50
 8010c9c:	f89d 4054 	ldrb.w	r4, [sp, #84]	@ 0x54
 8010ca0:	4616      	mov	r6, r2
 8010ca2:	f1bb 0f00 	cmp.w	fp, #0
 8010ca6:	d04a      	beq.n	8010d3e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 8010ca8:	6810      	ldr	r0, [r2, #0]
 8010caa:	6851      	ldr	r1, [r2, #4]
 8010cac:	ad06      	add	r5, sp, #24
 8010cae:	c503      	stmia	r5!, {r0, r1}
 8010cb0:	6818      	ldr	r0, [r3, #0]
 8010cb2:	6859      	ldr	r1, [r3, #4]
 8010cb4:	ad08      	add	r5, sp, #32
 8010cb6:	c503      	stmia	r5!, {r0, r1}
 8010cb8:	a806      	add	r0, sp, #24
 8010cba:	f7fb fe2b 	bl	800c914 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010cbe:	4631      	mov	r1, r6
 8010cc0:	a808      	add	r0, sp, #32
 8010cc2:	f7fb fe4f 	bl	800c964 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8010cc6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8010cca:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8010cce:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8010cd2:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 8010cd6:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 8010cda:	fb16 2103 	smlabb	r1, r6, r3, r2
 8010cde:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 8010ce2:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8010ce6:	4f5f      	ldr	r7, [pc, #380]	@ (8010e64 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8010ce8:	440a      	add	r2, r1
 8010cea:	f8ad 2020 	strh.w	r2, [sp, #32]
 8010cee:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8010cf2:	6838      	ldr	r0, [r7, #0]
 8010cf4:	4413      	add	r3, r2
 8010cf6:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8010cfa:	6803      	ldr	r3, [r0, #0]
 8010cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010cfe:	4798      	blx	r3
 8010d00:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8010d04:	46b9      	mov	r9, r7
 8010d06:	d11d      	bne.n	8010d44 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8010d08:	b9fc      	cbnz	r4, 8010d4a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8010d0a:	f010 0f01 	tst.w	r0, #1
 8010d0e:	d01c      	beq.n	8010d4a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8010d10:	f8d9 0000 	ldr.w	r0, [r9]
 8010d14:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8010d18:	6801      	ldr	r1, [r0, #0]
 8010d1a:	f8cd b00c 	str.w	fp, [sp, #12]
 8010d1e:	2700      	movs	r7, #0
 8010d20:	e9cd 4704 	strd	r4, r7, [sp, #16]
 8010d24:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8010d28:	9402      	str	r4, [sp, #8]
 8010d2a:	b2ad      	uxth	r5, r5
 8010d2c:	fa1f f488 	uxth.w	r4, r8
 8010d30:	9501      	str	r5, [sp, #4]
 8010d32:	9400      	str	r4, [sp, #0]
 8010d34:	6c4c      	ldr	r4, [r1, #68]	@ 0x44
 8010d36:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8010d3a:	4631      	mov	r1, r6
 8010d3c:	47a0      	blx	r4
 8010d3e:	b00b      	add	sp, #44	@ 0x2c
 8010d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d44:	f010 0f04 	tst.w	r0, #4
 8010d48:	e7e1      	b.n	8010d0e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7e>
 8010d4a:	f8d9 0000 	ldr.w	r0, [r9]
 8010d4e:	6803      	ldr	r3, [r0, #0]
 8010d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d52:	4798      	blx	r3
 8010d54:	4b44      	ldr	r3, [pc, #272]	@ (8010e68 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 8010d56:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 8010d5a:	881a      	ldrh	r2, [r3, #0]
 8010d5c:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8010d60:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8010d64:	fb02 1404 	mla	r4, r2, r4, r1
 8010d68:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8010d6c:	469a      	mov	sl, r3
 8010d6e:	fb05 f502 	mul.w	r5, r5, r2
 8010d72:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8010d76:	d059      	beq.n	8010e2c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 8010d78:	f1cb 09ff 	rsb	r9, fp, #255	@ 0xff
 8010d7c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8010d80:	fa1f f28b 	uxth.w	r2, fp
 8010d84:	fa1f f989 	uxth.w	r9, r9
 8010d88:	469e      	mov	lr, r3
 8010d8a:	42ac      	cmp	r4, r5
 8010d8c:	d264      	bcs.n	8010e58 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8010d8e:	eb04 0a07 	add.w	sl, r4, r7
 8010d92:	4554      	cmp	r4, sl
 8010d94:	d23d      	bcs.n	8010e12 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 8010d96:	8821      	ldrh	r1, [r4, #0]
 8010d98:	f836 3b02 	ldrh.w	r3, [r6], #2
 8010d9c:	1208      	asrs	r0, r1, #8
 8010d9e:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8010da2:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 8010da6:	fb10 f009 	smulbb	r0, r0, r9
 8010daa:	ea4f 0be1 	mov.w	fp, r1, asr #3
 8010dae:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8010db2:	00c9      	lsls	r1, r1, #3
 8010db4:	fb0c 0c02 	mla	ip, ip, r2, r0
 8010db8:	f00b 0bfc 	and.w	fp, fp, #252	@ 0xfc
 8010dbc:	10d8      	asrs	r0, r3, #3
 8010dbe:	b2c9      	uxtb	r1, r1
 8010dc0:	00db      	lsls	r3, r3, #3
 8010dc2:	fa1f fc8c 	uxth.w	ip, ip
 8010dc6:	fb1b fb09 	smulbb	fp, fp, r9
 8010dca:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8010dce:	b2db      	uxtb	r3, r3
 8010dd0:	fb11 f109 	smulbb	r1, r1, r9
 8010dd4:	fb00 b002 	mla	r0, r0, r2, fp
 8010dd8:	fb03 1302 	mla	r3, r3, r2, r1
 8010ddc:	f10c 0b01 	add.w	fp, ip, #1
 8010de0:	b29b      	uxth	r3, r3
 8010de2:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8010de6:	b280      	uxth	r0, r0
 8010de8:	f40c 4b78 	and.w	fp, ip, #63488	@ 0xf800
 8010dec:	f103 0c01 	add.w	ip, r3, #1
 8010df0:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8010df4:	1c43      	adds	r3, r0, #1
 8010df6:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8010dfa:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8010dfe:	0940      	lsrs	r0, r0, #5
 8010e00:	ea4c 0c0b 	orr.w	ip, ip, fp
 8010e04:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8010e08:	ea4c 0c00 	orr.w	ip, ip, r0
 8010e0c:	f824 cb02 	strh.w	ip, [r4], #2
 8010e10:	e7bf      	b.n	8010d92 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 8010e12:	f8be 3000 	ldrh.w	r3, [lr]
 8010e16:	eba3 0308 	sub.w	r3, r3, r8
 8010e1a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8010e1e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8010e22:	eba3 0308 	sub.w	r3, r3, r8
 8010e26:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8010e2a:	e7ae      	b.n	8010d8a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 8010e2c:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8010e30:	f8d9 0000 	ldr.w	r0, [r9]
 8010e34:	42ac      	cmp	r4, r5
 8010e36:	6803      	ldr	r3, [r0, #0]
 8010e38:	d20e      	bcs.n	8010e58 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8010e3a:	f8d3 8034 	ldr.w	r8, [r3, #52]	@ 0x34
 8010e3e:	4632      	mov	r2, r6
 8010e40:	463b      	mov	r3, r7
 8010e42:	4621      	mov	r1, r4
 8010e44:	47c0      	blx	r8
 8010e46:	f8ba 3000 	ldrh.w	r3, [sl]
 8010e4a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8010e4e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8010e52:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8010e56:	e7eb      	b.n	8010e30 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 8010e58:	4b02      	ldr	r3, [pc, #8]	@ (8010e64 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8010e5a:	6818      	ldr	r0, [r3, #0]
 8010e5c:	6803      	ldr	r3, [r0, #0]
 8010e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e60:	4798      	blx	r3
 8010e62:	e76c      	b.n	8010d3e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xae>
 8010e64:	20012658 	.word	0x20012658
 8010e68:	20012652 	.word	0x20012652

08010e6c <_ZN8touchgfx8LCD16bppD0Ev>:
 8010e6c:	b510      	push	{r4, lr}
 8010e6e:	218c      	movs	r1, #140	@ 0x8c
 8010e70:	4604      	mov	r4, r0
 8010e72:	f002 fa51 	bl	8013318 <_ZdlPvj>
 8010e76:	4620      	mov	r0, r4
 8010e78:	bd10      	pop	{r4, pc}

08010e7a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L4D0Ev>:
 8010e7a:	b510      	push	{r4, lr}
 8010e7c:	2104      	movs	r1, #4
 8010e7e:	4604      	mov	r4, r0
 8010e80:	f002 fa4a 	bl	8013318 <_ZdlPvj>
 8010e84:	4620      	mov	r0, r4
 8010e86:	bd10      	pop	{r4, pc}

08010e88 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8010e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e8c:	b091      	sub	sp, #68	@ 0x44
 8010e8e:	469b      	mov	fp, r3
 8010e90:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8010e94:	4616      	mov	r6, r2
 8010e96:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	@ 0x6c
 8010e9a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010e9e:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	@ 0x70
 8010ea2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010ea6:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8010eaa:	4604      	mov	r4, r0
 8010eac:	460d      	mov	r5, r1
 8010eae:	4640      	mov	r0, r8
 8010eb0:	4659      	mov	r1, fp
 8010eb2:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8010eb6:	f8ad 902c 	strh.w	r9, [sp, #44]	@ 0x2c
 8010eba:	f8ad 702e 	strh.w	r7, [sp, #46]	@ 0x2e
 8010ebe:	f7f8 f84d 	bl	8008f5c <_ZN8touchgfx4RectaNERKS0_>
 8010ec2:	4631      	mov	r1, r6
 8010ec4:	4640      	mov	r0, r8
 8010ec6:	f7f8 f849 	bl	8008f5c <_ZN8touchgfx4RectaNERKS0_>
 8010eca:	4b74      	ldr	r3, [pc, #464]	@ (801109c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 8010ecc:	8818      	ldrh	r0, [r3, #0]
 8010ece:	4b74      	ldr	r3, [pc, #464]	@ (80110a0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 8010ed0:	8819      	ldrh	r1, [r3, #0]
 8010ed2:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	b202      	sxth	r2, r0
 8010eda:	b20e      	sxth	r6, r1
 8010edc:	da07      	bge.n	8010eee <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 8010ede:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8010ee2:	4463      	add	r3, ip
 8010ee4:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8010ee8:	2300      	movs	r3, #0
 8010eea:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 8010eee:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	@ 0x28
 8010ef2:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 8010ef6:	1ad2      	subs	r2, r2, r3
 8010ef8:	4594      	cmp	ip, r2
 8010efa:	bfc4      	itt	gt
 8010efc:	1ac2      	subgt	r2, r0, r3
 8010efe:	f8ad 202c 	strhgt.w	r2, [sp, #44]	@ 0x2c
 8010f02:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8010f06:	2a00      	cmp	r2, #0
 8010f08:	da07      	bge.n	8010f1a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 8010f0a:	f8bd c02e 	ldrh.w	ip, [sp, #46]	@ 0x2e
 8010f0e:	4462      	add	r2, ip
 8010f10:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8010f14:	2200      	movs	r2, #0
 8010f16:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8010f1a:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	@ 0x2a
 8010f1e:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 8010f22:	eba6 060a 	sub.w	r6, r6, sl
 8010f26:	42b2      	cmp	r2, r6
 8010f28:	bfc4      	itt	gt
 8010f2a:	eba1 020a 	subgt.w	r2, r1, sl
 8010f2e:	f8ad 202e 	strhgt.w	r2, [sp, #46]	@ 0x2e
 8010f32:	4a5c      	ldr	r2, [pc, #368]	@ (80110a4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 8010f34:	7812      	ldrb	r2, [r2, #0]
 8010f36:	b9a2      	cbnz	r2, 8010f62 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 8010f38:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 8010f3c:	4286      	cmp	r6, r0
 8010f3e:	4640      	mov	r0, r8
 8010f40:	9303      	str	r3, [sp, #12]
 8010f42:	bf14      	ite	ne
 8010f44:	2600      	movne	r6, #0
 8010f46:	2601      	moveq	r6, #1
 8010f48:	f7f8 f84b 	bl	8008fe2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010f4c:	9b03      	ldr	r3, [sp, #12]
 8010f4e:	b160      	cbz	r0, 8010f6a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 8010f50:	2300      	movs	r3, #0
 8010f52:	8023      	strh	r3, [r4, #0]
 8010f54:	8063      	strh	r3, [r4, #2]
 8010f56:	80a3      	strh	r3, [r4, #4]
 8010f58:	4620      	mov	r0, r4
 8010f5a:	80e3      	strh	r3, [r4, #6]
 8010f5c:	b011      	add	sp, #68	@ 0x44
 8010f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f62:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 8010f66:	428e      	cmp	r6, r1
 8010f68:	e7e9      	b.n	8010f3e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 8010f6a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8010f6e:	9205      	str	r2, [sp, #20]
 8010f70:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	@ 0x2e
 8010f74:	9206      	str	r2, [sp, #24]
 8010f76:	f8bb 2000 	ldrh.w	r2, [fp]
 8010f7a:	900e      	str	r0, [sp, #56]	@ 0x38
 8010f7c:	1a9b      	subs	r3, r3, r2
 8010f7e:	b21b      	sxth	r3, r3
 8010f80:	9303      	str	r3, [sp, #12]
 8010f82:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8010f86:	f8ad 903c 	strh.w	r9, [sp, #60]	@ 0x3c
 8010f8a:	ebaa 0a03 	sub.w	sl, sl, r3
 8010f8e:	fa0f f38a 	sxth.w	r3, sl
 8010f92:	9304      	str	r3, [sp, #16]
 8010f94:	9b03      	ldr	r3, [sp, #12]
 8010f96:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8010f9a:	9b04      	ldr	r3, [sp, #16]
 8010f9c:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8010fa0:	9b05      	ldr	r3, [sp, #20]
 8010fa2:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8010fa6:	a90e      	add	r1, sp, #56	@ 0x38
 8010fa8:	9b06      	ldr	r3, [sp, #24]
 8010faa:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8010fae:	a80c      	add	r0, sp, #48	@ 0x30
 8010fb0:	f8ad 703e 	strh.w	r7, [sp, #62]	@ 0x3e
 8010fb4:	f7fb fcd6 	bl	800c964 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8010fb8:	4640      	mov	r0, r8
 8010fba:	f7fb fcab 	bl	800c914 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010fbe:	a80e      	add	r0, sp, #56	@ 0x38
 8010fc0:	f7fb fca8 	bl	800c914 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010fc4:	4b38      	ldr	r3, [pc, #224]	@ (80110a8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8010fc6:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	@ 0x3c
 8010fca:	881b      	ldrh	r3, [r3, #0]
 8010fcc:	9307      	str	r3, [sp, #28]
 8010fce:	682b      	ldr	r3, [r5, #0]
 8010fd0:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 80110ac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8010fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010fd6:	4628      	mov	r0, r5
 8010fd8:	4798      	blx	r3
 8010fda:	f8bd 5032 	ldrh.w	r5, [sp, #50]	@ 0x32
 8010fde:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8010fe2:	4681      	mov	r9, r0
 8010fe4:	fb1a 3305 	smlabb	r3, sl, r5, r3
 8010fe8:	f8db 0000 	ldr.w	r0, [fp]
 8010fec:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8010fee:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8010ff2:	6803      	ldr	r3, [r0, #0]
 8010ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ff6:	4798      	blx	r3
 8010ff8:	4607      	mov	r7, r0
 8010ffa:	f8db 0000 	ldr.w	r0, [fp]
 8010ffe:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8011002:	6803      	ldr	r3, [r0, #0]
 8011004:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8011008:	9109      	str	r1, [sp, #36]	@ 0x24
 801100a:	9208      	str	r2, [sp, #32]
 801100c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801100e:	4798      	blx	r3
 8011010:	f010 0f01 	tst.w	r0, #1
 8011014:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8011018:	d012      	beq.n	8011040 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 801101a:	f8db 0000 	ldr.w	r0, [fp]
 801101e:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 8011022:	6803      	ldr	r3, [r0, #0]
 8011024:	9200      	str	r2, [sp, #0]
 8011026:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8011028:	e898 0006 	ldmia.w	r8, {r1, r2}
 801102c:	462b      	mov	r3, r5
 801102e:	47b0      	blx	r6
 8011030:	9b03      	ldr	r3, [sp, #12]
 8011032:	8023      	strh	r3, [r4, #0]
 8011034:	9b04      	ldr	r3, [sp, #16]
 8011036:	8063      	strh	r3, [r4, #2]
 8011038:	9b05      	ldr	r3, [sp, #20]
 801103a:	80a3      	strh	r3, [r4, #4]
 801103c:	9b06      	ldr	r3, [sp, #24]
 801103e:	e78b      	b.n	8010f58 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 8011040:	fb09 f202 	mul.w	r2, r9, r2
 8011044:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8011048:	440f      	add	r7, r1
 801104a:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	@ 0x36
 801104e:	b166      	cbz	r6, 801106a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8011050:	9a07      	ldr	r2, [sp, #28]
 8011052:	4592      	cmp	sl, r2
 8011054:	d109      	bne.n	801106a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8011056:	f8db 0000 	ldr.w	r0, [fp]
 801105a:	6802      	ldr	r2, [r0, #0]
 801105c:	fb09 f303 	mul.w	r3, r9, r3
 8011060:	6b56      	ldr	r6, [r2, #52]	@ 0x34
 8011062:	4629      	mov	r1, r5
 8011064:	463a      	mov	r2, r7
 8011066:	47b0      	blx	r6
 8011068:	e7e2      	b.n	8011030 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801106a:	fb0a f303 	mul.w	r3, sl, r3
 801106e:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 80110ac <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8011072:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 8011076:	ea4f 064a 	mov.w	r6, sl, lsl #1
 801107a:	4545      	cmp	r5, r8
 801107c:	d2d8      	bcs.n	8011030 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801107e:	f8db 0000 	ldr.w	r0, [fp]
 8011082:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8011086:	6802      	ldr	r2, [r0, #0]
 8011088:	4629      	mov	r1, r5
 801108a:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 801108e:	005b      	lsls	r3, r3, #1
 8011090:	463a      	mov	r2, r7
 8011092:	47d0      	blx	sl
 8011094:	444f      	add	r7, r9
 8011096:	4435      	add	r5, r6
 8011098:	e7ef      	b.n	801107a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 801109a:	bf00      	nop
 801109c:	2001264c 	.word	0x2001264c
 80110a0:	2001264e 	.word	0x2001264e
 80110a4:	20012650 	.word	0x20012650
 80110a8:	20012652 	.word	0x20012652
 80110ac:	20012658 	.word	0x20012658

080110b0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 80110b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110b2:	4606      	mov	r6, r0
 80110b4:	b087      	sub	sp, #28
 80110b6:	460c      	mov	r4, r1
 80110b8:	4617      	mov	r7, r2
 80110ba:	461d      	mov	r5, r3
 80110bc:	b333      	cbz	r3, 801110c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80110be:	4608      	mov	r0, r1
 80110c0:	f7f7 ff8f 	bl	8008fe2 <_ZNK8touchgfx4Rect7isEmptyEv>
 80110c4:	bb10      	cbnz	r0, 801110c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 80110c6:	6820      	ldr	r0, [r4, #0]
 80110c8:	6861      	ldr	r1, [r4, #4]
 80110ca:	4c1c      	ldr	r4, [pc, #112]	@ (801113c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 80110cc:	ab04      	add	r3, sp, #16
 80110ce:	c303      	stmia	r3!, {r0, r1}
 80110d0:	a804      	add	r0, sp, #16
 80110d2:	f7fb fc1f 	bl	800c914 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80110d6:	6820      	ldr	r0, [r4, #0]
 80110d8:	6803      	ldr	r3, [r0, #0]
 80110da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80110dc:	4798      	blx	r3
 80110de:	2dff      	cmp	r5, #255	@ 0xff
 80110e0:	d016      	beq.n	8011110 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 80110e2:	f010 0f08 	tst.w	r0, #8
 80110e6:	6820      	ldr	r0, [r4, #0]
 80110e8:	d015      	beq.n	8011116 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 80110ea:	2400      	movs	r4, #0
 80110ec:	6801      	ldr	r1, [r0, #0]
 80110ee:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80110f2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80110f6:	e9cd 5402 	strd	r5, r4, [sp, #8]
 80110fa:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 80110fe:	9401      	str	r4, [sp, #4]
 8011100:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8011104:	9400      	str	r4, [sp, #0]
 8011106:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 8011108:	4639      	mov	r1, r7
 801110a:	47a0      	blx	r4
 801110c:	b007      	add	sp, #28
 801110e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011110:	f010 0f02 	tst.w	r0, #2
 8011114:	e7e7      	b.n	80110e6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8011116:	6803      	ldr	r3, [r0, #0]
 8011118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801111a:	4798      	blx	r3
 801111c:	4b08      	ldr	r3, [pc, #32]	@ (8011140 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801111e:	881a      	ldrh	r2, [r3, #0]
 8011120:	6833      	ldr	r3, [r6, #0]
 8011122:	e9cd 7500 	strd	r7, r5, [sp]
 8011126:	4601      	mov	r1, r0
 8011128:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801112a:	4630      	mov	r0, r6
 801112c:	ab04      	add	r3, sp, #16
 801112e:	47a8      	blx	r5
 8011130:	6820      	ldr	r0, [r4, #0]
 8011132:	6803      	ldr	r3, [r0, #0]
 8011134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011136:	4798      	blx	r3
 8011138:	e7e8      	b.n	801110c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801113a:	bf00      	nop
 801113c:	20012658 	.word	0x20012658
 8011140:	20012652 	.word	0x20012652

08011144 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8011144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011148:	f89d 7024 	ldrb.w	r7, [sp, #36]	@ 0x24
 801114c:	9e08      	ldr	r6, [sp, #32]
 801114e:	4688      	mov	r8, r1
 8011150:	4614      	mov	r4, r2
 8011152:	461d      	mov	r5, r3
 8011154:	2f00      	cmp	r7, #0
 8011156:	f000 80a9 	beq.w	80112ac <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801115a:	4618      	mov	r0, r3
 801115c:	f7f7 ff41 	bl	8008fe2 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011160:	2800      	cmp	r0, #0
 8011162:	f040 80a3 	bne.w	80112ac <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8011166:	f9b5 1000 	ldrsh.w	r1, [r5]
 801116a:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801116e:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8011172:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8011176:	fb04 1303 	mla	r3, r4, r3, r1
 801117a:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801117e:	4365      	muls	r5, r4
 8011180:	2fff      	cmp	r7, #255	@ 0xff
 8011182:	eba4 0200 	sub.w	r2, r4, r0
 8011186:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801118a:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801118e:	d04a      	beq.n	8011226 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 8011190:	b2bc      	uxth	r4, r7
 8011192:	f1c7 0cff 	rsb	ip, r7, #255	@ 0xff
 8011196:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801119a:	fa5f f788 	uxtb.w	r7, r8
 801119e:	b2f3      	uxtb	r3, r6
 80111a0:	0040      	lsls	r0, r0, #1
 80111a2:	fb0e fe04 	mul.w	lr, lr, r4
 80111a6:	4367      	muls	r7, r4
 80111a8:	4363      	muls	r3, r4
 80111aa:	ea4f 0842 	mov.w	r8, r2, lsl #1
 80111ae:	fa1f fc8c 	uxth.w	ip, ip
 80111b2:	42a9      	cmp	r1, r5
 80111b4:	d27a      	bcs.n	80112ac <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 80111b6:	eb01 0900 	add.w	r9, r1, r0
 80111ba:	4549      	cmp	r1, r9
 80111bc:	d231      	bcs.n	8011222 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 80111be:	880a      	ldrh	r2, [r1, #0]
 80111c0:	1214      	asrs	r4, r2, #8
 80111c2:	10d6      	asrs	r6, r2, #3
 80111c4:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 80111c8:	00d2      	lsls	r2, r2, #3
 80111ca:	b2d2      	uxtb	r2, r2
 80111cc:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80111d0:	fb14 f40c 	smulbb	r4, r4, ip
 80111d4:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80111d8:	4474      	add	r4, lr
 80111da:	fb12 f20c 	smulbb	r2, r2, ip
 80111de:	b2a4      	uxth	r4, r4
 80111e0:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 80111e4:	441a      	add	r2, r3
 80111e6:	b292      	uxth	r2, r2
 80111e8:	f104 0a01 	add.w	sl, r4, #1
 80111ec:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 80111f0:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 80111f4:	fb16 f60c 	smulbb	r6, r6, ip
 80111f8:	f102 0a01 	add.w	sl, r2, #1
 80111fc:	443e      	add	r6, r7
 80111fe:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8011202:	b2b6      	uxth	r6, r6
 8011204:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8011208:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801120c:	4322      	orrs	r2, r4
 801120e:	1c74      	adds	r4, r6, #1
 8011210:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8011214:	0976      	lsrs	r6, r6, #5
 8011216:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801121a:	4332      	orrs	r2, r6
 801121c:	f821 2b02 	strh.w	r2, [r1], #2
 8011220:	e7cb      	b.n	80111ba <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 8011222:	4441      	add	r1, r8
 8011224:	e7c5      	b.n	80111b2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 8011226:	4f22      	ldr	r7, [pc, #136]	@ (80112b0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 8011228:	0973      	lsrs	r3, r6, #5
 801122a:	ea08 0707 	and.w	r7, r8, r7
 801122e:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8011232:	433b      	orrs	r3, r7
 8011234:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8011238:	4333      	orrs	r3, r6
 801123a:	07e7      	lsls	r7, r4, #31
 801123c:	b29b      	uxth	r3, r3
 801123e:	d50b      	bpl.n	8011258 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 8011240:	0040      	lsls	r0, r0, #1
 8011242:	0052      	lsls	r2, r2, #1
 8011244:	42a9      	cmp	r1, r5
 8011246:	d231      	bcs.n	80112ac <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8011248:	180c      	adds	r4, r1, r0
 801124a:	42a1      	cmp	r1, r4
 801124c:	d202      	bcs.n	8011254 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 801124e:	f821 3b02 	strh.w	r3, [r1], #2
 8011252:	e7fa      	b.n	801124a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 8011254:	4411      	add	r1, r2
 8011256:	e7f5      	b.n	8011244 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 8011258:	078e      	lsls	r6, r1, #30
 801125a:	d008      	beq.n	801126e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801125c:	0066      	lsls	r6, r4, #1
 801125e:	460a      	mov	r2, r1
 8011260:	42aa      	cmp	r2, r5
 8011262:	d202      	bcs.n	801126a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 8011264:	8013      	strh	r3, [r2, #0]
 8011266:	4432      	add	r2, r6
 8011268:	e7fa      	b.n	8011260 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 801126a:	3102      	adds	r1, #2
 801126c:	3801      	subs	r0, #1
 801126e:	07c2      	lsls	r2, r0, #31
 8011270:	d50b      	bpl.n	801128a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 8011272:	f100 4200 	add.w	r2, r0, #2147483648	@ 0x80000000
 8011276:	3a01      	subs	r2, #1
 8011278:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801127c:	0066      	lsls	r6, r4, #1
 801127e:	42aa      	cmp	r2, r5
 8011280:	d202      	bcs.n	8011288 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 8011282:	8013      	strh	r3, [r2, #0]
 8011284:	4432      	add	r2, r6
 8011286:	e7fa      	b.n	801127e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 8011288:	3801      	subs	r0, #1
 801128a:	b178      	cbz	r0, 80112ac <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801128c:	1040      	asrs	r0, r0, #1
 801128e:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8011292:	0080      	lsls	r0, r0, #2
 8011294:	0064      	lsls	r4, r4, #1
 8011296:	42a9      	cmp	r1, r5
 8011298:	d208      	bcs.n	80112ac <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801129a:	180e      	adds	r6, r1, r0
 801129c:	460a      	mov	r2, r1
 801129e:	42b2      	cmp	r2, r6
 80112a0:	d202      	bcs.n	80112a8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 80112a2:	f842 3b04 	str.w	r3, [r2], #4
 80112a6:	e7fa      	b.n	801129e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 80112a8:	4421      	add	r1, r4
 80112aa:	e7f4      	b.n	8011296 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 80112ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112b0:	00fff800 	.word	0x00fff800

080112b4 <_ZN8touchgfx8LCD16bppC1Ev>:
 80112b4:	2200      	movs	r2, #0
 80112b6:	4912      	ldr	r1, [pc, #72]	@ (8011300 <_ZN8touchgfx8LCD16bppC1Ev+0x4c>)
 80112b8:	6001      	str	r1, [r0, #0]
 80112ba:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80112be:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80112c2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80112c6:	e9c0 2207 	strd	r2, r2, [r0, #28]
 80112ca:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 80112ce:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 80112d2:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 80112d6:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 80112da:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 80112de:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 80112e2:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 80112e6:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 80112ea:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 80112ee:	e9c0 221b 	strd	r2, r2, [r0, #108]	@ 0x6c
 80112f2:	e9c0 221d 	strd	r2, r2, [r0, #116]	@ 0x74
 80112f6:	e9c0 221f 	strd	r2, r2, [r0, #124]	@ 0x7c
 80112fa:	e9c0 2221 	strd	r2, r2, [r0, #132]	@ 0x84
 80112fe:	4770      	bx	lr
 8011300:	08015d0c 	.word	0x08015d0c

08011304 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8011304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011308:	460d      	mov	r5, r1
 801130a:	b08d      	sub	sp, #52	@ 0x34
 801130c:	4604      	mov	r4, r0
 801130e:	6808      	ldr	r0, [r1, #0]
 8011310:	6849      	ldr	r1, [r1, #4]
 8011312:	4699      	mov	r9, r3
 8011314:	ab08      	add	r3, sp, #32
 8011316:	c303      	stmia	r3!, {r0, r1}
 8011318:	6810      	ldr	r0, [r2, #0]
 801131a:	6851      	ldr	r1, [r2, #4]
 801131c:	ab0a      	add	r3, sp, #40	@ 0x28
 801131e:	c303      	stmia	r3!, {r0, r1}
 8011320:	a808      	add	r0, sp, #32
 8011322:	f7fb faf7 	bl	800c914 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011326:	4629      	mov	r1, r5
 8011328:	a80a      	add	r0, sp, #40	@ 0x28
 801132a:	f7fb fb1b 	bl	800c964 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801132e:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 8011332:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	@ 0x2a
 8011336:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 801133a:	4d63      	ldr	r5, [pc, #396]	@ (80114c8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801133c:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	@ 0x2c
 8011340:	6828      	ldr	r0, [r5, #0]
 8011342:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	@ 0x2e
 8011346:	fb11 2103 	smlabb	r1, r1, r3, r2
 801134a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801134e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8011352:	440a      	add	r2, r1
 8011354:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8011358:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 801135c:	4413      	add	r3, r2
 801135e:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8011362:	6803      	ldr	r3, [r0, #0]
 8011364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011366:	4798      	blx	r3
 8011368:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801136c:	d119      	bne.n	80113a2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801136e:	f010 0f20 	tst.w	r0, #32
 8011372:	6828      	ldr	r0, [r5, #0]
 8011374:	d018      	beq.n	80113a8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8011376:	2500      	movs	r5, #0
 8011378:	6801      	ldr	r1, [r0, #0]
 801137a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801137e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 8011382:	e9cd 9503 	strd	r9, r5, [sp, #12]
 8011386:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 801138a:	9502      	str	r5, [sp, #8]
 801138c:	b2b6      	uxth	r6, r6
 801138e:	fa1f f588 	uxth.w	r5, r8
 8011392:	9601      	str	r6, [sp, #4]
 8011394:	9500      	str	r5, [sp, #0]
 8011396:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 8011398:	4621      	mov	r1, r4
 801139a:	47a8      	blx	r5
 801139c:	b00d      	add	sp, #52	@ 0x34
 801139e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113a2:	f010 0f40 	tst.w	r0, #64	@ 0x40
 80113a6:	e7e4      	b.n	8011372 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 80113a8:	6803      	ldr	r3, [r0, #0]
 80113aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113ac:	4798      	blx	r3
 80113ae:	4947      	ldr	r1, [pc, #284]	@ (80114cc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 80113b0:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 80113b4:	880b      	ldrh	r3, [r1, #0]
 80113b6:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	@ 0x28
 80113ba:	fb03 5202 	mla	r2, r3, r2, r5
 80113be:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80113c2:	4373      	muls	r3, r6
 80113c4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80113c8:	9307      	str	r3, [sp, #28]
 80113ca:	ea4f 0348 	mov.w	r3, r8, lsl #1
 80113ce:	9306      	str	r3, [sp, #24]
 80113d0:	468a      	mov	sl, r1
 80113d2:	9b07      	ldr	r3, [sp, #28]
 80113d4:	4298      	cmp	r0, r3
 80113d6:	d270      	bcs.n	80114ba <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 80113d8:	9b06      	ldr	r3, [sp, #24]
 80113da:	4621      	mov	r1, r4
 80113dc:	eb00 0b03 	add.w	fp, r0, r3
 80113e0:	4558      	cmp	r0, fp
 80113e2:	d25d      	bcs.n	80114a0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 80113e4:	f851 4b04 	ldr.w	r4, [r1], #4
 80113e8:	0e23      	lsrs	r3, r4, #24
 80113ea:	d014      	beq.n	8011416 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 80113ec:	2bff      	cmp	r3, #255	@ 0xff
 80113ee:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 80113f2:	d112      	bne.n	801141a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 80113f4:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80113f8:	d10f      	bne.n	801141a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 80113fa:	0963      	lsrs	r3, r4, #5
 80113fc:	f42c 6cff 	bic.w	ip, ip, #2040	@ 0x7f8
 8011400:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8011404:	f02c 0c07 	bic.w	ip, ip, #7
 8011408:	ea43 0c0c 	orr.w	ip, r3, ip
 801140c:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8011410:	ea4c 0404 	orr.w	r4, ip, r4
 8011414:	8004      	strh	r4, [r0, #0]
 8011416:	3002      	adds	r0, #2
 8011418:	e7e2      	b.n	80113e0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801141a:	fb09 f303 	mul.w	r3, r9, r3
 801141e:	8807      	ldrh	r7, [r0, #0]
 8011420:	1c5a      	adds	r2, r3, #1
 8011422:	eb02 2223 	add.w	r2, r2, r3, asr #8
 8011426:	1212      	asrs	r2, r2, #8
 8011428:	123e      	asrs	r6, r7, #8
 801142a:	b293      	uxth	r3, r2
 801142c:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8011430:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8011434:	43d2      	mvns	r2, r2
 8011436:	b2d2      	uxtb	r2, r2
 8011438:	10fd      	asrs	r5, r7, #3
 801143a:	fb1e fe03 	smulbb	lr, lr, r3
 801143e:	00ff      	lsls	r7, r7, #3
 8011440:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8011444:	fb06 e602 	mla	r6, r6, r2, lr
 8011448:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 801144c:	b2ff      	uxtb	r7, r7
 801144e:	fa5f fc8c 	uxtb.w	ip, ip
 8011452:	b2e4      	uxtb	r4, r4
 8011454:	b2b6      	uxth	r6, r6
 8011456:	fb1c fc03 	smulbb	ip, ip, r3
 801145a:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801145e:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 8011462:	fb14 f403 	smulbb	r4, r4, r3
 8011466:	fb05 c502 	mla	r5, r5, r2, ip
 801146a:	f106 0e01 	add.w	lr, r6, #1
 801146e:	fb07 4702 	mla	r7, r7, r2, r4
 8011472:	b2ad      	uxth	r5, r5
 8011474:	b2bf      	uxth	r7, r7
 8011476:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801147a:	f406 4e78 	and.w	lr, r6, #63488	@ 0xf800
 801147e:	f105 0c01 	add.w	ip, r5, #1
 8011482:	1c7e      	adds	r6, r7, #1
 8011484:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8011488:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801148c:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8011490:	096d      	lsrs	r5, r5, #5
 8011492:	ea46 060e 	orr.w	r6, r6, lr
 8011496:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801149a:	432e      	orrs	r6, r5
 801149c:	8006      	strh	r6, [r0, #0]
 801149e:	e7ba      	b.n	8011416 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 80114a0:	f8ba 3000 	ldrh.w	r3, [sl]
 80114a4:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	@ 0x24
 80114a8:	eba3 0308 	sub.w	r3, r3, r8
 80114ac:	eba4 0408 	sub.w	r4, r4, r8
 80114b0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80114b4:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 80114b8:	e78b      	b.n	80113d2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 80114ba:	4b03      	ldr	r3, [pc, #12]	@ (80114c8 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 80114bc:	6818      	ldr	r0, [r3, #0]
 80114be:	6803      	ldr	r3, [r0, #0]
 80114c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114c2:	4798      	blx	r3
 80114c4:	e76a      	b.n	801139c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 80114c6:	bf00      	nop
 80114c8:	20012658 	.word	0x20012658
 80114cc:	20012652 	.word	0x20012652

080114d0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 80114d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80114d4:	460c      	mov	r4, r1
 80114d6:	b085      	sub	sp, #20
 80114d8:	6810      	ldr	r0, [r2, #0]
 80114da:	6851      	ldr	r1, [r2, #4]
 80114dc:	466d      	mov	r5, sp
 80114de:	c503      	stmia	r5!, {r0, r1}
 80114e0:	6818      	ldr	r0, [r3, #0]
 80114e2:	6859      	ldr	r1, [r3, #4]
 80114e4:	4616      	mov	r6, r2
 80114e6:	c503      	stmia	r5!, {r0, r1}
 80114e8:	4668      	mov	r0, sp
 80114ea:	f7fb fa13 	bl	800c914 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80114ee:	4631      	mov	r1, r6
 80114f0:	a802      	add	r0, sp, #8
 80114f2:	f7fb fa37 	bl	800c964 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80114f6:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80114fa:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80114fe:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8011502:	4d28      	ldr	r5, [pc, #160]	@ (80115a4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8011504:	4e28      	ldr	r6, [pc, #160]	@ (80115a8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 8011506:	6828      	ldr	r0, [r5, #0]
 8011508:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801150c:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 8011510:	fb11 2103 	smlabb	r1, r1, r3, r2
 8011514:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8011518:	f8bd 1000 	ldrh.w	r1, [sp]
 801151c:	440a      	add	r2, r1
 801151e:	f8ad 2008 	strh.w	r2, [sp, #8]
 8011522:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011526:	4413      	add	r3, r2
 8011528:	f8ad 300a 	strh.w	r3, [sp, #10]
 801152c:	6803      	ldr	r3, [r0, #0]
 801152e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011530:	4798      	blx	r3
 8011532:	8833      	ldrh	r3, [r6, #0]
 8011534:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8011538:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801153c:	f8df e06c 	ldr.w	lr, [pc, #108]	@ 80115ac <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 8011540:	fb03 1202 	mla	r2, r3, r2, r1
 8011544:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8011548:	fb08 f303 	mul.w	r3, r8, r3
 801154c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8011550:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8011554:	4298      	cmp	r0, r3
 8011556:	d21d      	bcs.n	8011594 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 8011558:	eb00 080c 	add.w	r8, r0, ip
 801155c:	4540      	cmp	r0, r8
 801155e:	d20f      	bcs.n	8011580 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 8011560:	f854 1b04 	ldr.w	r1, [r4], #4
 8011564:	ea4f 1951 	mov.w	r9, r1, lsr #5
 8011568:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801156c:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 8011570:	ea42 0209 	orr.w	r2, r2, r9
 8011574:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8011578:	430a      	orrs	r2, r1
 801157a:	f820 2b02 	strh.w	r2, [r0], #2
 801157e:	e7ed      	b.n	801155c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 8011580:	8832      	ldrh	r2, [r6, #0]
 8011582:	1bd2      	subs	r2, r2, r7
 8011584:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8011588:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801158c:	1bd2      	subs	r2, r2, r7
 801158e:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8011592:	e7df      	b.n	8011554 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 8011594:	6828      	ldr	r0, [r5, #0]
 8011596:	6803      	ldr	r3, [r0, #0]
 8011598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801159a:	4798      	blx	r3
 801159c:	b005      	add	sp, #20
 801159e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80115a2:	bf00      	nop
 80115a4:	20012658 	.word	0x20012658
 80115a8:	20012652 	.word	0x20012652
 80115ac:	fffff800 	.word	0xfffff800

080115b0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 80115b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115b4:	460e      	mov	r6, r1
 80115b6:	b08e      	sub	sp, #56	@ 0x38
 80115b8:	4604      	mov	r4, r0
 80115ba:	6808      	ldr	r0, [r1, #0]
 80115bc:	6849      	ldr	r1, [r1, #4]
 80115be:	f8df 81d8 	ldr.w	r8, [pc, #472]	@ 8011798 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 80115c2:	f8df 91d8 	ldr.w	r9, [pc, #472]	@ 801179c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 80115c6:	461d      	mov	r5, r3
 80115c8:	ab0a      	add	r3, sp, #40	@ 0x28
 80115ca:	c303      	stmia	r3!, {r0, r1}
 80115cc:	6810      	ldr	r0, [r2, #0]
 80115ce:	6851      	ldr	r1, [r2, #4]
 80115d0:	ab0c      	add	r3, sp, #48	@ 0x30
 80115d2:	c303      	stmia	r3!, {r0, r1}
 80115d4:	a80a      	add	r0, sp, #40	@ 0x28
 80115d6:	f7fb f99d 	bl	800c914 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80115da:	4631      	mov	r1, r6
 80115dc:	a80c      	add	r0, sp, #48	@ 0x30
 80115de:	f7fb f9c1 	bl	800c964 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80115e2:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 80115e6:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80115ea:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 80115ee:	f8d8 0000 	ldr.w	r0, [r8]
 80115f2:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 80115f6:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 80115fa:	fb11 2103 	smlabb	r1, r1, r3, r2
 80115fe:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8011602:	440c      	add	r4, r1
 8011604:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 8011608:	440a      	add	r2, r1
 801160a:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801160e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 8011612:	4413      	add	r3, r2
 8011614:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8011618:	6803      	ldr	r3, [r0, #0]
 801161a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801161c:	4798      	blx	r3
 801161e:	2dff      	cmp	r5, #255	@ 0xff
 8011620:	d124      	bne.n	801166c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 8011622:	f010 0f01 	tst.w	r0, #1
 8011626:	f8d8 0000 	ldr.w	r0, [r8]
 801162a:	d022      	beq.n	8011672 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801162c:	2100      	movs	r1, #0
 801162e:	f8d0 c000 	ldr.w	ip, [r0]
 8011632:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8011636:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801163a:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801163e:	f04f 0e01 	mov.w	lr, #1
 8011642:	f8cd e018 	str.w	lr, [sp, #24]
 8011646:	f8b9 e000 	ldrh.w	lr, [r9]
 801164a:	9503      	str	r5, [sp, #12]
 801164c:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8011650:	b2b6      	uxth	r6, r6
 8011652:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8011656:	9102      	str	r1, [sp, #8]
 8011658:	b2bf      	uxth	r7, r7
 801165a:	9601      	str	r6, [sp, #4]
 801165c:	9700      	str	r7, [sp, #0]
 801165e:	f8dc 5040 	ldr.w	r5, [ip, #64]	@ 0x40
 8011662:	4621      	mov	r1, r4
 8011664:	47a8      	blx	r5
 8011666:	b00e      	add	sp, #56	@ 0x38
 8011668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801166c:	f010 0f04 	tst.w	r0, #4
 8011670:	e7d9      	b.n	8011626 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 8011672:	6803      	ldr	r3, [r0, #0]
 8011674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011676:	4798      	blx	r3
 8011678:	f8b9 3000 	ldrh.w	r3, [r9]
 801167c:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8011680:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 8011684:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	@ 0x2c
 8011688:	fb03 1202 	mla	r2, r3, r2, r1
 801168c:	ebac 0c07 	sub.w	ip, ip, r7
 8011690:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8011694:	435e      	muls	r6, r3
 8011696:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801169a:	2dff      	cmp	r5, #255	@ 0xff
 801169c:	eba3 0707 	sub.w	r7, r3, r7
 80116a0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80116a4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80116a8:	ea4f 0747 	mov.w	r7, r7, lsl #1
 80116ac:	d049      	beq.n	8011742 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 80116ae:	43eb      	mvns	r3, r5
 80116b0:	fa1f f985 	uxth.w	r9, r5
 80116b4:	b2db      	uxtb	r3, r3
 80116b6:	42b0      	cmp	r0, r6
 80116b8:	d266      	bcs.n	8011788 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 80116ba:	eb00 0a0e 	add.w	sl, r0, lr
 80116be:	4550      	cmp	r0, sl
 80116c0:	4621      	mov	r1, r4
 80116c2:	f104 0403 	add.w	r4, r4, #3
 80116c6:	d25b      	bcs.n	8011780 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 80116c8:	8802      	ldrh	r2, [r0, #0]
 80116ca:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80116ce:	ea4f 2822 	mov.w	r8, r2, asr #8
 80116d2:	f008 08f8 	and.w	r8, r8, #248	@ 0xf8
 80116d6:	fb11 f109 	smulbb	r1, r1, r9
 80116da:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 80116de:	10d5      	asrs	r5, r2, #3
 80116e0:	fb08 1803 	mla	r8, r8, r3, r1
 80116e4:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 80116e8:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 80116ec:	fb11 f109 	smulbb	r1, r1, r9
 80116f0:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 80116f4:	fb05 1503 	mla	r5, r5, r3, r1
 80116f8:	00d2      	lsls	r2, r2, #3
 80116fa:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80116fe:	b2d2      	uxtb	r2, r2
 8011700:	fb11 f109 	smulbb	r1, r1, r9
 8011704:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8011708:	fa1f f888 	uxth.w	r8, r8
 801170c:	fb02 1203 	mla	r2, r2, r3, r1
 8011710:	b292      	uxth	r2, r2
 8011712:	f108 0101 	add.w	r1, r8, #1
 8011716:	b2ad      	uxth	r5, r5
 8011718:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801171c:	1c51      	adds	r1, r2, #1
 801171e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8011722:	1c69      	adds	r1, r5, #1
 8011724:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8011728:	f408 4878 	and.w	r8, r8, #63488	@ 0xf800
 801172c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8011730:	096d      	lsrs	r5, r5, #5
 8011732:	ea42 0208 	orr.w	r2, r2, r8
 8011736:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 801173a:	432a      	orrs	r2, r5
 801173c:	f820 2b02 	strh.w	r2, [r0], #2
 8011740:	e7bd      	b.n	80116be <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 8011742:	4a14      	ldr	r2, [pc, #80]	@ (8011794 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 8011744:	42b0      	cmp	r0, r6
 8011746:	d21f      	bcs.n	8011788 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8011748:	eb00 050e 	add.w	r5, r0, lr
 801174c:	42a8      	cmp	r0, r5
 801174e:	4621      	mov	r1, r4
 8011750:	f104 0403 	add.w	r4, r4, #3
 8011754:	d210      	bcs.n	8011778 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 8011756:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801175a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801175e:	00db      	lsls	r3, r3, #3
 8011760:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 8011764:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8011768:	430b      	orrs	r3, r1
 801176a:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801176e:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 8011772:	f820 3b02 	strh.w	r3, [r0], #2
 8011776:	e7e9      	b.n	801174c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 8011778:	4438      	add	r0, r7
 801177a:	eb01 040c 	add.w	r4, r1, ip
 801177e:	e7e1      	b.n	8011744 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 8011780:	4438      	add	r0, r7
 8011782:	eb01 040c 	add.w	r4, r1, ip
 8011786:	e796      	b.n	80116b6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 8011788:	4b03      	ldr	r3, [pc, #12]	@ (8011798 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 801178a:	6818      	ldr	r0, [r3, #0]
 801178c:	6803      	ldr	r3, [r0, #0]
 801178e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011790:	4798      	blx	r3
 8011792:	e768      	b.n	8011666 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 8011794:	fffff800 	.word	0xfffff800
 8011798:	20012658 	.word	0x20012658
 801179c:	20012652 	.word	0x20012652

080117a0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80117a0:	b4f0      	push	{r4, r5, r6, r7}
 80117a2:	4616      	mov	r6, r2
 80117a4:	2e01      	cmp	r6, #1
 80117a6:	461c      	mov	r4, r3
 80117a8:	460d      	mov	r5, r1
 80117aa:	9a04      	ldr	r2, [sp, #16]
 80117ac:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80117b0:	f89d 7018 	ldrb.w	r7, [sp, #24]
 80117b4:	d012      	beq.n	80117dc <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 80117b6:	d303      	bcc.n	80117c0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 80117b8:	2e02      	cmp	r6, #2
 80117ba:	d00a      	beq.n	80117d2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 80117bc:	bcf0      	pop	{r4, r5, r6, r7}
 80117be:	4770      	bx	lr
 80117c0:	6805      	ldr	r5, [r0, #0]
 80117c2:	e9cd 3704 	strd	r3, r7, [sp, #16]
 80117c6:	68ed      	ldr	r5, [r5, #12]
 80117c8:	4613      	mov	r3, r2
 80117ca:	46ac      	mov	ip, r5
 80117cc:	4622      	mov	r2, r4
 80117ce:	bcf0      	pop	{r4, r5, r6, r7}
 80117d0:	4760      	bx	ip
 80117d2:	4621      	mov	r1, r4
 80117d4:	4628      	mov	r0, r5
 80117d6:	bcf0      	pop	{r4, r5, r6, r7}
 80117d8:	f7ff bd94 	b.w	8011304 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80117dc:	4621      	mov	r1, r4
 80117de:	4628      	mov	r0, r5
 80117e0:	bcf0      	pop	{r4, r5, r6, r7}
 80117e2:	f7ff bee5 	b.w	80115b0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

080117e8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 80117e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117ec:	4681      	mov	r9, r0
 80117ee:	b093      	sub	sp, #76	@ 0x4c
 80117f0:	6810      	ldr	r0, [r2, #0]
 80117f2:	f89d a070 	ldrb.w	sl, [sp, #112]	@ 0x70
 80117f6:	4f6d      	ldr	r7, [pc, #436]	@ (80119ac <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 80117f8:	4688      	mov	r8, r1
 80117fa:	6851      	ldr	r1, [r2, #4]
 80117fc:	ac0e      	add	r4, sp, #56	@ 0x38
 80117fe:	c403      	stmia	r4!, {r0, r1}
 8011800:	6818      	ldr	r0, [r3, #0]
 8011802:	6859      	ldr	r1, [r3, #4]
 8011804:	ac10      	add	r4, sp, #64	@ 0x40
 8011806:	4616      	mov	r6, r2
 8011808:	c403      	stmia	r4!, {r0, r1}
 801180a:	a80e      	add	r0, sp, #56	@ 0x38
 801180c:	f7fb f882 	bl	800c914 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011810:	4631      	mov	r1, r6
 8011812:	a810      	add	r0, sp, #64	@ 0x40
 8011814:	f7fb f8a6 	bl	800c964 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011818:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 801181c:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8011820:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 8011824:	4e62      	ldr	r6, [pc, #392]	@ (80119b0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 8011826:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	@ 0x44
 801182a:	6830      	ldr	r0, [r6, #0]
 801182c:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 8011830:	fb11 2103 	smlabb	r1, r1, r3, r2
 8011834:	4489      	add	r9, r1
 8011836:	f8bd 1038 	ldrh.w	r1, [sp, #56]	@ 0x38
 801183a:	440a      	add	r2, r1
 801183c:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8011840:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8011844:	4413      	add	r3, r2
 8011846:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 801184a:	6803      	ldr	r3, [r0, #0]
 801184c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801184e:	4798      	blx	r3
 8011850:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8011854:	6830      	ldr	r0, [r6, #0]
 8011856:	d01d      	beq.n	8011894 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8011858:	2200      	movs	r2, #0
 801185a:	6801      	ldr	r1, [r0, #0]
 801185c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8011860:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8011864:	220b      	movs	r2, #11
 8011866:	9207      	str	r2, [sp, #28]
 8011868:	883a      	ldrh	r2, [r7, #0]
 801186a:	9206      	str	r2, [sp, #24]
 801186c:	2201      	movs	r2, #1
 801186e:	e9cd a204 	strd	sl, r2, [sp, #16]
 8011872:	f8bd 203c 	ldrh.w	r2, [sp, #60]	@ 0x3c
 8011876:	9203      	str	r2, [sp, #12]
 8011878:	b2a4      	uxth	r4, r4
 801187a:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 801187e:	9200      	str	r2, [sp, #0]
 8011880:	b2ad      	uxth	r5, r5
 8011882:	9502      	str	r5, [sp, #8]
 8011884:	9401      	str	r4, [sp, #4]
 8011886:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 8011888:	4642      	mov	r2, r8
 801188a:	4649      	mov	r1, r9
 801188c:	47a0      	blx	r4
 801188e:	b013      	add	sp, #76	@ 0x4c
 8011890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011894:	6803      	ldr	r3, [r0, #0]
 8011896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011898:	4798      	blx	r3
 801189a:	883b      	ldrh	r3, [r7, #0]
 801189c:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	@ 0x42
 80118a0:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	@ 0x40
 80118a4:	fb03 1202 	mla	r2, r3, r2, r1
 80118a8:	435d      	muls	r5, r3
 80118aa:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80118ae:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 80118b2:	920c      	str	r2, [sp, #48]	@ 0x30
 80118b4:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 80118b8:	1b12      	subs	r2, r2, r4
 80118ba:	920d      	str	r2, [sp, #52]	@ 0x34
 80118bc:	0062      	lsls	r2, r4, #1
 80118be:	1b1c      	subs	r4, r3, r4
 80118c0:	0063      	lsls	r3, r4, #1
 80118c2:	920a      	str	r2, [sp, #40]	@ 0x28
 80118c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80118c6:	f04f 0e04 	mov.w	lr, #4
 80118ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80118cc:	4298      	cmp	r0, r3
 80118ce:	d266      	bcs.n	801199e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 80118d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80118d2:	eb00 0b03 	add.w	fp, r0, r3
 80118d6:	4558      	cmp	r0, fp
 80118d8:	d25c      	bcs.n	8011994 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 80118da:	f819 3b01 	ldrb.w	r3, [r9], #1
 80118de:	fb1e e303 	smlabb	r3, lr, r3, lr
 80118e2:	f858 2003 	ldr.w	r2, [r8, r3]
 80118e6:	0e11      	lsrs	r1, r2, #24
 80118e8:	d012      	beq.n	8011910 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80118ea:	29ff      	cmp	r1, #255	@ 0xff
 80118ec:	ea4f 2712 	mov.w	r7, r2, lsr #8
 80118f0:	d110      	bne.n	8011914 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 80118f2:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 80118f6:	d10d      	bne.n	8011914 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 80118f8:	0953      	lsrs	r3, r2, #5
 80118fa:	f427 67ff 	bic.w	r7, r7, #2040	@ 0x7f8
 80118fe:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8011902:	f027 0707 	bic.w	r7, r7, #7
 8011906:	431f      	orrs	r7, r3
 8011908:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801190c:	433a      	orrs	r2, r7
 801190e:	8002      	strh	r2, [r0, #0]
 8011910:	3002      	adds	r0, #2
 8011912:	e7e0      	b.n	80118d6 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 8011914:	fb0a f101 	mul.w	r1, sl, r1
 8011918:	8806      	ldrh	r6, [r0, #0]
 801191a:	1c4b      	adds	r3, r1, #1
 801191c:	eb03 2321 	add.w	r3, r3, r1, asr #8
 8011920:	1235      	asrs	r5, r6, #8
 8011922:	10f4      	asrs	r4, r6, #3
 8011924:	121b      	asrs	r3, r3, #8
 8011926:	00f6      	lsls	r6, r6, #3
 8011928:	b299      	uxth	r1, r3
 801192a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801192e:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8011932:	b2f6      	uxtb	r6, r6
 8011934:	43db      	mvns	r3, r3
 8011936:	b2d2      	uxtb	r2, r2
 8011938:	b2db      	uxtb	r3, r3
 801193a:	fb1c fc01 	smulbb	ip, ip, r1
 801193e:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8011942:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8011946:	fb12 f201 	smulbb	r2, r2, r1
 801194a:	fb05 c503 	mla	r5, r5, r3, ip
 801194e:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 8011952:	b2ff      	uxtb	r7, r7
 8011954:	fb06 2203 	mla	r2, r6, r3, r2
 8011958:	b2ad      	uxth	r5, r5
 801195a:	fb17 f701 	smulbb	r7, r7, r1
 801195e:	b292      	uxth	r2, r2
 8011960:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8011964:	fb04 7403 	mla	r4, r4, r3, r7
 8011968:	f105 0c01 	add.w	ip, r5, #1
 801196c:	1c57      	adds	r7, r2, #1
 801196e:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8011972:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8011976:	b2a4      	uxth	r4, r4
 8011978:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801197c:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8011980:	433d      	orrs	r5, r7
 8011982:	1c67      	adds	r7, r4, #1
 8011984:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 8011988:	0964      	lsrs	r4, r4, #5
 801198a:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 801198e:	4325      	orrs	r5, r4
 8011990:	8005      	strh	r5, [r0, #0]
 8011992:	e7bd      	b.n	8011910 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8011994:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011996:	4418      	add	r0, r3
 8011998:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801199a:	4499      	add	r9, r3
 801199c:	e795      	b.n	80118ca <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 801199e:	4b04      	ldr	r3, [pc, #16]	@ (80119b0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 80119a0:	6818      	ldr	r0, [r3, #0]
 80119a2:	6803      	ldr	r3, [r0, #0]
 80119a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119a6:	4798      	blx	r3
 80119a8:	e771      	b.n	801188e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 80119aa:	bf00      	nop
 80119ac:	20012652 	.word	0x20012652
 80119b0:	20012658 	.word	0x20012658

080119b4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 80119b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119b8:	b087      	sub	sp, #28
 80119ba:	4680      	mov	r8, r0
 80119bc:	f89d 6040 	ldrb.w	r6, [sp, #64]	@ 0x40
 80119c0:	460d      	mov	r5, r1
 80119c2:	4614      	mov	r4, r2
 80119c4:	2e00      	cmp	r6, #0
 80119c6:	f000 80b9 	beq.w	8011b3c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 80119ca:	6810      	ldr	r0, [r2, #0]
 80119cc:	6851      	ldr	r1, [r2, #4]
 80119ce:	af02      	add	r7, sp, #8
 80119d0:	c703      	stmia	r7!, {r0, r1}
 80119d2:	6818      	ldr	r0, [r3, #0]
 80119d4:	6859      	ldr	r1, [r3, #4]
 80119d6:	af04      	add	r7, sp, #16
 80119d8:	c703      	stmia	r7!, {r0, r1}
 80119da:	a802      	add	r0, sp, #8
 80119dc:	f7fa ff9a 	bl	800c914 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80119e0:	4621      	mov	r1, r4
 80119e2:	a804      	add	r0, sp, #16
 80119e4:	f7fa ffbe 	bl	800c964 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80119e8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80119ec:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80119f0:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 80119f4:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 80119f8:	fb14 2103 	smlabb	r1, r4, r3, r2
 80119fc:	eb08 0401 	add.w	r4, r8, r1
 8011a00:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8011a04:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8011a08:	440a      	add	r2, r1
 8011a0a:	f8ad 2010 	strh.w	r2, [sp, #16]
 8011a0e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8011a12:	4413      	add	r3, r2
 8011a14:	f8ad 3012 	strh.w	r3, [sp, #18]
 8011a18:	4b4a      	ldr	r3, [pc, #296]	@ (8011b44 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8011a1a:	6818      	ldr	r0, [r3, #0]
 8011a1c:	6803      	ldr	r3, [r0, #0]
 8011a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a20:	4798      	blx	r3
 8011a22:	4b49      	ldr	r3, [pc, #292]	@ (8011b48 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 8011a24:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8011a28:	881a      	ldrh	r2, [r3, #0]
 8011a2a:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8011a2e:	2eff      	cmp	r6, #255	@ 0xff
 8011a30:	fb02 c101 	mla	r1, r2, r1, ip
 8011a34:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8011a38:	fb02 f207 	mul.w	r2, r2, r7
 8011a3c:	f105 0104 	add.w	r1, r5, #4
 8011a40:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 8011a44:	461d      	mov	r5, r3
 8011a46:	d05a      	beq.n	8011afe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 8011a48:	f1c6 0eff 	rsb	lr, r6, #255	@ 0xff
 8011a4c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8011a50:	b2b6      	uxth	r6, r6
 8011a52:	fa1f fe8e 	uxth.w	lr, lr
 8011a56:	9301      	str	r3, [sp, #4]
 8011a58:	4282      	cmp	r2, r0
 8011a5a:	d96a      	bls.n	8011b32 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8011a5c:	eb00 0b0a 	add.w	fp, r0, sl
 8011a60:	4583      	cmp	fp, r0
 8011a62:	d940      	bls.n	8011ae6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 8011a64:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011a68:	8805      	ldrh	r5, [r0, #0]
 8011a6a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011a6e:	122f      	asrs	r7, r5, #8
 8011a70:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8011a74:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8011a78:	fb17 f70e 	smulbb	r7, r7, lr
 8011a7c:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8011a80:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8011a84:	00ed      	lsls	r5, r5, #3
 8011a86:	fb0c 7c06 	mla	ip, ip, r6, r7
 8011a8a:	f009 09fc 	and.w	r9, r9, #252	@ 0xfc
 8011a8e:	10df      	asrs	r7, r3, #3
 8011a90:	b2ed      	uxtb	r5, r5
 8011a92:	00db      	lsls	r3, r3, #3
 8011a94:	fa1f fc8c 	uxth.w	ip, ip
 8011a98:	fb19 f90e 	smulbb	r9, r9, lr
 8011a9c:	f007 07fc 	and.w	r7, r7, #252	@ 0xfc
 8011aa0:	b2db      	uxtb	r3, r3
 8011aa2:	fb15 f50e 	smulbb	r5, r5, lr
 8011aa6:	fb07 9706 	mla	r7, r7, r6, r9
 8011aaa:	fb03 5306 	mla	r3, r3, r6, r5
 8011aae:	f10c 0901 	add.w	r9, ip, #1
 8011ab2:	b29b      	uxth	r3, r3
 8011ab4:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8011ab8:	f40c 4978 	and.w	r9, ip, #63488	@ 0xf800
 8011abc:	f103 0c01 	add.w	ip, r3, #1
 8011ac0:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8011ac4:	b2bf      	uxth	r7, r7
 8011ac6:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8011aca:	ea4c 0c09 	orr.w	ip, ip, r9
 8011ace:	f107 0901 	add.w	r9, r7, #1
 8011ad2:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8011ad6:	097f      	lsrs	r7, r7, #5
 8011ad8:	f407 67fc 	and.w	r7, r7, #2016	@ 0x7e0
 8011adc:	ea4c 0c07 	orr.w	ip, ip, r7
 8011ae0:	f820 cb02 	strh.w	ip, [r0], #2
 8011ae4:	e7bc      	b.n	8011a60 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 8011ae6:	9b01      	ldr	r3, [sp, #4]
 8011ae8:	881b      	ldrh	r3, [r3, #0]
 8011aea:	eba3 0308 	sub.w	r3, r3, r8
 8011aee:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011af2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8011af6:	eba3 0308 	sub.w	r3, r3, r8
 8011afa:	441c      	add	r4, r3
 8011afc:	e7ac      	b.n	8011a58 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 8011afe:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8011b02:	4282      	cmp	r2, r0
 8011b04:	d915      	bls.n	8011b32 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8011b06:	eb00 060a 	add.w	r6, r0, sl
 8011b0a:	4286      	cmp	r6, r0
 8011b0c:	d906      	bls.n	8011b1c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 8011b0e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011b12:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011b16:	f820 3b02 	strh.w	r3, [r0], #2
 8011b1a:	e7f6      	b.n	8011b0a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 8011b1c:	882b      	ldrh	r3, [r5, #0]
 8011b1e:	eba3 0308 	sub.w	r3, r3, r8
 8011b22:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011b26:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8011b2a:	eba3 0308 	sub.w	r3, r3, r8
 8011b2e:	441c      	add	r4, r3
 8011b30:	e7e7      	b.n	8011b02 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 8011b32:	4b04      	ldr	r3, [pc, #16]	@ (8011b44 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 8011b34:	6818      	ldr	r0, [r3, #0]
 8011b36:	6803      	ldr	r3, [r0, #0]
 8011b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b3a:	4798      	blx	r3
 8011b3c:	b007      	add	sp, #28
 8011b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b42:	bf00      	nop
 8011b44:	20012658 	.word	0x20012658
 8011b48:	20012652 	.word	0x20012652

08011b4c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8011b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b50:	b091      	sub	sp, #68	@ 0x44
 8011b52:	4680      	mov	r8, r0
 8011b54:	f89d 5068 	ldrb.w	r5, [sp, #104]	@ 0x68
 8011b58:	460f      	mov	r7, r1
 8011b5a:	4614      	mov	r4, r2
 8011b5c:	2d00      	cmp	r5, #0
 8011b5e:	d051      	beq.n	8011c04 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8011b60:	6810      	ldr	r0, [r2, #0]
 8011b62:	6851      	ldr	r1, [r2, #4]
 8011b64:	f8df 9200 	ldr.w	r9, [pc, #512]	@ 8011d68 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 8011b68:	ae0c      	add	r6, sp, #48	@ 0x30
 8011b6a:	c603      	stmia	r6!, {r0, r1}
 8011b6c:	6818      	ldr	r0, [r3, #0]
 8011b6e:	6859      	ldr	r1, [r3, #4]
 8011b70:	ae0e      	add	r6, sp, #56	@ 0x38
 8011b72:	c603      	stmia	r6!, {r0, r1}
 8011b74:	a80c      	add	r0, sp, #48	@ 0x30
 8011b76:	f7fa fecd 	bl	800c914 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011b7a:	4621      	mov	r1, r4
 8011b7c:	a80e      	add	r0, sp, #56	@ 0x38
 8011b7e:	f7fa fef1 	bl	800c964 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011b82:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8011b86:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8011b8a:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8011b8e:	f8d9 0000 	ldr.w	r0, [r9]
 8011b92:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	@ 0x3c
 8011b96:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	@ 0x3e
 8011b9a:	fb11 2103 	smlabb	r1, r1, r3, r2
 8011b9e:	eb08 0401 	add.w	r4, r8, r1
 8011ba2:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 8011ba6:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 8011d6c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 8011baa:	440a      	add	r2, r1
 8011bac:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8011bb0:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8011bb4:	4413      	add	r3, r2
 8011bb6:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 8011bba:	6803      	ldr	r3, [r0, #0]
 8011bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011bbe:	4798      	blx	r3
 8011bc0:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8011bc4:	f8d9 0000 	ldr.w	r0, [r9]
 8011bc8:	d01f      	beq.n	8011c0a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 8011bca:	2200      	movs	r2, #0
 8011bcc:	6801      	ldr	r1, [r0, #0]
 8011bce:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8011bd2:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8011bd6:	220b      	movs	r2, #11
 8011bd8:	9207      	str	r2, [sp, #28]
 8011bda:	f8b8 2000 	ldrh.w	r2, [r8]
 8011bde:	9206      	str	r2, [sp, #24]
 8011be0:	2201      	movs	r2, #1
 8011be2:	e9cd 5204 	strd	r5, r2, [sp, #16]
 8011be6:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 8011bea:	9203      	str	r2, [sp, #12]
 8011bec:	fa1f f28a 	uxth.w	r2, sl
 8011bf0:	9202      	str	r2, [sp, #8]
 8011bf2:	b2b6      	uxth	r6, r6
 8011bf4:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8011bf8:	9200      	str	r2, [sp, #0]
 8011bfa:	9601      	str	r6, [sp, #4]
 8011bfc:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 8011bfe:	463a      	mov	r2, r7
 8011c00:	4621      	mov	r1, r4
 8011c02:	47a8      	blx	r5
 8011c04:	b011      	add	sp, #68	@ 0x44
 8011c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c0a:	6803      	ldr	r3, [r0, #0]
 8011c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011c0e:	4798      	blx	r3
 8011c10:	f8b8 2000 	ldrh.w	r2, [r8]
 8011c14:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8011c18:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 8011c1c:	2dff      	cmp	r5, #255	@ 0xff
 8011c1e:	fb02 1303 	mla	r3, r2, r3, r1
 8011c22:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011c26:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8011c2a:	fb0a fa02 	mul.w	sl, sl, r2
 8011c2e:	d062      	beq.n	8011cf6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8011c30:	ea6f 0c05 	mvn.w	ip, r5
 8011c34:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 8011c38:	930a      	str	r3, [sp, #40]	@ 0x28
 8011c3a:	b2ad      	uxth	r5, r5
 8011c3c:	fa5f fc8c 	uxtb.w	ip, ip
 8011c40:	f8cd 802c 	str.w	r8, [sp, #44]	@ 0x2c
 8011c44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011c46:	4298      	cmp	r0, r3
 8011c48:	f080 8085 	bcs.w	8011d56 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8011c4c:	eb00 0b09 	add.w	fp, r0, r9
 8011c50:	4558      	cmp	r0, fp
 8011c52:	d246      	bcs.n	8011ce2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 8011c54:	f814 eb01 	ldrb.w	lr, [r4], #1
 8011c58:	2303      	movs	r3, #3
 8011c5a:	2204      	movs	r2, #4
 8011c5c:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8011c60:	eb07 0a0e 	add.w	sl, r7, lr
 8011c64:	8803      	ldrh	r3, [r0, #0]
 8011c66:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8011c6a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8011c6e:	1219      	asrs	r1, r3, #8
 8011c70:	f001 01f8 	and.w	r1, r1, #248	@ 0xf8
 8011c74:	fb18 f805 	smulbb	r8, r8, r5
 8011c78:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8011c7c:	10da      	asrs	r2, r3, #3
 8011c7e:	fb01 810c 	mla	r1, r1, ip, r8
 8011c82:	00db      	lsls	r3, r3, #3
 8011c84:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8011c88:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 8011c8c:	b2db      	uxtb	r3, r3
 8011c8e:	fb18 f805 	smulbb	r8, r8, r5
 8011c92:	fb1e fe05 	smulbb	lr, lr, r5
 8011c96:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8011c9a:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8011c9e:	b289      	uxth	r1, r1
 8011ca0:	fb02 820c 	mla	r2, r2, ip, r8
 8011ca4:	fb03 e30c 	mla	r3, r3, ip, lr
 8011ca8:	b292      	uxth	r2, r2
 8011caa:	b29b      	uxth	r3, r3
 8011cac:	f101 0801 	add.w	r8, r1, #1
 8011cb0:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8011cb4:	f103 0e01 	add.w	lr, r3, #1
 8011cb8:	f102 0801 	add.w	r8, r2, #1
 8011cbc:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8011cc0:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 8011cc4:	f401 4178 	and.w	r1, r1, #63488	@ 0xf800
 8011cc8:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8011ccc:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8011cd0:	ea4e 0101 	orr.w	r1, lr, r1
 8011cd4:	f408 68fc 	and.w	r8, r8, #2016	@ 0x7e0
 8011cd8:	ea41 0108 	orr.w	r1, r1, r8
 8011cdc:	f820 1b02 	strh.w	r1, [r0], #2
 8011ce0:	e7b6      	b.n	8011c50 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 8011ce2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011ce4:	881b      	ldrh	r3, [r3, #0]
 8011ce6:	1b9b      	subs	r3, r3, r6
 8011ce8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011cec:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8011cf0:	1b9b      	subs	r3, r3, r6
 8011cf2:	441c      	add	r4, r3
 8011cf4:	e7a6      	b.n	8011c44 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 8011cf6:	491b      	ldr	r1, [pc, #108]	@ (8011d64 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 8011cf8:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8011cfc:	2203      	movs	r2, #3
 8011cfe:	2504      	movs	r5, #4
 8011d00:	4550      	cmp	r0, sl
 8011d02:	d228      	bcs.n	8011d56 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8011d04:	eb00 0c09 	add.w	ip, r0, r9
 8011d08:	4560      	cmp	r0, ip
 8011d0a:	4623      	mov	r3, r4
 8011d0c:	d219      	bcs.n	8011d42 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 8011d0e:	f893 e000 	ldrb.w	lr, [r3]
 8011d12:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 8011d16:	eb07 0b0e 	add.w	fp, r7, lr
 8011d1a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8011d1e:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8011d22:	f89b b001 	ldrb.w	fp, [fp, #1]
 8011d26:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8011d2a:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8011d2e:	f40b 6bfc 	and.w	fp, fp, #2016	@ 0x7e0
 8011d32:	ea43 030b 	orr.w	r3, r3, fp
 8011d36:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8011d3a:	3401      	adds	r4, #1
 8011d3c:	f820 3b02 	strh.w	r3, [r0], #2
 8011d40:	e7e2      	b.n	8011d08 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 8011d42:	f8b8 3000 	ldrh.w	r3, [r8]
 8011d46:	1b9b      	subs	r3, r3, r6
 8011d48:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011d4c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8011d50:	1b9b      	subs	r3, r3, r6
 8011d52:	441c      	add	r4, r3
 8011d54:	e7d4      	b.n	8011d00 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8011d56:	4b04      	ldr	r3, [pc, #16]	@ (8011d68 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 8011d58:	6818      	ldr	r0, [r3, #0]
 8011d5a:	6803      	ldr	r3, [r0, #0]
 8011d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d5e:	4798      	blx	r3
 8011d60:	e750      	b.n	8011c04 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8011d62:	bf00      	nop
 8011d64:	fffff800 	.word	0xfffff800
 8011d68:	20012658 	.word	0x20012658
 8011d6c:	20012652 	.word	0x20012652

08011d70 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8011d70:	b4f0      	push	{r4, r5, r6, r7}
 8011d72:	460c      	mov	r4, r1
 8011d74:	4611      	mov	r1, r2
 8011d76:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8011d7a:	780f      	ldrb	r7, [r1, #0]
 8011d7c:	784e      	ldrb	r6, [r1, #1]
 8011d7e:	2f01      	cmp	r7, #1
 8011d80:	461a      	mov	r2, r3
 8011d82:	9b04      	ldr	r3, [sp, #16]
 8011d84:	d038      	beq.n	8011df8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x88>
 8011d86:	d31f      	bcc.n	8011dc8 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x58>
 8011d88:	2f02      	cmp	r7, #2
 8011d8a:	d14d      	bne.n	8011e28 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8011d8c:	2e03      	cmp	r6, #3
 8011d8e:	d84b      	bhi.n	8011e28 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8011d90:	e8df f006 	tbb	[pc, r6]
 8011d94:	17140702 	.word	0x17140702
 8011d98:	9504      	str	r5, [sp, #16]
 8011d9a:	4620      	mov	r0, r4
 8011d9c:	bcf0      	pop	{r4, r5, r6, r7}
 8011d9e:	f7ff be09 	b.w	80119b4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8011da2:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8011da4:	2800      	cmp	r0, #0
 8011da6:	d03f      	beq.n	8011e28 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8011da8:	6806      	ldr	r6, [r0, #0]
 8011daa:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8011dae:	68b5      	ldr	r5, [r6, #8]
 8011db0:	4613      	mov	r3, r2
 8011db2:	46ac      	mov	ip, r5
 8011db4:	460a      	mov	r2, r1
 8011db6:	4621      	mov	r1, r4
 8011db8:	bcf0      	pop	{r4, r5, r6, r7}
 8011dba:	4760      	bx	ip
 8011dbc:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8011dc0:	e7f0      	b.n	8011da4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8011dc2:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8011dc6:	e7ed      	b.n	8011da4 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8011dc8:	2e03      	cmp	r6, #3
 8011dca:	d82d      	bhi.n	8011e28 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8011dcc:	e8df f006 	tbb	[pc, r6]
 8011dd0:	110e0702 	.word	0x110e0702
 8011dd4:	9504      	str	r5, [sp, #16]
 8011dd6:	4620      	mov	r0, r4
 8011dd8:	bcf0      	pop	{r4, r5, r6, r7}
 8011dda:	f7ff bd05 	b.w	80117e8 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8011dde:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8011de0:	b310      	cbz	r0, 8011e28 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8011de2:	6806      	ldr	r6, [r0, #0]
 8011de4:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8011de8:	68f5      	ldr	r5, [r6, #12]
 8011dea:	e7e1      	b.n	8011db0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8011dec:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8011df0:	e7f6      	b.n	8011de0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 8011df2:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8011df6:	e7f3      	b.n	8011de0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x70>
 8011df8:	2e03      	cmp	r6, #3
 8011dfa:	d815      	bhi.n	8011e28 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8011dfc:	e8df f006 	tbb	[pc, r6]
 8011e00:	110e0702 	.word	0x110e0702
 8011e04:	9504      	str	r5, [sp, #16]
 8011e06:	4620      	mov	r0, r4
 8011e08:	bcf0      	pop	{r4, r5, r6, r7}
 8011e0a:	f7ff be9f 	b.w	8011b4c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8011e0e:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8011e10:	b150      	cbz	r0, 8011e28 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xb8>
 8011e12:	6806      	ldr	r6, [r0, #0]
 8011e14:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8011e18:	6935      	ldr	r5, [r6, #16]
 8011e1a:	e7c9      	b.n	8011db0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8011e1c:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8011e20:	e7f6      	b.n	8011e10 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 8011e22:	f8d0 0084 	ldr.w	r0, [r0, #132]	@ 0x84
 8011e26:	e7f3      	b.n	8011e10 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0xa0>
 8011e28:	bcf0      	pop	{r4, r5, r6, r7}
 8011e2a:	4770      	bx	lr

08011e2c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8011e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e30:	4604      	mov	r4, r0
 8011e32:	b087      	sub	sp, #28
 8011e34:	6810      	ldr	r0, [r2, #0]
 8011e36:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
 8011e3a:	f8df 9238 	ldr.w	r9, [pc, #568]	@ 8012074 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 8011e3e:	460e      	mov	r6, r1
 8011e40:	6851      	ldr	r1, [r2, #4]
 8011e42:	ad02      	add	r5, sp, #8
 8011e44:	c503      	stmia	r5!, {r0, r1}
 8011e46:	6818      	ldr	r0, [r3, #0]
 8011e48:	6859      	ldr	r1, [r3, #4]
 8011e4a:	ad04      	add	r5, sp, #16
 8011e4c:	4617      	mov	r7, r2
 8011e4e:	c503      	stmia	r5!, {r0, r1}
 8011e50:	a802      	add	r0, sp, #8
 8011e52:	f7fa fd5f 	bl	800c914 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8011e56:	4639      	mov	r1, r7
 8011e58:	a804      	add	r0, sp, #16
 8011e5a:	f7fa fd83 	bl	800c964 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8011e5e:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8011e62:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8011e66:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8011e6a:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8011e6e:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8011e72:	fb11 2103 	smlabb	r1, r1, r3, r2
 8011e76:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8011e7a:	440e      	add	r6, r1
 8011e7c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8011e80:	440a      	add	r2, r1
 8011e82:	f8ad 2010 	strh.w	r2, [sp, #16]
 8011e86:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8011e8a:	4413      	add	r3, r2
 8011e8c:	f8ad 3012 	strh.w	r3, [sp, #18]
 8011e90:	4b77      	ldr	r3, [pc, #476]	@ (8012070 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8011e92:	6818      	ldr	r0, [r3, #0]
 8011e94:	6803      	ldr	r3, [r0, #0]
 8011e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e98:	4798      	blx	r3
 8011e9a:	f8b9 b000 	ldrh.w	fp, [r9]
 8011e9e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8011ea2:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8011ea6:	fb0b 2303 	mla	r3, fp, r3, r2
 8011eaa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011eae:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8011eb2:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8011eb6:	fb05 f50b 	mul.w	r5, r5, fp
 8011eba:	9300      	str	r3, [sp, #0]
 8011ebc:	d069      	beq.n	8011f92 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 8011ebe:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8011ec2:	4558      	cmp	r0, fp
 8011ec4:	f080 80cc 	bcs.w	8012060 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8011ec8:	9b00      	ldr	r3, [sp, #0]
 8011eca:	18c3      	adds	r3, r0, r3
 8011ecc:	9301      	str	r3, [sp, #4]
 8011ece:	4631      	mov	r1, r6
 8011ed0:	9b01      	ldr	r3, [sp, #4]
 8011ed2:	4298      	cmp	r0, r3
 8011ed4:	d24f      	bcs.n	8011f76 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 8011ed6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011eda:	2a00      	cmp	r2, #0
 8011edc:	d048      	beq.n	8011f70 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8011ede:	fb0a f202 	mul.w	r2, sl, r2
 8011ee2:	1c53      	adds	r3, r2, #1
 8011ee4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8011ee8:	121b      	asrs	r3, r3, #8
 8011eea:	d041      	beq.n	8011f70 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8011eec:	8802      	ldrh	r2, [r0, #0]
 8011eee:	f8b4 c000 	ldrh.w	ip, [r4]
 8011ef2:	b29e      	uxth	r6, r3
 8011ef4:	1215      	asrs	r5, r2, #8
 8011ef6:	43db      	mvns	r3, r3
 8011ef8:	b2db      	uxtb	r3, r3
 8011efa:	ea4f 272c 	mov.w	r7, ip, asr #8
 8011efe:	f005 05f8 	and.w	r5, r5, #248	@ 0xf8
 8011f02:	fb15 f503 	smulbb	r5, r5, r3
 8011f06:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8011f0a:	f007 07f8 	and.w	r7, r7, #248	@ 0xf8
 8011f0e:	00d2      	lsls	r2, r2, #3
 8011f10:	fb07 5706 	mla	r7, r7, r6, r5
 8011f14:	f00e 0efc 	and.w	lr, lr, #252	@ 0xfc
 8011f18:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8011f1c:	b2d2      	uxtb	r2, r2
 8011f1e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8011f22:	b2bf      	uxth	r7, r7
 8011f24:	fb1e fe03 	smulbb	lr, lr, r3
 8011f28:	f005 05fc 	and.w	r5, r5, #252	@ 0xfc
 8011f2c:	fa5f fc8c 	uxtb.w	ip, ip
 8011f30:	fb12 f203 	smulbb	r2, r2, r3
 8011f34:	fb05 e506 	mla	r5, r5, r6, lr
 8011f38:	fb0c 2c06 	mla	ip, ip, r6, r2
 8011f3c:	f107 0e01 	add.w	lr, r7, #1
 8011f40:	fa1f fc8c 	uxth.w	ip, ip
 8011f44:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8011f48:	f407 4e78 	and.w	lr, r7, #63488	@ 0xf800
 8011f4c:	f10c 0701 	add.w	r7, ip, #1
 8011f50:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8011f54:	b2ad      	uxth	r5, r5
 8011f56:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8011f5a:	ea47 070e 	orr.w	r7, r7, lr
 8011f5e:	f105 0e01 	add.w	lr, r5, #1
 8011f62:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8011f66:	096d      	lsrs	r5, r5, #5
 8011f68:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8011f6c:	432f      	orrs	r7, r5
 8011f6e:	8007      	strh	r7, [r0, #0]
 8011f70:	3002      	adds	r0, #2
 8011f72:	3402      	adds	r4, #2
 8011f74:	e7ac      	b.n	8011ed0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8011f76:	f8b9 3000 	ldrh.w	r3, [r9]
 8011f7a:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8011f7e:	eba3 0308 	sub.w	r3, r3, r8
 8011f82:	eba6 0608 	sub.w	r6, r6, r8
 8011f86:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8011f8a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011f8e:	440e      	add	r6, r1
 8011f90:	e797      	b.n	8011ec2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8011f92:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8011f96:	42a8      	cmp	r0, r5
 8011f98:	d262      	bcs.n	8012060 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8011f9a:	9b00      	ldr	r3, [sp, #0]
 8011f9c:	4631      	mov	r1, r6
 8011f9e:	eb00 0b03 	add.w	fp, r0, r3
 8011fa2:	4558      	cmp	r0, fp
 8011fa4:	d24e      	bcs.n	8012044 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8011fa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011faa:	b12b      	cbz	r3, 8011fb8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8011fac:	2bff      	cmp	r3, #255	@ 0xff
 8011fae:	f8b4 e000 	ldrh.w	lr, [r4]
 8011fb2:	d104      	bne.n	8011fbe <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8011fb4:	f8a0 e000 	strh.w	lr, [r0]
 8011fb8:	3002      	adds	r0, #2
 8011fba:	3402      	adds	r4, #2
 8011fbc:	e7f1      	b.n	8011fa2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8011fbe:	8802      	ldrh	r2, [r0, #0]
 8011fc0:	b29f      	uxth	r7, r3
 8011fc2:	1216      	asrs	r6, r2, #8
 8011fc4:	43db      	mvns	r3, r3
 8011fc6:	b2db      	uxtb	r3, r3
 8011fc8:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8011fcc:	f006 06f8 	and.w	r6, r6, #248	@ 0xf8
 8011fd0:	fb16 f603 	smulbb	r6, r6, r3
 8011fd4:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8011fd8:	f00c 0cf8 	and.w	ip, ip, #248	@ 0xf8
 8011fdc:	00d2      	lsls	r2, r2, #3
 8011fde:	fb0c 6c07 	mla	ip, ip, r7, r6
 8011fe2:	b2d2      	uxtb	r2, r2
 8011fe4:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8011fe8:	f00a 0afc 	and.w	sl, sl, #252	@ 0xfc
 8011fec:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8011ff0:	fb1a fa03 	smulbb	sl, sl, r3
 8011ff4:	fa1f fc8c 	uxth.w	ip, ip
 8011ff8:	fb12 f303 	smulbb	r3, r2, r3
 8011ffc:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8012000:	fa5f fe8e 	uxtb.w	lr, lr
 8012004:	fb06 a607 	mla	r6, r6, r7, sl
 8012008:	f10c 0201 	add.w	r2, ip, #1
 801200c:	fb0e 3307 	mla	r3, lr, r7, r3
 8012010:	b2b6      	uxth	r6, r6
 8012012:	b29b      	uxth	r3, r3
 8012014:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8012018:	f40c 4278 	and.w	r2, ip, #63488	@ 0xf800
 801201c:	f106 0a01 	add.w	sl, r6, #1
 8012020:	f103 0c01 	add.w	ip, r3, #1
 8012024:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8012028:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801202c:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8012030:	0976      	lsrs	r6, r6, #5
 8012032:	ea4c 0c02 	orr.w	ip, ip, r2
 8012036:	f406 66fc 	and.w	r6, r6, #2016	@ 0x7e0
 801203a:	ea4c 0c06 	orr.w	ip, ip, r6
 801203e:	f8a0 c000 	strh.w	ip, [r0]
 8012042:	e7b9      	b.n	8011fb8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8012044:	f8b9 3000 	ldrh.w	r3, [r9]
 8012048:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801204c:	eba3 0308 	sub.w	r3, r3, r8
 8012050:	eba6 0608 	sub.w	r6, r6, r8
 8012054:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8012058:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801205c:	440e      	add	r6, r1
 801205e:	e79a      	b.n	8011f96 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8012060:	4b03      	ldr	r3, [pc, #12]	@ (8012070 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8012062:	6818      	ldr	r0, [r3, #0]
 8012064:	6803      	ldr	r3, [r0, #0]
 8012066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012068:	4798      	blx	r3
 801206a:	b007      	add	sp, #28
 801206c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012070:	20012658 	.word	0x20012658
 8012074:	20012652 	.word	0x20012652

08012078 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8012078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801207c:	b089      	sub	sp, #36	@ 0x24
 801207e:	4607      	mov	r7, r0
 8012080:	f89d 604c 	ldrb.w	r6, [sp, #76]	@ 0x4c
 8012084:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8012086:	4688      	mov	r8, r1
 8012088:	4692      	mov	sl, r2
 801208a:	4699      	mov	r9, r3
 801208c:	2e00      	cmp	r6, #0
 801208e:	d048      	beq.n	8012122 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8012090:	4608      	mov	r0, r1
 8012092:	f7fe fac3 	bl	801061c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012096:	4605      	mov	r5, r0
 8012098:	4640      	mov	r0, r8
 801209a:	f7fe faf3 	bl	8010684 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801209e:	f8ad 000e 	strh.w	r0, [sp, #14]
 80120a2:	4640      	mov	r0, r8
 80120a4:	f8ad a008 	strh.w	sl, [sp, #8]
 80120a8:	f8ad 500c 	strh.w	r5, [sp, #12]
 80120ac:	f8ad 900a 	strh.w	r9, [sp, #10]
 80120b0:	f7fe fba6 	bl	8010800 <_ZNK8touchgfx6Bitmap7getDataEv>
 80120b4:	4605      	mov	r5, r0
 80120b6:	4640      	mov	r0, r8
 80120b8:	f7fe fbd2 	bl	8010860 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80120bc:	4682      	mov	sl, r0
 80120be:	4640      	mov	r0, r8
 80120c0:	f7fe fc22 	bl	8010908 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80120c4:	2810      	cmp	r0, #16
 80120c6:	d82c      	bhi.n	8012122 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 80120c8:	e8df f010 	tbh	[pc, r0, lsl #1]
 80120cc:	00ba00ca 	.word	0x00ba00ca
 80120d0:	002b0011 	.word	0x002b0011
 80120d4:	002b002b 	.word	0x002b002b
 80120d8:	002b002b 	.word	0x002b002b
 80120dc:	002b002b 	.word	0x002b002b
 80120e0:	00c1002b 	.word	0x00c1002b
 80120e4:	002b002b 	.word	0x002b002b
 80120e8:	002b0180 	.word	0x002b0180
 80120ec:	0173      	.short	0x0173
 80120ee:	4bbc      	ldr	r3, [pc, #752]	@ (80123e0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x368>)
 80120f0:	6818      	ldr	r0, [r3, #0]
 80120f2:	6803      	ldr	r3, [r0, #0]
 80120f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80120f6:	4798      	blx	r3
 80120f8:	2eff      	cmp	r6, #255	@ 0xff
 80120fa:	d101      	bne.n	8012100 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 80120fc:	0683      	lsls	r3, r0, #26
 80120fe:	d506      	bpl.n	801210e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x96>
 8012100:	4633      	mov	r3, r6
 8012102:	4622      	mov	r2, r4
 8012104:	a902      	add	r1, sp, #8
 8012106:	4628      	mov	r0, r5
 8012108:	f7ff f8fc 	bl	8011304 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801210c:	e009      	b.n	8012122 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801210e:	4640      	mov	r0, r8
 8012110:	f7fe fb3e 	bl	8010790 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8012114:	b940      	cbnz	r0, 8012128 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb0>
 8012116:	4623      	mov	r3, r4
 8012118:	aa02      	add	r2, sp, #8
 801211a:	4629      	mov	r1, r5
 801211c:	4638      	mov	r0, r7
 801211e:	f7ff f9d7 	bl	80114d0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8012122:	b009      	add	sp, #36	@ 0x24
 8012124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012128:	f10d 0918 	add.w	r9, sp, #24
 801212c:	4641      	mov	r1, r8
 801212e:	4648      	mov	r0, r9
 8012130:	f7fe fadc 	bl	80106ec <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8012134:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012138:	f10d 0810 	add.w	r8, sp, #16
 801213c:	e888 0003 	stmia.w	r8, {r0, r1}
 8012140:	4640      	mov	r0, r8
 8012142:	4621      	mov	r1, r4
 8012144:	f7f6 ff0a 	bl	8008f5c <_ZN8touchgfx4RectaNERKS0_>
 8012148:	4640      	mov	r0, r8
 801214a:	f7f6 ff4a 	bl	8008fe2 <_ZNK8touchgfx4Rect7isEmptyEv>
 801214e:	2800      	cmp	r0, #0
 8012150:	d1d6      	bne.n	8012100 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x88>
 8012152:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8012156:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801215a:	4293      	cmp	r3, r2
 801215c:	dd12      	ble.n	8012184 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x10c>
 801215e:	1a9b      	subs	r3, r3, r2
 8012160:	f9b4 0000 	ldrsh.w	r0, [r4]
 8012164:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8012168:	f8ad 0018 	strh.w	r0, [sp, #24]
 801216c:	f8ad 201a 	strh.w	r2, [sp, #26]
 8012170:	f8ad 101c 	strh.w	r1, [sp, #28]
 8012174:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012178:	464a      	mov	r2, r9
 801217a:	4633      	mov	r3, r6
 801217c:	a902      	add	r1, sp, #8
 801217e:	4628      	mov	r0, r5
 8012180:	f7ff f8c0 	bl	8011304 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8012184:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8012188:	f9b4 2000 	ldrsh.w	r2, [r4]
 801218c:	4293      	cmp	r3, r2
 801218e:	dd12      	ble.n	80121b6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x13e>
 8012190:	1a9b      	subs	r3, r3, r2
 8012192:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8012196:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801219a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801219e:	f8ad 001a 	strh.w	r0, [sp, #26]
 80121a2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80121a6:	f8ad 101e 	strh.w	r1, [sp, #30]
 80121aa:	23ff      	movs	r3, #255	@ 0xff
 80121ac:	464a      	mov	r2, r9
 80121ae:	a902      	add	r1, sp, #8
 80121b0:	4628      	mov	r0, r5
 80121b2:	f7ff f8a7 	bl	8011304 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 80121b6:	4643      	mov	r3, r8
 80121b8:	aa02      	add	r2, sp, #8
 80121ba:	4629      	mov	r1, r5
 80121bc:	4638      	mov	r0, r7
 80121be:	f7ff f987 	bl	80114d0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 80121c2:	88a2      	ldrh	r2, [r4, #4]
 80121c4:	8823      	ldrh	r3, [r4, #0]
 80121c6:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 80121ca:	4413      	add	r3, r2
 80121cc:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80121d0:	440a      	add	r2, r1
 80121d2:	b29b      	uxth	r3, r3
 80121d4:	b292      	uxth	r2, r2
 80121d6:	b211      	sxth	r1, r2
 80121d8:	b218      	sxth	r0, r3
 80121da:	4288      	cmp	r0, r1
 80121dc:	dd12      	ble.n	8012204 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x18c>
 80121de:	1a9b      	subs	r3, r3, r2
 80121e0:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 80121e4:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 80121e8:	f8ad 1018 	strh.w	r1, [sp, #24]
 80121ec:	f8ad 301c 	strh.w	r3, [sp, #28]
 80121f0:	f8ad 001e 	strh.w	r0, [sp, #30]
 80121f4:	23ff      	movs	r3, #255	@ 0xff
 80121f6:	464a      	mov	r2, r9
 80121f8:	a902      	add	r1, sp, #8
 80121fa:	4628      	mov	r0, r5
 80121fc:	f8ad 601a 	strh.w	r6, [sp, #26]
 8012200:	f7ff f880 	bl	8011304 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8012204:	88e2      	ldrh	r2, [r4, #6]
 8012206:	8863      	ldrh	r3, [r4, #2]
 8012208:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801220c:	4413      	add	r3, r2
 801220e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8012212:	440a      	add	r2, r1
 8012214:	b29b      	uxth	r3, r3
 8012216:	b292      	uxth	r2, r2
 8012218:	b211      	sxth	r1, r2
 801221a:	b218      	sxth	r0, r3
 801221c:	4288      	cmp	r0, r1
 801221e:	dd80      	ble.n	8012122 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8012220:	1a9b      	subs	r3, r3, r2
 8012222:	f9b4 6000 	ldrsh.w	r6, [r4]
 8012226:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801222a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801222e:	f8ad 6018 	strh.w	r6, [sp, #24]
 8012232:	f8ad 101a 	strh.w	r1, [sp, #26]
 8012236:	f8ad 001c 	strh.w	r0, [sp, #28]
 801223a:	23ff      	movs	r3, #255	@ 0xff
 801223c:	464a      	mov	r2, r9
 801223e:	e761      	b.n	8012104 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 8012240:	4633      	mov	r3, r6
 8012242:	4622      	mov	r2, r4
 8012244:	a902      	add	r1, sp, #8
 8012246:	4628      	mov	r0, r5
 8012248:	f7ff f9b2 	bl	80115b0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801224c:	e769      	b.n	8012122 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801224e:	e9cd 4600 	strd	r4, r6, [sp]
 8012252:	ab02      	add	r3, sp, #8
 8012254:	4652      	mov	r2, sl
 8012256:	4629      	mov	r1, r5
 8012258:	4638      	mov	r0, r7
 801225a:	f7ff fd89 	bl	8011d70 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801225e:	e760      	b.n	8012122 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8012260:	4640      	mov	r0, r8
 8012262:	f7fe fa95 	bl	8010790 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8012266:	b948      	cbnz	r0, 801227c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x204>
 8012268:	683b      	ldr	r3, [r7, #0]
 801226a:	e9cd 6000 	strd	r6, r0, [sp]
 801226e:	aa02      	add	r2, sp, #8
 8012270:	68de      	ldr	r6, [r3, #12]
 8012272:	4629      	mov	r1, r5
 8012274:	4623      	mov	r3, r4
 8012276:	4638      	mov	r0, r7
 8012278:	47b0      	blx	r6
 801227a:	e752      	b.n	8012122 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 801227c:	f10d 0918 	add.w	r9, sp, #24
 8012280:	4641      	mov	r1, r8
 8012282:	4648      	mov	r0, r9
 8012284:	f7fe fa32 	bl	80106ec <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8012288:	e899 0003 	ldmia.w	r9, {r0, r1}
 801228c:	f10d 0810 	add.w	r8, sp, #16
 8012290:	e888 0003 	stmia.w	r8, {r0, r1}
 8012294:	4640      	mov	r0, r8
 8012296:	4621      	mov	r1, r4
 8012298:	f7f6 fe60 	bl	8008f5c <_ZN8touchgfx4RectaNERKS0_>
 801229c:	4640      	mov	r0, r8
 801229e:	f7f6 fea0 	bl	8008fe2 <_ZNK8touchgfx4Rect7isEmptyEv>
 80122a2:	b138      	cbz	r0, 80122b4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x23c>
 80122a4:	9600      	str	r6, [sp, #0]
 80122a6:	4623      	mov	r3, r4
 80122a8:	aa02      	add	r2, sp, #8
 80122aa:	4651      	mov	r1, sl
 80122ac:	4628      	mov	r0, r5
 80122ae:	f7ff fdbd 	bl	8011e2c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80122b2:	e736      	b.n	8012122 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 80122b4:	683b      	ldr	r3, [r7, #0]
 80122b6:	e9cd 6000 	strd	r6, r0, [sp]
 80122ba:	aa02      	add	r2, sp, #8
 80122bc:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 80122c0:	4629      	mov	r1, r5
 80122c2:	4643      	mov	r3, r8
 80122c4:	4638      	mov	r0, r7
 80122c6:	47d8      	blx	fp
 80122c8:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80122cc:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80122d0:	4293      	cmp	r3, r2
 80122d2:	dd13      	ble.n	80122fc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x284>
 80122d4:	f9b4 0000 	ldrsh.w	r0, [r4]
 80122d8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80122dc:	f8ad 0018 	strh.w	r0, [sp, #24]
 80122e0:	1a9b      	subs	r3, r3, r2
 80122e2:	f8ad 201a 	strh.w	r2, [sp, #26]
 80122e6:	f8ad 101c 	strh.w	r1, [sp, #28]
 80122ea:	f8ad 301e 	strh.w	r3, [sp, #30]
 80122ee:	9600      	str	r6, [sp, #0]
 80122f0:	464b      	mov	r3, r9
 80122f2:	aa02      	add	r2, sp, #8
 80122f4:	4651      	mov	r1, sl
 80122f6:	4628      	mov	r0, r5
 80122f8:	f7ff fd98 	bl	8011e2c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 80122fc:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8012300:	f9b4 2000 	ldrsh.w	r2, [r4]
 8012304:	4293      	cmp	r3, r2
 8012306:	dd13      	ble.n	8012330 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2b8>
 8012308:	1a9b      	subs	r3, r3, r2
 801230a:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801230e:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8012312:	f8ad 2018 	strh.w	r2, [sp, #24]
 8012316:	f8ad 001a 	strh.w	r0, [sp, #26]
 801231a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801231e:	f8ad 101e 	strh.w	r1, [sp, #30]
 8012322:	9600      	str	r6, [sp, #0]
 8012324:	464b      	mov	r3, r9
 8012326:	aa02      	add	r2, sp, #8
 8012328:	4651      	mov	r1, sl
 801232a:	4628      	mov	r0, r5
 801232c:	f7ff fd7e 	bl	8011e2c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8012330:	88a2      	ldrh	r2, [r4, #4]
 8012332:	8823      	ldrh	r3, [r4, #0]
 8012334:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8012338:	4413      	add	r3, r2
 801233a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801233e:	440a      	add	r2, r1
 8012340:	b29b      	uxth	r3, r3
 8012342:	b292      	uxth	r2, r2
 8012344:	b211      	sxth	r1, r2
 8012346:	b218      	sxth	r0, r3
 8012348:	4288      	cmp	r0, r1
 801234a:	dd13      	ble.n	8012374 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2fc>
 801234c:	1a9b      	subs	r3, r3, r2
 801234e:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8012352:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 8012356:	f8ad 1018 	strh.w	r1, [sp, #24]
 801235a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801235e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8012362:	9600      	str	r6, [sp, #0]
 8012364:	464b      	mov	r3, r9
 8012366:	aa02      	add	r2, sp, #8
 8012368:	4651      	mov	r1, sl
 801236a:	4628      	mov	r0, r5
 801236c:	f8ad 701a 	strh.w	r7, [sp, #26]
 8012370:	f7ff fd5c 	bl	8011e2c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8012374:	88e2      	ldrh	r2, [r4, #6]
 8012376:	8863      	ldrh	r3, [r4, #2]
 8012378:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801237c:	4413      	add	r3, r2
 801237e:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8012382:	440a      	add	r2, r1
 8012384:	b29b      	uxth	r3, r3
 8012386:	b292      	uxth	r2, r2
 8012388:	b211      	sxth	r1, r2
 801238a:	b218      	sxth	r0, r3
 801238c:	4288      	cmp	r0, r1
 801238e:	f77f aec8 	ble.w	8012122 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 8012392:	f9b4 7000 	ldrsh.w	r7, [r4]
 8012396:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801239a:	f8ad 7018 	strh.w	r7, [sp, #24]
 801239e:	1a9b      	subs	r3, r3, r2
 80123a0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80123a4:	f8ad 101a 	strh.w	r1, [sp, #26]
 80123a8:	f8ad 001c 	strh.w	r0, [sp, #28]
 80123ac:	9600      	str	r6, [sp, #0]
 80123ae:	464b      	mov	r3, r9
 80123b0:	e77a      	b.n	80122a8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x230>
 80123b2:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80123b6:	2800      	cmp	r0, #0
 80123b8:	f43f aeb3 	beq.w	8012122 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 80123bc:	6803      	ldr	r3, [r0, #0]
 80123be:	9600      	str	r6, [sp, #0]
 80123c0:	68de      	ldr	r6, [r3, #12]
 80123c2:	4623      	mov	r3, r4
 80123c4:	aa02      	add	r2, sp, #8
 80123c6:	4629      	mov	r1, r5
 80123c8:	47b0      	blx	r6
 80123ca:	e6aa      	b.n	8012122 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 80123cc:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80123d0:	2800      	cmp	r0, #0
 80123d2:	f43f aea6 	beq.w	8012122 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xaa>
 80123d6:	6803      	ldr	r3, [r0, #0]
 80123d8:	9600      	str	r6, [sp, #0]
 80123da:	689e      	ldr	r6, [r3, #8]
 80123dc:	e7f1      	b.n	80123c2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x34a>
 80123de:	bf00      	nop
 80123e0:	20012658 	.word	0x20012658

080123e4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 80123e4:	b180      	cbz	r0, 8012408 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 80123e6:	2903      	cmp	r1, #3
 80123e8:	d81c      	bhi.n	8012424 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 80123ea:	e8df f001 	tbb	[pc, r1]
 80123ee:	1d02      	.short	0x1d02
 80123f0:	1f08      	.short	0x1f08
 80123f2:	4b10      	ldr	r3, [pc, #64]	@ (8012434 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 80123f4:	8818      	ldrh	r0, [r3, #0]
 80123f6:	f3c0 000e 	ubfx	r0, r0, #0, #15
 80123fa:	4240      	negs	r0, r0
 80123fc:	4770      	bx	lr
 80123fe:	4b0d      	ldr	r3, [pc, #52]	@ (8012434 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 8012400:	8818      	ldrh	r0, [r3, #0]
 8012402:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8012406:	4770      	bx	lr
 8012408:	2903      	cmp	r1, #3
 801240a:	d80b      	bhi.n	8012424 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801240c:	a301      	add	r3, pc, #4	@ (adr r3, 8012414 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 801240e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8012412:	bf00      	nop
 8012414:	08012429 	.word	0x08012429
 8012418:	080123ff 	.word	0x080123ff
 801241c:	0801242d 	.word	0x0801242d
 8012420:	080123f3 	.word	0x080123f3
 8012424:	2000      	movs	r0, #0
 8012426:	4770      	bx	lr
 8012428:	2001      	movs	r0, #1
 801242a:	4770      	bx	lr
 801242c:	f04f 30ff 	mov.w	r0, #4294967295
 8012430:	4770      	bx	lr
 8012432:	bf00      	nop
 8012434:	20012652 	.word	0x20012652

08012438 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8012438:	b180      	cbz	r0, 801245c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 801243a:	2903      	cmp	r1, #3
 801243c:	d81c      	bhi.n	8012478 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801243e:	e8df f001 	tbb	[pc, r1]
 8012442:	021d      	.short	0x021d
 8012444:	071f      	.short	0x071f
 8012446:	4b10      	ldr	r3, [pc, #64]	@ (8012488 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8012448:	8818      	ldrh	r0, [r3, #0]
 801244a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801244e:	4770      	bx	lr
 8012450:	4b0d      	ldr	r3, [pc, #52]	@ (8012488 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 8012452:	8818      	ldrh	r0, [r3, #0]
 8012454:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8012458:	4240      	negs	r0, r0
 801245a:	4770      	bx	lr
 801245c:	2903      	cmp	r1, #3
 801245e:	d80b      	bhi.n	8012478 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 8012460:	a301      	add	r3, pc, #4	@ (adr r3, 8012468 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 8012462:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8012466:	bf00      	nop
 8012468:	08012447 	.word	0x08012447
 801246c:	08012481 	.word	0x08012481
 8012470:	08012451 	.word	0x08012451
 8012474:	0801247d 	.word	0x0801247d
 8012478:	2000      	movs	r0, #0
 801247a:	4770      	bx	lr
 801247c:	2001      	movs	r0, #1
 801247e:	4770      	bx	lr
 8012480:	f04f 30ff 	mov.w	r0, #4294967295
 8012484:	4770      	bx	lr
 8012486:	bf00      	nop
 8012488:	20012652 	.word	0x20012652

0801248c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801248c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012490:	b099      	sub	sp, #100	@ 0x64
 8012492:	910b      	str	r1, [sp, #44]	@ 0x2c
 8012494:	a914      	add	r1, sp, #80	@ 0x50
 8012496:	e881 000c 	stmia.w	r1, {r2, r3}
 801249a:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	@ 0x98
 801249e:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	@ 0x8c
 80124a2:	f891 900d 	ldrb.w	r9, [r1, #13]
 80124a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80124a8:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 80124ac:	9310      	str	r3, [sp, #64]	@ 0x40
 80124ae:	ea4f 1749 	mov.w	r7, r9, lsl #5
 80124b2:	f89d 30b0 	ldrb.w	r3, [sp, #176]	@ 0xb0
 80124b6:	930c      	str	r3, [sp, #48]	@ 0x30
 80124b8:	f407 7380 	and.w	r3, r7, #256	@ 0x100
 80124bc:	798f      	ldrb	r7, [r1, #6]
 80124be:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	@ 0x88
 80124c2:	f8bd 5090 	ldrh.w	r5, [sp, #144]	@ 0x90
 80124c6:	f8bd 6094 	ldrh.w	r6, [sp, #148]	@ 0x94
 80124ca:	f89d 80ac 	ldrb.w	r8, [sp, #172]	@ 0xac
 80124ce:	f89d a0b4 	ldrb.w	sl, [sp, #180]	@ 0xb4
 80124d2:	431f      	orrs	r7, r3
 80124d4:	f000 8195 	beq.w	8012802 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80124d8:	ea4f 1909 	mov.w	r9, r9, lsl #4
 80124dc:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 80124e0:	f891 9007 	ldrb.w	r9, [r1, #7]
 80124e4:	ea59 0903 	orrs.w	r9, r9, r3
 80124e8:	f000 818b 	beq.w	8012802 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80124ec:	f991 3009 	ldrsb.w	r3, [r1, #9]
 80124f0:	b29b      	uxth	r3, r3
 80124f2:	2d00      	cmp	r5, #0
 80124f4:	f000 812e 	beq.w	8012754 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 80124f8:	1aed      	subs	r5, r5, r3
 80124fa:	b2ad      	uxth	r5, r5
 80124fc:	042b      	lsls	r3, r5, #16
 80124fe:	d502      	bpl.n	8012506 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 8012500:	1b64      	subs	r4, r4, r5
 8012502:	b224      	sxth	r4, r4
 8012504:	2500      	movs	r5, #0
 8012506:	f9b2 1000 	ldrsh.w	r1, [r2]
 801250a:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 801250e:	428c      	cmp	r4, r1
 8012510:	b28b      	uxth	r3, r1
 8012512:	bfbf      	itttt	lt
 8012514:	18ed      	addlt	r5, r5, r3
 8012516:	1b2c      	sublt	r4, r5, r4
 8012518:	b2a5      	uxthlt	r5, r4
 801251a:	460c      	movlt	r4, r1
 801251c:	8891      	ldrh	r1, [r2, #4]
 801251e:	440b      	add	r3, r1
 8012520:	b21b      	sxth	r3, r3
 8012522:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012524:	88d3      	ldrh	r3, [r2, #6]
 8012526:	8852      	ldrh	r2, [r2, #2]
 8012528:	4413      	add	r3, r2
 801252a:	b21b      	sxth	r3, r3
 801252c:	930d      	str	r3, [sp, #52]	@ 0x34
 801252e:	4bbe      	ldr	r3, [pc, #760]	@ (8012828 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 8012530:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012532:	f893 b000 	ldrb.w	fp, [r3]
 8012536:	f10b 3cff 	add.w	ip, fp, #4294967295
 801253a:	f1dc 0300 	rsbs	r3, ip, #0
 801253e:	eb43 030c 	adc.w	r3, r3, ip
 8012542:	930e      	str	r3, [sp, #56]	@ 0x38
 8012544:	4621      	mov	r1, r4
 8012546:	4653      	mov	r3, sl
 8012548:	a814      	add	r0, sp, #80	@ 0x50
 801254a:	f7fa f858 	bl	800c5fe <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801254e:	4621      	mov	r1, r4
 8012550:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 8012554:	4653      	mov	r3, sl
 8012556:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012558:	a814      	add	r0, sp, #80	@ 0x50
 801255a:	f7fa f86d 	bl	800c638 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801255e:	a918      	add	r1, sp, #96	@ 0x60
 8012560:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8012564:	a817      	add	r0, sp, #92	@ 0x5c
 8012566:	f7fa f993 	bl	800c890 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801256a:	f1ba 0f00 	cmp.w	sl, #0
 801256e:	f040 80f4 	bne.w	801275a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 8012572:	f1bb 0f01 	cmp.w	fp, #1
 8012576:	f040 80f8 	bne.w	801276a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 801257a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801257c:	2b00      	cmp	r3, #0
 801257e:	f040 8145 	bne.w	801280c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 8012582:	b2ba      	uxth	r2, r7
 8012584:	b905      	cbnz	r5, 8012588 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 8012586:	b16e      	cbz	r6, 80125a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 8012588:	fb06 5302 	mla	r3, r6, r2, r5
 801258c:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 801258e:	fb08 f303 	mul.w	r3, r8, r3
 8012592:	4631      	mov	r1, r6
 8012594:	f003 0607 	and.w	r6, r3, #7
 8012598:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 801259c:	9328      	str	r3, [sp, #160]	@ 0xa0
 801259e:	eba9 0301 	sub.w	r3, r9, r1
 80125a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80125a4:	4651      	mov	r1, sl
 80125a6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80125a8:	f7ff ff1c 	bl	80123e4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 80125ac:	4681      	mov	r9, r0
 80125ae:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80125b0:	f7ff ff42 	bl	8012438 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 80125b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80125b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80125b8:	eba3 0a01 	sub.w	sl, r3, r1
 80125bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80125be:	459a      	cmp	sl, r3
 80125c0:	bfa8      	it	ge
 80125c2:	469a      	movge	sl, r3
 80125c4:	f1ba 0f00 	cmp.w	sl, #0
 80125c8:	4683      	mov	fp, r0
 80125ca:	f340 811a 	ble.w	8012802 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80125ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80125d0:	1b64      	subs	r4, r4, r5
 80125d2:	1b1c      	subs	r4, r3, r4
 80125d4:	42bc      	cmp	r4, r7
 80125d6:	bfd4      	ite	le
 80125d8:	ebc5 0504 	rsble	r5, r5, r4
 80125dc:	ebc5 0507 	rsbgt	r5, r5, r7
 80125e0:	2d00      	cmp	r5, #0
 80125e2:	f340 810e 	ble.w	8012802 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 80125e6:	1b52      	subs	r2, r2, r5
 80125e8:	fb08 f302 	mul.w	r3, r8, r2
 80125ec:	930f      	str	r3, [sp, #60]	@ 0x3c
 80125ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	f040 8116 	bne.w	8012822 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 80125f6:	4b8d      	ldr	r3, [pc, #564]	@ (801282c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 80125f8:	6818      	ldr	r0, [r3, #0]
 80125fa:	6803      	ldr	r3, [r0, #0]
 80125fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80125fe:	4798      	blx	r3
 8012600:	2301      	movs	r3, #1
 8012602:	fa03 f308 	lsl.w	r3, r3, r8
 8012606:	4a8a      	ldr	r2, [pc, #552]	@ (8012830 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 8012608:	3b01      	subs	r3, #1
 801260a:	b2db      	uxtb	r3, r3
 801260c:	8811      	ldrh	r1, [r2, #0]
 801260e:	930e      	str	r3, [sp, #56]	@ 0x38
 8012610:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	@ 0x5c
 8012614:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	@ 0x5e
 8012618:	fb01 2303 	mla	r3, r1, r3, r2
 801261c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8012620:	930a      	str	r3, [sp, #40]	@ 0x28
 8012622:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8012624:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8012628:	9313      	str	r3, [sp, #76]	@ 0x4c
 801262a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801262c:	0a19      	lsrs	r1, r3, #8
 801262e:	b2cb      	uxtb	r3, r1
 8012630:	9312      	str	r3, [sp, #72]	@ 0x48
 8012632:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8012634:	b2db      	uxtb	r3, r3
 8012636:	9311      	str	r3, [sp, #68]	@ 0x44
 8012638:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801263a:	095a      	lsrs	r2, r3, #5
 801263c:	4b7d      	ldr	r3, [pc, #500]	@ (8012834 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801263e:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8012642:	400b      	ands	r3, r1
 8012644:	4313      	orrs	r3, r2
 8012646:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8012648:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801264c:	4313      	orrs	r3, r2
 801264e:	b29b      	uxth	r3, r3
 8012650:	9310      	str	r3, [sp, #64]	@ 0x40
 8012652:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8012654:	781a      	ldrb	r2, [r3, #0]
 8012656:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801265a:	4132      	asrs	r2, r6
 801265c:	fb05 b919 	mls	r9, r5, r9, fp
 8012660:	fb03 fb05 	mul.w	fp, r3, r5
 8012664:	b2d2      	uxtb	r2, r2
 8012666:	930d      	str	r3, [sp, #52]	@ 0x34
 8012668:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801266c:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8012670:	f0c0 80f5 	bcc.w	801285e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 8012674:	f8dd c028 	ldr.w	ip, [sp, #40]	@ 0x28
 8012678:	46ae      	mov	lr, r5
 801267a:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801267e:	f0c0 80dd 	bcc.w	801283c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 8012682:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012684:	4013      	ands	r3, r2
 8012686:	d055      	beq.n	8012734 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8012688:	20ff      	movs	r0, #255	@ 0xff
 801268a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801268c:	fb90 f1f1 	sdiv	r1, r0, r1
 8012690:	434b      	muls	r3, r1
 8012692:	2bfe      	cmp	r3, #254	@ 0xfe
 8012694:	dd03      	ble.n	801269e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 8012696:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012698:	4281      	cmp	r1, r0
 801269a:	f000 80cd 	beq.w	8012838 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 801269e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80126a0:	f8bc 4000 	ldrh.w	r4, [ip]
 80126a4:	fb11 f303 	smulbb	r3, r1, r3
 80126a8:	b29b      	uxth	r3, r3
 80126aa:	1c59      	adds	r1, r3, #1
 80126ac:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80126b0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80126b4:	b29f      	uxth	r7, r3
 80126b6:	43db      	mvns	r3, r3
 80126b8:	b2db      	uxtb	r3, r3
 80126ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80126bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80126be:	1220      	asrs	r0, r4, #8
 80126c0:	fb13 f907 	smulbb	r9, r3, r7
 80126c4:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80126c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80126ca:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 80126ce:	fb00 9003 	mla	r0, r0, r3, r9
 80126d2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80126d4:	10e1      	asrs	r1, r4, #3
 80126d6:	fb13 f907 	smulbb	r9, r3, r7
 80126da:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
 80126de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80126e0:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 80126e4:	fb01 9103 	mla	r1, r1, r3, r9
 80126e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80126ea:	00e4      	lsls	r4, r4, #3
 80126ec:	fb13 f707 	smulbb	r7, r3, r7
 80126f0:	b2e4      	uxtb	r4, r4
 80126f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80126f4:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 80126f8:	fb04 7403 	mla	r4, r4, r3, r7
 80126fc:	b280      	uxth	r0, r0
 80126fe:	b2a4      	uxth	r4, r4
 8012700:	1c43      	adds	r3, r0, #1
 8012702:	f104 0901 	add.w	r9, r4, #1
 8012706:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801270a:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801270e:	b289      	uxth	r1, r1
 8012710:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 8012714:	f400 4078 	and.w	r0, r0, #63488	@ 0xf800
 8012718:	ea49 0000 	orr.w	r0, r9, r0
 801271c:	f101 0901 	add.w	r9, r1, #1
 8012720:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 8012724:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8012728:	f409 69fc 	and.w	r9, r9, #2016	@ 0x7e0
 801272c:	ea40 0009 	orr.w	r0, r0, r9
 8012730:	f8ac 0000 	strh.w	r0, [ip]
 8012734:	4446      	add	r6, r8
 8012736:	b2b6      	uxth	r6, r6
 8012738:	2e07      	cmp	r6, #7
 801273a:	bf81      	itttt	hi
 801273c:	9b28      	ldrhi	r3, [sp, #160]	@ 0xa0
 801273e:	785a      	ldrbhi	r2, [r3, #1]
 8012740:	3301      	addhi	r3, #1
 8012742:	9328      	strhi	r3, [sp, #160]	@ 0xa0
 8012744:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012746:	bf9a      	itte	ls
 8012748:	fa42 f208 	asrls.w	r2, r2, r8
 801274c:	b2d2      	uxtbls	r2, r2
 801274e:	2600      	movhi	r6, #0
 8012750:	449c      	add	ip, r3
 8012752:	e792      	b.n	801267a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 8012754:	441c      	add	r4, r3
 8012756:	b224      	sxth	r4, r4
 8012758:	e6d5      	b.n	8012506 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801275a:	f1ba 0f01 	cmp.w	sl, #1
 801275e:	f47f af0c 	bne.w	801257a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8012762:	f1bb 0f01 	cmp.w	fp, #1
 8012766:	f47f af08 	bne.w	801257a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801276a:	f8df b0c0 	ldr.w	fp, [pc, #192]	@ 801282c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 801276e:	f8db 0000 	ldr.w	r0, [fp]
 8012772:	6803      	ldr	r3, [r0, #0]
 8012774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012776:	4798      	blx	r3
 8012778:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 801277c:	465a      	mov	r2, fp
 801277e:	d006      	beq.n	801278e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 8012780:	f1b8 0f04 	cmp.w	r8, #4
 8012784:	d140      	bne.n	8012808 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 8012786:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012788:	3300      	adds	r3, #0
 801278a:	bf18      	it	ne
 801278c:	2301      	movne	r3, #1
 801278e:	0580      	lsls	r0, r0, #22
 8012790:	d56e      	bpl.n	8012870 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 8012792:	f1b8 0f08 	cmp.w	r8, #8
 8012796:	d16b      	bne.n	8012870 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 8012798:	2b00      	cmp	r3, #0
 801279a:	bf0c      	ite	eq
 801279c:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 80127a0:	f44f 7180 	movne.w	r1, #256	@ 0x100
 80127a4:	2d00      	cmp	r5, #0
 80127a6:	f47f aee8 	bne.w	801257a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80127aa:	2e00      	cmp	r6, #0
 80127ac:	f47f aee5 	bne.w	801257a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80127b0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80127b2:	19e3      	adds	r3, r4, r7
 80127b4:	4283      	cmp	r3, r0
 80127b6:	f73f aee0 	bgt.w	801257a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80127ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80127bc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80127be:	444b      	add	r3, r9
 80127c0:	4283      	cmp	r3, r0
 80127c2:	f73f aeda 	bgt.w	801257a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 80127c6:	6810      	ldr	r0, [r2, #0]
 80127c8:	f8bd 305e 	ldrh.w	r3, [sp, #94]	@ 0x5e
 80127cc:	6804      	ldr	r4, [r0, #0]
 80127ce:	f8bd 205c 	ldrh.w	r2, [sp, #92]	@ 0x5c
 80127d2:	b2bf      	uxth	r7, r7
 80127d4:	f1b8 0f08 	cmp.w	r8, #8
 80127d8:	f04f 0500 	mov.w	r5, #0
 80127dc:	bf18      	it	ne
 80127de:	3701      	addne	r7, #1
 80127e0:	e9cd 1505 	strd	r1, r5, [sp, #20]
 80127e4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80127e6:	9104      	str	r1, [sp, #16]
 80127e8:	bf18      	it	ne
 80127ea:	f027 0701 	bicne.w	r7, r7, #1
 80127ee:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 80127f0:	bf18      	it	ne
 80127f2:	b2bf      	uxthne	r7, r7
 80127f4:	e9cd 7102 	strd	r7, r1, [sp, #8]
 80127f8:	e9cd 7900 	strd	r7, r9, [sp]
 80127fc:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 80127fe:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 8012800:	47a0      	blx	r4
 8012802:	b019      	add	sp, #100	@ 0x64
 8012804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012808:	2300      	movs	r3, #0
 801280a:	e7c0      	b.n	801278e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801280c:	2208      	movs	r2, #8
 801280e:	fb92 f3f8 	sdiv	r3, r2, r8
 8012812:	1e5a      	subs	r2, r3, #1
 8012814:	443a      	add	r2, r7
 8012816:	fb92 f2f3 	sdiv	r2, r2, r3
 801281a:	fb12 f203 	smulbb	r2, r2, r3
 801281e:	b292      	uxth	r2, r2
 8012820:	e6b0      	b.n	8012584 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 8012822:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8012824:	e6ec      	b.n	8012600 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 8012826:	bf00      	nop
 8012828:	20012650 	.word	0x20012650
 801282c:	20012658 	.word	0x20012658
 8012830:	20012652 	.word	0x20012652
 8012834:	00fff800 	.word	0x00fff800
 8012838:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801283a:	e779      	b.n	8012730 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 801283c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801283e:	b153      	cbz	r3, 8012856 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 8012840:	441e      	add	r6, r3
 8012842:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8012844:	b2b6      	uxth	r6, r6
 8012846:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 801284a:	f006 0607 	and.w	r6, r6, #7
 801284e:	781a      	ldrb	r2, [r3, #0]
 8012850:	9328      	str	r3, [sp, #160]	@ 0xa0
 8012852:	4132      	asrs	r2, r6
 8012854:	b2d2      	uxtb	r2, r2
 8012856:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012858:	445b      	add	r3, fp
 801285a:	930a      	str	r3, [sp, #40]	@ 0x28
 801285c:	e706      	b.n	801266c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 801285e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012860:	2b00      	cmp	r3, #0
 8012862:	d1ce      	bne.n	8012802 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8012864:	4b05      	ldr	r3, [pc, #20]	@ (801287c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 8012866:	6818      	ldr	r0, [r3, #0]
 8012868:	6803      	ldr	r3, [r0, #0]
 801286a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801286c:	4798      	blx	r3
 801286e:	e7c8      	b.n	8012802 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 8012870:	2b00      	cmp	r3, #0
 8012872:	f43f ae82 	beq.w	801257a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 8012876:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801287a:	e793      	b.n	80127a4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 801287c:	20012658 	.word	0x20012658

08012880 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev>:
 8012880:	b538      	push	{r3, r4, r5, lr}
 8012882:	4c0b      	ldr	r4, [pc, #44]	@ (80128b0 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x30>)
 8012884:	7823      	ldrb	r3, [r4, #0]
 8012886:	f3bf 8f5b 	dmb	ish
 801288a:	07db      	lsls	r3, r3, #31
 801288c:	4605      	mov	r5, r0
 801288e:	d40b      	bmi.n	80128a8 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 8012890:	4620      	mov	r0, r4
 8012892:	f000 fd43 	bl	801331c <__cxa_guard_acquire>
 8012896:	b138      	cbz	r0, 80128a8 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x28>
 8012898:	4620      	mov	r0, r4
 801289a:	f000 fd4b 	bl	8013334 <__cxa_guard_release>
 801289e:	4a05      	ldr	r2, [pc, #20]	@ (80128b4 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x34>)
 80128a0:	4905      	ldr	r1, [pc, #20]	@ (80128b8 <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x38>)
 80128a2:	4806      	ldr	r0, [pc, #24]	@ (80128bc <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 80128a4:	f000 fd33 	bl	801330e <__aeabi_atexit>
 80128a8:	4b04      	ldr	r3, [pc, #16]	@ (80128bc <_ZN8touchgfx8LCD16bpp23enableDecompressorL8_L4Ev+0x3c>)
 80128aa:	67eb      	str	r3, [r5, #124]	@ 0x7c
 80128ac:	bd38      	pop	{r3, r4, r5, pc}
 80128ae:	bf00      	nop
 80128b0:	200126e4 	.word	0x200126e4
 80128b4:	20000000 	.word	0x20000000
 80128b8:	08010b39 	.word	0x08010b39
 80128bc:	20000088 	.word	0x20000088

080128c0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>:
 80128c0:	b570      	push	{r4, r5, r6, lr}
 80128c2:	1208      	asrs	r0, r1, #8
 80128c4:	b29e      	uxth	r6, r3
 80128c6:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80128ca:	1213      	asrs	r3, r2, #8
 80128cc:	f000 00f8 	and.w	r0, r0, #248	@ 0xf8
 80128d0:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80128d4:	fb13 f305 	smulbb	r3, r3, r5
 80128d8:	fb10 f006 	smulbb	r0, r0, r6
 80128dc:	4418      	add	r0, r3
 80128de:	10cc      	asrs	r4, r1, #3
 80128e0:	10d3      	asrs	r3, r2, #3
 80128e2:	f004 04fc 	and.w	r4, r4, #252	@ 0xfc
 80128e6:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 80128ea:	fb13 f305 	smulbb	r3, r3, r5
 80128ee:	fb14 f406 	smulbb	r4, r4, r6
 80128f2:	00c9      	lsls	r1, r1, #3
 80128f4:	00d2      	lsls	r2, r2, #3
 80128f6:	441c      	add	r4, r3
 80128f8:	b2d2      	uxtb	r2, r2
 80128fa:	b2cb      	uxtb	r3, r1
 80128fc:	fb12 f205 	smulbb	r2, r2, r5
 8012900:	b280      	uxth	r0, r0
 8012902:	fb13 f306 	smulbb	r3, r3, r6
 8012906:	4413      	add	r3, r2
 8012908:	1c42      	adds	r2, r0, #1
 801290a:	b29b      	uxth	r3, r3
 801290c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8012910:	f400 4278 	and.w	r2, r0, #63488	@ 0xf800
 8012914:	1c58      	adds	r0, r3, #1
 8012916:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801291a:	b2a4      	uxth	r4, r4
 801291c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8012920:	4310      	orrs	r0, r2
 8012922:	1c62      	adds	r2, r4, #1
 8012924:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8012928:	0964      	lsrs	r4, r4, #5
 801292a:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 801292e:	4320      	orrs	r0, r4
 8012930:	bd70      	pop	{r4, r5, r6, pc}
	...

08012934 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h>:
 8012934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012938:	b08f      	sub	sp, #60	@ 0x3c
 801293a:	461c      	mov	r4, r3
 801293c:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 8012940:	9004      	str	r0, [sp, #16]
 8012942:	460d      	mov	r5, r1
 8012944:	4616      	mov	r6, r2
 8012946:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8012948:	2f00      	cmp	r7, #0
 801294a:	f000 80f6 	beq.w	8012b3a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x206>
 801294e:	6820      	ldr	r0, [r4, #0]
 8012950:	6861      	ldr	r1, [r4, #4]
 8012952:	aa0a      	add	r2, sp, #40	@ 0x28
 8012954:	c203      	stmia	r2!, {r0, r1}
 8012956:	6818      	ldr	r0, [r3, #0]
 8012958:	6859      	ldr	r1, [r3, #4]
 801295a:	aa0c      	add	r2, sp, #48	@ 0x30
 801295c:	c203      	stmia	r2!, {r0, r1}
 801295e:	a80a      	add	r0, sp, #40	@ 0x28
 8012960:	f7f9 ffd8 	bl	800c914 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012964:	4621      	mov	r1, r4
 8012966:	a80c      	add	r0, sp, #48	@ 0x30
 8012968:	f7f9 fffc 	bl	800c964 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801296c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8012970:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 8012974:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8012978:	f002 0301 	and.w	r3, r2, #1
 801297c:	9306      	str	r3, [sp, #24]
 801297e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8012982:	f003 0101 	and.w	r1, r3, #1
 8012986:	9105      	str	r1, [sp, #20]
 8012988:	9805      	ldr	r0, [sp, #20]
 801298a:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801298e:	4403      	add	r3, r0
 8012990:	fb01 2303 	mla	r3, r1, r3, r2
 8012994:	f04f 0802 	mov.w	r8, #2
 8012998:	fb93 f3f8 	sdiv	r3, r3, r8
 801299c:	441d      	add	r5, r3
 801299e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80129a2:	441a      	add	r2, r3
 80129a4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 80129a8:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 80129ac:	4419      	add	r1, r3
 80129ae:	4b64      	ldr	r3, [pc, #400]	@ (8012b40 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 80129b0:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 80129b4:	6818      	ldr	r0, [r3, #0]
 80129b6:	6803      	ldr	r3, [r0, #0]
 80129b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80129ba:	4798      	blx	r3
 80129bc:	4a61      	ldr	r2, [pc, #388]	@ (8012b44 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x210>)
 80129be:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 80129c2:	8813      	ldrh	r3, [r2, #0]
 80129c4:	f9bd a030 	ldrsh.w	sl, [sp, #48]	@ 0x30
 80129c8:	2fff      	cmp	r7, #255	@ 0xff
 80129ca:	fb03 a404 	mla	r4, r3, r4, sl
 80129ce:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80129d2:	f106 0604 	add.w	r6, r6, #4
 80129d6:	4611      	mov	r1, r2
 80129d8:	fb03 fb0b 	mul.w	fp, r3, fp
 80129dc:	d06b      	beq.n	8012ab6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x182>
 80129de:	f1c7 03ff 	rsb	r3, r7, #255	@ 0xff
 80129e2:	9303      	str	r3, [sp, #12]
 80129e4:	eb04 034b 	add.w	r3, r4, fp, lsl #1
 80129e8:	e9cd 3207 	strd	r3, r2, [sp, #28]
 80129ec:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 80129f0:	9b07      	ldr	r3, [sp, #28]
 80129f2:	42a3      	cmp	r3, r4
 80129f4:	f240 809c 	bls.w	8012b30 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 80129f8:	9b06      	ldr	r3, [sp, #24]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d039      	beq.n	8012a72 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x13e>
 80129fe:	782b      	ldrb	r3, [r5, #0]
 8012a00:	8822      	ldrh	r2, [r4, #0]
 8012a02:	9804      	ldr	r0, [sp, #16]
 8012a04:	f003 030f 	and.w	r3, r3, #15
 8012a08:	f105 0801 	add.w	r8, r5, #1
 8012a0c:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8012a10:	9b03      	ldr	r3, [sp, #12]
 8012a12:	9300      	str	r3, [sp, #0]
 8012a14:	463b      	mov	r3, r7
 8012a16:	f7ff ff53 	bl	80128c0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8012a1a:	f824 0b02 	strh.w	r0, [r4], #2
 8012a1e:	f109 3bff 	add.w	fp, r9, #4294967295
 8012a22:	f1bb 0f01 	cmp.w	fp, #1
 8012a26:	46a2      	mov	sl, r4
 8012a28:	f104 0404 	add.w	r4, r4, #4
 8012a2c:	dd24      	ble.n	8012a78 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x144>
 8012a2e:	f898 3000 	ldrb.w	r3, [r8]
 8012a32:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8012a36:	9804      	ldr	r0, [sp, #16]
 8012a38:	091b      	lsrs	r3, r3, #4
 8012a3a:	f1ab 0b02 	sub.w	fp, fp, #2
 8012a3e:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8012a42:	9b03      	ldr	r3, [sp, #12]
 8012a44:	9300      	str	r3, [sp, #0]
 8012a46:	463b      	mov	r3, r7
 8012a48:	f7ff ff3a 	bl	80128c0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8012a4c:	f824 0c04 	strh.w	r0, [r4, #-4]
 8012a50:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012a54:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 8012a58:	9804      	ldr	r0, [sp, #16]
 8012a5a:	f003 030f 	and.w	r3, r3, #15
 8012a5e:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8012a62:	9b03      	ldr	r3, [sp, #12]
 8012a64:	9300      	str	r3, [sp, #0]
 8012a66:	463b      	mov	r3, r7
 8012a68:	f7ff ff2a 	bl	80128c0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8012a6c:	f824 0c02 	strh.w	r0, [r4, #-2]
 8012a70:	e7d7      	b.n	8012a22 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xee>
 8012a72:	46a8      	mov	r8, r5
 8012a74:	46cb      	mov	fp, r9
 8012a76:	e7d4      	b.n	8012a22 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xee>
 8012a78:	d10e      	bne.n	8012a98 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x164>
 8012a7a:	f898 3000 	ldrb.w	r3, [r8]
 8012a7e:	f8ba 2000 	ldrh.w	r2, [sl]
 8012a82:	9804      	ldr	r0, [sp, #16]
 8012a84:	091b      	lsrs	r3, r3, #4
 8012a86:	f836 1013 	ldrh.w	r1, [r6, r3, lsl #1]
 8012a8a:	9b03      	ldr	r3, [sp, #12]
 8012a8c:	9300      	str	r3, [sp, #0]
 8012a8e:	463b      	mov	r3, r7
 8012a90:	f7ff ff16 	bl	80128c0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB565Ettii>
 8012a94:	f82a 0b02 	strh.w	r0, [sl], #2
 8012a98:	9b08      	ldr	r3, [sp, #32]
 8012a9a:	9a05      	ldr	r2, [sp, #20]
 8012a9c:	881c      	ldrh	r4, [r3, #0]
 8012a9e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8012aa2:	eba4 0409 	sub.w	r4, r4, r9
 8012aa6:	4413      	add	r3, r2
 8012aa8:	eb0a 0444 	add.w	r4, sl, r4, lsl #1
 8012aac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012aae:	fb93 f3f2 	sdiv	r3, r3, r2
 8012ab2:	441d      	add	r5, r3
 8012ab4:	e79c      	b.n	80129f0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0xbc>
 8012ab6:	eb04 0b4b 	add.w	fp, r4, fp, lsl #1
 8012aba:	45a3      	cmp	fp, r4
 8012abc:	d938      	bls.n	8012b30 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1fc>
 8012abe:	9b06      	ldr	r3, [sp, #24]
 8012ac0:	b1f3      	cbz	r3, 8012b00 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1cc>
 8012ac2:	782b      	ldrb	r3, [r5, #0]
 8012ac4:	f003 030f 	and.w	r3, r3, #15
 8012ac8:	1c6a      	adds	r2, r5, #1
 8012aca:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8012ace:	8023      	strh	r3, [r4, #0]
 8012ad0:	f109 30ff 	add.w	r0, r9, #4294967295
 8012ad4:	3402      	adds	r4, #2
 8012ad6:	2801      	cmp	r0, #1
 8012ad8:	4623      	mov	r3, r4
 8012ada:	f104 0404 	add.w	r4, r4, #4
 8012ade:	dd12      	ble.n	8012b06 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1d2>
 8012ae0:	7813      	ldrb	r3, [r2, #0]
 8012ae2:	091b      	lsrs	r3, r3, #4
 8012ae4:	3802      	subs	r0, #2
 8012ae6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8012aea:	f824 3c04 	strh.w	r3, [r4, #-4]
 8012aee:	f812 3b01 	ldrb.w	r3, [r2], #1
 8012af2:	f003 030f 	and.w	r3, r3, #15
 8012af6:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 8012afa:	f824 3c02 	strh.w	r3, [r4, #-2]
 8012afe:	e7ea      	b.n	8012ad6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 8012b00:	462a      	mov	r2, r5
 8012b02:	4648      	mov	r0, r9
 8012b04:	e7e7      	b.n	8012ad6 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1a2>
 8012b06:	d106      	bne.n	8012b16 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x1e2>
 8012b08:	7812      	ldrb	r2, [r2, #0]
 8012b0a:	0912      	lsrs	r2, r2, #4
 8012b0c:	3302      	adds	r3, #2
 8012b0e:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 8012b12:	f823 2c02 	strh.w	r2, [r3, #-2]
 8012b16:	880c      	ldrh	r4, [r1, #0]
 8012b18:	9a05      	ldr	r2, [sp, #20]
 8012b1a:	eba4 0409 	sub.w	r4, r4, r9
 8012b1e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8012b22:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8012b26:	4413      	add	r3, r2
 8012b28:	fb93 f3f8 	sdiv	r3, r3, r8
 8012b2c:	441d      	add	r5, r3
 8012b2e:	e7c4      	b.n	8012aba <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x186>
 8012b30:	4b03      	ldr	r3, [pc, #12]	@ (8012b40 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB565EPKhS3_RKNS_4RectES6_h+0x20c>)
 8012b32:	6818      	ldr	r0, [r3, #0]
 8012b34:	6803      	ldr	r3, [r0, #0]
 8012b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b38:	4798      	blx	r3
 8012b3a:	b00f      	add	sp, #60	@ 0x3c
 8012b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b40:	20012658 	.word	0x20012658
 8012b44:	20012652 	.word	0x20012652

08012b48 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>:
 8012b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b4a:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8012b4e:	2dff      	cmp	r5, #255	@ 0xff
 8012b50:	ea4f 2711 	mov.w	r7, r1, lsr #8
 8012b54:	d10c      	bne.n	8012b70 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x28>
 8012b56:	2bff      	cmp	r3, #255	@ 0xff
 8012b58:	d10a      	bne.n	8012b70 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x28>
 8012b5a:	4b25      	ldr	r3, [pc, #148]	@ (8012bf0 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0xa8>)
 8012b5c:	0948      	lsrs	r0, r1, #5
 8012b5e:	f400 60fc 	and.w	r0, r0, #2016	@ 0x7e0
 8012b62:	403b      	ands	r3, r7
 8012b64:	4318      	orrs	r0, r3
 8012b66:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8012b6a:	4308      	orrs	r0, r1
 8012b6c:	b280      	uxth	r0, r0
 8012b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b70:	fb15 f503 	smulbb	r5, r5, r3
 8012b74:	b2ab      	uxth	r3, r5
 8012b76:	1c5d      	adds	r5, r3, #1
 8012b78:	eb05 2513 	add.w	r5, r5, r3, lsr #8
 8012b7c:	1214      	asrs	r4, r2, #8
 8012b7e:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8012b82:	fa1f fc85 	uxth.w	ip, r5
 8012b86:	10d6      	asrs	r6, r2, #3
 8012b88:	00d0      	lsls	r0, r2, #3
 8012b8a:	43ed      	mvns	r5, r5
 8012b8c:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8012b90:	f3c1 4207 	ubfx	r2, r1, #16, #8
 8012b94:	b2eb      	uxtb	r3, r5
 8012b96:	b2c0      	uxtb	r0, r0
 8012b98:	fb12 f20c 	smulbb	r2, r2, ip
 8012b9c:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8012ba0:	fb04 2403 	mla	r4, r4, r3, r2
 8012ba4:	ea40 1250 	orr.w	r2, r0, r0, lsr #5
 8012ba8:	b2c8      	uxtb	r0, r1
 8012baa:	f006 06fc 	and.w	r6, r6, #252	@ 0xfc
 8012bae:	b2fd      	uxtb	r5, r7
 8012bb0:	fb10 f00c 	smulbb	r0, r0, ip
 8012bb4:	b2a4      	uxth	r4, r4
 8012bb6:	fb02 0003 	mla	r0, r2, r3, r0
 8012bba:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8012bbe:	fb15 f50c 	smulbb	r5, r5, ip
 8012bc2:	fb06 5503 	mla	r5, r6, r3, r5
 8012bc6:	b283      	uxth	r3, r0
 8012bc8:	1c60      	adds	r0, r4, #1
 8012bca:	b2ad      	uxth	r5, r5
 8012bcc:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8012bd0:	1c58      	adds	r0, r3, #1
 8012bd2:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8012bd6:	1c6b      	adds	r3, r5, #1
 8012bd8:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8012bdc:	f404 4478 	and.w	r4, r4, #63488	@ 0xf800
 8012be0:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8012be4:	096d      	lsrs	r5, r5, #5
 8012be6:	4320      	orrs	r0, r4
 8012be8:	f405 65fc 	and.w	r5, r5, #2016	@ 0x7e0
 8012bec:	4328      	orrs	r0, r5
 8012bee:	e7be      	b.n	8012b6e <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih+0x26>
 8012bf0:	00fff800 	.word	0x00fff800

08012bf4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8012bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bf8:	461c      	mov	r4, r3
 8012bfa:	b08d      	sub	sp, #52	@ 0x34
 8012bfc:	460d      	mov	r5, r1
 8012bfe:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012c00:	6861      	ldr	r1, [r4, #4]
 8012c02:	f89d 905c 	ldrb.w	r9, [sp, #92]	@ 0x5c
 8012c06:	4680      	mov	r8, r0
 8012c08:	6820      	ldr	r0, [r4, #0]
 8012c0a:	4616      	mov	r6, r2
 8012c0c:	aa08      	add	r2, sp, #32
 8012c0e:	c203      	stmia	r2!, {r0, r1}
 8012c10:	6818      	ldr	r0, [r3, #0]
 8012c12:	6859      	ldr	r1, [r3, #4]
 8012c14:	aa0a      	add	r2, sp, #40	@ 0x28
 8012c16:	c203      	stmia	r2!, {r0, r1}
 8012c18:	a808      	add	r0, sp, #32
 8012c1a:	f7f9 fe7b 	bl	800c914 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012c1e:	4621      	mov	r1, r4
 8012c20:	a80a      	add	r0, sp, #40	@ 0x28
 8012c22:	f7f9 fe9f 	bl	800c964 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012c26:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	@ 0x28
 8012c2a:	f9bd 702e 	ldrsh.w	r7, [sp, #46]	@ 0x2e
 8012c2e:	f9bd b02c 	ldrsh.w	fp, [sp, #44]	@ 0x2c
 8012c32:	f002 0301 	and.w	r3, r2, #1
 8012c36:	9303      	str	r3, [sp, #12]
 8012c38:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8012c3c:	f003 0101 	and.w	r1, r3, #1
 8012c40:	9102      	str	r1, [sp, #8]
 8012c42:	9802      	ldr	r0, [sp, #8]
 8012c44:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8012c48:	4403      	add	r3, r0
 8012c4a:	fb01 2303 	mla	r3, r1, r3, r2
 8012c4e:	f04f 0a02 	mov.w	sl, #2
 8012c52:	fb93 f3fa 	sdiv	r3, r3, sl
 8012c56:	441d      	add	r5, r3
 8012c58:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8012c5c:	441a      	add	r2, r3
 8012c5e:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8012c62:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8012c66:	4a3f      	ldr	r2, [pc, #252]	@ (8012d64 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x170>)
 8012c68:	9205      	str	r2, [sp, #20]
 8012c6a:	4419      	add	r1, r3
 8012c6c:	6810      	ldr	r0, [r2, #0]
 8012c6e:	f8ad 102a 	strh.w	r1, [sp, #42]	@ 0x2a
 8012c72:	6803      	ldr	r3, [r0, #0]
 8012c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012c76:	4798      	blx	r3
 8012c78:	4b3b      	ldr	r3, [pc, #236]	@ (8012d68 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x174>)
 8012c7a:	f9bd 402a 	ldrsh.w	r4, [sp, #42]	@ 0x2a
 8012c7e:	8819      	ldrh	r1, [r3, #0]
 8012c80:	f9bd c028 	ldrsh.w	ip, [sp, #40]	@ 0x28
 8012c84:	fb01 c404 	mla	r4, r1, r4, ip
 8012c88:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8012c8c:	434f      	muls	r7, r1
 8012c8e:	e9cd 3a06 	strd	r3, sl, [sp, #24]
 8012c92:	eb04 0247 	add.w	r2, r4, r7, lsl #1
 8012c96:	3604      	adds	r6, #4
 8012c98:	9204      	str	r2, [sp, #16]
 8012c9a:	9b04      	ldr	r3, [sp, #16]
 8012c9c:	429c      	cmp	r4, r3
 8012c9e:	d258      	bcs.n	8012d52 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x15e>
 8012ca0:	9b03      	ldr	r3, [sp, #12]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d034      	beq.n	8012d10 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 8012ca6:	782b      	ldrb	r3, [r5, #0]
 8012ca8:	f003 030f 	and.w	r3, r3, #15
 8012cac:	1c6f      	adds	r7, r5, #1
 8012cae:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8012cb2:	0e0b      	lsrs	r3, r1, #24
 8012cb4:	d006      	beq.n	8012cc4 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd0>
 8012cb6:	8822      	ldrh	r2, [r4, #0]
 8012cb8:	9300      	str	r3, [sp, #0]
 8012cba:	4640      	mov	r0, r8
 8012cbc:	464b      	mov	r3, r9
 8012cbe:	f7ff ff43 	bl	8012b48 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8012cc2:	8020      	strh	r0, [r4, #0]
 8012cc4:	3402      	adds	r4, #2
 8012cc6:	f10b 3aff 	add.w	sl, fp, #4294967295
 8012cca:	f1ba 0f01 	cmp.w	sl, #1
 8012cce:	dd22      	ble.n	8012d16 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x122>
 8012cd0:	783b      	ldrb	r3, [r7, #0]
 8012cd2:	091b      	lsrs	r3, r3, #4
 8012cd4:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8012cd8:	0e0b      	lsrs	r3, r1, #24
 8012cda:	d006      	beq.n	8012cea <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf6>
 8012cdc:	8822      	ldrh	r2, [r4, #0]
 8012cde:	9300      	str	r3, [sp, #0]
 8012ce0:	4640      	mov	r0, r8
 8012ce2:	464b      	mov	r3, r9
 8012ce4:	f7ff ff30 	bl	8012b48 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8012ce8:	8020      	strh	r0, [r4, #0]
 8012cea:	f817 3b01 	ldrb.w	r3, [r7], #1
 8012cee:	f003 030f 	and.w	r3, r3, #15
 8012cf2:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8012cf6:	0e0b      	lsrs	r3, r1, #24
 8012cf8:	d006      	beq.n	8012d08 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x114>
 8012cfa:	8862      	ldrh	r2, [r4, #2]
 8012cfc:	9300      	str	r3, [sp, #0]
 8012cfe:	4640      	mov	r0, r8
 8012d00:	464b      	mov	r3, r9
 8012d02:	f7ff ff21 	bl	8012b48 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8012d06:	8060      	strh	r0, [r4, #2]
 8012d08:	3404      	adds	r4, #4
 8012d0a:	f1aa 0a02 	sub.w	sl, sl, #2
 8012d0e:	e7dc      	b.n	8012cca <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 8012d10:	462f      	mov	r7, r5
 8012d12:	46da      	mov	sl, fp
 8012d14:	e7d9      	b.n	8012cca <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd6>
 8012d16:	d10d      	bne.n	8012d34 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x140>
 8012d18:	783b      	ldrb	r3, [r7, #0]
 8012d1a:	091b      	lsrs	r3, r3, #4
 8012d1c:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8012d20:	0e0b      	lsrs	r3, r1, #24
 8012d22:	d006      	beq.n	8012d32 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 8012d24:	8822      	ldrh	r2, [r4, #0]
 8012d26:	9300      	str	r3, [sp, #0]
 8012d28:	4640      	mov	r0, r8
 8012d2a:	464b      	mov	r3, r9
 8012d2c:	f7ff ff0c 	bl	8012b48 <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L418blendPixelARGB8888Emtih>
 8012d30:	8020      	strh	r0, [r4, #0]
 8012d32:	3402      	adds	r4, #2
 8012d34:	9b06      	ldr	r3, [sp, #24]
 8012d36:	9a02      	ldr	r2, [sp, #8]
 8012d38:	881b      	ldrh	r3, [r3, #0]
 8012d3a:	eba3 030b 	sub.w	r3, r3, fp
 8012d3e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8012d42:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	@ 0x24
 8012d46:	4413      	add	r3, r2
 8012d48:	9a07      	ldr	r2, [sp, #28]
 8012d4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8012d4e:	441d      	add	r5, r3
 8012d50:	e7a3      	b.n	8012c9a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa6>
 8012d52:	9b05      	ldr	r3, [sp, #20]
 8012d54:	6818      	ldr	r0, [r3, #0]
 8012d56:	6803      	ldr	r3, [r0, #0]
 8012d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012d5a:	4798      	blx	r3
 8012d5c:	b00d      	add	sp, #52	@ 0x34
 8012d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d62:	bf00      	nop
 8012d64:	20012658 	.word	0x20012658
 8012d68:	20012652 	.word	0x20012652

08012d6c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>:
 8012d6c:	b570      	push	{r4, r5, r6, lr}
 8012d6e:	1214      	asrs	r4, r2, #8
 8012d70:	788d      	ldrb	r5, [r1, #2]
 8012d72:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8012d76:	f004 04f8 	and.w	r4, r4, #248	@ 0xf8
 8012d7a:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8012d7e:	fb15 f503 	smulbb	r5, r5, r3
 8012d82:	fb04 5506 	mla	r5, r4, r6, r5
 8012d86:	10d0      	asrs	r0, r2, #3
 8012d88:	784c      	ldrb	r4, [r1, #1]
 8012d8a:	7809      	ldrb	r1, [r1, #0]
 8012d8c:	00d2      	lsls	r2, r2, #3
 8012d8e:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 8012d92:	b2d2      	uxtb	r2, r2
 8012d94:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8012d98:	fb14 f403 	smulbb	r4, r4, r3
 8012d9c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8012da0:	fb11 f303 	smulbb	r3, r1, r3
 8012da4:	fb00 4406 	mla	r4, r0, r6, r4
 8012da8:	fb02 3306 	mla	r3, r2, r6, r3
 8012dac:	b2ad      	uxth	r5, r5
 8012dae:	b29b      	uxth	r3, r3
 8012db0:	b2a4      	uxth	r4, r4
 8012db2:	1c68      	adds	r0, r5, #1
 8012db4:	eb00 2515 	add.w	r5, r0, r5, lsr #8
 8012db8:	1c62      	adds	r2, r4, #1
 8012dba:	1c58      	adds	r0, r3, #1
 8012dbc:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8012dc0:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 8012dc4:	f405 4578 	and.w	r5, r5, #63488	@ 0xf800
 8012dc8:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8012dcc:	0964      	lsrs	r4, r4, #5
 8012dce:	4328      	orrs	r0, r5
 8012dd0:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8012dd4:	4320      	orrs	r0, r4
 8012dd6:	bd70      	pop	{r4, r5, r6, pc}

08012dd8 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8012dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ddc:	b08f      	sub	sp, #60	@ 0x3c
 8012dde:	461c      	mov	r4, r3
 8012de0:	f89d 7064 	ldrb.w	r7, [sp, #100]	@ 0x64
 8012de4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8012de6:	4682      	mov	sl, r0
 8012de8:	460e      	mov	r6, r1
 8012dea:	4615      	mov	r5, r2
 8012dec:	2f00      	cmp	r7, #0
 8012dee:	f000 8142 	beq.w	8013076 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x29e>
 8012df2:	6820      	ldr	r0, [r4, #0]
 8012df4:	6861      	ldr	r1, [r4, #4]
 8012df6:	aa0a      	add	r2, sp, #40	@ 0x28
 8012df8:	c203      	stmia	r2!, {r0, r1}
 8012dfa:	6818      	ldr	r0, [r3, #0]
 8012dfc:	6859      	ldr	r1, [r3, #4]
 8012dfe:	aa0c      	add	r2, sp, #48	@ 0x30
 8012e00:	c203      	stmia	r2!, {r0, r1}
 8012e02:	a80a      	add	r0, sp, #40	@ 0x28
 8012e04:	f7f9 fd86 	bl	800c914 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012e08:	4621      	mov	r1, r4
 8012e0a:	a80c      	add	r0, sp, #48	@ 0x30
 8012e0c:	f7f9 fdaa 	bl	800c964 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8012e10:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8012e14:	f9bd b036 	ldrsh.w	fp, [sp, #54]	@ 0x36
 8012e18:	f002 0301 	and.w	r3, r2, #1
 8012e1c:	9306      	str	r3, [sp, #24]
 8012e1e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8012e22:	f003 0101 	and.w	r1, r3, #1
 8012e26:	9105      	str	r1, [sp, #20]
 8012e28:	9805      	ldr	r0, [sp, #20]
 8012e2a:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8012e2e:	4403      	add	r3, r0
 8012e30:	fb01 2303 	mla	r3, r1, r3, r2
 8012e34:	f04f 0802 	mov.w	r8, #2
 8012e38:	fb93 f3f8 	sdiv	r3, r3, r8
 8012e3c:	441e      	add	r6, r3
 8012e3e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8012e42:	441a      	add	r2, r3
 8012e44:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8012e48:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8012e4c:	4419      	add	r1, r3
 8012e4e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8012e52:	9303      	str	r3, [sp, #12]
 8012e54:	4b89      	ldr	r3, [pc, #548]	@ (801307c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 8012e56:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8012e5a:	6818      	ldr	r0, [r3, #0]
 8012e5c:	6803      	ldr	r3, [r0, #0]
 8012e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012e60:	4798      	blx	r3
 8012e62:	4a87      	ldr	r2, [pc, #540]	@ (8013080 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a8>)
 8012e64:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8012e68:	8813      	ldrh	r3, [r2, #0]
 8012e6a:	f9bd 9030 	ldrsh.w	r9, [sp, #48]	@ 0x30
 8012e6e:	2fff      	cmp	r7, #255	@ 0xff
 8012e70:	fb03 9404 	mla	r4, r3, r4, r9
 8012e74:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8012e78:	f105 0504 	add.w	r5, r5, #4
 8012e7c:	4694      	mov	ip, r2
 8012e7e:	fb03 f30b 	mul.w	r3, r3, fp
 8012e82:	d071      	beq.n	8012f68 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x190>
 8012e84:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8012e88:	43f9      	mvns	r1, r7
 8012e8a:	e9cd 3207 	strd	r3, r2, [sp, #28]
 8012e8e:	b2c9      	uxtb	r1, r1
 8012e90:	9104      	str	r1, [sp, #16]
 8012e92:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8012e96:	9b07      	ldr	r3, [sp, #28]
 8012e98:	42a3      	cmp	r3, r4
 8012e9a:	f240 80e7 	bls.w	801306c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x294>
 8012e9e:	9b06      	ldr	r3, [sp, #24]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d03d      	beq.n	8012f20 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x148>
 8012ea4:	7831      	ldrb	r1, [r6, #0]
 8012ea6:	9b04      	ldr	r3, [sp, #16]
 8012ea8:	8822      	ldrh	r2, [r4, #0]
 8012eaa:	9300      	str	r3, [sp, #0]
 8012eac:	f001 010f 	and.w	r1, r1, #15
 8012eb0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012eb4:	463b      	mov	r3, r7
 8012eb6:	4429      	add	r1, r5
 8012eb8:	4650      	mov	r0, sl
 8012eba:	f7ff ff57 	bl	8012d6c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8012ebe:	9b03      	ldr	r3, [sp, #12]
 8012ec0:	f824 0b02 	strh.w	r0, [r4], #2
 8012ec4:	f106 0801 	add.w	r8, r6, #1
 8012ec8:	f103 3bff 	add.w	fp, r3, #4294967295
 8012ecc:	f1bb 0f01 	cmp.w	fp, #1
 8012ed0:	46a1      	mov	r9, r4
 8012ed2:	f104 0404 	add.w	r4, r4, #4
 8012ed6:	dd27      	ble.n	8012f28 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x150>
 8012ed8:	f898 1000 	ldrb.w	r1, [r8]
 8012edc:	9b04      	ldr	r3, [sp, #16]
 8012ede:	f834 2c04 	ldrh.w	r2, [r4, #-4]
 8012ee2:	9300      	str	r3, [sp, #0]
 8012ee4:	0909      	lsrs	r1, r1, #4
 8012ee6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012eea:	463b      	mov	r3, r7
 8012eec:	4429      	add	r1, r5
 8012eee:	4650      	mov	r0, sl
 8012ef0:	f7ff ff3c 	bl	8012d6c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8012ef4:	f824 0c04 	strh.w	r0, [r4, #-4]
 8012ef8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012efc:	9b04      	ldr	r3, [sp, #16]
 8012efe:	f834 2c02 	ldrh.w	r2, [r4, #-2]
 8012f02:	9300      	str	r3, [sp, #0]
 8012f04:	f001 010f 	and.w	r1, r1, #15
 8012f08:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012f0c:	463b      	mov	r3, r7
 8012f0e:	4429      	add	r1, r5
 8012f10:	4650      	mov	r0, sl
 8012f12:	f7ff ff2b 	bl	8012d6c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8012f16:	f1ab 0b02 	sub.w	fp, fp, #2
 8012f1a:	f824 0c02 	strh.w	r0, [r4, #-2]
 8012f1e:	e7d5      	b.n	8012ecc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 8012f20:	46b0      	mov	r8, r6
 8012f22:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8012f26:	e7d1      	b.n	8012ecc <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf4>
 8012f28:	d10f      	bne.n	8012f4a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x172>
 8012f2a:	f898 1000 	ldrb.w	r1, [r8]
 8012f2e:	9b04      	ldr	r3, [sp, #16]
 8012f30:	f8b9 2000 	ldrh.w	r2, [r9]
 8012f34:	9300      	str	r3, [sp, #0]
 8012f36:	0909      	lsrs	r1, r1, #4
 8012f38:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8012f3c:	463b      	mov	r3, r7
 8012f3e:	4429      	add	r1, r5
 8012f40:	4650      	mov	r0, sl
 8012f42:	f7ff ff13 	bl	8012d6c <_ZNK8touchgfx8LCD16bpp17DecompressorL8_L416blendPixelRGB888EPKhthh>
 8012f46:	f829 0b02 	strh.w	r0, [r9], #2
 8012f4a:	9b08      	ldr	r3, [sp, #32]
 8012f4c:	9a05      	ldr	r2, [sp, #20]
 8012f4e:	881c      	ldrh	r4, [r3, #0]
 8012f50:	9b03      	ldr	r3, [sp, #12]
 8012f52:	1ae4      	subs	r4, r4, r3
 8012f54:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8012f58:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 8012f5c:	4413      	add	r3, r2
 8012f5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012f60:	fb93 f3f2 	sdiv	r3, r3, r2
 8012f64:	441e      	add	r6, r3
 8012f66:	e796      	b.n	8012e96 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xbe>
 8012f68:	4f46      	ldr	r7, [pc, #280]	@ (8013084 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ac>)
 8012f6a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8012f6e:	42a3      	cmp	r3, r4
 8012f70:	d97c      	bls.n	801306c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x294>
 8012f72:	9a06      	ldr	r2, [sp, #24]
 8012f74:	2a00      	cmp	r2, #0
 8012f76:	d054      	beq.n	8013022 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x24a>
 8012f78:	7830      	ldrb	r0, [r6, #0]
 8012f7a:	f000 000f 	and.w	r0, r0, #15
 8012f7e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8012f82:	eb05 0e00 	add.w	lr, r5, r0
 8012f86:	5c28      	ldrb	r0, [r5, r0]
 8012f88:	f89e 2002 	ldrb.w	r2, [lr, #2]
 8012f8c:	f89e e001 	ldrb.w	lr, [lr, #1]
 8012f90:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8012f94:	f40e 6efc 	and.w	lr, lr, #2016	@ 0x7e0
 8012f98:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 8012f9c:	ea42 020e 	orr.w	r2, r2, lr
 8012fa0:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
 8012fa4:	f824 2b02 	strh.w	r2, [r4], #2
 8012fa8:	9a03      	ldr	r2, [sp, #12]
 8012faa:	1c71      	adds	r1, r6, #1
 8012fac:	f102 3eff 	add.w	lr, r2, #4294967295
 8012fb0:	f1be 0f01 	cmp.w	lr, #1
 8012fb4:	4620      	mov	r0, r4
 8012fb6:	f104 0404 	add.w	r4, r4, #4
 8012fba:	dd36      	ble.n	801302a <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x252>
 8012fbc:	7808      	ldrb	r0, [r1, #0]
 8012fbe:	0900      	lsrs	r0, r0, #4
 8012fc0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8012fc4:	eb05 0a00 	add.w	sl, r5, r0
 8012fc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8012fcc:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8012fd0:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8012fd4:	00d2      	lsls	r2, r2, #3
 8012fd6:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 8012fda:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8012fde:	ea49 0202 	orr.w	r2, r9, r2
 8012fe2:	f815 9000 	ldrb.w	r9, [r5, r0]
 8012fe6:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 8012fea:	f824 2c04 	strh.w	r2, [r4, #-4]
 8012fee:	f811 0b01 	ldrb.w	r0, [r1], #1
 8012ff2:	f000 000f 	and.w	r0, r0, #15
 8012ff6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8012ffa:	eb05 0a00 	add.w	sl, r5, r0
 8012ffe:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8013002:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8013006:	00d2      	lsls	r2, r2, #3
 8013008:	ea07 2909 	and.w	r9, r7, r9, lsl #8
 801300c:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 8013010:	ea49 0202 	orr.w	r2, r9, r2
 8013014:	f815 9000 	ldrb.w	r9, [r5, r0]
 8013018:	ea42 02d9 	orr.w	r2, r2, r9, lsr #3
 801301c:	f824 2c02 	strh.w	r2, [r4, #-2]
 8013020:	e7c6      	b.n	8012fb0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d8>
 8013022:	4631      	mov	r1, r6
 8013024:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8013028:	e7c2      	b.n	8012fb0 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1d8>
 801302a:	d111      	bne.n	8013050 <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 801302c:	7809      	ldrb	r1, [r1, #0]
 801302e:	0909      	lsrs	r1, r1, #4
 8013030:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8013034:	186c      	adds	r4, r5, r1
 8013036:	5c69      	ldrb	r1, [r5, r1]
 8013038:	78a2      	ldrb	r2, [r4, #2]
 801303a:	7864      	ldrb	r4, [r4, #1]
 801303c:	00e4      	lsls	r4, r4, #3
 801303e:	ea07 2202 	and.w	r2, r7, r2, lsl #8
 8013042:	f404 64fc 	and.w	r4, r4, #2016	@ 0x7e0
 8013046:	4322      	orrs	r2, r4
 8013048:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 801304c:	f820 2b02 	strh.w	r2, [r0], #2
 8013050:	9a03      	ldr	r2, [sp, #12]
 8013052:	f8bc 4000 	ldrh.w	r4, [ip]
 8013056:	9905      	ldr	r1, [sp, #20]
 8013058:	1aa4      	subs	r4, r4, r2
 801305a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801305e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8013062:	440a      	add	r2, r1
 8013064:	fb92 f2f8 	sdiv	r2, r2, r8
 8013068:	4416      	add	r6, r2
 801306a:	e780      	b.n	8012f6e <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x196>
 801306c:	4b03      	ldr	r3, [pc, #12]	@ (801307c <_ZN8touchgfx8LCD16bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2a4>)
 801306e:	6818      	ldr	r0, [r3, #0]
 8013070:	6803      	ldr	r3, [r0, #0]
 8013072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013074:	4798      	blx	r3
 8013076:	b00f      	add	sp, #60	@ 0x3c
 8013078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801307c:	20012658 	.word	0x20012658
 8013080:	20012652 	.word	0x20012652
 8013084:	fffff800 	.word	0xfffff800

08013088 <CRC_Lock>:
 8013088:	b530      	push	{r4, r5, lr}
 801308a:	4a2d      	ldr	r2, [pc, #180]	@ (8013140 <CRC_Lock+0xb8>)
 801308c:	6813      	ldr	r3, [r2, #0]
 801308e:	f023 0301 	bic.w	r3, r3, #1
 8013092:	6013      	str	r3, [r2, #0]
 8013094:	4b2b      	ldr	r3, [pc, #172]	@ (8013144 <CRC_Lock+0xbc>)
 8013096:	681c      	ldr	r4, [r3, #0]
 8013098:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 801309c:	4014      	ands	r4, r2
 801309e:	f24c 2540 	movw	r5, #49728	@ 0xc240
 80130a2:	42ac      	cmp	r4, r5
 80130a4:	d005      	beq.n	80130b2 <CRC_Lock+0x2a>
 80130a6:	681c      	ldr	r4, [r3, #0]
 80130a8:	f24c 2570 	movw	r5, #49776	@ 0xc270
 80130ac:	4014      	ands	r4, r2
 80130ae:	42ac      	cmp	r4, r5
 80130b0:	d125      	bne.n	80130fe <CRC_Lock+0x76>
 80130b2:	4b25      	ldr	r3, [pc, #148]	@ (8013148 <CRC_Lock+0xc0>)
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d139      	bne.n	801312e <CRC_Lock+0xa6>
 80130ba:	4b24      	ldr	r3, [pc, #144]	@ (801314c <CRC_Lock+0xc4>)
 80130bc:	681a      	ldr	r2, [r3, #0]
 80130be:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80130c2:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 80130c6:	d00d      	beq.n	80130e4 <CRC_Lock+0x5c>
 80130c8:	681a      	ldr	r2, [r3, #0]
 80130ca:	f240 4483 	movw	r4, #1155	@ 0x483
 80130ce:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80130d2:	42a2      	cmp	r2, r4
 80130d4:	d006      	beq.n	80130e4 <CRC_Lock+0x5c>
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	f240 4285 	movw	r2, #1157	@ 0x485
 80130dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80130e0:	4293      	cmp	r3, r2
 80130e2:	d124      	bne.n	801312e <CRC_Lock+0xa6>
 80130e4:	4b1a      	ldr	r3, [pc, #104]	@ (8013150 <CRC_Lock+0xc8>)
 80130e6:	2201      	movs	r2, #1
 80130e8:	601a      	str	r2, [r3, #0]
 80130ea:	681a      	ldr	r2, [r3, #0]
 80130ec:	2a00      	cmp	r2, #0
 80130ee:	d1fc      	bne.n	80130ea <CRC_Lock+0x62>
 80130f0:	4b18      	ldr	r3, [pc, #96]	@ (8013154 <CRC_Lock+0xcc>)
 80130f2:	6018      	str	r0, [r3, #0]
 80130f4:	6818      	ldr	r0, [r3, #0]
 80130f6:	1a43      	subs	r3, r0, r1
 80130f8:	4258      	negs	r0, r3
 80130fa:	4158      	adcs	r0, r3
 80130fc:	e00e      	b.n	801311c <CRC_Lock+0x94>
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	4013      	ands	r3, r2
 8013102:	f24d 2220 	movw	r2, #53792	@ 0xd220
 8013106:	4293      	cmp	r3, r2
 8013108:	d111      	bne.n	801312e <CRC_Lock+0xa6>
 801310a:	4b13      	ldr	r3, [pc, #76]	@ (8013158 <CRC_Lock+0xd0>)
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	f240 4286 	movw	r2, #1158	@ 0x486
 8013112:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013116:	4293      	cmp	r3, r2
 8013118:	d001      	beq.n	801311e <CRC_Lock+0x96>
 801311a:	2000      	movs	r0, #0
 801311c:	bd30      	pop	{r4, r5, pc}
 801311e:	4b0f      	ldr	r3, [pc, #60]	@ (801315c <CRC_Lock+0xd4>)
 8013120:	2201      	movs	r2, #1
 8013122:	601a      	str	r2, [r3, #0]
 8013124:	681a      	ldr	r2, [r3, #0]
 8013126:	2a00      	cmp	r2, #0
 8013128:	d1fc      	bne.n	8013124 <CRC_Lock+0x9c>
 801312a:	4b0d      	ldr	r3, [pc, #52]	@ (8013160 <CRC_Lock+0xd8>)
 801312c:	e7e1      	b.n	80130f2 <CRC_Lock+0x6a>
 801312e:	4b0d      	ldr	r3, [pc, #52]	@ (8013164 <CRC_Lock+0xdc>)
 8013130:	2201      	movs	r2, #1
 8013132:	601a      	str	r2, [r3, #0]
 8013134:	681a      	ldr	r2, [r3, #0]
 8013136:	2a00      	cmp	r2, #0
 8013138:	d1fc      	bne.n	8013134 <CRC_Lock+0xac>
 801313a:	4b0b      	ldr	r3, [pc, #44]	@ (8013168 <CRC_Lock+0xe0>)
 801313c:	e7d9      	b.n	80130f2 <CRC_Lock+0x6a>
 801313e:	bf00      	nop
 8013140:	e0002000 	.word	0xe0002000
 8013144:	e000ed00 	.word	0xe000ed00
 8013148:	e0042000 	.word	0xe0042000
 801314c:	5c001000 	.word	0x5c001000
 8013150:	58024c08 	.word	0x58024c08
 8013154:	58024c00 	.word	0x58024c00
 8013158:	46008ff0 	.word	0x46008ff0
 801315c:	46024c08 	.word	0x46024c08
 8013160:	46024c00 	.word	0x46024c00
 8013164:	40023008 	.word	0x40023008
 8013168:	40023000 	.word	0x40023000

0801316c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801316c:	6101      	str	r1, [r0, #16]
 801316e:	4770      	bx	lr

08013170 <_ZN8touchgfx8Gestures4tickEv>:
 8013170:	7b83      	ldrb	r3, [r0, #14]
 8013172:	b14b      	cbz	r3, 8013188 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8013174:	8903      	ldrh	r3, [r0, #8]
 8013176:	3301      	adds	r3, #1
 8013178:	b29b      	uxth	r3, r3
 801317a:	2b07      	cmp	r3, #7
 801317c:	8103      	strh	r3, [r0, #8]
 801317e:	bf81      	itttt	hi
 8013180:	2300      	movhi	r3, #0
 8013182:	8143      	strhhi	r3, [r0, #10]
 8013184:	8183      	strhhi	r3, [r0, #12]
 8013186:	7383      	strbhi	r3, [r0, #14]
 8013188:	4770      	bx	lr
	...

0801318c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801318c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8013190:	4698      	mov	r8, r3
 8013192:	8883      	ldrh	r3, [r0, #4]
 8013194:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013198:	eba8 0303 	sub.w	r3, r8, r3
 801319c:	b21b      	sxth	r3, r3
 801319e:	4604      	mov	r4, r0
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	4617      	mov	r7, r2
 80131a4:	4a18      	ldr	r2, [pc, #96]	@ (8013208 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 80131a6:	9200      	str	r2, [sp, #0]
 80131a8:	bfb8      	it	lt
 80131aa:	425b      	neglt	r3, r3
 80131ac:	8aa2      	ldrh	r2, [r4, #20]
 80131ae:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 80131b2:	f8ad 800a 	strh.w	r8, [sp, #10]
 80131b6:	b21b      	sxth	r3, r3
 80131b8:	460e      	mov	r6, r1
 80131ba:	4293      	cmp	r3, r2
 80131bc:	88c1      	ldrh	r1, [r0, #6]
 80131be:	f8ad 1008 	strh.w	r1, [sp, #8]
 80131c2:	f04f 0000 	mov.w	r0, #0
 80131c6:	f88d 0004 	strb.w	r0, [sp, #4]
 80131ca:	f8ad 500c 	strh.w	r5, [sp, #12]
 80131ce:	dc07      	bgt.n	80131e0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x54>
 80131d0:	1a69      	subs	r1, r5, r1
 80131d2:	b209      	sxth	r1, r1
 80131d4:	2900      	cmp	r1, #0
 80131d6:	bfb8      	it	lt
 80131d8:	4249      	neglt	r1, r1
 80131da:	b209      	sxth	r1, r1
 80131dc:	428a      	cmp	r2, r1
 80131de:	da10      	bge.n	8013202 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x76>
 80131e0:	6920      	ldr	r0, [r4, #16]
 80131e2:	6803      	ldr	r3, [r0, #0]
 80131e4:	4669      	mov	r1, sp
 80131e6:	685b      	ldr	r3, [r3, #4]
 80131e8:	4798      	blx	r3
 80131ea:	eba8 0606 	sub.w	r6, r8, r6
 80131ee:	2300      	movs	r3, #0
 80131f0:	1bef      	subs	r7, r5, r7
 80131f2:	2001      	movs	r0, #1
 80131f4:	8123      	strh	r3, [r4, #8]
 80131f6:	8166      	strh	r6, [r4, #10]
 80131f8:	81a7      	strh	r7, [r4, #12]
 80131fa:	f8a4 8004 	strh.w	r8, [r4, #4]
 80131fe:	80e5      	strh	r5, [r4, #6]
 8013200:	73a0      	strb	r0, [r4, #14]
 8013202:	b004      	add	sp, #16
 8013204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013208:	08015c94 	.word	0x08015c94

0801320c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801320c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801320e:	461e      	mov	r6, r3
 8013210:	1e4b      	subs	r3, r1, #1
 8013212:	2b01      	cmp	r3, #1
 8013214:	b085      	sub	sp, #20
 8013216:	4604      	mov	r4, r0
 8013218:	460d      	mov	r5, r1
 801321a:	4617      	mov	r7, r2
 801321c:	d84b      	bhi.n	80132b6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801321e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8013222:	1cd3      	adds	r3, r2, #3
 8013224:	b29b      	uxth	r3, r3
 8013226:	2b06      	cmp	r3, #6
 8013228:	d916      	bls.n	8013258 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801322a:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 80132cc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801322e:	f8cd c004 	str.w	ip, [sp, #4]
 8013232:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8013236:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801323a:	6900      	ldr	r0, [r0, #16]
 801323c:	f8ad 100c 	strh.w	r1, [sp, #12]
 8013240:	f04f 0c00 	mov.w	ip, #0
 8013244:	f88d c008 	strb.w	ip, [sp, #8]
 8013248:	f8ad 200a 	strh.w	r2, [sp, #10]
 801324c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013250:	6803      	ldr	r3, [r0, #0]
 8013252:	a901      	add	r1, sp, #4
 8013254:	689b      	ldr	r3, [r3, #8]
 8013256:	4798      	blx	r3
 8013258:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801325c:	1cd3      	adds	r3, r2, #3
 801325e:	b29b      	uxth	r3, r3
 8013260:	2b06      	cmp	r3, #6
 8013262:	d916      	bls.n	8013292 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8013264:	f8df c064 	ldr.w	ip, [pc, #100]	@ 80132cc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8013268:	f8cd c004 	str.w	ip, [sp, #4]
 801326c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8013270:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8013274:	6920      	ldr	r0, [r4, #16]
 8013276:	f8ad 100c 	strh.w	r1, [sp, #12]
 801327a:	f04f 0c01 	mov.w	ip, #1
 801327e:	f88d c008 	strb.w	ip, [sp, #8]
 8013282:	f8ad 200a 	strh.w	r2, [sp, #10]
 8013286:	f8ad 300e 	strh.w	r3, [sp, #14]
 801328a:	6803      	ldr	r3, [r0, #0]
 801328c:	a901      	add	r1, sp, #4
 801328e:	689b      	ldr	r3, [r3, #8]
 8013290:	4798      	blx	r3
 8013292:	4b0d      	ldr	r3, [pc, #52]	@ (80132c8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8013294:	9301      	str	r3, [sp, #4]
 8013296:	6920      	ldr	r0, [r4, #16]
 8013298:	f88d 5008 	strb.w	r5, [sp, #8]
 801329c:	2300      	movs	r3, #0
 801329e:	f8ad 700a 	strh.w	r7, [sp, #10]
 80132a2:	f8ad 600c 	strh.w	r6, [sp, #12]
 80132a6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80132aa:	6803      	ldr	r3, [r0, #0]
 80132ac:	a901      	add	r1, sp, #4
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	4798      	blx	r3
 80132b2:	b005      	add	sp, #20
 80132b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80132b6:	2900      	cmp	r1, #0
 80132b8:	d1eb      	bne.n	8013292 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80132ba:	80a2      	strh	r2, [r4, #4]
 80132bc:	80c6      	strh	r6, [r0, #6]
 80132be:	60a1      	str	r1, [r4, #8]
 80132c0:	81a1      	strh	r1, [r4, #12]
 80132c2:	73a1      	strb	r1, [r4, #14]
 80132c4:	e7e5      	b.n	8013292 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80132c6:	bf00      	nop
 80132c8:	08015c80 	.word	0x08015c80
 80132cc:	08015ca8 	.word	0x08015ca8

080132d0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 80132d0:	b570      	push	{r4, r5, r6, lr}
 80132d2:	790b      	ldrb	r3, [r1, #4]
 80132d4:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 80132d8:	2b00      	cmp	r3, #0
 80132da:	bf0c      	ite	eq
 80132dc:	2301      	moveq	r3, #1
 80132de:	2300      	movne	r3, #0
 80132e0:	4604      	mov	r4, r0
 80132e2:	460e      	mov	r6, r1
 80132e4:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 80132e8:	d109      	bne.n	80132fe <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 80132ea:	b14d      	cbz	r5, 8013300 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 80132ec:	7933      	ldrb	r3, [r6, #4]
 80132ee:	2b01      	cmp	r3, #1
 80132f0:	d10c      	bne.n	801330c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80132f2:	6823      	ldr	r3, [r4, #0]
 80132f4:	4620      	mov	r0, r4
 80132f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80132f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80132fc:	4718      	bx	r3
 80132fe:	b12d      	cbz	r5, 801330c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8013300:	6823      	ldr	r3, [r4, #0]
 8013302:	4620      	mov	r0, r4
 8013304:	695b      	ldr	r3, [r3, #20]
 8013306:	4798      	blx	r3
 8013308:	2d00      	cmp	r5, #0
 801330a:	d1ef      	bne.n	80132ec <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 801330c:	bd70      	pop	{r4, r5, r6, pc}

0801330e <__aeabi_atexit>:
 801330e:	460b      	mov	r3, r1
 8013310:	4601      	mov	r1, r0
 8013312:	4618      	mov	r0, r3
 8013314:	f000 b910 	b.w	8013538 <__cxa_atexit>

08013318 <_ZdlPvj>:
 8013318:	f000 b812 	b.w	8013340 <_ZdlPv>

0801331c <__cxa_guard_acquire>:
 801331c:	6802      	ldr	r2, [r0, #0]
 801331e:	07d2      	lsls	r2, r2, #31
 8013320:	4603      	mov	r3, r0
 8013322:	d405      	bmi.n	8013330 <__cxa_guard_acquire+0x14>
 8013324:	7842      	ldrb	r2, [r0, #1]
 8013326:	b102      	cbz	r2, 801332a <__cxa_guard_acquire+0xe>
 8013328:	deff      	udf	#255	@ 0xff
 801332a:	2001      	movs	r0, #1
 801332c:	7058      	strb	r0, [r3, #1]
 801332e:	4770      	bx	lr
 8013330:	2000      	movs	r0, #0
 8013332:	4770      	bx	lr

08013334 <__cxa_guard_release>:
 8013334:	2301      	movs	r3, #1
 8013336:	6003      	str	r3, [r0, #0]
 8013338:	4770      	bx	lr

0801333a <__cxa_pure_virtual>:
 801333a:	b508      	push	{r3, lr}
 801333c:	f000 f80e 	bl	801335c <_ZSt9terminatev>

08013340 <_ZdlPv>:
 8013340:	f000 b844 	b.w	80133cc <free>

08013344 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8013344:	b508      	push	{r3, lr}
 8013346:	4780      	blx	r0
 8013348:	f000 f80d 	bl	8013366 <abort>

0801334c <_ZSt13get_terminatev>:
 801334c:	4b02      	ldr	r3, [pc, #8]	@ (8013358 <_ZSt13get_terminatev+0xc>)
 801334e:	6818      	ldr	r0, [r3, #0]
 8013350:	f3bf 8f5b 	dmb	ish
 8013354:	4770      	bx	lr
 8013356:	bf00      	nop
 8013358:	2000008c 	.word	0x2000008c

0801335c <_ZSt9terminatev>:
 801335c:	b508      	push	{r3, lr}
 801335e:	f7ff fff5 	bl	801334c <_ZSt13get_terminatev>
 8013362:	f7ff ffef 	bl	8013344 <_ZN10__cxxabiv111__terminateEPFvvE>

08013366 <abort>:
 8013366:	b508      	push	{r3, lr}
 8013368:	2006      	movs	r0, #6
 801336a:	f000 fa3b 	bl	80137e4 <raise>
 801336e:	2001      	movs	r0, #1
 8013370:	f7ee fe24 	bl	8001fbc <_exit>

08013374 <__assert_func>:
 8013374:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013376:	4614      	mov	r4, r2
 8013378:	461a      	mov	r2, r3
 801337a:	4b09      	ldr	r3, [pc, #36]	@ (80133a0 <__assert_func+0x2c>)
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	4605      	mov	r5, r0
 8013380:	68d8      	ldr	r0, [r3, #12]
 8013382:	b954      	cbnz	r4, 801339a <__assert_func+0x26>
 8013384:	4b07      	ldr	r3, [pc, #28]	@ (80133a4 <__assert_func+0x30>)
 8013386:	461c      	mov	r4, r3
 8013388:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801338c:	9100      	str	r1, [sp, #0]
 801338e:	462b      	mov	r3, r5
 8013390:	4905      	ldr	r1, [pc, #20]	@ (80133a8 <__assert_func+0x34>)
 8013392:	f000 f983 	bl	801369c <fiprintf>
 8013396:	f7ff ffe6 	bl	8013366 <abort>
 801339a:	4b04      	ldr	r3, [pc, #16]	@ (80133ac <__assert_func+0x38>)
 801339c:	e7f4      	b.n	8013388 <__assert_func+0x14>
 801339e:	bf00      	nop
 80133a0:	2000009c 	.word	0x2000009c
 80133a4:	08015d97 	.word	0x08015d97
 80133a8:	08015d69 	.word	0x08015d69
 80133ac:	08015d5c 	.word	0x08015d5c

080133b0 <atexit>:
 80133b0:	2300      	movs	r3, #0
 80133b2:	4601      	mov	r1, r0
 80133b4:	461a      	mov	r2, r3
 80133b6:	4618      	mov	r0, r3
 80133b8:	f000 bac2 	b.w	8013940 <__register_exitproc>

080133bc <malloc>:
 80133bc:	4b02      	ldr	r3, [pc, #8]	@ (80133c8 <malloc+0xc>)
 80133be:	4601      	mov	r1, r0
 80133c0:	6818      	ldr	r0, [r3, #0]
 80133c2:	f000 b82d 	b.w	8013420 <_malloc_r>
 80133c6:	bf00      	nop
 80133c8:	2000009c 	.word	0x2000009c

080133cc <free>:
 80133cc:	4b02      	ldr	r3, [pc, #8]	@ (80133d8 <free+0xc>)
 80133ce:	4601      	mov	r1, r0
 80133d0:	6818      	ldr	r0, [r3, #0]
 80133d2:	f000 bb11 	b.w	80139f8 <_free_r>
 80133d6:	bf00      	nop
 80133d8:	2000009c 	.word	0x2000009c

080133dc <sbrk_aligned>:
 80133dc:	b570      	push	{r4, r5, r6, lr}
 80133de:	4e0f      	ldr	r6, [pc, #60]	@ (801341c <sbrk_aligned+0x40>)
 80133e0:	460c      	mov	r4, r1
 80133e2:	6831      	ldr	r1, [r6, #0]
 80133e4:	4605      	mov	r5, r0
 80133e6:	b911      	cbnz	r1, 80133ee <sbrk_aligned+0x12>
 80133e8:	f000 fa4c 	bl	8013884 <_sbrk_r>
 80133ec:	6030      	str	r0, [r6, #0]
 80133ee:	4621      	mov	r1, r4
 80133f0:	4628      	mov	r0, r5
 80133f2:	f000 fa47 	bl	8013884 <_sbrk_r>
 80133f6:	1c43      	adds	r3, r0, #1
 80133f8:	d103      	bne.n	8013402 <sbrk_aligned+0x26>
 80133fa:	f04f 34ff 	mov.w	r4, #4294967295
 80133fe:	4620      	mov	r0, r4
 8013400:	bd70      	pop	{r4, r5, r6, pc}
 8013402:	1cc4      	adds	r4, r0, #3
 8013404:	f024 0403 	bic.w	r4, r4, #3
 8013408:	42a0      	cmp	r0, r4
 801340a:	d0f8      	beq.n	80133fe <sbrk_aligned+0x22>
 801340c:	1a21      	subs	r1, r4, r0
 801340e:	4628      	mov	r0, r5
 8013410:	f000 fa38 	bl	8013884 <_sbrk_r>
 8013414:	3001      	adds	r0, #1
 8013416:	d1f2      	bne.n	80133fe <sbrk_aligned+0x22>
 8013418:	e7ef      	b.n	80133fa <sbrk_aligned+0x1e>
 801341a:	bf00      	nop
 801341c:	200126e8 	.word	0x200126e8

08013420 <_malloc_r>:
 8013420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013424:	1ccd      	adds	r5, r1, #3
 8013426:	f025 0503 	bic.w	r5, r5, #3
 801342a:	3508      	adds	r5, #8
 801342c:	2d0c      	cmp	r5, #12
 801342e:	bf38      	it	cc
 8013430:	250c      	movcc	r5, #12
 8013432:	2d00      	cmp	r5, #0
 8013434:	4606      	mov	r6, r0
 8013436:	db01      	blt.n	801343c <_malloc_r+0x1c>
 8013438:	42a9      	cmp	r1, r5
 801343a:	d904      	bls.n	8013446 <_malloc_r+0x26>
 801343c:	230c      	movs	r3, #12
 801343e:	6033      	str	r3, [r6, #0]
 8013440:	2000      	movs	r0, #0
 8013442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013446:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801351c <_malloc_r+0xfc>
 801344a:	f000 f869 	bl	8013520 <__malloc_lock>
 801344e:	f8d8 3000 	ldr.w	r3, [r8]
 8013452:	461c      	mov	r4, r3
 8013454:	bb44      	cbnz	r4, 80134a8 <_malloc_r+0x88>
 8013456:	4629      	mov	r1, r5
 8013458:	4630      	mov	r0, r6
 801345a:	f7ff ffbf 	bl	80133dc <sbrk_aligned>
 801345e:	1c43      	adds	r3, r0, #1
 8013460:	4604      	mov	r4, r0
 8013462:	d158      	bne.n	8013516 <_malloc_r+0xf6>
 8013464:	f8d8 4000 	ldr.w	r4, [r8]
 8013468:	4627      	mov	r7, r4
 801346a:	2f00      	cmp	r7, #0
 801346c:	d143      	bne.n	80134f6 <_malloc_r+0xd6>
 801346e:	2c00      	cmp	r4, #0
 8013470:	d04b      	beq.n	801350a <_malloc_r+0xea>
 8013472:	6823      	ldr	r3, [r4, #0]
 8013474:	4639      	mov	r1, r7
 8013476:	4630      	mov	r0, r6
 8013478:	eb04 0903 	add.w	r9, r4, r3
 801347c:	f000 fa02 	bl	8013884 <_sbrk_r>
 8013480:	4581      	cmp	r9, r0
 8013482:	d142      	bne.n	801350a <_malloc_r+0xea>
 8013484:	6821      	ldr	r1, [r4, #0]
 8013486:	1a6d      	subs	r5, r5, r1
 8013488:	4629      	mov	r1, r5
 801348a:	4630      	mov	r0, r6
 801348c:	f7ff ffa6 	bl	80133dc <sbrk_aligned>
 8013490:	3001      	adds	r0, #1
 8013492:	d03a      	beq.n	801350a <_malloc_r+0xea>
 8013494:	6823      	ldr	r3, [r4, #0]
 8013496:	442b      	add	r3, r5
 8013498:	6023      	str	r3, [r4, #0]
 801349a:	f8d8 3000 	ldr.w	r3, [r8]
 801349e:	685a      	ldr	r2, [r3, #4]
 80134a0:	bb62      	cbnz	r2, 80134fc <_malloc_r+0xdc>
 80134a2:	f8c8 7000 	str.w	r7, [r8]
 80134a6:	e00f      	b.n	80134c8 <_malloc_r+0xa8>
 80134a8:	6822      	ldr	r2, [r4, #0]
 80134aa:	1b52      	subs	r2, r2, r5
 80134ac:	d420      	bmi.n	80134f0 <_malloc_r+0xd0>
 80134ae:	2a0b      	cmp	r2, #11
 80134b0:	d917      	bls.n	80134e2 <_malloc_r+0xc2>
 80134b2:	1961      	adds	r1, r4, r5
 80134b4:	42a3      	cmp	r3, r4
 80134b6:	6025      	str	r5, [r4, #0]
 80134b8:	bf18      	it	ne
 80134ba:	6059      	strne	r1, [r3, #4]
 80134bc:	6863      	ldr	r3, [r4, #4]
 80134be:	bf08      	it	eq
 80134c0:	f8c8 1000 	streq.w	r1, [r8]
 80134c4:	5162      	str	r2, [r4, r5]
 80134c6:	604b      	str	r3, [r1, #4]
 80134c8:	4630      	mov	r0, r6
 80134ca:	f000 f82f 	bl	801352c <__malloc_unlock>
 80134ce:	f104 000b 	add.w	r0, r4, #11
 80134d2:	1d23      	adds	r3, r4, #4
 80134d4:	f020 0007 	bic.w	r0, r0, #7
 80134d8:	1ac2      	subs	r2, r0, r3
 80134da:	bf1c      	itt	ne
 80134dc:	1a1b      	subne	r3, r3, r0
 80134de:	50a3      	strne	r3, [r4, r2]
 80134e0:	e7af      	b.n	8013442 <_malloc_r+0x22>
 80134e2:	6862      	ldr	r2, [r4, #4]
 80134e4:	42a3      	cmp	r3, r4
 80134e6:	bf0c      	ite	eq
 80134e8:	f8c8 2000 	streq.w	r2, [r8]
 80134ec:	605a      	strne	r2, [r3, #4]
 80134ee:	e7eb      	b.n	80134c8 <_malloc_r+0xa8>
 80134f0:	4623      	mov	r3, r4
 80134f2:	6864      	ldr	r4, [r4, #4]
 80134f4:	e7ae      	b.n	8013454 <_malloc_r+0x34>
 80134f6:	463c      	mov	r4, r7
 80134f8:	687f      	ldr	r7, [r7, #4]
 80134fa:	e7b6      	b.n	801346a <_malloc_r+0x4a>
 80134fc:	461a      	mov	r2, r3
 80134fe:	685b      	ldr	r3, [r3, #4]
 8013500:	42a3      	cmp	r3, r4
 8013502:	d1fb      	bne.n	80134fc <_malloc_r+0xdc>
 8013504:	2300      	movs	r3, #0
 8013506:	6053      	str	r3, [r2, #4]
 8013508:	e7de      	b.n	80134c8 <_malloc_r+0xa8>
 801350a:	230c      	movs	r3, #12
 801350c:	6033      	str	r3, [r6, #0]
 801350e:	4630      	mov	r0, r6
 8013510:	f000 f80c 	bl	801352c <__malloc_unlock>
 8013514:	e794      	b.n	8013440 <_malloc_r+0x20>
 8013516:	6005      	str	r5, [r0, #0]
 8013518:	e7d6      	b.n	80134c8 <_malloc_r+0xa8>
 801351a:	bf00      	nop
 801351c:	200126ec 	.word	0x200126ec

08013520 <__malloc_lock>:
 8013520:	4801      	ldr	r0, [pc, #4]	@ (8013528 <__malloc_lock+0x8>)
 8013522:	f000 b9fc 	b.w	801391e <__retarget_lock_acquire_recursive>
 8013526:	bf00      	nop
 8013528:	20012830 	.word	0x20012830

0801352c <__malloc_unlock>:
 801352c:	4801      	ldr	r0, [pc, #4]	@ (8013534 <__malloc_unlock+0x8>)
 801352e:	f000 b9f7 	b.w	8013920 <__retarget_lock_release_recursive>
 8013532:	bf00      	nop
 8013534:	20012830 	.word	0x20012830

08013538 <__cxa_atexit>:
 8013538:	b510      	push	{r4, lr}
 801353a:	4604      	mov	r4, r0
 801353c:	4804      	ldr	r0, [pc, #16]	@ (8013550 <__cxa_atexit+0x18>)
 801353e:	4613      	mov	r3, r2
 8013540:	b120      	cbz	r0, 801354c <__cxa_atexit+0x14>
 8013542:	460a      	mov	r2, r1
 8013544:	2002      	movs	r0, #2
 8013546:	4621      	mov	r1, r4
 8013548:	f000 f9fa 	bl	8013940 <__register_exitproc>
 801354c:	bd10      	pop	{r4, pc}
 801354e:	bf00      	nop
 8013550:	08013941 	.word	0x08013941

08013554 <std>:
 8013554:	2300      	movs	r3, #0
 8013556:	b510      	push	{r4, lr}
 8013558:	4604      	mov	r4, r0
 801355a:	e9c0 3300 	strd	r3, r3, [r0]
 801355e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013562:	6083      	str	r3, [r0, #8]
 8013564:	8181      	strh	r1, [r0, #12]
 8013566:	6643      	str	r3, [r0, #100]	@ 0x64
 8013568:	81c2      	strh	r2, [r0, #14]
 801356a:	6183      	str	r3, [r0, #24]
 801356c:	4619      	mov	r1, r3
 801356e:	2208      	movs	r2, #8
 8013570:	305c      	adds	r0, #92	@ 0x5c
 8013572:	f000 f906 	bl	8013782 <memset>
 8013576:	4b0d      	ldr	r3, [pc, #52]	@ (80135ac <std+0x58>)
 8013578:	6263      	str	r3, [r4, #36]	@ 0x24
 801357a:	4b0d      	ldr	r3, [pc, #52]	@ (80135b0 <std+0x5c>)
 801357c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801357e:	4b0d      	ldr	r3, [pc, #52]	@ (80135b4 <std+0x60>)
 8013580:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013582:	4b0d      	ldr	r3, [pc, #52]	@ (80135b8 <std+0x64>)
 8013584:	6323      	str	r3, [r4, #48]	@ 0x30
 8013586:	4b0d      	ldr	r3, [pc, #52]	@ (80135bc <std+0x68>)
 8013588:	6224      	str	r4, [r4, #32]
 801358a:	429c      	cmp	r4, r3
 801358c:	d006      	beq.n	801359c <std+0x48>
 801358e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013592:	4294      	cmp	r4, r2
 8013594:	d002      	beq.n	801359c <std+0x48>
 8013596:	33d0      	adds	r3, #208	@ 0xd0
 8013598:	429c      	cmp	r4, r3
 801359a:	d105      	bne.n	80135a8 <std+0x54>
 801359c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80135a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80135a4:	f000 b9ba 	b.w	801391c <__retarget_lock_init_recursive>
 80135a8:	bd10      	pop	{r4, pc}
 80135aa:	bf00      	nop
 80135ac:	080136fd 	.word	0x080136fd
 80135b0:	0801371f 	.word	0x0801371f
 80135b4:	08013757 	.word	0x08013757
 80135b8:	0801377b 	.word	0x0801377b
 80135bc:	200126f0 	.word	0x200126f0

080135c0 <stdio_exit_handler>:
 80135c0:	4a02      	ldr	r2, [pc, #8]	@ (80135cc <stdio_exit_handler+0xc>)
 80135c2:	4903      	ldr	r1, [pc, #12]	@ (80135d0 <stdio_exit_handler+0x10>)
 80135c4:	4803      	ldr	r0, [pc, #12]	@ (80135d4 <stdio_exit_handler+0x14>)
 80135c6:	f000 b87b 	b.w	80136c0 <_fwalk_sglue>
 80135ca:	bf00      	nop
 80135cc:	20000090 	.word	0x20000090
 80135d0:	08014135 	.word	0x08014135
 80135d4:	200000a0 	.word	0x200000a0

080135d8 <cleanup_stdio>:
 80135d8:	6841      	ldr	r1, [r0, #4]
 80135da:	4b0c      	ldr	r3, [pc, #48]	@ (801360c <cleanup_stdio+0x34>)
 80135dc:	4299      	cmp	r1, r3
 80135de:	b510      	push	{r4, lr}
 80135e0:	4604      	mov	r4, r0
 80135e2:	d001      	beq.n	80135e8 <cleanup_stdio+0x10>
 80135e4:	f000 fda6 	bl	8014134 <_fflush_r>
 80135e8:	68a1      	ldr	r1, [r4, #8]
 80135ea:	4b09      	ldr	r3, [pc, #36]	@ (8013610 <cleanup_stdio+0x38>)
 80135ec:	4299      	cmp	r1, r3
 80135ee:	d002      	beq.n	80135f6 <cleanup_stdio+0x1e>
 80135f0:	4620      	mov	r0, r4
 80135f2:	f000 fd9f 	bl	8014134 <_fflush_r>
 80135f6:	68e1      	ldr	r1, [r4, #12]
 80135f8:	4b06      	ldr	r3, [pc, #24]	@ (8013614 <cleanup_stdio+0x3c>)
 80135fa:	4299      	cmp	r1, r3
 80135fc:	d004      	beq.n	8013608 <cleanup_stdio+0x30>
 80135fe:	4620      	mov	r0, r4
 8013600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013604:	f000 bd96 	b.w	8014134 <_fflush_r>
 8013608:	bd10      	pop	{r4, pc}
 801360a:	bf00      	nop
 801360c:	200126f0 	.word	0x200126f0
 8013610:	20012758 	.word	0x20012758
 8013614:	200127c0 	.word	0x200127c0

08013618 <global_stdio_init.part.0>:
 8013618:	b510      	push	{r4, lr}
 801361a:	4b0b      	ldr	r3, [pc, #44]	@ (8013648 <global_stdio_init.part.0+0x30>)
 801361c:	4c0b      	ldr	r4, [pc, #44]	@ (801364c <global_stdio_init.part.0+0x34>)
 801361e:	4a0c      	ldr	r2, [pc, #48]	@ (8013650 <global_stdio_init.part.0+0x38>)
 8013620:	601a      	str	r2, [r3, #0]
 8013622:	4620      	mov	r0, r4
 8013624:	2200      	movs	r2, #0
 8013626:	2104      	movs	r1, #4
 8013628:	f7ff ff94 	bl	8013554 <std>
 801362c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013630:	2201      	movs	r2, #1
 8013632:	2109      	movs	r1, #9
 8013634:	f7ff ff8e 	bl	8013554 <std>
 8013638:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801363c:	2202      	movs	r2, #2
 801363e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013642:	2112      	movs	r1, #18
 8013644:	f7ff bf86 	b.w	8013554 <std>
 8013648:	20012828 	.word	0x20012828
 801364c:	200126f0 	.word	0x200126f0
 8013650:	080135c1 	.word	0x080135c1

08013654 <__sfp_lock_acquire>:
 8013654:	4801      	ldr	r0, [pc, #4]	@ (801365c <__sfp_lock_acquire+0x8>)
 8013656:	f000 b962 	b.w	801391e <__retarget_lock_acquire_recursive>
 801365a:	bf00      	nop
 801365c:	20012832 	.word	0x20012832

08013660 <__sfp_lock_release>:
 8013660:	4801      	ldr	r0, [pc, #4]	@ (8013668 <__sfp_lock_release+0x8>)
 8013662:	f000 b95d 	b.w	8013920 <__retarget_lock_release_recursive>
 8013666:	bf00      	nop
 8013668:	20012832 	.word	0x20012832

0801366c <__sinit>:
 801366c:	b510      	push	{r4, lr}
 801366e:	4604      	mov	r4, r0
 8013670:	f7ff fff0 	bl	8013654 <__sfp_lock_acquire>
 8013674:	6a23      	ldr	r3, [r4, #32]
 8013676:	b11b      	cbz	r3, 8013680 <__sinit+0x14>
 8013678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801367c:	f7ff bff0 	b.w	8013660 <__sfp_lock_release>
 8013680:	4b04      	ldr	r3, [pc, #16]	@ (8013694 <__sinit+0x28>)
 8013682:	6223      	str	r3, [r4, #32]
 8013684:	4b04      	ldr	r3, [pc, #16]	@ (8013698 <__sinit+0x2c>)
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d1f5      	bne.n	8013678 <__sinit+0xc>
 801368c:	f7ff ffc4 	bl	8013618 <global_stdio_init.part.0>
 8013690:	e7f2      	b.n	8013678 <__sinit+0xc>
 8013692:	bf00      	nop
 8013694:	080135d9 	.word	0x080135d9
 8013698:	20012828 	.word	0x20012828

0801369c <fiprintf>:
 801369c:	b40e      	push	{r1, r2, r3}
 801369e:	b503      	push	{r0, r1, lr}
 80136a0:	4601      	mov	r1, r0
 80136a2:	ab03      	add	r3, sp, #12
 80136a4:	4805      	ldr	r0, [pc, #20]	@ (80136bc <fiprintf+0x20>)
 80136a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80136aa:	6800      	ldr	r0, [r0, #0]
 80136ac:	9301      	str	r3, [sp, #4]
 80136ae:	f000 fa17 	bl	8013ae0 <_vfiprintf_r>
 80136b2:	b002      	add	sp, #8
 80136b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80136b8:	b003      	add	sp, #12
 80136ba:	4770      	bx	lr
 80136bc:	2000009c 	.word	0x2000009c

080136c0 <_fwalk_sglue>:
 80136c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80136c4:	4607      	mov	r7, r0
 80136c6:	4688      	mov	r8, r1
 80136c8:	4614      	mov	r4, r2
 80136ca:	2600      	movs	r6, #0
 80136cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80136d0:	f1b9 0901 	subs.w	r9, r9, #1
 80136d4:	d505      	bpl.n	80136e2 <_fwalk_sglue+0x22>
 80136d6:	6824      	ldr	r4, [r4, #0]
 80136d8:	2c00      	cmp	r4, #0
 80136da:	d1f7      	bne.n	80136cc <_fwalk_sglue+0xc>
 80136dc:	4630      	mov	r0, r6
 80136de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80136e2:	89ab      	ldrh	r3, [r5, #12]
 80136e4:	2b01      	cmp	r3, #1
 80136e6:	d907      	bls.n	80136f8 <_fwalk_sglue+0x38>
 80136e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80136ec:	3301      	adds	r3, #1
 80136ee:	d003      	beq.n	80136f8 <_fwalk_sglue+0x38>
 80136f0:	4629      	mov	r1, r5
 80136f2:	4638      	mov	r0, r7
 80136f4:	47c0      	blx	r8
 80136f6:	4306      	orrs	r6, r0
 80136f8:	3568      	adds	r5, #104	@ 0x68
 80136fa:	e7e9      	b.n	80136d0 <_fwalk_sglue+0x10>

080136fc <__sread>:
 80136fc:	b510      	push	{r4, lr}
 80136fe:	460c      	mov	r4, r1
 8013700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013704:	f000 f898 	bl	8013838 <_read_r>
 8013708:	2800      	cmp	r0, #0
 801370a:	bfab      	itete	ge
 801370c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801370e:	89a3      	ldrhlt	r3, [r4, #12]
 8013710:	181b      	addge	r3, r3, r0
 8013712:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013716:	bfac      	ite	ge
 8013718:	6563      	strge	r3, [r4, #84]	@ 0x54
 801371a:	81a3      	strhlt	r3, [r4, #12]
 801371c:	bd10      	pop	{r4, pc}

0801371e <__swrite>:
 801371e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013722:	461f      	mov	r7, r3
 8013724:	898b      	ldrh	r3, [r1, #12]
 8013726:	05db      	lsls	r3, r3, #23
 8013728:	4605      	mov	r5, r0
 801372a:	460c      	mov	r4, r1
 801372c:	4616      	mov	r6, r2
 801372e:	d505      	bpl.n	801373c <__swrite+0x1e>
 8013730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013734:	2302      	movs	r3, #2
 8013736:	2200      	movs	r2, #0
 8013738:	f000 f86c 	bl	8013814 <_lseek_r>
 801373c:	89a3      	ldrh	r3, [r4, #12]
 801373e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013742:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013746:	81a3      	strh	r3, [r4, #12]
 8013748:	4632      	mov	r2, r6
 801374a:	463b      	mov	r3, r7
 801374c:	4628      	mov	r0, r5
 801374e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013752:	f000 b8a7 	b.w	80138a4 <_write_r>

08013756 <__sseek>:
 8013756:	b510      	push	{r4, lr}
 8013758:	460c      	mov	r4, r1
 801375a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801375e:	f000 f859 	bl	8013814 <_lseek_r>
 8013762:	1c43      	adds	r3, r0, #1
 8013764:	89a3      	ldrh	r3, [r4, #12]
 8013766:	bf15      	itete	ne
 8013768:	6560      	strne	r0, [r4, #84]	@ 0x54
 801376a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801376e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013772:	81a3      	strheq	r3, [r4, #12]
 8013774:	bf18      	it	ne
 8013776:	81a3      	strhne	r3, [r4, #12]
 8013778:	bd10      	pop	{r4, pc}

0801377a <__sclose>:
 801377a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801377e:	f000 b839 	b.w	80137f4 <_close_r>

08013782 <memset>:
 8013782:	4402      	add	r2, r0
 8013784:	4603      	mov	r3, r0
 8013786:	4293      	cmp	r3, r2
 8013788:	d100      	bne.n	801378c <memset+0xa>
 801378a:	4770      	bx	lr
 801378c:	f803 1b01 	strb.w	r1, [r3], #1
 8013790:	e7f9      	b.n	8013786 <memset+0x4>

08013792 <_raise_r>:
 8013792:	291f      	cmp	r1, #31
 8013794:	b538      	push	{r3, r4, r5, lr}
 8013796:	4605      	mov	r5, r0
 8013798:	460c      	mov	r4, r1
 801379a:	d904      	bls.n	80137a6 <_raise_r+0x14>
 801379c:	2316      	movs	r3, #22
 801379e:	6003      	str	r3, [r0, #0]
 80137a0:	f04f 30ff 	mov.w	r0, #4294967295
 80137a4:	bd38      	pop	{r3, r4, r5, pc}
 80137a6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80137a8:	b112      	cbz	r2, 80137b0 <_raise_r+0x1e>
 80137aa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80137ae:	b94b      	cbnz	r3, 80137c4 <_raise_r+0x32>
 80137b0:	4628      	mov	r0, r5
 80137b2:	f000 f865 	bl	8013880 <_getpid_r>
 80137b6:	4622      	mov	r2, r4
 80137b8:	4601      	mov	r1, r0
 80137ba:	4628      	mov	r0, r5
 80137bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80137c0:	f000 b84c 	b.w	801385c <_kill_r>
 80137c4:	2b01      	cmp	r3, #1
 80137c6:	d00a      	beq.n	80137de <_raise_r+0x4c>
 80137c8:	1c59      	adds	r1, r3, #1
 80137ca:	d103      	bne.n	80137d4 <_raise_r+0x42>
 80137cc:	2316      	movs	r3, #22
 80137ce:	6003      	str	r3, [r0, #0]
 80137d0:	2001      	movs	r0, #1
 80137d2:	e7e7      	b.n	80137a4 <_raise_r+0x12>
 80137d4:	2100      	movs	r1, #0
 80137d6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80137da:	4620      	mov	r0, r4
 80137dc:	4798      	blx	r3
 80137de:	2000      	movs	r0, #0
 80137e0:	e7e0      	b.n	80137a4 <_raise_r+0x12>
	...

080137e4 <raise>:
 80137e4:	4b02      	ldr	r3, [pc, #8]	@ (80137f0 <raise+0xc>)
 80137e6:	4601      	mov	r1, r0
 80137e8:	6818      	ldr	r0, [r3, #0]
 80137ea:	f7ff bfd2 	b.w	8013792 <_raise_r>
 80137ee:	bf00      	nop
 80137f0:	2000009c 	.word	0x2000009c

080137f4 <_close_r>:
 80137f4:	b538      	push	{r3, r4, r5, lr}
 80137f6:	4d06      	ldr	r5, [pc, #24]	@ (8013810 <_close_r+0x1c>)
 80137f8:	2300      	movs	r3, #0
 80137fa:	4604      	mov	r4, r0
 80137fc:	4608      	mov	r0, r1
 80137fe:	602b      	str	r3, [r5, #0]
 8013800:	f7ee fbfe 	bl	8002000 <_close>
 8013804:	1c43      	adds	r3, r0, #1
 8013806:	d102      	bne.n	801380e <_close_r+0x1a>
 8013808:	682b      	ldr	r3, [r5, #0]
 801380a:	b103      	cbz	r3, 801380e <_close_r+0x1a>
 801380c:	6023      	str	r3, [r4, #0]
 801380e:	bd38      	pop	{r3, r4, r5, pc}
 8013810:	2001282c 	.word	0x2001282c

08013814 <_lseek_r>:
 8013814:	b538      	push	{r3, r4, r5, lr}
 8013816:	4d07      	ldr	r5, [pc, #28]	@ (8013834 <_lseek_r+0x20>)
 8013818:	4604      	mov	r4, r0
 801381a:	4608      	mov	r0, r1
 801381c:	4611      	mov	r1, r2
 801381e:	2200      	movs	r2, #0
 8013820:	602a      	str	r2, [r5, #0]
 8013822:	461a      	mov	r2, r3
 8013824:	f7ee fbf6 	bl	8002014 <_lseek>
 8013828:	1c43      	adds	r3, r0, #1
 801382a:	d102      	bne.n	8013832 <_lseek_r+0x1e>
 801382c:	682b      	ldr	r3, [r5, #0]
 801382e:	b103      	cbz	r3, 8013832 <_lseek_r+0x1e>
 8013830:	6023      	str	r3, [r4, #0]
 8013832:	bd38      	pop	{r3, r4, r5, pc}
 8013834:	2001282c 	.word	0x2001282c

08013838 <_read_r>:
 8013838:	b538      	push	{r3, r4, r5, lr}
 801383a:	4d07      	ldr	r5, [pc, #28]	@ (8013858 <_read_r+0x20>)
 801383c:	4604      	mov	r4, r0
 801383e:	4608      	mov	r0, r1
 8013840:	4611      	mov	r1, r2
 8013842:	2200      	movs	r2, #0
 8013844:	602a      	str	r2, [r5, #0]
 8013846:	461a      	mov	r2, r3
 8013848:	f7ee fbbe 	bl	8001fc8 <_read>
 801384c:	1c43      	adds	r3, r0, #1
 801384e:	d102      	bne.n	8013856 <_read_r+0x1e>
 8013850:	682b      	ldr	r3, [r5, #0]
 8013852:	b103      	cbz	r3, 8013856 <_read_r+0x1e>
 8013854:	6023      	str	r3, [r4, #0]
 8013856:	bd38      	pop	{r3, r4, r5, pc}
 8013858:	2001282c 	.word	0x2001282c

0801385c <_kill_r>:
 801385c:	b538      	push	{r3, r4, r5, lr}
 801385e:	4d07      	ldr	r5, [pc, #28]	@ (801387c <_kill_r+0x20>)
 8013860:	2300      	movs	r3, #0
 8013862:	4604      	mov	r4, r0
 8013864:	4608      	mov	r0, r1
 8013866:	4611      	mov	r1, r2
 8013868:	602b      	str	r3, [r5, #0]
 801386a:	f7ee fb9f 	bl	8001fac <_kill>
 801386e:	1c43      	adds	r3, r0, #1
 8013870:	d102      	bne.n	8013878 <_kill_r+0x1c>
 8013872:	682b      	ldr	r3, [r5, #0]
 8013874:	b103      	cbz	r3, 8013878 <_kill_r+0x1c>
 8013876:	6023      	str	r3, [r4, #0]
 8013878:	bd38      	pop	{r3, r4, r5, pc}
 801387a:	bf00      	nop
 801387c:	2001282c 	.word	0x2001282c

08013880 <_getpid_r>:
 8013880:	f7ee bb92 	b.w	8001fa8 <_getpid>

08013884 <_sbrk_r>:
 8013884:	b538      	push	{r3, r4, r5, lr}
 8013886:	4d06      	ldr	r5, [pc, #24]	@ (80138a0 <_sbrk_r+0x1c>)
 8013888:	2300      	movs	r3, #0
 801388a:	4604      	mov	r4, r0
 801388c:	4608      	mov	r0, r1
 801388e:	602b      	str	r3, [r5, #0]
 8013890:	f7ee fbc2 	bl	8002018 <_sbrk>
 8013894:	1c43      	adds	r3, r0, #1
 8013896:	d102      	bne.n	801389e <_sbrk_r+0x1a>
 8013898:	682b      	ldr	r3, [r5, #0]
 801389a:	b103      	cbz	r3, 801389e <_sbrk_r+0x1a>
 801389c:	6023      	str	r3, [r4, #0]
 801389e:	bd38      	pop	{r3, r4, r5, pc}
 80138a0:	2001282c 	.word	0x2001282c

080138a4 <_write_r>:
 80138a4:	b538      	push	{r3, r4, r5, lr}
 80138a6:	4d07      	ldr	r5, [pc, #28]	@ (80138c4 <_write_r+0x20>)
 80138a8:	4604      	mov	r4, r0
 80138aa:	4608      	mov	r0, r1
 80138ac:	4611      	mov	r1, r2
 80138ae:	2200      	movs	r2, #0
 80138b0:	602a      	str	r2, [r5, #0]
 80138b2:	461a      	mov	r2, r3
 80138b4:	f7ee fb96 	bl	8001fe4 <_write>
 80138b8:	1c43      	adds	r3, r0, #1
 80138ba:	d102      	bne.n	80138c2 <_write_r+0x1e>
 80138bc:	682b      	ldr	r3, [r5, #0]
 80138be:	b103      	cbz	r3, 80138c2 <_write_r+0x1e>
 80138c0:	6023      	str	r3, [r4, #0]
 80138c2:	bd38      	pop	{r3, r4, r5, pc}
 80138c4:	2001282c 	.word	0x2001282c

080138c8 <__errno>:
 80138c8:	4b01      	ldr	r3, [pc, #4]	@ (80138d0 <__errno+0x8>)
 80138ca:	6818      	ldr	r0, [r3, #0]
 80138cc:	4770      	bx	lr
 80138ce:	bf00      	nop
 80138d0:	2000009c 	.word	0x2000009c

080138d4 <__libc_init_array>:
 80138d4:	b570      	push	{r4, r5, r6, lr}
 80138d6:	4d0d      	ldr	r5, [pc, #52]	@ (801390c <__libc_init_array+0x38>)
 80138d8:	4c0d      	ldr	r4, [pc, #52]	@ (8013910 <__libc_init_array+0x3c>)
 80138da:	1b64      	subs	r4, r4, r5
 80138dc:	10a4      	asrs	r4, r4, #2
 80138de:	2600      	movs	r6, #0
 80138e0:	42a6      	cmp	r6, r4
 80138e2:	d109      	bne.n	80138f8 <__libc_init_array+0x24>
 80138e4:	4d0b      	ldr	r5, [pc, #44]	@ (8013914 <__libc_init_array+0x40>)
 80138e6:	4c0c      	ldr	r4, [pc, #48]	@ (8013918 <__libc_init_array+0x44>)
 80138e8:	f000 fd64 	bl	80143b4 <_init>
 80138ec:	1b64      	subs	r4, r4, r5
 80138ee:	10a4      	asrs	r4, r4, #2
 80138f0:	2600      	movs	r6, #0
 80138f2:	42a6      	cmp	r6, r4
 80138f4:	d105      	bne.n	8013902 <__libc_init_array+0x2e>
 80138f6:	bd70      	pop	{r4, r5, r6, pc}
 80138f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80138fc:	4798      	blx	r3
 80138fe:	3601      	adds	r6, #1
 8013900:	e7ee      	b.n	80138e0 <__libc_init_array+0xc>
 8013902:	f855 3b04 	ldr.w	r3, [r5], #4
 8013906:	4798      	blx	r3
 8013908:	3601      	adds	r6, #1
 801390a:	e7f2      	b.n	80138f2 <__libc_init_array+0x1e>
 801390c:	080f9420 	.word	0x080f9420
 8013910:	080f9420 	.word	0x080f9420
 8013914:	080f9420 	.word	0x080f9420
 8013918:	080f9434 	.word	0x080f9434

0801391c <__retarget_lock_init_recursive>:
 801391c:	4770      	bx	lr

0801391e <__retarget_lock_acquire_recursive>:
 801391e:	4770      	bx	lr

08013920 <__retarget_lock_release_recursive>:
 8013920:	4770      	bx	lr

08013922 <memcpy>:
 8013922:	440a      	add	r2, r1
 8013924:	4291      	cmp	r1, r2
 8013926:	f100 33ff 	add.w	r3, r0, #4294967295
 801392a:	d100      	bne.n	801392e <memcpy+0xc>
 801392c:	4770      	bx	lr
 801392e:	b510      	push	{r4, lr}
 8013930:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013934:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013938:	4291      	cmp	r1, r2
 801393a:	d1f9      	bne.n	8013930 <memcpy+0xe>
 801393c:	bd10      	pop	{r4, pc}
	...

08013940 <__register_exitproc>:
 8013940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013944:	4d27      	ldr	r5, [pc, #156]	@ (80139e4 <__register_exitproc+0xa4>)
 8013946:	4607      	mov	r7, r0
 8013948:	6828      	ldr	r0, [r5, #0]
 801394a:	4691      	mov	r9, r2
 801394c:	460e      	mov	r6, r1
 801394e:	4698      	mov	r8, r3
 8013950:	f7ff ffe5 	bl	801391e <__retarget_lock_acquire_recursive>
 8013954:	4a24      	ldr	r2, [pc, #144]	@ (80139e8 <__register_exitproc+0xa8>)
 8013956:	6814      	ldr	r4, [r2, #0]
 8013958:	b93c      	cbnz	r4, 801396a <__register_exitproc+0x2a>
 801395a:	4b24      	ldr	r3, [pc, #144]	@ (80139ec <__register_exitproc+0xac>)
 801395c:	6013      	str	r3, [r2, #0]
 801395e:	4a24      	ldr	r2, [pc, #144]	@ (80139f0 <__register_exitproc+0xb0>)
 8013960:	b112      	cbz	r2, 8013968 <__register_exitproc+0x28>
 8013962:	6812      	ldr	r2, [r2, #0]
 8013964:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8013968:	4c20      	ldr	r4, [pc, #128]	@ (80139ec <__register_exitproc+0xac>)
 801396a:	6863      	ldr	r3, [r4, #4]
 801396c:	2b1f      	cmp	r3, #31
 801396e:	dd06      	ble.n	801397e <__register_exitproc+0x3e>
 8013970:	6828      	ldr	r0, [r5, #0]
 8013972:	f7ff ffd5 	bl	8013920 <__retarget_lock_release_recursive>
 8013976:	f04f 30ff 	mov.w	r0, #4294967295
 801397a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801397e:	b32f      	cbz	r7, 80139cc <__register_exitproc+0x8c>
 8013980:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8013984:	b968      	cbnz	r0, 80139a2 <__register_exitproc+0x62>
 8013986:	4b1b      	ldr	r3, [pc, #108]	@ (80139f4 <__register_exitproc+0xb4>)
 8013988:	2b00      	cmp	r3, #0
 801398a:	d0f1      	beq.n	8013970 <__register_exitproc+0x30>
 801398c:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8013990:	f7ff fd14 	bl	80133bc <malloc>
 8013994:	2800      	cmp	r0, #0
 8013996:	d0eb      	beq.n	8013970 <__register_exitproc+0x30>
 8013998:	2300      	movs	r3, #0
 801399a:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 801399e:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 80139a2:	6863      	ldr	r3, [r4, #4]
 80139a4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80139a8:	2201      	movs	r2, #1
 80139aa:	409a      	lsls	r2, r3
 80139ac:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80139b0:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 80139b4:	4313      	orrs	r3, r2
 80139b6:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 80139ba:	2f02      	cmp	r7, #2
 80139bc:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 80139c0:	bf02      	ittt	eq
 80139c2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 80139c6:	4313      	orreq	r3, r2
 80139c8:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 80139cc:	6863      	ldr	r3, [r4, #4]
 80139ce:	6828      	ldr	r0, [r5, #0]
 80139d0:	1c5a      	adds	r2, r3, #1
 80139d2:	3302      	adds	r3, #2
 80139d4:	6062      	str	r2, [r4, #4]
 80139d6:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 80139da:	f7ff ffa1 	bl	8013920 <__retarget_lock_release_recursive>
 80139de:	2000      	movs	r0, #0
 80139e0:	e7cb      	b.n	801397a <__register_exitproc+0x3a>
 80139e2:	bf00      	nop
 80139e4:	200000ec 	.word	0x200000ec
 80139e8:	200128c0 	.word	0x200128c0
 80139ec:	20012834 	.word	0x20012834
 80139f0:	08015d98 	.word	0x08015d98
 80139f4:	080133bd 	.word	0x080133bd

080139f8 <_free_r>:
 80139f8:	b538      	push	{r3, r4, r5, lr}
 80139fa:	4605      	mov	r5, r0
 80139fc:	2900      	cmp	r1, #0
 80139fe:	d041      	beq.n	8013a84 <_free_r+0x8c>
 8013a00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013a04:	1f0c      	subs	r4, r1, #4
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	bfb8      	it	lt
 8013a0a:	18e4      	addlt	r4, r4, r3
 8013a0c:	f7ff fd88 	bl	8013520 <__malloc_lock>
 8013a10:	4a1d      	ldr	r2, [pc, #116]	@ (8013a88 <_free_r+0x90>)
 8013a12:	6813      	ldr	r3, [r2, #0]
 8013a14:	b933      	cbnz	r3, 8013a24 <_free_r+0x2c>
 8013a16:	6063      	str	r3, [r4, #4]
 8013a18:	6014      	str	r4, [r2, #0]
 8013a1a:	4628      	mov	r0, r5
 8013a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013a20:	f7ff bd84 	b.w	801352c <__malloc_unlock>
 8013a24:	42a3      	cmp	r3, r4
 8013a26:	d908      	bls.n	8013a3a <_free_r+0x42>
 8013a28:	6820      	ldr	r0, [r4, #0]
 8013a2a:	1821      	adds	r1, r4, r0
 8013a2c:	428b      	cmp	r3, r1
 8013a2e:	bf01      	itttt	eq
 8013a30:	6819      	ldreq	r1, [r3, #0]
 8013a32:	685b      	ldreq	r3, [r3, #4]
 8013a34:	1809      	addeq	r1, r1, r0
 8013a36:	6021      	streq	r1, [r4, #0]
 8013a38:	e7ed      	b.n	8013a16 <_free_r+0x1e>
 8013a3a:	461a      	mov	r2, r3
 8013a3c:	685b      	ldr	r3, [r3, #4]
 8013a3e:	b10b      	cbz	r3, 8013a44 <_free_r+0x4c>
 8013a40:	42a3      	cmp	r3, r4
 8013a42:	d9fa      	bls.n	8013a3a <_free_r+0x42>
 8013a44:	6811      	ldr	r1, [r2, #0]
 8013a46:	1850      	adds	r0, r2, r1
 8013a48:	42a0      	cmp	r0, r4
 8013a4a:	d10b      	bne.n	8013a64 <_free_r+0x6c>
 8013a4c:	6820      	ldr	r0, [r4, #0]
 8013a4e:	4401      	add	r1, r0
 8013a50:	1850      	adds	r0, r2, r1
 8013a52:	4283      	cmp	r3, r0
 8013a54:	6011      	str	r1, [r2, #0]
 8013a56:	d1e0      	bne.n	8013a1a <_free_r+0x22>
 8013a58:	6818      	ldr	r0, [r3, #0]
 8013a5a:	685b      	ldr	r3, [r3, #4]
 8013a5c:	6053      	str	r3, [r2, #4]
 8013a5e:	4408      	add	r0, r1
 8013a60:	6010      	str	r0, [r2, #0]
 8013a62:	e7da      	b.n	8013a1a <_free_r+0x22>
 8013a64:	d902      	bls.n	8013a6c <_free_r+0x74>
 8013a66:	230c      	movs	r3, #12
 8013a68:	602b      	str	r3, [r5, #0]
 8013a6a:	e7d6      	b.n	8013a1a <_free_r+0x22>
 8013a6c:	6820      	ldr	r0, [r4, #0]
 8013a6e:	1821      	adds	r1, r4, r0
 8013a70:	428b      	cmp	r3, r1
 8013a72:	bf04      	itt	eq
 8013a74:	6819      	ldreq	r1, [r3, #0]
 8013a76:	685b      	ldreq	r3, [r3, #4]
 8013a78:	6063      	str	r3, [r4, #4]
 8013a7a:	bf04      	itt	eq
 8013a7c:	1809      	addeq	r1, r1, r0
 8013a7e:	6021      	streq	r1, [r4, #0]
 8013a80:	6054      	str	r4, [r2, #4]
 8013a82:	e7ca      	b.n	8013a1a <_free_r+0x22>
 8013a84:	bd38      	pop	{r3, r4, r5, pc}
 8013a86:	bf00      	nop
 8013a88:	200126ec 	.word	0x200126ec

08013a8c <__sfputc_r>:
 8013a8c:	6893      	ldr	r3, [r2, #8]
 8013a8e:	3b01      	subs	r3, #1
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	b410      	push	{r4}
 8013a94:	6093      	str	r3, [r2, #8]
 8013a96:	da08      	bge.n	8013aaa <__sfputc_r+0x1e>
 8013a98:	6994      	ldr	r4, [r2, #24]
 8013a9a:	42a3      	cmp	r3, r4
 8013a9c:	db01      	blt.n	8013aa2 <__sfputc_r+0x16>
 8013a9e:	290a      	cmp	r1, #10
 8013aa0:	d103      	bne.n	8013aaa <__sfputc_r+0x1e>
 8013aa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013aa6:	f000 bb6d 	b.w	8014184 <__swbuf_r>
 8013aaa:	6813      	ldr	r3, [r2, #0]
 8013aac:	1c58      	adds	r0, r3, #1
 8013aae:	6010      	str	r0, [r2, #0]
 8013ab0:	7019      	strb	r1, [r3, #0]
 8013ab2:	4608      	mov	r0, r1
 8013ab4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013ab8:	4770      	bx	lr

08013aba <__sfputs_r>:
 8013aba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013abc:	4606      	mov	r6, r0
 8013abe:	460f      	mov	r7, r1
 8013ac0:	4614      	mov	r4, r2
 8013ac2:	18d5      	adds	r5, r2, r3
 8013ac4:	42ac      	cmp	r4, r5
 8013ac6:	d101      	bne.n	8013acc <__sfputs_r+0x12>
 8013ac8:	2000      	movs	r0, #0
 8013aca:	e007      	b.n	8013adc <__sfputs_r+0x22>
 8013acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ad0:	463a      	mov	r2, r7
 8013ad2:	4630      	mov	r0, r6
 8013ad4:	f7ff ffda 	bl	8013a8c <__sfputc_r>
 8013ad8:	1c43      	adds	r3, r0, #1
 8013ada:	d1f3      	bne.n	8013ac4 <__sfputs_r+0xa>
 8013adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013ae0 <_vfiprintf_r>:
 8013ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ae4:	460d      	mov	r5, r1
 8013ae6:	b09d      	sub	sp, #116	@ 0x74
 8013ae8:	4614      	mov	r4, r2
 8013aea:	4698      	mov	r8, r3
 8013aec:	4606      	mov	r6, r0
 8013aee:	b118      	cbz	r0, 8013af8 <_vfiprintf_r+0x18>
 8013af0:	6a03      	ldr	r3, [r0, #32]
 8013af2:	b90b      	cbnz	r3, 8013af8 <_vfiprintf_r+0x18>
 8013af4:	f7ff fdba 	bl	801366c <__sinit>
 8013af8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013afa:	07d9      	lsls	r1, r3, #31
 8013afc:	d405      	bmi.n	8013b0a <_vfiprintf_r+0x2a>
 8013afe:	89ab      	ldrh	r3, [r5, #12]
 8013b00:	059a      	lsls	r2, r3, #22
 8013b02:	d402      	bmi.n	8013b0a <_vfiprintf_r+0x2a>
 8013b04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013b06:	f7ff ff0a 	bl	801391e <__retarget_lock_acquire_recursive>
 8013b0a:	89ab      	ldrh	r3, [r5, #12]
 8013b0c:	071b      	lsls	r3, r3, #28
 8013b0e:	d501      	bpl.n	8013b14 <_vfiprintf_r+0x34>
 8013b10:	692b      	ldr	r3, [r5, #16]
 8013b12:	b99b      	cbnz	r3, 8013b3c <_vfiprintf_r+0x5c>
 8013b14:	4629      	mov	r1, r5
 8013b16:	4630      	mov	r0, r6
 8013b18:	f000 fb72 	bl	8014200 <__swsetup_r>
 8013b1c:	b170      	cbz	r0, 8013b3c <_vfiprintf_r+0x5c>
 8013b1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013b20:	07dc      	lsls	r4, r3, #31
 8013b22:	d504      	bpl.n	8013b2e <_vfiprintf_r+0x4e>
 8013b24:	f04f 30ff 	mov.w	r0, #4294967295
 8013b28:	b01d      	add	sp, #116	@ 0x74
 8013b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b2e:	89ab      	ldrh	r3, [r5, #12]
 8013b30:	0598      	lsls	r0, r3, #22
 8013b32:	d4f7      	bmi.n	8013b24 <_vfiprintf_r+0x44>
 8013b34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013b36:	f7ff fef3 	bl	8013920 <__retarget_lock_release_recursive>
 8013b3a:	e7f3      	b.n	8013b24 <_vfiprintf_r+0x44>
 8013b3c:	2300      	movs	r3, #0
 8013b3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8013b40:	2320      	movs	r3, #32
 8013b42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013b46:	f8cd 800c 	str.w	r8, [sp, #12]
 8013b4a:	2330      	movs	r3, #48	@ 0x30
 8013b4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013cfc <_vfiprintf_r+0x21c>
 8013b50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013b54:	f04f 0901 	mov.w	r9, #1
 8013b58:	4623      	mov	r3, r4
 8013b5a:	469a      	mov	sl, r3
 8013b5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013b60:	b10a      	cbz	r2, 8013b66 <_vfiprintf_r+0x86>
 8013b62:	2a25      	cmp	r2, #37	@ 0x25
 8013b64:	d1f9      	bne.n	8013b5a <_vfiprintf_r+0x7a>
 8013b66:	ebba 0b04 	subs.w	fp, sl, r4
 8013b6a:	d00b      	beq.n	8013b84 <_vfiprintf_r+0xa4>
 8013b6c:	465b      	mov	r3, fp
 8013b6e:	4622      	mov	r2, r4
 8013b70:	4629      	mov	r1, r5
 8013b72:	4630      	mov	r0, r6
 8013b74:	f7ff ffa1 	bl	8013aba <__sfputs_r>
 8013b78:	3001      	adds	r0, #1
 8013b7a:	f000 80a7 	beq.w	8013ccc <_vfiprintf_r+0x1ec>
 8013b7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013b80:	445a      	add	r2, fp
 8013b82:	9209      	str	r2, [sp, #36]	@ 0x24
 8013b84:	f89a 3000 	ldrb.w	r3, [sl]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	f000 809f 	beq.w	8013ccc <_vfiprintf_r+0x1ec>
 8013b8e:	2300      	movs	r3, #0
 8013b90:	f04f 32ff 	mov.w	r2, #4294967295
 8013b94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013b98:	f10a 0a01 	add.w	sl, sl, #1
 8013b9c:	9304      	str	r3, [sp, #16]
 8013b9e:	9307      	str	r3, [sp, #28]
 8013ba0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013ba4:	931a      	str	r3, [sp, #104]	@ 0x68
 8013ba6:	4654      	mov	r4, sl
 8013ba8:	2205      	movs	r2, #5
 8013baa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013bae:	4853      	ldr	r0, [pc, #332]	@ (8013cfc <_vfiprintf_r+0x21c>)
 8013bb0:	f7ec fb1e 	bl	80001f0 <memchr>
 8013bb4:	9a04      	ldr	r2, [sp, #16]
 8013bb6:	b9d8      	cbnz	r0, 8013bf0 <_vfiprintf_r+0x110>
 8013bb8:	06d1      	lsls	r1, r2, #27
 8013bba:	bf44      	itt	mi
 8013bbc:	2320      	movmi	r3, #32
 8013bbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013bc2:	0713      	lsls	r3, r2, #28
 8013bc4:	bf44      	itt	mi
 8013bc6:	232b      	movmi	r3, #43	@ 0x2b
 8013bc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013bcc:	f89a 3000 	ldrb.w	r3, [sl]
 8013bd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8013bd2:	d015      	beq.n	8013c00 <_vfiprintf_r+0x120>
 8013bd4:	9a07      	ldr	r2, [sp, #28]
 8013bd6:	4654      	mov	r4, sl
 8013bd8:	2000      	movs	r0, #0
 8013bda:	f04f 0c0a 	mov.w	ip, #10
 8013bde:	4621      	mov	r1, r4
 8013be0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013be4:	3b30      	subs	r3, #48	@ 0x30
 8013be6:	2b09      	cmp	r3, #9
 8013be8:	d94b      	bls.n	8013c82 <_vfiprintf_r+0x1a2>
 8013bea:	b1b0      	cbz	r0, 8013c1a <_vfiprintf_r+0x13a>
 8013bec:	9207      	str	r2, [sp, #28]
 8013bee:	e014      	b.n	8013c1a <_vfiprintf_r+0x13a>
 8013bf0:	eba0 0308 	sub.w	r3, r0, r8
 8013bf4:	fa09 f303 	lsl.w	r3, r9, r3
 8013bf8:	4313      	orrs	r3, r2
 8013bfa:	9304      	str	r3, [sp, #16]
 8013bfc:	46a2      	mov	sl, r4
 8013bfe:	e7d2      	b.n	8013ba6 <_vfiprintf_r+0xc6>
 8013c00:	9b03      	ldr	r3, [sp, #12]
 8013c02:	1d19      	adds	r1, r3, #4
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	9103      	str	r1, [sp, #12]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	bfbb      	ittet	lt
 8013c0c:	425b      	neglt	r3, r3
 8013c0e:	f042 0202 	orrlt.w	r2, r2, #2
 8013c12:	9307      	strge	r3, [sp, #28]
 8013c14:	9307      	strlt	r3, [sp, #28]
 8013c16:	bfb8      	it	lt
 8013c18:	9204      	strlt	r2, [sp, #16]
 8013c1a:	7823      	ldrb	r3, [r4, #0]
 8013c1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8013c1e:	d10a      	bne.n	8013c36 <_vfiprintf_r+0x156>
 8013c20:	7863      	ldrb	r3, [r4, #1]
 8013c22:	2b2a      	cmp	r3, #42	@ 0x2a
 8013c24:	d132      	bne.n	8013c8c <_vfiprintf_r+0x1ac>
 8013c26:	9b03      	ldr	r3, [sp, #12]
 8013c28:	1d1a      	adds	r2, r3, #4
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	9203      	str	r2, [sp, #12]
 8013c2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013c32:	3402      	adds	r4, #2
 8013c34:	9305      	str	r3, [sp, #20]
 8013c36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013d0c <_vfiprintf_r+0x22c>
 8013c3a:	7821      	ldrb	r1, [r4, #0]
 8013c3c:	2203      	movs	r2, #3
 8013c3e:	4650      	mov	r0, sl
 8013c40:	f7ec fad6 	bl	80001f0 <memchr>
 8013c44:	b138      	cbz	r0, 8013c56 <_vfiprintf_r+0x176>
 8013c46:	9b04      	ldr	r3, [sp, #16]
 8013c48:	eba0 000a 	sub.w	r0, r0, sl
 8013c4c:	2240      	movs	r2, #64	@ 0x40
 8013c4e:	4082      	lsls	r2, r0
 8013c50:	4313      	orrs	r3, r2
 8013c52:	3401      	adds	r4, #1
 8013c54:	9304      	str	r3, [sp, #16]
 8013c56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c5a:	4829      	ldr	r0, [pc, #164]	@ (8013d00 <_vfiprintf_r+0x220>)
 8013c5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013c60:	2206      	movs	r2, #6
 8013c62:	f7ec fac5 	bl	80001f0 <memchr>
 8013c66:	2800      	cmp	r0, #0
 8013c68:	d03f      	beq.n	8013cea <_vfiprintf_r+0x20a>
 8013c6a:	4b26      	ldr	r3, [pc, #152]	@ (8013d04 <_vfiprintf_r+0x224>)
 8013c6c:	bb1b      	cbnz	r3, 8013cb6 <_vfiprintf_r+0x1d6>
 8013c6e:	9b03      	ldr	r3, [sp, #12]
 8013c70:	3307      	adds	r3, #7
 8013c72:	f023 0307 	bic.w	r3, r3, #7
 8013c76:	3308      	adds	r3, #8
 8013c78:	9303      	str	r3, [sp, #12]
 8013c7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c7c:	443b      	add	r3, r7
 8013c7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8013c80:	e76a      	b.n	8013b58 <_vfiprintf_r+0x78>
 8013c82:	fb0c 3202 	mla	r2, ip, r2, r3
 8013c86:	460c      	mov	r4, r1
 8013c88:	2001      	movs	r0, #1
 8013c8a:	e7a8      	b.n	8013bde <_vfiprintf_r+0xfe>
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	3401      	adds	r4, #1
 8013c90:	9305      	str	r3, [sp, #20]
 8013c92:	4619      	mov	r1, r3
 8013c94:	f04f 0c0a 	mov.w	ip, #10
 8013c98:	4620      	mov	r0, r4
 8013c9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013c9e:	3a30      	subs	r2, #48	@ 0x30
 8013ca0:	2a09      	cmp	r2, #9
 8013ca2:	d903      	bls.n	8013cac <_vfiprintf_r+0x1cc>
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d0c6      	beq.n	8013c36 <_vfiprintf_r+0x156>
 8013ca8:	9105      	str	r1, [sp, #20]
 8013caa:	e7c4      	b.n	8013c36 <_vfiprintf_r+0x156>
 8013cac:	fb0c 2101 	mla	r1, ip, r1, r2
 8013cb0:	4604      	mov	r4, r0
 8013cb2:	2301      	movs	r3, #1
 8013cb4:	e7f0      	b.n	8013c98 <_vfiprintf_r+0x1b8>
 8013cb6:	ab03      	add	r3, sp, #12
 8013cb8:	9300      	str	r3, [sp, #0]
 8013cba:	462a      	mov	r2, r5
 8013cbc:	4b12      	ldr	r3, [pc, #72]	@ (8013d08 <_vfiprintf_r+0x228>)
 8013cbe:	a904      	add	r1, sp, #16
 8013cc0:	4630      	mov	r0, r6
 8013cc2:	f3af 8000 	nop.w
 8013cc6:	4607      	mov	r7, r0
 8013cc8:	1c78      	adds	r0, r7, #1
 8013cca:	d1d6      	bne.n	8013c7a <_vfiprintf_r+0x19a>
 8013ccc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013cce:	07d9      	lsls	r1, r3, #31
 8013cd0:	d405      	bmi.n	8013cde <_vfiprintf_r+0x1fe>
 8013cd2:	89ab      	ldrh	r3, [r5, #12]
 8013cd4:	059a      	lsls	r2, r3, #22
 8013cd6:	d402      	bmi.n	8013cde <_vfiprintf_r+0x1fe>
 8013cd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013cda:	f7ff fe21 	bl	8013920 <__retarget_lock_release_recursive>
 8013cde:	89ab      	ldrh	r3, [r5, #12]
 8013ce0:	065b      	lsls	r3, r3, #25
 8013ce2:	f53f af1f 	bmi.w	8013b24 <_vfiprintf_r+0x44>
 8013ce6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013ce8:	e71e      	b.n	8013b28 <_vfiprintf_r+0x48>
 8013cea:	ab03      	add	r3, sp, #12
 8013cec:	9300      	str	r3, [sp, #0]
 8013cee:	462a      	mov	r2, r5
 8013cf0:	4b05      	ldr	r3, [pc, #20]	@ (8013d08 <_vfiprintf_r+0x228>)
 8013cf2:	a904      	add	r1, sp, #16
 8013cf4:	4630      	mov	r0, r6
 8013cf6:	f000 f879 	bl	8013dec <_printf_i>
 8013cfa:	e7e4      	b.n	8013cc6 <_vfiprintf_r+0x1e6>
 8013cfc:	08015d9c 	.word	0x08015d9c
 8013d00:	08015da6 	.word	0x08015da6
 8013d04:	00000000 	.word	0x00000000
 8013d08:	08013abb 	.word	0x08013abb
 8013d0c:	08015da2 	.word	0x08015da2

08013d10 <_printf_common>:
 8013d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d14:	4616      	mov	r6, r2
 8013d16:	4698      	mov	r8, r3
 8013d18:	688a      	ldr	r2, [r1, #8]
 8013d1a:	690b      	ldr	r3, [r1, #16]
 8013d1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013d20:	4293      	cmp	r3, r2
 8013d22:	bfb8      	it	lt
 8013d24:	4613      	movlt	r3, r2
 8013d26:	6033      	str	r3, [r6, #0]
 8013d28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013d2c:	4607      	mov	r7, r0
 8013d2e:	460c      	mov	r4, r1
 8013d30:	b10a      	cbz	r2, 8013d36 <_printf_common+0x26>
 8013d32:	3301      	adds	r3, #1
 8013d34:	6033      	str	r3, [r6, #0]
 8013d36:	6823      	ldr	r3, [r4, #0]
 8013d38:	0699      	lsls	r1, r3, #26
 8013d3a:	bf42      	ittt	mi
 8013d3c:	6833      	ldrmi	r3, [r6, #0]
 8013d3e:	3302      	addmi	r3, #2
 8013d40:	6033      	strmi	r3, [r6, #0]
 8013d42:	6825      	ldr	r5, [r4, #0]
 8013d44:	f015 0506 	ands.w	r5, r5, #6
 8013d48:	d106      	bne.n	8013d58 <_printf_common+0x48>
 8013d4a:	f104 0a19 	add.w	sl, r4, #25
 8013d4e:	68e3      	ldr	r3, [r4, #12]
 8013d50:	6832      	ldr	r2, [r6, #0]
 8013d52:	1a9b      	subs	r3, r3, r2
 8013d54:	42ab      	cmp	r3, r5
 8013d56:	dc26      	bgt.n	8013da6 <_printf_common+0x96>
 8013d58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013d5c:	6822      	ldr	r2, [r4, #0]
 8013d5e:	3b00      	subs	r3, #0
 8013d60:	bf18      	it	ne
 8013d62:	2301      	movne	r3, #1
 8013d64:	0692      	lsls	r2, r2, #26
 8013d66:	d42b      	bmi.n	8013dc0 <_printf_common+0xb0>
 8013d68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013d6c:	4641      	mov	r1, r8
 8013d6e:	4638      	mov	r0, r7
 8013d70:	47c8      	blx	r9
 8013d72:	3001      	adds	r0, #1
 8013d74:	d01e      	beq.n	8013db4 <_printf_common+0xa4>
 8013d76:	6823      	ldr	r3, [r4, #0]
 8013d78:	6922      	ldr	r2, [r4, #16]
 8013d7a:	f003 0306 	and.w	r3, r3, #6
 8013d7e:	2b04      	cmp	r3, #4
 8013d80:	bf02      	ittt	eq
 8013d82:	68e5      	ldreq	r5, [r4, #12]
 8013d84:	6833      	ldreq	r3, [r6, #0]
 8013d86:	1aed      	subeq	r5, r5, r3
 8013d88:	68a3      	ldr	r3, [r4, #8]
 8013d8a:	bf0c      	ite	eq
 8013d8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013d90:	2500      	movne	r5, #0
 8013d92:	4293      	cmp	r3, r2
 8013d94:	bfc4      	itt	gt
 8013d96:	1a9b      	subgt	r3, r3, r2
 8013d98:	18ed      	addgt	r5, r5, r3
 8013d9a:	2600      	movs	r6, #0
 8013d9c:	341a      	adds	r4, #26
 8013d9e:	42b5      	cmp	r5, r6
 8013da0:	d11a      	bne.n	8013dd8 <_printf_common+0xc8>
 8013da2:	2000      	movs	r0, #0
 8013da4:	e008      	b.n	8013db8 <_printf_common+0xa8>
 8013da6:	2301      	movs	r3, #1
 8013da8:	4652      	mov	r2, sl
 8013daa:	4641      	mov	r1, r8
 8013dac:	4638      	mov	r0, r7
 8013dae:	47c8      	blx	r9
 8013db0:	3001      	adds	r0, #1
 8013db2:	d103      	bne.n	8013dbc <_printf_common+0xac>
 8013db4:	f04f 30ff 	mov.w	r0, #4294967295
 8013db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013dbc:	3501      	adds	r5, #1
 8013dbe:	e7c6      	b.n	8013d4e <_printf_common+0x3e>
 8013dc0:	18e1      	adds	r1, r4, r3
 8013dc2:	1c5a      	adds	r2, r3, #1
 8013dc4:	2030      	movs	r0, #48	@ 0x30
 8013dc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013dca:	4422      	add	r2, r4
 8013dcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013dd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013dd4:	3302      	adds	r3, #2
 8013dd6:	e7c7      	b.n	8013d68 <_printf_common+0x58>
 8013dd8:	2301      	movs	r3, #1
 8013dda:	4622      	mov	r2, r4
 8013ddc:	4641      	mov	r1, r8
 8013dde:	4638      	mov	r0, r7
 8013de0:	47c8      	blx	r9
 8013de2:	3001      	adds	r0, #1
 8013de4:	d0e6      	beq.n	8013db4 <_printf_common+0xa4>
 8013de6:	3601      	adds	r6, #1
 8013de8:	e7d9      	b.n	8013d9e <_printf_common+0x8e>
	...

08013dec <_printf_i>:
 8013dec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013df0:	7e0f      	ldrb	r7, [r1, #24]
 8013df2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013df4:	2f78      	cmp	r7, #120	@ 0x78
 8013df6:	4691      	mov	r9, r2
 8013df8:	4680      	mov	r8, r0
 8013dfa:	460c      	mov	r4, r1
 8013dfc:	469a      	mov	sl, r3
 8013dfe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013e02:	d807      	bhi.n	8013e14 <_printf_i+0x28>
 8013e04:	2f62      	cmp	r7, #98	@ 0x62
 8013e06:	d80a      	bhi.n	8013e1e <_printf_i+0x32>
 8013e08:	2f00      	cmp	r7, #0
 8013e0a:	f000 80d2 	beq.w	8013fb2 <_printf_i+0x1c6>
 8013e0e:	2f58      	cmp	r7, #88	@ 0x58
 8013e10:	f000 80b9 	beq.w	8013f86 <_printf_i+0x19a>
 8013e14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013e18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013e1c:	e03a      	b.n	8013e94 <_printf_i+0xa8>
 8013e1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013e22:	2b15      	cmp	r3, #21
 8013e24:	d8f6      	bhi.n	8013e14 <_printf_i+0x28>
 8013e26:	a101      	add	r1, pc, #4	@ (adr r1, 8013e2c <_printf_i+0x40>)
 8013e28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013e2c:	08013e85 	.word	0x08013e85
 8013e30:	08013e99 	.word	0x08013e99
 8013e34:	08013e15 	.word	0x08013e15
 8013e38:	08013e15 	.word	0x08013e15
 8013e3c:	08013e15 	.word	0x08013e15
 8013e40:	08013e15 	.word	0x08013e15
 8013e44:	08013e99 	.word	0x08013e99
 8013e48:	08013e15 	.word	0x08013e15
 8013e4c:	08013e15 	.word	0x08013e15
 8013e50:	08013e15 	.word	0x08013e15
 8013e54:	08013e15 	.word	0x08013e15
 8013e58:	08013f99 	.word	0x08013f99
 8013e5c:	08013ec3 	.word	0x08013ec3
 8013e60:	08013f53 	.word	0x08013f53
 8013e64:	08013e15 	.word	0x08013e15
 8013e68:	08013e15 	.word	0x08013e15
 8013e6c:	08013fbb 	.word	0x08013fbb
 8013e70:	08013e15 	.word	0x08013e15
 8013e74:	08013ec3 	.word	0x08013ec3
 8013e78:	08013e15 	.word	0x08013e15
 8013e7c:	08013e15 	.word	0x08013e15
 8013e80:	08013f5b 	.word	0x08013f5b
 8013e84:	6833      	ldr	r3, [r6, #0]
 8013e86:	1d1a      	adds	r2, r3, #4
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	6032      	str	r2, [r6, #0]
 8013e8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013e90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013e94:	2301      	movs	r3, #1
 8013e96:	e09d      	b.n	8013fd4 <_printf_i+0x1e8>
 8013e98:	6833      	ldr	r3, [r6, #0]
 8013e9a:	6820      	ldr	r0, [r4, #0]
 8013e9c:	1d19      	adds	r1, r3, #4
 8013e9e:	6031      	str	r1, [r6, #0]
 8013ea0:	0606      	lsls	r6, r0, #24
 8013ea2:	d501      	bpl.n	8013ea8 <_printf_i+0xbc>
 8013ea4:	681d      	ldr	r5, [r3, #0]
 8013ea6:	e003      	b.n	8013eb0 <_printf_i+0xc4>
 8013ea8:	0645      	lsls	r5, r0, #25
 8013eaa:	d5fb      	bpl.n	8013ea4 <_printf_i+0xb8>
 8013eac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013eb0:	2d00      	cmp	r5, #0
 8013eb2:	da03      	bge.n	8013ebc <_printf_i+0xd0>
 8013eb4:	232d      	movs	r3, #45	@ 0x2d
 8013eb6:	426d      	negs	r5, r5
 8013eb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013ebc:	4859      	ldr	r0, [pc, #356]	@ (8014024 <_printf_i+0x238>)
 8013ebe:	230a      	movs	r3, #10
 8013ec0:	e011      	b.n	8013ee6 <_printf_i+0xfa>
 8013ec2:	6821      	ldr	r1, [r4, #0]
 8013ec4:	6833      	ldr	r3, [r6, #0]
 8013ec6:	0608      	lsls	r0, r1, #24
 8013ec8:	f853 5b04 	ldr.w	r5, [r3], #4
 8013ecc:	d402      	bmi.n	8013ed4 <_printf_i+0xe8>
 8013ece:	0649      	lsls	r1, r1, #25
 8013ed0:	bf48      	it	mi
 8013ed2:	b2ad      	uxthmi	r5, r5
 8013ed4:	2f6f      	cmp	r7, #111	@ 0x6f
 8013ed6:	4853      	ldr	r0, [pc, #332]	@ (8014024 <_printf_i+0x238>)
 8013ed8:	6033      	str	r3, [r6, #0]
 8013eda:	bf14      	ite	ne
 8013edc:	230a      	movne	r3, #10
 8013ede:	2308      	moveq	r3, #8
 8013ee0:	2100      	movs	r1, #0
 8013ee2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013ee6:	6866      	ldr	r6, [r4, #4]
 8013ee8:	60a6      	str	r6, [r4, #8]
 8013eea:	2e00      	cmp	r6, #0
 8013eec:	bfa2      	ittt	ge
 8013eee:	6821      	ldrge	r1, [r4, #0]
 8013ef0:	f021 0104 	bicge.w	r1, r1, #4
 8013ef4:	6021      	strge	r1, [r4, #0]
 8013ef6:	b90d      	cbnz	r5, 8013efc <_printf_i+0x110>
 8013ef8:	2e00      	cmp	r6, #0
 8013efa:	d04b      	beq.n	8013f94 <_printf_i+0x1a8>
 8013efc:	4616      	mov	r6, r2
 8013efe:	fbb5 f1f3 	udiv	r1, r5, r3
 8013f02:	fb03 5711 	mls	r7, r3, r1, r5
 8013f06:	5dc7      	ldrb	r7, [r0, r7]
 8013f08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013f0c:	462f      	mov	r7, r5
 8013f0e:	42bb      	cmp	r3, r7
 8013f10:	460d      	mov	r5, r1
 8013f12:	d9f4      	bls.n	8013efe <_printf_i+0x112>
 8013f14:	2b08      	cmp	r3, #8
 8013f16:	d10b      	bne.n	8013f30 <_printf_i+0x144>
 8013f18:	6823      	ldr	r3, [r4, #0]
 8013f1a:	07df      	lsls	r7, r3, #31
 8013f1c:	d508      	bpl.n	8013f30 <_printf_i+0x144>
 8013f1e:	6923      	ldr	r3, [r4, #16]
 8013f20:	6861      	ldr	r1, [r4, #4]
 8013f22:	4299      	cmp	r1, r3
 8013f24:	bfde      	ittt	le
 8013f26:	2330      	movle	r3, #48	@ 0x30
 8013f28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013f2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013f30:	1b92      	subs	r2, r2, r6
 8013f32:	6122      	str	r2, [r4, #16]
 8013f34:	f8cd a000 	str.w	sl, [sp]
 8013f38:	464b      	mov	r3, r9
 8013f3a:	aa03      	add	r2, sp, #12
 8013f3c:	4621      	mov	r1, r4
 8013f3e:	4640      	mov	r0, r8
 8013f40:	f7ff fee6 	bl	8013d10 <_printf_common>
 8013f44:	3001      	adds	r0, #1
 8013f46:	d14a      	bne.n	8013fde <_printf_i+0x1f2>
 8013f48:	f04f 30ff 	mov.w	r0, #4294967295
 8013f4c:	b004      	add	sp, #16
 8013f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f52:	6823      	ldr	r3, [r4, #0]
 8013f54:	f043 0320 	orr.w	r3, r3, #32
 8013f58:	6023      	str	r3, [r4, #0]
 8013f5a:	4833      	ldr	r0, [pc, #204]	@ (8014028 <_printf_i+0x23c>)
 8013f5c:	2778      	movs	r7, #120	@ 0x78
 8013f5e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013f62:	6823      	ldr	r3, [r4, #0]
 8013f64:	6831      	ldr	r1, [r6, #0]
 8013f66:	061f      	lsls	r7, r3, #24
 8013f68:	f851 5b04 	ldr.w	r5, [r1], #4
 8013f6c:	d402      	bmi.n	8013f74 <_printf_i+0x188>
 8013f6e:	065f      	lsls	r7, r3, #25
 8013f70:	bf48      	it	mi
 8013f72:	b2ad      	uxthmi	r5, r5
 8013f74:	6031      	str	r1, [r6, #0]
 8013f76:	07d9      	lsls	r1, r3, #31
 8013f78:	bf44      	itt	mi
 8013f7a:	f043 0320 	orrmi.w	r3, r3, #32
 8013f7e:	6023      	strmi	r3, [r4, #0]
 8013f80:	b11d      	cbz	r5, 8013f8a <_printf_i+0x19e>
 8013f82:	2310      	movs	r3, #16
 8013f84:	e7ac      	b.n	8013ee0 <_printf_i+0xf4>
 8013f86:	4827      	ldr	r0, [pc, #156]	@ (8014024 <_printf_i+0x238>)
 8013f88:	e7e9      	b.n	8013f5e <_printf_i+0x172>
 8013f8a:	6823      	ldr	r3, [r4, #0]
 8013f8c:	f023 0320 	bic.w	r3, r3, #32
 8013f90:	6023      	str	r3, [r4, #0]
 8013f92:	e7f6      	b.n	8013f82 <_printf_i+0x196>
 8013f94:	4616      	mov	r6, r2
 8013f96:	e7bd      	b.n	8013f14 <_printf_i+0x128>
 8013f98:	6833      	ldr	r3, [r6, #0]
 8013f9a:	6825      	ldr	r5, [r4, #0]
 8013f9c:	6961      	ldr	r1, [r4, #20]
 8013f9e:	1d18      	adds	r0, r3, #4
 8013fa0:	6030      	str	r0, [r6, #0]
 8013fa2:	062e      	lsls	r6, r5, #24
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	d501      	bpl.n	8013fac <_printf_i+0x1c0>
 8013fa8:	6019      	str	r1, [r3, #0]
 8013faa:	e002      	b.n	8013fb2 <_printf_i+0x1c6>
 8013fac:	0668      	lsls	r0, r5, #25
 8013fae:	d5fb      	bpl.n	8013fa8 <_printf_i+0x1bc>
 8013fb0:	8019      	strh	r1, [r3, #0]
 8013fb2:	2300      	movs	r3, #0
 8013fb4:	6123      	str	r3, [r4, #16]
 8013fb6:	4616      	mov	r6, r2
 8013fb8:	e7bc      	b.n	8013f34 <_printf_i+0x148>
 8013fba:	6833      	ldr	r3, [r6, #0]
 8013fbc:	1d1a      	adds	r2, r3, #4
 8013fbe:	6032      	str	r2, [r6, #0]
 8013fc0:	681e      	ldr	r6, [r3, #0]
 8013fc2:	6862      	ldr	r2, [r4, #4]
 8013fc4:	2100      	movs	r1, #0
 8013fc6:	4630      	mov	r0, r6
 8013fc8:	f7ec f912 	bl	80001f0 <memchr>
 8013fcc:	b108      	cbz	r0, 8013fd2 <_printf_i+0x1e6>
 8013fce:	1b80      	subs	r0, r0, r6
 8013fd0:	6060      	str	r0, [r4, #4]
 8013fd2:	6863      	ldr	r3, [r4, #4]
 8013fd4:	6123      	str	r3, [r4, #16]
 8013fd6:	2300      	movs	r3, #0
 8013fd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013fdc:	e7aa      	b.n	8013f34 <_printf_i+0x148>
 8013fde:	6923      	ldr	r3, [r4, #16]
 8013fe0:	4632      	mov	r2, r6
 8013fe2:	4649      	mov	r1, r9
 8013fe4:	4640      	mov	r0, r8
 8013fe6:	47d0      	blx	sl
 8013fe8:	3001      	adds	r0, #1
 8013fea:	d0ad      	beq.n	8013f48 <_printf_i+0x15c>
 8013fec:	6823      	ldr	r3, [r4, #0]
 8013fee:	079b      	lsls	r3, r3, #30
 8013ff0:	d413      	bmi.n	801401a <_printf_i+0x22e>
 8013ff2:	68e0      	ldr	r0, [r4, #12]
 8013ff4:	9b03      	ldr	r3, [sp, #12]
 8013ff6:	4298      	cmp	r0, r3
 8013ff8:	bfb8      	it	lt
 8013ffa:	4618      	movlt	r0, r3
 8013ffc:	e7a6      	b.n	8013f4c <_printf_i+0x160>
 8013ffe:	2301      	movs	r3, #1
 8014000:	4632      	mov	r2, r6
 8014002:	4649      	mov	r1, r9
 8014004:	4640      	mov	r0, r8
 8014006:	47d0      	blx	sl
 8014008:	3001      	adds	r0, #1
 801400a:	d09d      	beq.n	8013f48 <_printf_i+0x15c>
 801400c:	3501      	adds	r5, #1
 801400e:	68e3      	ldr	r3, [r4, #12]
 8014010:	9903      	ldr	r1, [sp, #12]
 8014012:	1a5b      	subs	r3, r3, r1
 8014014:	42ab      	cmp	r3, r5
 8014016:	dcf2      	bgt.n	8013ffe <_printf_i+0x212>
 8014018:	e7eb      	b.n	8013ff2 <_printf_i+0x206>
 801401a:	2500      	movs	r5, #0
 801401c:	f104 0619 	add.w	r6, r4, #25
 8014020:	e7f5      	b.n	801400e <_printf_i+0x222>
 8014022:	bf00      	nop
 8014024:	08015dad 	.word	0x08015dad
 8014028:	08015dbe 	.word	0x08015dbe

0801402c <__sflush_r>:
 801402c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014034:	0716      	lsls	r6, r2, #28
 8014036:	4605      	mov	r5, r0
 8014038:	460c      	mov	r4, r1
 801403a:	d454      	bmi.n	80140e6 <__sflush_r+0xba>
 801403c:	684b      	ldr	r3, [r1, #4]
 801403e:	2b00      	cmp	r3, #0
 8014040:	dc02      	bgt.n	8014048 <__sflush_r+0x1c>
 8014042:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014044:	2b00      	cmp	r3, #0
 8014046:	dd48      	ble.n	80140da <__sflush_r+0xae>
 8014048:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801404a:	2e00      	cmp	r6, #0
 801404c:	d045      	beq.n	80140da <__sflush_r+0xae>
 801404e:	2300      	movs	r3, #0
 8014050:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014054:	682f      	ldr	r7, [r5, #0]
 8014056:	6a21      	ldr	r1, [r4, #32]
 8014058:	602b      	str	r3, [r5, #0]
 801405a:	d030      	beq.n	80140be <__sflush_r+0x92>
 801405c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801405e:	89a3      	ldrh	r3, [r4, #12]
 8014060:	0759      	lsls	r1, r3, #29
 8014062:	d505      	bpl.n	8014070 <__sflush_r+0x44>
 8014064:	6863      	ldr	r3, [r4, #4]
 8014066:	1ad2      	subs	r2, r2, r3
 8014068:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801406a:	b10b      	cbz	r3, 8014070 <__sflush_r+0x44>
 801406c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801406e:	1ad2      	subs	r2, r2, r3
 8014070:	2300      	movs	r3, #0
 8014072:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014074:	6a21      	ldr	r1, [r4, #32]
 8014076:	4628      	mov	r0, r5
 8014078:	47b0      	blx	r6
 801407a:	1c43      	adds	r3, r0, #1
 801407c:	89a3      	ldrh	r3, [r4, #12]
 801407e:	d106      	bne.n	801408e <__sflush_r+0x62>
 8014080:	6829      	ldr	r1, [r5, #0]
 8014082:	291d      	cmp	r1, #29
 8014084:	d82b      	bhi.n	80140de <__sflush_r+0xb2>
 8014086:	4a2a      	ldr	r2, [pc, #168]	@ (8014130 <__sflush_r+0x104>)
 8014088:	410a      	asrs	r2, r1
 801408a:	07d6      	lsls	r6, r2, #31
 801408c:	d427      	bmi.n	80140de <__sflush_r+0xb2>
 801408e:	2200      	movs	r2, #0
 8014090:	6062      	str	r2, [r4, #4]
 8014092:	04d9      	lsls	r1, r3, #19
 8014094:	6922      	ldr	r2, [r4, #16]
 8014096:	6022      	str	r2, [r4, #0]
 8014098:	d504      	bpl.n	80140a4 <__sflush_r+0x78>
 801409a:	1c42      	adds	r2, r0, #1
 801409c:	d101      	bne.n	80140a2 <__sflush_r+0x76>
 801409e:	682b      	ldr	r3, [r5, #0]
 80140a0:	b903      	cbnz	r3, 80140a4 <__sflush_r+0x78>
 80140a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80140a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80140a6:	602f      	str	r7, [r5, #0]
 80140a8:	b1b9      	cbz	r1, 80140da <__sflush_r+0xae>
 80140aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80140ae:	4299      	cmp	r1, r3
 80140b0:	d002      	beq.n	80140b8 <__sflush_r+0x8c>
 80140b2:	4628      	mov	r0, r5
 80140b4:	f7ff fca0 	bl	80139f8 <_free_r>
 80140b8:	2300      	movs	r3, #0
 80140ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80140bc:	e00d      	b.n	80140da <__sflush_r+0xae>
 80140be:	2301      	movs	r3, #1
 80140c0:	4628      	mov	r0, r5
 80140c2:	47b0      	blx	r6
 80140c4:	4602      	mov	r2, r0
 80140c6:	1c50      	adds	r0, r2, #1
 80140c8:	d1c9      	bne.n	801405e <__sflush_r+0x32>
 80140ca:	682b      	ldr	r3, [r5, #0]
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d0c6      	beq.n	801405e <__sflush_r+0x32>
 80140d0:	2b1d      	cmp	r3, #29
 80140d2:	d001      	beq.n	80140d8 <__sflush_r+0xac>
 80140d4:	2b16      	cmp	r3, #22
 80140d6:	d11e      	bne.n	8014116 <__sflush_r+0xea>
 80140d8:	602f      	str	r7, [r5, #0]
 80140da:	2000      	movs	r0, #0
 80140dc:	e022      	b.n	8014124 <__sflush_r+0xf8>
 80140de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80140e2:	b21b      	sxth	r3, r3
 80140e4:	e01b      	b.n	801411e <__sflush_r+0xf2>
 80140e6:	690f      	ldr	r7, [r1, #16]
 80140e8:	2f00      	cmp	r7, #0
 80140ea:	d0f6      	beq.n	80140da <__sflush_r+0xae>
 80140ec:	0793      	lsls	r3, r2, #30
 80140ee:	680e      	ldr	r6, [r1, #0]
 80140f0:	bf08      	it	eq
 80140f2:	694b      	ldreq	r3, [r1, #20]
 80140f4:	600f      	str	r7, [r1, #0]
 80140f6:	bf18      	it	ne
 80140f8:	2300      	movne	r3, #0
 80140fa:	eba6 0807 	sub.w	r8, r6, r7
 80140fe:	608b      	str	r3, [r1, #8]
 8014100:	f1b8 0f00 	cmp.w	r8, #0
 8014104:	dde9      	ble.n	80140da <__sflush_r+0xae>
 8014106:	6a21      	ldr	r1, [r4, #32]
 8014108:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801410a:	4643      	mov	r3, r8
 801410c:	463a      	mov	r2, r7
 801410e:	4628      	mov	r0, r5
 8014110:	47b0      	blx	r6
 8014112:	2800      	cmp	r0, #0
 8014114:	dc08      	bgt.n	8014128 <__sflush_r+0xfc>
 8014116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801411a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801411e:	81a3      	strh	r3, [r4, #12]
 8014120:	f04f 30ff 	mov.w	r0, #4294967295
 8014124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014128:	4407      	add	r7, r0
 801412a:	eba8 0800 	sub.w	r8, r8, r0
 801412e:	e7e7      	b.n	8014100 <__sflush_r+0xd4>
 8014130:	dfbffffe 	.word	0xdfbffffe

08014134 <_fflush_r>:
 8014134:	b538      	push	{r3, r4, r5, lr}
 8014136:	690b      	ldr	r3, [r1, #16]
 8014138:	4605      	mov	r5, r0
 801413a:	460c      	mov	r4, r1
 801413c:	b913      	cbnz	r3, 8014144 <_fflush_r+0x10>
 801413e:	2500      	movs	r5, #0
 8014140:	4628      	mov	r0, r5
 8014142:	bd38      	pop	{r3, r4, r5, pc}
 8014144:	b118      	cbz	r0, 801414e <_fflush_r+0x1a>
 8014146:	6a03      	ldr	r3, [r0, #32]
 8014148:	b90b      	cbnz	r3, 801414e <_fflush_r+0x1a>
 801414a:	f7ff fa8f 	bl	801366c <__sinit>
 801414e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d0f3      	beq.n	801413e <_fflush_r+0xa>
 8014156:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014158:	07d0      	lsls	r0, r2, #31
 801415a:	d404      	bmi.n	8014166 <_fflush_r+0x32>
 801415c:	0599      	lsls	r1, r3, #22
 801415e:	d402      	bmi.n	8014166 <_fflush_r+0x32>
 8014160:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014162:	f7ff fbdc 	bl	801391e <__retarget_lock_acquire_recursive>
 8014166:	4628      	mov	r0, r5
 8014168:	4621      	mov	r1, r4
 801416a:	f7ff ff5f 	bl	801402c <__sflush_r>
 801416e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014170:	07da      	lsls	r2, r3, #31
 8014172:	4605      	mov	r5, r0
 8014174:	d4e4      	bmi.n	8014140 <_fflush_r+0xc>
 8014176:	89a3      	ldrh	r3, [r4, #12]
 8014178:	059b      	lsls	r3, r3, #22
 801417a:	d4e1      	bmi.n	8014140 <_fflush_r+0xc>
 801417c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801417e:	f7ff fbcf 	bl	8013920 <__retarget_lock_release_recursive>
 8014182:	e7dd      	b.n	8014140 <_fflush_r+0xc>

08014184 <__swbuf_r>:
 8014184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014186:	460e      	mov	r6, r1
 8014188:	4614      	mov	r4, r2
 801418a:	4605      	mov	r5, r0
 801418c:	b118      	cbz	r0, 8014196 <__swbuf_r+0x12>
 801418e:	6a03      	ldr	r3, [r0, #32]
 8014190:	b90b      	cbnz	r3, 8014196 <__swbuf_r+0x12>
 8014192:	f7ff fa6b 	bl	801366c <__sinit>
 8014196:	69a3      	ldr	r3, [r4, #24]
 8014198:	60a3      	str	r3, [r4, #8]
 801419a:	89a3      	ldrh	r3, [r4, #12]
 801419c:	071a      	lsls	r2, r3, #28
 801419e:	d501      	bpl.n	80141a4 <__swbuf_r+0x20>
 80141a0:	6923      	ldr	r3, [r4, #16]
 80141a2:	b943      	cbnz	r3, 80141b6 <__swbuf_r+0x32>
 80141a4:	4621      	mov	r1, r4
 80141a6:	4628      	mov	r0, r5
 80141a8:	f000 f82a 	bl	8014200 <__swsetup_r>
 80141ac:	b118      	cbz	r0, 80141b6 <__swbuf_r+0x32>
 80141ae:	f04f 37ff 	mov.w	r7, #4294967295
 80141b2:	4638      	mov	r0, r7
 80141b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141b6:	6823      	ldr	r3, [r4, #0]
 80141b8:	6922      	ldr	r2, [r4, #16]
 80141ba:	1a98      	subs	r0, r3, r2
 80141bc:	6963      	ldr	r3, [r4, #20]
 80141be:	b2f6      	uxtb	r6, r6
 80141c0:	4283      	cmp	r3, r0
 80141c2:	4637      	mov	r7, r6
 80141c4:	dc05      	bgt.n	80141d2 <__swbuf_r+0x4e>
 80141c6:	4621      	mov	r1, r4
 80141c8:	4628      	mov	r0, r5
 80141ca:	f7ff ffb3 	bl	8014134 <_fflush_r>
 80141ce:	2800      	cmp	r0, #0
 80141d0:	d1ed      	bne.n	80141ae <__swbuf_r+0x2a>
 80141d2:	68a3      	ldr	r3, [r4, #8]
 80141d4:	3b01      	subs	r3, #1
 80141d6:	60a3      	str	r3, [r4, #8]
 80141d8:	6823      	ldr	r3, [r4, #0]
 80141da:	1c5a      	adds	r2, r3, #1
 80141dc:	6022      	str	r2, [r4, #0]
 80141de:	701e      	strb	r6, [r3, #0]
 80141e0:	6962      	ldr	r2, [r4, #20]
 80141e2:	1c43      	adds	r3, r0, #1
 80141e4:	429a      	cmp	r2, r3
 80141e6:	d004      	beq.n	80141f2 <__swbuf_r+0x6e>
 80141e8:	89a3      	ldrh	r3, [r4, #12]
 80141ea:	07db      	lsls	r3, r3, #31
 80141ec:	d5e1      	bpl.n	80141b2 <__swbuf_r+0x2e>
 80141ee:	2e0a      	cmp	r6, #10
 80141f0:	d1df      	bne.n	80141b2 <__swbuf_r+0x2e>
 80141f2:	4621      	mov	r1, r4
 80141f4:	4628      	mov	r0, r5
 80141f6:	f7ff ff9d 	bl	8014134 <_fflush_r>
 80141fa:	2800      	cmp	r0, #0
 80141fc:	d0d9      	beq.n	80141b2 <__swbuf_r+0x2e>
 80141fe:	e7d6      	b.n	80141ae <__swbuf_r+0x2a>

08014200 <__swsetup_r>:
 8014200:	b538      	push	{r3, r4, r5, lr}
 8014202:	4b29      	ldr	r3, [pc, #164]	@ (80142a8 <__swsetup_r+0xa8>)
 8014204:	4605      	mov	r5, r0
 8014206:	6818      	ldr	r0, [r3, #0]
 8014208:	460c      	mov	r4, r1
 801420a:	b118      	cbz	r0, 8014214 <__swsetup_r+0x14>
 801420c:	6a03      	ldr	r3, [r0, #32]
 801420e:	b90b      	cbnz	r3, 8014214 <__swsetup_r+0x14>
 8014210:	f7ff fa2c 	bl	801366c <__sinit>
 8014214:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014218:	0719      	lsls	r1, r3, #28
 801421a:	d422      	bmi.n	8014262 <__swsetup_r+0x62>
 801421c:	06da      	lsls	r2, r3, #27
 801421e:	d407      	bmi.n	8014230 <__swsetup_r+0x30>
 8014220:	2209      	movs	r2, #9
 8014222:	602a      	str	r2, [r5, #0]
 8014224:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014228:	81a3      	strh	r3, [r4, #12]
 801422a:	f04f 30ff 	mov.w	r0, #4294967295
 801422e:	e033      	b.n	8014298 <__swsetup_r+0x98>
 8014230:	0758      	lsls	r0, r3, #29
 8014232:	d512      	bpl.n	801425a <__swsetup_r+0x5a>
 8014234:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014236:	b141      	cbz	r1, 801424a <__swsetup_r+0x4a>
 8014238:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801423c:	4299      	cmp	r1, r3
 801423e:	d002      	beq.n	8014246 <__swsetup_r+0x46>
 8014240:	4628      	mov	r0, r5
 8014242:	f7ff fbd9 	bl	80139f8 <_free_r>
 8014246:	2300      	movs	r3, #0
 8014248:	6363      	str	r3, [r4, #52]	@ 0x34
 801424a:	89a3      	ldrh	r3, [r4, #12]
 801424c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014250:	81a3      	strh	r3, [r4, #12]
 8014252:	2300      	movs	r3, #0
 8014254:	6063      	str	r3, [r4, #4]
 8014256:	6923      	ldr	r3, [r4, #16]
 8014258:	6023      	str	r3, [r4, #0]
 801425a:	89a3      	ldrh	r3, [r4, #12]
 801425c:	f043 0308 	orr.w	r3, r3, #8
 8014260:	81a3      	strh	r3, [r4, #12]
 8014262:	6923      	ldr	r3, [r4, #16]
 8014264:	b94b      	cbnz	r3, 801427a <__swsetup_r+0x7a>
 8014266:	89a3      	ldrh	r3, [r4, #12]
 8014268:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801426c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014270:	d003      	beq.n	801427a <__swsetup_r+0x7a>
 8014272:	4621      	mov	r1, r4
 8014274:	4628      	mov	r0, r5
 8014276:	f000 f83f 	bl	80142f8 <__smakebuf_r>
 801427a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801427e:	f013 0201 	ands.w	r2, r3, #1
 8014282:	d00a      	beq.n	801429a <__swsetup_r+0x9a>
 8014284:	2200      	movs	r2, #0
 8014286:	60a2      	str	r2, [r4, #8]
 8014288:	6962      	ldr	r2, [r4, #20]
 801428a:	4252      	negs	r2, r2
 801428c:	61a2      	str	r2, [r4, #24]
 801428e:	6922      	ldr	r2, [r4, #16]
 8014290:	b942      	cbnz	r2, 80142a4 <__swsetup_r+0xa4>
 8014292:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014296:	d1c5      	bne.n	8014224 <__swsetup_r+0x24>
 8014298:	bd38      	pop	{r3, r4, r5, pc}
 801429a:	0799      	lsls	r1, r3, #30
 801429c:	bf58      	it	pl
 801429e:	6962      	ldrpl	r2, [r4, #20]
 80142a0:	60a2      	str	r2, [r4, #8]
 80142a2:	e7f4      	b.n	801428e <__swsetup_r+0x8e>
 80142a4:	2000      	movs	r0, #0
 80142a6:	e7f7      	b.n	8014298 <__swsetup_r+0x98>
 80142a8:	2000009c 	.word	0x2000009c

080142ac <__swhatbuf_r>:
 80142ac:	b570      	push	{r4, r5, r6, lr}
 80142ae:	460c      	mov	r4, r1
 80142b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80142b4:	2900      	cmp	r1, #0
 80142b6:	b096      	sub	sp, #88	@ 0x58
 80142b8:	4615      	mov	r5, r2
 80142ba:	461e      	mov	r6, r3
 80142bc:	da0d      	bge.n	80142da <__swhatbuf_r+0x2e>
 80142be:	89a3      	ldrh	r3, [r4, #12]
 80142c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80142c4:	f04f 0100 	mov.w	r1, #0
 80142c8:	bf14      	ite	ne
 80142ca:	2340      	movne	r3, #64	@ 0x40
 80142cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80142d0:	2000      	movs	r0, #0
 80142d2:	6031      	str	r1, [r6, #0]
 80142d4:	602b      	str	r3, [r5, #0]
 80142d6:	b016      	add	sp, #88	@ 0x58
 80142d8:	bd70      	pop	{r4, r5, r6, pc}
 80142da:	466a      	mov	r2, sp
 80142dc:	f000 f848 	bl	8014370 <_fstat_r>
 80142e0:	2800      	cmp	r0, #0
 80142e2:	dbec      	blt.n	80142be <__swhatbuf_r+0x12>
 80142e4:	9901      	ldr	r1, [sp, #4]
 80142e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80142ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80142ee:	4259      	negs	r1, r3
 80142f0:	4159      	adcs	r1, r3
 80142f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80142f6:	e7eb      	b.n	80142d0 <__swhatbuf_r+0x24>

080142f8 <__smakebuf_r>:
 80142f8:	898b      	ldrh	r3, [r1, #12]
 80142fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80142fc:	079d      	lsls	r5, r3, #30
 80142fe:	4606      	mov	r6, r0
 8014300:	460c      	mov	r4, r1
 8014302:	d507      	bpl.n	8014314 <__smakebuf_r+0x1c>
 8014304:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014308:	6023      	str	r3, [r4, #0]
 801430a:	6123      	str	r3, [r4, #16]
 801430c:	2301      	movs	r3, #1
 801430e:	6163      	str	r3, [r4, #20]
 8014310:	b003      	add	sp, #12
 8014312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014314:	ab01      	add	r3, sp, #4
 8014316:	466a      	mov	r2, sp
 8014318:	f7ff ffc8 	bl	80142ac <__swhatbuf_r>
 801431c:	9f00      	ldr	r7, [sp, #0]
 801431e:	4605      	mov	r5, r0
 8014320:	4639      	mov	r1, r7
 8014322:	4630      	mov	r0, r6
 8014324:	f7ff f87c 	bl	8013420 <_malloc_r>
 8014328:	b948      	cbnz	r0, 801433e <__smakebuf_r+0x46>
 801432a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801432e:	059a      	lsls	r2, r3, #22
 8014330:	d4ee      	bmi.n	8014310 <__smakebuf_r+0x18>
 8014332:	f023 0303 	bic.w	r3, r3, #3
 8014336:	f043 0302 	orr.w	r3, r3, #2
 801433a:	81a3      	strh	r3, [r4, #12]
 801433c:	e7e2      	b.n	8014304 <__smakebuf_r+0xc>
 801433e:	89a3      	ldrh	r3, [r4, #12]
 8014340:	6020      	str	r0, [r4, #0]
 8014342:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014346:	81a3      	strh	r3, [r4, #12]
 8014348:	9b01      	ldr	r3, [sp, #4]
 801434a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801434e:	b15b      	cbz	r3, 8014368 <__smakebuf_r+0x70>
 8014350:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014354:	4630      	mov	r0, r6
 8014356:	f000 f81d 	bl	8014394 <_isatty_r>
 801435a:	b128      	cbz	r0, 8014368 <__smakebuf_r+0x70>
 801435c:	89a3      	ldrh	r3, [r4, #12]
 801435e:	f023 0303 	bic.w	r3, r3, #3
 8014362:	f043 0301 	orr.w	r3, r3, #1
 8014366:	81a3      	strh	r3, [r4, #12]
 8014368:	89a3      	ldrh	r3, [r4, #12]
 801436a:	431d      	orrs	r5, r3
 801436c:	81a5      	strh	r5, [r4, #12]
 801436e:	e7cf      	b.n	8014310 <__smakebuf_r+0x18>

08014370 <_fstat_r>:
 8014370:	b538      	push	{r3, r4, r5, lr}
 8014372:	4d07      	ldr	r5, [pc, #28]	@ (8014390 <_fstat_r+0x20>)
 8014374:	2300      	movs	r3, #0
 8014376:	4604      	mov	r4, r0
 8014378:	4608      	mov	r0, r1
 801437a:	4611      	mov	r1, r2
 801437c:	602b      	str	r3, [r5, #0]
 801437e:	f7ed fe42 	bl	8002006 <_fstat>
 8014382:	1c43      	adds	r3, r0, #1
 8014384:	d102      	bne.n	801438c <_fstat_r+0x1c>
 8014386:	682b      	ldr	r3, [r5, #0]
 8014388:	b103      	cbz	r3, 801438c <_fstat_r+0x1c>
 801438a:	6023      	str	r3, [r4, #0]
 801438c:	bd38      	pop	{r3, r4, r5, pc}
 801438e:	bf00      	nop
 8014390:	2001282c 	.word	0x2001282c

08014394 <_isatty_r>:
 8014394:	b538      	push	{r3, r4, r5, lr}
 8014396:	4d06      	ldr	r5, [pc, #24]	@ (80143b0 <_isatty_r+0x1c>)
 8014398:	2300      	movs	r3, #0
 801439a:	4604      	mov	r4, r0
 801439c:	4608      	mov	r0, r1
 801439e:	602b      	str	r3, [r5, #0]
 80143a0:	f7ed fe36 	bl	8002010 <_isatty>
 80143a4:	1c43      	adds	r3, r0, #1
 80143a6:	d102      	bne.n	80143ae <_isatty_r+0x1a>
 80143a8:	682b      	ldr	r3, [r5, #0]
 80143aa:	b103      	cbz	r3, 80143ae <_isatty_r+0x1a>
 80143ac:	6023      	str	r3, [r4, #0]
 80143ae:	bd38      	pop	{r3, r4, r5, pc}
 80143b0:	2001282c 	.word	0x2001282c

080143b4 <_init>:
 80143b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143b6:	bf00      	nop
 80143b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80143ba:	bc08      	pop	{r3}
 80143bc:	469e      	mov	lr, r3
 80143be:	4770      	bx	lr

080143c0 <_fini>:
 80143c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143c2:	bf00      	nop
 80143c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80143c6:	bc08      	pop	{r3}
 80143c8:	469e      	mov	lr, r3
 80143ca:	4770      	bx	lr
